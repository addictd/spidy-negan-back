!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="./",n(n.s=209)}([function(e,t,n){"use strict";e.exports=n(85)},function(e,t,n){e.exports=n(91)()},function(e,t){e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.exports=function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}},function(e,t,n){var r=n(89),o=n(9);e.exports=function(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?o(e):t}},function(e,t){function n(t){return e.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},n(t)}e.exports=n},function(e,t,n){var r=n(90);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&r(e,t)}},function(e,t,n){"use strict";n.r(t),n.d(t,"__DO_NOT_USE__ActionTypes",(function(){return i})),n.d(t,"applyMiddleware",(function(){return g})),n.d(t,"bindActionCreators",(function(){return f})),n.d(t,"combineReducers",(function(){return c})),n.d(t,"compose",(function(){return m})),n.d(t,"createStore",(function(){return s}));var r=n(40),o=function(){return Math.random().toString(36).substring(7).split("").join(".")},i={INIT:"@@redux/INIT"+o(),REPLACE:"@@redux/REPLACE"+o(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+o()}};function a(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function s(e,t,n){var o;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(s)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var l=e,c=t,u=[],f=u,p=!1;function d(){f===u&&(f=u.slice())}function h(){if(p)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return c}function m(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(p)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return d(),f.push(e),function(){if(t){if(p)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,d();var n=f.indexOf(e);f.splice(n,1)}}}function g(e){if(!a(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(p)throw new Error("Reducers may not dispatch actions.");try{p=!0,c=l(c,e)}finally{p=!1}for(var t=u=f,n=0;n<t.length;n++){(0,t[n])()}return e}return g({type:i.INIT}),(o={dispatch:g,subscribe:m,getState:h,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");l=e,g({type:i.REPLACE})}})[r.a]=function(){var e,t=m;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e},o}function l(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function c(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var a,s=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:i.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:i.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+i.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var r=!1,o={},i=0;i<s.length;i++){var c=s[i],u=n[c],f=e[c],p=u(f,t);if(void 0===p){var d=l(c,t);throw new Error(d)}o[c]=p,r=r||p!==f}return r?o:e}}function u(e,t){return function(){return t(e.apply(this,arguments))}}function f(e,t){if("function"==typeof e)return u(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=u(o,t))}return n}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function d(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(n,!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function g(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return h({},n,{dispatch:r=m.apply(void 0,i)(n.dispatch)})}}}},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},function(e,t){e.exports={PORT:80,SERVER_URL:"http://ec2-54-172-229-66.compute-1.amazonaws.com",SERVER_PORT:80,TOKEN:"xxx-prod-crawler"}},function(e,t,n){e.exports=n(107)},function(e,t,n){"use strict";var r=n(44),o=n(110),i=Object.prototype.toString;function a(e){return"[object Array]"===i.call(e)}function s(e){return null!==e&&"object"==typeof e}function l(e){return"[object Function]"===i.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:l,isStream:function(e){return s(e)&&l(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:c,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},deepMerge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]="object"==typeof n?e({},n):n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){var r=n(158),o=n(159),i=n(160);e.exports=function(e){return r(e)||o(e)||i()}},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot).concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}var a,s,l;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r=0;r<e.length;r++){var o=[].concat(e[r]);n&&(o[2]?o[2]="".concat(n," and ").concat(o[2]):o[2]=n),t.push(o)}},t}},function(e,t,n){"use strict";var r,o={},i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}();function s(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function l(e,t){for(var n=0;n<e.length;n++){var r=e[n],i=o[r.id],a=0;if(i){for(i.refs++;a<i.parts.length;a++)i.parts[a](r.parts[a]);for(;a<r.parts.length;a++)i.parts.push(g(r.parts[a],t))}else{for(var s=[];a<r.parts.length;a++)s.push(g(r.parts[a],t));o[r.id]={id:r.id,refs:1,parts:s}}}}function c(e){var t=document.createElement("style");if(void 0===e.attributes.nonce){var r=n.nc;r&&(e.attributes.nonce=r)}if(Object.keys(e.attributes).forEach((function(n){t.setAttribute(n,e.attributes[n])})),"function"==typeof e.insert)e.insert(t);else{var o=a(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var u,f=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function p(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function d(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o&&e.setAttribute("media",o),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,m=0;function g(e,t){var n,r,o;if(t.singleton){var i=m++;n=h||(h=c(t)),r=p.bind(null,n,i,!1),o=p.bind(null,n,i,!0)}else n=c(t),r=d.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).attributes="object"==typeof t.attributes?t.attributes:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i());var n=s(e,t);return l(n,t),function(e){for(var r=[],i=0;i<n.length;i++){var a=n[i],c=o[a.id];c&&(c.refs--,r.push(c))}e&&l(s(e,t),t);for(var u=0;u<r.length;u++){var f=r[u];if(0===f.refs){for(var p=0;p<f.parts.length;p++)f.parts[p]();delete o[f.id]}}}}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,s){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,a,s],u=0;(l=new Error(t.replace(/%s/g,(function(){return c[u++]})))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t){function n(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}e.exports=function(e){return function(){var t=this,r=arguments;return new Promise((function(o,i){var a=e.apply(t,r);function s(e){n(a,o,i,s,l,"next",e)}function l(e){n(a,o,i,s,l,"throw",e)}s(void 0)}))}}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(86)},function(e,t,n){var r,o=n(144),i=n(60),a=n(146),s=n(147),l=n(148);"undefined"!=typeof ArrayBuffer&&(r=n(149));var c="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),u="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),f=c||u;t.protocol=3;var p=t.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},d=o(p),h={type:"error",data:"parser error"},m=n(150);function g(e,t,n){for(var r=new Array(e.length),o=s(e.length,n),i=function(e,n,o){t(n,(function(t,n){r[e]=n,o(t,r)}))},a=0;a<e.length;a++)i(a,e[a],o)}t.encodePacket=function(e,n,r,o){"function"==typeof n&&(o=n,n=!1),"function"==typeof r&&(o=r,r=null);var i=void 0===e.data?void 0:e.data.buffer||e.data;if("undefined"!=typeof ArrayBuffer&&i instanceof ArrayBuffer)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);var o=e.data,i=new Uint8Array(o),a=new Uint8Array(1+o.byteLength);a[0]=p[e.type];for(var s=0;s<i.length;s++)a[s+1]=i[s];return r(a.buffer)}(e,n,o);if(void 0!==m&&i instanceof m)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);if(f)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);var o=new FileReader;return o.onload=function(){t.encodePacket({type:e.type,data:o.result},n,!0,r)},o.readAsArrayBuffer(e.data)}(e,n,r);var o=new Uint8Array(1);o[0]=p[e.type];var i=new m([o.buffer,e.data]);return r(i)}(e,n,o);if(i&&i.base64)return function(e,n){var r="b"+t.packets[e.type]+e.data.data;return n(r)}(e,o);var a=p[e.type];return void 0!==e.data&&(a+=r?l.encode(String(e.data),{strict:!1}):String(e.data)),o(""+a)},t.encodeBase64Packet=function(e,n){var r,o="b"+t.packets[e.type];if(void 0!==m&&e.data instanceof m){var i=new FileReader;return i.onload=function(){var e=i.result.split(",")[1];n(o+e)},i.readAsDataURL(e.data)}try{r=String.fromCharCode.apply(null,new Uint8Array(e.data))}catch(t){for(var a=new Uint8Array(e.data),s=new Array(a.length),l=0;l<a.length;l++)s[l]=a[l];r=String.fromCharCode.apply(null,s)}return o+=btoa(r),n(o)},t.decodePacket=function(e,n,r){if(void 0===e)return h;if("string"==typeof e){if("b"===e.charAt(0))return t.decodeBase64Packet(e.substr(1),n);if(r&&!1===(e=function(e){try{e=l.decode(e,{strict:!1})}catch(e){return!1}return e}(e)))return h;var o=e.charAt(0);return Number(o)==o&&d[o]?e.length>1?{type:d[o],data:e.substring(1)}:{type:d[o]}:h}o=new Uint8Array(e)[0];var i=a(e,1);return m&&"blob"===n&&(i=new m([i])),{type:d[o],data:i}},t.decodeBase64Packet=function(e,t){var n=d[e.charAt(0)];if(!r)return{type:n,data:{base64:!0,data:e.substr(1)}};var o=r.decode(e.substr(1));return"blob"===t&&m&&(o=new m([o])),{type:n,data:o}},t.encodePayload=function(e,n,r){"function"==typeof n&&(r=n,n=null);var o=i(e);if(n&&o)return m&&!f?t.encodePayloadAsBlob(e,r):t.encodePayloadAsArrayBuffer(e,r);if(!e.length)return r("0:");g(e,(function(e,r){t.encodePacket(e,!!o&&n,!1,(function(e){r(null,function(e){return e.length+":"+e}(e))}))}),(function(e,t){return r(t.join(""))}))},t.decodePayload=function(e,n,r){if("string"!=typeof e)return t.decodePayloadAsBinary(e,n,r);var o;if("function"==typeof n&&(r=n,n=null),""===e)return r(h,0,1);for(var i,a,s="",l=0,c=e.length;l<c;l++){var u=e.charAt(l);if(":"===u){if(""===s||s!=(i=Number(s)))return r(h,0,1);if(s!=(a=e.substr(l+1,i)).length)return r(h,0,1);if(a.length){if(o=t.decodePacket(a,n,!1),h.type===o.type&&h.data===o.data)return r(h,0,1);if(!1===r(o,l+i,c))return}l+=i,s=""}else s+=u}return""!==s?r(h,0,1):void 0},t.encodePayloadAsArrayBuffer=function(e,n){if(!e.length)return n(new ArrayBuffer(0));g(e,(function(e,n){t.encodePacket(e,!0,!0,(function(e){return n(null,e)}))}),(function(e,t){var r=t.reduce((function(e,t){var n;return e+(n="string"==typeof t?t.length:t.byteLength).toString().length+n+2}),0),o=new Uint8Array(r),i=0;return t.forEach((function(e){var t="string"==typeof e,n=e;if(t){for(var r=new Uint8Array(e.length),a=0;a<e.length;a++)r[a]=e.charCodeAt(a);n=r.buffer}o[i++]=t?0:1;var s=n.byteLength.toString();for(a=0;a<s.length;a++)o[i++]=parseInt(s[a]);o[i++]=255;for(r=new Uint8Array(n),a=0;a<r.length;a++)o[i++]=r[a]})),n(o.buffer)}))},t.encodePayloadAsBlob=function(e,n){g(e,(function(e,n){t.encodePacket(e,!0,!0,(function(e){var t=new Uint8Array(1);if(t[0]=1,"string"==typeof e){for(var r=new Uint8Array(e.length),o=0;o<e.length;o++)r[o]=e.charCodeAt(o);e=r.buffer,t[0]=0}var i=(e instanceof ArrayBuffer?e.byteLength:e.size).toString(),a=new Uint8Array(i.length+1);for(o=0;o<i.length;o++)a[o]=parseInt(i[o]);if(a[i.length]=255,m){var s=new m([t.buffer,a.buffer,e]);n(null,s)}}))}),(function(e,t){return n(new m(t))}))},t.decodePayloadAsBinary=function(e,n,r){"function"==typeof n&&(r=n,n=null);for(var o=e,i=[];o.byteLength>0;){for(var s=new Uint8Array(o),l=0===s[0],c="",u=1;255!==s[u];u++){if(c.length>310)return r(h,0,1);c+=s[u]}o=a(o,2+c.length),c=parseInt(c);var f=a(o,0,c);if(l)try{f=String.fromCharCode.apply(null,new Uint8Array(f))}catch(e){var p=new Uint8Array(f);f="";for(u=0;u<p.length;u++)f+=String.fromCharCode(p[u])}i.push(f),o=a(o,c)}var d=i.length;i.forEach((function(e,o){r(t.decodePacket(e,n,!0),o,d)}))}},function(e,t,n){var r=n(68),o=n(70);function i(t,n){return delete e.exports[t],e.exports[t]=n,n}e.exports={Parser:r,Tokenizer:n(69),ElementType:n(23),DomHandler:o,get FeedHandler(){return i("FeedHandler",n(174))},get Stream(){return i("Stream",n(188))},get WritableStream(){return i("WritableStream",n(77))},get ProxyHandler(){return i("ProxyHandler",n(192))},get DomUtils(){return i("DomUtils",n(72))},get CollectingHandler(){return i("CollectingHandler",n(193))},DefaultHandler:o,get RssHandler(){return i("RssHandler",this.FeedHandler)},parseDOM:function(e,t){var n=new o(t);return new r(n,t).end(e),n.dom},parseFeed:function(t,n){var o=new e.exports.FeedHandler(n);return new r(o,n).end(t),o.dom},createDomStream:function(e,t,n){var i=new o(e,t,n);return new r(i,t)},EVENTS:{attribute:2,cdatastart:0,cdataend:0,text:1,processinginstruction:2,comment:1,commentend:0,closetag:1,opentag:2,opentagname:1,error:1,end:0}}},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var l,c=[],u=!1,f=-1;function p(){u&&l&&(u=!1,l.length?c=l.concat(c):f=-1,c.length&&d())}function d(){if(!u){var e=s(p);u=!0;for(var t=c.length;t;){for(l=c,c=[];++f<t;)l&&l[f].run();f=-1,t=c.length}l=null,u=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||u||s(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var r=n(137),o=n(138),i=n(139);function a(){return l.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return l.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=l.prototype:(null===e&&(e=new l(t)),e.length=t),e}function l(e,t,n){if(!(l.TYPED_ARRAY_SUPPORT||this instanceof l))return new l(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return f(this,e)}return c(this,e,t,n)}function c(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);l.TYPED_ARRAY_SUPPORT?(e=t).__proto__=l.prototype:e=p(e,t);return e}(e,t,n,r):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!l.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|h(t,n),o=(e=s(e,r)).write(t,n);o!==r&&(e=e.slice(0,o));return e}(e,t,n):function(e,t){if(l.isBuffer(t)){var n=0|d(t.length);return 0===(e=s(e,n)).length?e:(t.copy(e,0,0,n),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(r=t.length)!=r?s(e,0):p(e,t);if("Buffer"===t.type&&i(t.data))return p(e,t.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function u(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function f(e,t){if(u(t),e=s(e,t<0?0:0|d(t)),!l.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function p(e,t){var n=t.length<0?0:0|d(t.length);e=s(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function d(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function h(e,t){if(l.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return M(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return z(e).length;default:if(r)return M(e).length;t=(""+t).toLowerCase(),r=!0}}function m(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return O(this,t,n);case"utf8":case"utf-8":return k(this,t,n);case"ascii":return B(this,t,n);case"latin1":case"binary":return S(this,t,n);case"base64":return x(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return N(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function g(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function y(e,t,n,r,o){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(o)return-1;n=e.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof t&&(t=l.from(t,r)),l.isBuffer(t))return 0===t.length?-1:b(e,t,n,r,o);if("number"==typeof t)return t&=255,l.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):b(e,[t],n,r,o);throw new TypeError("val must be string, number or Buffer")}function b(e,t,n,r,o){var i,a=1,s=e.length,l=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;a=2,s/=2,l/=2,n/=2}function c(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(o){var u=-1;for(i=n;i<s;i++)if(c(e,i)===c(t,-1===u?0:i-u)){if(-1===u&&(u=i),i-u+1===l)return u*a}else-1!==u&&(i-=i-u),u=-1}else for(n+l>s&&(n=s-l),i=n;i>=0;i--){for(var f=!0,p=0;p<l;p++)if(c(e,i+p)!==c(t,p)){f=!1;break}if(f)return i}return-1}function A(e,t,n,r){n=Number(n)||0;var o=e.length-n;r?(r=Number(r))>o&&(r=o):r=o;var i=t.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var a=0;a<r;++a){var s=parseInt(t.substr(2*a,2),16);if(isNaN(s))return a;e[n+a]=s}return a}function v(e,t,n,r){return H(M(t,e.length-n),e,n,r)}function C(e,t,n,r){return H(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function w(e,t,n,r){return C(e,t,n,r)}function _(e,t,n,r){return H(z(t),e,n,r)}function E(e,t,n,r){return H(function(e,t){for(var n,r,o,i=[],a=0;a<e.length&&!((t-=2)<0);++a)n=e.charCodeAt(a),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(t,e.length-n),e,n,r)}function x(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function k(e,t,n){n=Math.min(e.length,n);for(var r=[],o=t;o<n;){var i,a,s,l,c=e[o],u=null,f=c>239?4:c>223?3:c>191?2:1;if(o+f<=n)switch(f){case 1:c<128&&(u=c);break;case 2:128==(192&(i=e[o+1]))&&(l=(31&c)<<6|63&i)>127&&(u=l);break;case 3:i=e[o+1],a=e[o+2],128==(192&i)&&128==(192&a)&&(l=(15&c)<<12|(63&i)<<6|63&a)>2047&&(l<55296||l>57343)&&(u=l);break;case 4:i=e[o+1],a=e[o+2],s=e[o+3],128==(192&i)&&128==(192&a)&&128==(192&s)&&(l=(15&c)<<18|(63&i)<<12|(63&a)<<6|63&s)>65535&&l<1114112&&(u=l)}null===u?(u=65533,f=1):u>65535&&(u-=65536,r.push(u>>>10&1023|55296),u=56320|1023&u),r.push(u),o+=f}return function(e){var t=e.length;if(t<=T)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=T));return n}(r)}t.Buffer=l,t.SlowBuffer=function(e){+e!=e&&(e=0);return l.alloc(+e)},t.INSPECT_MAX_BYTES=50,l.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=a(),l.poolSize=8192,l._augment=function(e){return e.__proto__=l.prototype,e},l.from=function(e,t,n){return c(null,e,t,n)},l.TYPED_ARRAY_SUPPORT&&(l.prototype.__proto__=Uint8Array.prototype,l.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&l[Symbol.species]===l&&Object.defineProperty(l,Symbol.species,{value:null,configurable:!0})),l.alloc=function(e,t,n){return function(e,t,n,r){return u(t),t<=0?s(e,t):void 0!==n?"string"==typeof r?s(e,t).fill(n,r):s(e,t).fill(n):s(e,t)}(null,e,t,n)},l.allocUnsafe=function(e){return f(null,e)},l.allocUnsafeSlow=function(e){return f(null,e)},l.isBuffer=function(e){return!(null==e||!e._isBuffer)},l.compare=function(e,t){if(!l.isBuffer(e)||!l.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,o=0,i=Math.min(n,r);o<i;++o)if(e[o]!==t[o]){n=e[o],r=t[o];break}return n<r?-1:r<n?1:0},l.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},l.concat=function(e,t){if(!i(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return l.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=l.allocUnsafe(t),o=0;for(n=0;n<e.length;++n){var a=e[n];if(!l.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,o),o+=a.length}return r},l.byteLength=h,l.prototype._isBuffer=!0,l.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)g(this,t,t+1);return this},l.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)g(this,t,t+3),g(this,t+1,t+2);return this},l.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)g(this,t,t+7),g(this,t+1,t+6),g(this,t+2,t+5),g(this,t+3,t+4);return this},l.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?k(this,0,e):m.apply(this,arguments)},l.prototype.equals=function(e){if(!l.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===l.compare(this,e)},l.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},l.prototype.compare=function(e,t,n,r,o){if(!l.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),t<0||n>e.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&t>=n)return 0;if(r>=o)return-1;if(t>=n)return 1;if(this===e)return 0;for(var i=(o>>>=0)-(r>>>=0),a=(n>>>=0)-(t>>>=0),s=Math.min(i,a),c=this.slice(r,o),u=e.slice(t,n),f=0;f<s;++f)if(c[f]!==u[f]){i=c[f],a=u[f];break}return i<a?-1:a<i?1:0},l.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},l.prototype.indexOf=function(e,t,n){return y(this,e,t,n,!0)},l.prototype.lastIndexOf=function(e,t,n){return y(this,e,t,n,!1)},l.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-t;if((void 0===n||n>o)&&(n=o),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return A(this,e,t,n);case"utf8":case"utf-8":return v(this,e,t,n);case"ascii":return C(this,e,t,n);case"latin1":case"binary":return w(this,e,t,n);case"base64":return _(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,e,t,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},l.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var T=4096;function B(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(127&e[o]);return r}function S(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(e[o]);return r}function O(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=t;i<n;++i)o+=F(e[i]);return o}function N(e,t,n){for(var r=e.slice(t,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function P(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function D(e,t,n,r,o,i){if(!l.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<i)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function L(e,t,n,r){t<0&&(t=65535+t+1);for(var o=0,i=Math.min(e.length-n,2);o<i;++o)e[n+o]=(t&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function R(e,t,n,r){t<0&&(t=4294967295+t+1);for(var o=0,i=Math.min(e.length-n,4);o<i;++o)e[n+o]=t>>>8*(r?o:3-o)&255}function q(e,t,n,r,o,i){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function I(e,t,n,r,i){return i||q(e,0,n,4),o.write(e,t,n,r,23,4),n+4}function j(e,t,n,r,i){return i||q(e,0,n,8),o.write(e,t,n,r,52,8),n+8}l.prototype.slice=function(e,t){var n,r=this.length;if((e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),l.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=l.prototype;else{var o=t-e;n=new l(o,void 0);for(var i=0;i<o;++i)n[i]=this[i+e]}return n},l.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||P(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r},l.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||P(e,t,this.length);for(var r=this[e+--t],o=1;t>0&&(o*=256);)r+=this[e+--t]*o;return r},l.prototype.readUInt8=function(e,t){return t||P(e,1,this.length),this[e]},l.prototype.readUInt16LE=function(e,t){return t||P(e,2,this.length),this[e]|this[e+1]<<8},l.prototype.readUInt16BE=function(e,t){return t||P(e,2,this.length),this[e]<<8|this[e+1]},l.prototype.readUInt32LE=function(e,t){return t||P(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},l.prototype.readUInt32BE=function(e,t){return t||P(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},l.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||P(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*t)),r},l.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||P(e,t,this.length);for(var r=t,o=1,i=this[e+--r];r>0&&(o*=256);)i+=this[e+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*t)),i},l.prototype.readInt8=function(e,t){return t||P(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},l.prototype.readInt16LE=function(e,t){t||P(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},l.prototype.readInt16BE=function(e,t){t||P(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},l.prototype.readInt32LE=function(e,t){return t||P(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},l.prototype.readInt32BE=function(e,t){return t||P(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},l.prototype.readFloatLE=function(e,t){return t||P(e,4,this.length),o.read(this,e,!0,23,4)},l.prototype.readFloatBE=function(e,t){return t||P(e,4,this.length),o.read(this,e,!1,23,4)},l.prototype.readDoubleLE=function(e,t){return t||P(e,8,this.length),o.read(this,e,!0,52,8)},l.prototype.readDoubleBE=function(e,t){return t||P(e,8,this.length),o.read(this,e,!1,52,8)},l.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||D(this,e,t,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[t]=255&e;++i<n&&(o*=256);)this[t+i]=e/o&255;return t+n},l.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||D(this,e,t,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+n},l.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||D(this,e,t,1,255,0),l.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},l.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||D(this,e,t,2,65535,0),l.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):L(this,e,t,!0),t+2},l.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||D(this,e,t,2,65535,0),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):L(this,e,t,!1),t+2},l.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||D(this,e,t,4,4294967295,0),l.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):R(this,e,t,!0),t+4},l.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||D(this,e,t,4,4294967295,0),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):R(this,e,t,!1),t+4},l.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);D(this,e,t,n,o-1,-o)}var i=0,a=1,s=0;for(this[t]=255&e;++i<n&&(a*=256);)e<0&&0===s&&0!==this[t+i-1]&&(s=1),this[t+i]=(e/a>>0)-s&255;return t+n},l.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);D(this,e,t,n,o-1,-o)}var i=n-1,a=1,s=0;for(this[t+i]=255&e;--i>=0&&(a*=256);)e<0&&0===s&&0!==this[t+i+1]&&(s=1),this[t+i]=(e/a>>0)-s&255;return t+n},l.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||D(this,e,t,1,127,-128),l.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},l.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||D(this,e,t,2,32767,-32768),l.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):L(this,e,t,!0),t+2},l.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||D(this,e,t,2,32767,-32768),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):L(this,e,t,!1),t+2},l.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||D(this,e,t,4,2147483647,-2147483648),l.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):R(this,e,t,!0),t+4},l.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||D(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):R(this,e,t,!1),t+4},l.prototype.writeFloatLE=function(e,t,n){return I(this,e,t,!0,n)},l.prototype.writeFloatBE=function(e,t,n){return I(this,e,t,!1,n)},l.prototype.writeDoubleLE=function(e,t,n){return j(this,e,t,!0,n)},l.prototype.writeDoubleBE=function(e,t,n){return j(this,e,t,!1,n)},l.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var o,i=r-n;if(this===e&&n<t&&t<r)for(o=i-1;o>=0;--o)e[o+t]=this[o+n];else if(i<1e3||!l.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)e[o+t]=this[o+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+i),t);return i},l.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!l.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var i;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(i=t;i<n;++i)this[i]=e;else{var a=l.isBuffer(e)?e:M(new l(e,r).toString()),s=a.length;for(i=0;i<n-t;++i)this[i+t]=a[i%s]}return this};var U=/[^+\/0-9A-Za-z-_]/g;function F(e){return e<16?"0"+e.toString(16):e.toString(16)}function M(e,t){var n;t=t||1/0;for(var r=e.length,o=null,i=[],a=0;a<r;++a){if((n=e.charCodeAt(a))>55295&&n<57344){if(!o){if(n>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(a+1===r){(t-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(t-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((t-=1)<0)break;i.push(n)}else if(n<2048){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function z(e){return r.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(U,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function H(e,t,n,r){for(var o=0;o<r&&!(o+n>=t.length||o>=e.length);++o)t[o+n]=e[o];return o}}).call(this,n(26))},function(e,t){e.exports={Text:"text",Directive:"directive",Comment:"comment",Script:"script",Style:"style",Tag:"tag",CDATA:"cdata",Doctype:"doctype",isTag:function(e){return"tag"===e.type||"script"===e.type||"style"===e.type}}},function(e,t,n){"use strict";var r=n(32),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function l(e){return r.isMemo(e)?a:s[e.$$typeof]||o}s[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var c=Object.defineProperty,u=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=d(n);o&&o!==h&&e(t,o,r)}var a=u(n);f&&(a=a.concat(f(n)));for(var s=l(t),m=l(n),g=0;g<a.length;++g){var y=a[g];if(!(i[y]||r&&r[y]||m&&m[y]||s&&s[y])){var b=p(n,y);try{c(t,y,b)}catch(e){}}}return t}return t}},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var i=typeof r;if("string"===i||"number"===i)e.push(r);else if(Array.isArray(r)&&r.length){var a=o.apply(null,r);a&&e.push(a)}else if("object"===i)for(var s in r)n.call(r,s)&&r[s]&&e.push(s)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){(function(r){t.log=function(...e){return"object"==typeof console&&console.log&&console.log(...e)},t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let r=0,o=0;t[0].replace(/%[a-zA-Z%]/g,e=>{"%%"!==e&&(r++,"%c"===e&&(o=r))}),t.splice(o,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG);return e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.exports=n(130)(t);const{formatters:o}=e.exports;o.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}}).call(this,n(21))},function(e,t){t.encode=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t.length&&(t+="&"),t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t},t.decode=function(e){for(var t={},n=e.split("&"),r=0,o=n.length;r<o;r++){var i=n[r].split("=");t[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return t}},function(e,t){e.exports=function(e,t){var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t,n){(function(r){t.log=function(...e){return"object"==typeof console&&console.log&&console.log(...e)},t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let r=0,o=0;t[0].replace(/%[a-zA-Z%]/g,e=>{"%%"!==e&&(r++,"%c"===e&&(o=r))}),t.splice(o,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG);return e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.exports=n(151)(t);const{formatters:o}=e.exports;o.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}}).call(this,n(21))},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}}},function(e,t,n){"use strict";e.exports=n(93)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.routerMiddleware=t.routerActions=t.goForward=t.goBack=t.go=t.replace=t.push=t.CALL_HISTORY_METHOD=t.routerReducer=t.LOCATION_CHANGE=t.syncHistoryWithStore=void 0;var r=n(52);Object.defineProperty(t,"LOCATION_CHANGE",{enumerable:!0,get:function(){return r.LOCATION_CHANGE}}),Object.defineProperty(t,"routerReducer",{enumerable:!0,get:function(){return r.routerReducer}});var o=n(53);Object.defineProperty(t,"CALL_HISTORY_METHOD",{enumerable:!0,get:function(){return o.CALL_HISTORY_METHOD}}),Object.defineProperty(t,"push",{enumerable:!0,get:function(){return o.push}}),Object.defineProperty(t,"replace",{enumerable:!0,get:function(){return o.replace}}),Object.defineProperty(t,"go",{enumerable:!0,get:function(){return o.go}}),Object.defineProperty(t,"goBack",{enumerable:!0,get:function(){return o.goBack}}),Object.defineProperty(t,"goForward",{enumerable:!0,get:function(){return o.goForward}}),Object.defineProperty(t,"routerActions",{enumerable:!0,get:function(){return o.routerActions}});var i=s(n(125)),a=s(n(126));function s(e){return e&&e.__esModule?e:{default:e}}t.syncHistoryWithStore=i.default,t.routerMiddleware=a.default},,function(e,t,n){var r=n(132)("socket.io-parser"),o=n(135),i=n(136),a=n(55),s=n(56);function l(){}t.protocol=4,t.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],t.CONNECT=0,t.DISCONNECT=1,t.EVENT=2,t.ACK=3,t.ERROR=4,t.BINARY_EVENT=5,t.BINARY_ACK=6,t.Encoder=l,t.Decoder=f;var c=t.ERROR+'"encode error"';function u(e){var n=""+e.type;if(t.BINARY_EVENT!==e.type&&t.BINARY_ACK!==e.type||(n+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(n+=e.nsp+","),null!=e.id&&(n+=e.id),null!=e.data){var o=function(e){try{return JSON.stringify(e)}catch(e){return!1}}(e.data);if(!1===o)return c;n+=o}return r("encoded %j as %s",e,n),n}function f(){this.reconstructor=null}function p(e){this.reconPack=e,this.buffers=[]}function d(e){return{type:t.ERROR,data:"parser error: "+e}}l.prototype.encode=function(e,n){(r("encoding packet %j",e),t.BINARY_EVENT===e.type||t.BINARY_ACK===e.type)?function(e,t){i.removeBlobs(e,(function(e){var n=i.deconstructPacket(e),r=u(n.packet),o=n.buffers;o.unshift(r),t(o)}))}(e,n):n([u(e)])},o(f.prototype),f.prototype.add=function(e){var n;if("string"==typeof e)n=function(e){var n=0,o={type:Number(e.charAt(0))};if(null==t.types[o.type])return d("unknown packet type "+o.type);if(t.BINARY_EVENT===o.type||t.BINARY_ACK===o.type){for(var i="";"-"!==e.charAt(++n)&&(i+=e.charAt(n),n!=e.length););if(i!=Number(i)||"-"!==e.charAt(n))throw new Error("Illegal attachments");o.attachments=Number(i)}if("/"===e.charAt(n+1))for(o.nsp="";++n;){if(","===(l=e.charAt(n)))break;if(o.nsp+=l,n===e.length)break}else o.nsp="/";var s=e.charAt(n+1);if(""!==s&&Number(s)==s){for(o.id="";++n;){var l;if(null==(l=e.charAt(n))||Number(l)!=l){--n;break}if(o.id+=e.charAt(n),n===e.length)break}o.id=Number(o.id)}if(e.charAt(++n)){var c=function(e){try{return JSON.parse(e)}catch(e){return!1}}(e.substr(n));if(!(!1!==c&&(o.type===t.ERROR||a(c))))return d("invalid payload");o.data=c}return r("decoded %s as %j",e,o),o}(e),t.BINARY_EVENT===n.type||t.BINARY_ACK===n.type?(this.reconstructor=new p(n),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",n)):this.emit("decoded",n);else{if(!s(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(n=this.reconstructor.takeBinaryData(e))&&(this.reconstructor=null,this.emit("decoded",n))}},f.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},p.prototype.takeBinaryData=function(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){var t=i.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null},p.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(e,t,n){var r=n(142);e.exports=function(e){var t=e.xdomain,n=e.xscheme,o=e.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!t||r))return new XMLHttpRequest}catch(e){}try{if("undefined"!=typeof XDomainRequest&&!n&&o)return new XDomainRequest}catch(e){}if(!t)try{return new(self[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}},function(e,t,n){var r=n(19),o=n(38);function i(e){this.path=e.path,this.hostname=e.hostname,this.port=e.port,this.secure=e.secure,this.query=e.query,this.timestampParam=e.timestampParam,this.timestampRequests=e.timestampRequests,this.readyState="",this.agent=e.agent||!1,this.socket=e.socket,this.enablesXDR=e.enablesXDR,this.withCredentials=e.withCredentials,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.forceNode=e.forceNode,this.isReactNative=e.isReactNative,this.extraHeaders=e.extraHeaders,this.localAddress=e.localAddress}e.exports=i,o(i.prototype),i.prototype.onError=function(e,t){var n=new Error(e);return n.type="TransportError",n.description=t,this.emit("error",n),this},i.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},i.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},i.prototype.send=function(e){if("open"!==this.readyState)throw new Error("Transport not open");this.write(e)},i.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},i.prototype.onData=function(e){var t=r.decodePacket(e,this.socket.binaryType);this.onPacket(t)},i.prototype.onPacket=function(e){this.emit("packet",e)},i.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(e,t,n){function r(e){if(e)return function(e){for(var t in r.prototype)e[t]=r.prototype[t];return e}(e)}e.exports=r,r.prototype.on=r.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},r.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var o=0;o<r.length;o++)if((n=r[o])===t||n.fn===t){r.splice(o,1);break}return this},r.prototype.emit=function(e){this._callbacks=this._callbacks||{};var t=[].slice.call(arguments,1),n=this._callbacks["$"+e];if(n)for(var r=0,o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,t);return this},r.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},r.prototype.hasListeners=function(e){return!!this.listeners(e).length}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return e.filter((function(e){return!(0,r.default)(e)})).map((function(e,n){var r=void 0;return"function"!=typeof t||null!==(r=t(e,n))&&!r?(0,o.default)(e,n,t):r}))};var r=i(n(165)),o=i(n(67));function i(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";(function(e,r){var o,i=n(80);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(26),n(94)(e))},function(e,t){e.exports=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}},function(e,t,n){var r=n(104);e.exports=d,e.exports.parse=i,e.exports.compile=function(e,t){return s(i(e,t))},e.exports.tokensToFunction=s,e.exports.tokensToRegExp=p;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,s="",u=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],p=n[1],d=n.index;if(s+=e.slice(a,d),a=d+f.length,p)s+=p[1];else{var h=e[a],m=n[2],g=n[3],y=n[4],b=n[5],A=n[6],v=n[7];s&&(r.push(s),s="");var C=null!=m&&null!=h&&h!==m,w="+"===A||"*"===A,_="?"===A||"*"===A,E=n[2]||u,x=y||b;r.push({name:g||i++,prefix:m||"",delimiter:E,optional:_,repeat:w,partial:C,asterisk:!!v,pattern:x?c(x):v?".*":"[^"+l(E)+"]+?"})}}return a<e.length&&(s+=e.substr(a)),s&&r.push(s),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function s(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,o){for(var i="",s=n||{},l=(o||{}).pretty?a:encodeURIComponent,c=0;c<e.length;c++){var u=e[c];if("string"!=typeof u){var f,p=s[u.name];if(null==p){if(u.optional){u.partial&&(i+=u.prefix);continue}throw new TypeError('Expected "'+u.name+'" to be defined')}if(r(p)){if(!u.repeat)throw new TypeError('Expected "'+u.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(u.optional)continue;throw new TypeError('Expected "'+u.name+'" to not be empty')}for(var d=0;d<p.length;d++){if(f=l(p[d]),!t[c].test(f))throw new TypeError('Expected all "'+u.name+'" to match "'+u.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===d?u.prefix:u.delimiter)+f}}else{if(f=u.asterisk?encodeURI(p).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):l(p),!t[c].test(f))throw new TypeError('Expected "'+u.name+'" to match "'+u.pattern+'", but received "'+f+'"');i+=u.prefix+f}}else i+=u}return i}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function u(e,t){return e.keys=t,e}function f(e){return e.sensitive?"":"i"}function p(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",s=0;s<e.length;s++){var c=e[s];if("string"==typeof c)a+=l(c);else{var p=l(c.prefix),d="(?:"+c.pattern+")";t.push(c),c.repeat&&(d+="(?:"+p+d+")*"),a+=d=c.optional?c.partial?p+"("+d+")?":"(?:"+p+"("+d+"))?":p+"("+d+")"}}var h=l(n.delimiter||"/"),m=a.slice(-h.length)===h;return o||(a=(m?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&m?"":"(?="+h+"|$)",u(new RegExp("^"+a,f(n)),t)}function d(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return u(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(d(e[o],t,n).source);return u(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return p(i(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,s,l=a(e),c=1;c<arguments.length;c++){for(var u in n=Object(arguments[c]))o.call(n,u)&&(l[u]=n[u]);if(r){s=r(n);for(var f=0;f<s.length;f++)i.call(n,s[f])&&(l[s[f]]=n[s[f]])}}return l}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(12);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))})))})),i=a.join("&")}if(i){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(12),o=n(115),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,l={adapter:(void 0!==t&&"[object process]"===Object.prototype.toString.call(t)?s=n(48):"undefined"!=typeof XMLHttpRequest&&(s=n(48)),s),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};l.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){l.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){l.headers[e]=r.merge(i)})),e.exports=l}).call(this,n(21))},function(e,t,n){"use strict";var r=n(12),o=n(116),i=n(45),a=n(118),s=n(119),l=n(49);e.exports=function(e){return new Promise((function(t,c){var u=e.data,f=e.headers;r.isFormData(u)&&delete f["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var d=e.auth.username||"",h=e.auth.password||"";f.Authorization="Basic "+btoa(d+":"+h)}if(p.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in p?a(p.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:n,config:e,request:p};o(t,c,r),p=null}},p.onabort=function(){p&&(c(l("Request aborted",e,"ECONNABORTED",p)),p=null)},p.onerror=function(){c(l("Network Error",e,null,p)),p=null},p.ontimeout=function(){c(l("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var m=n(120),g=(e.withCredentials||s(e.url))&&e.xsrfCookieName?m.read(e.xsrfCookieName):void 0;g&&(f[e.xsrfHeaderName]=g)}if("setRequestHeader"in p&&r.forEach(f,(function(e,t){void 0===u&&"content-type"===t.toLowerCase()?delete f[t]:p.setRequestHeader(t,e)})),e.withCredentials&&(p.withCredentials=!0),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){p&&(p.abort(),c(e),p=null)})),void 0===u&&(u=null),p.send(u)}))}},function(e,t,n){"use strict";var r=n(117);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},function(e,t,n){"use strict";var r=n(12);e.exports=function(e,t){t=t||{};var n={};return r.forEach(["url","method","params","data"],(function(e){void 0!==t[e]&&(n[e]=t[e])})),r.forEach(["headers","auth","proxy"],(function(o){r.isObject(t[o])?n[o]=r.deepMerge(e[o],t[o]):void 0!==t[o]?n[o]=t[o]:r.isObject(e[o])?n[o]=r.deepMerge(e[o]):void 0!==e[o]&&(n[o]=e[o])})),r.forEach(["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"],(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])})),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.routerReducer=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:i,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.type,a=t.payload;if(n===o)return r({},e,{locationBeforeTransitions:a});return e};var o=t.LOCATION_CHANGE="@@router/LOCATION_CHANGE",i={locationBeforeTransitions:null}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.CALL_HISTORY_METHOD="@@router/CALL_HISTORY_METHOD";function o(e){return function(){for(var t=arguments.length,n=Array(t),o=0;o<t;o++)n[o]=arguments[o];return{type:r,payload:{method:e,args:n}}}}var i=t.push=o("push"),a=t.replace=o("replace"),s=t.go=o("go"),l=t.goBack=o("goBack"),c=t.goForward=o("goForward");t.routerActions={push:i,replace:a,go:s,goBack:l,goForward:c}},function(e,t){var n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];e.exports=function(e){var t=e,o=e.indexOf("["),i=e.indexOf("]");-1!=o&&-1!=i&&(e=e.substring(0,o)+e.substring(o,i).replace(/:/g,";")+e.substring(i,e.length));for(var a=n.exec(e||""),s={},l=14;l--;)s[r[l]]=a[l]||"";return-1!=o&&-1!=i&&(s.source=t,s.host=s.host.substring(1,s.host.length-1).replace(/;/g,":"),s.authority=s.authority.replace("[","").replace("]","").replace(/;/g,":"),s.ipv6uri=!0),s}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t,n){(function(t){e.exports=function(e){return n&&t.isBuffer(e)||r&&(e instanceof ArrayBuffer||o(e))};var n="function"==typeof t&&"function"==typeof t.isBuffer,r="function"==typeof ArrayBuffer,o=function(e){return"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer}}).call(this,n(22).Buffer)},function(e,t,n){var r=n(140),o=n(63),i=n(64),a=n(35),s=n(65),l=n(66),c=n(27)("socket.io-client:manager"),u=n(62),f=n(157),p=Object.prototype.hasOwnProperty;function d(e,t){if(!(this instanceof d))return new d(e,t);e&&"object"==typeof e&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",this.nsps={},this.subs=[],this.opts=t,this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(t.randomizationFactor||.5),this.backoff=new f({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this.readyState="closed",this.uri=e,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var n=t.parser||a;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this.autoConnect=!1!==t.autoConnect,this.autoConnect&&this.open()}e.exports=d,d.prototype.emitAll=function(){for(var e in this.emit.apply(this,arguments),this.nsps)p.call(this.nsps,e)&&this.nsps[e].emit.apply(this.nsps[e],arguments)},d.prototype.updateSocketIds=function(){for(var e in this.nsps)p.call(this.nsps,e)&&(this.nsps[e].id=this.generateId(e))},d.prototype.generateId=function(e){return("/"===e?"":e+"#")+this.engine.id},i(d.prototype),d.prototype.reconnection=function(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection},d.prototype.reconnectionAttempts=function(e){return arguments.length?(this._reconnectionAttempts=e,this):this._reconnectionAttempts},d.prototype.reconnectionDelay=function(e){return arguments.length?(this._reconnectionDelay=e,this.backoff&&this.backoff.setMin(e),this):this._reconnectionDelay},d.prototype.randomizationFactor=function(e){return arguments.length?(this._randomizationFactor=e,this.backoff&&this.backoff.setJitter(e),this):this._randomizationFactor},d.prototype.reconnectionDelayMax=function(e){return arguments.length?(this._reconnectionDelayMax=e,this.backoff&&this.backoff.setMax(e),this):this._reconnectionDelayMax},d.prototype.timeout=function(e){return arguments.length?(this._timeout=e,this):this._timeout},d.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},d.prototype.open=d.prototype.connect=function(e,t){if(c("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;c("opening %s",this.uri),this.engine=r(this.uri,this.opts);var n=this.engine,o=this;this.readyState="opening",this.skipReconnect=!1;var i=s(n,"open",(function(){o.onopen(),e&&e()})),a=s(n,"error",(function(t){if(c("connect_error"),o.cleanup(),o.readyState="closed",o.emitAll("connect_error",t),e){var n=new Error("Connection error");n.data=t,e(n)}else o.maybeReconnectOnOpen()}));if(!1!==this._timeout){var l=this._timeout;c("connect attempt will timeout after %d",l);var u=setTimeout((function(){c("connect attempt timed out after %d",l),i.destroy(),n.close(),n.emit("error","timeout"),o.emitAll("connect_timeout",l)}),l);this.subs.push({destroy:function(){clearTimeout(u)}})}return this.subs.push(i),this.subs.push(a),this},d.prototype.onopen=function(){c("open"),this.cleanup(),this.readyState="open",this.emit("open");var e=this.engine;this.subs.push(s(e,"data",l(this,"ondata"))),this.subs.push(s(e,"ping",l(this,"onping"))),this.subs.push(s(e,"pong",l(this,"onpong"))),this.subs.push(s(e,"error",l(this,"onerror"))),this.subs.push(s(e,"close",l(this,"onclose"))),this.subs.push(s(this.decoder,"decoded",l(this,"ondecoded")))},d.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},d.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},d.prototype.ondata=function(e){this.decoder.add(e)},d.prototype.ondecoded=function(e){this.emit("packet",e)},d.prototype.onerror=function(e){c("error",e),this.emitAll("error",e)},d.prototype.socket=function(e,t){var n=this.nsps[e];if(!n){n=new o(this,e,t),this.nsps[e]=n;var r=this;n.on("connecting",i),n.on("connect",(function(){n.id=r.generateId(e)})),this.autoConnect&&i()}function i(){~u(r.connecting,n)||r.connecting.push(n)}return n},d.prototype.destroy=function(e){var t=u(this.connecting,e);~t&&this.connecting.splice(t,1),this.connecting.length||this.close()},d.prototype.packet=function(e){c("writing packet %j",e);var t=this;e.query&&0===e.type&&(e.nsp+="?"+e.query),t.encoding?t.packetBuffer.push(e):(t.encoding=!0,this.encoder.encode(e,(function(n){for(var r=0;r<n.length;r++)t.engine.write(n[r],e.options);t.encoding=!1,t.processPacketQueue()})))},d.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var e=this.packetBuffer.shift();this.packet(e)}},d.prototype.cleanup=function(){c("cleanup");for(var e=this.subs.length,t=0;t<e;t++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},d.prototype.close=d.prototype.disconnect=function(){c("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},d.prototype.onclose=function(e){c("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",e),this._reconnection&&!this.skipReconnect&&this.reconnect()},d.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var e=this;if(this.backoff.attempts>=this._reconnectionAttempts)c("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var t=this.backoff.duration();c("will wait %dms before reconnect attempt",t),this.reconnecting=!0;var n=setTimeout((function(){e.skipReconnect||(c("attempting reconnect"),e.emitAll("reconnect_attempt",e.backoff.attempts),e.emitAll("reconnecting",e.backoff.attempts),e.skipReconnect||e.open((function(t){t?(c("reconnect attempt error"),e.reconnecting=!1,e.reconnect(),e.emitAll("reconnect_error",t.data)):(c("reconnect success"),e.onreconnect())})))}),t);this.subs.push({destroy:function(){clearTimeout(n)}})}},d.prototype.onreconnect=function(){var e=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",e)}},function(e,t,n){var r=n(36),o=n(143),i=n(153),a=n(154);t.polling=function(e){var t=!1,n=!1,a=!1!==e.jsonp;if("undefined"!=typeof location){var s="https:"===location.protocol,l=location.port;l||(l=s?443:80),t=e.hostname!==location.hostname||l!==e.port,n=e.secure!==s}if(e.xdomain=t,e.xscheme=n,"open"in new r(e)&&!e.forceJSONP)return new o(e);if(!a)throw new Error("JSONP disabled");return new i(e)},t.websocket=a},function(e,t,n){var r=n(37),o=n(28),i=n(19),a=n(29),s=n(61),l=n(30)("engine.io-client:polling");e.exports=u;var c=null!=new(n(36))({xdomain:!1}).responseType;function u(e){var t=e&&e.forceBase64;c&&!t||(this.supportsBinary=!1),r.call(this,e)}a(u,r),u.prototype.name="polling",u.prototype.doOpen=function(){this.poll()},u.prototype.pause=function(e){var t=this;function n(){l("paused"),t.readyState="paused",e()}if(this.readyState="pausing",this.polling||!this.writable){var r=0;this.polling&&(l("we are currently polling - waiting to pause"),r++,this.once("pollComplete",(function(){l("pre-pause polling complete"),--r||n()}))),this.writable||(l("we are currently writing - waiting to pause"),r++,this.once("drain",(function(){l("pre-pause writing complete"),--r||n()})))}else n()},u.prototype.poll=function(){l("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},u.prototype.onData=function(e){var t=this;l("polling got data %s",e);i.decodePayload(e,this.socket.binaryType,(function(e,n,r){if("opening"===t.readyState&&t.onOpen(),"close"===e.type)return t.onClose(),!1;t.onPacket(e)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():l('ignoring poll - transport state "%s"',this.readyState))},u.prototype.doClose=function(){var e=this;function t(){l("writing close packet"),e.write([{type:"close"}])}"open"===this.readyState?(l("transport open - closing"),t()):(l("transport not open - deferring close"),this.once("open",t))},u.prototype.write=function(e){var t=this;this.writable=!1;var n=function(){t.writable=!0,t.emit("drain")};i.encodePayload(e,this.supportsBinary,(function(e){t.doWrite(e,n)}))},u.prototype.uri=function(){var e=this.query||{},t=this.secure?"https":"http",n="";return!1!==this.timestampRequests&&(e[this.timestampParam]=s()),this.supportsBinary||e.sid||(e.b64=1),e=o.encode(e),this.port&&("https"===t&&443!==Number(this.port)||"http"===t&&80!==Number(this.port))&&(n=":"+this.port),e.length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+e}},function(e,t,n){(function(t){var r=n(145),o=Object.prototype.toString,i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===o.call(Blob),a="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===o.call(File);e.exports=function e(n){if(!n||"object"!=typeof n)return!1;if(r(n)){for(var o=0,s=n.length;o<s;o++)if(e(n[o]))return!0;return!1}if("function"==typeof t&&t.isBuffer&&t.isBuffer(n)||"function"==typeof ArrayBuffer&&n instanceof ArrayBuffer||i&&n instanceof Blob||a&&n instanceof File)return!0;if(n.toJSON&&"function"==typeof n.toJSON&&1===arguments.length)return e(n.toJSON(),!0);for(var l in n)if(Object.prototype.hasOwnProperty.call(n,l)&&e(n[l]))return!0;return!1}}).call(this,n(22).Buffer)},function(e,t,n){"use strict";var r,o="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),i=64,a={},s=0,l=0;function c(e){var t="";do{t=o[e%i]+t,e=Math.floor(e/i)}while(e>0);return t}function u(){var e=c(+new Date);return e!==r?(s=0,r=e):e+"."+c(s++)}for(;l<i;l++)a[o[l]]=l;u.encode=c,u.decode=function(e){var t=0;for(l=0;l<e.length;l++)t=t*i+a[e.charAt(l)];return t},e.exports=u},function(e,t){var n=[].indexOf;e.exports=function(e,t){if(n)return e.indexOf(t);for(var r=0;r<e.length;++r)if(e[r]===t)return r;return-1}},function(e,t,n){var r=n(35),o=n(64),i=n(156),a=n(65),s=n(66),l=n(27)("socket.io-client:socket"),c=n(28),u=n(60);e.exports=d;var f={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},p=o.prototype.emit;function d(e,t,n){this.io=e,this.nsp=t,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},n&&n.query&&(this.query=n.query),this.io.autoConnect&&this.open()}o(d.prototype),d.prototype.subEvents=function(){if(!this.subs){var e=this.io;this.subs=[a(e,"open",s(this,"onopen")),a(e,"packet",s(this,"onpacket")),a(e,"close",s(this,"onclose"))]}},d.prototype.open=d.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},d.prototype.send=function(){var e=i(arguments);return e.unshift("message"),this.emit.apply(this,e),this},d.prototype.emit=function(e){if(f.hasOwnProperty(e))return p.apply(this,arguments),this;var t=i(arguments),n={type:(void 0!==this.flags.binary?this.flags.binary:u(t))?r.BINARY_EVENT:r.EVENT,data:t,options:{}};return n.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof t[t.length-1]&&(l("emitting packet with ack id %d",this.ids),this.acks[this.ids]=t.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),this.flags={},this},d.prototype.packet=function(e){e.nsp=this.nsp,this.io.packet(e)},d.prototype.onopen=function(){if(l("transport is open - connecting"),"/"!==this.nsp)if(this.query){var e="object"==typeof this.query?c.encode(this.query):this.query;l("sending connect packet with query %s",e),this.packet({type:r.CONNECT,query:e})}else this.packet({type:r.CONNECT})},d.prototype.onclose=function(e){l("close (%s)",e),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",e)},d.prototype.onpacket=function(e){var t=e.nsp===this.nsp,n=e.type===r.ERROR&&"/"===e.nsp;if(t||n)switch(e.type){case r.CONNECT:this.onconnect();break;case r.EVENT:case r.BINARY_EVENT:this.onevent(e);break;case r.ACK:case r.BINARY_ACK:this.onack(e);break;case r.DISCONNECT:this.ondisconnect();break;case r.ERROR:this.emit("error",e.data)}},d.prototype.onevent=function(e){var t=e.data||[];l("emitting event %j",t),null!=e.id&&(l("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?p.apply(this,t):this.receiveBuffer.push(t)},d.prototype.ack=function(e){var t=this,n=!1;return function(){if(!n){n=!0;var o=i(arguments);l("sending ack %j",o),t.packet({type:u(o)?r.BINARY_ACK:r.ACK,id:e,data:o})}}},d.prototype.onack=function(e){var t=this.acks[e.id];"function"==typeof t?(l("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):l("bad ack %s",e.id)},d.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},d.prototype.emitBuffered=function(){var e;for(e=0;e<this.receiveBuffer.length;e++)p.apply(this,this.receiveBuffer[e]);for(this.receiveBuffer=[],e=0;e<this.sendBuffer.length;e++)this.packet(this.sendBuffer[e]);this.sendBuffer=[]},d.prototype.ondisconnect=function(){l("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},d.prototype.destroy=function(){if(this.subs){for(var e=0;e<this.subs.length;e++)this.subs[e].destroy();this.subs=null}this.io.destroy(this)},d.prototype.close=d.prototype.disconnect=function(){return this.connected&&(l("performing disconnect (%s)",this.nsp),this.packet({type:r.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},d.prototype.compress=function(e){return this.flags.compress=e,this},d.prototype.binary=function(e){return this.flags.binary=e,this}},function(e,t,n){function r(e){if(e)return function(e){for(var t in r.prototype)e[t]=r.prototype[t];return e}(e)}e.exports=r,r.prototype.on=r.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},r.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var o=0;o<r.length;o++)if((n=r[o])===t||n.fn===t){r.splice(o,1);break}return this},r.prototype.emit=function(e){this._callbacks=this._callbacks||{};var t=[].slice.call(arguments,1),n=this._callbacks["$"+e];if(n)for(var r=0,o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,t);return this},r.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},r.prototype.hasListeners=function(e){return!!this.listeners(e).length}},function(e,t){e.exports=function(e,t,n){return e.on(t,n),{destroy:function(){e.removeListener(t,n)}}}},function(e,t){var n=[].slice;e.exports=function(e,t){if("string"==typeof t&&(t=e[t]),"function"!=typeof t)throw new Error("bind() requires a function");var r=n.call(arguments,2);return function(){return t.apply(e,r.concat(n.call(arguments)))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){return i.default[e.type](e,t,n)};var r,o=n(166),i=(r=o)&&r.__esModule?r:{default:r}},function(e,t,n){var r=n(69),o={input:!0,option:!0,optgroup:!0,select:!0,button:!0,datalist:!0,textarea:!0},i={tr:{tr:!0,th:!0,td:!0},th:{th:!0},td:{thead:!0,th:!0,td:!0},body:{head:!0,link:!0,script:!0},li:{li:!0},p:{p:!0},h1:{p:!0},h2:{p:!0},h3:{p:!0},h4:{p:!0},h5:{p:!0},h6:{p:!0},select:o,input:o,output:o,button:o,datalist:o,textarea:o,option:{option:!0},optgroup:{optgroup:!0}},a={__proto__:null,area:!0,base:!0,basefont:!0,br:!0,col:!0,command:!0,embed:!0,frame:!0,hr:!0,img:!0,input:!0,isindex:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},s={__proto__:null,math:!0,svg:!0},l={__proto__:null,mi:!0,mo:!0,mn:!0,ms:!0,mtext:!0,"annotation-xml":!0,foreignObject:!0,desc:!0,title:!0},c=/\s|\//;function u(e,t){this._options=t||{},this._cbs=e||{},this._tagname="",this._attribname="",this._attribvalue="",this._attribs=null,this._stack=[],this._foreignContext=[],this.startIndex=0,this.endIndex=null,this._lowerCaseTagNames="lowerCaseTags"in this._options?!!this._options.lowerCaseTags:!this._options.xmlMode,this._lowerCaseAttributeNames="lowerCaseAttributeNames"in this._options?!!this._options.lowerCaseAttributeNames:!this._options.xmlMode,this._options.Tokenizer&&(r=this._options.Tokenizer),this._tokenizer=new r(this._options,this),this._cbs.onparserinit&&this._cbs.onparserinit(this)}n(31)(u,n(172).EventEmitter),u.prototype._updatePosition=function(e){null===this.endIndex?this._tokenizer._sectionStart<=e?this.startIndex=0:this.startIndex=this._tokenizer._sectionStart-e:this.startIndex=this.endIndex+1,this.endIndex=this._tokenizer.getAbsoluteIndex()},u.prototype.ontext=function(e){this._updatePosition(1),this.endIndex--,this._cbs.ontext&&this._cbs.ontext(e)},u.prototype.onopentagname=function(e){if(this._lowerCaseTagNames&&(e=e.toLowerCase()),this._tagname=e,!this._options.xmlMode&&e in i)for(var t;(t=this._stack[this._stack.length-1])in i[e];this.onclosetag(t));!this._options.xmlMode&&e in a||(this._stack.push(e),e in s?this._foreignContext.push(!0):e in l&&this._foreignContext.push(!1)),this._cbs.onopentagname&&this._cbs.onopentagname(e),this._cbs.onopentag&&(this._attribs={})},u.prototype.onopentagend=function(){this._updatePosition(1),this._attribs&&(this._cbs.onopentag&&this._cbs.onopentag(this._tagname,this._attribs),this._attribs=null),!this._options.xmlMode&&this._cbs.onclosetag&&this._tagname in a&&this._cbs.onclosetag(this._tagname),this._tagname=""},u.prototype.onclosetag=function(e){if(this._updatePosition(1),this._lowerCaseTagNames&&(e=e.toLowerCase()),(e in s||e in l)&&this._foreignContext.pop(),!this._stack.length||e in a&&!this._options.xmlMode)this._options.xmlMode||"br"!==e&&"p"!==e||(this.onopentagname(e),this._closeCurrentTag());else{var t=this._stack.lastIndexOf(e);if(-1!==t)if(this._cbs.onclosetag)for(t=this._stack.length-t;t--;)this._cbs.onclosetag(this._stack.pop());else this._stack.length=t;else"p"!==e||this._options.xmlMode||(this.onopentagname(e),this._closeCurrentTag())}},u.prototype.onselfclosingtag=function(){this._options.xmlMode||this._options.recognizeSelfClosing||this._foreignContext[this._foreignContext.length-1]?this._closeCurrentTag():this.onopentagend()},u.prototype._closeCurrentTag=function(){var e=this._tagname;this.onopentagend(),this._stack[this._stack.length-1]===e&&(this._cbs.onclosetag&&this._cbs.onclosetag(e),this._stack.pop())},u.prototype.onattribname=function(e){this._lowerCaseAttributeNames&&(e=e.toLowerCase()),this._attribname=e},u.prototype.onattribdata=function(e){this._attribvalue+=e},u.prototype.onattribend=function(){this._cbs.onattribute&&this._cbs.onattribute(this._attribname,this._attribvalue),this._attribs&&!Object.prototype.hasOwnProperty.call(this._attribs,this._attribname)&&(this._attribs[this._attribname]=this._attribvalue),this._attribname="",this._attribvalue=""},u.prototype._getInstructionName=function(e){var t=e.search(c),n=t<0?e:e.substr(0,t);return this._lowerCaseTagNames&&(n=n.toLowerCase()),n},u.prototype.ondeclaration=function(e){if(this._cbs.onprocessinginstruction){var t=this._getInstructionName(e);this._cbs.onprocessinginstruction("!"+t,"!"+e)}},u.prototype.onprocessinginstruction=function(e){if(this._cbs.onprocessinginstruction){var t=this._getInstructionName(e);this._cbs.onprocessinginstruction("?"+t,"?"+e)}},u.prototype.oncomment=function(e){this._updatePosition(4),this._cbs.oncomment&&this._cbs.oncomment(e),this._cbs.oncommentend&&this._cbs.oncommentend()},u.prototype.oncdata=function(e){this._updatePosition(1),this._options.xmlMode||this._options.recognizeCDATA?(this._cbs.oncdatastart&&this._cbs.oncdatastart(),this._cbs.ontext&&this._cbs.ontext(e),this._cbs.oncdataend&&this._cbs.oncdataend()):this.oncomment("[CDATA["+e+"]]")},u.prototype.onerror=function(e){this._cbs.onerror&&this._cbs.onerror(e)},u.prototype.onend=function(){if(this._cbs.onclosetag)for(var e=this._stack.length;e>0;this._cbs.onclosetag(this._stack[--e]));this._cbs.onend&&this._cbs.onend()},u.prototype.reset=function(){this._cbs.onreset&&this._cbs.onreset(),this._tokenizer.reset(),this._tagname="",this._attribname="",this._attribs=null,this._stack=[],this._cbs.onparserinit&&this._cbs.onparserinit(this)},u.prototype.parseComplete=function(e){this.reset(),this.end(e)},u.prototype.write=function(e){this._tokenizer.write(e)},u.prototype.end=function(e){this._tokenizer.end(e)},u.prototype.pause=function(){this._tokenizer.pause()},u.prototype.resume=function(){this._tokenizer.resume()},u.prototype.parseChunk=u.prototype.write,u.prototype.done=u.prototype.end,e.exports=u},function(e,t,n){e.exports=ge;var r=n(167),o=n(169),i=n(170),a=n(171),s=0,l=s++,c=s++,u=s++,f=s++,p=s++,d=s++,h=s++,m=s++,g=s++,y=s++,b=s++,A=s++,v=s++,C=s++,w=s++,_=s++,E=s++,x=s++,k=s++,T=s++,B=s++,S=s++,O=s++,N=s++,P=s++,D=s++,L=s++,R=s++,q=s++,I=s++,j=s++,U=s++,F=s++,M=s++,z=s++,H=s++,G=s++,V=s++,W=s++,X=s++,Y=s++,K=s++,$=s++,Q=s++,J=s++,Z=s++,ee=s++,te=s++,ne=s++,re=s++,oe=s++,ie=s++,ae=s++,se=s++,le=s++,ce=0,ue=ce++,fe=ce++,pe=ce++;function de(e){return" "===e||"\n"===e||"\t"===e||"\f"===e||"\r"===e}function he(e,t,n){var r=e.toLowerCase();return e===r?function(e){e===r?this._state=t:(this._state=n,this._index--)}:function(o){o===r||o===e?this._state=t:(this._state=n,this._index--)}}function me(e,t){var n=e.toLowerCase();return function(r){r===n||r===e?this._state=t:(this._state=u,this._index--)}}function ge(e,t){this._state=l,this._buffer="",this._sectionStart=0,this._index=0,this._bufferOffset=0,this._baseState=l,this._special=ue,this._cbs=t,this._running=!0,this._ended=!1,this._xmlMode=!(!e||!e.xmlMode),this._decodeEntities=!(!e||!e.decodeEntities)}ge.prototype._stateText=function(e){"<"===e?(this._index>this._sectionStart&&this._cbs.ontext(this._getSection()),this._state=c,this._sectionStart=this._index):this._decodeEntities&&this._special===ue&&"&"===e&&(this._index>this._sectionStart&&this._cbs.ontext(this._getSection()),this._baseState=l,this._state=oe,this._sectionStart=this._index)},ge.prototype._stateBeforeTagName=function(e){"/"===e?this._state=p:"<"===e?(this._cbs.ontext(this._getSection()),this._sectionStart=this._index):">"===e||this._special!==ue||de(e)?this._state=l:"!"===e?(this._state=w,this._sectionStart=this._index+1):"?"===e?(this._state=E,this._sectionStart=this._index+1):(this._state=this._xmlMode||"s"!==e&&"S"!==e?u:j,this._sectionStart=this._index)},ge.prototype._stateInTagName=function(e){("/"===e||">"===e||de(e))&&(this._emitToken("onopentagname"),this._state=m,this._index--)},ge.prototype._stateBeforeCloseingTagName=function(e){de(e)||(">"===e?this._state=l:this._special!==ue?"s"===e||"S"===e?this._state=U:(this._state=l,this._index--):(this._state=d,this._sectionStart=this._index))},ge.prototype._stateInCloseingTagName=function(e){(">"===e||de(e))&&(this._emitToken("onclosetag"),this._state=h,this._index--)},ge.prototype._stateAfterCloseingTagName=function(e){">"===e&&(this._state=l,this._sectionStart=this._index+1)},ge.prototype._stateBeforeAttributeName=function(e){">"===e?(this._cbs.onopentagend(),this._state=l,this._sectionStart=this._index+1):"/"===e?this._state=f:de(e)||(this._state=g,this._sectionStart=this._index)},ge.prototype._stateInSelfClosingTag=function(e){">"===e?(this._cbs.onselfclosingtag(),this._state=l,this._sectionStart=this._index+1):de(e)||(this._state=m,this._index--)},ge.prototype._stateInAttributeName=function(e){("="===e||"/"===e||">"===e||de(e))&&(this._cbs.onattribname(this._getSection()),this._sectionStart=-1,this._state=y,this._index--)},ge.prototype._stateAfterAttributeName=function(e){"="===e?this._state=b:"/"===e||">"===e?(this._cbs.onattribend(),this._state=m,this._index--):de(e)||(this._cbs.onattribend(),this._state=g,this._sectionStart=this._index)},ge.prototype._stateBeforeAttributeValue=function(e){'"'===e?(this._state=A,this._sectionStart=this._index+1):"'"===e?(this._state=v,this._sectionStart=this._index+1):de(e)||(this._state=C,this._sectionStart=this._index,this._index--)},ge.prototype._stateInAttributeValueDoubleQuotes=function(e){'"'===e?(this._emitToken("onattribdata"),this._cbs.onattribend(),this._state=m):this._decodeEntities&&"&"===e&&(this._emitToken("onattribdata"),this._baseState=this._state,this._state=oe,this._sectionStart=this._index)},ge.prototype._stateInAttributeValueSingleQuotes=function(e){"'"===e?(this._emitToken("onattribdata"),this._cbs.onattribend(),this._state=m):this._decodeEntities&&"&"===e&&(this._emitToken("onattribdata"),this._baseState=this._state,this._state=oe,this._sectionStart=this._index)},ge.prototype._stateInAttributeValueNoQuotes=function(e){de(e)||">"===e?(this._emitToken("onattribdata"),this._cbs.onattribend(),this._state=m,this._index--):this._decodeEntities&&"&"===e&&(this._emitToken("onattribdata"),this._baseState=this._state,this._state=oe,this._sectionStart=this._index)},ge.prototype._stateBeforeDeclaration=function(e){this._state="["===e?S:"-"===e?x:_},ge.prototype._stateInDeclaration=function(e){">"===e&&(this._cbs.ondeclaration(this._getSection()),this._state=l,this._sectionStart=this._index+1)},ge.prototype._stateInProcessingInstruction=function(e){">"===e&&(this._cbs.onprocessinginstruction(this._getSection()),this._state=l,this._sectionStart=this._index+1)},ge.prototype._stateBeforeComment=function(e){"-"===e?(this._state=k,this._sectionStart=this._index+1):this._state=_},ge.prototype._stateInComment=function(e){"-"===e&&(this._state=T)},ge.prototype._stateAfterComment1=function(e){this._state="-"===e?B:k},ge.prototype._stateAfterComment2=function(e){">"===e?(this._cbs.oncomment(this._buffer.substring(this._sectionStart,this._index-2)),this._state=l,this._sectionStart=this._index+1):"-"!==e&&(this._state=k)},ge.prototype._stateBeforeCdata1=he("C",O,_),ge.prototype._stateBeforeCdata2=he("D",N,_),ge.prototype._stateBeforeCdata3=he("A",P,_),ge.prototype._stateBeforeCdata4=he("T",D,_),ge.prototype._stateBeforeCdata5=he("A",L,_),ge.prototype._stateBeforeCdata6=function(e){"["===e?(this._state=R,this._sectionStart=this._index+1):(this._state=_,this._index--)},ge.prototype._stateInCdata=function(e){"]"===e&&(this._state=q)},ge.prototype._stateAfterCdata1=function(e){this._state="]"===e?I:R},ge.prototype._stateAfterCdata2=function(e){">"===e?(this._cbs.oncdata(this._buffer.substring(this._sectionStart,this._index-2)),this._state=l,this._sectionStart=this._index+1):"]"!==e&&(this._state=R)},ge.prototype._stateBeforeSpecial=function(e){"c"===e||"C"===e?this._state=F:"t"===e||"T"===e?this._state=$:(this._state=u,this._index--)},ge.prototype._stateBeforeSpecialEnd=function(e){this._special!==fe||"c"!==e&&"C"!==e?this._special!==pe||"t"!==e&&"T"!==e?this._state=l:this._state=ee:this._state=V},ge.prototype._stateBeforeScript1=me("R",M),ge.prototype._stateBeforeScript2=me("I",z),ge.prototype._stateBeforeScript3=me("P",H),ge.prototype._stateBeforeScript4=me("T",G),ge.prototype._stateBeforeScript5=function(e){("/"===e||">"===e||de(e))&&(this._special=fe),this._state=u,this._index--},ge.prototype._stateAfterScript1=he("R",W,l),ge.prototype._stateAfterScript2=he("I",X,l),ge.prototype._stateAfterScript3=he("P",Y,l),ge.prototype._stateAfterScript4=he("T",K,l),ge.prototype._stateAfterScript5=function(e){">"===e||de(e)?(this._special=ue,this._state=d,this._sectionStart=this._index-6,this._index--):this._state=l},ge.prototype._stateBeforeStyle1=me("Y",Q),ge.prototype._stateBeforeStyle2=me("L",J),ge.prototype._stateBeforeStyle3=me("E",Z),ge.prototype._stateBeforeStyle4=function(e){("/"===e||">"===e||de(e))&&(this._special=pe),this._state=u,this._index--},ge.prototype._stateAfterStyle1=he("Y",te,l),ge.prototype._stateAfterStyle2=he("L",ne,l),ge.prototype._stateAfterStyle3=he("E",re,l),ge.prototype._stateAfterStyle4=function(e){">"===e||de(e)?(this._special=ue,this._state=d,this._sectionStart=this._index-5,this._index--):this._state=l},ge.prototype._stateBeforeEntity=he("#",ie,ae),ge.prototype._stateBeforeNumericEntity=he("X",le,se),ge.prototype._parseNamedEntityStrict=function(){if(this._sectionStart+1<this._index){var e=this._buffer.substring(this._sectionStart+1,this._index),t=this._xmlMode?a:o;t.hasOwnProperty(e)&&(this._emitPartial(t[e]),this._sectionStart=this._index+1)}},ge.prototype._parseLegacyEntity=function(){var e=this._sectionStart+1,t=this._index-e;for(t>6&&(t=6);t>=2;){var n=this._buffer.substr(e,t);if(i.hasOwnProperty(n))return this._emitPartial(i[n]),void(this._sectionStart+=t+1);t--}},ge.prototype._stateInNamedEntity=function(e){";"===e?(this._parseNamedEntityStrict(),this._sectionStart+1<this._index&&!this._xmlMode&&this._parseLegacyEntity(),this._state=this._baseState):(e<"a"||e>"z")&&(e<"A"||e>"Z")&&(e<"0"||e>"9")&&(this._xmlMode||this._sectionStart+1===this._index||(this._baseState!==l?"="!==e&&this._parseNamedEntityStrict():this._parseLegacyEntity()),this._state=this._baseState,this._index--)},ge.prototype._decodeNumericEntity=function(e,t){var n=this._sectionStart+e;if(n!==this._index){var o=this._buffer.substring(n,this._index),i=parseInt(o,t);this._emitPartial(r(i)),this._sectionStart=this._index}else this._sectionStart--;this._state=this._baseState},ge.prototype._stateInNumericEntity=function(e){";"===e?(this._decodeNumericEntity(2,10),this._sectionStart++):(e<"0"||e>"9")&&(this._xmlMode?this._state=this._baseState:this._decodeNumericEntity(2,10),this._index--)},ge.prototype._stateInHexEntity=function(e){";"===e?(this._decodeNumericEntity(3,16),this._sectionStart++):(e<"a"||e>"f")&&(e<"A"||e>"F")&&(e<"0"||e>"9")&&(this._xmlMode?this._state=this._baseState:this._decodeNumericEntity(3,16),this._index--)},ge.prototype._cleanup=function(){this._sectionStart<0?(this._buffer="",this._bufferOffset+=this._index,this._index=0):this._running&&(this._state===l?(this._sectionStart!==this._index&&this._cbs.ontext(this._buffer.substr(this._sectionStart)),this._buffer="",this._bufferOffset+=this._index,this._index=0):this._sectionStart===this._index?(this._buffer="",this._bufferOffset+=this._index,this._index=0):(this._buffer=this._buffer.substr(this._sectionStart),this._index-=this._sectionStart,this._bufferOffset+=this._sectionStart),this._sectionStart=0)},ge.prototype.write=function(e){this._ended&&this._cbs.onerror(Error(".write() after done!")),this._buffer+=e,this._parse()},ge.prototype._parse=function(){for(;this._index<this._buffer.length&&this._running;){var e=this._buffer.charAt(this._index);this._state===l?this._stateText(e):this._state===c?this._stateBeforeTagName(e):this._state===u?this._stateInTagName(e):this._state===p?this._stateBeforeCloseingTagName(e):this._state===d?this._stateInCloseingTagName(e):this._state===h?this._stateAfterCloseingTagName(e):this._state===f?this._stateInSelfClosingTag(e):this._state===m?this._stateBeforeAttributeName(e):this._state===g?this._stateInAttributeName(e):this._state===y?this._stateAfterAttributeName(e):this._state===b?this._stateBeforeAttributeValue(e):this._state===A?this._stateInAttributeValueDoubleQuotes(e):this._state===v?this._stateInAttributeValueSingleQuotes(e):this._state===C?this._stateInAttributeValueNoQuotes(e):this._state===w?this._stateBeforeDeclaration(e):this._state===_?this._stateInDeclaration(e):this._state===E?this._stateInProcessingInstruction(e):this._state===x?this._stateBeforeComment(e):this._state===k?this._stateInComment(e):this._state===T?this._stateAfterComment1(e):this._state===B?this._stateAfterComment2(e):this._state===S?this._stateBeforeCdata1(e):this._state===O?this._stateBeforeCdata2(e):this._state===N?this._stateBeforeCdata3(e):this._state===P?this._stateBeforeCdata4(e):this._state===D?this._stateBeforeCdata5(e):this._state===L?this._stateBeforeCdata6(e):this._state===R?this._stateInCdata(e):this._state===q?this._stateAfterCdata1(e):this._state===I?this._stateAfterCdata2(e):this._state===j?this._stateBeforeSpecial(e):this._state===U?this._stateBeforeSpecialEnd(e):this._state===F?this._stateBeforeScript1(e):this._state===M?this._stateBeforeScript2(e):this._state===z?this._stateBeforeScript3(e):this._state===H?this._stateBeforeScript4(e):this._state===G?this._stateBeforeScript5(e):this._state===V?this._stateAfterScript1(e):this._state===W?this._stateAfterScript2(e):this._state===X?this._stateAfterScript3(e):this._state===Y?this._stateAfterScript4(e):this._state===K?this._stateAfterScript5(e):this._state===$?this._stateBeforeStyle1(e):this._state===Q?this._stateBeforeStyle2(e):this._state===J?this._stateBeforeStyle3(e):this._state===Z?this._stateBeforeStyle4(e):this._state===ee?this._stateAfterStyle1(e):this._state===te?this._stateAfterStyle2(e):this._state===ne?this._stateAfterStyle3(e):this._state===re?this._stateAfterStyle4(e):this._state===oe?this._stateBeforeEntity(e):this._state===ie?this._stateBeforeNumericEntity(e):this._state===ae?this._stateInNamedEntity(e):this._state===se?this._stateInNumericEntity(e):this._state===le?this._stateInHexEntity(e):this._cbs.onerror(Error("unknown _state"),this._state),this._index++}this._cleanup()},ge.prototype.pause=function(){this._running=!1},ge.prototype.resume=function(){this._running=!0,this._index<this._buffer.length&&this._parse(),this._ended&&this._finish()},ge.prototype.end=function(e){this._ended&&this._cbs.onerror(Error(".end() after done!")),e&&this.write(e),this._ended=!0,this._running&&this._finish()},ge.prototype._finish=function(){this._sectionStart<this._index&&this._handleTrailingData(),this._cbs.onend()},ge.prototype._handleTrailingData=function(){var e=this._buffer.substr(this._sectionStart);this._state===R||this._state===q||this._state===I?this._cbs.oncdata(e):this._state===k||this._state===T||this._state===B?this._cbs.oncomment(e):this._state!==ae||this._xmlMode?this._state!==se||this._xmlMode?this._state!==le||this._xmlMode?this._state!==u&&this._state!==m&&this._state!==b&&this._state!==y&&this._state!==g&&this._state!==v&&this._state!==A&&this._state!==C&&this._state!==d&&this._cbs.ontext(e):(this._decodeNumericEntity(3,16),this._sectionStart<this._index&&(this._state=this._baseState,this._handleTrailingData())):(this._decodeNumericEntity(2,10),this._sectionStart<this._index&&(this._state=this._baseState,this._handleTrailingData())):(this._parseLegacyEntity(),this._sectionStart<this._index&&(this._state=this._baseState,this._handleTrailingData()))},ge.prototype.reset=function(){ge.call(this,{xmlMode:this._xmlMode,decodeEntities:this._decodeEntities},this._cbs)},ge.prototype.getAbsoluteIndex=function(){return this._bufferOffset+this._index},ge.prototype._getSection=function(){return this._buffer.substring(this._sectionStart,this._index)},ge.prototype._emitToken=function(e){this._cbs[e](this._getSection()),this._sectionStart=-1},ge.prototype._emitPartial=function(e){this._baseState!==l?this._cbs.onattribdata(e):this._cbs.ontext(e)}},function(e,t,n){var r=n(23),o=/\s+/g,i=n(71),a=n(173);function s(e,t,n){"object"==typeof e?(n=t,t=e,e=null):"function"==typeof t&&(n=t,t=l),this._callback=e,this._options=t||l,this._elementCB=n,this.dom=[],this._done=!1,this._tagStack=[],this._parser=this._parser||null}var l={normalizeWhitespace:!1,withStartIndices:!1,withEndIndices:!1};s.prototype.onparserinit=function(e){this._parser=e},s.prototype.onreset=function(){s.call(this,this._callback,this._options,this._elementCB)},s.prototype.onend=function(){this._done||(this._done=!0,this._parser=null,this._handleCallback(null))},s.prototype._handleCallback=s.prototype.onerror=function(e){if("function"==typeof this._callback)this._callback(e,this.dom);else if(e)throw e},s.prototype.onclosetag=function(){var e=this._tagStack.pop();this._options.withEndIndices&&e&&(e.endIndex=this._parser.endIndex),this._elementCB&&this._elementCB(e)},s.prototype._createDomElement=function(e){if(!this._options.withDomLvl1)return e;var t;for(var n in t="tag"===e.type?Object.create(a):Object.create(i),e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t},s.prototype._addDomElement=function(e){var t=this._tagStack[this._tagStack.length-1],n=t?t.children:this.dom,r=n[n.length-1];e.next=null,this._options.withStartIndices&&(e.startIndex=this._parser.startIndex),this._options.withEndIndices&&(e.endIndex=this._parser.endIndex),r?(e.prev=r,r.next=e):e.prev=null,n.push(e),e.parent=t||null},s.prototype.onopentag=function(e,t){var n={type:"script"===e?r.Script:"style"===e?r.Style:r.Tag,name:e,attribs:t,children:[]},o=this._createDomElement(n);this._addDomElement(o),this._tagStack.push(o)},s.prototype.ontext=function(e){var t,n=this._options.normalizeWhitespace||this._options.ignoreWhitespace;if(!this._tagStack.length&&this.dom.length&&(t=this.dom[this.dom.length-1]).type===r.Text)n?t.data=(t.data+e).replace(o," "):t.data+=e;else if(this._tagStack.length&&(t=this._tagStack[this._tagStack.length-1])&&(t=t.children[t.children.length-1])&&t.type===r.Text)n?t.data=(t.data+e).replace(o," "):t.data+=e;else{n&&(e=e.replace(o," "));var i=this._createDomElement({data:e,type:r.Text});this._addDomElement(i)}},s.prototype.oncomment=function(e){var t=this._tagStack[this._tagStack.length-1];if(t&&t.type===r.Comment)t.data+=e;else{var n={data:e,type:r.Comment},o=this._createDomElement(n);this._addDomElement(o),this._tagStack.push(o)}},s.prototype.oncdatastart=function(){var e={children:[{data:"",type:r.Text}],type:r.CDATA},t=this._createDomElement(e);this._addDomElement(t),this._tagStack.push(t)},s.prototype.oncommentend=s.prototype.oncdataend=function(){this._tagStack.pop()},s.prototype.onprocessinginstruction=function(e,t){var n=this._createDomElement({name:e,data:t,type:r.Directive});this._addDomElement(n)},e.exports=s},function(e,t){var n=e.exports={get firstChild(){var e=this.children;return e&&e[0]||null},get lastChild(){var e=this.children;return e&&e[e.length-1]||null},get nodeType(){return o[this.type]||o.element}},r={tagName:"name",childNodes:"children",parentNode:"parent",previousSibling:"prev",nextSibling:"next",nodeValue:"data"},o={element:1,text:3,cdata:4,comment:8};Object.keys(r).forEach((function(e){var t=r[e];Object.defineProperty(n,e,{get:function(){return this[t]||null},set:function(e){return this[t]=e,e}})}))},function(e,t,n){var r=e.exports;[n(175),n(183),n(184),n(185),n(186),n(187)].forEach((function(e){Object.keys(e).forEach((function(t){r[t]=e[t].bind(r)}))}))},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(74)),i=r(n(179)),a=r(n(75)),s=r(n(180));function l(e){var t=Object.keys(e).join("|"),n=u(e),r=new RegExp("&(?:"+(t+="|#[xX][\\da-fA-F]+|#\\d+")+");","g");return function(e){return String(e).replace(r,n)}}t.decodeXML=l(a.default),t.decodeHTMLStrict=l(o.default);var c=function(e,t){return e<t?1:-1};function u(e){return function(t){return"#"===t.charAt(1)?"X"===t.charAt(2)||"x"===t.charAt(2)?s.default(parseInt(t.substr(3),16)):s.default(parseInt(t.substr(2),10)):e[t.slice(1,-1)]}}t.decodeHTML=function(){for(var e=Object.keys(i.default).sort(c),t=Object.keys(o.default).sort(c),n=0,r=0;n<t.length;n++)e[r]===t[n]?(t[n]+=";?",r++):t[n]+=";";var a=new RegExp("&(?:"+t.join("|")+"|#[xX][\\da-fA-F]+;?|#\\d+;?)","g"),s=u(o.default);function l(e){return";"!==e.substr(-1)&&(e+=";"),s(e)}return function(e){return String(e).replace(a,l)}}()},function(e){e.exports=JSON.parse('{"Aacute":"Á","aacute":"á","Abreve":"Ă","abreve":"ă","ac":"∾","acd":"∿","acE":"∾̳","Acirc":"Â","acirc":"â","acute":"´","Acy":"А","acy":"а","AElig":"Æ","aelig":"æ","af":"⁡","Afr":"𝔄","afr":"𝔞","Agrave":"À","agrave":"à","alefsym":"ℵ","aleph":"ℵ","Alpha":"Α","alpha":"α","Amacr":"Ā","amacr":"ā","amalg":"⨿","amp":"&","AMP":"&","andand":"⩕","And":"⩓","and":"∧","andd":"⩜","andslope":"⩘","andv":"⩚","ang":"∠","ange":"⦤","angle":"∠","angmsdaa":"⦨","angmsdab":"⦩","angmsdac":"⦪","angmsdad":"⦫","angmsdae":"⦬","angmsdaf":"⦭","angmsdag":"⦮","angmsdah":"⦯","angmsd":"∡","angrt":"∟","angrtvb":"⊾","angrtvbd":"⦝","angsph":"∢","angst":"Å","angzarr":"⍼","Aogon":"Ą","aogon":"ą","Aopf":"𝔸","aopf":"𝕒","apacir":"⩯","ap":"≈","apE":"⩰","ape":"≊","apid":"≋","apos":"\'","ApplyFunction":"⁡","approx":"≈","approxeq":"≊","Aring":"Å","aring":"å","Ascr":"𝒜","ascr":"𝒶","Assign":"≔","ast":"*","asymp":"≈","asympeq":"≍","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","awconint":"∳","awint":"⨑","backcong":"≌","backepsilon":"϶","backprime":"‵","backsim":"∽","backsimeq":"⋍","Backslash":"∖","Barv":"⫧","barvee":"⊽","barwed":"⌅","Barwed":"⌆","barwedge":"⌅","bbrk":"⎵","bbrktbrk":"⎶","bcong":"≌","Bcy":"Б","bcy":"б","bdquo":"„","becaus":"∵","because":"∵","Because":"∵","bemptyv":"⦰","bepsi":"϶","bernou":"ℬ","Bernoullis":"ℬ","Beta":"Β","beta":"β","beth":"ℶ","between":"≬","Bfr":"𝔅","bfr":"𝔟","bigcap":"⋂","bigcirc":"◯","bigcup":"⋃","bigodot":"⨀","bigoplus":"⨁","bigotimes":"⨂","bigsqcup":"⨆","bigstar":"★","bigtriangledown":"▽","bigtriangleup":"△","biguplus":"⨄","bigvee":"⋁","bigwedge":"⋀","bkarow":"⤍","blacklozenge":"⧫","blacksquare":"▪","blacktriangle":"▴","blacktriangledown":"▾","blacktriangleleft":"◂","blacktriangleright":"▸","blank":"␣","blk12":"▒","blk14":"░","blk34":"▓","block":"█","bne":"=⃥","bnequiv":"≡⃥","bNot":"⫭","bnot":"⌐","Bopf":"𝔹","bopf":"𝕓","bot":"⊥","bottom":"⊥","bowtie":"⋈","boxbox":"⧉","boxdl":"┐","boxdL":"╕","boxDl":"╖","boxDL":"╗","boxdr":"┌","boxdR":"╒","boxDr":"╓","boxDR":"╔","boxh":"─","boxH":"═","boxhd":"┬","boxHd":"╤","boxhD":"╥","boxHD":"╦","boxhu":"┴","boxHu":"╧","boxhU":"╨","boxHU":"╩","boxminus":"⊟","boxplus":"⊞","boxtimes":"⊠","boxul":"┘","boxuL":"╛","boxUl":"╜","boxUL":"╝","boxur":"└","boxuR":"╘","boxUr":"╙","boxUR":"╚","boxv":"│","boxV":"║","boxvh":"┼","boxvH":"╪","boxVh":"╫","boxVH":"╬","boxvl":"┤","boxvL":"╡","boxVl":"╢","boxVL":"╣","boxvr":"├","boxvR":"╞","boxVr":"╟","boxVR":"╠","bprime":"‵","breve":"˘","Breve":"˘","brvbar":"¦","bscr":"𝒷","Bscr":"ℬ","bsemi":"⁏","bsim":"∽","bsime":"⋍","bsolb":"⧅","bsol":"\\\\","bsolhsub":"⟈","bull":"•","bullet":"•","bump":"≎","bumpE":"⪮","bumpe":"≏","Bumpeq":"≎","bumpeq":"≏","Cacute":"Ć","cacute":"ć","capand":"⩄","capbrcup":"⩉","capcap":"⩋","cap":"∩","Cap":"⋒","capcup":"⩇","capdot":"⩀","CapitalDifferentialD":"ⅅ","caps":"∩︀","caret":"⁁","caron":"ˇ","Cayleys":"ℭ","ccaps":"⩍","Ccaron":"Č","ccaron":"č","Ccedil":"Ç","ccedil":"ç","Ccirc":"Ĉ","ccirc":"ĉ","Cconint":"∰","ccups":"⩌","ccupssm":"⩐","Cdot":"Ċ","cdot":"ċ","cedil":"¸","Cedilla":"¸","cemptyv":"⦲","cent":"¢","centerdot":"·","CenterDot":"·","cfr":"𝔠","Cfr":"ℭ","CHcy":"Ч","chcy":"ч","check":"✓","checkmark":"✓","Chi":"Χ","chi":"χ","circ":"ˆ","circeq":"≗","circlearrowleft":"↺","circlearrowright":"↻","circledast":"⊛","circledcirc":"⊚","circleddash":"⊝","CircleDot":"⊙","circledR":"®","circledS":"Ⓢ","CircleMinus":"⊖","CirclePlus":"⊕","CircleTimes":"⊗","cir":"○","cirE":"⧃","cire":"≗","cirfnint":"⨐","cirmid":"⫯","cirscir":"⧂","ClockwiseContourIntegral":"∲","CloseCurlyDoubleQuote":"”","CloseCurlyQuote":"’","clubs":"♣","clubsuit":"♣","colon":":","Colon":"∷","Colone":"⩴","colone":"≔","coloneq":"≔","comma":",","commat":"@","comp":"∁","compfn":"∘","complement":"∁","complexes":"ℂ","cong":"≅","congdot":"⩭","Congruent":"≡","conint":"∮","Conint":"∯","ContourIntegral":"∮","copf":"𝕔","Copf":"ℂ","coprod":"∐","Coproduct":"∐","copy":"©","COPY":"©","copysr":"℗","CounterClockwiseContourIntegral":"∳","crarr":"↵","cross":"✗","Cross":"⨯","Cscr":"𝒞","cscr":"𝒸","csub":"⫏","csube":"⫑","csup":"⫐","csupe":"⫒","ctdot":"⋯","cudarrl":"⤸","cudarrr":"⤵","cuepr":"⋞","cuesc":"⋟","cularr":"↶","cularrp":"⤽","cupbrcap":"⩈","cupcap":"⩆","CupCap":"≍","cup":"∪","Cup":"⋓","cupcup":"⩊","cupdot":"⊍","cupor":"⩅","cups":"∪︀","curarr":"↷","curarrm":"⤼","curlyeqprec":"⋞","curlyeqsucc":"⋟","curlyvee":"⋎","curlywedge":"⋏","curren":"¤","curvearrowleft":"↶","curvearrowright":"↷","cuvee":"⋎","cuwed":"⋏","cwconint":"∲","cwint":"∱","cylcty":"⌭","dagger":"†","Dagger":"‡","daleth":"ℸ","darr":"↓","Darr":"↡","dArr":"⇓","dash":"‐","Dashv":"⫤","dashv":"⊣","dbkarow":"⤏","dblac":"˝","Dcaron":"Ď","dcaron":"ď","Dcy":"Д","dcy":"д","ddagger":"‡","ddarr":"⇊","DD":"ⅅ","dd":"ⅆ","DDotrahd":"⤑","ddotseq":"⩷","deg":"°","Del":"∇","Delta":"Δ","delta":"δ","demptyv":"⦱","dfisht":"⥿","Dfr":"𝔇","dfr":"𝔡","dHar":"⥥","dharl":"⇃","dharr":"⇂","DiacriticalAcute":"´","DiacriticalDot":"˙","DiacriticalDoubleAcute":"˝","DiacriticalGrave":"`","DiacriticalTilde":"˜","diam":"⋄","diamond":"⋄","Diamond":"⋄","diamondsuit":"♦","diams":"♦","die":"¨","DifferentialD":"ⅆ","digamma":"ϝ","disin":"⋲","div":"÷","divide":"÷","divideontimes":"⋇","divonx":"⋇","DJcy":"Ђ","djcy":"ђ","dlcorn":"⌞","dlcrop":"⌍","dollar":"$","Dopf":"𝔻","dopf":"𝕕","Dot":"¨","dot":"˙","DotDot":"⃜","doteq":"≐","doteqdot":"≑","DotEqual":"≐","dotminus":"∸","dotplus":"∔","dotsquare":"⊡","doublebarwedge":"⌆","DoubleContourIntegral":"∯","DoubleDot":"¨","DoubleDownArrow":"⇓","DoubleLeftArrow":"⇐","DoubleLeftRightArrow":"⇔","DoubleLeftTee":"⫤","DoubleLongLeftArrow":"⟸","DoubleLongLeftRightArrow":"⟺","DoubleLongRightArrow":"⟹","DoubleRightArrow":"⇒","DoubleRightTee":"⊨","DoubleUpArrow":"⇑","DoubleUpDownArrow":"⇕","DoubleVerticalBar":"∥","DownArrowBar":"⤓","downarrow":"↓","DownArrow":"↓","Downarrow":"⇓","DownArrowUpArrow":"⇵","DownBreve":"̑","downdownarrows":"⇊","downharpoonleft":"⇃","downharpoonright":"⇂","DownLeftRightVector":"⥐","DownLeftTeeVector":"⥞","DownLeftVectorBar":"⥖","DownLeftVector":"↽","DownRightTeeVector":"⥟","DownRightVectorBar":"⥗","DownRightVector":"⇁","DownTeeArrow":"↧","DownTee":"⊤","drbkarow":"⤐","drcorn":"⌟","drcrop":"⌌","Dscr":"𝒟","dscr":"𝒹","DScy":"Ѕ","dscy":"ѕ","dsol":"⧶","Dstrok":"Đ","dstrok":"đ","dtdot":"⋱","dtri":"▿","dtrif":"▾","duarr":"⇵","duhar":"⥯","dwangle":"⦦","DZcy":"Џ","dzcy":"џ","dzigrarr":"⟿","Eacute":"É","eacute":"é","easter":"⩮","Ecaron":"Ě","ecaron":"ě","Ecirc":"Ê","ecirc":"ê","ecir":"≖","ecolon":"≕","Ecy":"Э","ecy":"э","eDDot":"⩷","Edot":"Ė","edot":"ė","eDot":"≑","ee":"ⅇ","efDot":"≒","Efr":"𝔈","efr":"𝔢","eg":"⪚","Egrave":"È","egrave":"è","egs":"⪖","egsdot":"⪘","el":"⪙","Element":"∈","elinters":"⏧","ell":"ℓ","els":"⪕","elsdot":"⪗","Emacr":"Ē","emacr":"ē","empty":"∅","emptyset":"∅","EmptySmallSquare":"◻","emptyv":"∅","EmptyVerySmallSquare":"▫","emsp13":" ","emsp14":" ","emsp":" ","ENG":"Ŋ","eng":"ŋ","ensp":" ","Eogon":"Ę","eogon":"ę","Eopf":"𝔼","eopf":"𝕖","epar":"⋕","eparsl":"⧣","eplus":"⩱","epsi":"ε","Epsilon":"Ε","epsilon":"ε","epsiv":"ϵ","eqcirc":"≖","eqcolon":"≕","eqsim":"≂","eqslantgtr":"⪖","eqslantless":"⪕","Equal":"⩵","equals":"=","EqualTilde":"≂","equest":"≟","Equilibrium":"⇌","equiv":"≡","equivDD":"⩸","eqvparsl":"⧥","erarr":"⥱","erDot":"≓","escr":"ℯ","Escr":"ℰ","esdot":"≐","Esim":"⩳","esim":"≂","Eta":"Η","eta":"η","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","euro":"€","excl":"!","exist":"∃","Exists":"∃","expectation":"ℰ","exponentiale":"ⅇ","ExponentialE":"ⅇ","fallingdotseq":"≒","Fcy":"Ф","fcy":"ф","female":"♀","ffilig":"ﬃ","fflig":"ﬀ","ffllig":"ﬄ","Ffr":"𝔉","ffr":"𝔣","filig":"ﬁ","FilledSmallSquare":"◼","FilledVerySmallSquare":"▪","fjlig":"fj","flat":"♭","fllig":"ﬂ","fltns":"▱","fnof":"ƒ","Fopf":"𝔽","fopf":"𝕗","forall":"∀","ForAll":"∀","fork":"⋔","forkv":"⫙","Fouriertrf":"ℱ","fpartint":"⨍","frac12":"½","frac13":"⅓","frac14":"¼","frac15":"⅕","frac16":"⅙","frac18":"⅛","frac23":"⅔","frac25":"⅖","frac34":"¾","frac35":"⅗","frac38":"⅜","frac45":"⅘","frac56":"⅚","frac58":"⅝","frac78":"⅞","frasl":"⁄","frown":"⌢","fscr":"𝒻","Fscr":"ℱ","gacute":"ǵ","Gamma":"Γ","gamma":"γ","Gammad":"Ϝ","gammad":"ϝ","gap":"⪆","Gbreve":"Ğ","gbreve":"ğ","Gcedil":"Ģ","Gcirc":"Ĝ","gcirc":"ĝ","Gcy":"Г","gcy":"г","Gdot":"Ġ","gdot":"ġ","ge":"≥","gE":"≧","gEl":"⪌","gel":"⋛","geq":"≥","geqq":"≧","geqslant":"⩾","gescc":"⪩","ges":"⩾","gesdot":"⪀","gesdoto":"⪂","gesdotol":"⪄","gesl":"⋛︀","gesles":"⪔","Gfr":"𝔊","gfr":"𝔤","gg":"≫","Gg":"⋙","ggg":"⋙","gimel":"ℷ","GJcy":"Ѓ","gjcy":"ѓ","gla":"⪥","gl":"≷","glE":"⪒","glj":"⪤","gnap":"⪊","gnapprox":"⪊","gne":"⪈","gnE":"≩","gneq":"⪈","gneqq":"≩","gnsim":"⋧","Gopf":"𝔾","gopf":"𝕘","grave":"`","GreaterEqual":"≥","GreaterEqualLess":"⋛","GreaterFullEqual":"≧","GreaterGreater":"⪢","GreaterLess":"≷","GreaterSlantEqual":"⩾","GreaterTilde":"≳","Gscr":"𝒢","gscr":"ℊ","gsim":"≳","gsime":"⪎","gsiml":"⪐","gtcc":"⪧","gtcir":"⩺","gt":">","GT":">","Gt":"≫","gtdot":"⋗","gtlPar":"⦕","gtquest":"⩼","gtrapprox":"⪆","gtrarr":"⥸","gtrdot":"⋗","gtreqless":"⋛","gtreqqless":"⪌","gtrless":"≷","gtrsim":"≳","gvertneqq":"≩︀","gvnE":"≩︀","Hacek":"ˇ","hairsp":" ","half":"½","hamilt":"ℋ","HARDcy":"Ъ","hardcy":"ъ","harrcir":"⥈","harr":"↔","hArr":"⇔","harrw":"↭","Hat":"^","hbar":"ℏ","Hcirc":"Ĥ","hcirc":"ĥ","hearts":"♥","heartsuit":"♥","hellip":"…","hercon":"⊹","hfr":"𝔥","Hfr":"ℌ","HilbertSpace":"ℋ","hksearow":"⤥","hkswarow":"⤦","hoarr":"⇿","homtht":"∻","hookleftarrow":"↩","hookrightarrow":"↪","hopf":"𝕙","Hopf":"ℍ","horbar":"―","HorizontalLine":"─","hscr":"𝒽","Hscr":"ℋ","hslash":"ℏ","Hstrok":"Ħ","hstrok":"ħ","HumpDownHump":"≎","HumpEqual":"≏","hybull":"⁃","hyphen":"‐","Iacute":"Í","iacute":"í","ic":"⁣","Icirc":"Î","icirc":"î","Icy":"И","icy":"и","Idot":"İ","IEcy":"Е","iecy":"е","iexcl":"¡","iff":"⇔","ifr":"𝔦","Ifr":"ℑ","Igrave":"Ì","igrave":"ì","ii":"ⅈ","iiiint":"⨌","iiint":"∭","iinfin":"⧜","iiota":"℩","IJlig":"Ĳ","ijlig":"ĳ","Imacr":"Ī","imacr":"ī","image":"ℑ","ImaginaryI":"ⅈ","imagline":"ℐ","imagpart":"ℑ","imath":"ı","Im":"ℑ","imof":"⊷","imped":"Ƶ","Implies":"⇒","incare":"℅","in":"∈","infin":"∞","infintie":"⧝","inodot":"ı","intcal":"⊺","int":"∫","Int":"∬","integers":"ℤ","Integral":"∫","intercal":"⊺","Intersection":"⋂","intlarhk":"⨗","intprod":"⨼","InvisibleComma":"⁣","InvisibleTimes":"⁢","IOcy":"Ё","iocy":"ё","Iogon":"Į","iogon":"į","Iopf":"𝕀","iopf":"𝕚","Iota":"Ι","iota":"ι","iprod":"⨼","iquest":"¿","iscr":"𝒾","Iscr":"ℐ","isin":"∈","isindot":"⋵","isinE":"⋹","isins":"⋴","isinsv":"⋳","isinv":"∈","it":"⁢","Itilde":"Ĩ","itilde":"ĩ","Iukcy":"І","iukcy":"і","Iuml":"Ï","iuml":"ï","Jcirc":"Ĵ","jcirc":"ĵ","Jcy":"Й","jcy":"й","Jfr":"𝔍","jfr":"𝔧","jmath":"ȷ","Jopf":"𝕁","jopf":"𝕛","Jscr":"𝒥","jscr":"𝒿","Jsercy":"Ј","jsercy":"ј","Jukcy":"Є","jukcy":"є","Kappa":"Κ","kappa":"κ","kappav":"ϰ","Kcedil":"Ķ","kcedil":"ķ","Kcy":"К","kcy":"к","Kfr":"𝔎","kfr":"𝔨","kgreen":"ĸ","KHcy":"Х","khcy":"х","KJcy":"Ќ","kjcy":"ќ","Kopf":"𝕂","kopf":"𝕜","Kscr":"𝒦","kscr":"𝓀","lAarr":"⇚","Lacute":"Ĺ","lacute":"ĺ","laemptyv":"⦴","lagran":"ℒ","Lambda":"Λ","lambda":"λ","lang":"⟨","Lang":"⟪","langd":"⦑","langle":"⟨","lap":"⪅","Laplacetrf":"ℒ","laquo":"«","larrb":"⇤","larrbfs":"⤟","larr":"←","Larr":"↞","lArr":"⇐","larrfs":"⤝","larrhk":"↩","larrlp":"↫","larrpl":"⤹","larrsim":"⥳","larrtl":"↢","latail":"⤙","lAtail":"⤛","lat":"⪫","late":"⪭","lates":"⪭︀","lbarr":"⤌","lBarr":"⤎","lbbrk":"❲","lbrace":"{","lbrack":"[","lbrke":"⦋","lbrksld":"⦏","lbrkslu":"⦍","Lcaron":"Ľ","lcaron":"ľ","Lcedil":"Ļ","lcedil":"ļ","lceil":"⌈","lcub":"{","Lcy":"Л","lcy":"л","ldca":"⤶","ldquo":"“","ldquor":"„","ldrdhar":"⥧","ldrushar":"⥋","ldsh":"↲","le":"≤","lE":"≦","LeftAngleBracket":"⟨","LeftArrowBar":"⇤","leftarrow":"←","LeftArrow":"←","Leftarrow":"⇐","LeftArrowRightArrow":"⇆","leftarrowtail":"↢","LeftCeiling":"⌈","LeftDoubleBracket":"⟦","LeftDownTeeVector":"⥡","LeftDownVectorBar":"⥙","LeftDownVector":"⇃","LeftFloor":"⌊","leftharpoondown":"↽","leftharpoonup":"↼","leftleftarrows":"⇇","leftrightarrow":"↔","LeftRightArrow":"↔","Leftrightarrow":"⇔","leftrightarrows":"⇆","leftrightharpoons":"⇋","leftrightsquigarrow":"↭","LeftRightVector":"⥎","LeftTeeArrow":"↤","LeftTee":"⊣","LeftTeeVector":"⥚","leftthreetimes":"⋋","LeftTriangleBar":"⧏","LeftTriangle":"⊲","LeftTriangleEqual":"⊴","LeftUpDownVector":"⥑","LeftUpTeeVector":"⥠","LeftUpVectorBar":"⥘","LeftUpVector":"↿","LeftVectorBar":"⥒","LeftVector":"↼","lEg":"⪋","leg":"⋚","leq":"≤","leqq":"≦","leqslant":"⩽","lescc":"⪨","les":"⩽","lesdot":"⩿","lesdoto":"⪁","lesdotor":"⪃","lesg":"⋚︀","lesges":"⪓","lessapprox":"⪅","lessdot":"⋖","lesseqgtr":"⋚","lesseqqgtr":"⪋","LessEqualGreater":"⋚","LessFullEqual":"≦","LessGreater":"≶","lessgtr":"≶","LessLess":"⪡","lesssim":"≲","LessSlantEqual":"⩽","LessTilde":"≲","lfisht":"⥼","lfloor":"⌊","Lfr":"𝔏","lfr":"𝔩","lg":"≶","lgE":"⪑","lHar":"⥢","lhard":"↽","lharu":"↼","lharul":"⥪","lhblk":"▄","LJcy":"Љ","ljcy":"љ","llarr":"⇇","ll":"≪","Ll":"⋘","llcorner":"⌞","Lleftarrow":"⇚","llhard":"⥫","lltri":"◺","Lmidot":"Ŀ","lmidot":"ŀ","lmoustache":"⎰","lmoust":"⎰","lnap":"⪉","lnapprox":"⪉","lne":"⪇","lnE":"≨","lneq":"⪇","lneqq":"≨","lnsim":"⋦","loang":"⟬","loarr":"⇽","lobrk":"⟦","longleftarrow":"⟵","LongLeftArrow":"⟵","Longleftarrow":"⟸","longleftrightarrow":"⟷","LongLeftRightArrow":"⟷","Longleftrightarrow":"⟺","longmapsto":"⟼","longrightarrow":"⟶","LongRightArrow":"⟶","Longrightarrow":"⟹","looparrowleft":"↫","looparrowright":"↬","lopar":"⦅","Lopf":"𝕃","lopf":"𝕝","loplus":"⨭","lotimes":"⨴","lowast":"∗","lowbar":"_","LowerLeftArrow":"↙","LowerRightArrow":"↘","loz":"◊","lozenge":"◊","lozf":"⧫","lpar":"(","lparlt":"⦓","lrarr":"⇆","lrcorner":"⌟","lrhar":"⇋","lrhard":"⥭","lrm":"‎","lrtri":"⊿","lsaquo":"‹","lscr":"𝓁","Lscr":"ℒ","lsh":"↰","Lsh":"↰","lsim":"≲","lsime":"⪍","lsimg":"⪏","lsqb":"[","lsquo":"‘","lsquor":"‚","Lstrok":"Ł","lstrok":"ł","ltcc":"⪦","ltcir":"⩹","lt":"<","LT":"<","Lt":"≪","ltdot":"⋖","lthree":"⋋","ltimes":"⋉","ltlarr":"⥶","ltquest":"⩻","ltri":"◃","ltrie":"⊴","ltrif":"◂","ltrPar":"⦖","lurdshar":"⥊","luruhar":"⥦","lvertneqq":"≨︀","lvnE":"≨︀","macr":"¯","male":"♂","malt":"✠","maltese":"✠","Map":"⤅","map":"↦","mapsto":"↦","mapstodown":"↧","mapstoleft":"↤","mapstoup":"↥","marker":"▮","mcomma":"⨩","Mcy":"М","mcy":"м","mdash":"—","mDDot":"∺","measuredangle":"∡","MediumSpace":" ","Mellintrf":"ℳ","Mfr":"𝔐","mfr":"𝔪","mho":"℧","micro":"µ","midast":"*","midcir":"⫰","mid":"∣","middot":"·","minusb":"⊟","minus":"−","minusd":"∸","minusdu":"⨪","MinusPlus":"∓","mlcp":"⫛","mldr":"…","mnplus":"∓","models":"⊧","Mopf":"𝕄","mopf":"𝕞","mp":"∓","mscr":"𝓂","Mscr":"ℳ","mstpos":"∾","Mu":"Μ","mu":"μ","multimap":"⊸","mumap":"⊸","nabla":"∇","Nacute":"Ń","nacute":"ń","nang":"∠⃒","nap":"≉","napE":"⩰̸","napid":"≋̸","napos":"ŉ","napprox":"≉","natural":"♮","naturals":"ℕ","natur":"♮","nbsp":" ","nbump":"≎̸","nbumpe":"≏̸","ncap":"⩃","Ncaron":"Ň","ncaron":"ň","Ncedil":"Ņ","ncedil":"ņ","ncong":"≇","ncongdot":"⩭̸","ncup":"⩂","Ncy":"Н","ncy":"н","ndash":"–","nearhk":"⤤","nearr":"↗","neArr":"⇗","nearrow":"↗","ne":"≠","nedot":"≐̸","NegativeMediumSpace":"​","NegativeThickSpace":"​","NegativeThinSpace":"​","NegativeVeryThinSpace":"​","nequiv":"≢","nesear":"⤨","nesim":"≂̸","NestedGreaterGreater":"≫","NestedLessLess":"≪","NewLine":"\\n","nexist":"∄","nexists":"∄","Nfr":"𝔑","nfr":"𝔫","ngE":"≧̸","nge":"≱","ngeq":"≱","ngeqq":"≧̸","ngeqslant":"⩾̸","nges":"⩾̸","nGg":"⋙̸","ngsim":"≵","nGt":"≫⃒","ngt":"≯","ngtr":"≯","nGtv":"≫̸","nharr":"↮","nhArr":"⇎","nhpar":"⫲","ni":"∋","nis":"⋼","nisd":"⋺","niv":"∋","NJcy":"Њ","njcy":"њ","nlarr":"↚","nlArr":"⇍","nldr":"‥","nlE":"≦̸","nle":"≰","nleftarrow":"↚","nLeftarrow":"⇍","nleftrightarrow":"↮","nLeftrightarrow":"⇎","nleq":"≰","nleqq":"≦̸","nleqslant":"⩽̸","nles":"⩽̸","nless":"≮","nLl":"⋘̸","nlsim":"≴","nLt":"≪⃒","nlt":"≮","nltri":"⋪","nltrie":"⋬","nLtv":"≪̸","nmid":"∤","NoBreak":"⁠","NonBreakingSpace":" ","nopf":"𝕟","Nopf":"ℕ","Not":"⫬","not":"¬","NotCongruent":"≢","NotCupCap":"≭","NotDoubleVerticalBar":"∦","NotElement":"∉","NotEqual":"≠","NotEqualTilde":"≂̸","NotExists":"∄","NotGreater":"≯","NotGreaterEqual":"≱","NotGreaterFullEqual":"≧̸","NotGreaterGreater":"≫̸","NotGreaterLess":"≹","NotGreaterSlantEqual":"⩾̸","NotGreaterTilde":"≵","NotHumpDownHump":"≎̸","NotHumpEqual":"≏̸","notin":"∉","notindot":"⋵̸","notinE":"⋹̸","notinva":"∉","notinvb":"⋷","notinvc":"⋶","NotLeftTriangleBar":"⧏̸","NotLeftTriangle":"⋪","NotLeftTriangleEqual":"⋬","NotLess":"≮","NotLessEqual":"≰","NotLessGreater":"≸","NotLessLess":"≪̸","NotLessSlantEqual":"⩽̸","NotLessTilde":"≴","NotNestedGreaterGreater":"⪢̸","NotNestedLessLess":"⪡̸","notni":"∌","notniva":"∌","notnivb":"⋾","notnivc":"⋽","NotPrecedes":"⊀","NotPrecedesEqual":"⪯̸","NotPrecedesSlantEqual":"⋠","NotReverseElement":"∌","NotRightTriangleBar":"⧐̸","NotRightTriangle":"⋫","NotRightTriangleEqual":"⋭","NotSquareSubset":"⊏̸","NotSquareSubsetEqual":"⋢","NotSquareSuperset":"⊐̸","NotSquareSupersetEqual":"⋣","NotSubset":"⊂⃒","NotSubsetEqual":"⊈","NotSucceeds":"⊁","NotSucceedsEqual":"⪰̸","NotSucceedsSlantEqual":"⋡","NotSucceedsTilde":"≿̸","NotSuperset":"⊃⃒","NotSupersetEqual":"⊉","NotTilde":"≁","NotTildeEqual":"≄","NotTildeFullEqual":"≇","NotTildeTilde":"≉","NotVerticalBar":"∤","nparallel":"∦","npar":"∦","nparsl":"⫽⃥","npart":"∂̸","npolint":"⨔","npr":"⊀","nprcue":"⋠","nprec":"⊀","npreceq":"⪯̸","npre":"⪯̸","nrarrc":"⤳̸","nrarr":"↛","nrArr":"⇏","nrarrw":"↝̸","nrightarrow":"↛","nRightarrow":"⇏","nrtri":"⋫","nrtrie":"⋭","nsc":"⊁","nsccue":"⋡","nsce":"⪰̸","Nscr":"𝒩","nscr":"𝓃","nshortmid":"∤","nshortparallel":"∦","nsim":"≁","nsime":"≄","nsimeq":"≄","nsmid":"∤","nspar":"∦","nsqsube":"⋢","nsqsupe":"⋣","nsub":"⊄","nsubE":"⫅̸","nsube":"⊈","nsubset":"⊂⃒","nsubseteq":"⊈","nsubseteqq":"⫅̸","nsucc":"⊁","nsucceq":"⪰̸","nsup":"⊅","nsupE":"⫆̸","nsupe":"⊉","nsupset":"⊃⃒","nsupseteq":"⊉","nsupseteqq":"⫆̸","ntgl":"≹","Ntilde":"Ñ","ntilde":"ñ","ntlg":"≸","ntriangleleft":"⋪","ntrianglelefteq":"⋬","ntriangleright":"⋫","ntrianglerighteq":"⋭","Nu":"Ν","nu":"ν","num":"#","numero":"№","numsp":" ","nvap":"≍⃒","nvdash":"⊬","nvDash":"⊭","nVdash":"⊮","nVDash":"⊯","nvge":"≥⃒","nvgt":">⃒","nvHarr":"⤄","nvinfin":"⧞","nvlArr":"⤂","nvle":"≤⃒","nvlt":"<⃒","nvltrie":"⊴⃒","nvrArr":"⤃","nvrtrie":"⊵⃒","nvsim":"∼⃒","nwarhk":"⤣","nwarr":"↖","nwArr":"⇖","nwarrow":"↖","nwnear":"⤧","Oacute":"Ó","oacute":"ó","oast":"⊛","Ocirc":"Ô","ocirc":"ô","ocir":"⊚","Ocy":"О","ocy":"о","odash":"⊝","Odblac":"Ő","odblac":"ő","odiv":"⨸","odot":"⊙","odsold":"⦼","OElig":"Œ","oelig":"œ","ofcir":"⦿","Ofr":"𝔒","ofr":"𝔬","ogon":"˛","Ograve":"Ò","ograve":"ò","ogt":"⧁","ohbar":"⦵","ohm":"Ω","oint":"∮","olarr":"↺","olcir":"⦾","olcross":"⦻","oline":"‾","olt":"⧀","Omacr":"Ō","omacr":"ō","Omega":"Ω","omega":"ω","Omicron":"Ο","omicron":"ο","omid":"⦶","ominus":"⊖","Oopf":"𝕆","oopf":"𝕠","opar":"⦷","OpenCurlyDoubleQuote":"“","OpenCurlyQuote":"‘","operp":"⦹","oplus":"⊕","orarr":"↻","Or":"⩔","or":"∨","ord":"⩝","order":"ℴ","orderof":"ℴ","ordf":"ª","ordm":"º","origof":"⊶","oror":"⩖","orslope":"⩗","orv":"⩛","oS":"Ⓢ","Oscr":"𝒪","oscr":"ℴ","Oslash":"Ø","oslash":"ø","osol":"⊘","Otilde":"Õ","otilde":"õ","otimesas":"⨶","Otimes":"⨷","otimes":"⊗","Ouml":"Ö","ouml":"ö","ovbar":"⌽","OverBar":"‾","OverBrace":"⏞","OverBracket":"⎴","OverParenthesis":"⏜","para":"¶","parallel":"∥","par":"∥","parsim":"⫳","parsl":"⫽","part":"∂","PartialD":"∂","Pcy":"П","pcy":"п","percnt":"%","period":".","permil":"‰","perp":"⊥","pertenk":"‱","Pfr":"𝔓","pfr":"𝔭","Phi":"Φ","phi":"φ","phiv":"ϕ","phmmat":"ℳ","phone":"☎","Pi":"Π","pi":"π","pitchfork":"⋔","piv":"ϖ","planck":"ℏ","planckh":"ℎ","plankv":"ℏ","plusacir":"⨣","plusb":"⊞","pluscir":"⨢","plus":"+","plusdo":"∔","plusdu":"⨥","pluse":"⩲","PlusMinus":"±","plusmn":"±","plussim":"⨦","plustwo":"⨧","pm":"±","Poincareplane":"ℌ","pointint":"⨕","popf":"𝕡","Popf":"ℙ","pound":"£","prap":"⪷","Pr":"⪻","pr":"≺","prcue":"≼","precapprox":"⪷","prec":"≺","preccurlyeq":"≼","Precedes":"≺","PrecedesEqual":"⪯","PrecedesSlantEqual":"≼","PrecedesTilde":"≾","preceq":"⪯","precnapprox":"⪹","precneqq":"⪵","precnsim":"⋨","pre":"⪯","prE":"⪳","precsim":"≾","prime":"′","Prime":"″","primes":"ℙ","prnap":"⪹","prnE":"⪵","prnsim":"⋨","prod":"∏","Product":"∏","profalar":"⌮","profline":"⌒","profsurf":"⌓","prop":"∝","Proportional":"∝","Proportion":"∷","propto":"∝","prsim":"≾","prurel":"⊰","Pscr":"𝒫","pscr":"𝓅","Psi":"Ψ","psi":"ψ","puncsp":" ","Qfr":"𝔔","qfr":"𝔮","qint":"⨌","qopf":"𝕢","Qopf":"ℚ","qprime":"⁗","Qscr":"𝒬","qscr":"𝓆","quaternions":"ℍ","quatint":"⨖","quest":"?","questeq":"≟","quot":"\\"","QUOT":"\\"","rAarr":"⇛","race":"∽̱","Racute":"Ŕ","racute":"ŕ","radic":"√","raemptyv":"⦳","rang":"⟩","Rang":"⟫","rangd":"⦒","range":"⦥","rangle":"⟩","raquo":"»","rarrap":"⥵","rarrb":"⇥","rarrbfs":"⤠","rarrc":"⤳","rarr":"→","Rarr":"↠","rArr":"⇒","rarrfs":"⤞","rarrhk":"↪","rarrlp":"↬","rarrpl":"⥅","rarrsim":"⥴","Rarrtl":"⤖","rarrtl":"↣","rarrw":"↝","ratail":"⤚","rAtail":"⤜","ratio":"∶","rationals":"ℚ","rbarr":"⤍","rBarr":"⤏","RBarr":"⤐","rbbrk":"❳","rbrace":"}","rbrack":"]","rbrke":"⦌","rbrksld":"⦎","rbrkslu":"⦐","Rcaron":"Ř","rcaron":"ř","Rcedil":"Ŗ","rcedil":"ŗ","rceil":"⌉","rcub":"}","Rcy":"Р","rcy":"р","rdca":"⤷","rdldhar":"⥩","rdquo":"”","rdquor":"”","rdsh":"↳","real":"ℜ","realine":"ℛ","realpart":"ℜ","reals":"ℝ","Re":"ℜ","rect":"▭","reg":"®","REG":"®","ReverseElement":"∋","ReverseEquilibrium":"⇋","ReverseUpEquilibrium":"⥯","rfisht":"⥽","rfloor":"⌋","rfr":"𝔯","Rfr":"ℜ","rHar":"⥤","rhard":"⇁","rharu":"⇀","rharul":"⥬","Rho":"Ρ","rho":"ρ","rhov":"ϱ","RightAngleBracket":"⟩","RightArrowBar":"⇥","rightarrow":"→","RightArrow":"→","Rightarrow":"⇒","RightArrowLeftArrow":"⇄","rightarrowtail":"↣","RightCeiling":"⌉","RightDoubleBracket":"⟧","RightDownTeeVector":"⥝","RightDownVectorBar":"⥕","RightDownVector":"⇂","RightFloor":"⌋","rightharpoondown":"⇁","rightharpoonup":"⇀","rightleftarrows":"⇄","rightleftharpoons":"⇌","rightrightarrows":"⇉","rightsquigarrow":"↝","RightTeeArrow":"↦","RightTee":"⊢","RightTeeVector":"⥛","rightthreetimes":"⋌","RightTriangleBar":"⧐","RightTriangle":"⊳","RightTriangleEqual":"⊵","RightUpDownVector":"⥏","RightUpTeeVector":"⥜","RightUpVectorBar":"⥔","RightUpVector":"↾","RightVectorBar":"⥓","RightVector":"⇀","ring":"˚","risingdotseq":"≓","rlarr":"⇄","rlhar":"⇌","rlm":"‏","rmoustache":"⎱","rmoust":"⎱","rnmid":"⫮","roang":"⟭","roarr":"⇾","robrk":"⟧","ropar":"⦆","ropf":"𝕣","Ropf":"ℝ","roplus":"⨮","rotimes":"⨵","RoundImplies":"⥰","rpar":")","rpargt":"⦔","rppolint":"⨒","rrarr":"⇉","Rrightarrow":"⇛","rsaquo":"›","rscr":"𝓇","Rscr":"ℛ","rsh":"↱","Rsh":"↱","rsqb":"]","rsquo":"’","rsquor":"’","rthree":"⋌","rtimes":"⋊","rtri":"▹","rtrie":"⊵","rtrif":"▸","rtriltri":"⧎","RuleDelayed":"⧴","ruluhar":"⥨","rx":"℞","Sacute":"Ś","sacute":"ś","sbquo":"‚","scap":"⪸","Scaron":"Š","scaron":"š","Sc":"⪼","sc":"≻","sccue":"≽","sce":"⪰","scE":"⪴","Scedil":"Ş","scedil":"ş","Scirc":"Ŝ","scirc":"ŝ","scnap":"⪺","scnE":"⪶","scnsim":"⋩","scpolint":"⨓","scsim":"≿","Scy":"С","scy":"с","sdotb":"⊡","sdot":"⋅","sdote":"⩦","searhk":"⤥","searr":"↘","seArr":"⇘","searrow":"↘","sect":"§","semi":";","seswar":"⤩","setminus":"∖","setmn":"∖","sext":"✶","Sfr":"𝔖","sfr":"𝔰","sfrown":"⌢","sharp":"♯","SHCHcy":"Щ","shchcy":"щ","SHcy":"Ш","shcy":"ш","ShortDownArrow":"↓","ShortLeftArrow":"←","shortmid":"∣","shortparallel":"∥","ShortRightArrow":"→","ShortUpArrow":"↑","shy":"­","Sigma":"Σ","sigma":"σ","sigmaf":"ς","sigmav":"ς","sim":"∼","simdot":"⩪","sime":"≃","simeq":"≃","simg":"⪞","simgE":"⪠","siml":"⪝","simlE":"⪟","simne":"≆","simplus":"⨤","simrarr":"⥲","slarr":"←","SmallCircle":"∘","smallsetminus":"∖","smashp":"⨳","smeparsl":"⧤","smid":"∣","smile":"⌣","smt":"⪪","smte":"⪬","smtes":"⪬︀","SOFTcy":"Ь","softcy":"ь","solbar":"⌿","solb":"⧄","sol":"/","Sopf":"𝕊","sopf":"𝕤","spades":"♠","spadesuit":"♠","spar":"∥","sqcap":"⊓","sqcaps":"⊓︀","sqcup":"⊔","sqcups":"⊔︀","Sqrt":"√","sqsub":"⊏","sqsube":"⊑","sqsubset":"⊏","sqsubseteq":"⊑","sqsup":"⊐","sqsupe":"⊒","sqsupset":"⊐","sqsupseteq":"⊒","square":"□","Square":"□","SquareIntersection":"⊓","SquareSubset":"⊏","SquareSubsetEqual":"⊑","SquareSuperset":"⊐","SquareSupersetEqual":"⊒","SquareUnion":"⊔","squarf":"▪","squ":"□","squf":"▪","srarr":"→","Sscr":"𝒮","sscr":"𝓈","ssetmn":"∖","ssmile":"⌣","sstarf":"⋆","Star":"⋆","star":"☆","starf":"★","straightepsilon":"ϵ","straightphi":"ϕ","strns":"¯","sub":"⊂","Sub":"⋐","subdot":"⪽","subE":"⫅","sube":"⊆","subedot":"⫃","submult":"⫁","subnE":"⫋","subne":"⊊","subplus":"⪿","subrarr":"⥹","subset":"⊂","Subset":"⋐","subseteq":"⊆","subseteqq":"⫅","SubsetEqual":"⊆","subsetneq":"⊊","subsetneqq":"⫋","subsim":"⫇","subsub":"⫕","subsup":"⫓","succapprox":"⪸","succ":"≻","succcurlyeq":"≽","Succeeds":"≻","SucceedsEqual":"⪰","SucceedsSlantEqual":"≽","SucceedsTilde":"≿","succeq":"⪰","succnapprox":"⪺","succneqq":"⪶","succnsim":"⋩","succsim":"≿","SuchThat":"∋","sum":"∑","Sum":"∑","sung":"♪","sup1":"¹","sup2":"²","sup3":"³","sup":"⊃","Sup":"⋑","supdot":"⪾","supdsub":"⫘","supE":"⫆","supe":"⊇","supedot":"⫄","Superset":"⊃","SupersetEqual":"⊇","suphsol":"⟉","suphsub":"⫗","suplarr":"⥻","supmult":"⫂","supnE":"⫌","supne":"⊋","supplus":"⫀","supset":"⊃","Supset":"⋑","supseteq":"⊇","supseteqq":"⫆","supsetneq":"⊋","supsetneqq":"⫌","supsim":"⫈","supsub":"⫔","supsup":"⫖","swarhk":"⤦","swarr":"↙","swArr":"⇙","swarrow":"↙","swnwar":"⤪","szlig":"ß","Tab":"\\t","target":"⌖","Tau":"Τ","tau":"τ","tbrk":"⎴","Tcaron":"Ť","tcaron":"ť","Tcedil":"Ţ","tcedil":"ţ","Tcy":"Т","tcy":"т","tdot":"⃛","telrec":"⌕","Tfr":"𝔗","tfr":"𝔱","there4":"∴","therefore":"∴","Therefore":"∴","Theta":"Θ","theta":"θ","thetasym":"ϑ","thetav":"ϑ","thickapprox":"≈","thicksim":"∼","ThickSpace":"  ","ThinSpace":" ","thinsp":" ","thkap":"≈","thksim":"∼","THORN":"Þ","thorn":"þ","tilde":"˜","Tilde":"∼","TildeEqual":"≃","TildeFullEqual":"≅","TildeTilde":"≈","timesbar":"⨱","timesb":"⊠","times":"×","timesd":"⨰","tint":"∭","toea":"⤨","topbot":"⌶","topcir":"⫱","top":"⊤","Topf":"𝕋","topf":"𝕥","topfork":"⫚","tosa":"⤩","tprime":"‴","trade":"™","TRADE":"™","triangle":"▵","triangledown":"▿","triangleleft":"◃","trianglelefteq":"⊴","triangleq":"≜","triangleright":"▹","trianglerighteq":"⊵","tridot":"◬","trie":"≜","triminus":"⨺","TripleDot":"⃛","triplus":"⨹","trisb":"⧍","tritime":"⨻","trpezium":"⏢","Tscr":"𝒯","tscr":"𝓉","TScy":"Ц","tscy":"ц","TSHcy":"Ћ","tshcy":"ћ","Tstrok":"Ŧ","tstrok":"ŧ","twixt":"≬","twoheadleftarrow":"↞","twoheadrightarrow":"↠","Uacute":"Ú","uacute":"ú","uarr":"↑","Uarr":"↟","uArr":"⇑","Uarrocir":"⥉","Ubrcy":"Ў","ubrcy":"ў","Ubreve":"Ŭ","ubreve":"ŭ","Ucirc":"Û","ucirc":"û","Ucy":"У","ucy":"у","udarr":"⇅","Udblac":"Ű","udblac":"ű","udhar":"⥮","ufisht":"⥾","Ufr":"𝔘","ufr":"𝔲","Ugrave":"Ù","ugrave":"ù","uHar":"⥣","uharl":"↿","uharr":"↾","uhblk":"▀","ulcorn":"⌜","ulcorner":"⌜","ulcrop":"⌏","ultri":"◸","Umacr":"Ū","umacr":"ū","uml":"¨","UnderBar":"_","UnderBrace":"⏟","UnderBracket":"⎵","UnderParenthesis":"⏝","Union":"⋃","UnionPlus":"⊎","Uogon":"Ų","uogon":"ų","Uopf":"𝕌","uopf":"𝕦","UpArrowBar":"⤒","uparrow":"↑","UpArrow":"↑","Uparrow":"⇑","UpArrowDownArrow":"⇅","updownarrow":"↕","UpDownArrow":"↕","Updownarrow":"⇕","UpEquilibrium":"⥮","upharpoonleft":"↿","upharpoonright":"↾","uplus":"⊎","UpperLeftArrow":"↖","UpperRightArrow":"↗","upsi":"υ","Upsi":"ϒ","upsih":"ϒ","Upsilon":"Υ","upsilon":"υ","UpTeeArrow":"↥","UpTee":"⊥","upuparrows":"⇈","urcorn":"⌝","urcorner":"⌝","urcrop":"⌎","Uring":"Ů","uring":"ů","urtri":"◹","Uscr":"𝒰","uscr":"𝓊","utdot":"⋰","Utilde":"Ũ","utilde":"ũ","utri":"▵","utrif":"▴","uuarr":"⇈","Uuml":"Ü","uuml":"ü","uwangle":"⦧","vangrt":"⦜","varepsilon":"ϵ","varkappa":"ϰ","varnothing":"∅","varphi":"ϕ","varpi":"ϖ","varpropto":"∝","varr":"↕","vArr":"⇕","varrho":"ϱ","varsigma":"ς","varsubsetneq":"⊊︀","varsubsetneqq":"⫋︀","varsupsetneq":"⊋︀","varsupsetneqq":"⫌︀","vartheta":"ϑ","vartriangleleft":"⊲","vartriangleright":"⊳","vBar":"⫨","Vbar":"⫫","vBarv":"⫩","Vcy":"В","vcy":"в","vdash":"⊢","vDash":"⊨","Vdash":"⊩","VDash":"⊫","Vdashl":"⫦","veebar":"⊻","vee":"∨","Vee":"⋁","veeeq":"≚","vellip":"⋮","verbar":"|","Verbar":"‖","vert":"|","Vert":"‖","VerticalBar":"∣","VerticalLine":"|","VerticalSeparator":"❘","VerticalTilde":"≀","VeryThinSpace":" ","Vfr":"𝔙","vfr":"𝔳","vltri":"⊲","vnsub":"⊂⃒","vnsup":"⊃⃒","Vopf":"𝕍","vopf":"𝕧","vprop":"∝","vrtri":"⊳","Vscr":"𝒱","vscr":"𝓋","vsubnE":"⫋︀","vsubne":"⊊︀","vsupnE":"⫌︀","vsupne":"⊋︀","Vvdash":"⊪","vzigzag":"⦚","Wcirc":"Ŵ","wcirc":"ŵ","wedbar":"⩟","wedge":"∧","Wedge":"⋀","wedgeq":"≙","weierp":"℘","Wfr":"𝔚","wfr":"𝔴","Wopf":"𝕎","wopf":"𝕨","wp":"℘","wr":"≀","wreath":"≀","Wscr":"𝒲","wscr":"𝓌","xcap":"⋂","xcirc":"◯","xcup":"⋃","xdtri":"▽","Xfr":"𝔛","xfr":"𝔵","xharr":"⟷","xhArr":"⟺","Xi":"Ξ","xi":"ξ","xlarr":"⟵","xlArr":"⟸","xmap":"⟼","xnis":"⋻","xodot":"⨀","Xopf":"𝕏","xopf":"𝕩","xoplus":"⨁","xotime":"⨂","xrarr":"⟶","xrArr":"⟹","Xscr":"𝒳","xscr":"𝓍","xsqcup":"⨆","xuplus":"⨄","xutri":"△","xvee":"⋁","xwedge":"⋀","Yacute":"Ý","yacute":"ý","YAcy":"Я","yacy":"я","Ycirc":"Ŷ","ycirc":"ŷ","Ycy":"Ы","ycy":"ы","yen":"¥","Yfr":"𝔜","yfr":"𝔶","YIcy":"Ї","yicy":"ї","Yopf":"𝕐","yopf":"𝕪","Yscr":"𝒴","yscr":"𝓎","YUcy":"Ю","yucy":"ю","yuml":"ÿ","Yuml":"Ÿ","Zacute":"Ź","zacute":"ź","Zcaron":"Ž","zcaron":"ž","Zcy":"З","zcy":"з","Zdot":"Ż","zdot":"ż","zeetrf":"ℨ","ZeroWidthSpace":"​","Zeta":"Ζ","zeta":"ζ","zfr":"𝔷","Zfr":"ℨ","ZHcy":"Ж","zhcy":"ж","zigrarr":"⇝","zopf":"𝕫","Zopf":"ℤ","Zscr":"𝒵","zscr":"𝓏","zwj":"‍","zwnj":"‌"}')},function(e){e.exports=JSON.parse('{"amp":"&","apos":"\'","gt":">","lt":"<","quot":"\\""}')},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=l(r(n(75)).default),i=c(o);t.encodeXML=h(o,i);var a=l(r(n(74)).default),s=c(a);function l(e){return Object.keys(e).sort().reduce((function(t,n){return t[e[n]]="&"+n+";",t}),{})}function c(e){var t=[],n=[];return Object.keys(e).forEach((function(e){return 1===e.length?t.push("\\"+e):n.push(e)})),n.unshift("["+t.join("")+"]"),new RegExp(n.join("|"),"g")}t.encodeHTML=h(a,s);var u=/[^\0-\x7F]/g,f=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g;function p(e){return"&#x"+e.charCodeAt(0).toString(16).toUpperCase()+";"}function d(e,t){return"&#x"+(1024*(e.charCodeAt(0)-55296)+e.charCodeAt(1)-56320+65536).toString(16).toUpperCase()+";"}function h(e,t){return function(n){return n.replace(t,(function(t){return e[t]})).replace(f,d).replace(u,p)}}var m=c(o);t.escape=function(e){return e.replace(m,p).replace(f,d).replace(u,p)}},function(e,t,n){e.exports=s;var r=n(68),o=n(189).Writable,i=n(190).StringDecoder,a=n(22).Buffer;function s(e,t){var n=this._parser=new r(e,t),a=this._decoder=new i;o.call(this,{decodeStrings:!1}),this.once("finish",(function(){n.end(a.end())}))}n(31)(s,o),s.prototype._write=function(e,t,n){e instanceof a&&(e=this._decoder.write(e)),this._parser.write(e),n()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.default=function(e,t){var n=r({},(0,o.default)(e),{key:t});"string"==typeof n.style||n.style instanceof String?n.style=(0,i.default)(n.style):delete n.style;return n};var o=a(n(196)),i=a(n(199));function a(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){o.hasOwnProperty(e)||(o[e]=r.test(e));return o[e]};var r=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,o={}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";(function(t){var n="__global_unique_id__";e.exports=function(){return t[n]=(t[n]||0)+1}}).call(this,n(26))},function(e,t,n){var r=n(129),o=n(35),i=n(57),a=n(27)("socket.io-client");e.exports=t=l;var s=t.managers={};function l(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,o=r(e),l=o.source,c=o.id,u=o.path,f=s[c]&&u in s[c].nsps;return t.forceNew||t["force new connection"]||!1===t.multiplex||f?(a("ignoring socket cache for %s",l),n=i(l,t)):(s[c]||(a("new io instance for %s",l),s[c]=i(l,t)),n=s[c]),o.query&&!t.query&&(t.query=o.query),n.socket(o.path,t)}t.protocol=o.protocol,t.connect=l,t.Manager=n(57),t.Socket=n(63)},function(e,t,n){"use strict";var r=n(8).compose;t.__esModule=!0,t.composeWithDevTools="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?r:r.apply(null,arguments)},t.devToolsEnhancer="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__?window.__REDUX_DEVTOOLS_EXTENSION__:function(){return function(e){return e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.htmlparser2=t.convertNodeToElement=t.processNodes=void 0;var r=n(39);Object.defineProperty(t,"processNodes",{enumerable:!0,get:function(){return s(r).default}});var o=n(67);Object.defineProperty(t,"convertNodeToElement",{enumerable:!0,get:function(){return s(o).default}});var i=n(20);Object.defineProperty(t,"htmlparser2",{enumerable:!0,get:function(){return s(i).default}});var a=s(n(203));function s(e){return e&&e.__esModule?e:{default:e}}t.default=a.default},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(43),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,s=o?Symbol.for("react.fragment"):60107,l=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,u=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.forward_ref"):60112,d=o?Symbol.for("react.suspense"):60113;o&&Symbol.for("react.suspense_list");var h=o?Symbol.for("react.memo"):60115,m=o?Symbol.for("react.lazy"):60116;o&&Symbol.for("react.fundamental"),o&&Symbol.for("react.responder"),o&&Symbol.for("react.scope");var g="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},A={};function v(e,t,n){this.props=e,this.context=t,this.refs=A,this.updater=n||b}function C(){}function w(e,t,n){this.props=e,this.context=t,this.refs=A,this.updater=n||b}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},C.prototype=v.prototype;var _=w.prototype=new C;_.constructor=w,r(_,v.prototype),_.isPureReactComponent=!0;var E={current:null},x={current:null},k=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function B(e,t,n){var r,o={},a=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)k.call(t,r)&&!T.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),u=0;u<l;u++)c[u]=arguments[u+2];o.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:i,type:e,key:a,ref:s,props:o,_owner:x.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var O=/\/+/g,N=[];function P(e,t,n,r){if(N.length){var o=N.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function D(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>N.length&&N.push(e)}function L(e,t,n){return null==e?0:function e(t,n,r,o){var s=typeof t;"undefined"!==s&&"boolean"!==s||(t=null);var l=!1;if(null===t)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case i:case a:l=!0}}if(l)return r(o,t,""===n?"."+R(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var u=n+R(s=t[c],c);l+=e(s,u,r,o)}else if(null===t||"object"!=typeof t?u=null:u="function"==typeof(u=g&&t[g]||t["@@iterator"])?u:null,"function"==typeof u)for(t=u.call(t),c=0;!(s=t.next()).done;)l+=e(s=s.value,u=n+R(s,c++),r,o);else if("object"===s)throw r=""+t,Error(y(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return l}(e,"",t,n)}function R(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function q(e,t){e.func.call(e.context,t,e.count++)}function I(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?j(e,r,n,(function(e){return e})):null!=e&&(S(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(O,"$&/")+"/")+n)),r.push(e))}function j(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(O,"$&/")+"/"),L(e,I,t=P(t,i,r,o)),D(t)}function U(){var e=E.current;if(null===e)throw Error(y(321));return e}var F={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return j(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;L(e,q,t=P(null,null,t,n)),D(t)},count:function(e){return L(e,(function(){return null}),null)},toArray:function(e){var t=[];return j(e,t,null,(function(e){return e})),t},only:function(e){if(!S(e))throw Error(y(143));return e}},createRef:function(){return{current:null}},Component:v,PureComponent:w,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:u,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:p,render:e}},lazy:function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return U().useCallback(e,t)},useContext:function(e,t){return U().useContext(e,t)},useEffect:function(e,t){return U().useEffect(e,t)},useImperativeHandle:function(e,t,n){return U().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return U().useLayoutEffect(e,t)},useMemo:function(e,t){return U().useMemo(e,t)},useReducer:function(e,t,n){return U().useReducer(e,t,n)},useRef:function(e){return U().useRef(e)},useState:function(e){return U().useState(e)},Fragment:s,Profiler:c,StrictMode:l,Suspense:d,createElement:B,cloneElement:function(e,t,n){if(null==e)throw Error(y(267,e));var o=r({},e.props),a=e.key,s=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,l=x.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(u in t)k.call(t,u)&&!T.hasOwnProperty(u)&&(o[u]=void 0===t[u]&&void 0!==c?c[u]:t[u])}var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){c=Array(u);for(var f=0;f<u;f++)c[f]=arguments[f+2];o.children=c}return{$$typeof:i,type:e.type,key:a,ref:s,props:o,_owner:l}},createFactory:function(e){var t=B.bind(null,e);return t.type=e,t},isValidElement:S,version:"16.12.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:E,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:x,IsSomeRendererActing:{current:!1},assign:r}},M={default:F},z=M&&F||M;e.exports=z.default||z},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(43),i=n(87);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var s=null,l={};function c(){if(s)for(var e in l){var t=l[e],n=s.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!f[n]){if(!t.extractEvents)throw Error(a(97,e));for(var r in f[n]=t,n=t.eventTypes){var o=void 0,i=n[r],c=t,d=r;if(p.hasOwnProperty(d))throw Error(a(99,d));p[d]=i;var h=i.phasedRegistrationNames;if(h){for(o in h)h.hasOwnProperty(o)&&u(h[o],c,d);o=!0}else i.registrationName?(u(i.registrationName,c,d),o=!0):o=!1;if(!o)throw Error(a(98,r,e))}}}}function u(e,t,n){if(d[e])throw Error(a(100,e));d[e]=t,h[e]=t.eventTypes[n].dependencies}var f=[],p={},d={},h={};function m(e,t,n,r,o,i,a,s,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var g=!1,y=null,b=!1,A=null,v={onError:function(e){g=!0,y=e}};function C(e,t,n,r,o,i,a,s,l){g=!1,y=null,m.apply(v,arguments)}var w=null,_=null,E=null;function x(e,t,n){var r=e.type||"unknown-event";e.currentTarget=E(n),function(e,t,n,r,o,i,s,l,c){if(C.apply(this,arguments),g){if(!g)throw Error(a(198));var u=y;g=!1,y=null,b||(b=!0,A=u)}}(r,t,void 0,e),e.currentTarget=null}function k(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function T(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var B=null;function S(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)x(e,t[r],n[r]);else t&&x(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function O(e){if(null!==e&&(B=k(B,e)),e=B,B=null,e){if(T(e,S),B)throw Error(a(95));if(b)throw e=A,b=!1,A=null,e}}var N={injectEventPluginOrder:function(e){if(s)throw Error(a(101));s=Array.prototype.slice.call(e),c()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!l.hasOwnProperty(t)||l[t]!==r){if(l[t])throw Error(a(102,t));l[t]=r,n=!0}}n&&c()}};function P(e,t){var n=e.stateNode;if(!n)return null;var r=w(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var D=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;D.hasOwnProperty("ReactCurrentDispatcher")||(D.ReactCurrentDispatcher={current:null}),D.hasOwnProperty("ReactCurrentBatchConfig")||(D.ReactCurrentBatchConfig={suspense:null});var L=/^(.*)[\\\/]/,R="function"==typeof Symbol&&Symbol.for,q=R?Symbol.for("react.element"):60103,I=R?Symbol.for("react.portal"):60106,j=R?Symbol.for("react.fragment"):60107,U=R?Symbol.for("react.strict_mode"):60108,F=R?Symbol.for("react.profiler"):60114,M=R?Symbol.for("react.provider"):60109,z=R?Symbol.for("react.context"):60110,H=R?Symbol.for("react.concurrent_mode"):60111,G=R?Symbol.for("react.forward_ref"):60112,V=R?Symbol.for("react.suspense"):60113,W=R?Symbol.for("react.suspense_list"):60120,X=R?Symbol.for("react.memo"):60115,Y=R?Symbol.for("react.lazy"):60116;R&&Symbol.for("react.fundamental"),R&&Symbol.for("react.responder"),R&&Symbol.for("react.scope");var K="function"==typeof Symbol&&Symbol.iterator;function $(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=K&&e[K]||e["@@iterator"])?e:null}function Q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case j:return"Fragment";case I:return"Portal";case F:return"Profiler";case U:return"StrictMode";case V:return"Suspense";case W:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case z:return"Context.Consumer";case M:return"Context.Provider";case G:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case X:return Q(e.type);case Y:if(e=1===e._status?e._result:null)return Q(e)}return null}function J(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=Q(e.type);n=null,r&&(n=Q(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(L,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}var Z=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),ee=null,te=null,ne=null;function re(e){if(e=_(e)){if("function"!=typeof ee)throw Error(a(280));var t=w(e.stateNode);ee(e.stateNode,e.type,t)}}function oe(e){te?ne?ne.push(e):ne=[e]:te=e}function ie(){if(te){var e=te,t=ne;if(ne=te=null,re(e),t)for(e=0;e<t.length;e++)re(t[e])}}function ae(e,t){return e(t)}function se(e,t,n,r){return e(t,n,r)}function le(){}var ce=ae,ue=!1,fe=!1;function pe(){null===te&&null===ne||(le(),ie())}new Map;var de=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,he=Object.prototype.hasOwnProperty,me={},ge={};function ye(e,t,n,r,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i}var be={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){be[e]=new ye(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];be[t]=new ye(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){be[e]=new ye(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){be[e]=new ye(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){be[e]=new ye(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){be[e]=new ye(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){be[e]=new ye(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){be[e]=new ye(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){be[e]=new ye(e,5,!1,e.toLowerCase(),null,!1)}));var Ae=/[\-:]([a-z])/g;function ve(e){return e[1].toUpperCase()}function Ce(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function we(e,t,n,r){var o=be.hasOwnProperty(t)?be[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!he.call(ge,e)||!he.call(me,e)&&(de.test(e)?ge[e]=!0:(me[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function _e(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ee(e){e._valueTracker||(e._valueTracker=function(e){var t=_e(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function xe(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=_e(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function ke(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Te(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Ce(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Be(e,t){null!=(t=t.checked)&&we(e,"checked",t,!1)}function Se(e,t){Be(e,t);var n=Ce(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Ne(e,t.type,n):t.hasOwnProperty("defaultValue")&&Ne(e,t.type,Ce(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Oe(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Ne(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Pe(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function De(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Ce(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Re(e,t){var n=t.value;if(null==n){if(n=t.defaultValue,null!=(t=t.children)){if(null!=n)throw Error(a(92));if(Array.isArray(t)){if(!(1>=t.length))throw Error(a(93));t=t[0]}n=t}null==n&&(n="")}e._wrapperState={initialValue:Ce(n)}}function qe(e,t){var n=Ce(t.value),r=Ce(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(Ae,ve);be[t]=new ye(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(Ae,ve);be[t]=new ye(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(Ae,ve);be[t]=new ye(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){be[e]=new ye(e,1,!1,e.toLowerCase(),null,!1)})),be.xlinkHref=new ye("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){be[e]=new ye(e,1,!1,e.toLowerCase(),null,!0)}));var je={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Ue(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Fe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Ue(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Me,ze=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==je.svg||"innerHTML"in e)e.innerHTML=t;else{for((Me=Me||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Me.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function He(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Ge(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Ve={animationend:Ge("Animation","AnimationEnd"),animationiteration:Ge("Animation","AnimationIteration"),animationstart:Ge("Animation","AnimationStart"),transitionend:Ge("Transition","TransitionEnd")},We={},Xe={};function Ye(e){if(We[e])return We[e];if(!Ve[e])return e;var t,n=Ve[e];for(t in n)if(n.hasOwnProperty(t)&&t in Xe)return We[e]=n[t];return e}Z&&(Xe=document.createElement("div").style,"AnimationEvent"in window||(delete Ve.animationend.animation,delete Ve.animationiteration.animation,delete Ve.animationstart.animation),"TransitionEvent"in window||delete Ve.transitionend.transition);var Ke=Ye("animationend"),$e=Ye("animationiteration"),Qe=Ye("animationstart"),Je=Ye("transitionend"),Ze="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");function et(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function tt(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function nt(e){if(et(e)!==e)throw Error(a(188))}function rt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=et(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return nt(o),e;if(i===r)return nt(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var s=!1,l=o.child;l;){if(l===n){s=!0,n=o,r=i;break}if(l===r){s=!0,r=o,n=i;break}l=l.sibling}if(!s){for(l=i.child;l;){if(l===n){s=!0,n=i,r=o;break}if(l===r){s=!0,r=i,n=o;break}l=l.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var ot,it,at,st=!1,lt=[],ct=null,ut=null,ft=null,pt=new Map,dt=new Map,ht=[],mt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),gt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function yt(e,t,n,r){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:r}}function bt(e,t){switch(e){case"focus":case"blur":ct=null;break;case"dragenter":case"dragleave":ut=null;break;case"mouseover":case"mouseout":ft=null;break;case"pointerover":case"pointerout":pt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":dt.delete(t.pointerId)}}function At(e,t,n,r,o){return null===e||e.nativeEvent!==o?(e=yt(t,n,r,o),null!==t&&(null!==(t=dr(t))&&it(t)),e):(e.eventSystemFlags|=r,e)}function vt(e){var t=pr(e.target);if(null!==t){var n=et(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=tt(n)))return e.blockedOn=t,void i.unstable_runWithPriority(e.priority,(function(){at(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Ct(e){if(null!==e.blockedOn)return!1;var t=Nn(e.topLevelType,e.eventSystemFlags,e.nativeEvent);if(null!==t){var n=dr(t);return null!==n&&it(n),e.blockedOn=t,!1}return!0}function wt(e,t,n){Ct(e)&&n.delete(t)}function _t(){for(st=!1;0<lt.length;){var e=lt[0];if(null!==e.blockedOn){null!==(e=dr(e.blockedOn))&&ot(e);break}var t=Nn(e.topLevelType,e.eventSystemFlags,e.nativeEvent);null!==t?e.blockedOn=t:lt.shift()}null!==ct&&Ct(ct)&&(ct=null),null!==ut&&Ct(ut)&&(ut=null),null!==ft&&Ct(ft)&&(ft=null),pt.forEach(wt),dt.forEach(wt)}function Et(e,t){e.blockedOn===t&&(e.blockedOn=null,st||(st=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,_t)))}function xt(e){function t(t){return Et(t,e)}if(0<lt.length){Et(lt[0],e);for(var n=1;n<lt.length;n++){var r=lt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==ct&&Et(ct,e),null!==ut&&Et(ut,e),null!==ft&&Et(ft,e),pt.forEach(t),dt.forEach(t),n=0;n<ht.length;n++)(r=ht[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ht.length&&null===(n=ht[0]).blockedOn;)vt(n),null===n.blockedOn&&ht.shift()}function kt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Tt(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Bt(e,t,n){(t=P(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=k(n._dispatchListeners,t),n._dispatchInstances=k(n._dispatchInstances,e))}function St(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Tt(t);for(t=n.length;0<t--;)Bt(n[t],"captured",e);for(t=0;t<n.length;t++)Bt(n[t],"bubbled",e)}}function Ot(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=P(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=k(n._dispatchListeners,t),n._dispatchInstances=k(n._dispatchInstances,e))}function Nt(e){e&&e.dispatchConfig.registrationName&&Ot(e._targetInst,null,e)}function Pt(e){T(e,St)}function Dt(){return!0}function Lt(){return!1}function Rt(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Dt:Lt,this.isPropagationStopped=Lt,this}function qt(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function It(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function jt(e){e.eventPool=[],e.getPooled=qt,e.release=It}o(Rt.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Dt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Dt)},persist:function(){this.isPersistent=Dt},isPersistent:Lt,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Lt,this._dispatchInstances=this._dispatchListeners=null}}),Rt.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Rt.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,jt(n),n},jt(Rt);var Ut=Rt.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Ft=Rt.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Mt=Rt.extend({view:null,detail:null}),zt=Mt.extend({relatedTarget:null});function Ht(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Gt={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Vt={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Wt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Xt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Wt[e])&&!!t[e]}function Yt(){return Xt}for(var Kt=Mt.extend({key:function(e){if(e.key){var t=Gt[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Ht(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Vt[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Yt,charCode:function(e){return"keypress"===e.type?Ht(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Ht(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),$t=0,Qt=0,Jt=!1,Zt=!1,en=Mt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Yt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=$t;return $t=e.screenX,Jt?"mousemove"===e.type?e.screenX-t:0:(Jt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Qt;return Qt=e.screenY,Zt?"mousemove"===e.type?e.screenY-t:0:(Zt=!0,0)}}),tn=en.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),nn=en.extend({dataTransfer:null}),rn=Mt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Yt}),on=Rt.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),an=en.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),sn=[["blur","blur",0],["cancel","cancel",0],["click","click",0],["close","close",0],["contextmenu","contextMenu",0],["copy","copy",0],["cut","cut",0],["auxclick","auxClick",0],["dblclick","doubleClick",0],["dragend","dragEnd",0],["dragstart","dragStart",0],["drop","drop",0],["focus","focus",0],["input","input",0],["invalid","invalid",0],["keydown","keyDown",0],["keypress","keyPress",0],["keyup","keyUp",0],["mousedown","mouseDown",0],["mouseup","mouseUp",0],["paste","paste",0],["pause","pause",0],["play","play",0],["pointercancel","pointerCancel",0],["pointerdown","pointerDown",0],["pointerup","pointerUp",0],["ratechange","rateChange",0],["reset","reset",0],["seeked","seeked",0],["submit","submit",0],["touchcancel","touchCancel",0],["touchend","touchEnd",0],["touchstart","touchStart",0],["volumechange","volumeChange",0],["drag","drag",1],["dragenter","dragEnter",1],["dragexit","dragExit",1],["dragleave","dragLeave",1],["dragover","dragOver",1],["mousemove","mouseMove",1],["mouseout","mouseOut",1],["mouseover","mouseOver",1],["pointermove","pointerMove",1],["pointerout","pointerOut",1],["pointerover","pointerOver",1],["scroll","scroll",1],["toggle","toggle",1],["touchmove","touchMove",1],["wheel","wheel",1],["abort","abort",2],[Ke,"animationEnd",2],[$e,"animationIteration",2],[Qe,"animationStart",2],["canplay","canPlay",2],["canplaythrough","canPlayThrough",2],["durationchange","durationChange",2],["emptied","emptied",2],["encrypted","encrypted",2],["ended","ended",2],["error","error",2],["gotpointercapture","gotPointerCapture",2],["load","load",2],["loadeddata","loadedData",2],["loadedmetadata","loadedMetadata",2],["loadstart","loadStart",2],["lostpointercapture","lostPointerCapture",2],["playing","playing",2],["progress","progress",2],["seeking","seeking",2],["stalled","stalled",2],["suspend","suspend",2],["timeupdate","timeUpdate",2],[Je,"transitionEnd",2],["waiting","waiting",2]],ln={},cn={},un=0;un<sn.length;un++){var fn=sn[un],pn=fn[0],dn=fn[1],hn=fn[2],mn="on"+(dn[0].toUpperCase()+dn.slice(1)),gn={phasedRegistrationNames:{bubbled:mn,captured:mn+"Capture"},dependencies:[pn],eventPriority:hn};ln[dn]=gn,cn[pn]=gn}var yn={eventTypes:ln,getEventPriority:function(e){return void 0!==(e=cn[e])?e.eventPriority:2},extractEvents:function(e,t,n,r){var o=cn[e];if(!o)return null;switch(e){case"keypress":if(0===Ht(n))return null;case"keydown":case"keyup":e=Kt;break;case"blur":case"focus":e=zt;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=en;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=nn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=rn;break;case Ke:case $e:case Qe:e=Ut;break;case Je:e=on;break;case"scroll":e=Mt;break;case"wheel":e=an;break;case"copy":case"cut":case"paste":e=Ft;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=tn;break;default:e=Rt}return Pt(t=e.getPooled(o,t,n,r)),t}},bn=i.unstable_UserBlockingPriority,An=i.unstable_runWithPriority,vn=yn.getEventPriority,Cn=10,wn=[];function _n(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=pr(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=kt(e.nativeEvent);r=e.topLevelType;for(var i=e.nativeEvent,a=e.eventSystemFlags,s=null,l=0;l<f.length;l++){var c=f[l];c&&(c=c.extractEvents(r,t,i,o,a))&&(s=k(s,c))}O(s)}}var En=!0;function xn(e,t){kn(t,e,!1)}function kn(e,t,n){switch(vn(t)){case 0:var r=Tn.bind(null,t,1);break;case 1:r=Bn.bind(null,t,1);break;default:r=On.bind(null,t,1)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Tn(e,t,n){ue||le();var r=On,o=ue;ue=!0;try{se(r,e,t,n)}finally{(ue=o)||pe()}}function Bn(e,t,n){An(bn,On.bind(null,e,t,n))}function Sn(e,t,n,r){if(wn.length){var o=wn.pop();o.topLevelType=e,o.eventSystemFlags=t,o.nativeEvent=n,o.targetInst=r,e=o}else e={topLevelType:e,eventSystemFlags:t,nativeEvent:n,targetInst:r,ancestors:[]};try{if(t=_n,n=e,fe)t(n,void 0);else{fe=!0;try{ce(t,n,void 0)}finally{fe=!1,pe()}}}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,wn.length<Cn&&wn.push(e)}}function On(e,t,n){if(En)if(0<lt.length&&-1<mt.indexOf(e))e=yt(null,e,t,n),lt.push(e);else{var r=Nn(e,t,n);null===r?bt(e,n):-1<mt.indexOf(e)?(e=yt(r,e,t,n),lt.push(e)):function(e,t,n,r){switch(t){case"focus":return ct=At(ct,e,t,n,r),!0;case"dragenter":return ut=At(ut,e,t,n,r),!0;case"mouseover":return ft=At(ft,e,t,n,r),!0;case"pointerover":var o=r.pointerId;return pt.set(o,At(pt.get(o)||null,e,t,n,r)),!0;case"gotpointercapture":return o=r.pointerId,dt.set(o,At(dt.get(o)||null,e,t,n,r)),!0}return!1}(r,e,t,n)||(bt(e,n),Sn(e,t,n,null))}}function Nn(e,t,n){var r=kt(n);if(null!==(r=pr(r))){var o=et(r);if(null===o)r=null;else{var i=o.tag;if(13===i){if(null!==(r=tt(o)))return r;r=null}else if(3===i){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;r=null}else o!==r&&(r=null)}}return Sn(e,t,n,r),null}function Pn(e){if(!Z)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var Dn=new("function"==typeof WeakMap?WeakMap:Map);function Ln(e){var t=Dn.get(e);return void 0===t&&(t=new Set,Dn.set(e,t)),t}function Rn(e,t,n){if(!n.has(e)){switch(e){case"scroll":kn(t,"scroll",!0);break;case"focus":case"blur":kn(t,"focus",!0),kn(t,"blur",!0),n.add("blur"),n.add("focus");break;case"cancel":case"close":Pn(e)&&kn(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ze.indexOf(e)&&xn(e,t)}n.add(e)}}var qn={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},In=["Webkit","ms","Moz","O"];function jn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||qn.hasOwnProperty(e)&&qn[e]?(""+t).trim():t+"px"}function Un(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=jn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(qn).forEach((function(e){In.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),qn[t]=qn[e]}))}));var Fn=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Mn(e,t){if(t){if(Fn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if(!("object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function zn(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Hn(e,t){var n=Ln(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=h[t];for(var r=0;r<t.length;r++)Rn(t[r],e,n)}function Gn(){}function Vn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Wn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Xn(e,t){var n,r=Wn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Wn(r)}}function Yn(){for(var e=window,t=Vn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Vn((e=t.contentWindow).document)}return t}function Kn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var $n="$",Qn="/$",Jn="$?",Zn="$!",er=null,tr=null;function nr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function rr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var or="function"==typeof setTimeout?setTimeout:void 0,ir="function"==typeof clearTimeout?clearTimeout:void 0;function ar(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function sr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if(n===$n||n===Zn||n===Jn){if(0===t)return e;t--}else n===Qn&&t++}e=e.previousSibling}return null}var lr=Math.random().toString(36).slice(2),cr="__reactInternalInstance$"+lr,ur="__reactEventHandlers$"+lr,fr="__reactContainere$"+lr;function pr(e){var t=e[cr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[fr]||n[cr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=sr(e);null!==e;){if(n=e[cr])return n;e=sr(e)}return t}n=(e=n).parentNode}return null}function dr(e){return!(e=e[cr]||e[fr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function hr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function mr(e){return e[ur]||null}var gr=null,yr=null,br=null;function Ar(){if(br)return br;var e,t,n=yr,r=n.length,o="value"in gr?gr.value:gr.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return br=o.slice(e,1<t?1-t:void 0)}var vr=Rt.extend({data:null}),Cr=Rt.extend({data:null}),wr=[9,13,27,32],_r=Z&&"CompositionEvent"in window,Er=null;Z&&"documentMode"in document&&(Er=document.documentMode);var xr=Z&&"TextEvent"in window&&!Er,kr=Z&&(!_r||Er&&8<Er&&11>=Er),Tr=String.fromCharCode(32),Br={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Sr=!1;function Or(e,t){switch(e){case"keyup":return-1!==wr.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Nr(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Pr=!1;var Dr={eventTypes:Br,extractEvents:function(e,t,n,r){var o;if(_r)e:{switch(e){case"compositionstart":var i=Br.compositionStart;break e;case"compositionend":i=Br.compositionEnd;break e;case"compositionupdate":i=Br.compositionUpdate;break e}i=void 0}else Pr?Or(e,n)&&(i=Br.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=Br.compositionStart);return i?(kr&&"ko"!==n.locale&&(Pr||i!==Br.compositionStart?i===Br.compositionEnd&&Pr&&(o=Ar()):(yr="value"in(gr=r)?gr.value:gr.textContent,Pr=!0)),i=vr.getPooled(i,t,n,r),o?i.data=o:null!==(o=Nr(n))&&(i.data=o),Pt(i),o=i):o=null,(e=xr?function(e,t){switch(e){case"compositionend":return Nr(t);case"keypress":return 32!==t.which?null:(Sr=!0,Tr);case"textInput":return(e=t.data)===Tr&&Sr?null:e;default:return null}}(e,n):function(e,t){if(Pr)return"compositionend"===e||!_r&&Or(e,t)?(e=Ar(),br=yr=gr=null,Pr=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return kr&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Cr.getPooled(Br.beforeInput,t,n,r)).data=e,Pt(t)):t=null,null===o?t:null===t?o:[o,t]}},Lr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Rr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Lr[e.type]:"textarea"===t}var qr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Ir(e,t,n){return(e=Rt.getPooled(qr.change,e,t,n)).type="change",oe(n),Pt(e),e}var jr=null,Ur=null;function Fr(e){O(e)}function Mr(e){if(xe(hr(e)))return e}function zr(e,t){if("change"===e)return t}var Hr=!1;function Gr(){jr&&(jr.detachEvent("onpropertychange",Vr),Ur=jr=null)}function Vr(e){if("value"===e.propertyName&&Mr(Ur))if(e=Ir(Ur,e,kt(e)),ue)O(e);else{ue=!0;try{ae(Fr,e)}finally{ue=!1,pe()}}}function Wr(e,t,n){"focus"===e?(Gr(),Ur=n,(jr=t).attachEvent("onpropertychange",Vr)):"blur"===e&&Gr()}function Xr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Mr(Ur)}function Yr(e,t){if("click"===e)return Mr(t)}function Kr(e,t){if("input"===e||"change"===e)return Mr(t)}Z&&(Hr=Pn("input")&&(!document.documentMode||9<document.documentMode));var $r,Qr={eventTypes:qr,_isInputEventSupported:Hr,extractEvents:function(e,t,n,r){var o=t?hr(t):window,i=o.nodeName&&o.nodeName.toLowerCase();if("select"===i||"input"===i&&"file"===o.type)var a=zr;else if(Rr(o))if(Hr)a=Kr;else{a=Xr;var s=Wr}else(i=o.nodeName)&&"input"===i.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=Yr);if(a&&(a=a(e,t)))return Ir(a,n,r);s&&s(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Ne(o,"number",o.value)}},Jr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Zr={eventTypes:Jr,extractEvents:function(e,t,n,r,o){var i="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(i&&0==(32&o)&&(n.relatedTarget||n.fromElement)||!a&&!i)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,a?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?pr(t):null)&&(t!==(i=et(t))||5!==t.tag&&6!==t.tag)&&(t=null)):a=null,a===t)return null;if("mouseout"===e||"mouseover"===e)var s=en,l=Jr.mouseLeave,c=Jr.mouseEnter,u="mouse";else"pointerout"!==e&&"pointerover"!==e||(s=tn,l=Jr.pointerLeave,c=Jr.pointerEnter,u="pointer");if(e=null==a?o:hr(a),o=null==t?o:hr(t),(l=s.getPooled(l,a,n,r)).type=u+"leave",l.target=e,l.relatedTarget=o,(r=s.getPooled(c,t,n,r)).type=u+"enter",r.target=o,r.relatedTarget=e,u=t,(s=a)&&u)e:{for(e=u,a=0,t=c=s;t;t=Tt(t))a++;for(t=0,o=e;o;o=Tt(o))t++;for(;0<a-t;)c=Tt(c),a--;for(;0<t-a;)e=Tt(e),t--;for(;a--;){if(c===e||c===e.alternate)break e;c=Tt(c),e=Tt(e)}c=null}else c=null;for(e=c,c=[];s&&s!==e&&(null===(a=s.alternate)||a!==e);)c.push(s),s=Tt(s);for(s=[];u&&u!==e&&(null===(a=u.alternate)||a!==e);)s.push(u),u=Tt(u);for(u=0;u<c.length;u++)Ot(c[u],"bubbled",l);for(u=s.length;0<u--;)Ot(s[u],"captured",r);return n===$r?($r=null,[l]):($r=n,[l,r])}};var eo="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},to=Object.prototype.hasOwnProperty;function no(e,t){if(eo(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!to.call(t,n[r])||!eo(e[n[r]],t[n[r]]))return!1;return!0}var ro=Z&&"documentMode"in document&&11>=document.documentMode,oo={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},io=null,ao=null,so=null,lo=!1;function co(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return lo||null==io||io!==Vn(n)?null:("selectionStart"in(n=io)&&Kn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},so&&no(so,n)?null:(so=n,(e=Rt.getPooled(oo.select,ao,e,t)).type="select",e.target=io,Pt(e),e))}var uo={eventTypes:oo,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=Ln(i),o=h.onSelect;for(var a=0;a<o.length;a++)if(!i.has(o[a])){i=!1;break e}i=!0}o=!i}if(o)return null;switch(i=t?hr(t):window,e){case"focus":(Rr(i)||"true"===i.contentEditable)&&(io=i,ao=t,so=null);break;case"blur":so=ao=io=null;break;case"mousedown":lo=!0;break;case"contextmenu":case"mouseup":case"dragend":return lo=!1,co(n,r);case"selectionchange":if(ro)break;case"keydown":case"keyup":return co(n,r)}return null}};N.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w=mr,_=dr,E=hr,N.injectEventPluginsByName({SimpleEventPlugin:yn,EnterLeaveEventPlugin:Zr,ChangeEventPlugin:Qr,SelectEventPlugin:uo,BeforeInputEventPlugin:Dr}),new Set;var fo=[],po=-1;function ho(e){0>po||(e.current=fo[po],fo[po]=null,po--)}function mo(e,t){po++,fo[po]=e.current,e.current=t}var go={},yo={current:go},bo={current:!1},Ao=go;function vo(e,t){var n=e.type.contextTypes;if(!n)return go;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Co(e){return null!=(e=e.childContextTypes)}function wo(e){ho(bo),ho(yo)}function _o(e){ho(bo),ho(yo)}function Eo(e,t,n){if(yo.current!==go)throw Error(a(168));mo(yo,t),mo(bo,n)}function xo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,Q(t)||"Unknown",i));return o({},n,{},r)}function ko(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||go,Ao=yo.current,mo(yo,t),mo(bo,bo.current),!0}function To(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(t=xo(e,t,Ao),r.__reactInternalMemoizedMergedChildContext=t,ho(bo),ho(yo),mo(yo,t)):ho(bo),mo(bo,n)}var Bo=i.unstable_runWithPriority,So=i.unstable_scheduleCallback,Oo=i.unstable_cancelCallback,No=i.unstable_shouldYield,Po=i.unstable_requestPaint,Do=i.unstable_now,Lo=i.unstable_getCurrentPriorityLevel,Ro=i.unstable_ImmediatePriority,qo=i.unstable_UserBlockingPriority,Io=i.unstable_NormalPriority,jo=i.unstable_LowPriority,Uo=i.unstable_IdlePriority,Fo={},Mo=void 0!==Po?Po:function(){},zo=null,Ho=null,Go=!1,Vo=Do(),Wo=1e4>Vo?Do:function(){return Do()-Vo};function Xo(){switch(Lo()){case Ro:return 99;case qo:return 98;case Io:return 97;case jo:return 96;case Uo:return 95;default:throw Error(a(332))}}function Yo(e){switch(e){case 99:return Ro;case 98:return qo;case 97:return Io;case 96:return jo;case 95:return Uo;default:throw Error(a(332))}}function Ko(e,t){return e=Yo(e),Bo(e,t)}function $o(e,t,n){return e=Yo(e),So(e,t,n)}function Qo(e){return null===zo?(zo=[e],Ho=So(Ro,Zo)):zo.push(e),Fo}function Jo(){if(null!==Ho){var e=Ho;Ho=null,Oo(e)}Zo()}function Zo(){if(!Go&&null!==zo){Go=!0;var e=0;try{var t=zo;Ko(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),zo=null}catch(t){throw null!==zo&&(zo=zo.slice(e+1)),So(Ro,Jo),t}finally{Go=!1}}}var ei=3;function ti(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function ni(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var ri={current:null},oi=null,ii=null,ai=null;function si(){ai=ii=oi=null}function li(e,t){var n=e.type._context;mo(ri,n._currentValue),n._currentValue=t}function ci(e){var t=ri.current;ho(ri),e.type._context._currentValue=t}function ui(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function fi(e,t){oi=e,ai=ii=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Va=!0),e.firstContext=null)}function pi(e,t){if(ai!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ai=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ii){if(null===oi)throw Error(a(308));ii=t,oi.dependencies={expirationTime:0,firstContext:t,responders:null}}else ii=ii.next=t;return e._currentValue}var di=!1;function hi(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function mi(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function gi(e,t){return{expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function yi(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function bi(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=hi(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=hi(e.memoizedState),o=n.updateQueue=hi(n.memoizedState)):r=e.updateQueue=mi(o):null===o&&(o=n.updateQueue=mi(r));null===o||r===o?yi(r,t):null===r.lastUpdate||null===o.lastUpdate?(yi(r,t),yi(o,t)):(yi(r,t),o.lastUpdate=t)}function Ai(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=hi(e.memoizedState):vi(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function vi(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=mi(t)),t}function Ci(e,t,n,r,i,a){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(a,r,i):e;case 3:e.effectTag=-4097&e.effectTag|64;case 0:if(null==(i="function"==typeof(e=n.payload)?e.call(a,r,i):e))break;return o({},r,i);case 2:di=!0}return r}function wi(e,t,n,r,o){di=!1;for(var i=(t=vi(e,t)).baseState,a=null,s=0,l=t.firstUpdate,c=i;null!==l;){var u=l.expirationTime;u<o?(null===a&&(a=l,i=c),s<u&&(s=u)):(Tl(u,l.suspenseConfig),c=Ci(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(u=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f<o?(null===u&&(u=l,null===a&&(i=c)),s<f&&(s=f)):(c=Ci(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===a&&(t.lastUpdate=null),null===u?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===u&&(i=c),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=u,Bl(s),e.expirationTime=s,e.memoizedState=c}function _i(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),Ei(t.firstEffect,n),t.firstEffect=t.lastEffect=null,Ei(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function Ei(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;if("function"!=typeof n)throw Error(a(191,n));n.call(r)}e=e.nextEffect}}var xi=D.ReactCurrentBatchConfig,ki=(new r.Component).refs;function Ti(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var Bi={isMounted:function(e){return!!(e=e._reactInternalFiber)&&et(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=hl(),o=xi.suspense;(o=gi(r=ml(r,e,o),o)).payload=t,null!=n&&(o.callback=n),bi(e,o),gl(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=hl(),o=xi.suspense;(o=gi(r=ml(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),bi(e,o),gl(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=hl(),r=xi.suspense;(r=gi(n=ml(n,e,r),r)).tag=2,null!=t&&(r.callback=t),bi(e,r),gl(e,n)}};function Si(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!no(n,r)||!no(o,i))}function Oi(e,t,n){var r=!1,o=go,i=t.contextType;return"object"==typeof i&&null!==i?i=pi(i):(o=Co(t)?Ao:yo.current,i=(r=null!=(r=t.contextTypes))?vo(e,o):go),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Bi,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function Ni(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Bi.enqueueReplaceState(t,t.state,null)}function Pi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=ki;var i=t.contextType;"object"==typeof i&&null!==i?o.context=pi(i):(i=Co(t)?Ao:yo.current,o.context=vo(e,i)),null!==(i=e.updateQueue)&&(wi(e,i,n,o,r),o.state=e.memoizedState),"function"==typeof(i=t.getDerivedStateFromProps)&&(Ti(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Bi.enqueueReplaceState(o,o.state,null),null!==(i=e.updateQueue)&&(wi(e,i,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var Di=Array.isArray;function Li(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===ki&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Ri(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function qi(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Yl(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function s(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Ql(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=Li(e,t,n),r.return=e,r):((r=Kl(n.type,n.key,n.props,null,e.mode,r)).ref=Li(e,t,n),r.return=e,r)}function u(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Jl(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=$l(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Ql(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case q:return(n=Kl(t.type,t.key,t.props,null,e.mode,n)).ref=Li(e,null,t),n.return=e,n;case I:return(t=Jl(t,e.mode,n)).return=e,t}if(Di(t)||$(t))return(t=$l(t,e.mode,n,null)).return=e,t;Ri(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case q:return n.key===o?n.type===j?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case I:return n.key===o?u(e,t,n,r):null}if(Di(n)||$(n))return null!==o?null:f(e,t,n,r,null);Ri(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case q:return e=e.get(null===r.key?n:r.key)||null,r.type===j?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case I:return u(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Di(r)||$(r))return f(t,e=e.get(n)||null,r,o,null);Ri(t,r)}return null}function m(o,a,s,l){for(var c=null,u=null,f=a,m=a=0,g=null;null!==f&&m<s.length;m++){f.index>m?(g=f,f=null):g=f.sibling;var y=d(o,f,s[m],l);if(null===y){null===f&&(f=g);break}e&&f&&null===y.alternate&&t(o,f),a=i(y,a,m),null===u?c=y:u.sibling=y,u=y,f=g}if(m===s.length)return n(o,f),c;if(null===f){for(;m<s.length;m++)null!==(f=p(o,s[m],l))&&(a=i(f,a,m),null===u?c=f:u.sibling=f,u=f);return c}for(f=r(o,f);m<s.length;m++)null!==(g=h(f,o,m,s[m],l))&&(e&&null!==g.alternate&&f.delete(null===g.key?m:g.key),a=i(g,a,m),null===u?c=g:u.sibling=g,u=g);return e&&f.forEach((function(e){return t(o,e)})),c}function g(o,s,l,c){var u=$(l);if("function"!=typeof u)throw Error(a(150));if(null==(l=u.call(l)))throw Error(a(151));for(var f=u=null,m=s,g=s=0,y=null,b=l.next();null!==m&&!b.done;g++,b=l.next()){m.index>g?(y=m,m=null):y=m.sibling;var A=d(o,m,b.value,c);if(null===A){null===m&&(m=y);break}e&&m&&null===A.alternate&&t(o,m),s=i(A,s,g),null===f?u=A:f.sibling=A,f=A,m=y}if(b.done)return n(o,m),u;if(null===m){for(;!b.done;g++,b=l.next())null!==(b=p(o,b.value,c))&&(s=i(b,s,g),null===f?u=b:f.sibling=b,f=b);return u}for(m=r(o,m);!b.done;g++,b=l.next())null!==(b=h(m,o,g,b.value,c))&&(e&&null!==b.alternate&&m.delete(null===b.key?g:b.key),s=i(b,s,g),null===f?u=b:f.sibling=b,f=b);return e&&m.forEach((function(e){return t(o,e)})),u}return function(e,r,i,l){var c="object"==typeof i&&null!==i&&i.type===j&&null===i.key;c&&(i=i.props.children);var u="object"==typeof i&&null!==i;if(u)switch(i.$$typeof){case q:e:{for(u=i.key,c=r;null!==c;){if(c.key===u){if(7===c.tag?i.type===j:c.elementType===i.type){n(e,c.sibling),(r=o(c,i.type===j?i.props.children:i.props)).ref=Li(e,c,i),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}i.type===j?((r=$l(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=Kl(i.type,i.key,i.props,null,e.mode,l)).ref=Li(e,r,i),l.return=e,e=l)}return s(e);case I:e:{for(c=i.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Jl(i,e.mode,l)).return=e,e=r}return s(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Ql(i,e.mode,l)).return=e,e=r),s(e);if(Di(i))return m(e,r,i,l);if($(i))return g(e,r,i,l);if(u&&Ri(e,i),void 0===i&&!c)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Ii=qi(!0),ji=qi(!1),Ui={},Fi={current:Ui},Mi={current:Ui},zi={current:Ui};function Hi(e){if(e===Ui)throw Error(a(174));return e}function Gi(e,t){mo(zi,t),mo(Mi,e),mo(Fi,Ui);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Fe(null,"");break;default:t=Fe(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}ho(Fi),mo(Fi,t)}function Vi(e){ho(Fi),ho(Mi),ho(zi)}function Wi(e){Hi(zi.current);var t=Hi(Fi.current),n=Fe(t,e.type);t!==n&&(mo(Mi,e),mo(Fi,n))}function Xi(e){Mi.current===e&&(ho(Fi),ho(Mi))}var Yi={current:0};function Ki(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||n.data===Jn||n.data===Zn))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function $i(e,t){return{responder:e,props:t}}var Qi=D.ReactCurrentDispatcher,Ji=D.ReactCurrentBatchConfig,Zi=0,ea=null,ta=null,na=null,ra=null,oa=null,ia=null,aa=0,sa=null,la=0,ca=!1,ua=null,fa=0;function pa(){throw Error(a(321))}function da(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!eo(e[n],t[n]))return!1;return!0}function ha(e,t,n,r,o,i){if(Zi=i,ea=t,na=null!==e?e.memoizedState:null,Qi.current=null===na?Da:La,t=n(r,o),ca){do{ca=!1,fa+=1,na=null!==e?e.memoizedState:null,ia=ra,sa=oa=ta=null,Qi.current=La,t=n(r,o)}while(ca);ua=null,fa=0}if(Qi.current=Pa,(e=ea).memoizedState=ra,e.expirationTime=aa,e.updateQueue=sa,e.effectTag|=la,e=null!==ta&&null!==ta.next,Zi=0,ia=oa=ra=na=ta=ea=null,aa=0,sa=null,la=0,e)throw Error(a(300));return t}function ma(){Qi.current=Pa,Zi=0,ia=oa=ra=na=ta=ea=null,aa=0,sa=null,la=0,ca=!1,ua=null,fa=0}function ga(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===oa?ra=oa=e:oa=oa.next=e,oa}function ya(){if(null!==ia)ia=(oa=ia).next,na=null!==(ta=na)?ta.next:null;else{if(null===na)throw Error(a(310));var e={memoizedState:(ta=na).memoizedState,baseState:ta.baseState,queue:ta.queue,baseUpdate:ta.baseUpdate,next:null};oa=null===oa?ra=e:oa.next=e,na=ta.next}return oa}function ba(e,t){return"function"==typeof t?t(e):t}function Aa(e){var t=ya(),n=t.queue;if(null===n)throw Error(a(311));if(n.lastRenderedReducer=e,0<fa){var r=n.dispatch;if(null!==ua){var o=ua.get(n);if(void 0!==o){ua.delete(n);var i=t.memoizedState;do{i=e(i,o.action),o=o.next}while(null!==o);return eo(i,t.memoizedState)||(Va=!0),t.memoizedState=i,t.baseUpdate===n.last&&(t.baseState=i),n.lastRenderedState=i,[i,r]}}return[t.memoizedState,r]}r=n.last;var s=t.baseUpdate;if(i=t.baseState,null!==s?(null!==r&&(r.next=null),r=s.next):r=null!==r?r.next:null,null!==r){var l=o=null,c=r,u=!1;do{var f=c.expirationTime;f<Zi?(u||(u=!0,l=s,o=i),f>aa&&Bl(aa=f)):(Tl(f,c.suspenseConfig),i=c.eagerReducer===e?c.eagerState:e(i,c.action)),s=c,c=c.next}while(null!==c&&c!==r);u||(l=s,o=i),eo(i,t.memoizedState)||(Va=!0),t.memoizedState=i,t.baseUpdate=l,t.baseState=o,n.lastRenderedState=i}return[t.memoizedState,n.dispatch]}function va(e){var t=ga();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:ba,lastRenderedState:e}).dispatch=Na.bind(null,ea,e),[t.memoizedState,e]}function Ca(e){return Aa(ba)}function wa(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===sa?(sa={lastEffect:null}).lastEffect=e.next=e:null===(t=sa.lastEffect)?sa.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,sa.lastEffect=e),e}function _a(e,t,n,r){var o=ga();la|=e,o.memoizedState=wa(t,n,void 0,void 0===r?null:r)}function Ea(e,t,n,r){var o=ya();r=void 0===r?null:r;var i=void 0;if(null!==ta){var a=ta.memoizedState;if(i=a.destroy,null!==r&&da(r,a.deps))return void wa(0,n,i,r)}la|=e,o.memoizedState=wa(t,n,i,r)}function xa(e,t){return _a(516,192,e,t)}function ka(e,t){return Ea(516,192,e,t)}function Ta(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ba(){}function Sa(e,t){return ga().memoizedState=[e,void 0===t?null:t],e}function Oa(e,t){var n=ya();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&da(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Na(e,t,n){if(!(25>fa))throw Error(a(301));var r=e.alternate;if(e===ea||null!==r&&r===ea)if(ca=!0,e={expirationTime:Zi,suspenseConfig:null,action:n,eagerReducer:null,eagerState:null,next:null},null===ua&&(ua=new Map),void 0===(n=ua.get(t)))ua.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{var o=hl(),i=xi.suspense;i={expirationTime:o=ml(o,e,i),suspenseConfig:i,action:n,eagerReducer:null,eagerState:null,next:null};var s=t.last;if(null===s)i.next=i;else{var l=s.next;null!==l&&(i.next=l),s.next=i}if(t.last=i,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var c=t.lastRenderedState,u=r(c,n);if(i.eagerReducer=r,i.eagerState=u,eo(u,c))return}catch(e){}gl(e,o)}}var Pa={readContext:pi,useCallback:pa,useContext:pa,useEffect:pa,useImperativeHandle:pa,useLayoutEffect:pa,useMemo:pa,useReducer:pa,useRef:pa,useState:pa,useDebugValue:pa,useResponder:pa,useDeferredValue:pa,useTransition:pa},Da={readContext:pi,useCallback:Sa,useContext:pi,useEffect:xa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,_a(4,36,Ta.bind(null,t,e),n)},useLayoutEffect:function(e,t){return _a(4,36,e,t)},useMemo:function(e,t){var n=ga();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ga();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Na.bind(null,ea,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},ga().memoizedState=e},useState:va,useDebugValue:Ba,useResponder:$i,useDeferredValue:function(e,t){var n=va(e),r=n[0],o=n[1];return xa((function(){i.unstable_next((function(){var n=Ji.suspense;Ji.suspense=void 0===t?null:t;try{o(e)}finally{Ji.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=va(!1),n=t[0],r=t[1];return[Sa((function(t){r(!0),i.unstable_next((function(){var n=Ji.suspense;Ji.suspense=void 0===e?null:e;try{r(!1),t()}finally{Ji.suspense=n}}))}),[e,n]),n]}},La={readContext:pi,useCallback:Oa,useContext:pi,useEffect:ka,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ea(4,36,Ta.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ea(4,36,e,t)},useMemo:function(e,t){var n=ya();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&da(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:Aa,useRef:function(){return ya().memoizedState},useState:Ca,useDebugValue:Ba,useResponder:$i,useDeferredValue:function(e,t){var n=Ca(),r=n[0],o=n[1];return ka((function(){i.unstable_next((function(){var n=Ji.suspense;Ji.suspense=void 0===t?null:t;try{o(e)}finally{Ji.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=Ca(),n=t[0],r=t[1];return[Oa((function(t){r(!0),i.unstable_next((function(){var n=Ji.suspense;Ji.suspense=void 0===e?null:e;try{r(!1),t()}finally{Ji.suspense=n}}))}),[e,n]),n]}},Ra=null,qa=null,Ia=!1;function ja(e,t){var n=Wl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ua(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Fa(e){if(Ia){var t=qa;if(t){var n=t;if(!Ua(e,t)){if(!(t=ar(n.nextSibling))||!Ua(e,t))return e.effectTag=-1025&e.effectTag|2,Ia=!1,void(Ra=e);ja(Ra,n)}Ra=e,qa=ar(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Ia=!1,Ra=e}}function Ma(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Ra=e}function za(e){if(e!==Ra)return!1;if(!Ia)return Ma(e),Ia=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!rr(t,e.memoizedProps))for(t=qa;t;)ja(e,t),t=ar(t.nextSibling);if(Ma(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if(n===Qn){if(0===t){qa=ar(e.nextSibling);break e}t--}else n!==$n&&n!==Zn&&n!==Jn||t++}e=e.nextSibling}qa=null}}else qa=Ra?ar(e.stateNode.nextSibling):null;return!0}function Ha(){qa=Ra=null,Ia=!1}var Ga=D.ReactCurrentOwner,Va=!1;function Wa(e,t,n,r){t.child=null===e?ji(t,null,n,r):Ii(t,e.child,n,r)}function Xa(e,t,n,r,o){n=n.render;var i=t.ref;return fi(t,o),r=ha(e,t,n,r,i,o),null===e||Va?(t.effectTag|=1,Wa(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),us(e,t,o))}function Ya(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Xl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Kl(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Ka(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:no)(o,r)&&e.ref===t.ref)?us(e,t,i):(t.effectTag|=1,(e=Yl(a,r)).ref=t.ref,e.return=t,t.child=e)}function Ka(e,t,n,r,o,i){return null!==e&&no(e.memoizedProps,r)&&e.ref===t.ref&&(Va=!1,o<i)?us(e,t,i):Qa(e,t,n,r,i)}function $a(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Qa(e,t,n,r,o){var i=Co(n)?Ao:yo.current;return i=vo(t,i),fi(t,o),n=ha(e,t,n,r,i,o),null===e||Va?(t.effectTag|=1,Wa(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),us(e,t,o))}function Ja(e,t,n,r,o){if(Co(n)){var i=!0;ko(t)}else i=!1;if(fi(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),Oi(t,n,r),Pi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var l=a.context,c=n.contextType;"object"==typeof c&&null!==c?c=pi(c):c=vo(t,c=Co(n)?Ao:yo.current);var u=n.getDerivedStateFromProps,f="function"==typeof u||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||l!==c)&&Ni(t,a,r,c),di=!1;var p=t.memoizedState;l=a.state=p;var d=t.updateQueue;null!==d&&(wi(t,d,r,a,o),l=t.memoizedState),s!==r||p!==l||bo.current||di?("function"==typeof u&&(Ti(t,n,u,r),l=t.memoizedState),(s=di||Si(t,n,s,r,p,l,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=s):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,s=t.memoizedProps,a.props=t.type===t.elementType?s:ni(t.type,s),l=a.context,"object"==typeof(c=n.contextType)&&null!==c?c=pi(c):c=vo(t,c=Co(n)?Ao:yo.current),(f="function"==typeof(u=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||l!==c)&&Ni(t,a,r,c),di=!1,l=t.memoizedState,p=a.state=l,null!==(d=t.updateQueue)&&(wi(t,d,r,a,o),p=t.memoizedState),s!==r||l!==p||bo.current||di?("function"==typeof u&&(Ti(t,n,u,r),p=t.memoizedState),(u=di||Si(t,n,s,r,l,p,c))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,c),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,c)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=c,r=u):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return Za(e,t,n,r,i,o)}function Za(e,t,n,r,o,i){$a(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&To(t,n,!1),us(e,t,i);r=t.stateNode,Ga.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Ii(t,e.child,null,i),t.child=Ii(t,null,s,i)):Wa(e,t,s,i),t.memoizedState=r.state,o&&To(t,n,!0),t.child}function es(e){var t=e.stateNode;t.pendingContext?Eo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Eo(0,t.context,!1),Gi(e,t.containerInfo)}var ts,ns,rs,os,is={dehydrated:null,retryTime:0};function as(e,t,n){var r,o=t.mode,i=t.pendingProps,a=Yi.current,s=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&a)&&(null===e||null!==e.memoizedState)),r?(s=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(a|=1),mo(Yi,1&a),null===e){if(void 0!==i.fallback&&Fa(t),s){if(s=i.fallback,(i=$l(null,o,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=$l(s,o,n,null)).return=t,i.sibling=n,t.memoizedState=is,t.child=i,n}return o=i.children,t.memoizedState=null,t.child=ji(t,null,o,n)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,s){if(i=i.fallback,(n=Yl(e,e.pendingProps)).return=t,0==(2&t.mode)&&(s=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=s;null!==s;)s.return=n,s=s.sibling;return(o=Yl(o,i,o.expirationTime)).return=t,n.sibling=o,n.childExpirationTime=0,t.memoizedState=is,t.child=n,o}return n=Ii(t,e.child,i.children,n),t.memoizedState=null,t.child=n}if(e=e.child,s){if(s=i.fallback,(i=$l(null,o,0,null)).return=t,i.child=e,null!==e&&(e.return=i),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=$l(s,o,n,null)).return=t,i.sibling=n,n.effectTag|=2,i.childExpirationTime=0,t.memoizedState=is,t.child=i,n}return t.memoizedState=null,t.child=Ii(t,e,i.children,n)}function ss(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),ui(e.return,t)}function ls(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,last:r,tail:n,tailExpiration:0,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=o,a.lastEffect=i)}function cs(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Wa(e,t,r.children,n),0!=(2&(r=Yi.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&ss(e,n);else if(19===e.tag)ss(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(mo(Yi,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Ki(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),ls(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Ki(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}ls(t,!0,n,null,i,t.lastEffect);break;case"together":ls(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function us(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&Bl(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Yl(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Yl(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function fs(e){e.effectTag|=4}function ps(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ds(e){switch(e.tag){case 1:Co(e.type)&&wo();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Vi(),_o(),0!=(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return Xi(e),null;case 13:return ho(Yi),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return ho(Yi),null;case 4:return Vi(),null;case 10:return ci(e),null;default:return null}}function hs(e,t){return{value:e,source:t,stack:J(t)}}ts=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},ns=function(){},rs=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var s,l,c=t.stateNode;switch(Hi(Fi.current),e=null,n){case"input":a=ke(c,a),r=ke(c,r),e=[];break;case"option":a=Pe(c,a),r=Pe(c,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=Le(c,a),r=Le(c,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(c.onclick=Gn)}for(s in Mn(n,r),n=null,a)if(!r.hasOwnProperty(s)&&a.hasOwnProperty(s)&&null!=a[s])if("style"===s)for(l in c=a[s])c.hasOwnProperty(l)&&(n||(n={}),n[l]="");else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(d.hasOwnProperty(s)?e||(e=[]):(e=e||[]).push(s,null));for(s in r){var u=r[s];if(c=null!=a?a[s]:void 0,r.hasOwnProperty(s)&&u!==c&&(null!=u||null!=c))if("style"===s)if(c){for(l in c)!c.hasOwnProperty(l)||u&&u.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in u)u.hasOwnProperty(l)&&c[l]!==u[l]&&(n||(n={}),n[l]=u[l])}else n||(e||(e=[]),e.push(s,n)),n=u;else"dangerouslySetInnerHTML"===s?(u=u?u.__html:void 0,c=c?c.__html:void 0,null!=u&&c!==u&&(e=e||[]).push(s,""+u)):"children"===s?c===u||"string"!=typeof u&&"number"!=typeof u||(e=e||[]).push(s,""+u):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(d.hasOwnProperty(s)?(null!=u&&Hn(i,s),e||c===u||(e=[])):(e=e||[]).push(s,u))}n&&(e=e||[]).push("style",n),i=e,(t.updateQueue=i)&&fs(t)}},os=function(e,t,n,r){n!==r&&fs(t)};var ms="function"==typeof WeakSet?WeakSet:Set;function gs(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=J(n)),null!==n&&Q(n.type),t=t.value,null!==e&&1===e.tag&&Q(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function ys(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Fl(e,t)}else t.current=null}function bs(e,t){switch(t.tag){case 0:case 11:case 15:As(2,0,t);break;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:ni(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:case 17:break;default:throw Error(a(163))}}function As(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if(0!=(r.tag&e)){var o=r.destroy;r.destroy=void 0,void 0!==o&&o()}0!=(r.tag&t)&&(o=r.create,r.destroy=o()),r=r.next}while(r!==n)}}function vs(e,t,n){switch("function"==typeof Gl&&Gl(t),t.tag){case 0:case 11:case 14:case 15:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Ko(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var o=t;try{n()}catch(e){Fl(o,e)}}e=e.next}while(e!==r)}))}break;case 1:ys(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Fl(e,t)}}(t,n);break;case 5:ys(t);break;case 4:Es(e,t,n)}}function Cs(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,null!==t&&Cs(t)}function ws(e){return 5===e.tag||3===e.tag||4===e.tag}function _s(e){e:{for(var t=e.return;null!==t;){if(ws(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.effectTag&&(He(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ws(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){var i=5===o.tag||6===o.tag;if(i){var s=i?o.stateNode:o.stateNode.instance;if(n)if(r){var l=s;s=n,8===(i=t).nodeType?i.parentNode.insertBefore(l,s):i.insertBefore(l,s)}else t.insertBefore(s,n);else r?(8===(l=t).nodeType?(i=l.parentNode).insertBefore(s,l):(i=l).appendChild(s),null!=(l=l._reactRootContainer)||null!==i.onclick||(i.onclick=Gn)):t.appendChild(s)}else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function Es(e,t,n){for(var r,o,i=t,s=!1;;){if(!s){s=i.return;e:for(;;){if(null===s)throw Error(a(160));switch(r=s.stateNode,s.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}s=s.return}s=!0}if(5===i.tag||6===i.tag){e:for(var l=e,c=i,u=n,f=c;;)if(vs(l,f,u),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===c)break;for(;null===f.sibling;){if(null===f.return||f.return===c)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}o?(l=r,c=i.stateNode,8===l.nodeType?l.parentNode.removeChild(c):l.removeChild(c)):r.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){r=i.stateNode.containerInfo,o=!0,i.child.return=i,i=i.child;continue}}else if(vs(e,i,n),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(s=!1)}i.sibling.return=i.return,i=i.sibling}}function xs(e,t){switch(t.tag){case 0:case 11:case 14:case 15:As(4,8,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[ur]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Be(n,r),zn(e,o),t=zn(e,r),o=0;o<i.length;o+=2){var s=i[o],l=i[o+1];"style"===s?Un(n,l):"dangerouslySetInnerHTML"===s?ze(n,l):"children"===s?He(n,l):we(n,s,l,t)}switch(e){case"input":Se(n,r);break;case"textarea":qe(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?De(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?De(n,!!r.multiple,r.defaultValue,!0):De(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 6:if(null===t.stateNode)throw Error(a(162));t.stateNode.nodeValue=t.memoizedProps;break;case 3:(t=t.stateNode).hydrate&&(t.hydrate=!1,xt(t.containerInfo));break;case 12:break;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,tl=Wo()),null!==n)e:for(e=n;;){if(5===e.tag)i=e.stateNode,r?"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none":(i=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,i.style.display=jn("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(i=e.child.sibling).return=e,e=i;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}ks(t);break;case 19:ks(t);break;case 17:case 20:case 21:break;default:throw Error(a(163))}}function ks(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ms),t.forEach((function(t){var r=zl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var Ts="function"==typeof WeakMap?WeakMap:Map;function Bs(e,t,n){(n=gi(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){ol||(ol=!0,il=r),gs(e,t)},n}function Ss(e,t,n){(n=gi(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return gs(e,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===al?al=new Set([this]):al.add(this),gs(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var Os,Ns=Math.ceil,Ps=D.ReactCurrentDispatcher,Ds=D.ReactCurrentOwner,Ls=0,Rs=8,qs=16,Is=32,js=0,Us=1,Fs=2,Ms=3,zs=4,Hs=5,Gs=Ls,Vs=null,Ws=null,Xs=0,Ys=js,Ks=null,$s=1073741823,Qs=1073741823,Js=null,Zs=0,el=!1,tl=0,nl=500,rl=null,ol=!1,il=null,al=null,sl=!1,ll=null,cl=90,ul=null,fl=0,pl=null,dl=0;function hl(){return(Gs&(qs|Is))!==Ls?1073741821-(Wo()/10|0):0!==dl?dl:dl=1073741821-(Wo()/10|0)}function ml(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Xo();if(0==(4&t))return 99===r?1073741823:1073741822;if((Gs&qs)!==Ls)return Xs;if(null!==n)e=ti(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=ti(e,150,100);break;case 97:case 96:e=ti(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==Vs&&e===Xs&&--e,e}function gl(e,t){if(50<fl)throw fl=0,pl=null,Error(a(185));if(null!==(e=yl(e,t))){var n=Xo();1073741823===t?(Gs&Rs)!==Ls&&(Gs&(qs|Is))===Ls?Cl(e):(Al(e),Gs===Ls&&Jo()):Al(e),(4&Gs)===Ls||98!==n&&99!==n||(null===ul?ul=new Map([[e,t]]):(void 0===(n=ul.get(e))||n>t)&&ul.set(e,t))}}function yl(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(Vs===o&&(Bl(t),Ys===zs&&tc(o,Xs)),nc(o,t)),o}function bl(e){var t=e.lastExpiredTime;return 0!==t?t:ec(e,t=e.firstPendingTime)?(t=e.lastPingedTime)>(e=e.nextKnownPendingLevel)?t:e:t}function Al(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Qo(Cl.bind(null,e));else{var t=bl(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=hl();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=r)return;n!==Fo&&Oo(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Qo(Cl.bind(null,e)):$o(r,vl.bind(null,e),{timeout:10*(1073741821-t)-Wo()}),e.callbackNode=t}}}function vl(e,t){if(dl=0,t)return rc(e,t=hl()),Al(e),null;var n=bl(e);if(0!==n){if(t=e.callbackNode,(Gs&(qs|Is))!==Ls)throw Error(a(327));if(Il(),e===Vs&&n===Xs||El(e,n),null!==Ws){var r=Gs;Gs|=qs;for(var o=kl();;)try{Ol();break}catch(t){xl(e,t)}if(si(),Gs=r,Ps.current=o,Ys===Us)throw t=Ks,El(e,n),tc(e,n),Al(e),t;if(null===Ws)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Ys,Vs=null,r){case js:case Us:throw Error(a(345));case Fs:rc(e,2<n?2:n);break;case Ms:if(tc(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=Dl(o)),1073741823===$s&&10<(o=tl+nl-Wo())){if(el){var i=e.lastPingedTime;if(0===i||i>=n){e.lastPingedTime=n,El(e,n);break}}if(0!==(i=bl(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=or(Ll.bind(null,e),o);break}Ll(e);break;case zs:if(tc(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=Dl(o)),el&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,El(e,n);break}if(0!==(o=bl(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Qs?r=10*(1073741821-Qs)-Wo():1073741823===$s?r=0:(r=10*(1073741821-$s)-5e3,0>(r=(o=Wo())-r)&&(r=0),(n=10*(1073741821-n)-o)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Ns(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=or(Ll.bind(null,e),r);break}Ll(e);break;case Hs:if(1073741823!==$s&&null!==Js){i=$s;var s=Js;if(0>=(r=0|s.busyMinDurationMs)?r=0:(o=0|s.busyDelayMs,r=(i=Wo()-(10*(1073741821-i)-(0|s.timeoutMs||5e3)))<=o?0:o+r-i),10<r){tc(e,n),e.timeoutHandle=or(Ll.bind(null,e),r);break}}Ll(e);break;default:throw Error(a(329))}if(Al(e),e.callbackNode===t)return vl.bind(null,e)}}return null}function Cl(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,e.finishedExpirationTime===t)Ll(e);else{if((Gs&(qs|Is))!==Ls)throw Error(a(327));if(Il(),e===Vs&&t===Xs||El(e,t),null!==Ws){var n=Gs;Gs|=qs;for(var r=kl();;)try{Sl();break}catch(t){xl(e,t)}if(si(),Gs=n,Ps.current=r,Ys===Us)throw n=Ks,El(e,t),tc(e,t),Al(e),n;if(null!==Ws)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Vs=null,Ll(e),Al(e)}}return null}function wl(e,t){var n=Gs;Gs|=1;try{return e(t)}finally{(Gs=n)===Ls&&Jo()}}function _l(e,t){var n=Gs;Gs&=-2,Gs|=Rs;try{return e(t)}finally{(Gs=n)===Ls&&Jo()}}function El(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,ir(n)),null!==Ws)for(n=Ws.return;null!==n;){var r=n;switch(r.tag){case 1:var o=r.type.childContextTypes;null!=o&&wo();break;case 3:Vi(),_o();break;case 5:Xi(r);break;case 4:Vi();break;case 13:case 19:ho(Yi);break;case 10:ci(r)}n=n.return}Vs=e,Ws=Yl(e.current,null),Xs=t,Ys=js,Ks=null,Qs=$s=1073741823,Js=null,Zs=0,el=!1}function xl(e,t){for(;;){try{if(si(),ma(),null===Ws||null===Ws.return)return Ys=Us,Ks=t,null;e:{var n=e,r=Ws.return,o=Ws,i=t;if(t=Xs,o.effectTag|=2048,o.firstEffect=o.lastEffect=null,null!==i&&"object"==typeof i&&"function"==typeof i.then){var a=i,s=0!=(1&Yi.current),l=r;do{var c;if(c=13===l.tag){var u=l.memoizedState;if(null!==u)c=null!==u.dehydrated;else{var f=l.memoizedProps;c=void 0!==f.fallback&&(!0!==f.unstable_avoidThisFallback||!s)}}if(c){var p=l.updateQueue;if(null===p){var d=new Set;d.add(a),l.updateQueue=d}else p.add(a);if(0==(2&l.mode)){if(l.effectTag|=64,o.effectTag&=-2981,1===o.tag)if(null===o.alternate)o.tag=17;else{var h=gi(1073741823,null);h.tag=2,bi(o,h)}o.expirationTime=1073741823;break e}i=void 0,o=t;var m=n.pingCache;if(null===m?(m=n.pingCache=new Ts,i=new Set,m.set(a,i)):void 0===(i=m.get(a))&&(i=new Set,m.set(a,i)),!i.has(o)){i.add(o);var g=Ml.bind(null,n,a,o);a.then(g,g)}l.effectTag|=4096,l.expirationTime=t;break e}l=l.return}while(null!==l);i=Error((Q(o.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+J(o))}Ys!==Hs&&(Ys=Fs),i=hs(i,o),l=r;do{switch(l.tag){case 3:a=i,l.effectTag|=4096,l.expirationTime=t,Ai(l,Bs(l,a,t));break e;case 1:a=i;var y=l.type,b=l.stateNode;if(0==(64&l.effectTag)&&("function"==typeof y.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===al||!al.has(b)))){l.effectTag|=4096,l.expirationTime=t,Ai(l,Ss(l,a,t));break e}}l=l.return}while(null!==l)}Ws=Pl(Ws)}catch(e){t=e;continue}break}}function kl(){var e=Ps.current;return Ps.current=Pa,null===e?Pa:e}function Tl(e,t){e<$s&&2<e&&($s=e),null!==t&&e<Qs&&2<e&&(Qs=e,Js=t)}function Bl(e){e>Zs&&(Zs=e)}function Sl(){for(;null!==Ws;)Ws=Nl(Ws)}function Ol(){for(;null!==Ws&&!No();)Ws=Nl(Ws)}function Nl(e){var t=Os(e.alternate,e,Xs);return e.memoizedProps=e.pendingProps,null===t&&(t=Pl(e)),Ds.current=null,t}function Pl(e){Ws=e;do{var t=Ws.alternate;if(e=Ws.return,0==(2048&Ws.effectTag)){e:{var n=t,r=Xs,i=(t=Ws).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Co(t.type)&&wo();break;case 3:Vi(),_o(),(i=t.stateNode).pendingContext&&(i.context=i.pendingContext,i.pendingContext=null),(null===n||null===n.child)&&za(t)&&fs(t),ns(t);break;case 5:Xi(t),r=Hi(zi.current);var s=t.type;if(null!==n&&null!=t.stateNode)rs(n,t,s,i,r),n.ref!==t.ref&&(t.effectTag|=128);else if(i){var l=Hi(Fi.current);if(za(t)){var c=(i=t).stateNode;n=i.type;var u=i.memoizedProps,f=r;switch(c[cr]=i,c[ur]=u,s=void 0,r=c,n){case"iframe":case"object":case"embed":xn("load",r);break;case"video":case"audio":for(c=0;c<Ze.length;c++)xn(Ze[c],r);break;case"source":xn("error",r);break;case"img":case"image":case"link":xn("error",r),xn("load",r);break;case"form":xn("reset",r),xn("submit",r);break;case"details":xn("toggle",r);break;case"input":Te(r,u),xn("invalid",r),Hn(f,"onChange");break;case"select":r._wrapperState={wasMultiple:!!u.multiple},xn("invalid",r),Hn(f,"onChange");break;case"textarea":Re(r,u),xn("invalid",r),Hn(f,"onChange")}for(s in Mn(n,u),c=null,u)u.hasOwnProperty(s)&&(l=u[s],"children"===s?"string"==typeof l?r.textContent!==l&&(c=["children",l]):"number"==typeof l&&r.textContent!==""+l&&(c=["children",""+l]):d.hasOwnProperty(s)&&null!=l&&Hn(f,s));switch(n){case"input":Ee(r),Oe(r,u,!0);break;case"textarea":Ee(r),Ie(r);break;case"select":case"option":break;default:"function"==typeof u.onClick&&(r.onclick=Gn)}s=c,i.updateQueue=s,(i=null!==s)&&fs(t)}else{n=t,f=s,u=i,c=9===r.nodeType?r:r.ownerDocument,l===je.html&&(l=Ue(f)),l===je.html?"script"===f?((u=c.createElement("div")).innerHTML="<script><\/script>",c=u.removeChild(u.firstChild)):"string"==typeof u.is?c=c.createElement(f,{is:u.is}):(c=c.createElement(f),"select"===f&&(f=c,u.multiple?f.multiple=!0:u.size&&(f.size=u.size))):c=c.createElementNS(l,f),(u=c)[cr]=n,u[ur]=i,ts(u,t,!1,!1),t.stateNode=u;var p=r,h=zn(f=s,n=i);switch(f){case"iframe":case"object":case"embed":xn("load",u),r=n;break;case"video":case"audio":for(r=0;r<Ze.length;r++)xn(Ze[r],u);r=n;break;case"source":xn("error",u),r=n;break;case"img":case"image":case"link":xn("error",u),xn("load",u),r=n;break;case"form":xn("reset",u),xn("submit",u),r=n;break;case"details":xn("toggle",u),r=n;break;case"input":Te(u,n),r=ke(u,n),xn("invalid",u),Hn(p,"onChange");break;case"option":r=Pe(u,n);break;case"select":u._wrapperState={wasMultiple:!!n.multiple},r=o({},n,{value:void 0}),xn("invalid",u),Hn(p,"onChange");break;case"textarea":Re(u,n),r=Le(u,n),xn("invalid",u),Hn(p,"onChange");break;default:r=n}Mn(f,r),c=void 0,l=f;var m=u,g=r;for(c in g)if(g.hasOwnProperty(c)){var y=g[c];"style"===c?Un(m,y):"dangerouslySetInnerHTML"===c?null!=(y=y?y.__html:void 0)&&ze(m,y):"children"===c?"string"==typeof y?("textarea"!==l||""!==y)&&He(m,y):"number"==typeof y&&He(m,""+y):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(d.hasOwnProperty(c)?null!=y&&Hn(p,c):null!=y&&we(m,c,y,h))}switch(f){case"input":Ee(u),Oe(u,n,!1);break;case"textarea":Ee(u),Ie(u);break;case"option":null!=n.value&&u.setAttribute("value",""+Ce(n.value));break;case"select":(r=u).multiple=!!n.multiple,null!=(u=n.value)?De(r,!!n.multiple,u,!1):null!=n.defaultValue&&De(r,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof r.onClick&&(u.onclick=Gn)}(i=nr(s,i))&&fs(t)}null!==t.ref&&(t.effectTag|=128)}else if(null===t.stateNode)throw Error(a(166));break;case 6:if(n&&null!=t.stateNode)os(n,t,n.memoizedProps,i);else{if("string"!=typeof i&&null===t.stateNode)throw Error(a(166));r=Hi(zi.current),Hi(Fi.current),za(t)?(s=(i=t).stateNode,r=i.memoizedProps,s[cr]=i,(i=s.nodeValue!==r)&&fs(t)):(s=t,(i=(9===r.nodeType?r:r.ownerDocument).createTextNode(i))[cr]=s,t.stateNode=i)}break;case 11:break;case 13:if(ho(Yi),i=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=r;break e}i=null!==i,s=!1,null===n?void 0!==t.memoizedProps.fallback&&za(t):(s=null!==(r=n.memoizedState),i||null===r||null!==(r=n.child.sibling)&&(null!==(u=t.firstEffect)?(t.firstEffect=r,r.nextEffect=u):(t.firstEffect=t.lastEffect=r,r.nextEffect=null),r.effectTag=8)),i&&!s&&0!=(2&t.mode)&&(null===n&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Yi.current)?Ys===js&&(Ys=Ms):(Ys!==js&&Ys!==Ms||(Ys=zs),0!==Zs&&null!==Vs&&(tc(Vs,Xs),nc(Vs,Zs)))),(i||s)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:Vi(),ns(t);break;case 10:ci(t);break;case 9:case 14:break;case 17:Co(t.type)&&wo();break;case 19:if(ho(Yi),null===(i=t.memoizedState))break;if(s=0!=(64&t.effectTag),null===(u=i.rendering)){if(s)ps(i,!1);else if(Ys!==js||null!==n&&0!=(64&n.effectTag))for(n=t.child;null!==n;){if(null!==(u=Ki(n))){for(t.effectTag|=64,ps(i,!1),null!==(s=u.updateQueue)&&(t.updateQueue=s,t.effectTag|=4),null===i.lastEffect&&(t.firstEffect=null),t.lastEffect=i.lastEffect,i=r,s=t.child;null!==s;)n=i,(r=s).effectTag&=2,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null,null===(u=r.alternate)?(r.childExpirationTime=0,r.expirationTime=n,r.child=null,r.memoizedProps=null,r.memoizedState=null,r.updateQueue=null,r.dependencies=null):(r.childExpirationTime=u.childExpirationTime,r.expirationTime=u.expirationTime,r.child=u.child,r.memoizedProps=u.memoizedProps,r.memoizedState=u.memoizedState,r.updateQueue=u.updateQueue,n=u.dependencies,r.dependencies=null===n?null:{expirationTime:n.expirationTime,firstContext:n.firstContext,responders:n.responders}),s=s.sibling;mo(Yi,1&Yi.current|2),t=t.child;break e}n=n.sibling}}else{if(!s)if(null!==(n=Ki(u))){if(t.effectTag|=64,s=!0,null!==(r=n.updateQueue)&&(t.updateQueue=r,t.effectTag|=4),ps(i,!0),null===i.tail&&"hidden"===i.tailMode&&!u.alternate){null!==(t=t.lastEffect=i.lastEffect)&&(t.nextEffect=null);break}}else Wo()>i.tailExpiration&&1<r&&(t.effectTag|=64,s=!0,ps(i,!1),t.expirationTime=t.childExpirationTime=r-1);i.isBackwards?(u.sibling=t.child,t.child=u):(null!==(r=i.last)?r.sibling=u:t.child=u,i.last=u)}if(null!==i.tail){0===i.tailExpiration&&(i.tailExpiration=Wo()+500),r=i.tail,i.rendering=r,i.tail=r.sibling,i.lastEffect=t.lastEffect,r.sibling=null,i=Yi.current,mo(Yi,i=s?1&i|2:1&i),t=r;break e}break;case 20:case 21:break;default:throw Error(a(156,t.tag))}t=null}if(i=Ws,1===Xs||1!==i.childExpirationTime){for(s=0,r=i.child;null!==r;)(n=r.expirationTime)>s&&(s=n),(u=r.childExpirationTime)>s&&(s=u),r=r.sibling;i.childExpirationTime=s}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Ws.firstEffect),null!==Ws.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Ws.firstEffect),e.lastEffect=Ws.lastEffect),1<Ws.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Ws:e.firstEffect=Ws,e.lastEffect=Ws))}else{if(null!==(t=ds(Ws)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Ws.sibling))return t;Ws=e}while(null!==Ws);return Ys===js&&(Ys=Hs),null}function Dl(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function Ll(e){var t=Xo();return Ko(99,Rl.bind(null,e,t)),null}function Rl(e,t){do{Il()}while(null!==ll);if((Gs&(qs|Is))!==Ls)throw Error(a(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=Dl(n);if(e.firstPendingTime=o,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Vs&&(Ws=Vs=null,Xs=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var i=Gs;Gs|=Is,Ds.current=null,er=En;var s=Yn();if(Kn(s)){if("selectionStart"in s)var l={start:s.selectionStart,end:s.selectionEnd};else e:{var c=(l=(l=s.ownerDocument)&&l.defaultView||window).getSelection&&l.getSelection();if(c&&0!==c.rangeCount){l=c.anchorNode;var u=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{l.nodeType,f.nodeType}catch(e){l=null;break e}var p=0,d=-1,h=-1,m=0,g=0,y=s,b=null;t:for(;;){for(var A;y!==l||0!==u&&3!==y.nodeType||(d=p+u),y!==f||0!==c&&3!==y.nodeType||(h=p+c),3===y.nodeType&&(p+=y.nodeValue.length),null!==(A=y.firstChild);)b=y,y=A;for(;;){if(y===s)break t;if(b===l&&++m===u&&(d=p),b===f&&++g===c&&(h=p),null!==(A=y.nextSibling))break;b=(y=b).parentNode}y=A}l=-1===d||-1===h?null:{start:d,end:h}}else l=null}l=l||{start:0,end:0}}else l=null;tr={focusedElem:s,selectionRange:l},En=!1,rl=o;do{try{ql()}catch(e){if(null===rl)throw Error(a(330));Fl(rl,e),rl=rl.nextEffect}}while(null!==rl);rl=o;do{try{for(s=e,l=t;null!==rl;){var v=rl.effectTag;if(16&v&&He(rl.stateNode,""),128&v){var C=rl.alternate;if(null!==C){var w=C.ref;null!==w&&("function"==typeof w?w(null):w.current=null)}}switch(1038&v){case 2:_s(rl),rl.effectTag&=-3;break;case 6:_s(rl),rl.effectTag&=-3,xs(rl.alternate,rl);break;case 1024:rl.effectTag&=-1025;break;case 1028:rl.effectTag&=-1025,xs(rl.alternate,rl);break;case 4:xs(rl.alternate,rl);break;case 8:Es(s,u=rl,l),Cs(u)}rl=rl.nextEffect}}catch(e){if(null===rl)throw Error(a(330));Fl(rl,e),rl=rl.nextEffect}}while(null!==rl);if(w=tr,C=Yn(),v=w.focusedElem,l=w.selectionRange,C!==v&&v&&v.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(v.ownerDocument.documentElement,v)){null!==l&&Kn(v)&&(C=l.start,void 0===(w=l.end)&&(w=C),"selectionStart"in v?(v.selectionStart=C,v.selectionEnd=Math.min(w,v.value.length)):(w=(C=v.ownerDocument||document)&&C.defaultView||window).getSelection&&(w=w.getSelection(),u=v.textContent.length,s=Math.min(l.start,u),l=void 0===l.end?s:Math.min(l.end,u),!w.extend&&s>l&&(u=l,l=s,s=u),u=Xn(v,s),f=Xn(v,l),u&&f&&(1!==w.rangeCount||w.anchorNode!==u.node||w.anchorOffset!==u.offset||w.focusNode!==f.node||w.focusOffset!==f.offset)&&((C=C.createRange()).setStart(u.node,u.offset),w.removeAllRanges(),s>l?(w.addRange(C),w.extend(f.node,f.offset)):(C.setEnd(f.node,f.offset),w.addRange(C))))),C=[];for(w=v;w=w.parentNode;)1===w.nodeType&&C.push({element:w,left:w.scrollLeft,top:w.scrollTop});for("function"==typeof v.focus&&v.focus(),v=0;v<C.length;v++)(w=C[v]).element.scrollLeft=w.left,w.element.scrollTop=w.top}tr=null,En=!!er,er=null,e.current=n,rl=o;do{try{for(v=r;null!==rl;){var _=rl.effectTag;if(36&_){var E=rl.alternate;switch(w=v,(C=rl).tag){case 0:case 11:case 15:As(16,32,C);break;case 1:var x=C.stateNode;if(4&C.effectTag)if(null===E)x.componentDidMount();else{var k=C.elementType===C.type?E.memoizedProps:ni(C.type,E.memoizedProps);x.componentDidUpdate(k,E.memoizedState,x.__reactInternalSnapshotBeforeUpdate)}var T=C.updateQueue;null!==T&&_i(0,T,x);break;case 3:var B=C.updateQueue;if(null!==B){if(s=null,null!==C.child)switch(C.child.tag){case 5:s=C.child.stateNode;break;case 1:s=C.child.stateNode}_i(0,B,s)}break;case 5:var S=C.stateNode;null===E&&4&C.effectTag&&nr(C.type,C.memoizedProps)&&S.focus();break;case 6:case 4:case 12:break;case 13:if(null===C.memoizedState){var O=C.alternate;if(null!==O){var N=O.memoizedState;if(null!==N){var P=N.dehydrated;null!==P&&xt(P)}}}break;case 19:case 17:case 20:case 21:break;default:throw Error(a(163))}}if(128&_){C=void 0;var D=rl.ref;if(null!==D){var L=rl.stateNode;switch(rl.tag){case 5:C=L;break;default:C=L}"function"==typeof D?D(C):D.current=C}}rl=rl.nextEffect}}catch(e){if(null===rl)throw Error(a(330));Fl(rl,e),rl=rl.nextEffect}}while(null!==rl);rl=null,Mo(),Gs=i}else e.current=n;if(sl)sl=!1,ll=e,cl=t;else for(rl=o;null!==rl;)t=rl.nextEffect,rl.nextEffect=null,rl=t;if(0===(t=e.firstPendingTime)&&(al=null),1073741823===t?e===pl?fl++:(fl=0,pl=e):fl=0,"function"==typeof Hl&&Hl(n.stateNode,r),Al(e),ol)throw ol=!1,e=il,il=null,e;return(Gs&Rs)!==Ls?null:(Jo(),null)}function ql(){for(;null!==rl;){var e=rl.effectTag;0!=(256&e)&&bs(rl.alternate,rl),0==(512&e)||sl||(sl=!0,$o(97,(function(){return Il(),null}))),rl=rl.nextEffect}}function Il(){if(90!==cl){var e=97<cl?97:cl;return cl=90,Ko(e,jl)}}function jl(){if(null===ll)return!1;var e=ll;if(ll=null,(Gs&(qs|Is))!==Ls)throw Error(a(331));var t=Gs;for(Gs|=Is,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:As(128,0,n),As(0,64,n)}}catch(t){if(null===e)throw Error(a(330));Fl(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Gs=t,Jo(),!0}function Ul(e,t,n){bi(e,t=Bs(e,t=hs(n,t),1073741823)),null!==(e=yl(e,1073741823))&&Al(e)}function Fl(e,t){if(3===e.tag)Ul(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Ul(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===al||!al.has(r))){bi(n,e=Ss(n,e=hs(t,e),1073741823)),null!==(n=yl(n,1073741823))&&Al(n);break}}n=n.return}}function Ml(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Vs===e&&Xs===n?Ys===zs||Ys===Ms&&1073741823===$s&&Wo()-tl<nl?El(e,Xs):el=!0:ec(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,e.finishedExpirationTime===n&&(e.finishedExpirationTime=0,e.finishedWork=null),Al(e)))}function zl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=ml(t=hl(),e,null)),null!==(e=yl(e,t))&&Al(e)}Os=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||bo.current)Va=!0;else{if(r<n){switch(Va=!1,t.tag){case 3:es(t),Ha();break;case 5:if(Wi(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:Co(t.type)&&ko(t);break;case 4:Gi(t,t.stateNode.containerInfo);break;case 10:li(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?as(e,t,n):(mo(Yi,1&Yi.current),null!==(t=us(e,t,n))?t.sibling:null);mo(Yi,1&Yi.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return cs(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),mo(Yi,Yi.current),!r)return null}return us(e,t,n)}Va=!1}}else Va=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=vo(t,yo.current),fi(t,n),o=ha(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,ma(),Co(r)){var i=!0;ko(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var s=r.getDerivedStateFromProps;"function"==typeof s&&Ti(t,r,s,e),o.updater=Bi,t.stateNode=o,o._reactInternalFiber=t,Pi(t,r,e,n),t=Za(null,t,r,!0,i,n)}else t.tag=0,Wa(null,t,o,n),t=t.child;return t;case 16:if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,i=t.tag=function(e){if("function"==typeof e)return Xl(e)?1:0;if(null!=e){if((e=e.$$typeof)===G)return 11;if(e===X)return 14}return 2}(o),e=ni(o,e),i){case 0:t=Qa(null,t,o,e,n);break;case 1:t=Ja(null,t,o,e,n);break;case 11:t=Xa(null,t,o,e,n);break;case 14:t=Ya(null,t,o,ni(o.type,e),r,n);break;default:throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Qa(e,t,r,o=t.elementType===r?o:ni(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ja(e,t,r,o=t.elementType===r?o:ni(r,o),n);case 3:if(es(t),null===(r=t.updateQueue))throw Error(a(282));if(o=null!==(o=t.memoizedState)?o.element:null,wi(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o)Ha(),t=us(e,t,n);else{if((o=t.stateNode.hydrate)&&(qa=ar(t.stateNode.containerInfo.firstChild),Ra=t,o=Ia=!0),o)for(n=ji(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Wa(e,t,r,n),Ha();t=t.child}return t;case 5:return Wi(t),null===e&&Fa(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,s=o.children,rr(r,o)?s=null:null!==i&&rr(r,i)&&(t.effectTag|=16),$a(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Wa(e,t,s,n),t=t.child),t;case 6:return null===e&&Fa(t),null;case 13:return as(e,t,n);case 4:return Gi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ii(t,null,r,n):Wa(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Xa(e,t,r,o=t.elementType===r?o:ni(r,o),n);case 7:return Wa(e,t,t.pendingProps,n),t.child;case 8:case 12:return Wa(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,s=t.memoizedProps,li(t,i=o.value),null!==s){var l=s.value;if(0===(i=eo(l,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,i):1073741823))){if(s.children===o.children&&!bo.current){t=us(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.dependencies;if(null!==c){s=l.child;for(var u=c.firstContext;null!==u;){if(u.context===r&&0!=(u.observedBits&i)){1===l.tag&&((u=gi(n,null)).tag=2,bi(l,u)),l.expirationTime<n&&(l.expirationTime=n),null!==(u=l.alternate)&&u.expirationTime<n&&(u.expirationTime=n),ui(l.return,n),c.expirationTime<n&&(c.expirationTime=n);break}u=u.next}}else s=10===l.tag&&l.type===t.type?null:l.child;if(null!==s)s.return=l;else for(s=l;null!==s;){if(s===t){s=null;break}if(null!==(l=s.sibling)){l.return=s.return,s=l;break}s=s.return}l=s}}Wa(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,fi(t,n),r=r(o=pi(o,i.unstable_observedBits)),t.effectTag|=1,Wa(e,t,r,n),t.child;case 14:return i=ni(o=t.type,t.pendingProps),Ya(e,t,o,i=ni(o.type,i),r,n);case 15:return Ka(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:ni(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Co(r)?(e=!0,ko(t)):e=!1,fi(t,n),Oi(t,r,o),Pi(t,r,o,n),Za(null,t,r,!0,e,n);case 19:return cs(e,t,n)}throw Error(a(156,t.tag))};var Hl=null,Gl=null;function Vl(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Wl(e,t,n,r){return new Vl(e,t,n,r)}function Xl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Yl(e,t){var n=e.alternate;return null===n?((n=Wl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Kl(e,t,n,r,o,i){var s=2;if(r=e,"function"==typeof e)Xl(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case j:return $l(n.children,o,i,t);case H:s=8,o|=7;break;case U:s=8,o|=1;break;case F:return(e=Wl(12,n,t,8|o)).elementType=F,e.type=F,e.expirationTime=i,e;case V:return(e=Wl(13,n,t,o)).type=V,e.elementType=V,e.expirationTime=i,e;case W:return(e=Wl(19,n,t,o)).elementType=W,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case M:s=10;break e;case z:s=9;break e;case G:s=11;break e;case X:s=14;break e;case Y:s=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Wl(s,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function $l(e,t,n,r){return(e=Wl(7,e,r,t)).expirationTime=n,e}function Ql(e,t,n){return(e=Wl(6,e,null,t)).expirationTime=n,e}function Jl(e,t,n){return(t=Wl(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Zl(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function ec(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function tc(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function nc(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function rc(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function oc(e,t,n,r){var o=t.current,i=hl(),s=xi.suspense;i=ml(i,o,s);e:if(n){t:{if(et(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(Co(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var c=n.type;if(Co(c)){n=xo(n,c,l);break e}}n=l}else n=go;return null===t.context?t.context=n:t.pendingContext=n,(t=gi(i,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),bi(o,t),gl(o,i),i}function ic(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function ac(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function sc(e,t){ac(e,t),(e=e.alternate)&&ac(e,t)}function lc(e,t,n){var r=new Zl(e,t,n=null!=n&&!0===n.hydrate),o=Wl(3,null,null,2===t?7:1===t?3:0);r.current=o,o.stateNode=r,e[fr]=r.current,n&&0!==t&&function(e){var t=Ln(e);mt.forEach((function(n){Rn(n,e,t)})),gt.forEach((function(n){Rn(n,e,t)}))}(9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function cc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function uc(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var s=o;o=function(){var e=ic(a);s.call(e)}}oc(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new lc(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var l=o;o=function(){var e=ic(a);l.call(e)}}_l((function(){oc(t,a,e,o)}))}return ic(a)}function fc(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!cc(t))throw Error(a(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:I,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}lc.prototype.render=function(e,t){oc(e,this._internalRoot,null,void 0===t?null:t)},lc.prototype.unmount=function(e){var t=this._internalRoot,n=void 0===e?null:e,r=t.containerInfo;oc(null,t,null,(function(){r[fr]=null,null!==n&&n()}))},ot=function(e){if(13===e.tag){var t=ti(hl(),150,100);gl(e,t),sc(e,t)}},it=function(e){if(13===e.tag){hl();var t=ei++;gl(e,t),sc(e,t)}},at=function(e){if(13===e.tag){var t=hl();gl(e,t=ml(t,e,null)),sc(e,t)}},ee=function(e,t,n){switch(t){case"input":if(Se(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=mr(r);if(!o)throw Error(a(90));xe(r),Se(r,o)}}}break;case"textarea":qe(e,n);break;case"select":null!=(t=n.value)&&De(e,!!n.multiple,t,!1)}},ae=wl,se=function(e,t,n,r){var o=Gs;Gs|=4;try{return Ko(98,e.bind(null,t,n,r))}finally{(Gs=o)===Ls&&Jo()}},le=function(){(Gs&(1|qs|Is))===Ls&&(function(){if(null!==ul){var e=ul;ul=null,e.forEach((function(e,t){rc(t,e),Al(t)})),Jo()}}(),Il())},ce=function(e,t){var n=Gs;Gs|=2;try{return e(t)}finally{(Gs=n)===Ls&&Jo()}};var pc,dc,hc={createPortal:fc,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=rt(t))?null:e.stateNode},hydrate:function(e,t,n){if(!cc(t))throw Error(a(200));return uc(null,e,t,!0,n)},render:function(e,t,n){if(!cc(t))throw Error(a(200));return uc(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){if(!cc(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return uc(e,t,n,!1,r)},unmountComponentAtNode:function(e){if(!cc(e))throw Error(a(40));return!!e._reactRootContainer&&(_l((function(){uc(null,null,e,!1,(function(){e._reactRootContainer=null,e[fr]=null}))})),!0)},unstable_createPortal:function(){return fc.apply(void 0,arguments)},unstable_batchedUpdates:wl,flushSync:function(e,t){if((Gs&(qs|Is))!==Ls)throw Error(a(187));var n=Gs;Gs|=1;try{return Ko(99,e.bind(null,t))}finally{Gs=n,Jo()}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[dr,hr,mr,N.injectEventPluginsByName,p,Pt,function(e){T(e,Nt)},oe,ie,On,O,Il,{current:!1}]}};dc=(pc={findFiberByHostInstance:pr,bundleType:0,version:"16.12.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Hl=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Gl=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},pc,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:D.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=rt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return dc?dc(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}));var mc={default:hc},gc=mc&&hc||mc;e.exports=gc.default||gc},function(e,t,n){"use strict";e.exports=n(88)},function(e,t,n){"use strict";
/** @license React v0.18.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,i,a,s;if(Object.defineProperty(t,"__esModule",{value:!0}),"undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,c=null,u=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(u,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==l?setTimeout(r,0,e):(l=e,setTimeout(u,0))},o=function(e,t){c=setTimeout(e,t)},i=function(){clearTimeout(c)},a=function(){return!1},s=t.unstable_forceFrameRate=function(){}}else{var p=window.performance,d=window.Date,h=window.setTimeout,m=window.clearTimeout;if("undefined"!=typeof console){var g=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof g&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof p&&"function"==typeof p.now)t.unstable_now=function(){return p.now()};else{var y=d.now();t.unstable_now=function(){return d.now()-y}}var b=!1,A=null,v=-1,C=5,w=0;a=function(){return t.unstable_now()>=w},s=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):C=0<e?Math.floor(1e3/e):5};var _=new MessageChannel,E=_.port2;_.port1.onmessage=function(){if(null!==A){var e=t.unstable_now();w=e+C;try{A(!0,e)?E.postMessage(null):(b=!1,A=null)}catch(e){throw E.postMessage(null),e}}else b=!1},r=function(e){A=e,b||(b=!0,E.postMessage(null))},o=function(e,n){v=h((function(){e(t.unstable_now())}),n)},i=function(){m(v),v=-1}}function x(e,t){var n=e.length;e.push(t);e:for(;;){var r=Math.floor((n-1)/2),o=e[r];if(!(void 0!==o&&0<B(o,t)))break e;e[r]=t,e[n]=o,n=r}}function k(e){return void 0===(e=e[0])?null:e}function T(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],s=i+1,l=e[s];if(void 0!==a&&0>B(a,n))void 0!==l&&0>B(l,a)?(e[r]=l,e[s]=n,r=s):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==l&&0>B(l,n)))break e;e[r]=l,e[s]=n,r=s}}}return t}return null}function B(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var S=[],O=[],N=1,P=null,D=3,L=!1,R=!1,q=!1;function I(e){for(var t=k(O);null!==t;){if(null===t.callback)T(O);else{if(!(t.startTime<=e))break;T(O),t.sortIndex=t.expirationTime,x(S,t)}t=k(O)}}function j(e){if(q=!1,I(e),!R)if(null!==k(S))R=!0,r(U);else{var t=k(O);null!==t&&o(j,t.startTime-e)}}function U(e,n){R=!1,q&&(q=!1,i()),L=!0;var r=D;try{for(I(n),P=k(S);null!==P&&(!(P.expirationTime>n)||e&&!a());){var s=P.callback;if(null!==s){P.callback=null,D=P.priorityLevel;var l=s(P.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?P.callback=l:P===k(S)&&T(S),I(n)}else T(S);P=k(S)}if(null!==P)var c=!0;else{var u=k(O);null!==u&&o(j,u.startTime-n),c=!1}return c}finally{P=null,D=r,L=!1}}function F(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var M=s;t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=D;D=e;try{return t()}finally{D=n}},t.unstable_next=function(e){switch(D){case 1:case 2:case 3:var t=3;break;default:t=D}var n=D;D=t;try{return e()}finally{D=n}},t.unstable_scheduleCallback=function(e,n,a){var s=t.unstable_now();if("object"==typeof a&&null!==a){var l=a.delay;l="number"==typeof l&&0<l?s+l:s,a="number"==typeof a.timeout?a.timeout:F(e)}else a=F(e),l=s;return e={id:N++,callback:n,priorityLevel:e,startTime:l,expirationTime:a=l+a,sortIndex:-1},l>s?(e.sortIndex=l,x(O,e),null===k(S)&&e===k(O)&&(q?i():q=!0,o(j,l-s))):(e.sortIndex=a,x(S,e),R||L||(R=!0,r(U))),e},t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_wrapCallback=function(e){var t=D;return function(){var n=D;D=t;try{return e.apply(this,arguments)}finally{D=n}}},t.unstable_getCurrentPriorityLevel=function(){return D},t.unstable_shouldYield=function(){var e=t.unstable_now();I(e);var n=k(S);return n!==P&&null!==P&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<P.expirationTime||a()},t.unstable_requestPaint=M,t.unstable_continueExecution=function(){R||L||(R=!0,r(U))},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return k(S)},t.unstable_Profiling=null},function(e,t){function n(t){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?e.exports=n=function(e){return typeof e}:e.exports=n=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(t)}e.exports=n},function(e,t){function n(t,r){return e.exports=n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},n(t,r)}e.exports=n},function(e,t,n){"use strict";var r=n(92);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.11.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,s=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,u=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,p=r?Symbol.for("react.concurrent_mode"):60111,d=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,g=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,b=r?Symbol.for("react.fundamental"):60117,A=r?Symbol.for("react.responder"):60118,v=r?Symbol.for("react.scope"):60119;function C(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case p:case a:case l:case s:case h:return e;default:switch(e=e&&e.$$typeof){case u:case d:case c:return e;default:return t}}case y:case g:case i:return t}}}function w(e){return C(e)===p}t.typeOf=C,t.AsyncMode=f,t.ConcurrentMode=p,t.ContextConsumer=u,t.ContextProvider=c,t.Element=o,t.ForwardRef=d,t.Fragment=a,t.Lazy=y,t.Memo=g,t.Portal=i,t.Profiler=l,t.StrictMode=s,t.Suspense=h,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===p||e===l||e===s||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===g||e.$$typeof===c||e.$$typeof===u||e.$$typeof===d||e.$$typeof===b||e.$$typeof===A||e.$$typeof===v)},t.isAsyncMode=function(e){return w(e)||C(e)===f},t.isConcurrentMode=w,t.isContextConsumer=function(e){return C(e)===u},t.isContextProvider=function(e){return C(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return C(e)===d},t.isFragment=function(e){return C(e)===a},t.isLazy=function(e){return C(e)===y},t.isMemo=function(e){return C(e)===g},t.isPortal=function(e){return C(e)===i},t.isProfiler=function(e){return C(e)===l},t.isStrictMode=function(e){return C(e)===s},t.isSuspense=function(e){return C(e)===h}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){var r=n(96);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};n(15)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){var r=n(14),o=n(97),i=n(98),a=n(99);t=r(!0);var s=o(i),l=o(a);t.push([e.i,'@font-face{font-family:"spider-font";src:url('+s+") format(\"truetype\")}*{font-family:'Roboto'}.form-control:focus{box-shadow:0 0 0 0.05rem rgba(0,123,255,0.25)}.card{background-color:rgba(255,255,255,0.85)}.App{overflow:hidden;background:url("+l+") no-repeat center center fixed;background-size:cover}*::-webkit-scrollbar{width:.3rem}*::-webkit-scrollbar-track{-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,0.3)}*::-webkit-scrollbar-thumb{background-color:darkgrey;outline:1px solid slategrey}.input-group>.form-control,.input-group-text{padding:.1rem .5rem;font-size:.8rem}.bold{font-weight:bold}\n","",{version:3,sources:["/home/deep/Desktop/projects/crawlme/frontend/src/App.scss"],names:[],mappings:"AAAA,WACI,yBAA0B,CAC1B,8DAAyH,CAG7H,EACI,oBAAqB,CACxB,oBAIG,6CAAgD,CAEnD,MAGG,uCAA0C,CAC7C,KAGG,eAAgB,CAEhB,gFAAoF,CAIpF,qBAA8B,CACjC,qBAGG,WAAY,CACf,2BAGG,gDAAoD,CACvD,2BAGG,yBAA0B,CAC1B,2BAAqC,CACxC,6CAIG,mBAAsB,CACtB,eAAgB,CACnB,MAGG,gBAAiB",file:"App.scss",sourcesContent:['@font-face {\n    font-family: "spider-font";\n    src        : url(\'../public/fonts/spideraysfonts_the-amazing-spider-man/TheAmazingSpiderMan-MX1w.ttf\') format("truetype");\n}\n\n* {\n    font-family: \'Roboto\';\n}\n\n\n.form-control:focus {\n    box-shadow: 0 0 0 0.05rem rgba(0, 123, 255, .25);\n\n}\n\n.card {\n    background-color: rgba(255, 255, 255, .85);\n}\n\n.App {\n    overflow: hidden;\n\n    background             : url("../public/images/3.jpg") no-repeat center center fixed;\n    -webkit-background-size: cover;\n    -moz-background-size   : cover;\n    -o-background-size     : cover;\n    background-size        : cover;\n}\n\n*::-webkit-scrollbar {\n    width: .3rem;\n}\n\n*::-webkit-scrollbar-track {\n    -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\n}\n\n*::-webkit-scrollbar-thumb {\n    background-color: darkgrey;\n    outline         : 1px solid slategrey;\n}\n\n.input-group>.form-control,\n.input-group-text {\n    padding  : .1rem .5rem;\n    font-size: .8rem;\n}\n\n.bold {\n    font-weight: bold;\n}']}]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},function(e,t,n){"use strict";n.r(t),t.default=n.p+"40d7f0b239353ea75ba51ccc1b5b17ea.ttf"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"3.jpg"},function(e,t,n){var r=n(101);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};n(15)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=n(14)(!0)).push([e.i,".navbar-container #nav{padding:.5rem 2rem;border-bottom:.05rem solid white;background-color:#202020;display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-webkit-box-pack:justify;justify-content:space-between;max-height:56px}.navbar-container #nav li{display:-webkit-box;display:flex;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center}.navbar-container #nav .nav-link{padding:0  1rem}.navbar-container #nav a{color:white}.navbar-container #nav img{height:1.8rem}.navbar-container #nav .fa{margin-top:0}.navbar-container #nav .fa-sign-out{font-size:1.5rem}.navbar-container #nav .fa-sign-out:hover{color:#d9d9d9}.navbar-container #nav h4{color:white;font-weight:bold}#logo-desc{border-style:none;font-size:1.2rem;font-family:'spider-font'}.logo-blink{-webkit-animation:blinking 2s infinite;animation:blinking 2s infinite;-webkit-animation-iteration-count:1;animation-iteration-count:1}.logo-desc-blink{-webkit-animation:blinking2 2s infinite;animation:blinking2 2s infinite;-webkit-animation-iteration-count:1;animation-iteration-count:1}@-webkit-keyframes blinking{0%{background-color:#37EF50;border:2px solid #871924;padding:.2rem;border-radius:.2rem}100%{background-color:black;border:2px solid black;padding:.2rem;border-radius:.2rem}}@keyframes blinking{0%{background-color:#37EF50;border:2px solid #871924;padding:.2rem;border-radius:.2rem}100%{background-color:black;border:2px solid black;padding:.2rem;border-radius:.2rem}}@-webkit-keyframes blinking2{0%{color:#37EF50;border-bottom:.05rem solid #37EF50}100%{color:white;border-bottom:.05rem solid white}}@keyframes blinking2{0%{color:#37EF50;border-bottom:.05rem solid #37EF50}100%{color:white;border-bottom:.05rem solid white}}\n","",{version:3,sources:["/home/deep/Desktop/projects/crawlme/frontend/src/components/common/navbar/navbar.scss"],names:[],mappings:"AACA,uBAEQ,kBAA4B,CAC5B,gCAAoC,CACpC,wBAAyB,CACzB,mBAAsB,CAAtB,YAAsB,CACtB,6BAAqB,CAArB,4BAAqB,CAArB,kBAAqB,CACrB,wBAA+B,CAA/B,6BAA+B,CAC/B,eAAsB,CAR9B,0BAWY,mBAAqB,CAArB,YAAqB,CACrB,uBAAuB,CAAvB,sBAAuB,CACvB,wBAAiB,CAAjB,kBAAuB,CAbnC,iCAgBY,eAAiB,CAhB7B,yBAmBY,WAAY,CAnBxB,2BAuBY,aAAc,CAvB1B,2BA0BY,YAAc,CA1B1B,oCA6BY,gBAAiB,CA7B7B,0CAiCgB,aAAyB,CAjCzC,0BAsCY,WAAkB,CAClB,gBAAiB,CACpB,WAKL,iBAAkB,CAClB,gBAAoB,CACpB,yBAA0B,CAC7B,YAGG,sCAA+C,CAA/C,8BAA+C,CAC/C,mCAA2B,CAA3B,2BAA4B,CAC/B,iBAGG,uCAAgD,CAAhD,+BAAgD,CAChD,mCAA2B,CAA3B,2BAA4B,CAC/B,4BAGG,GACI,wBAAyB,CACzB,wBAAmC,CACnC,aAAuB,CACvB,mBAAuB,CAG3B,KACI,sBAAuB,CACvB,sBAAiC,CACjC,aAAuB,CACvB,mBAAuB,CAAA,CAd9B,oBAGG,GACI,wBAAyB,CACzB,wBAAmC,CACnC,aAAuB,CACvB,mBAAuB,CAG3B,KACI,sBAAuB,CACvB,sBAAiC,CACjC,aAAuB,CACvB,mBAAuB,CAAA,CAM/B,6BACI,GACI,aAAsB,CACtB,kCAAmC,CAGvC,KACI,WAAoB,CACpB,gCAAiC,CAAA,CARzC,qBACI,GACI,aAAsB,CACtB,kCAAmC,CAGvC,KACI,WAAoB,CACpB,gCAAiC,CAAA",file:"navbar.scss",sourcesContent:["\n.navbar-container{\n    #nav {\n        padding         : .5rem 2rem;\n        border-bottom   : .05rem solid white;\n        background-color: #202020;\n        display         : flex;\n        flex-direction  : row;\n        justify-content : space-between;\n        max-height      : 56px;\n    \n        li {\n            display        : flex;\n            justify-content: center;\n            align-items    : center;\n        }\n        .nav-link{\n            padding : 0  1rem;\n        }\n        a {\n            color: white;\n        }\n    \n        img {\n            height: 1.8rem;\n        }\n        .fa{\n            margin-top : 0;\n        }\n        .fa-sign-out {\n            font-size: 1.5rem;\n    \n            &:hover {\n    \n                color: rgb(217, 217, 217)\n            }\n        }\n        \n        h4 {\n            color      : white;\n            font-weight: bold;\n        }\n    }\n}\n\n#logo-desc {\n    border-style: none;\n    font-size   : 1.2rem;\n    font-family: 'spider-font';\n}\n\n.logo-blink {\n    animation                : blinking 2s infinite;\n    animation-iteration-count: 1;\n}\n\n.logo-desc-blink {\n    animation                : blinking2 2s infinite;\n    animation-iteration-count: 1;\n}\n\n@keyframes blinking {\n    0% {\n        background-color: #37EF50;\n        border          : 2px solid #871924;\n        padding         : .2rem;\n        border-radius   : .2rem;\n    }\n\n    100% {\n        background-color: black;\n        border          : 2px solid black;\n        padding         : .2rem;\n        border-radius   : .2rem;\n    }\n\n}\n\n\n@keyframes blinking2 {\n    0% {\n        color        : #37EF50;\n        border-bottom: .05rem solid #37EF50;\n    }\n\n    100% {\n        color        : white;\n        border-bottom: .05rem solid white;\n    }\n}"]}]),e.exports=t},function(e,t,n){var r=n(103);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};n(15)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=n(14)(!0)).push([e.i,".Toastify__toast-container{z-index:9999;-webkit-transform:translate3d(0, 0, 9999px);position:fixed;padding:4px;width:320px;box-sizing:border-box;color:#fff}.Toastify__toast-container--top-left{top:1em;left:1em}.Toastify__toast-container--top-center{top:1em;left:50%;margin-left:-160px}.Toastify__toast-container--top-right{top:1em;right:1em}.Toastify__toast-container--bottom-left{bottom:1em;left:1em}.Toastify__toast-container--bottom-center{bottom:1em;left:50%;margin-left:-160px}.Toastify__toast-container--bottom-right{bottom:1em;right:1em}@media only screen and (max-width: 480px){.Toastify__toast-container{width:100vw;padding:0;left:0;margin:0}.Toastify__toast-container--top-left,.Toastify__toast-container--top-center,.Toastify__toast-container--top-right{top:0}.Toastify__toast-container--bottom-left,.Toastify__toast-container--bottom-center,.Toastify__toast-container--bottom-right{bottom:0}.Toastify__toast-container--rtl{right:0;left:initial}}.Toastify__toast{position:relative;min-height:64px;box-sizing:border-box;margin-bottom:1rem;padding:8px;border-radius:1px;box-shadow:0 1px 10px 0 rgba(0,0,0,0.1),0 2px 15px 0 rgba(0,0,0,0.05);display:-webkit-box;display:flex;-webkit-box-pack:justify;justify-content:space-between;max-height:800px;overflow:hidden;font-family:sans-serif;cursor:pointer;direction:ltr}.Toastify__toast--rtl{direction:rtl}.Toastify__toast--default{background:#fff;color:#aaa}.Toastify__toast--info{background:#3498db}.Toastify__toast--success{background:#07bc0c}.Toastify__toast--warning{background:#f1c40f}.Toastify__toast--error{background:#e74c3c}.Toastify__toast-body{margin:auto 0;-webkit-box-flex:1;flex:1}@media only screen and (max-width: 480px){.Toastify__toast{margin-bottom:0}}.Toastify__close-button{color:#fff;font-weight:bold;font-size:14px;background:transparent;outline:none;border:none;padding:0;cursor:pointer;opacity:0.7;-webkit-transition:0.3s ease;transition:0.3s ease;align-self:flex-start}.Toastify__close-button--default{color:#000;opacity:0.3}.Toastify__close-button:hover,.Toastify__close-button:focus{opacity:1}@-webkit-keyframes Toastify__trackProgress{0%{-webkit-transform:scaleX(1);transform:scaleX(1)}100%{-webkit-transform:scaleX(0);transform:scaleX(0)}}@keyframes Toastify__trackProgress{0%{-webkit-transform:scaleX(1);transform:scaleX(1)}100%{-webkit-transform:scaleX(0);transform:scaleX(0)}}.Toastify__progress-bar{position:absolute;bottom:0;left:0;width:100%;height:5px;z-index:9999;opacity:0.7;background-color:rgba(255,255,255,0.7);-webkit-transform-origin:left;transform-origin:left}.Toastify__progress-bar--animated{-webkit-animation:Toastify__trackProgress linear 1 forwards;animation:Toastify__trackProgress linear 1 forwards}.Toastify__progress-bar--controlled{-webkit-transition:-webkit-transform .2s;transition:-webkit-transform .2s;transition:transform .2s;transition:transform .2s, -webkit-transform .2s}.Toastify__progress-bar--rtl{right:0;left:initial;-webkit-transform-origin:right;transform-origin:right}.Toastify__progress-bar--default{background:-webkit-gradient(linear, left top, right top, from(#4cd964), color-stop(#5ac8fa), color-stop(#007aff), color-stop(#34aadc), color-stop(#5856d6), to(#ff2d55));background:linear-gradient(to right, #4cd964, #5ac8fa, #007aff, #34aadc, #5856d6, #ff2d55)}@-webkit-keyframes Toastify__bounceInRight{from,60%,75%,90%,to{-webkit-animation-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1);animation-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1)}from{opacity:0;-webkit-transform:translate3d(3000px, 0, 0);transform:translate3d(3000px, 0, 0)}60%{opacity:1;-webkit-transform:translate3d(-25px, 0, 0);transform:translate3d(-25px, 0, 0)}75%{-webkit-transform:translate3d(10px, 0, 0);transform:translate3d(10px, 0, 0)}90%{-webkit-transform:translate3d(-5px, 0, 0);transform:translate3d(-5px, 0, 0)}to{-webkit-transform:none;transform:none}}@keyframes Toastify__bounceInRight{from,60%,75%,90%,to{-webkit-animation-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1);animation-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1)}from{opacity:0;-webkit-transform:translate3d(3000px, 0, 0);transform:translate3d(3000px, 0, 0)}60%{opacity:1;-webkit-transform:translate3d(-25px, 0, 0);transform:translate3d(-25px, 0, 0)}75%{-webkit-transform:translate3d(10px, 0, 0);transform:translate3d(10px, 0, 0)}90%{-webkit-transform:translate3d(-5px, 0, 0);transform:translate3d(-5px, 0, 0)}to{-webkit-transform:none;transform:none}}@-webkit-keyframes Toastify__bounceOutRight{20%{opacity:1;-webkit-transform:translate3d(-20px, 0, 0);transform:translate3d(-20px, 0, 0)}to{opacity:0;-webkit-transform:translate3d(2000px, 0, 0);transform:translate3d(2000px, 0, 0)}}@keyframes Toastify__bounceOutRight{20%{opacity:1;-webkit-transform:translate3d(-20px, 0, 0);transform:translate3d(-20px, 0, 0)}to{opacity:0;-webkit-transform:translate3d(2000px, 0, 0);transform:translate3d(2000px, 0, 0)}}@-webkit-keyframes Toastify__bounceInLeft{from,60%,75%,90%,to{-webkit-animation-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1);animation-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1)}0%{opacity:0;-webkit-transform:translate3d(-3000px, 0, 0);transform:translate3d(-3000px, 0, 0)}60%{opacity:1;-webkit-transform:translate3d(25px, 0, 0);transform:translate3d(25px, 0, 0)}75%{-webkit-transform:translate3d(-10px, 0, 0);transform:translate3d(-10px, 0, 0)}90%{-webkit-transform:translate3d(5px, 0, 0);transform:translate3d(5px, 0, 0)}to{-webkit-transform:none;transform:none}}@keyframes Toastify__bounceInLeft{from,60%,75%,90%,to{-webkit-animation-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1);animation-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1)}0%{opacity:0;-webkit-transform:translate3d(-3000px, 0, 0);transform:translate3d(-3000px, 0, 0)}60%{opacity:1;-webkit-transform:translate3d(25px, 0, 0);transform:translate3d(25px, 0, 0)}75%{-webkit-transform:translate3d(-10px, 0, 0);transform:translate3d(-10px, 0, 0)}90%{-webkit-transform:translate3d(5px, 0, 0);transform:translate3d(5px, 0, 0)}to{-webkit-transform:none;transform:none}}@-webkit-keyframes Toastify__bounceOutLeft{20%{opacity:1;-webkit-transform:translate3d(20px, 0, 0);transform:translate3d(20px, 0, 0)}to{opacity:0;-webkit-transform:translate3d(-2000px, 0, 0);transform:translate3d(-2000px, 0, 0)}}@keyframes Toastify__bounceOutLeft{20%{opacity:1;-webkit-transform:translate3d(20px, 0, 0);transform:translate3d(20px, 0, 0)}to{opacity:0;-webkit-transform:translate3d(-2000px, 0, 0);transform:translate3d(-2000px, 0, 0)}}@-webkit-keyframes Toastify__bounceInUp{from,60%,75%,90%,to{-webkit-animation-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1);animation-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1)}from{opacity:0;-webkit-transform:translate3d(0, 3000px, 0);transform:translate3d(0, 3000px, 0)}60%{opacity:1;-webkit-transform:translate3d(0, -20px, 0);transform:translate3d(0, -20px, 0)}75%{-webkit-transform:translate3d(0, 10px, 0);transform:translate3d(0, 10px, 0)}90%{-webkit-transform:translate3d(0, -5px, 0);transform:translate3d(0, -5px, 0)}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@keyframes Toastify__bounceInUp{from,60%,75%,90%,to{-webkit-animation-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1);animation-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1)}from{opacity:0;-webkit-transform:translate3d(0, 3000px, 0);transform:translate3d(0, 3000px, 0)}60%{opacity:1;-webkit-transform:translate3d(0, -20px, 0);transform:translate3d(0, -20px, 0)}75%{-webkit-transform:translate3d(0, 10px, 0);transform:translate3d(0, 10px, 0)}90%{-webkit-transform:translate3d(0, -5px, 0);transform:translate3d(0, -5px, 0)}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@-webkit-keyframes Toastify__bounceOutUp{20%{-webkit-transform:translate3d(0, -10px, 0);transform:translate3d(0, -10px, 0)}40%,45%{opacity:1;-webkit-transform:translate3d(0, 20px, 0);transform:translate3d(0, 20px, 0)}to{opacity:0;-webkit-transform:translate3d(0, -2000px, 0);transform:translate3d(0, -2000px, 0)}}@keyframes Toastify__bounceOutUp{20%{-webkit-transform:translate3d(0, -10px, 0);transform:translate3d(0, -10px, 0)}40%,45%{opacity:1;-webkit-transform:translate3d(0, 20px, 0);transform:translate3d(0, 20px, 0)}to{opacity:0;-webkit-transform:translate3d(0, -2000px, 0);transform:translate3d(0, -2000px, 0)}}@-webkit-keyframes Toastify__bounceInDown{from,60%,75%,90%,to{-webkit-animation-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1);animation-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1)}0%{opacity:0;-webkit-transform:translate3d(0, -3000px, 0);transform:translate3d(0, -3000px, 0)}60%{opacity:1;-webkit-transform:translate3d(0, 25px, 0);transform:translate3d(0, 25px, 0)}75%{-webkit-transform:translate3d(0, -10px, 0);transform:translate3d(0, -10px, 0)}90%{-webkit-transform:translate3d(0, 5px, 0);transform:translate3d(0, 5px, 0)}to{-webkit-transform:none;transform:none}}@keyframes Toastify__bounceInDown{from,60%,75%,90%,to{-webkit-animation-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1);animation-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1)}0%{opacity:0;-webkit-transform:translate3d(0, -3000px, 0);transform:translate3d(0, -3000px, 0)}60%{opacity:1;-webkit-transform:translate3d(0, 25px, 0);transform:translate3d(0, 25px, 0)}75%{-webkit-transform:translate3d(0, -10px, 0);transform:translate3d(0, -10px, 0)}90%{-webkit-transform:translate3d(0, 5px, 0);transform:translate3d(0, 5px, 0)}to{-webkit-transform:none;transform:none}}@-webkit-keyframes Toastify__bounceOutDown{20%{-webkit-transform:translate3d(0, 10px, 0);transform:translate3d(0, 10px, 0)}40%,45%{opacity:1;-webkit-transform:translate3d(0, -20px, 0);transform:translate3d(0, -20px, 0)}to{opacity:0;-webkit-transform:translate3d(0, 2000px, 0);transform:translate3d(0, 2000px, 0)}}@keyframes Toastify__bounceOutDown{20%{-webkit-transform:translate3d(0, 10px, 0);transform:translate3d(0, 10px, 0)}40%,45%{opacity:1;-webkit-transform:translate3d(0, -20px, 0);transform:translate3d(0, -20px, 0)}to{opacity:0;-webkit-transform:translate3d(0, 2000px, 0);transform:translate3d(0, 2000px, 0)}}.Toastify__bounce-enter--top-left,.Toastify__bounce-enter--bottom-left{-webkit-animation-name:Toastify__bounceInLeft;animation-name:Toastify__bounceInLeft}.Toastify__bounce-enter--top-right,.Toastify__bounce-enter--bottom-right{-webkit-animation-name:Toastify__bounceInRight;animation-name:Toastify__bounceInRight}.Toastify__bounce-enter--top-center{-webkit-animation-name:Toastify__bounceInDown;animation-name:Toastify__bounceInDown}.Toastify__bounce-enter--bottom-center{-webkit-animation-name:Toastify__bounceInUp;animation-name:Toastify__bounceInUp}.Toastify__bounce-exit--top-left,.Toastify__bounce-exit--bottom-left{-webkit-animation-name:Toastify__bounceOutLeft;animation-name:Toastify__bounceOutLeft}.Toastify__bounce-exit--top-right,.Toastify__bounce-exit--bottom-right{-webkit-animation-name:Toastify__bounceOutRight;animation-name:Toastify__bounceOutRight}.Toastify__bounce-exit--top-center{-webkit-animation-name:Toastify__bounceOutUp;animation-name:Toastify__bounceOutUp}.Toastify__bounce-exit--bottom-center{-webkit-animation-name:Toastify__bounceOutDown;animation-name:Toastify__bounceOutDown}@-webkit-keyframes Toastify__zoomIn{from{opacity:0;-webkit-transform:scale3d(0.3, 0.3, 0.3);transform:scale3d(0.3, 0.3, 0.3)}50%{opacity:1}}@keyframes Toastify__zoomIn{from{opacity:0;-webkit-transform:scale3d(0.3, 0.3, 0.3);transform:scale3d(0.3, 0.3, 0.3)}50%{opacity:1}}@-webkit-keyframes Toastify__zoomOut{from{opacity:1}50%{opacity:0;-webkit-transform:scale3d(0.3, 0.3, 0.3);transform:scale3d(0.3, 0.3, 0.3)}to{opacity:0}}@keyframes Toastify__zoomOut{from{opacity:1}50%{opacity:0;-webkit-transform:scale3d(0.3, 0.3, 0.3);transform:scale3d(0.3, 0.3, 0.3)}to{opacity:0}}.Toastify__zoom-enter{-webkit-animation-name:Toastify__zoomIn;animation-name:Toastify__zoomIn}.Toastify__zoom-exit{-webkit-animation-name:Toastify__zoomOut;animation-name:Toastify__zoomOut}@-webkit-keyframes Toastify__flipIn{from{-webkit-transform:perspective(400px) rotate3d(1, 0, 0, 90deg);transform:perspective(400px) rotate3d(1, 0, 0, 90deg);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in;opacity:0}40%{-webkit-transform:perspective(400px) rotate3d(1, 0, 0, -20deg);transform:perspective(400px) rotate3d(1, 0, 0, -20deg);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in}60%{-webkit-transform:perspective(400px) rotate3d(1, 0, 0, 10deg);transform:perspective(400px) rotate3d(1, 0, 0, 10deg);opacity:1}80%{-webkit-transform:perspective(400px) rotate3d(1, 0, 0, -5deg);transform:perspective(400px) rotate3d(1, 0, 0, -5deg)}to{-webkit-transform:perspective(400px);transform:perspective(400px)}}@keyframes Toastify__flipIn{from{-webkit-transform:perspective(400px) rotate3d(1, 0, 0, 90deg);transform:perspective(400px) rotate3d(1, 0, 0, 90deg);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in;opacity:0}40%{-webkit-transform:perspective(400px) rotate3d(1, 0, 0, -20deg);transform:perspective(400px) rotate3d(1, 0, 0, -20deg);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in}60%{-webkit-transform:perspective(400px) rotate3d(1, 0, 0, 10deg);transform:perspective(400px) rotate3d(1, 0, 0, 10deg);opacity:1}80%{-webkit-transform:perspective(400px) rotate3d(1, 0, 0, -5deg);transform:perspective(400px) rotate3d(1, 0, 0, -5deg)}to{-webkit-transform:perspective(400px);transform:perspective(400px)}}@-webkit-keyframes Toastify__flipOut{from{-webkit-transform:perspective(400px);transform:perspective(400px)}30%{-webkit-transform:perspective(400px) rotate3d(1, 0, 0, -20deg);transform:perspective(400px) rotate3d(1, 0, 0, -20deg);opacity:1}to{-webkit-transform:perspective(400px) rotate3d(1, 0, 0, 90deg);transform:perspective(400px) rotate3d(1, 0, 0, 90deg);opacity:0}}@keyframes Toastify__flipOut{from{-webkit-transform:perspective(400px);transform:perspective(400px)}30%{-webkit-transform:perspective(400px) rotate3d(1, 0, 0, -20deg);transform:perspective(400px) rotate3d(1, 0, 0, -20deg);opacity:1}to{-webkit-transform:perspective(400px) rotate3d(1, 0, 0, 90deg);transform:perspective(400px) rotate3d(1, 0, 0, 90deg);opacity:0}}.Toastify__flip-enter{-webkit-animation-name:Toastify__flipIn;animation-name:Toastify__flipIn}.Toastify__flip-exit{-webkit-animation-name:Toastify__flipOut;animation-name:Toastify__flipOut}@-webkit-keyframes Toastify__slideInRight{from{-webkit-transform:translate3d(110%, 0, 0);transform:translate3d(110%, 0, 0);visibility:visible}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@keyframes Toastify__slideInRight{from{-webkit-transform:translate3d(110%, 0, 0);transform:translate3d(110%, 0, 0);visibility:visible}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@-webkit-keyframes Toastify__slideInLeft{from{-webkit-transform:translate3d(-110%, 0, 0);transform:translate3d(-110%, 0, 0);visibility:visible}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@keyframes Toastify__slideInLeft{from{-webkit-transform:translate3d(-110%, 0, 0);transform:translate3d(-110%, 0, 0);visibility:visible}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@-webkit-keyframes Toastify__slideInUp{from{-webkit-transform:translate3d(0, 110%, 0);transform:translate3d(0, 110%, 0);visibility:visible}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@keyframes Toastify__slideInUp{from{-webkit-transform:translate3d(0, 110%, 0);transform:translate3d(0, 110%, 0);visibility:visible}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@-webkit-keyframes Toastify__slideInDown{from{-webkit-transform:translate3d(0, -110%, 0);transform:translate3d(0, -110%, 0);visibility:visible}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@keyframes Toastify__slideInDown{from{-webkit-transform:translate3d(0, -110%, 0);transform:translate3d(0, -110%, 0);visibility:visible}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@-webkit-keyframes Toastify__slideOutRight{from{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}to{visibility:hidden;-webkit-transform:translate3d(110%, 0, 0);transform:translate3d(110%, 0, 0)}}@keyframes Toastify__slideOutRight{from{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}to{visibility:hidden;-webkit-transform:translate3d(110%, 0, 0);transform:translate3d(110%, 0, 0)}}@-webkit-keyframes Toastify__slideOutLeft{from{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}to{visibility:hidden;-webkit-transform:translate3d(-110%, 0, 0);transform:translate3d(-110%, 0, 0)}}@keyframes Toastify__slideOutLeft{from{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}to{visibility:hidden;-webkit-transform:translate3d(-110%, 0, 0);transform:translate3d(-110%, 0, 0)}}@-webkit-keyframes Toastify__slideOutDown{from{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}to{visibility:hidden;-webkit-transform:translate3d(0, 500px, 0);transform:translate3d(0, 500px, 0)}}@keyframes Toastify__slideOutDown{from{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}to{visibility:hidden;-webkit-transform:translate3d(0, 500px, 0);transform:translate3d(0, 500px, 0)}}@-webkit-keyframes Toastify__slideOutUp{from{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}to{visibility:hidden;-webkit-transform:translate3d(0, -500px, 0);transform:translate3d(0, -500px, 0)}}@keyframes Toastify__slideOutUp{from{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}to{visibility:hidden;-webkit-transform:translate3d(0, -500px, 0);transform:translate3d(0, -500px, 0)}}.Toastify__slide-enter--top-left,.Toastify__slide-enter--bottom-left{-webkit-animation-name:Toastify__slideInLeft;animation-name:Toastify__slideInLeft}.Toastify__slide-enter--top-right,.Toastify__slide-enter--bottom-right{-webkit-animation-name:Toastify__slideInRight;animation-name:Toastify__slideInRight}.Toastify__slide-enter--top-center{-webkit-animation-name:Toastify__slideInDown;animation-name:Toastify__slideInDown}.Toastify__slide-enter--bottom-center{-webkit-animation-name:Toastify__slideInUp;animation-name:Toastify__slideInUp}.Toastify__slide-exit--top-left,.Toastify__slide-exit--bottom-left{-webkit-animation-name:Toastify__slideOutLeft;animation-name:Toastify__slideOutLeft}.Toastify__slide-exit--top-right,.Toastify__slide-exit--bottom-right{-webkit-animation-name:Toastify__slideOutRight;animation-name:Toastify__slideOutRight}.Toastify__slide-exit--top-center{-webkit-animation-name:Toastify__slideOutUp;animation-name:Toastify__slideOutUp}.Toastify__slide-exit--bottom-center{-webkit-animation-name:Toastify__slideOutDown;animation-name:Toastify__slideOutDown}\n","",{version:3,sources:["/home/deep/Desktop/projects/crawlme/frontend/node_modules/react-toastify/dist/ReactToastify.css"],names:[],mappings:"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",file:"ReactToastify.css",sourcesContent:[".Toastify__toast-container {\n  z-index: 9999;\n  -webkit-transform: translate3d(0, 0, 9999px);\n  position: fixed;\n  padding: 4px;\n  width: 320px;\n  box-sizing: border-box;\n  color: #fff; }\n  .Toastify__toast-container--top-left {\n    top: 1em;\n    left: 1em; }\n  .Toastify__toast-container--top-center {\n    top: 1em;\n    left: 50%;\n    margin-left: -160px; }\n  .Toastify__toast-container--top-right {\n    top: 1em;\n    right: 1em; }\n  .Toastify__toast-container--bottom-left {\n    bottom: 1em;\n    left: 1em; }\n  .Toastify__toast-container--bottom-center {\n    bottom: 1em;\n    left: 50%;\n    margin-left: -160px; }\n  .Toastify__toast-container--bottom-right {\n    bottom: 1em;\n    right: 1em; }\n\n@media only screen and (max-width: 480px) {\n  .Toastify__toast-container {\n    width: 100vw;\n    padding: 0;\n    left: 0;\n    margin: 0; }\n    .Toastify__toast-container--top-left, .Toastify__toast-container--top-center, .Toastify__toast-container--top-right {\n      top: 0; }\n    .Toastify__toast-container--bottom-left, .Toastify__toast-container--bottom-center, .Toastify__toast-container--bottom-right {\n      bottom: 0; }\n    .Toastify__toast-container--rtl {\n      right: 0;\n      left: initial; } }\n\n.Toastify__toast {\n  position: relative;\n  min-height: 64px;\n  box-sizing: border-box;\n  margin-bottom: 1rem;\n  padding: 8px;\n  border-radius: 1px;\n  box-shadow: 0 1px 10px 0 rgba(0, 0, 0, 0.1), 0 2px 15px 0 rgba(0, 0, 0, 0.05);\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-pack: justify;\n      justify-content: space-between;\n  max-height: 800px;\n  overflow: hidden;\n  font-family: sans-serif;\n  cursor: pointer;\n  direction: ltr; }\n  .Toastify__toast--rtl {\n    direction: rtl; }\n  .Toastify__toast--default {\n    background: #fff;\n    color: #aaa; }\n  .Toastify__toast--info {\n    background: #3498db; }\n  .Toastify__toast--success {\n    background: #07bc0c; }\n  .Toastify__toast--warning {\n    background: #f1c40f; }\n  .Toastify__toast--error {\n    background: #e74c3c; }\n  .Toastify__toast-body {\n    margin: auto 0;\n    -ms-flex: 1;\n        flex: 1; }\n\n@media only screen and (max-width: 480px) {\n  .Toastify__toast {\n    margin-bottom: 0; } }\n\n.Toastify__close-button {\n  color: #fff;\n  font-weight: bold;\n  font-size: 14px;\n  background: transparent;\n  outline: none;\n  border: none;\n  padding: 0;\n  cursor: pointer;\n  opacity: 0.7;\n  transition: 0.3s ease;\n  -ms-flex-item-align: start;\n      align-self: flex-start; }\n  .Toastify__close-button--default {\n    color: #000;\n    opacity: 0.3; }\n  .Toastify__close-button:hover, .Toastify__close-button:focus {\n    opacity: 1; }\n\n@keyframes Toastify__trackProgress {\n  0% {\n    transform: scaleX(1); }\n  100% {\n    transform: scaleX(0); } }\n\n.Toastify__progress-bar {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 5px;\n  z-index: 9999;\n  opacity: 0.7;\n  background-color: rgba(255, 255, 255, 0.7);\n  transform-origin: left; }\n  .Toastify__progress-bar--animated {\n    animation: Toastify__trackProgress linear 1 forwards; }\n  .Toastify__progress-bar--controlled {\n    transition: transform .2s; }\n  .Toastify__progress-bar--rtl {\n    right: 0;\n    left: initial;\n    transform-origin: right; }\n  .Toastify__progress-bar--default {\n    background: linear-gradient(to right, #4cd964, #5ac8fa, #007aff, #34aadc, #5856d6, #ff2d55); }\n\n@keyframes Toastify__bounceInRight {\n  from,\n  60%,\n  75%,\n  90%,\n  to {\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1); }\n  from {\n    opacity: 0;\n    transform: translate3d(3000px, 0, 0); }\n  60% {\n    opacity: 1;\n    transform: translate3d(-25px, 0, 0); }\n  75% {\n    transform: translate3d(10px, 0, 0); }\n  90% {\n    transform: translate3d(-5px, 0, 0); }\n  to {\n    transform: none; } }\n\n@keyframes Toastify__bounceOutRight {\n  20% {\n    opacity: 1;\n    transform: translate3d(-20px, 0, 0); }\n  to {\n    opacity: 0;\n    transform: translate3d(2000px, 0, 0); } }\n\n@keyframes Toastify__bounceInLeft {\n  from,\n  60%,\n  75%,\n  90%,\n  to {\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1); }\n  0% {\n    opacity: 0;\n    transform: translate3d(-3000px, 0, 0); }\n  60% {\n    opacity: 1;\n    transform: translate3d(25px, 0, 0); }\n  75% {\n    transform: translate3d(-10px, 0, 0); }\n  90% {\n    transform: translate3d(5px, 0, 0); }\n  to {\n    transform: none; } }\n\n@keyframes Toastify__bounceOutLeft {\n  20% {\n    opacity: 1;\n    transform: translate3d(20px, 0, 0); }\n  to {\n    opacity: 0;\n    transform: translate3d(-2000px, 0, 0); } }\n\n@keyframes Toastify__bounceInUp {\n  from,\n  60%,\n  75%,\n  90%,\n  to {\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1); }\n  from {\n    opacity: 0;\n    transform: translate3d(0, 3000px, 0); }\n  60% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0); }\n  75% {\n    transform: translate3d(0, 10px, 0); }\n  90% {\n    transform: translate3d(0, -5px, 0); }\n  to {\n    transform: translate3d(0, 0, 0); } }\n\n@keyframes Toastify__bounceOutUp {\n  20% {\n    transform: translate3d(0, -10px, 0); }\n  40%,\n  45% {\n    opacity: 1;\n    transform: translate3d(0, 20px, 0); }\n  to {\n    opacity: 0;\n    transform: translate3d(0, -2000px, 0); } }\n\n@keyframes Toastify__bounceInDown {\n  from,\n  60%,\n  75%,\n  90%,\n  to {\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1); }\n  0% {\n    opacity: 0;\n    transform: translate3d(0, -3000px, 0); }\n  60% {\n    opacity: 1;\n    transform: translate3d(0, 25px, 0); }\n  75% {\n    transform: translate3d(0, -10px, 0); }\n  90% {\n    transform: translate3d(0, 5px, 0); }\n  to {\n    transform: none; } }\n\n@keyframes Toastify__bounceOutDown {\n  20% {\n    transform: translate3d(0, 10px, 0); }\n  40%,\n  45% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0); }\n  to {\n    opacity: 0;\n    transform: translate3d(0, 2000px, 0); } }\n\n.Toastify__bounce-enter--top-left, .Toastify__bounce-enter--bottom-left {\n  animation-name: Toastify__bounceInLeft; }\n\n.Toastify__bounce-enter--top-right, .Toastify__bounce-enter--bottom-right {\n  animation-name: Toastify__bounceInRight; }\n\n.Toastify__bounce-enter--top-center {\n  animation-name: Toastify__bounceInDown; }\n\n.Toastify__bounce-enter--bottom-center {\n  animation-name: Toastify__bounceInUp; }\n\n.Toastify__bounce-exit--top-left, .Toastify__bounce-exit--bottom-left {\n  animation-name: Toastify__bounceOutLeft; }\n\n.Toastify__bounce-exit--top-right, .Toastify__bounce-exit--bottom-right {\n  animation-name: Toastify__bounceOutRight; }\n\n.Toastify__bounce-exit--top-center {\n  animation-name: Toastify__bounceOutUp; }\n\n.Toastify__bounce-exit--bottom-center {\n  animation-name: Toastify__bounceOutDown; }\n\n@keyframes Toastify__zoomIn {\n  from {\n    opacity: 0;\n    transform: scale3d(0.3, 0.3, 0.3); }\n  50% {\n    opacity: 1; } }\n\n@keyframes Toastify__zoomOut {\n  from {\n    opacity: 1; }\n  50% {\n    opacity: 0;\n    transform: scale3d(0.3, 0.3, 0.3); }\n  to {\n    opacity: 0; } }\n\n.Toastify__zoom-enter {\n  animation-name: Toastify__zoomIn; }\n\n.Toastify__zoom-exit {\n  animation-name: Toastify__zoomOut; }\n\n@keyframes Toastify__flipIn {\n  from {\n    transform: perspective(400px) rotate3d(1, 0, 0, 90deg);\n    animation-timing-function: ease-in;\n    opacity: 0; }\n  40% {\n    transform: perspective(400px) rotate3d(1, 0, 0, -20deg);\n    animation-timing-function: ease-in; }\n  60% {\n    transform: perspective(400px) rotate3d(1, 0, 0, 10deg);\n    opacity: 1; }\n  80% {\n    transform: perspective(400px) rotate3d(1, 0, 0, -5deg); }\n  to {\n    transform: perspective(400px); } }\n\n@keyframes Toastify__flipOut {\n  from {\n    transform: perspective(400px); }\n  30% {\n    transform: perspective(400px) rotate3d(1, 0, 0, -20deg);\n    opacity: 1; }\n  to {\n    transform: perspective(400px) rotate3d(1, 0, 0, 90deg);\n    opacity: 0; } }\n\n.Toastify__flip-enter {\n  animation-name: Toastify__flipIn; }\n\n.Toastify__flip-exit {\n  animation-name: Toastify__flipOut; }\n\n@keyframes Toastify__slideInRight {\n  from {\n    transform: translate3d(110%, 0, 0);\n    visibility: visible; }\n  to {\n    transform: translate3d(0, 0, 0); } }\n\n@keyframes Toastify__slideInLeft {\n  from {\n    transform: translate3d(-110%, 0, 0);\n    visibility: visible; }\n  to {\n    transform: translate3d(0, 0, 0); } }\n\n@keyframes Toastify__slideInUp {\n  from {\n    transform: translate3d(0, 110%, 0);\n    visibility: visible; }\n  to {\n    transform: translate3d(0, 0, 0); } }\n\n@keyframes Toastify__slideInDown {\n  from {\n    transform: translate3d(0, -110%, 0);\n    visibility: visible; }\n  to {\n    transform: translate3d(0, 0, 0); } }\n\n@keyframes Toastify__slideOutRight {\n  from {\n    transform: translate3d(0, 0, 0); }\n  to {\n    visibility: hidden;\n    transform: translate3d(110%, 0, 0); } }\n\n@keyframes Toastify__slideOutLeft {\n  from {\n    transform: translate3d(0, 0, 0); }\n  to {\n    visibility: hidden;\n    transform: translate3d(-110%, 0, 0); } }\n\n@keyframes Toastify__slideOutDown {\n  from {\n    transform: translate3d(0, 0, 0); }\n  to {\n    visibility: hidden;\n    transform: translate3d(0, 500px, 0); } }\n\n@keyframes Toastify__slideOutUp {\n  from {\n    transform: translate3d(0, 0, 0); }\n  to {\n    visibility: hidden;\n    transform: translate3d(0, -500px, 0); } }\n\n.Toastify__slide-enter--top-left, .Toastify__slide-enter--bottom-left {\n  animation-name: Toastify__slideInLeft; }\n\n.Toastify__slide-enter--top-right, .Toastify__slide-enter--bottom-right {\n  animation-name: Toastify__slideInRight; }\n\n.Toastify__slide-enter--top-center {\n  animation-name: Toastify__slideInDown; }\n\n.Toastify__slide-enter--bottom-center {\n  animation-name: Toastify__slideInUp; }\n\n.Toastify__slide-exit--top-left, .Toastify__slide-exit--bottom-left {\n  animation-name: Toastify__slideOutLeft; }\n\n.Toastify__slide-exit--top-right, .Toastify__slide-exit--bottom-right {\n  animation-name: Toastify__slideOutRight; }\n\n.Toastify__slide-exit--top-center {\n  animation-name: Toastify__slideOutUp; }\n\n.Toastify__slide-exit--bottom-center {\n  animation-name: Toastify__slideOutDown; }\n\n/*# sourceMappingURL=ReactToastify.css.map */"]}]),e.exports=t},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){var r=n(106);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};n(15)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=n(14)(!0)).push([e.i,".auth-wrapper{min-height:90vh;display:-webkit-box;display:flex;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:calc(100vh - 56px)}.auth-wrapper .auth-body{padding:4rem;background-color:rgba(40,40,40,0.92);color:white;font-weight:bold}.auth-wrapper .auth-body .auth-buttons{display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-webkit-box-pack:justify;justify-content:space-between;margin-top:2rem}\n","",{version:3,sources:["/home/deep/Desktop/projects/crawlme/frontend/src/components/auth/auth.scss"],names:[],mappings:"AAAA,cACI,eAAgB,CAEhB,mBAAa,CAAb,YAAa,CACb,uBAAuB,CAAvB,sBAAuB,CACvB,wBAAmB,CAAnB,kBAAmB,CACnB,yBAA0B,CAN9B,yBAQQ,YAAc,CACd,oCAAsC,CACtC,WAAa,CACb,gBAAiB,CAXzB,uCAaY,mBAAa,CAAb,YAAa,CACb,6BAAmB,CAAnB,4BAAmB,CAAnB,kBAAmB,CACnB,wBAA8B,CAA9B,6BAA8B,CAC9B,eAAiB",file:"auth.scss",sourcesContent:[".auth-wrapper{\n    min-height: 90vh;\n    // background-color: green;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: calc(100vh - 56px);\n    .auth-body{\n        padding : 4rem;\n        background-color: rgba(40, 40, 40,.92);\n        color : white;\n        font-weight: bold;\n        .auth-buttons{\n            display: flex;\n            flex-direction: row;\n            justify-content: space-between;\n            margin-top : 2rem;\n        }\n    }\n}"]}]),e.exports=t},function(e,t,n){var r=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag";function l(e,t,n,r){var o=t&&t.prototype instanceof m?t:m,i=Object.create(o.prototype),a=new T(r||[]);return i._invoke=function(e,t,n){var r=u;return function(o,i){if(r===p)throw new Error("Generator is already running");if(r===d){if("throw"===o)throw i;return S()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var s=E(a,n);if(s){if(s===h)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===u)throw r=d,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var l=c(e,t,n);if("normal"===l.type){if(r=n.done?d:f,l.arg===h)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r=d,n.method="throw",n.arg=l.arg)}}}(e,n,a),i}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=l;var u="suspendedStart",f="suspendedYield",p="executing",d="completed",h={};function m(){}function g(){}function y(){}var b={};b[i]=function(){return this};var A=Object.getPrototypeOf,v=A&&A(A(B([])));v&&v!==n&&r.call(v,i)&&(b=v);var C=y.prototype=m.prototype=Object.create(b);function w(e){["next","throw","return"].forEach((function(t){e[t]=function(e){return this._invoke(t,e)}}))}function _(e){var t;this._invoke=function(n,o){function i(){return new Promise((function(t,i){!function t(n,o,i,a){var s=c(e[n],e,o);if("throw"!==s.type){var l=s.arg,u=l.value;return u&&"object"==typeof u&&r.call(u,"__await")?Promise.resolve(u.__await).then((function(e){t("next",e,i,a)}),(function(e){t("throw",e,i,a)})):Promise.resolve(u).then((function(e){l.value=e,i(l)}),(function(e){return t("throw",e,i,a)}))}a(s.arg)}(n,o,t,i)}))}return t=t?t.then(i,i):i()}}function E(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,E(e,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=c(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,h;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,h):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function x(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function k(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function T(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(x,this),this.reset(!0)}function B(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,a=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return a.next=a}}return{next:S}}function S(){return{value:t,done:!0}}return g.prototype=C.constructor=y,y.constructor=g,y[s]=g.displayName="GeneratorFunction",e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,s in e||(e[s]="GeneratorFunction")),e.prototype=Object.create(C),e},e.awrap=function(e){return{__await:e}},w(_.prototype),_.prototype[a]=function(){return this},e.AsyncIterator=_,e.async=function(t,n,r,o){var i=new _(l(t,n,r,o));return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},w(C),C[s]="Generator",C[i]=function(){return this},C.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=B,T.prototype={constructor:T,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(k),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return s.type="throw",s.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var l=r.call(a,"catchLoc"),c=r.call(a,"finallyLoc");if(l&&c){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,h):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),k(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;k(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:B(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),h}},e}(e.exports);try{regeneratorRuntime=r}catch(e){Function("r","regeneratorRuntime = r")(r)}},function(e,t,n){e.exports=n(109)},function(e,t,n){"use strict";var r=n(12),o=n(44),i=n(111),a=n(50);function s(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var l=s(n(47));l.Axios=i,l.create=function(e){return s(a(l.defaults,e))},l.Cancel=n(51),l.CancelToken=n(123),l.isCancel=n(46),l.all=function(e){return Promise.all(e)},l.spread=n(124),e.exports=l,e.exports.default=l},function(e,t){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&null!=e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}},function(e,t,n){"use strict";var r=n(12),o=n(45),i=n(112),a=n(113),s=n(50);function l(e){this.defaults=e,this.interceptors={request:new i,response:new i}}l.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=s(this.defaults,e)).method=e.method?e.method.toLowerCase():"get";var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},l.prototype.getUri=function(e){return e=s(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){l.prototype[e]=function(t,n){return this.request(r.merge(n||{},{method:e,url:t}))}})),r.forEach(["post","put","patch"],(function(e){l.prototype[e]=function(t,n,o){return this.request(r.merge(o||{},{method:e,url:t,data:n}))}})),e.exports=l},function(e,t,n){"use strict";var r=n(12);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},function(e,t,n){"use strict";var r=n(12),o=n(114),i=n(46),a=n(47),s=n(121),l=n(122);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!s(e.url)&&(e.url=l(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return c(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(c(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(12);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t,n){"use strict";var r=n(12);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(49);e.exports=function(e,t,n){var o=n.config.validateStatus;!o||o(n.status)?e(n):t(r("Request failed with status code "+n.status,n.config,null,n.request,n))}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(12),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},function(e,t,n){"use strict";var r=n(12);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(12);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(o)&&s.push("path="+o),r.isString(i)&&s.push("domain="+i),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(51);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.default=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=n.selectLocationState,s=void 0===a?i:a,l=n.adjustUrlOnReplay,c=void 0===l||l;if(void 0===s(t.getState()))throw new Error("Expected the routing state to be available either as `state.routing` or as the custom expression you can specify as `selectLocationState` in the `syncHistoryWithStore()` options. Ensure you have added the `routerReducer` to your store's reducers via `combineReducers` or whatever method you use to isolate your reducers.");var u=void 0,f=void 0,p=void 0,d=void 0,h=void 0,m=function(e){return s(t.getState()).locationBeforeTransitions||(e?u:void 0)};if(u=m(),c){var g=function(){var t=m(!0);h!==t&&u!==t&&(f=!0,h=t,e.transitionTo(r({},t,{action:"PUSH"})),f=!1)};p=t.subscribe(g),g()}var y=function(e){f||(h=e,!u&&(u=e,m())||t.dispatch({type:o.LOCATION_CHANGE,payload:e}))};d=e.listen(y),e.getCurrentLocation&&y(e.getCurrentLocation());return r({},e,{listen:function(n){var r=m(!0),o=!1,i=t.subscribe((function(){var e=m(!0);e!==r&&(r=e,o||n(r))}));return e.getCurrentLocation||n(r),function(){o=!0,i()}},unsubscribe:function(){c&&p(),d()}})};var o=n(52),i=function(e){return e.routing}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return function(){return function(t){return function(n){if(n.type!==r.CALL_HISTORY_METHOD)return t(n);var o=n.payload,i=o.method,a=o.args;e[i].apply(e,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(a))}}}};var r=n(53)},function(e,t,n){var r=n(128);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};n(15)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=n(14)(!0)).push([e.i,".filter-wrapper{-webkit-box-flex:1;flex:1;padding:1rem;background-color:rgba(40,40,40,0.8);margin-right:1rem}.filter-wrapper i:hover{color:green;cursor:pointer}.filter-wrapper .filter-body header{color:white}.filter-wrapper .filter-body header p{font-weight:bold}.filter-wrapper .filter-body .filter-preview{margin-bottom:1rem}.filter-wrapper .filter-body .filter-preview button{padding:.05rem .5rem;font-size:.7rem;margin-right:.7rem}\n","",{version:3,sources:["/home/deep/Desktop/projects/crawlme/frontend/src/components/home/filter/filter.scss"],names:[],mappings:"AAAA,gBACI,kBAAO,CAAP,MAAO,CACP,YAAc,CACd,mCAAsC,CACtC,iBAAkB,CAJtB,wBAOQ,WAAa,CACb,cAAgB,CARxB,oCAeY,WAAa,CAfzB,sCAiBgB,gBAAiB,CAjBjC,6CAsBY,kBAAoB,CAtBhC,oDAwBgB,oBAAqB,CACrB,eAAgB,CAChB,kBAAoB",file:"filter.scss",sourcesContent:[".filter-wrapper{\n    flex: 1;\n    padding : 1rem;\n    background-color: rgba(40, 40, 40, .8);\n    margin-right: 1rem;\n\n    i:hover{\n        color : green;\n        cursor : pointer;\n    }\n    .filter-body{\n        .input-fields{\n            \n        }\n        header{\n            color : white;\n            p{\n                font-weight: bold;\n            }\n        }\n\n        .filter-preview{\n            margin-bottom : 1rem;\n            button{\n                padding: .05rem .5rem;\n                font-size: .7rem;\n                margin-right : .7rem;\n            }\n            \n        }\n    }\n}"]}]),e.exports=t},function(e,t,n){var r=n(54),o=n(27)("socket.io-client:url");e.exports=function(e,t){var n=e;t=t||"undefined"!=typeof location&&location,null==e&&(e=t.protocol+"//"+t.host);"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?t.protocol+e:t.host+e),/^(https?|wss?):\/\//.test(e)||(o("protocol-less url %s",e),e=void 0!==t?t.protocol+"//"+e:"https://"+e),o("parse %s",e),n=r(e));n.port||(/^(http|ws)$/.test(n.protocol)?n.port="80":/^(http|ws)s$/.test(n.protocol)&&(n.port="443"));n.path=n.path||"/";var i=-1!==n.host.indexOf(":")?"["+n.host+"]":n.host;return n.id=n.protocol+"://"+i+":"+n.port,n.href=n.protocol+"://"+i+(t&&t.port===n.port?"":":"+n.port),n}},function(e,t,n){e.exports=function(e){function t(e){let t=0;for(let n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return r.colors[Math.abs(t)%r.colors.length]}function r(e){let n;function a(...e){if(!a.enabled)return;const t=a,o=Number(new Date),i=o-(n||o);t.diff=i,t.prev=n,t.curr=o,n=o,e[0]=r.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let s=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,(n,o)=>{if("%%"===n)return n;s++;const i=r.formatters[o];if("function"==typeof i){const r=e[s];n=i.call(t,r),e.splice(s,1),s--}return n}),r.formatArgs.call(t,e),(t.log||r.log).apply(t,e)}return a.namespace=e,a.enabled=r.enabled(e),a.useColors=r.useColors(),a.color=t(e),a.destroy=o,a.extend=i,"function"==typeof r.init&&r.init(a),r.instances.push(a),a}function o(){const e=r.instances.indexOf(this);return-1!==e&&(r.instances.splice(e,1),!0)}function i(e,t){const n=r(this.namespace+(void 0===t?":":t)+e);return n.log=this.log,n}function a(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(e){if(e instanceof Error)return e.stack||e.message;return e},r.disable=function(){const e=[...r.names.map(a),...r.skips.map(a).map(e=>"-"+e)].join(",");return r.enable(""),e},r.enable=function(e){let t;r.save(e),r.names=[],r.skips=[];const n=("string"==typeof e?e:"").split(/[\s,]+/),o=n.length;for(t=0;t<o;t++)n[t]&&("-"===(e=n[t].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+e.substr(1)+"$")):r.names.push(new RegExp("^"+e+"$")));for(t=0;t<r.instances.length;t++){const e=r.instances[t];e.enabled=r.enabled(e.namespace)}},r.enabled=function(e){if("*"===e[e.length-1])return!0;let t,n;for(t=0,n=r.skips.length;t<n;t++)if(r.skips[t].test(e))return!1;for(t=0,n=r.names.length;t<n;t++)if(r.names[t].test(e))return!0;return!1},r.humanize=n(131),Object.keys(e).forEach(t=>{r[t]=e[t]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=t,r.enable(r.load()),r}},function(e,t){var n=1e3,r=60*n,o=60*r,i=24*o,a=7*i,s=365.25*i;function l(e,t,n,r){var o=t>=1.5*n;return Math.round(e/n)+" "+r+(o?"s":"")}e.exports=function(e,t){t=t||{};var c=typeof e;if("string"===c&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!t)return;var l=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return l*s;case"weeks":case"week":case"w":return l*a;case"days":case"day":case"d":return l*i;case"hours":case"hour":case"hrs":case"hr":case"h":return l*o;case"minutes":case"minute":case"mins":case"min":case"m":return l*r;case"seconds":case"second":case"secs":case"sec":case"s":return l*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return l;default:return}}(e);if("number"===c&&isFinite(e))return t.long?function(e){var t=Math.abs(e);if(t>=i)return l(e,t,i,"day");if(t>=o)return l(e,t,o,"hour");if(t>=r)return l(e,t,r,"minute");if(t>=n)return l(e,t,n,"second");return e+" ms"}(e):function(e){var t=Math.abs(e);if(t>=i)return Math.round(e/i)+"d";if(t>=o)return Math.round(e/o)+"h";if(t>=r)return Math.round(e/r)+"m";if(t>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){(function(r){function o(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG),e}(t=e.exports=n(133)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),!n)return;var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var o=0,i=0;e[0].replace(/%[a-zA-Z%]/g,(function(e){"%%"!==e&&(o++,"%c"===e&&(i=o))})),e.splice(i,0,r)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=o,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(o())}).call(this,n(21))},function(e,t,n){function r(e){var n;function r(){if(r.enabled){var e=r,o=+new Date,i=o-(n||o);e.diff=i,e.prev=n,e.curr=o,n=o;for(var a=new Array(arguments.length),s=0;s<a.length;s++)a[s]=arguments[s];a[0]=t.coerce(a[0]),"string"!=typeof a[0]&&a.unshift("%O");var l=0;a[0]=a[0].replace(/%([a-zA-Z%])/g,(function(n,r){if("%%"===n)return n;l++;var o=t.formatters[r];if("function"==typeof o){var i=a[l];n=o.call(e,i),a.splice(l,1),l--}return n})),t.formatArgs.call(e,a),(r.log||t.log||console.log.bind(console)).apply(e,a)}}return r.namespace=e,r.enabled=t.enabled(e),r.useColors=t.useColors(),r.color=function(e){var n,r=0;for(n in e)r=(r<<5)-r+e.charCodeAt(n),r|=0;return t.colors[Math.abs(r)%t.colors.length]}(e),r.destroy=o,"function"==typeof t.init&&t.init(r),t.instances.push(r),r}function o(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=r.debug=r.default=r).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var n;t.save(e),t.names=[],t.skips=[];var r=("string"==typeof e?e:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(n=0;n<t.instances.length;n++){var i=t.instances[n];i.enabled=t.enabled(i.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(134),t.instances=[],t.names=[],t.skips=[],t.formatters={}},function(e,t){var n=1e3,r=60*n,o=60*r,i=24*o,a=365.25*i;function s(e,t,n){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+n:Math.ceil(e/t)+" "+n+"s"}e.exports=function(e,t){t=t||{};var l,c=typeof e;if("string"===c&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var s=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return s*a;case"days":case"day":case"d":return s*i;case"hours":case"hour":case"hrs":case"hr":case"h":return s*o;case"minutes":case"minute":case"mins":case"min":case"m":return s*r;case"seconds":case"second":case"secs":case"sec":case"s":return s*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return s;default:return}}(e);if("number"===c&&!1===isNaN(e))return t.long?s(l=e,i,"day")||s(l,o,"hour")||s(l,r,"minute")||s(l,n,"second")||l+" ms":function(e){if(e>=i)return Math.round(e/i)+"d";if(e>=o)return Math.round(e/o)+"h";if(e>=r)return Math.round(e/r)+"m";if(e>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){function r(e){if(e)return function(e){for(var t in r.prototype)e[t]=r.prototype[t];return e}(e)}e.exports=r,r.prototype.on=r.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},r.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var o=0;o<r.length;o++)if((n=r[o])===t||n.fn===t){r.splice(o,1);break}return this},r.prototype.emit=function(e){this._callbacks=this._callbacks||{};var t=[].slice.call(arguments,1),n=this._callbacks["$"+e];if(n)for(var r=0,o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,t);return this},r.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},r.prototype.hasListeners=function(e){return!!this.listeners(e).length}},function(e,t,n){var r=n(55),o=n(56),i=Object.prototype.toString,a="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===i.call(Blob),s="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===i.call(File);t.deconstructPacket=function(e){var t=[],n=e.data,i=e;return i.data=function e(t,n){if(!t)return t;if(o(t)){var i={_placeholder:!0,num:n.length};return n.push(t),i}if(r(t)){for(var a=new Array(t.length),s=0;s<t.length;s++)a[s]=e(t[s],n);return a}if("object"==typeof t&&!(t instanceof Date)){a={};for(var l in t)a[l]=e(t[l],n);return a}return t}(n,t),i.attachments=t.length,{packet:i,buffers:t}},t.reconstructPacket=function(e,t){return e.data=function e(t,n){if(!t)return t;if(t&&t._placeholder)return n[t.num];if(r(t))for(var o=0;o<t.length;o++)t[o]=e(t[o],n);else if("object"==typeof t)for(var i in t)t[i]=e(t[i],n);return t}(e.data,t),e.attachments=void 0,e},t.removeBlobs=function(e,t){var n=0,i=e;!function e(l,c,u){if(!l)return l;if(a&&l instanceof Blob||s&&l instanceof File){n++;var f=new FileReader;f.onload=function(){u?u[c]=this.result:i=this.result,--n||t(i)},f.readAsArrayBuffer(l)}else if(r(l))for(var p=0;p<l.length;p++)e(l[p],p,l);else if("object"==typeof l&&!o(l))for(var d in l)e(l[d],d,l)}(i),n||t(i)}},function(e,t,n){"use strict";t.byteLength=function(e){var t=c(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){var t,n,r=c(e),a=r[0],s=r[1],l=new i(function(e,t,n){return 3*(t+n)/4-n}(0,a,s)),u=0,f=s>0?a-4:a;for(n=0;n<f;n+=4)t=o[e.charCodeAt(n)]<<18|o[e.charCodeAt(n+1)]<<12|o[e.charCodeAt(n+2)]<<6|o[e.charCodeAt(n+3)],l[u++]=t>>16&255,l[u++]=t>>8&255,l[u++]=255&t;2===s&&(t=o[e.charCodeAt(n)]<<2|o[e.charCodeAt(n+1)]>>4,l[u++]=255&t);1===s&&(t=o[e.charCodeAt(n)]<<10|o[e.charCodeAt(n+1)]<<4|o[e.charCodeAt(n+2)]>>2,l[u++]=t>>8&255,l[u++]=255&t);return l},t.fromByteArray=function(e){for(var t,n=e.length,o=n%3,i=[],a=0,s=n-o;a<s;a+=16383)i.push(u(e,a,a+16383>s?s:a+16383));1===o?(t=e[n-1],i.push(r[t>>2]+r[t<<4&63]+"==")):2===o&&(t=(e[n-2]<<8)+e[n-1],i.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return i.join("")};for(var r=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,l=a.length;s<l;++s)r[s]=a[s],o[a.charCodeAt(s)]=s;function c(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function u(e,t,n){for(var o,i,a=[],s=t;s<n;s+=3)o=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),a.push(r[(i=o)>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return a.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,n,r,o){var i,a,s=8*o-r-1,l=(1<<s)-1,c=l>>1,u=-7,f=n?o-1:0,p=n?-1:1,d=e[t+f];for(f+=p,i=d&(1<<-u)-1,d>>=-u,u+=s;u>0;i=256*i+e[t+f],f+=p,u-=8);for(a=i&(1<<-u)-1,i>>=-u,u+=r;u>0;a=256*a+e[t+f],f+=p,u-=8);if(0===i)i=1-c;else{if(i===l)return a?NaN:1/0*(d?-1:1);a+=Math.pow(2,r),i-=c}return(d?-1:1)*a*Math.pow(2,i-r)},t.write=function(e,t,n,r,o,i){var a,s,l,c=8*i-o-1,u=(1<<c)-1,f=u>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:i-1,h=r?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=u):(a=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-a))<1&&(a--,l*=2),(t+=a+f>=1?p/l:p*Math.pow(2,1-f))*l>=2&&(a++,l/=2),a+f>=u?(s=0,a=u):a+f>=1?(s=(t*l-1)*Math.pow(2,o),a+=f):(s=t*Math.pow(2,f-1)*Math.pow(2,o),a=0));o>=8;e[n+d]=255&s,d+=h,s/=256,o-=8);for(a=a<<o|s,c+=o;c>0;e[n+d]=255&a,d+=h,a/=256,c-=8);e[n+d-h]|=128*m}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t,n){e.exports=n(141),e.exports.parser=n(19)},function(e,t,n){var r=n(58),o=n(38),i=n(30)("engine.io-client:socket"),a=n(62),s=n(19),l=n(54),c=n(28);function u(e,t){if(!(this instanceof u))return new u(e,t);t=t||{},e&&"object"==typeof e&&(t=e,e=null),e?(e=l(e),t.hostname=e.host,t.secure="https"===e.protocol||"wss"===e.protocol,t.port=e.port,e.query&&(t.query=e.query)):t.host&&(t.hostname=l(t.host).host),this.secure=null!=t.secure?t.secure:"undefined"!=typeof location&&"https:"===location.protocol,t.hostname&&!t.port&&(t.port=this.secure?"443":"80"),this.agent=t.agent||!1,this.hostname=t.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=t.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.query=t.query||{},"string"==typeof this.query&&(this.query=c.decode(this.query)),this.upgrade=!1!==t.upgrade,this.path=(t.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!t.forceJSONP,this.jsonp=!1!==t.jsonp,this.forceBase64=!!t.forceBase64,this.enablesXDR=!!t.enablesXDR,this.withCredentials=!1!==t.withCredentials,this.timestampParam=t.timestampParam||"t",this.timestampRequests=t.timestampRequests,this.transports=t.transports||["polling","websocket"],this.transportOptions=t.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=t.policyPort||843,this.rememberUpgrade=t.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=t.onlyBinaryUpgrades,this.perMessageDeflate=!1!==t.perMessageDeflate&&(t.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=t.pfx||null,this.key=t.key||null,this.passphrase=t.passphrase||null,this.cert=t.cert||null,this.ca=t.ca||null,this.ciphers=t.ciphers||null,this.rejectUnauthorized=void 0===t.rejectUnauthorized||t.rejectUnauthorized,this.forceNode=!!t.forceNode,this.isReactNative="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase(),("undefined"==typeof self||this.isReactNative)&&(t.extraHeaders&&Object.keys(t.extraHeaders).length>0&&(this.extraHeaders=t.extraHeaders),t.localAddress&&(this.localAddress=t.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}e.exports=u,u.priorWebsocketSuccess=!1,o(u.prototype),u.protocol=s.protocol,u.Socket=u,u.Transport=n(37),u.transports=n(58),u.parser=n(19),u.prototype.createTransport=function(e){i('creating transport "%s"',e);var t=function(e){var t={};for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}(this.query);t.EIO=s.protocol,t.transport=e;var n=this.transportOptions[e]||{};return this.id&&(t.sid=this.id),new r[e]({query:t,socket:this,agent:n.agent||this.agent,hostname:n.hostname||this.hostname,port:n.port||this.port,secure:n.secure||this.secure,path:n.path||this.path,forceJSONP:n.forceJSONP||this.forceJSONP,jsonp:n.jsonp||this.jsonp,forceBase64:n.forceBase64||this.forceBase64,enablesXDR:n.enablesXDR||this.enablesXDR,withCredentials:n.withCredentials||this.withCredentials,timestampRequests:n.timestampRequests||this.timestampRequests,timestampParam:n.timestampParam||this.timestampParam,policyPort:n.policyPort||this.policyPort,pfx:n.pfx||this.pfx,key:n.key||this.key,passphrase:n.passphrase||this.passphrase,cert:n.cert||this.cert,ca:n.ca||this.ca,ciphers:n.ciphers||this.ciphers,rejectUnauthorized:n.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:n.perMessageDeflate||this.perMessageDeflate,extraHeaders:n.extraHeaders||this.extraHeaders,forceNode:n.forceNode||this.forceNode,localAddress:n.localAddress||this.localAddress,requestTimeout:n.requestTimeout||this.requestTimeout,protocols:n.protocols||void 0,isReactNative:this.isReactNative})},u.prototype.open=function(){var e;if(this.rememberUpgrade&&u.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length){var t=this;return void setTimeout((function(){t.emit("error","No transports available")}),0)}e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return this.transports.shift(),void this.open()}e.open(),this.setTransport(e)},u.prototype.setTransport=function(e){i("setting transport %s",e.name);var t=this;this.transport&&(i("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",(function(){t.onDrain()})).on("packet",(function(e){t.onPacket(e)})).on("error",(function(e){t.onError(e)})).on("close",(function(){t.onClose("transport close")}))},u.prototype.probe=function(e){i('probing transport "%s"',e);var t=this.createTransport(e,{probe:1}),n=!1,r=this;function o(){if(r.onlyBinaryUpgrades){var o=!this.supportsBinary&&r.transport.supportsBinary;n=n||o}n||(i('probe transport "%s" opened',e),t.send([{type:"ping",data:"probe"}]),t.once("packet",(function(o){if(!n)if("pong"===o.type&&"probe"===o.data){if(i('probe transport "%s" pong',e),r.upgrading=!0,r.emit("upgrading",t),!t)return;u.priorWebsocketSuccess="websocket"===t.name,i('pausing current transport "%s"',r.transport.name),r.transport.pause((function(){n||"closed"!==r.readyState&&(i("changing transport and sending upgrade packet"),p(),r.setTransport(t),t.send([{type:"upgrade"}]),r.emit("upgrade",t),t=null,r.upgrading=!1,r.flush())}))}else{i('probe transport "%s" failed',e);var a=new Error("probe error");a.transport=t.name,r.emit("upgradeError",a)}})))}function a(){n||(n=!0,p(),t.close(),t=null)}function s(n){var o=new Error("probe error: "+n);o.transport=t.name,a(),i('probe transport "%s" failed because of error: %s',e,n),r.emit("upgradeError",o)}function l(){s("transport closed")}function c(){s("socket closed")}function f(e){t&&e.name!==t.name&&(i('"%s" works - aborting "%s"',e.name,t.name),a())}function p(){t.removeListener("open",o),t.removeListener("error",s),t.removeListener("close",l),r.removeListener("close",c),r.removeListener("upgrading",f)}u.priorWebsocketSuccess=!1,t.once("open",o),t.once("error",s),t.once("close",l),this.once("close",c),this.once("upgrading",f),t.open()},u.prototype.onOpen=function(){if(i("socket open"),this.readyState="open",u.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){i("starting upgrade probes");for(var e=0,t=this.upgrades.length;e<t;e++)this.probe(this.upgrades[e])}},u.prototype.onPacket=function(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(i('socket receive: type "%s", data "%s"',e.type,e.data),this.emit("packet",e),this.emit("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emit("data",e.data),this.emit("message",e.data)}else i('packet received with socket readyState "%s"',this.readyState)},u.prototype.onHandshake=function(e){this.emit("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},u.prototype.onHeartbeat=function(e){clearTimeout(this.pingTimeoutTimer);var t=this;t.pingTimeoutTimer=setTimeout((function(){"closed"!==t.readyState&&t.onClose("ping timeout")}),e||t.pingInterval+t.pingTimeout)},u.prototype.setPing=function(){var e=this;clearTimeout(e.pingIntervalTimer),e.pingIntervalTimer=setTimeout((function(){i("writing ping packet - expecting pong within %sms",e.pingTimeout),e.ping(),e.onHeartbeat(e.pingTimeout)}),e.pingInterval)},u.prototype.ping=function(){var e=this;this.sendPacket("ping",(function(){e.emit("ping")}))},u.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},u.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(i("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},u.prototype.write=u.prototype.send=function(e,t,n){return this.sendPacket("message",e,t,n),this},u.prototype.sendPacket=function(e,t,n,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof n&&(r=n,n=null),"closing"!==this.readyState&&"closed"!==this.readyState){(n=n||{}).compress=!1!==n.compress;var o={type:e,data:t,options:n};this.emit("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}},u.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var e=this;this.writeBuffer.length?this.once("drain",(function(){this.upgrading?r():t()})):this.upgrading?r():t()}function t(){e.onClose("forced close"),i("socket closing - telling transport to close"),e.transport.close()}function n(){e.removeListener("upgrade",n),e.removeListener("upgradeError",n),t()}function r(){e.once("upgrade",n),e.once("upgradeError",n)}return this},u.prototype.onError=function(e){i("socket error %j",e),u.priorWebsocketSuccess=!1,this.emit("error",e),this.onClose("transport error",e)},u.prototype.onClose=function(e,t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){i('socket close with reason: "%s"',e);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",e,t),this.writeBuffer=[],this.prevBufferLen=0}},u.prototype.filterUpgrades=function(e){for(var t=[],n=0,r=e.length;n<r;n++)~a(this.transports,e[n])&&t.push(e[n]);return t}},function(e,t){try{e.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){e.exports=!1}},function(e,t,n){var r=n(36),o=n(59),i=n(38),a=n(29),s=n(30)("engine.io-client:polling-xhr");function l(){}function c(e){if(o.call(this,e),this.requestTimeout=e.requestTimeout,this.extraHeaders=e.extraHeaders,"undefined"!=typeof location){var t="https:"===location.protocol,n=location.port;n||(n=t?443:80),this.xd="undefined"!=typeof location&&e.hostname!==location.hostname||n!==e.port,this.xs=e.secure!==t}}function u(e){this.method=e.method||"GET",this.uri=e.uri,this.xd=!!e.xd,this.xs=!!e.xs,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.agent=e.agent,this.isBinary=e.isBinary,this.supportsBinary=e.supportsBinary,this.enablesXDR=e.enablesXDR,this.withCredentials=e.withCredentials,this.requestTimeout=e.requestTimeout,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.extraHeaders=e.extraHeaders,this.create()}if(e.exports=c,e.exports.Request=u,a(c,o),c.prototype.supportsBinary=!0,c.prototype.request=function(e){return(e=e||{}).uri=this.uri(),e.xd=this.xd,e.xs=this.xs,e.agent=this.agent||!1,e.supportsBinary=this.supportsBinary,e.enablesXDR=this.enablesXDR,e.withCredentials=this.withCredentials,e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized,e.requestTimeout=this.requestTimeout,e.extraHeaders=this.extraHeaders,new u(e)},c.prototype.doWrite=function(e,t){var n="string"!=typeof e&&void 0!==e,r=this.request({method:"POST",data:e,isBinary:n}),o=this;r.on("success",t),r.on("error",(function(e){o.onError("xhr post error",e)})),this.sendXhr=r},c.prototype.doPoll=function(){s("xhr poll");var e=this.request(),t=this;e.on("data",(function(e){t.onData(e)})),e.on("error",(function(e){t.onError("xhr poll error",e)})),this.pollXhr=e},i(u.prototype),u.prototype.create=function(){var e={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized;var t=this.xhr=new r(e),n=this;try{s("xhr open %s: %s",this.method,this.uri),t.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var o in t.setDisableHeaderCheck&&t.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(o)&&t.setRequestHeader(o,this.extraHeaders[o])}catch(e){}if("POST"===this.method)try{this.isBinary?t.setRequestHeader("Content-type","application/octet-stream"):t.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{t.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in t&&(t.withCredentials=this.withCredentials),this.requestTimeout&&(t.timeout=this.requestTimeout),this.hasXDR()?(t.onload=function(){n.onLoad()},t.onerror=function(){n.onError(t.responseText)}):t.onreadystatechange=function(){if(2===t.readyState)try{var e=t.getResponseHeader("Content-Type");(n.supportsBinary&&"application/octet-stream"===e||"application/octet-stream; charset=UTF-8"===e)&&(t.responseType="arraybuffer")}catch(e){}4===t.readyState&&(200===t.status||1223===t.status?n.onLoad():setTimeout((function(){n.onError("number"==typeof t.status?t.status:0)}),0))},s("xhr data %s",this.data),t.send(this.data)}catch(e){return void setTimeout((function(){n.onError(e)}),0)}"undefined"!=typeof document&&(this.index=u.requestsCount++,u.requests[this.index]=this)},u.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},u.prototype.onData=function(e){this.emit("data",e),this.onSuccess()},u.prototype.onError=function(e){this.emit("error",e),this.cleanup(!0)},u.prototype.cleanup=function(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=l:this.xhr.onreadystatechange=l,e)try{this.xhr.abort()}catch(e){}"undefined"!=typeof document&&delete u.requests[this.index],this.xhr=null}},u.prototype.onLoad=function(){var e;try{var t;try{t=this.xhr.getResponseHeader("Content-Type")}catch(e){}e=("application/octet-stream"===t||"application/octet-stream; charset=UTF-8"===t)&&this.xhr.response||this.xhr.responseText}catch(e){this.onError(e)}null!=e&&this.onData(e)},u.prototype.hasXDR=function(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR},u.prototype.abort=function(){this.cleanup()},u.requestsCount=0,u.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",p);else if("function"==typeof addEventListener){var f="onpagehide"in self?"pagehide":"unload";addEventListener(f,p,!1)}function p(){for(var e in u.requests)u.requests.hasOwnProperty(e)&&u.requests[e].abort()}},function(e,t){e.exports=Object.keys||function(e){var t=[],n=Object.prototype.hasOwnProperty;for(var r in e)n.call(e,r)&&t.push(r);return t}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){e.exports=function(e,t,n){var r=e.byteLength;if(t=t||0,n=n||r,e.slice)return e.slice(t,n);if(t<0&&(t+=r),n<0&&(n+=r),n>r&&(n=r),t>=r||t>=n||0===r)return new ArrayBuffer(0);for(var o=new Uint8Array(e),i=new Uint8Array(n-t),a=t,s=0;a<n;a++,s++)i[s]=o[a];return i.buffer}},function(e,t){function n(){}e.exports=function(e,t,r){var o=!1;return r=r||n,i.count=e,0===e?t():i;function i(e,n){if(i.count<=0)throw new Error("after called too many times");--i.count,e?(o=!0,t(e),t=r):0!==i.count||o||t(null,n)}}},function(e,t){
/*! https://mths.be/utf8js v2.1.2 by @mathias */
var n,r,o,i=String.fromCharCode;function a(e){for(var t,n,r=[],o=0,i=e.length;o<i;)(t=e.charCodeAt(o++))>=55296&&t<=56319&&o<i?56320==(64512&(n=e.charCodeAt(o++)))?r.push(((1023&t)<<10)+(1023&n)+65536):(r.push(t),o--):r.push(t);return r}function s(e,t){if(e>=55296&&e<=57343){if(t)throw Error("Lone surrogate U+"+e.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function l(e,t){return i(e>>t&63|128)}function c(e,t){if(0==(4294967168&e))return i(e);var n="";return 0==(4294965248&e)?n=i(e>>6&31|192):0==(4294901760&e)?(s(e,t)||(e=65533),n=i(e>>12&15|224),n+=l(e,6)):0==(4292870144&e)&&(n=i(e>>18&7|240),n+=l(e,12),n+=l(e,6)),n+=i(63&e|128)}function u(){if(o>=r)throw Error("Invalid byte index");var e=255&n[o];if(o++,128==(192&e))return 63&e;throw Error("Invalid continuation byte")}function f(e){var t,i;if(o>r)throw Error("Invalid byte index");if(o==r)return!1;if(t=255&n[o],o++,0==(128&t))return t;if(192==(224&t)){if((i=(31&t)<<6|u())>=128)return i;throw Error("Invalid continuation byte")}if(224==(240&t)){if((i=(15&t)<<12|u()<<6|u())>=2048)return s(i,e)?i:65533;throw Error("Invalid continuation byte")}if(240==(248&t)&&(i=(7&t)<<18|u()<<12|u()<<6|u())>=65536&&i<=1114111)return i;throw Error("Invalid UTF-8 detected")}e.exports={version:"2.1.2",encode:function(e,t){for(var n=!1!==(t=t||{}).strict,r=a(e),o=r.length,i=-1,s="";++i<o;)s+=c(r[i],n);return s},decode:function(e,t){var s=!1!==(t=t||{}).strict;n=a(e),r=n.length,o=0;for(var l,c=[];!1!==(l=f(s));)c.push(l);return function(e){for(var t,n=e.length,r=-1,o="";++r<n;)(t=e[r])>65535&&(o+=i((t-=65536)>>>10&1023|55296),t=56320|1023&t),o+=i(t);return o}(c)}}},function(e,t){!function(){"use strict";for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=new Uint8Array(256),r=0;r<e.length;r++)n[e.charCodeAt(r)]=r;t.encode=function(t){var n,r=new Uint8Array(t),o=r.length,i="";for(n=0;n<o;n+=3)i+=e[r[n]>>2],i+=e[(3&r[n])<<4|r[n+1]>>4],i+=e[(15&r[n+1])<<2|r[n+2]>>6],i+=e[63&r[n+2]];return o%3==2?i=i.substring(0,i.length-1)+"=":o%3==1&&(i=i.substring(0,i.length-2)+"=="),i},t.decode=function(e){var t,r,o,i,a,s=.75*e.length,l=e.length,c=0;"="===e[e.length-1]&&(s--,"="===e[e.length-2]&&s--);var u=new ArrayBuffer(s),f=new Uint8Array(u);for(t=0;t<l;t+=4)r=n[e.charCodeAt(t)],o=n[e.charCodeAt(t+1)],i=n[e.charCodeAt(t+2)],a=n[e.charCodeAt(t+3)],f[c++]=r<<2|o>>4,f[c++]=(15&o)<<4|i>>2,f[c++]=(3&i)<<6|63&a;return u}}()},function(e,t){var n=void 0!==n?n:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder&&MozBlobBuilder,r=function(){try{return 2===new Blob(["hi"]).size}catch(e){return!1}}(),o=r&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(e){return!1}}(),i=n&&n.prototype.append&&n.prototype.getBlob;function a(e){return e.map((function(e){if(e.buffer instanceof ArrayBuffer){var t=e.buffer;if(e.byteLength!==t.byteLength){var n=new Uint8Array(e.byteLength);n.set(new Uint8Array(t,e.byteOffset,e.byteLength)),t=n.buffer}return t}return e}))}function s(e,t){t=t||{};var r=new n;return a(e).forEach((function(e){r.append(e)})),t.type?r.getBlob(t.type):r.getBlob()}function l(e,t){return new Blob(a(e),t||{})}"undefined"!=typeof Blob&&(s.prototype=Blob.prototype,l.prototype=Blob.prototype),e.exports=r?o?Blob:l:i?s:void 0},function(e,t,n){e.exports=function(e){function t(e){let t=0;for(let n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return r.colors[Math.abs(t)%r.colors.length]}function r(e){let n;function a(...e){if(!a.enabled)return;const t=a,o=Number(new Date),i=o-(n||o);t.diff=i,t.prev=n,t.curr=o,n=o,e[0]=r.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let s=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,(n,o)=>{if("%%"===n)return n;s++;const i=r.formatters[o];if("function"==typeof i){const r=e[s];n=i.call(t,r),e.splice(s,1),s--}return n}),r.formatArgs.call(t,e),(t.log||r.log).apply(t,e)}return a.namespace=e,a.enabled=r.enabled(e),a.useColors=r.useColors(),a.color=t(e),a.destroy=o,a.extend=i,"function"==typeof r.init&&r.init(a),r.instances.push(a),a}function o(){const e=r.instances.indexOf(this);return-1!==e&&(r.instances.splice(e,1),!0)}function i(e,t){const n=r(this.namespace+(void 0===t?":":t)+e);return n.log=this.log,n}function a(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(e){if(e instanceof Error)return e.stack||e.message;return e},r.disable=function(){const e=[...r.names.map(a),...r.skips.map(a).map(e=>"-"+e)].join(",");return r.enable(""),e},r.enable=function(e){let t;r.save(e),r.names=[],r.skips=[];const n=("string"==typeof e?e:"").split(/[\s,]+/),o=n.length;for(t=0;t<o;t++)n[t]&&("-"===(e=n[t].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+e.substr(1)+"$")):r.names.push(new RegExp("^"+e+"$")));for(t=0;t<r.instances.length;t++){const e=r.instances[t];e.enabled=r.enabled(e.namespace)}},r.enabled=function(e){if("*"===e[e.length-1])return!0;let t,n;for(t=0,n=r.skips.length;t<n;t++)if(r.skips[t].test(e))return!1;for(t=0,n=r.names.length;t<n;t++)if(r.names[t].test(e))return!0;return!1},r.humanize=n(152),Object.keys(e).forEach(t=>{r[t]=e[t]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=t,r.enable(r.load()),r}},function(e,t){var n=1e3,r=60*n,o=60*r,i=24*o,a=7*i,s=365.25*i;function l(e,t,n,r){var o=t>=1.5*n;return Math.round(e/n)+" "+r+(o?"s":"")}e.exports=function(e,t){t=t||{};var c=typeof e;if("string"===c&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!t)return;var l=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return l*s;case"weeks":case"week":case"w":return l*a;case"days":case"day":case"d":return l*i;case"hours":case"hour":case"hrs":case"hr":case"h":return l*o;case"minutes":case"minute":case"mins":case"min":case"m":return l*r;case"seconds":case"second":case"secs":case"sec":case"s":return l*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return l;default:return}}(e);if("number"===c&&isFinite(e))return t.long?function(e){var t=Math.abs(e);if(t>=i)return l(e,t,i,"day");if(t>=o)return l(e,t,o,"hour");if(t>=r)return l(e,t,r,"minute");if(t>=n)return l(e,t,n,"second");return e+" ms"}(e):function(e){var t=Math.abs(e);if(t>=i)return Math.round(e/i)+"d";if(t>=o)return Math.round(e/o)+"h";if(t>=r)return Math.round(e/r)+"m";if(t>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){(function(t){var r=n(59),o=n(29);e.exports=u;var i,a=/\n/g,s=/\\n/g;function l(){}function c(){return"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:{}}function u(e){if(r.call(this,e),this.query=this.query||{},!i){var t=c();i=t.___eio=t.___eio||[]}this.index=i.length;var n=this;i.push((function(e){n.onData(e)})),this.query.j=this.index,"function"==typeof addEventListener&&addEventListener("beforeunload",(function(){n.script&&(n.script.onerror=l)}),!1)}o(u,r),u.prototype.supportsBinary=!1,u.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),r.prototype.doClose.call(this)},u.prototype.doPoll=function(){var e=this,t=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),t.async=!0,t.src=this.uri(),t.onerror=function(t){e.onError("jsonp poll error",t)};var n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(t,n):(document.head||document.body).appendChild(t),this.script=t,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout((function(){var e=document.createElement("iframe");document.body.appendChild(e),document.body.removeChild(e)}),100)},u.prototype.doWrite=function(e,t){var n=this;if(!this.form){var r,o=document.createElement("form"),i=document.createElement("textarea"),l=this.iframeId="eio_iframe_"+this.index;o.className="socketio",o.style.position="absolute",o.style.top="-1000px",o.style.left="-1000px",o.target=l,o.method="POST",o.setAttribute("accept-charset","utf-8"),i.name="d",o.appendChild(i),document.body.appendChild(o),this.form=o,this.area=i}function c(){u(),t()}function u(){if(n.iframe)try{n.form.removeChild(n.iframe)}catch(e){n.onError("jsonp polling iframe removal error",e)}try{var e='<iframe src="javascript:0" name="'+n.iframeId+'">';r=document.createElement(e)}catch(e){(r=document.createElement("iframe")).name=n.iframeId,r.src="javascript:0"}r.id=n.iframeId,n.form.appendChild(r),n.iframe=r}this.form.action=this.uri(),u(),e=e.replace(s,"\\\n"),this.area.value=e.replace(a,"\\n");try{this.form.submit()}catch(e){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===n.iframe.readyState&&c()}:this.iframe.onload=c}}).call(this,n(26))},function(e,t,n){(function(t){var r,o,i=n(37),a=n(19),s=n(28),l=n(29),c=n(61),u=n(30)("engine.io-client:websocket");if("undefined"!=typeof WebSocket?r=WebSocket:"undefined"!=typeof self&&(r=self.WebSocket||self.MozWebSocket),"undefined"==typeof window)try{o=n(155)}catch(e){}var f=r||o;function p(e){e&&e.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=e.perMessageDeflate,this.usingBrowserWebSocket=r&&!e.forceNode,this.protocols=e.protocols,this.usingBrowserWebSocket||(f=o),i.call(this,e)}e.exports=p,l(p,i),p.prototype.name="websocket",p.prototype.supportsBinary=!0,p.prototype.doOpen=function(){if(this.check()){var e=this.uri(),t=this.protocols,n={agent:this.agent,perMessageDeflate:this.perMessageDeflate};n.pfx=this.pfx,n.key=this.key,n.passphrase=this.passphrase,n.cert=this.cert,n.ca=this.ca,n.ciphers=this.ciphers,n.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(n.headers=this.extraHeaders),this.localAddress&&(n.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket&&!this.isReactNative?t?new f(e,t):new f(e):new f(e,t,n)}catch(e){return this.emit("error",e)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},p.prototype.addEventListeners=function(){var e=this;this.ws.onopen=function(){e.onOpen()},this.ws.onclose=function(){e.onClose()},this.ws.onmessage=function(t){e.onData(t.data)},this.ws.onerror=function(t){e.onError("websocket error",t)}},p.prototype.write=function(e){var n=this;this.writable=!1;for(var r=e.length,o=0,i=r;o<i;o++)!function(e){a.encodePacket(e,n.supportsBinary,(function(o){if(!n.usingBrowserWebSocket){var i={};if(e.options&&(i.compress=e.options.compress),n.perMessageDeflate)("string"==typeof o?t.byteLength(o):o.length)<n.perMessageDeflate.threshold&&(i.compress=!1)}try{n.usingBrowserWebSocket?n.ws.send(o):n.ws.send(o,i)}catch(e){u("websocket closed before onclose event")}--r||s()}))}(e[o]);function s(){n.emit("flush"),setTimeout((function(){n.writable=!0,n.emit("drain")}),0)}},p.prototype.onClose=function(){i.prototype.onClose.call(this)},p.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},p.prototype.uri=function(){var e=this.query||{},t=this.secure?"wss":"ws",n="";return this.port&&("wss"===t&&443!==Number(this.port)||"ws"===t&&80!==Number(this.port))&&(n=":"+this.port),this.timestampRequests&&(e[this.timestampParam]=c()),this.supportsBinary||(e.b64=1),(e=s.encode(e)).length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+e},p.prototype.check=function(){return!(!f||"__initialize"in f&&this.name===p.prototype.name)}}).call(this,n(22).Buffer)},function(e,t){},function(e,t){e.exports=function(e,t){for(var n=[],r=(t=t||0)||0;r<e.length;r++)n[r-t]=e[r];return n}},function(e,t){function n(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}e.exports=n,n.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-n:e+n}return 0|Math.min(e,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(e){this.ms=e},n.prototype.setMax=function(e){this.max=e},n.prototype.setJitter=function(e){this.jitter=e}},function(e,t){e.exports=function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}},function(e,t){e.exports=function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}},function(e,t,n){var r=n(162);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};n(15)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=n(14)(!0)).push([e.i,".home-wrapper{height:calc(100vh - 56px);overflow:auto}.home-wrapper .home-body{height:100%;display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-webkit-box-pack:justify;justify-content:space-between}@media (max-width: 950px){.home-wrapper{margin:0 0}}@media (min-width: 950px){.home-wrapper{margin:0 10vw}}\n","",{version:3,sources:["/home/deep/Desktop/projects/crawlme/frontend/src/components/home/home.scss"],names:[],mappings:"AAAA,cACI,yBAA2B,CAC3B,aAAe,CAFnB,yBAMQ,WAAY,CACZ,mBAAa,CAAb,YAAa,CACb,6BAAmB,CAAnB,4BAAmB,CAAnB,kBAAmB,CACnB,wBAAiB,CAAjB,6BAA8B,CAEjC,0BAID,cACI,UAAY,CACf,CAGL,0BAEI,cACI,aAAe,CAClB",file:"home.scss",sourcesContent:[".home-wrapper{\n    height: calc(100vh - 56px );\n    overflow : auto;\n\n    \n    .home-body{\n        height: 100%;\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n\n    }\n}\n\n@media  (max-width: 950px) {\n    .home-wrapper{\n        margin : 0 0;\n    }\n}\n\n@media (min-width: 950px)  {\n\n    .home-wrapper{\n        margin : 0 10vw;\n    }\n}"]}]),e.exports=t},function(e,t,n){var r=n(164);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};n(15)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=n(14)(!0)).push([e.i,".main-wrapper{-webkit-box-flex:3;flex:3;overflow:auto;padding:1rem;background-color:rgba(40,40,40,0.8)}.main-wrapper .card-body{padding:.5rem 1rem;font-size:.8rem}.main-wrapper pre{font-size:.8rem}.main-wrapper p{margin-bottom:0}.main-wrapper .control-wrapper .control-body{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;position:relative}.main-wrapper .control-wrapper .control-body .input-group{-webkit-box-flex:1;flex:1;cursor:pointer}.main-wrapper .control-wrapper .control-body .suggestions{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;flex-wrap:nowrap;max-height:15rem;position:absolute;z-index:10;top:100%;overflow:auto}.main-wrapper .control-wrapper .control-body .suggestions .activityMap{background-color:#fff;font-size:.7rem;padding:.2rem;border:1px solid gray;border-top:none}.main-wrapper .control-wrapper .control-body .hidden{display:none}.main-wrapper .available-tags-wrapper{margin-bottom:1rem;margin-top:1rem}.main-wrapper .available-tags-wrapper span{color:white}.main-wrapper .available-tags-wrapper .available-tags-body{font-size:.8rem}.main-wrapper .available-tags-wrapper .available-tags-body .btn{padding:.1rem .4rem;font-size:.7rem;margin-right:.5rem;margin-bottom:.3rem}.main-wrapper .post-wrapper .post-body>div{margin-bottom:1rem}.main-wrapper .post-wrapper .post-body .post-body-tabs{color:white;display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;margin-bottom:.3rem;margin-top:.5rem}.main-wrapper .post-wrapper .post-body .post-body-tabs span{padding:.2rem .7rem;font-size:.8rem;margin-right:1rem;font-weight:bold;cursor:pointer;background-color:#202020;border-top-left-radius:.2rem;border-top-right-radius:.2rem;border-bottom:3px solid #202020}.main-wrapper .post-wrapper .post-body .post-body-tabs span:hover{background-color:#fff;color:#202020;border-top-left-radius:.2rem;border-top-right-radius:.2rem}.main-wrapper .post-wrapper .post-body .post-body-tabs .active{border-bottom:3px solid #37EF50}.main-wrapper .post-wrapper .post-body .hero-section{display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;margin-bottom:.5rem}.main-wrapper .post-wrapper .post-body .hero-section .image{padding-right:1rem;-webkit-box-flex:1;flex:1}.main-wrapper .post-wrapper .post-body .hero-section .image img{width:100%}.main-wrapper .post-wrapper .post-body .hero-section .headerText{-webkit-box-flex:4;flex:4}.main-wrapper .post-wrapper .post-body .hero-section .headerText .heading{display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-webkit-box-pack:justify;justify-content:space-between}.main-wrapper .post-wrapper .post-body .hero-section .headerText .heading a:hover{color:green;cursor:pointer}.main-wrapper .post-wrapper .post-body .hero-section .headerText .heading span{color:gray}.main-wrapper .post-wrapper .post-body .hero-section .headerText .heading span:hover{cursor:pointer;color:black}.main-wrapper .post-wrapper .post-body .hero-section .headerText .meta-details small{margin-right:1rem}.main-wrapper .post-wrapper .post-body .hero-section .headerText .hero-details p{margin-bottom:.4rem}.main-wrapper .post-wrapper .post-body .hero-section .headerText .hero-details .article-description{font-size:.9rem}.main-wrapper .post-wrapper .post-body .hero-section .headerText .hero-details .article-tags{font-size:.8rem}.main-wrapper .post-wrapper .post-body .hero-section .headerText .hero-details .article-tags button{padding:.1rem .4rem;font-size:.7rem;margin-right:.5rem}.main-wrapper .post-wrapper .post-body .d .no-article{text-align:center}.main-wrapper .post-wrapper .post-body .load-more{text-align:center;font-weight:bold;margin-bottom:0;cursor:pointer}.main-wrapper .post-wrapper .post-body .load-more p{margin-bottom:0}.main-wrapper .post-wrapper .post-body .load-more:hover{color:green;text-decoration:underline}.main-wrapper .post-wrapper .post-body .loader{text-align:center}.main-wrapper .highlight{background-color:yellow}\n","",{version:3,sources:["/home/deep/Desktop/projects/crawlme/frontend/src/components/home/main/main.scss"],names:[],mappings:"AAEA,cACI,kBAAW,CAAX,MAAW,CACX,aAAc,CACd,YAAc,CACd,mCAAqC,CAJzC,yBAOQ,kBAAmB,CACnB,eAAgB,CARxB,kBAYQ,eAAgB,CAZxB,gBAgBQ,eAAiB,CAhBzB,6CAsBY,mBAAoB,CAApB,YAAoB,CACpB,2BAAsB,CAAtB,4BAAsB,CAAtB,qBAAsB,CACtB,iBAAkB,CAxB9B,0DA2BgB,kBAAkB,CAAlB,MAAkB,CAElB,cAAwB,CA7BxC,0DAgCgB,mBAAa,CAAb,YAAa,CACb,2BAAsB,CAAtB,4BAAsB,CAAtB,qBAAsB,CACtB,gBAAiB,CACjB,gBAAiB,CACjB,iBAAmB,CACnB,UAAY,CACZ,QAAU,CACV,aAAc,CAvC9B,uEA0CoB,qBAAuC,CACvC,eAAiB,CACjB,aAAe,CACf,qBAAuB,CACvB,eAAiB,CA9CrC,qDAkDgB,YAAa,CAlD7B,sCAwDQ,kBAAmB,CACnB,eAAgB,CAzDxB,2CA4DY,WAAY,CA5DxB,2DAgEY,eAAgB,CAhE5B,gEAmEgB,mBAA0B,CAC1B,eAAoB,CACpB,kBAAoB,CACpB,mBAAoB,CAtEpC,2CA8EgB,kBAAmB,CA9EnC,uDAkFgB,WAAqB,CACrB,mBAAoB,CAApB,YAAoB,CACpB,6BAAmB,CAAnB,4BAAmB,CAAnB,kBAAmB,CACnB,mBAAqB,CACrB,gBAAiB,CAtFjC,4DAyFoB,mBAAyB,CACzB,eAAmB,CACnB,iBAAkB,CAClB,gBAAiB,CACjB,cAAe,CACf,wBAAkC,CAClC,4BAA6B,CAC7B,6BAA8B,CAE9B,+BAAwC,CAlG5D,kEAqGwB,qBAAoC,CACpC,aAAiC,CACjC,4BAA6B,CAC7B,6BAA+B,CAxGvD,+DA6GoB,+BAAgC,CA7GpD,qDAmHgB,mBAAoB,CAApB,YAAoB,CACpB,6BAAmB,CAAnB,4BAAmB,CAAnB,kBAAmB,CACnB,mBAAqB,CArHrC,4DAwHoB,kBAAmB,CACnB,kBAAe,CAAf,MAAgB,CAzHpC,gEA4HwB,UAAW,CA5HnC,iEAiIoB,kBAAM,CAAN,MAAO,CAjI3B,0EAoIwB,mBAAqB,CAArB,YAAqB,CACrB,6BAAoB,CAApB,4BAAoB,CAApB,kBAAoB,CACpB,wBAAiB,CAAjB,6BAA8B,CAtItD,kFAwI4B,WAAa,CACb,cAAe,CAzI3C,+EA4I4B,UAAW,CA5IvC,qFA+IgC,cAAe,CACf,WAAa,CAhJ7C,qFAuJ4B,iBAAkB,CAvJ9C,iFA6J4B,mBAAoB,CA7JhD,oGAkK4B,eAAgB,CAlK5C,6FAsK4B,eAAgB,CAtK5C,oGAyKgC,mBAAyB,CACzB,eAAmB,CACnB,kBAAmB,CA3KnD,sDAoLgB,iBAAmB,CApLnC,kDAuLgB,iBAAqB,CACrB,gBAAmB,CACnB,eAAgB,CAChB,cAAsB,CA1LtC,oDA4LoB,eAAgB,CA5LpC,wDAgMoB,WAAa,CACb,yBAA0B,CAjM9C,+CAuMgB,iBAAkB,CAvMlC,yBAgNQ,uBAAwB",file:"main.scss",sourcesContent:["\n\n.main-wrapper {\n    flex    : 3;\n    overflow: auto;\n    padding : 1rem;\n    background-color: rgba(40, 40, 40,.8);\n\n    .card-body {\n        padding: .5rem 1rem;\n        font-size: .8rem;\n    }\n\n    pre {\n        font-size: .8rem;\n    }\n\n    p{\n        margin-bottom : 0;\n    }\n\n\n    .control-wrapper {\n        .control-body {\n            display       : flex;\n            flex-direction: column;\n            position: relative;\n\n            .input-group {\n                flex           : 1;\n                // margin-right: 1rem;\n                cursor         : pointer;\n            }\n            .suggestions{\n                display: flex;\n                flex-direction: column;\n                flex-wrap: nowrap;\n                max-height: 15rem;\n                position : absolute;\n                z-index : 10;\n                top : 100%;\n                overflow: auto;\n\n                .activityMap{\n                    background-color: rgba(255, 255, 255,1);\n                    font-size : .7rem;\n                    padding : .2rem;\n                    border : 1px solid gray;\n                    border-top : none;\n                }\n            }\n            .hidden{\n                display: none;\n            }\n        }\n    }\n\n    .available-tags-wrapper {\n        margin-bottom: 1rem;\n        margin-top: 1rem;\n\n        span {\n            color: white;\n        }\n\n        .available-tags-body {\n            font-size: .8rem;\n\n            .btn {\n                padding      : .1rem .4rem;\n                font-size    : .7rem;\n                margin-right : .5rem;\n                margin-bottom: .3rem;\n            }\n        }\n    }\n\n    .post-wrapper {\n        .post-body {\n            &>div {\n                margin-bottom: 1rem;\n            }\n\n            .post-body-tabs {\n                color         : white;\n                display       : flex;\n                flex-direction: row;\n                margin-bottom : .3rem;\n                margin-top: .5rem;\n\n                span {\n                    padding     : .2rem .7rem;\n                    font-size   : .8rem;\n                    margin-right: 1rem;\n                    font-weight :bold;\n                    cursor: pointer;\n                    background-color : rgb(32, 32, 32);\n                    border-top-left-radius: .2rem;\n                    border-top-right-radius: .2rem;\n\n                    border-bottom: 3px solid rgb(32, 32, 32);\n\n                    &:hover {\n                        background-color: rgb(255, 255, 255);\n                        color           : rgb(32, 32, 32);\n                        border-top-left-radius: .2rem;\n                        border-top-right-radius:  .2rem;\n                    }\n                }\n\n                .active {\n                    border-bottom: 3px solid #37EF50;\n                }\n            }\n\n\n            .hero-section {\n                display       : flex;\n                flex-direction: row;\n                margin-bottom : .5rem;\n\n                .image {\n                    padding-right: 1rem;\n                    flex         : 1;\n\n                    img {\n                        width: 100%;\n                    }\n                }\n\n                .headerText {\n                    flex: 4;\n\n                    .heading {\n                        display        : flex;\n                        flex-direction : row;\n                        justify-content: space-between;\n                        a:hover{\n                            color : green;\n                            cursor: pointer;\n                        }\n                        span {\n                            color: gray;\n\n                            &:hover {\n                                cursor: pointer;\n                                color : black;\n                            }\n                        }\n                    }\n\n                    .meta-details {\n                        small {\n                            margin-right: 1rem;\n                        }\n                    }\n\n                    .hero-details {\n                        p {\n                            margin-bottom: .4rem;\n                        }\n\n                        .article-description {\n\n                            font-size: .9rem;\n                        }\n\n                        .article-tags {\n                            font-size: .8rem;\n\n                            button {\n                                padding     : .1rem .4rem;\n                                font-size   : .7rem;\n                                margin-right: .5rem;\n                            }\n                        }\n                    }\n\n                }\n\n            }\n            .d .no-article{\n                text-align : center;\n            }\n            .load-more {\n                text-align   : center;\n                font-weight  : bold;\n                margin-bottom: 0;\n                cursor       : pointer;\n                p{\n                    margin-bottom: 0;\n                }\n                &:hover {\n                    // font-size: 1.1rem;\n                    color : green;\n                    text-decoration: underline;\n                }\n            }\n            .withloader{\n            }\n            .loader{\n                text-align: center;\n                // display: flex;\n                // flex-direction: row-reverse;\n                // margin :0 auto;\n            }\n        }\n    }\n\n    .highlight {\n        background-color: yellow;\n    }\n}"]}]),e.exports=t},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return"text"===e.type&&/\r?\n/.test(e.data)&&""===e.data.trim()}},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0});var o=n(20),i=c(n(194)),a=c(n(195)),s=c(n(201)),l=c(n(202));function c(e){return e&&e.__esModule?e:{default:e}}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}t.default=(u(r={},o.ElementType.Text,i.default),u(r,o.ElementType.Tag,a.default),u(r,o.ElementType.Style,s.default),u(r,o.ElementType.Directive,l.default),u(r,o.ElementType.Comment,l.default),u(r,o.ElementType.Script,l.default),u(r,o.ElementType.CDATA,l.default),u(r,o.ElementType.Doctype,l.default),r)},function(e,t,n){var r=n(168);e.exports=function(e){if(e>=55296&&e<=57343||e>1114111)return"�";e in r&&(e=r[e]);var t="";e>65535&&(e-=65536,t+=String.fromCharCode(e>>>10&1023|55296),e=56320|1023&e);return t+=String.fromCharCode(e)}},function(e){e.exports=JSON.parse('{"0":65533,"128":8364,"130":8218,"131":402,"132":8222,"133":8230,"134":8224,"135":8225,"136":710,"137":8240,"138":352,"139":8249,"140":338,"142":381,"145":8216,"146":8217,"147":8220,"148":8221,"149":8226,"150":8211,"151":8212,"152":732,"153":8482,"154":353,"155":8250,"156":339,"158":382,"159":376}')},function(e){e.exports=JSON.parse('{"Aacute":"Á","aacute":"á","Abreve":"Ă","abreve":"ă","ac":"∾","acd":"∿","acE":"∾̳","Acirc":"Â","acirc":"â","acute":"´","Acy":"А","acy":"а","AElig":"Æ","aelig":"æ","af":"⁡","Afr":"𝔄","afr":"𝔞","Agrave":"À","agrave":"à","alefsym":"ℵ","aleph":"ℵ","Alpha":"Α","alpha":"α","Amacr":"Ā","amacr":"ā","amalg":"⨿","amp":"&","AMP":"&","andand":"⩕","And":"⩓","and":"∧","andd":"⩜","andslope":"⩘","andv":"⩚","ang":"∠","ange":"⦤","angle":"∠","angmsdaa":"⦨","angmsdab":"⦩","angmsdac":"⦪","angmsdad":"⦫","angmsdae":"⦬","angmsdaf":"⦭","angmsdag":"⦮","angmsdah":"⦯","angmsd":"∡","angrt":"∟","angrtvb":"⊾","angrtvbd":"⦝","angsph":"∢","angst":"Å","angzarr":"⍼","Aogon":"Ą","aogon":"ą","Aopf":"𝔸","aopf":"𝕒","apacir":"⩯","ap":"≈","apE":"⩰","ape":"≊","apid":"≋","apos":"\'","ApplyFunction":"⁡","approx":"≈","approxeq":"≊","Aring":"Å","aring":"å","Ascr":"𝒜","ascr":"𝒶","Assign":"≔","ast":"*","asymp":"≈","asympeq":"≍","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","awconint":"∳","awint":"⨑","backcong":"≌","backepsilon":"϶","backprime":"‵","backsim":"∽","backsimeq":"⋍","Backslash":"∖","Barv":"⫧","barvee":"⊽","barwed":"⌅","Barwed":"⌆","barwedge":"⌅","bbrk":"⎵","bbrktbrk":"⎶","bcong":"≌","Bcy":"Б","bcy":"б","bdquo":"„","becaus":"∵","because":"∵","Because":"∵","bemptyv":"⦰","bepsi":"϶","bernou":"ℬ","Bernoullis":"ℬ","Beta":"Β","beta":"β","beth":"ℶ","between":"≬","Bfr":"𝔅","bfr":"𝔟","bigcap":"⋂","bigcirc":"◯","bigcup":"⋃","bigodot":"⨀","bigoplus":"⨁","bigotimes":"⨂","bigsqcup":"⨆","bigstar":"★","bigtriangledown":"▽","bigtriangleup":"△","biguplus":"⨄","bigvee":"⋁","bigwedge":"⋀","bkarow":"⤍","blacklozenge":"⧫","blacksquare":"▪","blacktriangle":"▴","blacktriangledown":"▾","blacktriangleleft":"◂","blacktriangleright":"▸","blank":"␣","blk12":"▒","blk14":"░","blk34":"▓","block":"█","bne":"=⃥","bnequiv":"≡⃥","bNot":"⫭","bnot":"⌐","Bopf":"𝔹","bopf":"𝕓","bot":"⊥","bottom":"⊥","bowtie":"⋈","boxbox":"⧉","boxdl":"┐","boxdL":"╕","boxDl":"╖","boxDL":"╗","boxdr":"┌","boxdR":"╒","boxDr":"╓","boxDR":"╔","boxh":"─","boxH":"═","boxhd":"┬","boxHd":"╤","boxhD":"╥","boxHD":"╦","boxhu":"┴","boxHu":"╧","boxhU":"╨","boxHU":"╩","boxminus":"⊟","boxplus":"⊞","boxtimes":"⊠","boxul":"┘","boxuL":"╛","boxUl":"╜","boxUL":"╝","boxur":"└","boxuR":"╘","boxUr":"╙","boxUR":"╚","boxv":"│","boxV":"║","boxvh":"┼","boxvH":"╪","boxVh":"╫","boxVH":"╬","boxvl":"┤","boxvL":"╡","boxVl":"╢","boxVL":"╣","boxvr":"├","boxvR":"╞","boxVr":"╟","boxVR":"╠","bprime":"‵","breve":"˘","Breve":"˘","brvbar":"¦","bscr":"𝒷","Bscr":"ℬ","bsemi":"⁏","bsim":"∽","bsime":"⋍","bsolb":"⧅","bsol":"\\\\","bsolhsub":"⟈","bull":"•","bullet":"•","bump":"≎","bumpE":"⪮","bumpe":"≏","Bumpeq":"≎","bumpeq":"≏","Cacute":"Ć","cacute":"ć","capand":"⩄","capbrcup":"⩉","capcap":"⩋","cap":"∩","Cap":"⋒","capcup":"⩇","capdot":"⩀","CapitalDifferentialD":"ⅅ","caps":"∩︀","caret":"⁁","caron":"ˇ","Cayleys":"ℭ","ccaps":"⩍","Ccaron":"Č","ccaron":"č","Ccedil":"Ç","ccedil":"ç","Ccirc":"Ĉ","ccirc":"ĉ","Cconint":"∰","ccups":"⩌","ccupssm":"⩐","Cdot":"Ċ","cdot":"ċ","cedil":"¸","Cedilla":"¸","cemptyv":"⦲","cent":"¢","centerdot":"·","CenterDot":"·","cfr":"𝔠","Cfr":"ℭ","CHcy":"Ч","chcy":"ч","check":"✓","checkmark":"✓","Chi":"Χ","chi":"χ","circ":"ˆ","circeq":"≗","circlearrowleft":"↺","circlearrowright":"↻","circledast":"⊛","circledcirc":"⊚","circleddash":"⊝","CircleDot":"⊙","circledR":"®","circledS":"Ⓢ","CircleMinus":"⊖","CirclePlus":"⊕","CircleTimes":"⊗","cir":"○","cirE":"⧃","cire":"≗","cirfnint":"⨐","cirmid":"⫯","cirscir":"⧂","ClockwiseContourIntegral":"∲","CloseCurlyDoubleQuote":"”","CloseCurlyQuote":"’","clubs":"♣","clubsuit":"♣","colon":":","Colon":"∷","Colone":"⩴","colone":"≔","coloneq":"≔","comma":",","commat":"@","comp":"∁","compfn":"∘","complement":"∁","complexes":"ℂ","cong":"≅","congdot":"⩭","Congruent":"≡","conint":"∮","Conint":"∯","ContourIntegral":"∮","copf":"𝕔","Copf":"ℂ","coprod":"∐","Coproduct":"∐","copy":"©","COPY":"©","copysr":"℗","CounterClockwiseContourIntegral":"∳","crarr":"↵","cross":"✗","Cross":"⨯","Cscr":"𝒞","cscr":"𝒸","csub":"⫏","csube":"⫑","csup":"⫐","csupe":"⫒","ctdot":"⋯","cudarrl":"⤸","cudarrr":"⤵","cuepr":"⋞","cuesc":"⋟","cularr":"↶","cularrp":"⤽","cupbrcap":"⩈","cupcap":"⩆","CupCap":"≍","cup":"∪","Cup":"⋓","cupcup":"⩊","cupdot":"⊍","cupor":"⩅","cups":"∪︀","curarr":"↷","curarrm":"⤼","curlyeqprec":"⋞","curlyeqsucc":"⋟","curlyvee":"⋎","curlywedge":"⋏","curren":"¤","curvearrowleft":"↶","curvearrowright":"↷","cuvee":"⋎","cuwed":"⋏","cwconint":"∲","cwint":"∱","cylcty":"⌭","dagger":"†","Dagger":"‡","daleth":"ℸ","darr":"↓","Darr":"↡","dArr":"⇓","dash":"‐","Dashv":"⫤","dashv":"⊣","dbkarow":"⤏","dblac":"˝","Dcaron":"Ď","dcaron":"ď","Dcy":"Д","dcy":"д","ddagger":"‡","ddarr":"⇊","DD":"ⅅ","dd":"ⅆ","DDotrahd":"⤑","ddotseq":"⩷","deg":"°","Del":"∇","Delta":"Δ","delta":"δ","demptyv":"⦱","dfisht":"⥿","Dfr":"𝔇","dfr":"𝔡","dHar":"⥥","dharl":"⇃","dharr":"⇂","DiacriticalAcute":"´","DiacriticalDot":"˙","DiacriticalDoubleAcute":"˝","DiacriticalGrave":"`","DiacriticalTilde":"˜","diam":"⋄","diamond":"⋄","Diamond":"⋄","diamondsuit":"♦","diams":"♦","die":"¨","DifferentialD":"ⅆ","digamma":"ϝ","disin":"⋲","div":"÷","divide":"÷","divideontimes":"⋇","divonx":"⋇","DJcy":"Ђ","djcy":"ђ","dlcorn":"⌞","dlcrop":"⌍","dollar":"$","Dopf":"𝔻","dopf":"𝕕","Dot":"¨","dot":"˙","DotDot":"⃜","doteq":"≐","doteqdot":"≑","DotEqual":"≐","dotminus":"∸","dotplus":"∔","dotsquare":"⊡","doublebarwedge":"⌆","DoubleContourIntegral":"∯","DoubleDot":"¨","DoubleDownArrow":"⇓","DoubleLeftArrow":"⇐","DoubleLeftRightArrow":"⇔","DoubleLeftTee":"⫤","DoubleLongLeftArrow":"⟸","DoubleLongLeftRightArrow":"⟺","DoubleLongRightArrow":"⟹","DoubleRightArrow":"⇒","DoubleRightTee":"⊨","DoubleUpArrow":"⇑","DoubleUpDownArrow":"⇕","DoubleVerticalBar":"∥","DownArrowBar":"⤓","downarrow":"↓","DownArrow":"↓","Downarrow":"⇓","DownArrowUpArrow":"⇵","DownBreve":"̑","downdownarrows":"⇊","downharpoonleft":"⇃","downharpoonright":"⇂","DownLeftRightVector":"⥐","DownLeftTeeVector":"⥞","DownLeftVectorBar":"⥖","DownLeftVector":"↽","DownRightTeeVector":"⥟","DownRightVectorBar":"⥗","DownRightVector":"⇁","DownTeeArrow":"↧","DownTee":"⊤","drbkarow":"⤐","drcorn":"⌟","drcrop":"⌌","Dscr":"𝒟","dscr":"𝒹","DScy":"Ѕ","dscy":"ѕ","dsol":"⧶","Dstrok":"Đ","dstrok":"đ","dtdot":"⋱","dtri":"▿","dtrif":"▾","duarr":"⇵","duhar":"⥯","dwangle":"⦦","DZcy":"Џ","dzcy":"џ","dzigrarr":"⟿","Eacute":"É","eacute":"é","easter":"⩮","Ecaron":"Ě","ecaron":"ě","Ecirc":"Ê","ecirc":"ê","ecir":"≖","ecolon":"≕","Ecy":"Э","ecy":"э","eDDot":"⩷","Edot":"Ė","edot":"ė","eDot":"≑","ee":"ⅇ","efDot":"≒","Efr":"𝔈","efr":"𝔢","eg":"⪚","Egrave":"È","egrave":"è","egs":"⪖","egsdot":"⪘","el":"⪙","Element":"∈","elinters":"⏧","ell":"ℓ","els":"⪕","elsdot":"⪗","Emacr":"Ē","emacr":"ē","empty":"∅","emptyset":"∅","EmptySmallSquare":"◻","emptyv":"∅","EmptyVerySmallSquare":"▫","emsp13":" ","emsp14":" ","emsp":" ","ENG":"Ŋ","eng":"ŋ","ensp":" ","Eogon":"Ę","eogon":"ę","Eopf":"𝔼","eopf":"𝕖","epar":"⋕","eparsl":"⧣","eplus":"⩱","epsi":"ε","Epsilon":"Ε","epsilon":"ε","epsiv":"ϵ","eqcirc":"≖","eqcolon":"≕","eqsim":"≂","eqslantgtr":"⪖","eqslantless":"⪕","Equal":"⩵","equals":"=","EqualTilde":"≂","equest":"≟","Equilibrium":"⇌","equiv":"≡","equivDD":"⩸","eqvparsl":"⧥","erarr":"⥱","erDot":"≓","escr":"ℯ","Escr":"ℰ","esdot":"≐","Esim":"⩳","esim":"≂","Eta":"Η","eta":"η","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","euro":"€","excl":"!","exist":"∃","Exists":"∃","expectation":"ℰ","exponentiale":"ⅇ","ExponentialE":"ⅇ","fallingdotseq":"≒","Fcy":"Ф","fcy":"ф","female":"♀","ffilig":"ﬃ","fflig":"ﬀ","ffllig":"ﬄ","Ffr":"𝔉","ffr":"𝔣","filig":"ﬁ","FilledSmallSquare":"◼","FilledVerySmallSquare":"▪","fjlig":"fj","flat":"♭","fllig":"ﬂ","fltns":"▱","fnof":"ƒ","Fopf":"𝔽","fopf":"𝕗","forall":"∀","ForAll":"∀","fork":"⋔","forkv":"⫙","Fouriertrf":"ℱ","fpartint":"⨍","frac12":"½","frac13":"⅓","frac14":"¼","frac15":"⅕","frac16":"⅙","frac18":"⅛","frac23":"⅔","frac25":"⅖","frac34":"¾","frac35":"⅗","frac38":"⅜","frac45":"⅘","frac56":"⅚","frac58":"⅝","frac78":"⅞","frasl":"⁄","frown":"⌢","fscr":"𝒻","Fscr":"ℱ","gacute":"ǵ","Gamma":"Γ","gamma":"γ","Gammad":"Ϝ","gammad":"ϝ","gap":"⪆","Gbreve":"Ğ","gbreve":"ğ","Gcedil":"Ģ","Gcirc":"Ĝ","gcirc":"ĝ","Gcy":"Г","gcy":"г","Gdot":"Ġ","gdot":"ġ","ge":"≥","gE":"≧","gEl":"⪌","gel":"⋛","geq":"≥","geqq":"≧","geqslant":"⩾","gescc":"⪩","ges":"⩾","gesdot":"⪀","gesdoto":"⪂","gesdotol":"⪄","gesl":"⋛︀","gesles":"⪔","Gfr":"𝔊","gfr":"𝔤","gg":"≫","Gg":"⋙","ggg":"⋙","gimel":"ℷ","GJcy":"Ѓ","gjcy":"ѓ","gla":"⪥","gl":"≷","glE":"⪒","glj":"⪤","gnap":"⪊","gnapprox":"⪊","gne":"⪈","gnE":"≩","gneq":"⪈","gneqq":"≩","gnsim":"⋧","Gopf":"𝔾","gopf":"𝕘","grave":"`","GreaterEqual":"≥","GreaterEqualLess":"⋛","GreaterFullEqual":"≧","GreaterGreater":"⪢","GreaterLess":"≷","GreaterSlantEqual":"⩾","GreaterTilde":"≳","Gscr":"𝒢","gscr":"ℊ","gsim":"≳","gsime":"⪎","gsiml":"⪐","gtcc":"⪧","gtcir":"⩺","gt":">","GT":">","Gt":"≫","gtdot":"⋗","gtlPar":"⦕","gtquest":"⩼","gtrapprox":"⪆","gtrarr":"⥸","gtrdot":"⋗","gtreqless":"⋛","gtreqqless":"⪌","gtrless":"≷","gtrsim":"≳","gvertneqq":"≩︀","gvnE":"≩︀","Hacek":"ˇ","hairsp":" ","half":"½","hamilt":"ℋ","HARDcy":"Ъ","hardcy":"ъ","harrcir":"⥈","harr":"↔","hArr":"⇔","harrw":"↭","Hat":"^","hbar":"ℏ","Hcirc":"Ĥ","hcirc":"ĥ","hearts":"♥","heartsuit":"♥","hellip":"…","hercon":"⊹","hfr":"𝔥","Hfr":"ℌ","HilbertSpace":"ℋ","hksearow":"⤥","hkswarow":"⤦","hoarr":"⇿","homtht":"∻","hookleftarrow":"↩","hookrightarrow":"↪","hopf":"𝕙","Hopf":"ℍ","horbar":"―","HorizontalLine":"─","hscr":"𝒽","Hscr":"ℋ","hslash":"ℏ","Hstrok":"Ħ","hstrok":"ħ","HumpDownHump":"≎","HumpEqual":"≏","hybull":"⁃","hyphen":"‐","Iacute":"Í","iacute":"í","ic":"⁣","Icirc":"Î","icirc":"î","Icy":"И","icy":"и","Idot":"İ","IEcy":"Е","iecy":"е","iexcl":"¡","iff":"⇔","ifr":"𝔦","Ifr":"ℑ","Igrave":"Ì","igrave":"ì","ii":"ⅈ","iiiint":"⨌","iiint":"∭","iinfin":"⧜","iiota":"℩","IJlig":"Ĳ","ijlig":"ĳ","Imacr":"Ī","imacr":"ī","image":"ℑ","ImaginaryI":"ⅈ","imagline":"ℐ","imagpart":"ℑ","imath":"ı","Im":"ℑ","imof":"⊷","imped":"Ƶ","Implies":"⇒","incare":"℅","in":"∈","infin":"∞","infintie":"⧝","inodot":"ı","intcal":"⊺","int":"∫","Int":"∬","integers":"ℤ","Integral":"∫","intercal":"⊺","Intersection":"⋂","intlarhk":"⨗","intprod":"⨼","InvisibleComma":"⁣","InvisibleTimes":"⁢","IOcy":"Ё","iocy":"ё","Iogon":"Į","iogon":"į","Iopf":"𝕀","iopf":"𝕚","Iota":"Ι","iota":"ι","iprod":"⨼","iquest":"¿","iscr":"𝒾","Iscr":"ℐ","isin":"∈","isindot":"⋵","isinE":"⋹","isins":"⋴","isinsv":"⋳","isinv":"∈","it":"⁢","Itilde":"Ĩ","itilde":"ĩ","Iukcy":"І","iukcy":"і","Iuml":"Ï","iuml":"ï","Jcirc":"Ĵ","jcirc":"ĵ","Jcy":"Й","jcy":"й","Jfr":"𝔍","jfr":"𝔧","jmath":"ȷ","Jopf":"𝕁","jopf":"𝕛","Jscr":"𝒥","jscr":"𝒿","Jsercy":"Ј","jsercy":"ј","Jukcy":"Є","jukcy":"є","Kappa":"Κ","kappa":"κ","kappav":"ϰ","Kcedil":"Ķ","kcedil":"ķ","Kcy":"К","kcy":"к","Kfr":"𝔎","kfr":"𝔨","kgreen":"ĸ","KHcy":"Х","khcy":"х","KJcy":"Ќ","kjcy":"ќ","Kopf":"𝕂","kopf":"𝕜","Kscr":"𝒦","kscr":"𝓀","lAarr":"⇚","Lacute":"Ĺ","lacute":"ĺ","laemptyv":"⦴","lagran":"ℒ","Lambda":"Λ","lambda":"λ","lang":"⟨","Lang":"⟪","langd":"⦑","langle":"⟨","lap":"⪅","Laplacetrf":"ℒ","laquo":"«","larrb":"⇤","larrbfs":"⤟","larr":"←","Larr":"↞","lArr":"⇐","larrfs":"⤝","larrhk":"↩","larrlp":"↫","larrpl":"⤹","larrsim":"⥳","larrtl":"↢","latail":"⤙","lAtail":"⤛","lat":"⪫","late":"⪭","lates":"⪭︀","lbarr":"⤌","lBarr":"⤎","lbbrk":"❲","lbrace":"{","lbrack":"[","lbrke":"⦋","lbrksld":"⦏","lbrkslu":"⦍","Lcaron":"Ľ","lcaron":"ľ","Lcedil":"Ļ","lcedil":"ļ","lceil":"⌈","lcub":"{","Lcy":"Л","lcy":"л","ldca":"⤶","ldquo":"“","ldquor":"„","ldrdhar":"⥧","ldrushar":"⥋","ldsh":"↲","le":"≤","lE":"≦","LeftAngleBracket":"⟨","LeftArrowBar":"⇤","leftarrow":"←","LeftArrow":"←","Leftarrow":"⇐","LeftArrowRightArrow":"⇆","leftarrowtail":"↢","LeftCeiling":"⌈","LeftDoubleBracket":"⟦","LeftDownTeeVector":"⥡","LeftDownVectorBar":"⥙","LeftDownVector":"⇃","LeftFloor":"⌊","leftharpoondown":"↽","leftharpoonup":"↼","leftleftarrows":"⇇","leftrightarrow":"↔","LeftRightArrow":"↔","Leftrightarrow":"⇔","leftrightarrows":"⇆","leftrightharpoons":"⇋","leftrightsquigarrow":"↭","LeftRightVector":"⥎","LeftTeeArrow":"↤","LeftTee":"⊣","LeftTeeVector":"⥚","leftthreetimes":"⋋","LeftTriangleBar":"⧏","LeftTriangle":"⊲","LeftTriangleEqual":"⊴","LeftUpDownVector":"⥑","LeftUpTeeVector":"⥠","LeftUpVectorBar":"⥘","LeftUpVector":"↿","LeftVectorBar":"⥒","LeftVector":"↼","lEg":"⪋","leg":"⋚","leq":"≤","leqq":"≦","leqslant":"⩽","lescc":"⪨","les":"⩽","lesdot":"⩿","lesdoto":"⪁","lesdotor":"⪃","lesg":"⋚︀","lesges":"⪓","lessapprox":"⪅","lessdot":"⋖","lesseqgtr":"⋚","lesseqqgtr":"⪋","LessEqualGreater":"⋚","LessFullEqual":"≦","LessGreater":"≶","lessgtr":"≶","LessLess":"⪡","lesssim":"≲","LessSlantEqual":"⩽","LessTilde":"≲","lfisht":"⥼","lfloor":"⌊","Lfr":"𝔏","lfr":"𝔩","lg":"≶","lgE":"⪑","lHar":"⥢","lhard":"↽","lharu":"↼","lharul":"⥪","lhblk":"▄","LJcy":"Љ","ljcy":"љ","llarr":"⇇","ll":"≪","Ll":"⋘","llcorner":"⌞","Lleftarrow":"⇚","llhard":"⥫","lltri":"◺","Lmidot":"Ŀ","lmidot":"ŀ","lmoustache":"⎰","lmoust":"⎰","lnap":"⪉","lnapprox":"⪉","lne":"⪇","lnE":"≨","lneq":"⪇","lneqq":"≨","lnsim":"⋦","loang":"⟬","loarr":"⇽","lobrk":"⟦","longleftarrow":"⟵","LongLeftArrow":"⟵","Longleftarrow":"⟸","longleftrightarrow":"⟷","LongLeftRightArrow":"⟷","Longleftrightarrow":"⟺","longmapsto":"⟼","longrightarrow":"⟶","LongRightArrow":"⟶","Longrightarrow":"⟹","looparrowleft":"↫","looparrowright":"↬","lopar":"⦅","Lopf":"𝕃","lopf":"𝕝","loplus":"⨭","lotimes":"⨴","lowast":"∗","lowbar":"_","LowerLeftArrow":"↙","LowerRightArrow":"↘","loz":"◊","lozenge":"◊","lozf":"⧫","lpar":"(","lparlt":"⦓","lrarr":"⇆","lrcorner":"⌟","lrhar":"⇋","lrhard":"⥭","lrm":"‎","lrtri":"⊿","lsaquo":"‹","lscr":"𝓁","Lscr":"ℒ","lsh":"↰","Lsh":"↰","lsim":"≲","lsime":"⪍","lsimg":"⪏","lsqb":"[","lsquo":"‘","lsquor":"‚","Lstrok":"Ł","lstrok":"ł","ltcc":"⪦","ltcir":"⩹","lt":"<","LT":"<","Lt":"≪","ltdot":"⋖","lthree":"⋋","ltimes":"⋉","ltlarr":"⥶","ltquest":"⩻","ltri":"◃","ltrie":"⊴","ltrif":"◂","ltrPar":"⦖","lurdshar":"⥊","luruhar":"⥦","lvertneqq":"≨︀","lvnE":"≨︀","macr":"¯","male":"♂","malt":"✠","maltese":"✠","Map":"⤅","map":"↦","mapsto":"↦","mapstodown":"↧","mapstoleft":"↤","mapstoup":"↥","marker":"▮","mcomma":"⨩","Mcy":"М","mcy":"м","mdash":"—","mDDot":"∺","measuredangle":"∡","MediumSpace":" ","Mellintrf":"ℳ","Mfr":"𝔐","mfr":"𝔪","mho":"℧","micro":"µ","midast":"*","midcir":"⫰","mid":"∣","middot":"·","minusb":"⊟","minus":"−","minusd":"∸","minusdu":"⨪","MinusPlus":"∓","mlcp":"⫛","mldr":"…","mnplus":"∓","models":"⊧","Mopf":"𝕄","mopf":"𝕞","mp":"∓","mscr":"𝓂","Mscr":"ℳ","mstpos":"∾","Mu":"Μ","mu":"μ","multimap":"⊸","mumap":"⊸","nabla":"∇","Nacute":"Ń","nacute":"ń","nang":"∠⃒","nap":"≉","napE":"⩰̸","napid":"≋̸","napos":"ŉ","napprox":"≉","natural":"♮","naturals":"ℕ","natur":"♮","nbsp":" ","nbump":"≎̸","nbumpe":"≏̸","ncap":"⩃","Ncaron":"Ň","ncaron":"ň","Ncedil":"Ņ","ncedil":"ņ","ncong":"≇","ncongdot":"⩭̸","ncup":"⩂","Ncy":"Н","ncy":"н","ndash":"–","nearhk":"⤤","nearr":"↗","neArr":"⇗","nearrow":"↗","ne":"≠","nedot":"≐̸","NegativeMediumSpace":"​","NegativeThickSpace":"​","NegativeThinSpace":"​","NegativeVeryThinSpace":"​","nequiv":"≢","nesear":"⤨","nesim":"≂̸","NestedGreaterGreater":"≫","NestedLessLess":"≪","NewLine":"\\n","nexist":"∄","nexists":"∄","Nfr":"𝔑","nfr":"𝔫","ngE":"≧̸","nge":"≱","ngeq":"≱","ngeqq":"≧̸","ngeqslant":"⩾̸","nges":"⩾̸","nGg":"⋙̸","ngsim":"≵","nGt":"≫⃒","ngt":"≯","ngtr":"≯","nGtv":"≫̸","nharr":"↮","nhArr":"⇎","nhpar":"⫲","ni":"∋","nis":"⋼","nisd":"⋺","niv":"∋","NJcy":"Њ","njcy":"њ","nlarr":"↚","nlArr":"⇍","nldr":"‥","nlE":"≦̸","nle":"≰","nleftarrow":"↚","nLeftarrow":"⇍","nleftrightarrow":"↮","nLeftrightarrow":"⇎","nleq":"≰","nleqq":"≦̸","nleqslant":"⩽̸","nles":"⩽̸","nless":"≮","nLl":"⋘̸","nlsim":"≴","nLt":"≪⃒","nlt":"≮","nltri":"⋪","nltrie":"⋬","nLtv":"≪̸","nmid":"∤","NoBreak":"⁠","NonBreakingSpace":" ","nopf":"𝕟","Nopf":"ℕ","Not":"⫬","not":"¬","NotCongruent":"≢","NotCupCap":"≭","NotDoubleVerticalBar":"∦","NotElement":"∉","NotEqual":"≠","NotEqualTilde":"≂̸","NotExists":"∄","NotGreater":"≯","NotGreaterEqual":"≱","NotGreaterFullEqual":"≧̸","NotGreaterGreater":"≫̸","NotGreaterLess":"≹","NotGreaterSlantEqual":"⩾̸","NotGreaterTilde":"≵","NotHumpDownHump":"≎̸","NotHumpEqual":"≏̸","notin":"∉","notindot":"⋵̸","notinE":"⋹̸","notinva":"∉","notinvb":"⋷","notinvc":"⋶","NotLeftTriangleBar":"⧏̸","NotLeftTriangle":"⋪","NotLeftTriangleEqual":"⋬","NotLess":"≮","NotLessEqual":"≰","NotLessGreater":"≸","NotLessLess":"≪̸","NotLessSlantEqual":"⩽̸","NotLessTilde":"≴","NotNestedGreaterGreater":"⪢̸","NotNestedLessLess":"⪡̸","notni":"∌","notniva":"∌","notnivb":"⋾","notnivc":"⋽","NotPrecedes":"⊀","NotPrecedesEqual":"⪯̸","NotPrecedesSlantEqual":"⋠","NotReverseElement":"∌","NotRightTriangleBar":"⧐̸","NotRightTriangle":"⋫","NotRightTriangleEqual":"⋭","NotSquareSubset":"⊏̸","NotSquareSubsetEqual":"⋢","NotSquareSuperset":"⊐̸","NotSquareSupersetEqual":"⋣","NotSubset":"⊂⃒","NotSubsetEqual":"⊈","NotSucceeds":"⊁","NotSucceedsEqual":"⪰̸","NotSucceedsSlantEqual":"⋡","NotSucceedsTilde":"≿̸","NotSuperset":"⊃⃒","NotSupersetEqual":"⊉","NotTilde":"≁","NotTildeEqual":"≄","NotTildeFullEqual":"≇","NotTildeTilde":"≉","NotVerticalBar":"∤","nparallel":"∦","npar":"∦","nparsl":"⫽⃥","npart":"∂̸","npolint":"⨔","npr":"⊀","nprcue":"⋠","nprec":"⊀","npreceq":"⪯̸","npre":"⪯̸","nrarrc":"⤳̸","nrarr":"↛","nrArr":"⇏","nrarrw":"↝̸","nrightarrow":"↛","nRightarrow":"⇏","nrtri":"⋫","nrtrie":"⋭","nsc":"⊁","nsccue":"⋡","nsce":"⪰̸","Nscr":"𝒩","nscr":"𝓃","nshortmid":"∤","nshortparallel":"∦","nsim":"≁","nsime":"≄","nsimeq":"≄","nsmid":"∤","nspar":"∦","nsqsube":"⋢","nsqsupe":"⋣","nsub":"⊄","nsubE":"⫅̸","nsube":"⊈","nsubset":"⊂⃒","nsubseteq":"⊈","nsubseteqq":"⫅̸","nsucc":"⊁","nsucceq":"⪰̸","nsup":"⊅","nsupE":"⫆̸","nsupe":"⊉","nsupset":"⊃⃒","nsupseteq":"⊉","nsupseteqq":"⫆̸","ntgl":"≹","Ntilde":"Ñ","ntilde":"ñ","ntlg":"≸","ntriangleleft":"⋪","ntrianglelefteq":"⋬","ntriangleright":"⋫","ntrianglerighteq":"⋭","Nu":"Ν","nu":"ν","num":"#","numero":"№","numsp":" ","nvap":"≍⃒","nvdash":"⊬","nvDash":"⊭","nVdash":"⊮","nVDash":"⊯","nvge":"≥⃒","nvgt":">⃒","nvHarr":"⤄","nvinfin":"⧞","nvlArr":"⤂","nvle":"≤⃒","nvlt":"<⃒","nvltrie":"⊴⃒","nvrArr":"⤃","nvrtrie":"⊵⃒","nvsim":"∼⃒","nwarhk":"⤣","nwarr":"↖","nwArr":"⇖","nwarrow":"↖","nwnear":"⤧","Oacute":"Ó","oacute":"ó","oast":"⊛","Ocirc":"Ô","ocirc":"ô","ocir":"⊚","Ocy":"О","ocy":"о","odash":"⊝","Odblac":"Ő","odblac":"ő","odiv":"⨸","odot":"⊙","odsold":"⦼","OElig":"Œ","oelig":"œ","ofcir":"⦿","Ofr":"𝔒","ofr":"𝔬","ogon":"˛","Ograve":"Ò","ograve":"ò","ogt":"⧁","ohbar":"⦵","ohm":"Ω","oint":"∮","olarr":"↺","olcir":"⦾","olcross":"⦻","oline":"‾","olt":"⧀","Omacr":"Ō","omacr":"ō","Omega":"Ω","omega":"ω","Omicron":"Ο","omicron":"ο","omid":"⦶","ominus":"⊖","Oopf":"𝕆","oopf":"𝕠","opar":"⦷","OpenCurlyDoubleQuote":"“","OpenCurlyQuote":"‘","operp":"⦹","oplus":"⊕","orarr":"↻","Or":"⩔","or":"∨","ord":"⩝","order":"ℴ","orderof":"ℴ","ordf":"ª","ordm":"º","origof":"⊶","oror":"⩖","orslope":"⩗","orv":"⩛","oS":"Ⓢ","Oscr":"𝒪","oscr":"ℴ","Oslash":"Ø","oslash":"ø","osol":"⊘","Otilde":"Õ","otilde":"õ","otimesas":"⨶","Otimes":"⨷","otimes":"⊗","Ouml":"Ö","ouml":"ö","ovbar":"⌽","OverBar":"‾","OverBrace":"⏞","OverBracket":"⎴","OverParenthesis":"⏜","para":"¶","parallel":"∥","par":"∥","parsim":"⫳","parsl":"⫽","part":"∂","PartialD":"∂","Pcy":"П","pcy":"п","percnt":"%","period":".","permil":"‰","perp":"⊥","pertenk":"‱","Pfr":"𝔓","pfr":"𝔭","Phi":"Φ","phi":"φ","phiv":"ϕ","phmmat":"ℳ","phone":"☎","Pi":"Π","pi":"π","pitchfork":"⋔","piv":"ϖ","planck":"ℏ","planckh":"ℎ","plankv":"ℏ","plusacir":"⨣","plusb":"⊞","pluscir":"⨢","plus":"+","plusdo":"∔","plusdu":"⨥","pluse":"⩲","PlusMinus":"±","plusmn":"±","plussim":"⨦","plustwo":"⨧","pm":"±","Poincareplane":"ℌ","pointint":"⨕","popf":"𝕡","Popf":"ℙ","pound":"£","prap":"⪷","Pr":"⪻","pr":"≺","prcue":"≼","precapprox":"⪷","prec":"≺","preccurlyeq":"≼","Precedes":"≺","PrecedesEqual":"⪯","PrecedesSlantEqual":"≼","PrecedesTilde":"≾","preceq":"⪯","precnapprox":"⪹","precneqq":"⪵","precnsim":"⋨","pre":"⪯","prE":"⪳","precsim":"≾","prime":"′","Prime":"″","primes":"ℙ","prnap":"⪹","prnE":"⪵","prnsim":"⋨","prod":"∏","Product":"∏","profalar":"⌮","profline":"⌒","profsurf":"⌓","prop":"∝","Proportional":"∝","Proportion":"∷","propto":"∝","prsim":"≾","prurel":"⊰","Pscr":"𝒫","pscr":"𝓅","Psi":"Ψ","psi":"ψ","puncsp":" ","Qfr":"𝔔","qfr":"𝔮","qint":"⨌","qopf":"𝕢","Qopf":"ℚ","qprime":"⁗","Qscr":"𝒬","qscr":"𝓆","quaternions":"ℍ","quatint":"⨖","quest":"?","questeq":"≟","quot":"\\"","QUOT":"\\"","rAarr":"⇛","race":"∽̱","Racute":"Ŕ","racute":"ŕ","radic":"√","raemptyv":"⦳","rang":"⟩","Rang":"⟫","rangd":"⦒","range":"⦥","rangle":"⟩","raquo":"»","rarrap":"⥵","rarrb":"⇥","rarrbfs":"⤠","rarrc":"⤳","rarr":"→","Rarr":"↠","rArr":"⇒","rarrfs":"⤞","rarrhk":"↪","rarrlp":"↬","rarrpl":"⥅","rarrsim":"⥴","Rarrtl":"⤖","rarrtl":"↣","rarrw":"↝","ratail":"⤚","rAtail":"⤜","ratio":"∶","rationals":"ℚ","rbarr":"⤍","rBarr":"⤏","RBarr":"⤐","rbbrk":"❳","rbrace":"}","rbrack":"]","rbrke":"⦌","rbrksld":"⦎","rbrkslu":"⦐","Rcaron":"Ř","rcaron":"ř","Rcedil":"Ŗ","rcedil":"ŗ","rceil":"⌉","rcub":"}","Rcy":"Р","rcy":"р","rdca":"⤷","rdldhar":"⥩","rdquo":"”","rdquor":"”","rdsh":"↳","real":"ℜ","realine":"ℛ","realpart":"ℜ","reals":"ℝ","Re":"ℜ","rect":"▭","reg":"®","REG":"®","ReverseElement":"∋","ReverseEquilibrium":"⇋","ReverseUpEquilibrium":"⥯","rfisht":"⥽","rfloor":"⌋","rfr":"𝔯","Rfr":"ℜ","rHar":"⥤","rhard":"⇁","rharu":"⇀","rharul":"⥬","Rho":"Ρ","rho":"ρ","rhov":"ϱ","RightAngleBracket":"⟩","RightArrowBar":"⇥","rightarrow":"→","RightArrow":"→","Rightarrow":"⇒","RightArrowLeftArrow":"⇄","rightarrowtail":"↣","RightCeiling":"⌉","RightDoubleBracket":"⟧","RightDownTeeVector":"⥝","RightDownVectorBar":"⥕","RightDownVector":"⇂","RightFloor":"⌋","rightharpoondown":"⇁","rightharpoonup":"⇀","rightleftarrows":"⇄","rightleftharpoons":"⇌","rightrightarrows":"⇉","rightsquigarrow":"↝","RightTeeArrow":"↦","RightTee":"⊢","RightTeeVector":"⥛","rightthreetimes":"⋌","RightTriangleBar":"⧐","RightTriangle":"⊳","RightTriangleEqual":"⊵","RightUpDownVector":"⥏","RightUpTeeVector":"⥜","RightUpVectorBar":"⥔","RightUpVector":"↾","RightVectorBar":"⥓","RightVector":"⇀","ring":"˚","risingdotseq":"≓","rlarr":"⇄","rlhar":"⇌","rlm":"‏","rmoustache":"⎱","rmoust":"⎱","rnmid":"⫮","roang":"⟭","roarr":"⇾","robrk":"⟧","ropar":"⦆","ropf":"𝕣","Ropf":"ℝ","roplus":"⨮","rotimes":"⨵","RoundImplies":"⥰","rpar":")","rpargt":"⦔","rppolint":"⨒","rrarr":"⇉","Rrightarrow":"⇛","rsaquo":"›","rscr":"𝓇","Rscr":"ℛ","rsh":"↱","Rsh":"↱","rsqb":"]","rsquo":"’","rsquor":"’","rthree":"⋌","rtimes":"⋊","rtri":"▹","rtrie":"⊵","rtrif":"▸","rtriltri":"⧎","RuleDelayed":"⧴","ruluhar":"⥨","rx":"℞","Sacute":"Ś","sacute":"ś","sbquo":"‚","scap":"⪸","Scaron":"Š","scaron":"š","Sc":"⪼","sc":"≻","sccue":"≽","sce":"⪰","scE":"⪴","Scedil":"Ş","scedil":"ş","Scirc":"Ŝ","scirc":"ŝ","scnap":"⪺","scnE":"⪶","scnsim":"⋩","scpolint":"⨓","scsim":"≿","Scy":"С","scy":"с","sdotb":"⊡","sdot":"⋅","sdote":"⩦","searhk":"⤥","searr":"↘","seArr":"⇘","searrow":"↘","sect":"§","semi":";","seswar":"⤩","setminus":"∖","setmn":"∖","sext":"✶","Sfr":"𝔖","sfr":"𝔰","sfrown":"⌢","sharp":"♯","SHCHcy":"Щ","shchcy":"щ","SHcy":"Ш","shcy":"ш","ShortDownArrow":"↓","ShortLeftArrow":"←","shortmid":"∣","shortparallel":"∥","ShortRightArrow":"→","ShortUpArrow":"↑","shy":"­","Sigma":"Σ","sigma":"σ","sigmaf":"ς","sigmav":"ς","sim":"∼","simdot":"⩪","sime":"≃","simeq":"≃","simg":"⪞","simgE":"⪠","siml":"⪝","simlE":"⪟","simne":"≆","simplus":"⨤","simrarr":"⥲","slarr":"←","SmallCircle":"∘","smallsetminus":"∖","smashp":"⨳","smeparsl":"⧤","smid":"∣","smile":"⌣","smt":"⪪","smte":"⪬","smtes":"⪬︀","SOFTcy":"Ь","softcy":"ь","solbar":"⌿","solb":"⧄","sol":"/","Sopf":"𝕊","sopf":"𝕤","spades":"♠","spadesuit":"♠","spar":"∥","sqcap":"⊓","sqcaps":"⊓︀","sqcup":"⊔","sqcups":"⊔︀","Sqrt":"√","sqsub":"⊏","sqsube":"⊑","sqsubset":"⊏","sqsubseteq":"⊑","sqsup":"⊐","sqsupe":"⊒","sqsupset":"⊐","sqsupseteq":"⊒","square":"□","Square":"□","SquareIntersection":"⊓","SquareSubset":"⊏","SquareSubsetEqual":"⊑","SquareSuperset":"⊐","SquareSupersetEqual":"⊒","SquareUnion":"⊔","squarf":"▪","squ":"□","squf":"▪","srarr":"→","Sscr":"𝒮","sscr":"𝓈","ssetmn":"∖","ssmile":"⌣","sstarf":"⋆","Star":"⋆","star":"☆","starf":"★","straightepsilon":"ϵ","straightphi":"ϕ","strns":"¯","sub":"⊂","Sub":"⋐","subdot":"⪽","subE":"⫅","sube":"⊆","subedot":"⫃","submult":"⫁","subnE":"⫋","subne":"⊊","subplus":"⪿","subrarr":"⥹","subset":"⊂","Subset":"⋐","subseteq":"⊆","subseteqq":"⫅","SubsetEqual":"⊆","subsetneq":"⊊","subsetneqq":"⫋","subsim":"⫇","subsub":"⫕","subsup":"⫓","succapprox":"⪸","succ":"≻","succcurlyeq":"≽","Succeeds":"≻","SucceedsEqual":"⪰","SucceedsSlantEqual":"≽","SucceedsTilde":"≿","succeq":"⪰","succnapprox":"⪺","succneqq":"⪶","succnsim":"⋩","succsim":"≿","SuchThat":"∋","sum":"∑","Sum":"∑","sung":"♪","sup1":"¹","sup2":"²","sup3":"³","sup":"⊃","Sup":"⋑","supdot":"⪾","supdsub":"⫘","supE":"⫆","supe":"⊇","supedot":"⫄","Superset":"⊃","SupersetEqual":"⊇","suphsol":"⟉","suphsub":"⫗","suplarr":"⥻","supmult":"⫂","supnE":"⫌","supne":"⊋","supplus":"⫀","supset":"⊃","Supset":"⋑","supseteq":"⊇","supseteqq":"⫆","supsetneq":"⊋","supsetneqq":"⫌","supsim":"⫈","supsub":"⫔","supsup":"⫖","swarhk":"⤦","swarr":"↙","swArr":"⇙","swarrow":"↙","swnwar":"⤪","szlig":"ß","Tab":"\\t","target":"⌖","Tau":"Τ","tau":"τ","tbrk":"⎴","Tcaron":"Ť","tcaron":"ť","Tcedil":"Ţ","tcedil":"ţ","Tcy":"Т","tcy":"т","tdot":"⃛","telrec":"⌕","Tfr":"𝔗","tfr":"𝔱","there4":"∴","therefore":"∴","Therefore":"∴","Theta":"Θ","theta":"θ","thetasym":"ϑ","thetav":"ϑ","thickapprox":"≈","thicksim":"∼","ThickSpace":"  ","ThinSpace":" ","thinsp":" ","thkap":"≈","thksim":"∼","THORN":"Þ","thorn":"þ","tilde":"˜","Tilde":"∼","TildeEqual":"≃","TildeFullEqual":"≅","TildeTilde":"≈","timesbar":"⨱","timesb":"⊠","times":"×","timesd":"⨰","tint":"∭","toea":"⤨","topbot":"⌶","topcir":"⫱","top":"⊤","Topf":"𝕋","topf":"𝕥","topfork":"⫚","tosa":"⤩","tprime":"‴","trade":"™","TRADE":"™","triangle":"▵","triangledown":"▿","triangleleft":"◃","trianglelefteq":"⊴","triangleq":"≜","triangleright":"▹","trianglerighteq":"⊵","tridot":"◬","trie":"≜","triminus":"⨺","TripleDot":"⃛","triplus":"⨹","trisb":"⧍","tritime":"⨻","trpezium":"⏢","Tscr":"𝒯","tscr":"𝓉","TScy":"Ц","tscy":"ц","TSHcy":"Ћ","tshcy":"ћ","Tstrok":"Ŧ","tstrok":"ŧ","twixt":"≬","twoheadleftarrow":"↞","twoheadrightarrow":"↠","Uacute":"Ú","uacute":"ú","uarr":"↑","Uarr":"↟","uArr":"⇑","Uarrocir":"⥉","Ubrcy":"Ў","ubrcy":"ў","Ubreve":"Ŭ","ubreve":"ŭ","Ucirc":"Û","ucirc":"û","Ucy":"У","ucy":"у","udarr":"⇅","Udblac":"Ű","udblac":"ű","udhar":"⥮","ufisht":"⥾","Ufr":"𝔘","ufr":"𝔲","Ugrave":"Ù","ugrave":"ù","uHar":"⥣","uharl":"↿","uharr":"↾","uhblk":"▀","ulcorn":"⌜","ulcorner":"⌜","ulcrop":"⌏","ultri":"◸","Umacr":"Ū","umacr":"ū","uml":"¨","UnderBar":"_","UnderBrace":"⏟","UnderBracket":"⎵","UnderParenthesis":"⏝","Union":"⋃","UnionPlus":"⊎","Uogon":"Ų","uogon":"ų","Uopf":"𝕌","uopf":"𝕦","UpArrowBar":"⤒","uparrow":"↑","UpArrow":"↑","Uparrow":"⇑","UpArrowDownArrow":"⇅","updownarrow":"↕","UpDownArrow":"↕","Updownarrow":"⇕","UpEquilibrium":"⥮","upharpoonleft":"↿","upharpoonright":"↾","uplus":"⊎","UpperLeftArrow":"↖","UpperRightArrow":"↗","upsi":"υ","Upsi":"ϒ","upsih":"ϒ","Upsilon":"Υ","upsilon":"υ","UpTeeArrow":"↥","UpTee":"⊥","upuparrows":"⇈","urcorn":"⌝","urcorner":"⌝","urcrop":"⌎","Uring":"Ů","uring":"ů","urtri":"◹","Uscr":"𝒰","uscr":"𝓊","utdot":"⋰","Utilde":"Ũ","utilde":"ũ","utri":"▵","utrif":"▴","uuarr":"⇈","Uuml":"Ü","uuml":"ü","uwangle":"⦧","vangrt":"⦜","varepsilon":"ϵ","varkappa":"ϰ","varnothing":"∅","varphi":"ϕ","varpi":"ϖ","varpropto":"∝","varr":"↕","vArr":"⇕","varrho":"ϱ","varsigma":"ς","varsubsetneq":"⊊︀","varsubsetneqq":"⫋︀","varsupsetneq":"⊋︀","varsupsetneqq":"⫌︀","vartheta":"ϑ","vartriangleleft":"⊲","vartriangleright":"⊳","vBar":"⫨","Vbar":"⫫","vBarv":"⫩","Vcy":"В","vcy":"в","vdash":"⊢","vDash":"⊨","Vdash":"⊩","VDash":"⊫","Vdashl":"⫦","veebar":"⊻","vee":"∨","Vee":"⋁","veeeq":"≚","vellip":"⋮","verbar":"|","Verbar":"‖","vert":"|","Vert":"‖","VerticalBar":"∣","VerticalLine":"|","VerticalSeparator":"❘","VerticalTilde":"≀","VeryThinSpace":" ","Vfr":"𝔙","vfr":"𝔳","vltri":"⊲","vnsub":"⊂⃒","vnsup":"⊃⃒","Vopf":"𝕍","vopf":"𝕧","vprop":"∝","vrtri":"⊳","Vscr":"𝒱","vscr":"𝓋","vsubnE":"⫋︀","vsubne":"⊊︀","vsupnE":"⫌︀","vsupne":"⊋︀","Vvdash":"⊪","vzigzag":"⦚","Wcirc":"Ŵ","wcirc":"ŵ","wedbar":"⩟","wedge":"∧","Wedge":"⋀","wedgeq":"≙","weierp":"℘","Wfr":"𝔚","wfr":"𝔴","Wopf":"𝕎","wopf":"𝕨","wp":"℘","wr":"≀","wreath":"≀","Wscr":"𝒲","wscr":"𝓌","xcap":"⋂","xcirc":"◯","xcup":"⋃","xdtri":"▽","Xfr":"𝔛","xfr":"𝔵","xharr":"⟷","xhArr":"⟺","Xi":"Ξ","xi":"ξ","xlarr":"⟵","xlArr":"⟸","xmap":"⟼","xnis":"⋻","xodot":"⨀","Xopf":"𝕏","xopf":"𝕩","xoplus":"⨁","xotime":"⨂","xrarr":"⟶","xrArr":"⟹","Xscr":"𝒳","xscr":"𝓍","xsqcup":"⨆","xuplus":"⨄","xutri":"△","xvee":"⋁","xwedge":"⋀","Yacute":"Ý","yacute":"ý","YAcy":"Я","yacy":"я","Ycirc":"Ŷ","ycirc":"ŷ","Ycy":"Ы","ycy":"ы","yen":"¥","Yfr":"𝔜","yfr":"𝔶","YIcy":"Ї","yicy":"ї","Yopf":"𝕐","yopf":"𝕪","Yscr":"𝒴","yscr":"𝓎","YUcy":"Ю","yucy":"ю","yuml":"ÿ","Yuml":"Ÿ","Zacute":"Ź","zacute":"ź","Zcaron":"Ž","zcaron":"ž","Zcy":"З","zcy":"з","Zdot":"Ż","zdot":"ż","zeetrf":"ℨ","ZeroWidthSpace":"​","Zeta":"Ζ","zeta":"ζ","zfr":"𝔷","Zfr":"ℨ","ZHcy":"Ж","zhcy":"ж","zigrarr":"⇝","zopf":"𝕫","Zopf":"ℤ","Zscr":"𝒵","zscr":"𝓏","zwj":"‍","zwnj":"‌"}')},function(e){e.exports=JSON.parse('{"Aacute":"Á","aacute":"á","Acirc":"Â","acirc":"â","acute":"´","AElig":"Æ","aelig":"æ","Agrave":"À","agrave":"à","amp":"&","AMP":"&","Aring":"Å","aring":"å","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","brvbar":"¦","Ccedil":"Ç","ccedil":"ç","cedil":"¸","cent":"¢","copy":"©","COPY":"©","curren":"¤","deg":"°","divide":"÷","Eacute":"É","eacute":"é","Ecirc":"Ê","ecirc":"ê","Egrave":"È","egrave":"è","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","frac12":"½","frac14":"¼","frac34":"¾","gt":">","GT":">","Iacute":"Í","iacute":"í","Icirc":"Î","icirc":"î","iexcl":"¡","Igrave":"Ì","igrave":"ì","iquest":"¿","Iuml":"Ï","iuml":"ï","laquo":"«","lt":"<","LT":"<","macr":"¯","micro":"µ","middot":"·","nbsp":" ","not":"¬","Ntilde":"Ñ","ntilde":"ñ","Oacute":"Ó","oacute":"ó","Ocirc":"Ô","ocirc":"ô","Ograve":"Ò","ograve":"ò","ordf":"ª","ordm":"º","Oslash":"Ø","oslash":"ø","Otilde":"Õ","otilde":"õ","Ouml":"Ö","ouml":"ö","para":"¶","plusmn":"±","pound":"£","quot":"\\"","QUOT":"\\"","raquo":"»","reg":"®","REG":"®","sect":"§","shy":"­","sup1":"¹","sup2":"²","sup3":"³","szlig":"ß","THORN":"Þ","thorn":"þ","times":"×","Uacute":"Ú","uacute":"ú","Ucirc":"Û","ucirc":"û","Ugrave":"Ù","ugrave":"ù","uml":"¨","Uuml":"Ü","uuml":"ü","Yacute":"Ý","yacute":"ý","yen":"¥","yuml":"ÿ"}')},function(e){e.exports=JSON.parse('{"amp":"&","apos":"\'","gt":">","lt":"<","quot":"\\""}')},function(e,t,n){"use strict";var r,o="object"==typeof Reflect?Reflect:null,i=o&&"function"==typeof o.apply?o.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};r=o&&"function"==typeof o.ownKeys?o.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var a=Number.isNaN||function(e){return e!=e};function s(){s.init.call(this)}e.exports=s,s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var l=10;function c(e){return void 0===e._maxListeners?s.defaultMaxListeners:e._maxListeners}function u(e,t,n,r){var o,i,a,s;if("function"!=typeof n)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof n);if(void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),i=e._events),a=i[t]),void 0===a)a=i[t]=n,++e._eventsCount;else if("function"==typeof a?a=i[t]=r?[n,a]:[a,n]:r?a.unshift(n):a.push(n),(o=c(e))>0&&a.length>o&&!a.warned){a.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=a.length,s=l,console&&console.warn&&console.warn(s)}return e}function f(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,i(this.listener,this.target,e))}function p(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},o=f.bind(r);return o.listener=n,r.wrapFn=o,o}function d(e,t,n){var r=e._events;if(void 0===r)return[];var o=r[t];return void 0===o?[]:"function"==typeof o?n?[o.listener||o]:[o]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(o):m(o,o.length)}function h(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function m(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return l},set:function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");l=e}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},s.prototype.getMaxListeners=function(){return c(this)},s.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r="error"===e,o=this._events;if(void 0!==o)r=r&&void 0===o.error;else if(!r)return!1;if(r){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var l=o[e];if(void 0===l)return!1;if("function"==typeof l)i(l,this,t);else{var c=l.length,u=m(l,c);for(n=0;n<c;++n)i(u[n],this,t)}return!0},s.prototype.addListener=function(e,t){return u(this,e,t,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(e,t){return u(this,e,t,!0)},s.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,p(this,e,t)),this},s.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,p(this,e,t)),this},s.prototype.removeListener=function(e,t){var n,r,o,i,a;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(o=-1,i=n.length-1;i>=0;i--)if(n[i]===t||n[i].listener===t){a=n[i].listener,o=i;break}if(o<0)return this;0===o?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,o),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,a||t)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var o,i=Object.keys(n);for(r=0;r<i.length;++r)"removeListener"!==(o=i[r])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},s.prototype.listeners=function(e){return d(this,e,!0)},s.prototype.rawListeners=function(e){return d(this,e,!1)},s.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):h.call(e,t)},s.prototype.listenerCount=h,s.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},function(e,t,n){var r=n(71),o=e.exports=Object.create(r),i={tagName:"name"};Object.keys(i).forEach((function(e){var t=i[e];Object.defineProperty(o,e,{get:function(){return this[t]||null},set:function(e){return this[t]=e,e}})}))},function(e,t,n){var r=n(70),o=n(72);function i(e,t){this.init(e,t)}function a(e,t){return o.getElementsByTagName(e,t,!0)}function s(e,t){return o.getElementsByTagName(e,t,!0,1)[0]}function l(e,t,n){return o.getText(o.getElementsByTagName(e,t,n,1)).trim()}function c(e,t,n,r,o){var i=l(n,r,o);i&&(e[t]=i)}n(31)(i,r),i.prototype.init=r;var u=function(e){return"rss"===e||"feed"===e||"rdf:RDF"===e};i.prototype.onend=function(){var e,t,n={},o=s(u,this.dom);o&&("feed"===o.name?(t=o.children,n.type="atom",c(n,"id","id",t),c(n,"title","title",t),(e=s("link",t))&&(e=e.attribs)&&(e=e.href)&&(n.link=e),c(n,"description","subtitle",t),(e=l("updated",t))&&(n.updated=new Date(e)),c(n,"author","email",t,!0),n.items=a("entry",t).map((function(e){var t,n={};return c(n,"id","id",e=e.children),c(n,"title","title",e),(t=s("link",e))&&(t=t.attribs)&&(t=t.href)&&(n.link=t),(t=l("summary",e)||l("content",e))&&(n.description=t),(t=l("updated",e))&&(n.pubDate=new Date(t)),n}))):(t=s("channel",o.children).children,n.type=o.name.substr(0,3),n.id="",c(n,"title","title",t),c(n,"link","link",t),c(n,"description","description",t),(e=l("lastBuildDate",t))&&(n.updated=new Date(e)),c(n,"author","managingEditor",t,!0),n.items=a("item",o.children).map((function(e){var t,n={};return c(n,"id","guid",e=e.children),c(n,"title","title",e),c(n,"link","link",e),c(n,"description","description",e),(t=l("pubDate",e))&&(n.pubDate=new Date(t)),n})))),this.dom=n,r.prototype._handleCallback.call(this,o?null:Error("couldn't find root of feed"))},e.exports=i},function(e,t,n){var r=n(23),o=n(176),i=r.isTag;e.exports={getInnerHTML:function(e,t){return e.children?e.children.map((function(e){return o(e,t)})).join(""):""},getOuterHTML:o,getText:function e(t){return Array.isArray(t)?t.map(e).join(""):i(t)||t.type===r.CDATA?e(t.children):t.type===r.Text?t.data:""}}},function(e,t,n){var r=n(177),o=n(178),i=n(182);i.elementNames.__proto__=null,i.attributeNames.__proto__=null;var a={__proto__:null,style:!0,script:!0,xmp:!0,iframe:!0,noembed:!0,noframes:!0,plaintext:!0,noscript:!0};var s={__proto__:null,area:!0,base:!0,basefont:!0,br:!0,col:!0,command:!0,embed:!0,frame:!0,hr:!0,img:!0,input:!0,isindex:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},l=e.exports=function(e,t){Array.isArray(e)||e.cheerio||(e=[e]),t=t||{};for(var n="",o=0;o<e.length;o++){var i=e[o];"root"===i.type?n+=l(i.children,t):r.isTag(i)?n+=u(i,t):i.type===r.Directive?n+=f(i):i.type===r.Comment?n+=h(i):i.type===r.CDATA?n+=d(i):n+=p(i,t)}return n};const c=["mi","mo","mn","ms","mtext","annotation-xml","foreignObject","desc","title"];function u(e,t){"foreign"===t.xmlMode&&(e.name=i.elementNames[e.name]||e.name,e.parent&&c.indexOf(e.parent.name)>=0&&(t=Object.assign({},t,{xmlMode:!1}))),!t.xmlMode&&["svg","math"].indexOf(e.name)>=0&&(t=Object.assign({},t,{xmlMode:"foreign"}));var n="<"+e.name,r=function(e,t){if(e){var n,r="";for(var a in e)n=e[a],r&&(r+=" "),"foreign"===t.xmlMode&&(a=i.attributeNames[a]||a),r+=a,(null!==n&&""!==n||t.xmlMode)&&(r+='="'+(t.decodeEntities?o.encodeXML(n):n.replace(/\"/g,"&quot;"))+'"');return r}}(e.attribs,t);return r&&(n+=" "+r),!t.xmlMode||e.children&&0!==e.children.length?(n+=">",e.children&&(n+=l(e.children,t)),s[e.name]&&!t.xmlMode||(n+="</"+e.name+">")):n+="/>",n}function f(e){return"<"+e.data+">"}function p(e,t){var n=e.data||"";return!t.decodeEntities||e.parent&&e.parent.name in a||(n=o.encodeXML(n)),n}function d(e){return"<![CDATA["+e.children[0].data+"]]>"}function h(e){return"\x3c!--"+e.data+"--\x3e"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isTag=function(e){return"tag"===e.type||"script"===e.type||"style"===e.type},t.Text="text",t.Directive="directive",t.Comment="comment",t.Script="script",t.Style="style",t.Tag="tag",t.CDATA="cdata",t.Doctype="doctype"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(73),o=n(76);t.decode=function(e,t){return(!t||t<=0?r.decodeXML:r.decodeHTML)(e)},t.decodeStrict=function(e,t){return(!t||t<=0?r.decodeXML:r.decodeHTMLStrict)(e)},t.encode=function(e,t){return(!t||t<=0?o.encodeXML:o.encodeHTML)(e)};var i=n(76);t.encodeXML=i.encodeXML,t.encodeHTML=i.encodeHTML,t.escape=i.escape,t.encodeHTML4=i.encodeHTML,t.encodeHTML5=i.encodeHTML;var a=n(73);t.decodeXML=a.decodeXML,t.decodeHTML=a.decodeHTML,t.decodeHTMLStrict=a.decodeHTMLStrict,t.decodeHTML4=a.decodeHTML,t.decodeHTML5=a.decodeHTML,t.decodeHTML4Strict=a.decodeHTMLStrict,t.decodeHTML5Strict=a.decodeHTMLStrict,t.decodeXMLStrict=a.decodeXML},function(e){e.exports=JSON.parse('{"Aacute":"Á","aacute":"á","Acirc":"Â","acirc":"â","acute":"´","AElig":"Æ","aelig":"æ","Agrave":"À","agrave":"à","amp":"&","AMP":"&","Aring":"Å","aring":"å","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","brvbar":"¦","Ccedil":"Ç","ccedil":"ç","cedil":"¸","cent":"¢","copy":"©","COPY":"©","curren":"¤","deg":"°","divide":"÷","Eacute":"É","eacute":"é","Ecirc":"Ê","ecirc":"ê","Egrave":"È","egrave":"è","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","frac12":"½","frac14":"¼","frac34":"¾","gt":">","GT":">","Iacute":"Í","iacute":"í","Icirc":"Î","icirc":"î","iexcl":"¡","Igrave":"Ì","igrave":"ì","iquest":"¿","Iuml":"Ï","iuml":"ï","laquo":"«","lt":"<","LT":"<","macr":"¯","micro":"µ","middot":"·","nbsp":" ","not":"¬","Ntilde":"Ñ","ntilde":"ñ","Oacute":"Ó","oacute":"ó","Ocirc":"Ô","ocirc":"ô","Ograve":"Ò","ograve":"ò","ordf":"ª","ordm":"º","Oslash":"Ø","oslash":"ø","Otilde":"Õ","otilde":"õ","Ouml":"Ö","ouml":"ö","para":"¶","plusmn":"±","pound":"£","quot":"\\"","QUOT":"\\"","raquo":"»","reg":"®","REG":"®","sect":"§","shy":"­","sup1":"¹","sup2":"²","sup3":"³","szlig":"ß","THORN":"Þ","thorn":"þ","times":"×","Uacute":"Ú","uacute":"ú","Ucirc":"Û","ucirc":"û","Ugrave":"Ù","ugrave":"ù","uml":"¨","Uuml":"Ü","uuml":"ü","Yacute":"Ý","yacute":"ý","yen":"¥","yuml":"ÿ"}')},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(181));t.default=function(e){if(e>=55296&&e<=57343||e>1114111)return"�";e in o.default&&(e=o.default[e]);var t="";return e>65535&&(e-=65536,t+=String.fromCharCode(e>>>10&1023|55296),e=56320|1023&e),t+=String.fromCharCode(e)}},function(e){e.exports=JSON.parse('{"0":65533,"128":8364,"130":8218,"131":402,"132":8222,"133":8230,"134":8224,"135":8225,"136":710,"137":8240,"138":352,"139":8249,"140":338,"142":381,"145":8216,"146":8217,"147":8220,"148":8221,"149":8226,"150":8211,"151":8212,"152":732,"153":8482,"154":353,"155":8250,"156":339,"158":382,"159":376}')},function(e){e.exports=JSON.parse('{"elementNames":{"altglyph":"altGlyph","altglyphdef":"altGlyphDef","altglyphitem":"altGlyphItem","animatecolor":"animateColor","animatemotion":"animateMotion","animatetransform":"animateTransform","clippath":"clipPath","feblend":"feBlend","fecolormatrix":"feColorMatrix","fecomponenttransfer":"feComponentTransfer","fecomposite":"feComposite","feconvolvematrix":"feConvolveMatrix","fediffuselighting":"feDiffuseLighting","fedisplacementmap":"feDisplacementMap","fedistantlight":"feDistantLight","fedropshadow":"feDropShadow","feflood":"feFlood","fefunca":"feFuncA","fefuncb":"feFuncB","fefuncg":"feFuncG","fefuncr":"feFuncR","fegaussianblur":"feGaussianBlur","feimage":"feImage","femerge":"feMerge","femergenode":"feMergeNode","femorphology":"feMorphology","feoffset":"feOffset","fepointlight":"fePointLight","fespecularlighting":"feSpecularLighting","fespotlight":"feSpotLight","fetile":"feTile","feturbulence":"feTurbulence","foreignobject":"foreignObject","glyphref":"glyphRef","lineargradient":"linearGradient","radialgradient":"radialGradient","textpath":"textPath"},"attributeNames":{"definitionurl":"definitionURL","attributename":"attributeName","attributetype":"attributeType","basefrequency":"baseFrequency","baseprofile":"baseProfile","calcmode":"calcMode","clippathunits":"clipPathUnits","diffuseconstant":"diffuseConstant","edgemode":"edgeMode","filterunits":"filterUnits","glyphref":"glyphRef","gradienttransform":"gradientTransform","gradientunits":"gradientUnits","kernelmatrix":"kernelMatrix","kernelunitlength":"kernelUnitLength","keypoints":"keyPoints","keysplines":"keySplines","keytimes":"keyTimes","lengthadjust":"lengthAdjust","limitingconeangle":"limitingConeAngle","markerheight":"markerHeight","markerunits":"markerUnits","markerwidth":"markerWidth","maskcontentunits":"maskContentUnits","maskunits":"maskUnits","numoctaves":"numOctaves","pathlength":"pathLength","patterncontentunits":"patternContentUnits","patterntransform":"patternTransform","patternunits":"patternUnits","pointsatx":"pointsAtX","pointsaty":"pointsAtY","pointsatz":"pointsAtZ","preservealpha":"preserveAlpha","preserveaspectratio":"preserveAspectRatio","primitiveunits":"primitiveUnits","refx":"refX","refy":"refY","repeatcount":"repeatCount","repeatdur":"repeatDur","requiredextensions":"requiredExtensions","requiredfeatures":"requiredFeatures","specularconstant":"specularConstant","specularexponent":"specularExponent","spreadmethod":"spreadMethod","startoffset":"startOffset","stddeviation":"stdDeviation","stitchtiles":"stitchTiles","surfacescale":"surfaceScale","systemlanguage":"systemLanguage","tablevalues":"tableValues","targetx":"targetX","targety":"targetY","textlength":"textLength","viewbox":"viewBox","viewtarget":"viewTarget","xchannelselector":"xChannelSelector","ychannelselector":"yChannelSelector","zoomandpan":"zoomAndPan"}}')},function(e,t){var n=t.getChildren=function(e){return e.children},r=t.getParent=function(e){return e.parent};t.getSiblings=function(e){var t=r(e);return t?n(t):[e]},t.getAttributeValue=function(e,t){return e.attribs&&e.attribs[t]},t.hasAttrib=function(e,t){return!!e.attribs&&hasOwnProperty.call(e.attribs,t)},t.getName=function(e){return e.name}},function(e,t){t.removeElement=function(e){if(e.prev&&(e.prev.next=e.next),e.next&&(e.next.prev=e.prev),e.parent){var t=e.parent.children;t.splice(t.lastIndexOf(e),1)}},t.replaceElement=function(e,t){var n=t.prev=e.prev;n&&(n.next=t);var r=t.next=e.next;r&&(r.prev=t);var o=t.parent=e.parent;if(o){var i=o.children;i[i.lastIndexOf(e)]=t}},t.appendChild=function(e,t){if(t.parent=e,1!==e.children.push(t)){var n=e.children[e.children.length-2];n.next=t,t.prev=n,t.next=null}},t.append=function(e,t){var n=e.parent,r=e.next;if(t.next=r,t.prev=e,e.next=t,t.parent=n,r){if(r.prev=t,n){var o=n.children;o.splice(o.lastIndexOf(r),0,t)}}else n&&n.children.push(t)},t.prepend=function(e,t){var n=e.parent;if(n){var r=n.children;r.splice(r.lastIndexOf(e),0,t)}e.prev&&(e.prev.next=t),t.parent=n,t.prev=e.prev,t.next=e,e.prev=t}},function(e,t,n){var r=n(23).isTag;function o(e,t,n,r){for(var i,a=[],s=0,l=t.length;s<l&&!(e(t[s])&&(a.push(t[s]),--r<=0))&&(i=t[s].children,!(n&&i&&i.length>0&&(i=o(e,i,n,r),a=a.concat(i),(r-=i.length)<=0)));s++);return a}e.exports={filter:function(e,t,n,r){Array.isArray(t)||(t=[t]);"number"==typeof r&&isFinite(r)||(r=1/0);return o(e,t,!1!==n,r)},find:o,findOneChild:function(e,t){for(var n=0,r=t.length;n<r;n++)if(e(t[n]))return t[n];return null},findOne:function e(t,n){for(var o=null,i=0,a=n.length;i<a&&!o;i++)r(n[i])&&(t(n[i])?o=n[i]:n[i].children.length>0&&(o=e(t,n[i].children)));return o},existsOne:function e(t,n){for(var o=0,i=n.length;o<i;o++)if(r(n[o])&&(t(n[o])||n[o].children.length>0&&e(t,n[o].children)))return!0;return!1},findAll:function e(t,n){for(var o=[],i=0,a=n.length;i<a;i++)r(n[i])&&(t(n[i])&&o.push(n[i]),n[i].children.length>0&&(o=o.concat(e(t,n[i].children))));return o}}},function(e,t,n){var r=n(23),o=t.isTag=r.isTag;t.testElement=function(e,t){for(var n in e)if(e.hasOwnProperty(n)){if("tag_name"===n){if(!o(t)||!e.tag_name(t.name))return!1}else if("tag_type"===n){if(!e.tag_type(t.type))return!1}else if("tag_contains"===n){if(o(t)||!e.tag_contains(t.data))return!1}else if(!t.attribs||!e[n](t.attribs[n]))return!1}else;return!0};var i={tag_name:function(e){return"function"==typeof e?function(t){return o(t)&&e(t.name)}:"*"===e?o:function(t){return o(t)&&t.name===e}},tag_type:function(e){return"function"==typeof e?function(t){return e(t.type)}:function(t){return t.type===e}},tag_contains:function(e){return"function"==typeof e?function(t){return!o(t)&&e(t.data)}:function(t){return!o(t)&&t.data===e}}};function a(e,t){return"function"==typeof t?function(n){return n.attribs&&t(n.attribs[e])}:function(n){return n.attribs&&n.attribs[e]===t}}function s(e,t){return function(n){return e(n)||t(n)}}t.getElements=function(e,t,n,r){var o=Object.keys(e).map((function(t){var n=e[t];return t in i?i[t](n):a(t,n)}));return 0===o.length?[]:this.filter(o.reduce(s),t,n,r)},t.getElementById=function(e,t,n){return Array.isArray(t)||(t=[t]),this.findOne(a("id",e),t,!1!==n)},t.getElementsByTagName=function(e,t,n,r){return this.filter(i.tag_name(e),t,n,r)},t.getElementsByTagType=function(e,t,n,r){return this.filter(i.tag_type(e),t,n,r)}},function(e,t){t.removeSubsets=function(e){for(var t,n,r,o=e.length;--o>-1;){for(t=n=e[o],e[o]=null,r=!0;n;){if(e.indexOf(n)>-1){r=!1,e.splice(o,1);break}n=n.parent}r&&(e[o]=t)}return e};var n=1,r=2,o=4,i=8,a=16,s=t.compareDocumentPosition=function(e,t){var s,l,c,u,f,p,d=[],h=[];if(e===t)return 0;for(s=e;s;)d.unshift(s),s=s.parent;for(s=t;s;)h.unshift(s),s=s.parent;for(p=0;d[p]===h[p];)p++;return 0===p?n:(c=(l=d[p-1]).children,u=d[p],f=h[p],c.indexOf(u)>c.indexOf(f)?l===t?o|a:o:l===e?r|i:r)};t.uniqueSort=function(e){var t,n,i=e.length;for(e=e.slice();--i>-1;)t=e[i],(n=e.indexOf(t))>-1&&n<i&&e.splice(i,1);return e.sort((function(e,t){var n=s(e,t);return n&r?-1:n&o?1:0})),e}},function(e,t,n){e.exports=o;var r=n(77);function o(e){r.call(this,new i(this),e)}function i(e){this.scope=e}n(31)(o,r),o.prototype.readable=!0;var a=n(20).EVENTS;Object.keys(a).forEach((function(e){if(0===a[e])i.prototype["on"+e]=function(){this.scope.emit(e)};else if(1===a[e])i.prototype["on"+e]=function(t){this.scope.emit(e,t)};else{if(2!==a[e])throw Error("wrong number of arguments!");i.prototype["on"+e]=function(t,n){this.scope.emit(e,t,n)}}}))},function(e,t){},function(e,t,n){"use strict";var r=n(191).Buffer,o=r.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function i(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(r.isEncoding===o||!o(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=l,this.end=c,t=4;break;case"utf8":this.fillLast=s,t=4;break;case"base64":this.text=u,this.end=f,t=3;break;default:return this.write=p,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=r.allocUnsafe(t)}function a(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function s(e){var t=this.lastTotal-this.lastNeed,n=function(e,t,n){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==n?n:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function l(e,t){if((e.length-t)%2==0){var n=e.toString("utf16le",t);if(n){var r=n.charCodeAt(n.length-1);if(r>=55296&&r<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],n.slice(0,-1)}return n}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function c(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var n=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,n)}return t}function u(e,t){var n=(e.length-t)%3;return 0===n?e.toString("base64",t):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-n))}function f(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function p(e){return e.toString(this.encoding)}function d(e){return e&&e.length?this.write(e):""}t.StringDecoder=i,i.prototype.write=function(e){if(0===e.length)return"";var t,n;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";n=this.lastNeed,this.lastNeed=0}else n=0;return n<e.length?t?t+this.text(e,n):this.text(e,n):t||""},i.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},i.prototype.text=function(e,t){var n=function(e,t,n){var r=t.length-1;if(r<n)return 0;var o=a(t[r]);if(o>=0)return o>0&&(e.lastNeed=o-1),o;if(--r<n||-2===o)return 0;if((o=a(t[r]))>=0)return o>0&&(e.lastNeed=o-2),o;if(--r<n||-2===o)return 0;if((o=a(t[r]))>=0)return o>0&&(2===o?o=0:e.lastNeed=o-3),o;return 0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=n;var r=e.length-(n-this.lastNeed);return e.copy(this.lastChar,0,r),e.toString("utf8",t,r)},i.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},function(e,t,n){var r=n(22),o=r.Buffer;function i(e,t){for(var n in e)t[n]=e[n]}function a(e,t,n){return o(e,t,n)}o.from&&o.alloc&&o.allocUnsafe&&o.allocUnsafeSlow?e.exports=r:(i(r,t),t.Buffer=a),i(o,a),a.from=function(e,t,n){if("number"==typeof e)throw new TypeError("Argument must not be a number");return o(e,t,n)},a.alloc=function(e,t,n){if("number"!=typeof e)throw new TypeError("Argument must be a number");var r=o(e);return void 0!==t?"string"==typeof n?r.fill(t,n):r.fill(t):r.fill(0),r},a.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return o(e)},a.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return r.SlowBuffer(e)}},function(e,t,n){function r(e){this._cbs=e||{}}e.exports=r;var o=n(20).EVENTS;Object.keys(o).forEach((function(e){if(0===o[e])e="on"+e,r.prototype[e]=function(){this._cbs[e]&&this._cbs[e]()};else if(1===o[e])e="on"+e,r.prototype[e]=function(t){this._cbs[e]&&this._cbs[e](t)};else{if(2!==o[e])throw Error("wrong number of arguments");e="on"+e,r.prototype[e]=function(t,n){this._cbs[e]&&this._cbs[e](t,n)}}}))},function(e,t,n){function r(e){this._cbs=e||{},this.events=[]}e.exports=r;var o=n(20).EVENTS;Object.keys(o).forEach((function(e){if(0===o[e])e="on"+e,r.prototype[e]=function(){this.events.push([e]),this._cbs[e]&&this._cbs[e]()};else if(1===o[e])e="on"+e,r.prototype[e]=function(t){this.events.push([e,t]),this._cbs[e]&&this._cbs[e](t)};else{if(2!==o[e])throw Error("wrong number of arguments");e="on"+e,r.prototype[e]=function(t,n){this.events.push([e,t,n]),this._cbs[e]&&this._cbs[e](t,n)}}})),r.prototype.onreset=function(){this.events=[],this._cbs.onreset&&this._cbs.onreset()},r.prototype.restart=function(){this._cbs.onreset&&this._cbs.onreset();for(var e=0,t=this.events.length;e<t;e++)if(this._cbs[this.events[e][0]]){var n=this.events[e].length;1===n?this._cbs[this.events[e][0]]():2===n?this._cbs[this.events[e][0]](this.events[e][1]):this._cbs[this.events[e][0]](this.events[e][1],this.events[e][2])}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.data}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){var l=e.name;if(!(0,s.default)(l))return null;var c=(0,i.default)(e.attribs,t),u=null;-1===a.default.indexOf(l)&&(u=(0,o.default)(e.children,n));return r.default.createElement(l,c,u)};var r=l(n(0)),o=l(n(39)),i=l(n(78)),a=l(n(200)),s=l(n(79));function l(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return Object.keys(e).filter((function(e){return(0,i.default)(e)})).reduce((function(t,n){var r=n.toLowerCase(),i=o.default[r]||r;return t[i]=s(i,e[n]),t}),{})};var r=a(n(197)),o=a(n(198)),i=a(n(79));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e,t){return r.default.map((function(e){return e.toLowerCase()})).indexOf(e.toLowerCase())>=0&&(t=e),t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=["allowfullScreen","async","autoplay","capture","checked","controls","default","defer","disabled","formnovalidate","hidden","loop","multiple","muted","novalidate","open","playsinline","readonly","required","reversed","scoped","seamless","selected","itemscope"]},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={accept:"accept","accept-charset":"acceptCharset",accesskey:"accessKey",action:"action",allowfullscreen:"allowFullScreen",allowtransparency:"allowTransparency",alt:"alt",as:"as",async:"async",autocomplete:"autoComplete",autoplay:"autoPlay",capture:"capture",cellpadding:"cellPadding",cellspacing:"cellSpacing",charset:"charSet",challenge:"challenge",checked:"checked",cite:"cite",classid:"classID",class:"className",cols:"cols",colspan:"colSpan",content:"content",contenteditable:"contentEditable",contextmenu:"contextMenu",controls:"controls",controlsList:"controlsList",coords:"coords",crossorigin:"crossOrigin",data:"data",datetime:"dateTime",default:"default",defer:"defer",dir:"dir",disabled:"disabled",download:"download",draggable:"draggable",enctype:"encType",form:"form",formaction:"formAction",formenctype:"formEncType",formmethod:"formMethod",formnovalidate:"formNoValidate",formtarget:"formTarget",frameborder:"frameBorder",headers:"headers",height:"height",hidden:"hidden",high:"high",href:"href",hreflang:"hrefLang",for:"htmlFor","http-equiv":"httpEquiv",icon:"icon",id:"id",inputmode:"inputMode",integrity:"integrity",is:"is",keyparams:"keyParams",keytype:"keyType",kind:"kind",label:"label",lang:"lang",list:"list",loop:"loop",low:"low",manifest:"manifest",marginheight:"marginHeight",marginwidth:"marginWidth",max:"max",maxlength:"maxLength",media:"media",mediagroup:"mediaGroup",method:"method",min:"min",minlength:"minLength",multiple:"multiple",muted:"muted",name:"name",nonce:"nonce",novalidate:"noValidate",open:"open",optimum:"optimum",pattern:"pattern",placeholder:"placeholder",playsinline:"playsInline",poster:"poster",preload:"preload",profile:"profile",radiogroup:"radioGroup",readonly:"readOnly",referrerpolicy:"referrerPolicy",rel:"rel",required:"required",reversed:"reversed",role:"role",rows:"rows",rowspan:"rowSpan",sandbox:"sandbox",scope:"scope",scoped:"scoped",scrolling:"scrolling",seamless:"seamless",selected:"selected",shape:"shape",size:"size",sizes:"sizes",slot:"slot",span:"span",spellcheck:"spellCheck",src:"src",srcdoc:"srcDoc",srclang:"srcLang",srcset:"srcSet",start:"start",step:"step",style:"style",summary:"summary",tabindex:"tabIndex",target:"target",title:"title",type:"type",usemap:"useMap",value:"value",width:"width",wmode:"wmode",wrap:"wrap",about:"about",datatype:"datatype",inlist:"inlist",prefix:"prefix",property:"property",resource:"resource",typeof:"typeof",vocab:"vocab",autocapitalize:"autoCapitalize",autocorrect:"autoCorrect",autosave:"autoSave",color:"color",itemprop:"itemProp",itemscope:"itemScope",itemtype:"itemType",itemid:"itemID",itemref:"itemRef",results:"results",security:"security",unselectable:"unselectable"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&s.return&&s.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";if(""===e)return{};return e.split(";").reduce((function(e,t){var n=t.split(/^([^:]+):/).filter((function(e,t){return t>0})).map((function(e){return e.trim().toLowerCase()})),o=r(n,2),i=o[0],a=o[1];return void 0===a?e:(e[i=i.replace(/^-ms-/,"ms-").replace(/-(.)/g,(function(e,t){return t.toUpperCase()}))]=a,e)}),{})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=["area","base","br","col","command","embed","hr","img","input","keygen","link","meta","param","source","track","wbr"]},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=void 0;e.children.length>0&&(n=e.children[0].data);var i=(0,o.default)(e.attribs,t);return r.default.createElement("style",i,n)};var r=i(n(0)),o=i(n(78));function i(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return null}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.decodeEntities,i=void 0===n||n,a=t.transform,s=t.preprocessNodes,l=(void 0===s?function(e){return e}:s)(r.default.parseDOM(e,{decodeEntities:i}));return(0,o.default)(l,a)};var r=i(n(20)),o=i(n(39));function i(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){var r=n(205);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};n(15)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=n(14)(!0)).push([e.i,".loader-wrapper{display:-webkit-box;display:flex;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;padding:.3rem}.loader-wrapper .three_dot_loader{position:relative;width:.5rem;height:.5rem;margin:0 .75rem;border-radius:50%;background-color:currentColor;-webkit-animation-name:fade;animation-name:fade;-webkit-animation-duration:.8s;animation-duration:.8s;-webkit-animation-timing-function:cubic-bezier(0.45, 0.05, 0.55, 0.95);animation-timing-function:cubic-bezier(0.45, 0.05, 0.55, 0.95);-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite;animation-direction:alternate-reverse;-webkit-animation-delay:.26667s;animation-delay:.26667s}.loader-wrapper .three_dot_loader::before,.loader-wrapper .three_dot_loader::after{content:'';position:absolute;top:0;right:0;bottom:0;left:0;width:inherit;height:inherit;border-radius:inherit;background-color:inherit;-webkit-animation:inherit;animation:inherit}.loader-wrapper .three_dot_loader::before{-webkit-transform:translatex(-150%);transform:translatex(-150%);-webkit-animation-delay:0s;animation-delay:0s}.loader-wrapper .three_dot_loader::after{-webkit-transform:translatex(150%);transform:translatex(150%);-webkit-animation-delay:.53333s;animation-delay:.53333s}@-webkit-keyframes fade{from{opacity:0;-webkit-transform:translatey(1);transform:translatey(1)}to{opacity:1;-webkit-transform:translatey(2);transform:translatey(2)}}@keyframes fade{from{opacity:0;-webkit-transform:translatey(1);transform:translatey(1)}to{opacity:1;-webkit-transform:translatey(2);transform:translatey(2)}}\n","",{version:3,sources:["/home/deep/Desktop/projects/crawlme/frontend/src/components/common/loader.scss"],names:[],mappings:"AAIA,gBACI,mBAAa,CAAb,YAAa,CACb,uBAAuB,CAAvB,sBAAuB,CACvB,wBAAmB,CAAnB,kBAAmB,CACnB,aAAe,CAJnB,kCAMQ,iBAAkB,CAClB,WAXQ,CAYR,YAZQ,CAaR,eAAyB,CACzB,iBAAkB,CAClB,6BAA8B,CAC9B,2BAAoB,CAApB,mBAAoB,CACpB,8BAAoB,CAApB,sBAAoB,CACpB,sEAA+D,CAA/D,8DAA+D,CAC/D,0CAAmC,CAAnC,kCAAmC,CACnC,qCAAsC,CAsBtC,+BAAgB,CAAhB,uBAAiB,CAtCzB,mFAoBU,UAAW,CACX,iBAAkB,CAClB,KAAM,CACN,OAAQ,CACR,QAAS,CACT,MAAO,CACP,aAAc,CACd,cAAe,CACf,qBAAsB,CACtB,wBAAyB,CACzB,yBAAW,CAAX,iBAAkB,CA9B5B,0CAkCU,mCAA4B,CAA5B,2BAA4B,CAC5B,0BAAgB,CAAhB,kBAAiB,CAnC3B,yCAyCU,kCAA2B,CAA3B,0BAA2B,CAC3B,+BAAgB,CAAhB,uBAAiB,CAClB,wBAMP,KACE,SAAU,CACV,+BAAW,CAAX,uBAAwB,CAE1B,GACE,SAAU,CACV,+BAAW,CAAX,uBAAwB,CAAA,CAZnB,gBAMP,KACE,SAAU,CACV,+BAAW,CAAX,uBAAwB,CAE1B,GACE,SAAU,CACV,+BAAW,CAAX,uBAAwB,CAAA",file:"loader.scss",sourcesContent:["$dot-size: .5rem;\n$animation-duration: 0.8s;\n\n\n.loader-wrapper{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding : .3rem;\n    .three_dot_loader {\n        position: relative;\n        width: $dot-size;\n        height: $dot-size;\n        margin: 0 $dot-size * 1.5;\n        border-radius: 50%;\n        background-color: currentColor;\n        animation-name: fade;\n        animation-duration: #{$animation-duration};\n        animation-timing-function: cubic-bezier(0.45, 0.05, 0.55, 0.95);\n        animation-iteration-count: infinite;\n        animation-direction: alternate-reverse;\n      \n        &::before,\n        &::after {\n          content: '';\n          position: absolute;\n          top: 0;\n          right: 0;\n          bottom: 0;\n          left: 0;\n          width: inherit;\n          height: inherit;\n          border-radius: inherit;\n          background-color: inherit;\n          animation: inherit;\n        }\n      \n        &::before {\n          transform: translatex(-150%);\n          animation-delay: #{$animation-duration * 0};\n        }\n      \n        animation-delay: #{$animation-duration * (1/3)};\n      \n        &::after {\n          transform: translatex(150%);\n          animation-delay: #{$animation-duration * (2/3)};\n        }\n      }\n}\n\n\n@keyframes fade {\n  from {\n    opacity: 0;\n    transform: translatey(1);\n  }\n  to {\n    opacity: 1;\n    transform: translatey(2);\n  }\n}"]}]),e.exports=t},function(e,t,n){var r=n(207);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};n(15)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=n(14)(!0)).push([e.i,".blog-wrapper{min-height:100vh;background-color:white}.blog-wrapper .not-found{padding:5rem 0}.blog-wrapper .not-found h5{text-align:center}.blog-wrapper .blog-body{padding-bottom:10rem}.blog-wrapper .blog-body .basic-info{text-align:center;padding:.7rem 0;background-color:gainsboro;font-size:.8rem}.blog-wrapper .blog-body #blog-body-responses{margin:0 auto;padding:10vw}.blog-wrapper .blog-body #blog-body-responses .js-responsesStreamOther{max-width:45rem;margin:0 auto}.blog-wrapper .blog-body #blog-body-responses .loader{text-align:center}.blog-wrapper .hidden{display:none}\n","",{version:3,sources:["/home/deep/Desktop/projects/crawlme/frontend/src/components/blog/blog.scss"],names:[],mappings:"AAAA,cACI,gBAAuB,CACvB,sBAAuB,CAF3B,yBAKQ,cAAe,CALvB,4BAOY,iBAAkB,CAP9B,yBAWQ,oBAAqB,CAX7B,qCAcY,iBAAwB,CACxB,eAAyB,CACzB,0BAA2B,CAC3B,eAAuB,CAjBnC,8CAqBY,aAAe,CACf,YAAa,CAtBzB,uEAyBgB,eAAgB,CAChB,aAAc,CA1B9B,sDA6BgB,iBAAkB,CA7BlC,sBAkCQ,YAAa",file:"blog.scss",sourcesContent:[".blog-wrapper {\n    min-height      : 100vh;\n    background-color: white;\n\n    .not-found{\n        padding: 5rem 0;\n        h5{\n            text-align: center;\n        }\n    }\n    .blog-body {\n        padding-bottom: 10rem;\n\n        .basic-info {\n            text-align      : center;\n            padding         : .7rem 0;\n            background-color: gainsboro;\n            font-size       : .8rem;\n        }\n\n        #blog-body-responses {\n            margin : 0 auto;\n            padding: 10vw;\n            \n            .js-responsesStreamOther{\n                max-width: 45rem;\n                margin: 0 auto;\n            }\n            .loader{\n                text-align: center;\n            }\n        }\n    }\n    .hidden {\n        display: none;\n    }\n}"]}]),e.exports=t},function(e,t,n){"use strict";(function(e){Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/))}).call(this,n(21))},function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"goTo",(function(){return pr})),n.d(r,"signin",(function(){return dr})),n.d(r,"signup",(function(){return hr})),n.d(r,"signout",(function(){return mr})),n.d(r,"allUsers",(function(){return gr}));var o={};n.r(o),n.d(o,"onChangeInput",(function(){return uo})),n.d(o,"setArticle",(function(){return fo})),n.d(o,"fetchMoreLinks",(function(){return po})),n.d(o,"setRelatedTags",(function(){return ho})),n.d(o,"onChangeFilterInput",(function(){return mo})),n.d(o,"setShowFiltered",(function(){return go})),n.d(o,"setFilteredArticles",(function(){return yo})),n.d(o,"fetchResponses",(function(){return bo})),n.d(o,"setBlogResponse",(function(){return Ao})),n.d(o,"setPrimaryTag",(function(){return vo})),n.d(o,"pushPendingArticleList",(function(){return Co})),n.d(o,"startCrawling",(function(){return _o})),n.d(o,"pushArticle",(function(){return xo})),n.d(o,"_pushArticle",(function(){return ko})),n.d(o,"fetchHtml",(function(){return To})),n.d(o,"setBlogHtml",(function(){return Bo})),n.d(o,"setBlogStyle",(function(){return So})),n.d(o,"goTo",(function(){return Oo}));var i=n(0),a=n.n(i),s=n(18),l=n.n(s),c=n(3),u=n.n(c),f=n(4),p=n.n(f),d=n(5),h=n.n(d),m=n(6),g=n.n(m),y=n(7),b=n.n(y),A=n(1),v=n.n(A),C=a.a.createContext(null);var w=function(e){e()},_=function(){return w},E=null,x={notify:function(){}};var k=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=x,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){var e,t,n;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=(e=_(),t=[],n=[],{clear:function(){n=E,t=E},notify:function(){var r=t=n;e((function(){for(var e=0;e<r.length;e++)r[e]()}))},get:function(){return n},subscribe:function(e){var r=!0;return n===t&&(n=t.slice()),n.push(e),function(){r&&t!==E&&(r=!1,n===t&&(n=t.slice()),n.splice(n.indexOf(e),1))}}}))},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=x)},e}();function T(e){var t=e.store,n=e.context,r=e.children,o=Object(i.useMemo)((function(){var e=new k(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),s=Object(i.useMemo)((function(){return t.getState()}),[t]);Object(i.useEffect)((function(){var e=o.subscription;return e.trySubscribe(),s!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[o,s]);var l=n||C;return a.a.createElement(l.Provider,{value:o},r)}T.propTypes={store:v.a.shape({subscribe:v.a.func.isRequired,dispatch:v.a.func.isRequired,getState:v.a.func.isRequired}),context:v.a.object,children:v.a.any};var B=T;function S(){return(S=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function O(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var N=n(24),P=n.n(N),D=n(16),L=n.n(D),R=n(32),q="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?i.useLayoutEffect:i.useEffect,I=[],j=[null,null];function U(e,t){var n=e[1];return[t.payload,n+1]}var F=function(){return[null,0]};function M(e,t){void 0===t&&(t={});var n=t,r=n.getDisplayName,o=void 0===r?function(e){return"ConnectAdvanced("+e+")"}:r,s=n.methodName,l=void 0===s?"connectAdvanced":s,c=n.renderCountProp,u=void 0===c?void 0:c,f=n.shouldHandleStateChanges,p=void 0===f||f,d=n.storeKey,h=void 0===d?"store":d,m=n.withRef,g=void 0!==m&&m,y=n.forwardRef,b=void 0!==y&&y,A=n.context,v=void 0===A?C:A,w=O(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]);L()(void 0===u,"renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension"),L()(!g,"withRef is removed. To access the wrapped instance, use a ref on the connected component");L()("store"===h,"storeKey has been removed and does not do anything. To use a custom Redux store for specific components, create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect");var _=v;return function(t){var n=t.displayName||t.name||"Component",r=o(n),s=S({},w,{getDisplayName:o,methodName:l,renderCountProp:u,shouldHandleStateChanges:p,storeKey:h,displayName:r,wrappedComponentName:n,WrappedComponent:t}),c=w.pure;var f=c?i.useMemo:function(e){return e()};function d(n){var o=Object(i.useMemo)((function(){var e=n.forwardedRef,t=O(n,["forwardedRef"]);return[n.context,e,t]}),[n]),l=o[0],c=o[1],u=o[2],d=Object(i.useMemo)((function(){return l&&l.Consumer&&Object(R.isContextConsumer)(a.a.createElement(l.Consumer,null))?l:_}),[l,_]),h=Object(i.useContext)(d),m=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch),g=Boolean(h)&&Boolean(h.store);L()(m||g,'Could not find "store" in the context of "'+r+'". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to '+r+" in connect options.");var y=m?n.store:h.store,b=Object(i.useMemo)((function(){return function(t){return e(t.dispatch,s)}(y)}),[y]),A=Object(i.useMemo)((function(){if(!p)return j;var e=new k(y,m?null:h.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[y,m,h]),v=A[0],C=A[1],w=Object(i.useMemo)((function(){return m?h:S({},h,{subscription:v})}),[m,h,v]),E=Object(i.useReducer)(U,I,F),x=E[0][0],T=E[1];if(x&&x.error)throw x.error;var B=Object(i.useRef)(),N=Object(i.useRef)(u),P=Object(i.useRef)(),D=Object(i.useRef)(!1),M=f((function(){return P.current&&u===N.current?P.current:b(y.getState(),u)}),[y,x,u]);q((function(){N.current=u,B.current=M,D.current=!1,P.current&&(P.current=null,C())})),q((function(){if(p){var e=!1,t=null,n=function(){if(!e){var n,r,o=y.getState();try{n=b(o,N.current)}catch(e){r=e,t=e}r||(t=null),n===B.current?D.current||C():(B.current=n,P.current=n,D.current=!0,T({type:"STORE_UPDATED",payload:{error:r}}))}};v.onStateChange=n,v.trySubscribe(),n();return function(){if(e=!0,v.tryUnsubscribe(),v.onStateChange=null,t)throw t}}}),[y,v,b]);var z=Object(i.useMemo)((function(){return a.a.createElement(t,S({},M,{ref:c}))}),[c,t,M]);return Object(i.useMemo)((function(){return p?a.a.createElement(d.Provider,{value:w},z):z}),[d,z,w])}var m=c?a.a.memo(d):d;if(m.WrappedComponent=t,m.displayName=r,b){var g=a.a.forwardRef((function(e,t){return a.a.createElement(m,S({},e,{forwardedRef:t}))}));return g.displayName=r,g.WrappedComponent=t,P()(g,t)}return P()(m,t)}}var z=Object.prototype.hasOwnProperty;function H(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function G(e,t){if(H(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!z.call(t,n[o])||!H(e[n[o]],t[n[o]]))return!1;return!0}var V=n(8);function W(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function X(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function Y(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=X(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=X(o),o=r(t,n)),o},r}}var K=[function(e){return"function"==typeof e?Y(e):void 0},function(e){return e?void 0:W((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?W((function(t){return Object(V.bindActionCreators)(e,t)})):void 0}];var $=[function(e){return"function"==typeof e?Y(e):void 0},function(e){return e?void 0:W((function(){return{}}))}];function Q(e,t,n){return S({},n,{},e,{},t)}var J=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,s){var l=e(t,n,s);return a?o&&i(l,r)||(r=l):(a=!0,r=l),r}}}(e):void 0},function(e){return e?void 0:function(){return Q}}];function Z(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function ee(e,t,n,r,o){var i,a,s,l,c,u=o.areStatesEqual,f=o.areOwnPropsEqual,p=o.areStatePropsEqual,d=!1;function h(o,d){var h,m,g=!f(d,a),y=!u(o,i);return i=o,a=d,g&&y?(s=e(i,a),t.dependsOnOwnProps&&(l=t(r,a)),c=n(s,l,a)):g?(e.dependsOnOwnProps&&(s=e(i,a)),t.dependsOnOwnProps&&(l=t(r,a)),c=n(s,l,a)):y?(h=e(i,a),m=!p(h,s),s=h,m&&(c=n(s,l,a)),c):c}return function(o,u){return d?h(o,u):(s=e(i=o,a=u),l=t(r,a),c=n(s,l,a),d=!0,c)}}function te(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=O(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),s=r(e,i),l=o(e,i);return(i.pure?ee:Z)(a,s,l,e,i)}function ne(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function re(e,t){return e===t}var oe,ie,ae,se,le,ce,ue,fe,pe,de,he,me,ge=(ae=(ie=void 0===oe?{}:oe).connectHOC,se=void 0===ae?M:ae,le=ie.mapStateToPropsFactories,ce=void 0===le?$:le,ue=ie.mapDispatchToPropsFactories,fe=void 0===ue?K:ue,pe=ie.mergePropsFactories,de=void 0===pe?J:pe,he=ie.selectorFactory,me=void 0===he?te:he,function(e,t,n,r){void 0===r&&(r={});var o=r,i=o.pure,a=void 0===i||i,s=o.areStatesEqual,l=void 0===s?re:s,c=o.areOwnPropsEqual,u=void 0===c?G:c,f=o.areStatePropsEqual,p=void 0===f?G:f,d=o.areMergedPropsEqual,h=void 0===d?G:d,m=O(o,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),g=ne(e,ce,"mapStateToProps"),y=ne(t,fe,"mapDispatchToProps"),b=ne(n,de,"mergeProps");return se(me,S({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:g,initMapDispatchToProps:y,initMergeProps:b,pure:a,areStatesEqual:l,areOwnPropsEqual:u,areStatePropsEqual:p,areMergedPropsEqual:h},m))});function ye(){var e=Object(i.useContext)(C);return L()(e,"could not find react-redux context value; please ensure the component is wrapped in a <Provider>"),e}function be(e){void 0===e&&(e=C);var t=e===C?ye:function(){return Object(i.useContext)(e)};return function(){return t().store}}var Ae=be();!function(e){void 0===e&&(e=C);var t=e===C?Ae:be(e)}();var ve=function(e,t){return e===t};var Ce;!function(e){void 0===e&&(e=C);var t=e===C?ye:function(){return Object(i.useContext)(e)}}();function we(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}function _e(e){return"/"===e.charAt(0)}function Ee(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}Ce=s.unstable_batchedUpdates,w=Ce;var xe=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],i=e&&_e(e),a=t&&_e(t),s=i||a;if(e&&_e(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var l=o[o.length-1];n="."===l||".."===l||""===l}else n=!1;for(var c=0,u=o.length;u>=0;u--){var f=o[u];"."===f?Ee(o,u):".."===f?(Ee(o,u),c++):c&&(Ee(o,u),c--)}if(!s)for(;c--;c)o.unshift("..");!s||""===o[0]||o[0]&&_e(o[0])||o.unshift("");var p=o.join("/");return n&&"/"!==p.substr(-1)&&(p+="/"),p};var ke=!0,Te="Invariant failed";var Be=function(e,t){if(!e)throw ke?new Error(Te):new Error(Te+": "+(t||""))};function Se(e){return"/"===e.charAt(0)?e:"/"+e}function Oe(e){return"/"===e.charAt(0)?e.substr(1):e}function Ne(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function Pe(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function De(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function Le(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=S({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=xe(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function Re(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):o(!0):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var qe=!("undefined"==typeof window||!window.document||!window.document.createElement);function Ie(e,t){t(window.confirm(e))}var je="popstate",Ue="hashchange";function Fe(){try{return window.history.state||{}}catch(e){return{}}}function Me(e){void 0===e&&(e={}),qe||Be(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),i=e,a=i.forceRefresh,s=void 0!==a&&a,l=i.getUserConfirmation,c=void 0===l?Ie:l,u=i.keyLength,f=void 0===u?6:u,p=e.basename?Pe(Se(e.basename)):"";function d(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return p&&(i=Ne(i,p)),Le(i,r,n)}function h(){return Math.random().toString(36).substr(2,f)}var m=Re();function g(e){S(B,e),B.length=n.length,m.notifyListeners(B.location,B.action)}function y(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||v(d(e.state))}function b(){v(d(Fe()))}var A=!1;function v(e){if(A)A=!1,g();else{m.confirmTransitionTo(e,"POP",c,(function(t){t?g({action:"POP",location:e}):function(e){var t=B.location,n=w.indexOf(t.key);-1===n&&(n=0);var r=w.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(A=!0,E(o))}(e)}))}}var C=d(Fe()),w=[C.key];function _(e){return p+De(e)}function E(e){n.go(e)}var x=0;function k(e){1===(x+=e)&&1===e?(window.addEventListener(je,y),o&&window.addEventListener(Ue,b)):0===x&&(window.removeEventListener(je,y),o&&window.removeEventListener(Ue,b))}var T=!1;var B={length:n.length,action:"POP",location:C,createHref:_,push:function(e,t){var o=Le(e,t,h(),B.location);m.confirmTransitionTo(o,"PUSH",c,(function(e){if(e){var t=_(o),i=o.key,a=o.state;if(r)if(n.pushState({key:i,state:a},null,t),s)window.location.href=t;else{var l=w.indexOf(B.location.key),c=w.slice(0,l+1);c.push(o.key),w=c,g({action:"PUSH",location:o})}else window.location.href=t}}))},replace:function(e,t){var o=Le(e,t,h(),B.location);m.confirmTransitionTo(o,"REPLACE",c,(function(e){if(e){var t=_(o),i=o.key,a=o.state;if(r)if(n.replaceState({key:i,state:a},null,t),s)window.location.replace(t);else{var l=w.indexOf(B.location.key);-1!==l&&(w[l]=o.key),g({action:"REPLACE",location:o})}else window.location.replace(t)}}))},go:E,goBack:function(){E(-1)},goForward:function(){E(1)},block:function(e){void 0===e&&(e=!1);var t=m.setPrompt(e);return T||(k(1),T=!0),function(){return T&&(T=!1,k(-1)),t()}},listen:function(e){var t=m.appendListener(e);return k(1),function(){k(-1),t()}}};return B}var ze="hashchange",He={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+Oe(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:Oe,decodePath:Se},slash:{encodePath:Se,decodePath:Se}};function Ge(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function Ve(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function We(e){window.location.replace(Ge(window.location.href)+"#"+e)}function Xe(e){void 0===e&&(e={}),qe||Be(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,o=void 0===r?Ie:r,i=n.hashType,a=void 0===i?"slash":i,s=e.basename?Pe(Se(e.basename)):"",l=He[a],c=l.encodePath,u=l.decodePath;function f(){var e=u(Ve());return s&&(e=Ne(e,s)),Le(e)}var p=Re();function d(e){S(x,e),x.length=t.length,p.notifyListeners(x.location,x.action)}var h=!1,m=null;function g(){var e,t,n=Ve(),r=c(n);if(n!==r)We(r);else{var i=f(),a=x.location;if(!h&&(t=i,(e=a).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(m===De(i))return;m=null,function(e){if(h)h=!1,d();else{p.confirmTransitionTo(e,"POP",o,(function(t){t?d({action:"POP",location:e}):function(e){var t=x.location,n=v.lastIndexOf(De(t));-1===n&&(n=0);var r=v.lastIndexOf(De(e));-1===r&&(r=0);var o=n-r;o&&(h=!0,C(o))}(e)}))}}(i)}}var y=Ve(),b=c(y);y!==b&&We(b);var A=f(),v=[De(A)];function C(e){t.go(e)}var w=0;function _(e){1===(w+=e)&&1===e?window.addEventListener(ze,g):0===w&&window.removeEventListener(ze,g)}var E=!1;var x={length:t.length,action:"POP",location:A,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=Ge(window.location.href)),n+"#"+c(s+De(e))},push:function(e,t){var n=Le(e,void 0,void 0,x.location);p.confirmTransitionTo(n,"PUSH",o,(function(e){if(e){var t=De(n),r=c(s+t);if(Ve()!==r){m=t,function(e){window.location.hash=e}(r);var o=v.lastIndexOf(De(x.location)),i=v.slice(0,o+1);i.push(t),v=i,d({action:"PUSH",location:n})}else d()}}))},replace:function(e,t){var n=Le(e,void 0,void 0,x.location);p.confirmTransitionTo(n,"REPLACE",o,(function(e){if(e){var t=De(n),r=c(s+t);Ve()!==r&&(m=t,We(r));var o=v.indexOf(De(x.location));-1!==o&&(v[o]=t),d({action:"REPLACE",location:n})}}))},go:C,goBack:function(){C(-1)},goForward:function(){C(1)},block:function(e){void 0===e&&(e=!1);var t=p.setPrompt(e);return E||(_(1),E=!0),function(){return E&&(E=!1,_(-1)),t()}},listen:function(e){var t=p.appendListener(e);return _(1),function(){_(-1),t()}}};return x}function Ye(e,t,n){return Math.min(Math.max(e,t),n)}var Ke=n(41),$e=n.n(Ke),Qe=n(81),Je=n.n(Qe),Ze=1073741823;var et=a.a.createContext||function(e,t){var n,r,o="__create-react-context-"+Je()()+"__",a=function(e){function n(){var t,n,r;return(t=e.apply(this,arguments)||this).emitter=(n=t.props.value,r=[],{on:function(e){r.push(e)},off:function(e){r=r.filter((function(t){return t!==e}))},get:function(){return n},set:function(e,t){n=e,r.forEach((function(e){return e(n,t)}))}}),t}$e()(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[o]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((i=r)===(a=o)?0!==i||1/i==1/a:i!=i&&a!=a)?n=0:(n="function"==typeof t?t(r,o):Ze,0!==(n|=0)&&this.emitter.set(e.value,n))}var i,a},r.render=function(){return this.props.children},n}(i.Component);a.childContextTypes=((n={})[o]=v.a.object.isRequired,n);var s=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}$e()(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?Ze:t},r.componentDidMount=function(){this.context[o]&&this.context[o].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?Ze:e},r.componentWillUnmount=function(){this.context[o]&&this.context[o].off(this.onUpdate)},r.getValue=function(){return this.context[o]?this.context[o].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(i.Component);return s.contextTypes=((r={})[o]=v.a.object,r),{Provider:a,Consumer:s}},tt=n(42),nt=n.n(tt),rt=function(e){var t=et();return t.displayName=e,t}("Router"),ot=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}we(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return a.a.createElement(rt.Provider,{children:this.props.children||null,value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}})},t}(a.a.Component);a.a.Component;a.a.Component;var it={},at=1e4,st=0;function lt(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,i=void 0!==o&&o,a=n.strict,s=void 0!==a&&a,l=n.sensitive,c=void 0!==l&&l;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=it[n]||(it[n]={});if(r[e])return r[e];var o=[],i={regexp:nt()(e,o,t),keys:o};return st<at&&(r[e]=i,st++),i}(n,{end:i,strict:s,sensitive:c}),o=r.regexp,a=r.keys,l=o.exec(e);if(!l)return null;var u=l[0],f=l.slice(1),p=e===u;return i&&!p?null:{path:n,url:"/"===n&&""===u?"/":u,isExact:p,params:a.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var ct=function(e){function t(){return e.apply(this,arguments)||this}return we(t,e),t.prototype.render=function(){var e=this;return a.a.createElement(rt.Consumer,null,(function(t){t||Be(!1);var n=e.props.location||t.location,r=S({},t,{location:n,match:e.props.computedMatch?e.props.computedMatch:e.props.path?lt(n.pathname,e.props):t.match}),o=e.props,i=o.children,s=o.component,l=o.render;return Array.isArray(i)&&0===i.length&&(i=null),a.a.createElement(rt.Provider,{value:r},r.match?i?"function"==typeof i?i(r):i:s?a.a.createElement(s,r):l?l(r):null:"function"==typeof i?i(r):null)}))},t}(a.a.Component);function ut(e){return"/"===e.charAt(0)?e:"/"+e}function ft(e,t){if(!e)return t;var n=ut(e);return 0!==t.pathname.indexOf(n)?t:S({},t,{pathname:t.pathname.substr(n.length)})}function pt(e){return"string"==typeof e?e:De(e)}function dt(e){return function(){Be(!1)}}function ht(){}a.a.Component;var mt=function(e){function t(){return e.apply(this,arguments)||this}return we(t,e),t.prototype.render=function(){var e=this;return a.a.createElement(rt.Consumer,null,(function(t){t||Be(!1);var n,r,o=e.props.location||t.location;return a.a.Children.forEach(e.props.children,(function(e){if(null==r&&a.a.isValidElement(e)){n=e;var i=e.props.path||e.props.from;r=i?lt(o.pathname,S({},e.props,{path:i})):t.match}})),r?a.a.cloneElement(n,{location:o,computedMatch:r}):null}))},t}(a.a.Component);function gt(e){var t="withRouter("+(e.displayName||e.name)+")",n=function(t){var n=t.wrappedComponentRef,r=O(t,["wrappedComponentRef"]);return a.a.createElement(rt.Consumer,null,(function(t){return t||Be(!1),a.a.createElement(e,S({},r,t,{ref:n}))}))};return n.displayName=t,n.WrappedComponent=e,P()(n,e)}a.a.useContext;var yt="@@router/LOCATION_CHANGE",bt=function(e){return function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return{type:"@@router/CALL_HISTORY_METHOD",payload:{method:e,args:n}}}},At=(bt("push"),bt("replace"));bt("go"),bt("goBack"),bt("goForward");function vt(e){return(vt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var Ct=function(e){var t=e.getIn,n=e.toJS,r=function(e){var r,o=n(t(e,["router"]));if(null==(r=o)||"object"!==vt(r)||!t(r,["location"])||!t(r,["action"]))throw'Could not find router reducer in state tree, it must be mounted under "router"';return o},o=function(e){return n(t(r(e),["location"]))};return{getLocation:o,getAction:function(e){return n(t(r(e),["action"]))},getRouter:r,getSearch:function(e){return n(t(r(e),["location","search"]))},getHash:function(e){return n(t(r(e),["location","hash"]))},createMatchSelector:function(e){var t=null,n=null;return function(r){var i=(o(r)||{}).pathname;if(i===t)return n;t=i;var a=lt(i,e);return a&&n&&a.url===n.url||(n=a),n}}}};function wt(e){return(wt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _t(){return(_t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Et(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function xt(e,t){return!t||"object"!==wt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function kt(e){return(kt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Tt(e,t){return(Tt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Bt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function St(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){Ot(e,t,n[t])}))}return e}function Ot(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Nt=function(e){var t=e&&e.search;if("string"!=typeof t||0===t.length)return St({},e,{query:{}});var n=t.substring(1).split("&").reduce((function(e,t){var n=Bt(t.split("="),2);return St({},e,Ot({},n[0],n[1]))}),{});return St({},e,{query:n})},Pt=function(e){var t=e.fromJS,n=e.merge;return function(e){var r=t({location:Nt(e.location),action:e.action});return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:r,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=o.type,a=o.payload;if(i===yt){var s=a.location,l=a.action,c=a.isFirstRendering;return c?e:n(e,{location:t(Nt(s)),action:l})}return e}}};function Dt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Lt={fromJS:function(e){return e},getIn:function(e,t){if(!e)return e;var n=t.length;if(n){for(var r=e,o=0;o<n&&r;++o)r=r[t[o]];return r}},merge:function(e,t){return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){Dt(e,t,n[t])}))}return e}({},e,t)},toJS:function(e){return e}},Rt=function(e){var t=Ct(e).getLocation,n=function(e){function n(e){var r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),r=xt(this,kt(n).call(this,e));var o=e.store,i=e.history,a=e.onLocationChanged;r.inTimeTravelling=!1,r.unsubscribe=o.subscribe((function(){var n=t(o.getState()),a=n.pathname,s=n.search,l=n.hash,c=i.location,u=c.pathname,f=c.search,p=c.hash;"PUSH"!==e.history.action||u===a&&f===s&&p===l||(r.inTimeTravelling=!0,i.push({pathname:a,search:s,hash:l}))}));var s=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];r.inTimeTravelling?r.inTimeTravelling=!1:a(e,t,n)};return r.unlisten=i.listen(s),s(i.location,i.action,!0),r}var r,o,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Tt(e,t)}(n,e),r=n,(o=[{key:"componentWillUnmount",value:function(){this.unlisten(),this.unsubscribe()}},{key:"render",value:function(){var e=this.props,t=e.history,n=e.children;return a.a.createElement(ot,{history:t},n)}}])&&Et(r.prototype,o),i&&Et(r,i),n}(i.PureComponent);n.propTypes={store:v.a.shape({getState:v.a.func.isRequired,subscribe:v.a.func.isRequired}).isRequired,history:v.a.shape({action:v.a.string.isRequired,listen:v.a.func.isRequired,location:v.a.object.isRequired,push:v.a.func.isRequired}).isRequired,basename:v.a.string,children:v.a.oneOfType([v.a.func,v.a.node]),onLocationChanged:v.a.func.isRequired};var r=function(e){var t=e.context||C;if(null==t)throw"Please upgrade to react-redux v6";return a.a.createElement(t.Consumer,null,(function(t){var r=t.store;return a.a.createElement(n,_t({store:r},e))}))};return r.propTypes={context:v.a.object},ge(null,(function(e){return{onLocationChanged:function(t,n,r){return e(function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return{type:yt,payload:{location:e,action:t,isFirstRendering:n}}}(t,n,r))}}}))(r)}(Lt),qt=Pt(Lt),It=Ct(Lt);It.getLocation,It.getAction,It.getHash,It.getSearch,It.createMatchSelector,n(95),a.a.Component;a.a.Component;var jt=function(e,t){return"function"==typeof e?e(t):e},Ut=function(e,t){return"string"==typeof e?Le(e,null,null,t):e},Ft=function(e){return e},Mt=a.a.forwardRef;void 0===Mt&&(Mt=Ft);var zt=Mt((function(e,t){var n=e.innerRef,r=e.navigate,o=e.onClick,i=O(e,["innerRef","navigate","onClick"]),s=i.target,l=S({},i,{onClick:function(e){try{o&&o(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||s&&"_self"!==s||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return l.ref=Ft!==Mt&&t||n,a.a.createElement("a",l)}));var Ht=Mt((function(e,t){var n=e.component,r=void 0===n?zt:n,o=e.replace,i=e.to,s=e.innerRef,l=O(e,["component","replace","to","innerRef"]);return a.a.createElement(rt.Consumer,null,(function(e){e||Be(!1);var n=e.history,c=Ut(jt(i,e.location),e.location),u=c?n.createHref(c):"",f=S({},l,{href:u,navigate:function(){var t=jt(i,e.location);(o?n.replace:n.push)(t)}});return Ft!==Mt?f.ref=t||s:f.innerRef=s,a.a.createElement(r,f)}))})),Gt=function(e){return e},Vt=a.a.forwardRef;void 0===Vt&&(Vt=Gt);Vt((function(e,t){var n=e["aria-current"],r=void 0===n?"page":n,o=e.activeClassName,i=void 0===o?"active":o,s=e.activeStyle,l=e.className,c=e.exact,u=e.isActive,f=e.location,p=e.strict,d=e.style,h=e.to,m=e.innerRef,g=O(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","strict","style","to","innerRef"]);return a.a.createElement(rt.Consumer,null,(function(e){e||Be(!1);var n=f||e.location,o=Ut(jt(h,n),n),y=o.pathname,b=y&&y.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),A=b?lt(n.pathname,{path:b,exact:c,strict:p}):null,v=!!(u?u(A,n):A),C=v?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(l,i):l,w=v?S({},d,{},s):d,_=S({"aria-current":v&&r||null,className:C,style:w,to:o},g);return Gt!==Vt?_.ref=t||m:_.innerRef=m,a.a.createElement(Ht,_)}))})),n(100);var Wt=n(25),Xt=n.n(Wt),Yt=!1,Kt=a.a.createContext(null),$t="unmounted",Qt="exited",Jt="entering",Zt="entered",en=function(e){function t(t,n){var r;r=e.call(this,t,n)||this;var o,i=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?i?(o=Qt,r.appearStatus=Jt):o=Zt:o=t.unmountOnExit||t.mountOnEnter?$t:Qt,r.state={status:o},r.nextCallback=null,r}we(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&t.status===$t?{status:Qt}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==Jt&&n!==Zt&&(t=Jt):n!==Jt&&n!==Zt||(t="exiting")}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t){this.cancelNextCallback();var n=l.a.findDOMNode(this);t===Jt?this.performEnter(n,e):this.performExit(n)}else this.props.unmountOnExit&&this.state.status===Qt&&this.setState({status:$t})},n.performEnter=function(e,t){var n=this,r=this.props.enter,o=this.context?this.context.isMounting:t,i=this.getTimeouts(),a=o?i.appear:i.enter;!t&&!r||Yt?this.safeSetState({status:Zt},(function(){n.props.onEntered(e)})):(this.props.onEnter(e,o),this.safeSetState({status:Jt},(function(){n.props.onEntering(e,o),n.onTransitionEnd(e,a,(function(){n.safeSetState({status:Zt},(function(){n.props.onEntered(e,o)}))}))})))},n.performExit=function(e){var t=this,n=this.props.exit,r=this.getTimeouts();n&&!Yt?(this.props.onExit(e),this.safeSetState({status:"exiting"},(function(){t.props.onExiting(e),t.onTransitionEnd(e,r.exit,(function(){t.safeSetState({status:Qt},(function(){t.props.onExited(e)}))}))}))):this.safeSetState({status:Qt},(function(){t.props.onExited(e)}))},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t,n){this.setNextCallback(n);var r=null==t&&!this.props.addEndListener;e&&!r?(this.props.addEndListener&&this.props.addEndListener(e,this.nextCallback),null!=t&&setTimeout(this.nextCallback,t)):setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if(e===$t)return null;var t=this.props,n=t.children,r=O(t,["children"]);if(delete r.in,delete r.mountOnEnter,delete r.unmountOnExit,delete r.appear,delete r.enter,delete r.exit,delete r.timeout,delete r.addEndListener,delete r.onEnter,delete r.onEntering,delete r.onEntered,delete r.onExit,delete r.onExiting,delete r.onExited,"function"==typeof n)return a.a.createElement(Kt.Provider,{value:null},n(e,r));var o=a.a.Children.only(n);return(a.a.createElement(Kt.Provider,{value:null},a.a.cloneElement(o,r)))},t}(a.a.Component);function tn(){}en.contextType=Kt,en.propTypes={},en.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:tn,onEntering:tn,onEntered:tn,onExit:tn,onExiting:tn,onExited:tn},en.UNMOUNTED=0,en.EXITED=1,en.ENTERING=2,en.ENTERED=3,en.EXITING=4;var nn=en;function rn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function on(e,t){var n=Object.create(null);return e&&i.Children.map(e,(function(e){return e})).forEach((function(e){n[e.key]=function(e){return t&&Object(i.isValidElement)(e)?t(e):e}(e)})),n}function an(e,t,n){return null!=n[t]?n[t]:e.props[t]}function sn(e,t,n){var r=on(e.children),o=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),i=[];for(var a in e)a in t?i.length&&(o[a]=i,i=[]):i.push(a);var s={};for(var l in t){if(o[l])for(r=0;r<o[l].length;r++){var c=o[l][r];s[o[l][r]]=n(c)}s[l]=n(l)}for(r=0;r<i.length;r++)s[i[r]]=n(i[r]);return s}(t,r);return Object.keys(o).forEach((function(a){var s=o[a];if(Object(i.isValidElement)(s)){var l=a in t,c=a in r,u=t[a],f=Object(i.isValidElement)(u)&&!u.props.in;!c||l&&!f?c||!l||f?c&&l&&Object(i.isValidElement)(u)&&(o[a]=Object(i.cloneElement)(s,{onExited:n.bind(null,s),in:u.props.in,exit:an(s,"exit",e),enter:an(s,"enter",e)})):o[a]=Object(i.cloneElement)(s,{in:!1}):o[a]=Object(i.cloneElement)(s,{onExited:n.bind(null,s),in:!0,exit:an(s,"exit",e),enter:an(s,"enter",e)})}})),o}var ln=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},cn=function(e){function t(t,n){var r,o=(r=e.call(this,t,n)||this).handleExited.bind(rn(rn(r)));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}we(t,e);var n=t.prototype;return n.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},n.componentWillUnmount=function(){this.mounted=!1},t.getDerivedStateFromProps=function(e,t){var n,r,o=t.children,a=t.handleExited;return{children:t.firstRender?(n=e,r=a,on(n.children,(function(e){return Object(i.cloneElement)(e,{onExited:r.bind(null,e),in:!0,appear:an(e,"appear",n),enter:an(e,"enter",n),exit:an(e,"exit",n)})}))):sn(e,o,a),firstRender:!1}},n.handleExited=function(e,t){var n=on(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=S({},t.children);return delete n[e.key],{children:n}})))},n.render=function(){var e=this.props,t=e.component,n=e.childFactory,r=O(e,["component","childFactory"]),o=this.state.contextValue,i=ln(this.state.children).map(n);return delete r.appear,delete r.enter,delete r.exit,null===t?a.a.createElement(Kt.Provider,{value:o},i):a.a.createElement(Kt.Provider,{value:o},a.a.createElement(t,r,i))},t}(a.a.Component);cn.propTypes={},cn.defaultProps={component:"div",childFactory:function(e){return e}};var un=cn,fn={TOP_LEFT:"top-left",TOP_RIGHT:"top-right",TOP_CENTER:"top-center",BOTTOM_LEFT:"bottom-left",BOTTOM_RIGHT:"bottom-right",BOTTOM_CENTER:"bottom-center"},pn={INFO:"info",SUCCESS:"success",WARNING:"warning",ERROR:"error",DEFAULT:"default"},dn={SHOW:0,CLEAR:1,DID_MOUNT:2,WILL_UNMOUNT:3,ON_CHANGE:4},hn=function(){},mn="Toastify";function gn(e){return"number"==typeof e&&!isNaN(e)&&e>0}function yn(e){return Object.keys(e).map((function(t){return e[t]}))}var bn=!("undefined"==typeof window||!window.document||!window.document.createElement);var An,vn=((An=function(e,t,n){var r=e[t];return!1===r||gn(r)?null:new Error(n+" expect "+t+" \n      to be a valid Number > 0 or equal to false. "+r+" given.")}).isRequired=function(e,t,n){if(void 0===e[t])return new Error("The prop "+t+" is marked as required in \n      "+n+", but its value is undefined.");An(e,t,n)},An),Cn={list:new Map,on:function(e,t){return this.list.has(e)||this.list.set(e,[]),this.list.get(e).push(t),this},off:function(e){return this.list.delete(e),this},emit:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];this.list.has(e)&&this.list.get(e).forEach((function(e){return setTimeout((function(){e.apply(void 0,n)}),0)}))}};function wn(e){var t=e.enter,n=e.exit,r=e.duration,o=void 0===r?750:r,i=e.appendPosition,s=void 0!==i&&i;return function(e){var r,i,l=e.children,c=e.position,u=e.preventExitTransition,f=O(e,["children","position","preventExitTransition"]),p=s?t+"--"+c:t,d=s?n+"--"+c:n;Array.isArray(o)&&2===o.length?(r=o[0],i=o[1]):r=i=o;return a.a.createElement(nn,S({},f,{timeout:u?0:{enter:r,exit:i},onEnter:function(e){e.classList.add(p),e.style.animationFillMode="forwards",e.style.animationDuration=.001*r+"s"},onEntered:function(e){e.classList.remove(p),e.style.cssText=""},onExit:u?hn:function(e){e.classList.add(d),e.style.animationFillMode="forwards",e.style.animationDuration=.001*i+"s"}}),l)}}function _n(e){var t,n,r=e.delay,o=e.isRunning,i=e.closeToast,s=e.type,l=e.hide,c=e.className,u=e.style,f=e.controlledProgress,p=e.progress,d=e.rtl,h=S({},u,{animationDuration:r+"ms",animationPlayState:o?"running":"paused",opacity:l?0:1,transform:f?"scaleX("+p+")":null}),m=Xt()(mn+"__progress-bar",f?mn+"__progress-bar--controlled":mn+"__progress-bar--animated",mn+"__progress-bar--"+s,((t={})[mn+"__progress-bar--rtl"]=d,t),c),g=((n={})[f&&p>=1?"onTransitionEnd":"onAnimationEnd"]=f&&p<1?null:i,n);return a.a.createElement("div",S({className:m,style:h},g))}function En(e){return e.targetTouches&&e.targetTouches.length>=1?e.targetTouches[0].clientX:e.clientX}_n.propTypes={delay:vn.isRequired,isRunning:v.a.bool.isRequired,closeToast:v.a.func.isRequired,rtl:v.a.bool.isRequired,type:v.a.string,hide:v.a.bool,className:v.a.oneOfType([v.a.string,v.a.object]),progress:v.a.number,controlledProgress:v.a.bool},_n.defaultProps={type:pn.DEFAULT,hide:!1};var xn=bn&&/(msie|trident)/i.test(navigator.userAgent),kn=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).state={isRunning:!0,preventExitTransition:!1},t.flag={canCloseOnClick:!0,canDrag:!1},t.drag={start:0,x:0,y:0,deltaX:0,removalDistance:0},t.boundingRect=null,t.ref=null,t.pauseToast=function(){t.props.autoClose&&t.setState({isRunning:!1})},t.playToast=function(){t.props.autoClose&&t.setState({isRunning:!0})},t.onDragStart=function(e){t.flag.canCloseOnClick=!0,t.flag.canDrag=!0,t.boundingRect=t.ref.getBoundingClientRect(),t.ref.style.transition="",t.drag.start=t.drag.x=En(e.nativeEvent),t.drag.removalDistance=t.ref.offsetWidth*(t.props.draggablePercent/100)},t.onDragMove=function(e){t.flag.canDrag&&(t.state.isRunning&&t.pauseToast(),t.drag.x=En(e),t.drag.deltaX=t.drag.x-t.drag.start,t.drag.y=function(e){return e.targetTouches&&e.targetTouches.length>=1?e.targetTouches[0].clientY:e.clientY}(e),t.drag.start!==t.drag.x&&(t.flag.canCloseOnClick=!1),t.ref.style.transform="translateX("+t.drag.deltaX+"px)",t.ref.style.opacity=1-Math.abs(t.drag.deltaX/t.drag.removalDistance))},t.onDragEnd=function(e){if(t.flag.canDrag){if(t.flag.canDrag=!1,Math.abs(t.drag.deltaX)>t.drag.removalDistance)return void t.setState({preventExitTransition:!0},t.props.closeToast);t.ref.style.transition="transform 0.2s, opacity 0.2s",t.ref.style.transform="translateX(0)",t.ref.style.opacity=1}},t.onDragTransitionEnd=function(){if(t.boundingRect){var e=t.boundingRect,n=e.top,r=e.bottom,o=e.left,i=e.right;t.props.pauseOnHover&&t.drag.x>=o&&t.drag.x<=i&&t.drag.y>=n&&t.drag.y<=r?t.pauseToast():t.playToast()}},t.onExitTransitionEnd=function(){if(xn)t.props.onExited();else{var e=t.ref.scrollHeight,n=t.ref.style;requestAnimationFrame((function(){n.minHeight="initial",n.height=e+"px",n.transition="all 0.4s ",requestAnimationFrame((function(){n.height=0,n.padding=0,n.margin=0})),setTimeout((function(){return t.props.onExited()}),400)}))}},t}we(t,e);var n=t.prototype;return n.componentDidMount=function(){this.props.onOpen(this.props.children.props),this.props.draggable&&this.bindDragEvents(),this.props.pauseOnFocusLoss&&this.bindFocusEvents()},n.componentDidUpdate=function(e){e.draggable!==this.props.draggable&&(this.props.draggable?this.bindDragEvents():this.unbindDragEvents()),e.pauseOnFocusLoss!==this.props.pauseOnFocusLoss&&(this.props.pauseOnFocusLoss?this.bindFocusEvents():this.unbindFocusEvents())},n.componentWillUnmount=function(){this.props.onClose(this.props.children.props),this.props.draggable&&this.unbindDragEvents(),this.props.pauseOnFocusLoss&&this.unbindFocusEvents()},n.bindFocusEvents=function(){window.addEventListener("focus",this.playToast),window.addEventListener("blur",this.pauseToast)},n.unbindFocusEvents=function(){window.removeEventListener("focus",this.playToast),window.removeEventListener("blur",this.pauseToast)},n.bindDragEvents=function(){document.addEventListener("mousemove",this.onDragMove),document.addEventListener("mouseup",this.onDragEnd),document.addEventListener("touchmove",this.onDragMove),document.addEventListener("touchend",this.onDragEnd)},n.unbindDragEvents=function(){document.removeEventListener("mousemove",this.onDragMove),document.removeEventListener("mouseup",this.onDragEnd),document.removeEventListener("touchmove",this.onDragMove),document.removeEventListener("touchend",this.onDragEnd)},n.render=function(){var e,t=this,n=this.props,r=n.closeButton,o=n.children,i=n.autoClose,s=n.pauseOnHover,l=n.onClick,c=n.closeOnClick,u=n.type,f=n.hideProgressBar,p=n.closeToast,d=n.transition,h=n.position,m=n.className,g=n.bodyClassName,y=n.progressClassName,b=n.progressStyle,A=n.updateId,v=n.role,C=n.progress,w=n.rtl,_={className:Xt()(mn+"__toast",mn+"__toast--"+u,(e={},e[mn+"__toast--rtl"]=w,e),m)};i&&s&&(_.onMouseEnter=this.pauseToast,_.onMouseLeave=this.playToast),c&&(_.onClick=function(e){l&&l(e),t.flag.canCloseOnClick&&p()});var E=parseFloat(C)===C;return a.a.createElement(d,{in:this.props.in,appear:!0,onExited:this.onExitTransitionEnd,position:h,preventExitTransition:this.state.preventExitTransition},a.a.createElement("div",S({onClick:l},_,{ref:function(e){return t.ref=e},onMouseDown:this.onDragStart,onTouchStart:this.onDragStart,onMouseUp:this.onDragTransitionEnd,onTouchEnd:this.onDragTransitionEnd}),a.a.createElement("div",S({},this.props.in&&{role:v},{className:Xt()(mn+"__toast-body",g)}),o),r&&r,(i||E)&&a.a.createElement(_n,S({},A&&!E?{key:"pb-"+A}:{},{rtl:w,delay:i,isRunning:this.state.isRunning,closeToast:p,hide:f,type:u,style:b,className:y,controlledProgress:E,progress:C}))))},t}(i.Component);function Tn(e){var t=e.closeToast,n=e.type,r=e.ariaLabel;return a.a.createElement("button",{className:mn+"__close-button "+mn+"__close-button--"+n,type:"button",onClick:function(e){e.stopPropagation(),t(e)},"aria-label":r},"✖")}kn.propTypes={closeButton:v.a.oneOfType([v.a.node,v.a.bool]).isRequired,autoClose:vn.isRequired,children:v.a.node.isRequired,closeToast:v.a.func.isRequired,position:v.a.oneOf(yn(fn)).isRequired,pauseOnHover:v.a.bool.isRequired,pauseOnFocusLoss:v.a.bool.isRequired,closeOnClick:v.a.bool.isRequired,transition:v.a.func.isRequired,rtl:v.a.bool.isRequired,hideProgressBar:v.a.bool.isRequired,draggable:v.a.bool.isRequired,draggablePercent:v.a.number.isRequired,in:v.a.bool,onExited:v.a.func,onOpen:v.a.func,onClose:v.a.func,type:v.a.oneOf(yn(pn)),className:v.a.oneOfType([v.a.string,v.a.object]),bodyClassName:v.a.oneOfType([v.a.string,v.a.object]),progressClassName:v.a.oneOfType([v.a.string,v.a.object]),progressStyle:v.a.object,progress:v.a.number,updateId:v.a.oneOfType([v.a.string,v.a.number]),ariaLabel:v.a.string,containerId:v.a.oneOfType([v.a.string,v.a.number]),role:v.a.string},kn.defaultProps={type:pn.DEFAULT,in:!0,onOpen:hn,onClose:hn,className:null,bodyClassName:null,progressClassName:null,updateId:null},Tn.propTypes={closeToast:v.a.func,arialLabel:v.a.string},Tn.defaultProps={ariaLabel:"close"};var Bn=wn({enter:mn+"__bounce-enter",exit:mn+"__bounce-exit",appendPosition:!0}),Sn=(wn({enter:mn+"__slide-enter",exit:mn+"__slide-exit",duration:[450,750],appendPosition:!0}),wn({enter:mn+"__zoom-enter",exit:mn+"__zoom-exit"}),wn({enter:mn+"__flip-enter",exit:mn+"__flip-exit"})),On=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).state={toast:[]},t.toastKey=1,t.collection={},t.isToastActive=function(e){return-1!==t.state.toast.indexOf(e)},t}we(t,e);var n=t.prototype;return n.componentDidMount=function(){var e=this;Cn.on(dn.SHOW,(function(t,n){return e.buildToast(t,n)})).on(dn.CLEAR,(function(t){return null==t?e.clear():e.removeToast(t)})).emit(dn.DID_MOUNT,this)},n.componentWillUnmount=function(){Cn.emit(dn.WILL_UNMOUNT,this)},n.removeToast=function(e){this.setState({toast:this.state.toast.filter((function(t){return t!==e}))},this.dispatchChange)},n.dispatchChange=function(){Cn.emit(dn.ON_CHANGE,this.state.toast.length)},n.makeCloseButton=function(e,t,n){var r=this,o=this.props.closeButton;return Object(i.isValidElement)(e)||!1===e?o=e:!0===e&&(o=this.props.closeButton&&"boolean"!=typeof this.props.closeButton?this.props.closeButton:a.a.createElement(Tn,null)),!1!==o&&Object(i.cloneElement)(o,{closeToast:function(){return r.removeToast(t)},type:n})},n.getAutoCloseDelay=function(e){return!1===e||gn(e)?e:this.props.autoClose},n.canBeRendered=function(e){return Object(i.isValidElement)(e)||"string"==typeof e||"number"==typeof e||"function"==typeof e},n.parseClassName=function(e){return"string"==typeof e?e:null!==e&&"object"==typeof e&&"toString"in e?e.toString():null},n.belongToContainer=function(e){return e.containerId===this.props.containerId},n.buildToast=function(e,t){var n=this,r=t.delay,o=O(t,["delay"]);if(!this.canBeRendered(e))throw new Error("The element you provided cannot be rendered. You provided an element of type "+typeof e);var a=o.toastId,s=o.updateId;if(!(this.props.enableMultiContainer&&!this.belongToContainer(o)||this.isToastActive(a)&&null==s)){var l=function(){return n.removeToast(a)},c={id:a,key:o.key||this.toastKey++,type:o.type,closeToast:l,updateId:o.updateId,rtl:this.props.rtl,position:o.position||this.props.position,transition:o.transition||this.props.transition,className:this.parseClassName(o.className||this.props.toastClassName),bodyClassName:this.parseClassName(o.bodyClassName||this.props.bodyClassName),onClick:o.onClick||this.props.onClick,closeButton:this.makeCloseButton(o.closeButton,a,o.type),pauseOnHover:"boolean"==typeof o.pauseOnHover?o.pauseOnHover:this.props.pauseOnHover,pauseOnFocusLoss:"boolean"==typeof o.pauseOnFocusLoss?o.pauseOnFocusLoss:this.props.pauseOnFocusLoss,draggable:"boolean"==typeof o.draggable?o.draggable:this.props.draggable,draggablePercent:"number"!=typeof o.draggablePercent||isNaN(o.draggablePercent)?this.props.draggablePercent:o.draggablePercent,closeOnClick:"boolean"==typeof o.closeOnClick?o.closeOnClick:this.props.closeOnClick,progressClassName:this.parseClassName(o.progressClassName||this.props.progressClassName),progressStyle:this.props.progressStyle,autoClose:this.getAutoCloseDelay(o.autoClose),hideProgressBar:"boolean"==typeof o.hideProgressBar?o.hideProgressBar:this.props.hideProgressBar,progress:parseFloat(o.progress),role:"string"==typeof o.role?o.role:this.props.role};"function"==typeof o.onOpen&&(c.onOpen=o.onOpen),"function"==typeof o.onClose&&(c.onClose=o.onClose),Object(i.isValidElement)(e)&&"string"!=typeof e.type&&"number"!=typeof e.type?e=Object(i.cloneElement)(e,{closeToast:l}):"function"==typeof e&&(e=e({closeToast:l})),gn(r)?setTimeout((function(){n.appendToast(c,e,o.staleToastId)}),r):this.appendToast(c,e,o.staleToastId)}},n.appendToast=function(e,t,n){var r,o=e.id,i=e.updateId;this.collection=S({},this.collection,((r={})[o]={options:e,content:t,position:e.position},r)),this.setState({toast:(i?[].concat(this.state.toast):[].concat(this.state.toast,[o])).filter((function(e){return e!==n}))},this.dispatchChange)},n.clear=function(){this.setState({toast:[]})},n.renderToast=function(){var e=this,t={},n=this.props,r=n.className,o=n.style;return(n.newestOnTop?Object.keys(this.collection).reverse():Object.keys(this.collection)).forEach((function(n){var r=e.collection[n],o=r.position,i=r.options,s=r.content;t[o]||(t[o]=[]),-1!==e.state.toast.indexOf(i.id)?t[o].push(a.a.createElement(kn,S({},i,{isDocumentHidden:e.state.isDocumentHidden,key:"toast-"+i.key}),s)):(t[o].push(null),delete e.collection[n])})),Object.keys(t).map((function(n){var i,s=1===t[n].length&&null===t[n][0],l={className:Xt()(mn+"__toast-container",mn+"__toast-container--"+n,(i={},i[mn+"__toast-container--rtl"]=e.props.rtl,i),e.parseClassName(r)),style:s?S({},o,{pointerEvents:"none"}):S({},o)};return a.a.createElement(un,S({},l,{key:"container-"+n}),t[n])}))},n.render=function(){return a.a.createElement("div",{className:""+mn},this.renderToast())},t}(i.Component);On.propTypes={position:v.a.oneOf(yn(fn)),autoClose:vn,closeButton:v.a.oneOfType([v.a.node,v.a.bool]),hideProgressBar:v.a.bool,pauseOnHover:v.a.bool,closeOnClick:v.a.bool,newestOnTop:v.a.bool,className:v.a.oneOfType([v.a.string,v.a.object]),style:v.a.object,toastClassName:v.a.oneOfType([v.a.string,v.a.object]),bodyClassName:v.a.oneOfType([v.a.string,v.a.object]),progressClassName:v.a.oneOfType([v.a.string,v.a.object]),progressStyle:v.a.object,transition:v.a.func,rtl:v.a.bool,draggable:v.a.bool,draggablePercent:v.a.number,pauseOnFocusLoss:v.a.bool,enableMultiContainer:v.a.bool,containerId:v.a.oneOfType([v.a.string,v.a.number]),role:v.a.string,onClick:v.a.func},On.defaultProps={position:fn.TOP_RIGHT,transition:Bn,rtl:!1,autoClose:5e3,hideProgressBar:!1,closeButton:a.a.createElement(Tn,null),pauseOnHover:!0,pauseOnFocusLoss:!0,closeOnClick:!0,newestOnTop:!1,draggable:!0,draggablePercent:80,className:null,style:null,toastClassName:null,bodyClassName:null,progressClassName:null,progressStyle:null,role:"alert"};var Nn=new Map,Pn=null,Dn=null,Ln={},Rn=[],qn=!1;function In(){return Nn.size>0}function jn(e,t){var n=function(e){return In()?e?Nn.get(e):Nn.get(Pn):null}(t.containerId);if(!n)return null;var r=n.collection[e];return void 0===r?null:r}function Un(e,t){return S({},e,{type:t,toastId:Mn(e)})}function Fn(){return(Math.random().toString(36)+Date.now().toString(36)).substr(2,10)}function Mn(e){return e&&("string"==typeof e.toastId||"number"==typeof e.toastId&&!isNaN(e.toastId))?e.toastId:Fn()}function zn(e,t){return In()?Cn.emit(dn.SHOW,e,t):(Rn.push({action:dn.SHOW,content:e,options:t}),qn&&bn&&(qn=!1,Dn=document.createElement("div"),document.body.appendChild(Dn),Object(s.render)(a.a.createElement(On,Ln),Dn))),t.toastId}var Hn=function(e,t){return zn(e,Un(t,t&&t.type||pn.DEFAULT))},Gn=function(e){pn[e]!==pn.DEFAULT&&(Hn[pn[e].toLowerCase()]=function(t,n){return zn(t,Un(n,n&&n.type||pn[e]))})};for(var Vn in pn)Gn(Vn);Hn.warn=Hn.warning,Hn.dismiss=function(e){return void 0===e&&(e=null),In()&&Cn.emit(dn.CLEAR,e)},Hn.isActive=function(e){var t=!1;return Nn.size>0&&Nn.forEach((function(n){n.isToastActive(e)&&(t=!0)})),t},Hn.update=function(e,t){void 0===t&&(t={}),setTimeout((function(){var n=jn(e,t);if(n){var r=n.options,o=n.content,i=S({},r,{},t,{toastId:t.toastId||e});t.toastId&&t.toastId!==e?i.staleToastId=e:i.updateId=Fn();var a=void 0!==i.render?i.render:o;delete i.render,zn(a,i)}}),0)},Hn.done=function(e){Hn.update(e,{progress:1})},Hn.onChange=function(e){"function"==typeof e&&Cn.on(dn.ON_CHANGE,e)},Hn.configure=function(e){qn=!0,Ln=e},Hn.POSITION=fn,Hn.TYPE=pn,Cn.on(dn.DID_MOUNT,(function(e){Pn=e.props.containerId||e,Nn.set(Pn,e),Rn.forEach((function(e){Cn.emit(e.action,e.content,e.options)})),Rn=[]})).on(dn.WILL_UNMOUNT,(function(e){e?Nn.delete(e.props.containerId||e):Nn.clear(),0===Nn.size&&Cn.off(dn.SHOW).off(dn.CLEAR),bn&&Dn&&document.body.removeChild(Dn)}));n(102);var Wn=n.p+"spider5.png",Xn=function(e){return localStorage.getItem(e)},Yn=n(10),Kn=n.n(Yn),$n=function(e){function t(e){var n;return u()(this,t),(n=h()(this,g()(t).call(this,e))).state={navItems:[]},n}return b()(t,e),p()(t,[{key:"componentDidMount",value:function(){this.setState({navItems:[{name:"Home",route:"/home"},{name:"Sign In",route:"/signin"},{name:"Sign Out",route:"/signout"}]})}},{key:"render",value:function(){return a.a.createElement("div",{className:"navbar-container"},a.a.createElement("div",null,a.a.createElement(On,{position:"top-center",autoClose:5e3,hideProgressBar:!0,newestOnTop:!0,closeOnClick:!0,rtl:!1,pauseOnVisibilityChange:!0,draggable:!1,pauseOnHover:!0,transition:Sn})),a.a.createElement("div",null,a.a.createElement("div",null,a.a.createElement("ul",{className:"nav",id:"nav"},a.a.createElement("li",{className:"nav-item logo"},a.a.createElement(Ht,{className:"nav-link",to:"/home"},a.a.createElement("img",{src:Wn,id:"logo-identifier"}))),a.a.createElement("li",{className:"nav-item logo-name"},a.a.createElement(Ht,{className:"nav-link",to:"/home"},a.a.createElement("span",{id:"logo-desc"},"Spidy - Negan"))),Xn(!Kn.a.TOKEN)?a.a.createElement("li",{className:"nav-item"},a.a.createElement(Ht,{className:"nav-link",to:"/signin"},"Sign In")):a.a.createElement("li",{className:"nav-item"},a.a.createElement(Ht,{className:"nav-link",to:"/signout"},a.a.createElement("i",{className:"fa fa-sign-out","aria-hidden":"true"})))))),a.a.createElement("div",null,this.props.children))}}]),t}(i.Component),Qn=n(9),Jn=n.n(Qn),Zn=n(2),er=n.n(Zn),tr=(n(105),n(11)),nr=n.n(tr),rr=n(17),or=n.n(rr),ir=n(108),ar="".concat(Kn.a.SERVER_URL,":").concat(Kn.a.SERVER_PORT),sr=function(){var e=or()(nr.a.mark((function e(t,n){var r,o,i,a=arguments;return nr.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=a.length>2&&void 0!==a[2]?a[2]:{},o=Xn(Kn.a.TOKEN),(i={}).method=t,i.url=n,i.baseURL=ar,i.headers=er()({},Kn.a.TOKEN,o),"get"!==t&&(i.data=r),e.abrupt("return",ir(i));case 9:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),lr=function(e){var t=e.email,n=e.password,r=e.name;return sr("post","/signup",{email:t,password:n,name:r})},cr=function(e){var t=e.email,n=e.password;return sr("post","/signin",{email:t,password:n})},ur=function(e,t){var n={position:"top-right",autoClose:5e3,hideProgressBar:!0,closeOnClick:!0,pauseOnHover:!0,draggable:!1};return"success"===e?Hn.success(t,n):"info"===e?Hn.info(t,n):"warning"===e?Hn.warning(t,n):"error"===e?Hn.error(t,n):Hn(t,n)},fr=n(33),pr=function(e){var t=e.route;return function(e){e(Object(fr.push)(t))}},dr=function(e){var t=e.email,n=e.password;return(function(){var e=or()(nr.a.mark((function e(r){var o,i,a,s,l;return nr.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,cr({email:t,password:n});case 3:if(o=e.sent,i=o.data,a=i.data,s=i.msg,l=i.status,console.log("[signIn] response: ",a),l){e.next=8;break}throw s;case 8:ur("success",s),c=Kn.a.TOKEN,u=a.token,localStorage.setItem(c,u),r(At("/")),e.next=17;break;case 13:e.prev=13,e.t0=e.catch(0),console.log("[err][signin]: ",e.t0),ur("error",e.t0.toString());case 17:case"end":return e.stop()}var c,u}),e,null,[[0,13]])})));return function(t){return e.apply(this,arguments)}}())},hr=function(e){var t=e.email,n=e.password,r=e.name;return(function(){var e=or()(nr.a.mark((function e(o){var i,a,s,l;return nr.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,lr({email:t,password:n,name:r});case 3:if(i=e.sent,a=i.data,s=a.data,l=a.msg,a.status){e.next=7;break}throw l;case 7:console.log("[signIn] response: ",s),ur("success",l),e.next=15;break;case 11:e.prev=11,e.t0=e.catch(0),console.log("[err][signUp]: ",e.t0),ur("error",e.t0.toString());case 15:case"end":return e.stop()}}),e,null,[[0,11]])})));return function(t){return e.apply(this,arguments)}}())},mr=function(){return function(){var e=or()(nr.a.mark((function e(t){return nr.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:try{localStorage.clear(),t(At("/signin"))}catch(e){console.log("[err][signout]: ",e),ur("error",e.toString())}case 1:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()},gr=function(){return function(){var e=or()(nr.a.mark((function e(t){var n,r,o,i,a;return nr.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,sr("get","/allusers");case 3:if(n=e.sent,r=n.data,o=r.data,i=r.msg,a=r.status,console.log("[signIn] response: ",o),a){e.next=8;break}throw i;case 8:ur("success",i),e.next=15;break;case 11:e.prev=11,e.t0=e.catch(0),console.log("[err][allUsers]: ",e.t0),ur("error",e.t0.toString());case 15:case"end":return e.stop()}}),e,null,[[0,11]])})));return function(t){return e.apply(this,arguments)}}()},yr=function(e){function t(e){var n;return u()(this,t),n=h()(this,g()(t).call(this,e)),er()(Jn()(n),"onChange",(function(e){n.setState(er()({},e.currentTarget.getAttribute("type"),e.target.value))})),er()(Jn()(n),"onSignIn",(function(e){n.props.actions.signin({email:n.state.email,password:n.state.password})})),er()(Jn()(n),"onSignUp",(function(e){n.props.actions.signup({email:n.state.email,password:n.state.password,name:n.state.name})})),n.state={email:"",password:"",name:"default"},n}return b()(t,e),p()(t,[{key:"render",value:function(){return a.a.createElement("div",{className:"auth-wrapper"},a.a.createElement("div",{className:"auth-body"},a.a.createElement("div",null,a.a.createElement("div",{className:"form-group"},a.a.createElement("label",null,"Email address"),a.a.createElement("input",{type:"email",className:"form-control",placeholder:"Enter email",onChange:this.onChange}),a.a.createElement("small",{id:"emailHelp",className:"form-text text-muted"},"We'll never share your email with anyone else.")),a.a.createElement("div",{className:"form-group"},a.a.createElement("label",null,"Password"),a.a.createElement("input",{type:"password",className:"form-control",placeholder:"Password",onChange:this.onChange})),a.a.createElement("div",{className:"auth-buttons"},a.a.createElement("button",{className:"btn btn-primary",onClick:this.onSignIn},"Sign In"),"  ",a.a.createElement("button",{className:"btn btn-primary",onClick:this.onSignUp},"Sign Up")))))}}]),t}(i.Component),br=ge((function(e){return{}}),(function(e){return{actions:Object(V.bindActionCreators)(r,e)}}))(gt(yr)),Ar=function(e){function t(){return u()(this,t),h()(this,g()(t).apply(this,arguments))}return b()(t,e),p()(t,[{key:"componentDidMount",value:function(){this.props.actions.signout()}},{key:"render",value:function(){return""}}]),t}(i.Component),vr=ge((function(e){return{}}),(function(e){return{actions:Object(V.bindActionCreators)(r,e)}}))(gt(Ar)),Cr=(n(127),"main/"),wr="".concat(Cr,"SET_INPUT_TAGS"),_r="".concat(Cr,"SET_AVAILABLE_TAGS"),Er="".concat(Cr,"SET_PRIMARY_TAG"),xr="".concat(Cr,"PUSH_ARTICLE"),kr="".concat(Cr,"SET_ARTICLES"),Tr="".concat(Cr,"SET_FILTERED_ARTICLES"),Br="".concat(Cr,"SET_FILTER_INPUT"),Sr="".concat(Cr,"SET_SHOW_FILTERED"),Or="".concat(Cr,"SET_ACTIVITY"),Nr="".concat(Cr,"PUSH_ACTIVITY"),Pr="".concat(Cr,"SET_BLOG_HTML"),Dr="".concat(Cr,"SET_BLOG_STYLE"),Lr="".concat(Cr,"SET_BLOG_RESPONSE"),Rr=n(82);function qr(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var Ir=function(e){return function(t){return function(t){return function(n){if("@@router/CALL_HISTORY_METHOD"!==n.type)return t(n);var r=n.payload,o=r.method,i=r.args;e[o].apply(e,qr(i))}}}},jr=n(83);function Ur(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var Fr=Ur();Fr.withExtraArgument=Ur;var Mr=Fr,zr=n(13),Hr=n.n(zr);function Gr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Vr(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Gr(Object(n),!0).forEach((function(t){er()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Gr(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Wr=function(e,t){return Vr({},e,{},t)},Xr=function(e){for(var t=e.articles,n=e.status,r=0;r<t.length;r++)if(t[r].crawl_status===n)return r;return t.length},Yr=function(e){for(var t=e.articles,n=e.id,r=0;r<t.length;r++)if(t[r].id===n)return r},Kr={input_tag:"",available_tags:[],articles:[],primary_tag:"",filter:{word:"",keywords:"",headline:"",author:"",publisher:"",identifier:""},filtered_articles:[],show_filtered:!1,blog_html:"",blog_style:"",blog_response:""},$r=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Kr,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case wr:return Wr(e,{input_tag:t.data.value});case _r:return Wr(e,{available_tags:Hr()(t.data)});case Er:return Wr(e,{primary_tag:t.data});case xr:var n=Object.assign({},e);switch(t.data.crawl_status){case"wait":var r=[].concat(Hr()(n.articles),[Vr({},t.data)]);n.articles=r;break;case"pending":var o=Xr({articles:e.articles,status:"wait"}),i=Hr()(n.articles),a=Vr({},t.data);i[o]=a,n.articles=i;break;case"crawling":var s=t.data.index,l=Hr()(n.articles),c=l[s];c.crawl_status="crawling",l[s]=c,n.articles=l;break;case"success":var u=Yr({articles:e.articles,id:t.data.identifier}),f=Hr()(e.articles);f[u]=Vr({},t.data),n.articles=f;break;case"err":var p=Yr({articles:e.articles,status:"crawling"}),d=Hr()(e.articles);d[p]=Vr({},t.data),n.articles=d}return n;case kr:return Wr(e,{articles:Hr()(t.data)});case Br:var h=Object.assign({},e),m=Object.assign({},h.filter);return m[t.data.key]=t.data.value,h.filter=m,h;case Sr:return Wr(e,{show_filtered:t.data});case Tr:return Wr(e,{filtered_articles:Hr()(t.data)});case Pr:return Wr(e,{blog_html:t.data});case Dr:return Wr(e,{blog_style:t.data});case Lr:return Wr(e,{blog_response:t.data});default:return e}};function Qr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var Jr=function(e,t){return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Qr(Object(n),!0).forEach((function(t){er()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Qr(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e,{},t)},Zr={activity:[]},eo=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Zr,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case Or:return Jr(e,{activity:Hr()(t.data)});case Nr:return Jr(e,{activity:[].concat(Hr()(e.activity),[t.data])});default:return e}},to=function(e){return Object(V.combineReducers)({router:qt(e),articles:$r,user:eo})},no=Me(),ro=Object(V.createStore)(to(no),Object(jr.composeWithDevTools)(Object(V.applyMiddleware)(Ir(no),Mr))),oo=function(){var e=document.getElementById("logo-desc"),t=document.getElementById("nav");e.setAttribute("class","logo-desc-blink"),t.setAttribute("class","nav logo-desc-blink"),setTimeout((function(){e.setAttribute("class",""),t.setAttribute("class","nav")}),1e3)},io=function(e){e.on("FETCH_MORE_LINKS_SUCCESS",(function(e){console.log("[FETCH_MORE_LINKS_SUCCESS]: ",e);var t=e.links,n=e.tag;oo(),ro.getState().articles.primary_tag===n&&ro.dispatch(Co({links:t}))})),e.on("FETCH_MORE_LINKS_FAIL",(function(e){console.log("[FETCH_MORE_LINKS_FAIL]: ",e),ur("error","Error fetching links.")})),e.on("CRAWL_STORY_SUCCESS",(function(e){console.log("[CRAWL_STORY_SUCCESS]: ",e);var t=e.article,n=e.tag;oo();var r=ro.getState().articles.primary_tag;ro.dispatch(_o()),r===n&&ro.dispatch(xo({article:t}))})),e.on("CRAWL_STORY_FAIL",(function(e){console.log("[CRAWL_STORY_FAIL]: ",e),ur("error","Unable to crawl story."),ro.dispatch(_o())})),e.on("GET_RELATED_TAGS_SUCCESS",(function(e){console.log("[GET_RELATED_TAGS_SUCCESS]: ");var t=e.related_tags;oo(),ro.dispatch(ho({related_tags:t}))})),e.on("BLOG_HTML_SUCCESS",(function(e){console.log("[BLOG_HTML_SUCCESS]: ");var t=e.blog_html,n=e.blog_style;oo(),ro.dispatch(Bo({blog_html:t})),ro.dispatch(So({blog_style:n}))})),e.on("BLOG_HTML_FAIL",(function(e){console.log("[BLOG_HTML_FAIL]: ",e),ur("err","Error fetching blog html.")})),e.on("GET_RESPONSES_SUCCESS",(function(e){console.log("[GET_RESPONSES_SUCCESS]: ");var t=e.blog_response;oo(),ro.dispatch(Ao({blog_response:t}))})),e.on("GET_RESPONSES_FAIL",(function(e){console.log("[GET_RESPONSES_FAIL]: ",e),ur("err","Error fetching response.")}))},ao=Rr(Kn.a.SERVER_URL+":"+Kn.a.SERVER_PORT,{forceNew:!0,transports:["websocket"]});io(ao);var so=ao,lo=function(e){var t=e.keywords;return{type:Or,data:t}},co=function(e){var t=e.keyword;return{type:Nr,data:t}},uo=function(e){var t=e.value;return{type:wr,data:{value:t}}},fo=function(e){var t=e.articles;return{type:kr,data:t}},po=function(e){var t=e.tag;return function(e,n){if(!t)return ur("warning","Input tag is empty.");var r=n().articles,o=r.articles,i=r.primary_tag,a=o.length+10;i!==t&&(a=10);var s={tag:t,count:a};s[Kn.a.TOKEN]=Xn(Kn.a.TOKEN),so.emit("FETCH_MORE_LINKS",s),i!==t&&(e(vo({tag:t})),e(fo({articles:[]})),e(yo({articles:[]})),e(ho({related_tags:[]}))),e(function(e){var t=e.keyword;return function(e,n){-1===n().user.activity.indexOf(t)&&e(co({keyword:t}))}}({keyword:t}));for(var l=0;l<10;l++)e(ko({article:{crawl_status:"wait",identifier:""}}))}},ho=function(e){var t=e.related_tags;return{type:_r,data:t}},mo=function(e){var t=e.key,n=e.value;return{type:Br,data:{key:t,value:n}}},go=function(e){var t=e.status;return{type:Sr,data:t}},yo=function(e){var t=e.articles;return{type:Tr,data:t}},bo=function(e){var t=e.id;return function(e){so.emit("GET_RESPONSES",{id:t})}},Ao=function(e){var t=e.blog_response;return{type:Lr,data:t}},vo=function(e){var t=e.tag;return{type:Er,data:t}},Co=function(e){var t=e.links;return function(e,n){var r=n().articles.articles;t=t.filter((function(e){for(var t=!0,n=0;n<r.length;n++)e.id===r[n].identifier&&(t=!1);return t}));for(var o=0;o<t.length;o++)t[o].crawl_status="pending",e(wo({article:t[o]}));setTimeout((function(){console.log("reached here."),e(_o())}),1e3)}},wo=function(e){var t=e.article;return{type:xr,data:t}},_o=function(){return function(e,t){var n=t().articles,r=n.articles,o=n.primary_tag,i=function(e){for(var t=void 0,n=0;n<e.length;n++)if("pending"===e[n].crawl_status){t=n;break}return t}(r);if(console.log("index : ",i),void 0!==i){var a=r[i],s=a.url,l=a.id;console.log("[CRAWLING STARTED]: ",s),so.emit("CRAWL_STORY",{url:s,id:l,tag:o}),e(Eo({crawl_status:"crawling",index:i}))}}},Eo=function(e){return{type:xr,data:e}},xo=function(e){var t=e.article;return function(e){e(ko({article:t}))}},ko=function(e){var t=e.article;return{type:xr,data:t}},To=function(e){var t=e.url;return function(e){so.emit("BLOG_HTML",{url:t})}},Bo=function(e){var t=e.blog_html;return{type:Pr,data:t}},So=function(e){var t=e.blog_style;return{type:Dr,data:t}},Oo=function(e){var t=e.route;return function(e){e(Object(fr.push)(t))}};function No(e){for(var t=e.newarr,n=e.arr,r=0;r<n.length;r++)Po(n[r])?No({newarr:t,arr:n[r]}):Do(n[r])?Lo({newarr:t,obj:n[r]}):t.push(n[r])}function Po(e){return"[object Array]"===Object.prototype.toString.call(e)}function Do(e){return"[object Object]"===Object.prototype.toString.call(e)}function Lo(e){for(var t=e.newarr,n=e.obj,r=Object.values(n),o=0;o<r.length;o++)Po(r[o])?No({newarr:t,arr:r[o]}):Do(r[o])?Lo({newarr:t,obj:r[o]}):t.push(r[o])}var Ro={getAllNestedValues:function(e){var t=[];return Lo({newarr:t,obj:e}),t}},qo=function(e){function t(e){var n;return u()(this,t),n=h()(this,g()(t).call(this,e)),er()(Jn()(n),"onChange",(function(e){var t=e.currentTarget.getAttribute("data-keyname"),r=e.target.value||e.currentTarget.getAttribute("data-value");n.props.actions.onChangeFilterInput({key:t,value:r}),e.target.value||n.onFilter()})),er()(Jn()(n),"refineSearchObj",(function(e){for(var t={},n=Object.keys(e),r=0;r<n.length;r++)e[n[r]]&&(t[n[r]]=e[n[r]]);return t})),er()(Jn()(n),"filterFunction",(function(e){var t=e.obj,n=e.filterObj;t=t.filter((function(e){return"success"===e.crawl_status}));var r=Object.keys(n);return t.filter((function(e){for(var o=!0,i=0;i<r.length;i++){var a=r[i],s=n[r[i]];if("[object String]"===Object.prototype.toString.call(s)&&(s=s.toLowerCase()),"word"===a)-1===Ro.getAllNestedValues(t).join(" ").toLowerCase().indexOf(s)&&(o=!1);else-1===e[a].toLowerCase().indexOf(s)&&(o=!1)}return o}))})),er()(Jn()(n),"onFilter",(function(){var e=n.props.articles,t=e.filter,r=e.articles,o=n.refineSearchObj(t),i=n.filterFunction({obj:r,filterObj:o});n.props.actions.setFilteredArticles({articles:i}),n.props.actions.setShowFiltered({status:!0})})),n.state={},n}return b()(t,e),p()(t,[{key:"render",value:function(){var e=this,t=this.props.articles.filter,n=this.refineSearchObj(t),r=a.a.createElement("div",{className:"input-group-prepend"},a.a.createElement("span",{onClick:this.onFilter,className:"input-group-text",style:{backgroundColor:"white"}},a.a.createElement("i",{className:"fa fa-search","aria-hidden":"true"})));return a.a.createElement("div",{className:"filter-wrapper"},a.a.createElement("div",{className:"filter-body"},a.a.createElement("header",null,a.a.createElement("p",{className:"h6"},"Filters")),a.a.createElement("div",{className:"filter-preview"},Object.keys(n).map((function(t){return a.a.createElement("button",{key:t.toString()+(new Date).getTime(),type:"button",className:"btn btn-light btn-sm","data-keyname":t,onClick:e.onChange,"data-value":""},n[t],"  ",a.a.createElement("i",{className:"fa fa-close "})," ")}))),a.a.createElement("div",{className:"input-fields"},a.a.createElement("div",{className:"input-group mb-3"},a.a.createElement("input",{type:"text",className:"form-control",placeholder:"Serach word in complete article",value:t.word,"data-keyname":"word",onChange:this.onChange,onKeyUp:function(t){13===t.keyCode&&e.onFilter()}}),r),a.a.createElement("div",{className:"input-group mb-3"},a.a.createElement("input",{type:"text",className:"form-control",placeholder:"By Keyword","data-keyname":"keywords",value:t.keywords,onChange:this.onChange,onKeyUp:function(t){13===t.keyCode&&e.onFilter()}}),r),a.a.createElement("div",{className:"input-group mb-3"},a.a.createElement("input",{type:"text",className:"form-control",placeholder:"By headline","data-keyname":"headline",value:t.headline,onChange:this.onChange,onKeyUp:function(t){13===t.keyCode&&e.onFilter()}}),r),a.a.createElement("div",{className:"input-group mb-3"},a.a.createElement("input",{type:"text",className:"form-control",placeholder:"By Author","data-keyname":"author",value:t.author,onChange:this.onChange,onKeyUp:function(t){13===t.keyCode&&e.onFilter()}}),r),a.a.createElement("div",{className:"input-group mb-3"},a.a.createElement("input",{type:"text",className:"form-control",placeholder:"By publisher","data-keyname":"publisher",value:t.publisher,onChange:this.onChange,onKeyUp:function(t){13===t.keyCode&&e.onFilter()}}),r))))}}]),t}(i.Component);qo.propTypes={articles:v.a.shape({input_tag:v.a.string,available_tags:v.a.array,articles:v.a.array,primary_tag:v.a.string,filter:v.a.shape({word:v.a.string,tags:v.a.string,headline:v.a.string,author:v.a.string,publisher:v.a.string,identifier:v.a.string}),filtered_articles:v.a.array,show_filtered:v.a.bool,blog_response:v.a.string}),user:v.a.shape({activity:v.a.array}),actions:v.a.object};var Io=ge((function(e){return{articles:e.articles}}),(function(e){return{actions:Object(V.bindActionCreators)(o,e)}}))(qo),jo=(n(161),n(163),n(84)),Uo=n.n(jo),Fo=(n(204),function(){return a.a.createElement("div",{className:"loader-wrapper"},a.a.createElement("div",{className:"three_dot_loader"}))}),Mo=function(e){function t(e){var n;return u()(this,t),n=h()(this,g()(t).call(this,e)),er()(Jn()(n),"onChange",(function(e){var t=e.currentTarget.getAttribute("data-type"),r=e.target.value;n.props.actions.onChangeInput({type:t,value:r})})),er()(Jn()(n),"onTagClick",(function(e){console.log("on tag clicked: "),n.props.actions.onChangeInput({value:e.currentTarget.getAttribute("data-primary-tag")}),n.props.actions.fetchMoreLinks({tag:e.currentTarget.getAttribute("data-primary-tag")})})),er()(Jn()(n),"fetchMoreLinks",(function(){var e=n.props.articles.input_tag;n.props.actions.fetchMoreLinks({tag:e})})),er()(Jn()(n),"refineObj",(function(e){for(var t={},n=Object.keys(e),r=0;r<n.length;r++)e[n[r]]&&(t[n[r]]=e[n[r]]);return t})),er()(Jn()(n),"highlight",(function(e){for(var t=n.props.articles.filter,r=Object.values(n.refineObj(t)),o=e,i=0;i<r.length;i++)o=o.toLowerCase().replace(r[i].toLowerCase(),'<span class="highlight"> '.concat(r[i],"</span>"));return o=Uo()(o)})),er()(Jn()(n),"show_json",(function(e){return n.setState({show_json:e.currentTarget.getAttribute("data-identifier")})})),er()(Jn()(n),"hide_json",(function(){return n.setState({show_json:""})})),er()(Jn()(n),"changeTab",(function(e){var t=e.currentTarget.getAttribute("data-tab");"all"===t&&n.props.actions.setShowFiltered({status:!1}),"filtered"===t&&n.props.actions.setShowFiltered({status:!0})})),er()(Jn()(n),"openArticle",(function(e){var t=e.currentTarget.getAttribute("data-identifier");n.props.actions.goTo({route:"/article/"+t})})),n.state={show_json:"",show_suggestion:!1},n}return b()(t,e),p()(t,[{key:"componentDidMount",value:function(){var e=this,t=document.querySelector(".main-body input[data-type=input_tag]");t.addEventListener("focusin",(function(){e.setState({show_suggestion:!0})})),t.addEventListener("focusout",(function(){e.setState({show_suggestion:!1})}))}},{key:"render",value:function(){var e=this,t=this.state,n=t.show_json,r=t.show_suggestion,o=this.props.user.activity,i=this.props.articles,s=i.input_tag,l=i.articles,c=i.available_tags,u=i.show_filtered,f=i.filtered_articles,p=this.highlight,d=o.filter((function(e){return-1!==e.indexOf(s)})),h=function(t,r){return"wait"===t.crawl_status?a.a.createElement("div",{className:"card",key:t.toString()+r},a.a.createElement("div",{className:"card-body withloader"},a.a.createElement("div",{className:"loader"},a.a.createElement(Fo,null)))):"pending"===t.crawl_status?a.a.createElement("div",{className:"card",key:t.toString()+r},a.a.createElement("div",{className:"card-body withloader"},a.a.createElement("div",{className:"loader"},a.a.createElement("span",{className:"bold"},"<pending>"," "),t.headline))):"crawling"===t.crawl_status?a.a.createElement("div",{className:"card",key:t.toString()+r},a.a.createElement("div",{className:"card-body withloader"},a.a.createElement("div",{className:"loader"},a.a.createElement("span",{className:"bold"},"<crawling>")," ",t.headline))):"err"===t.crawl_status?a.a.createElement("div",{className:"card",key:t.toString()+r},a.a.createElement("div",{className:"card-body"},a.a.createElement("p",{className:"center"},a.a.createElement("span",{className:"bold"},"<Fetch fail />")))):n===t.identifier?a.a.createElement("div",{className:"card",key:t.toString()+r},a.a.createElement("div",{className:"card-body"},a.a.createElement("pre",null,a.a.createElement("button",{onClick:e.hide_json},"Show less"),JSON.stringify(t,void 0,2)))):a.a.createElement("div",{className:"card",key:t.toString()+r},a.a.createElement("div",{className:"card-body"},a.a.createElement("div",{className:"hero-section"},a.a.createElement("div",{className:"image"},a.a.createElement("img",{src:t.image})),a.a.createElement("div",{className:"headerText"},a.a.createElement("div",{className:"heading"},a.a.createElement("a",{"data-identifier":t.identifier,onClick:e.openArticle},a.a.createElement("h6",{className:"card-title"},"[",r+1,"] ",p(t.headline))),a.a.createElement("span",{"data-identifier":t.identifier,onClick:e.show_json},"  ",a.a.createElement("i",{className:"fa fa-expand","aria-hidden":"true"}))),a.a.createElement("div",{className:"meta-details"},a.a.createElement("small",{className:"text-muted"},"Author: ",p(t.author)),a.a.createElement("small",{className:"text-muted"},"DatePublished: ",new Date(Date.parse(t.datePublished)).toLocaleDateString()),a.a.createElement("small",{className:"text-muted"},"Publisher: ",p(t.publisher)),a.a.createElement("small",{className:"bold"},"Fetch_time: ",t.fetch_time/1e3," sec")),a.a.createElement("div",{className:"hero-details"},a.a.createElement("p",{className:"article-description"},p(t.description)),a.a.createElement("p",{className:"article-tags"},"Tags :  ",t.keywords.split(",").map((function(e){return a.a.createElement("button",{type:"button",className:"btn btn-light",key:e+r},p(e))}))))))))},m=a.a.createElement("div",{className:"card"},a.a.createElement("div",{className:"card-body"},a.a.createElement("div",{className:"no-article"},"Enter keyword and start crawling!")));return a.a.createElement("div",{className:"main-wrapper",id:"maincrawler"},a.a.createElement("div",{className:"main-body"},a.a.createElement("div",{className:"control-wrapper"},a.a.createElement("div",{className:"control-body"},a.a.createElement("div",{className:"input-group"},a.a.createElement("input",{type:"text",className:"form-control",placeholder:"Enter tag","data-type":"input_tag",value:s,onChange:this.onChange,onKeyUp:function(t){13===t.keyCode&&e.fetchMoreLinks()}}),a.a.createElement("div",{onClick:this.fetchMoreLinks,className:"input-group-prepend"},a.a.createElement("span",{className:"input-group-text"},a.a.createElement("i",{className:"fa fa-search","aria-hidden":"true"}),"  ",l.length?"Fetch more":"Fetch articles"))),a.a.createElement("div",{className:"suggestions"},r?d.map((function(t){return a.a.createElement("div",{className:"activityMap",key:t+new Date,"data-primary-tag":t.toLowerCase(),onClick:e.onTagClick}," ",t)})):a.a.createElement("noscript",null))))),a.a.createElement("div",{className:"available-tags-wrapper"},a.a.createElement("div",{className:"available-tags-body"},a.a.createElement("span",null,"Related Tags:    "),c.length&&c.map((function(t,n){return a.a.createElement("button",{type:"button",className:"btn btn-light",key:t+n,"data-primary-tag":t,onClick:e.onTagClick},a.a.createElement("i",{className:"fa fa-search","aria-hidden":"true"}),"   ",t)})))),a.a.createElement("div",{className:"post-wrapper"},a.a.createElement("div",{className:"post-body"},a.a.createElement("div",{className:"post-body-tabs"},a.a.createElement("span",{"data-tab":"all",onClick:this.changeTab,className:u?"":"active"},"All"),a.a.createElement("span",{"data-tab":"filtered",onClick:this.changeTab,className:u?"active":""},"Filtered")),u?f.map(h):l.length?l.map(h):m,l.length>0?a.a.createElement("div",{className:"card "},a.a.createElement("div",{className:"card-body load-more",onClick:this.fetchMoreLinks},a.a.createElement("p",null,"Load 10 More items"))):a.a.createElement("noscript",null))))}}]),t}(i.Component);Mo.propTypes={articles:v.a.shape({input_tag:v.a.string,available_tags:v.a.array,articles:v.a.array,primary_tag:v.a.string,filter:v.a.shape({word:v.a.string,tags:v.a.string,headline:v.a.string,author:v.a.string,publisher:v.a.string,identifier:v.a.string}),filtered_articles:v.a.array,show_filtered:v.a.bool,blog_response:v.a.string}),user:v.a.shape({activity:v.a.array}),actions:v.a.object};var zo=ge((function(e){return{articles:e.articles,user:e.user}}),(function(e){return{actions:Object(V.bindActionCreators)(o,e)}}))(gt(Mo)),Ho=function(e){function t(){return u()(this,t),h()(this,g()(t).apply(this,arguments))}return b()(t,e),p()(t,[{key:"render",value:function(){return Xn(Kn.a.TOKEN)||this.props.actions.goTo({route:"/signout"}),a.a.createElement("div",{className:"home-wrapper"},a.a.createElement("div",{className:"container-fluid home-body"},a.a.createElement(Io,null),a.a.createElement(zo,null)))}}]),t}(i.Component),Go=ge((function(e){return{}}),(function(e){return{actions:Object(V.bindActionCreators)(r,e)}}))(Ho),Vo=(n(206),function(e){function t(e){var n;return u()(this,t),(n=h()(this,g()(t).call(this,e))).state={id:"",article:{}},n}return b()(t,e),p()(t,[{key:"componentDidMount",value:function(){var e=this.props.articles.articles,t=this.props.location.pathname.split("/"),n=t[t.length-1].trim(),r=e.filter((function(e){return e.identifier===n}));1===r.length&&(this.setState({id:n,article:r[0]}),this.props.actions.fetchHtml({url:r[0].url}))}},{key:"componentDidUpdate",value:function(e,t){var n=document.getElementById("blog-body-content"),r=this.props.articles,o=r.blog_html,i=r.blog_style,a=r.blog_response;if(e.articles.blog_html!==o){if(o){var s=document.createElement("div");s.id="root",s.innerHTML=o,n.appendChild(s)}this.props.actions.fetchResponses({id:this.state.id})}if(e.articles.blog_style!==i&&i){var l=document.createElement("style");l.innerHTML=i,n.appendChild(l)}if(e.articles.blog_response!==a){var c=document.getElementById("blog-body-responses");if(a){var u=document.createElement("div");u.className="responsesStream js-responsesStreamOther",u.innerHTML=a,c.appendChild(u);var f=document.createElement("link");f.rel="stylesheet",f.crossOrigin="anonymous",f.href="https://cdn-static-1.medium.com/_/fp/css/main-branding-base.49OOsqVYw_M495OoBDcG4A.css",c.appendChild(f)}}}},{key:"componentWillUnmount",value:function(){this.props.actions.setBlogResponse({blog_response:""}),this.props.actions.setBlogHtml({blog_html:""}),this.props.actions.setBlogStyle({blog_style:""})}},{key:"render",value:function(){var e=this.state,t=e.id,n=e.article,r=this.props.articles,o=r.blog_response,i=r.blog_html;return a.a.createElement("div",{className:"blog-wrapper"},a.a.createElement("div",{className:t?"blog-body":"blog-body hidden"},a.a.createElement("div",{className:"basic-info"},"Original Url : ",a.a.createElement("a",{href:n.url},n.url)),i?a.a.createElement("noscript",null):a.a.createElement(Fo,null),a.a.createElement("div",{id:"blog-body-content"}),a.a.createElement("div",{id:"blog-body-responses"},a.a.createElement("div",{className:o?"loader hidden":"loader"},a.a.createElement(Fo,null)))),a.a.createElement("div",{className:t?"not-found hidden":"not-found"},a.a.createElement("h5",null," Oops! Fetch article first.")))}}]),t}(i.Component)),Wo=ge((function(e){return{location:e.router.location,articles:e.articles}}),(function(e){return{actions:Object(V.bindActionCreators)(o,e)}}))(gt(Vo)),Xo=function(e){function t(){return u()(this,t),h()(this,g()(t).apply(this,arguments))}return b()(t,e),p()(t,[{key:"componentDidMount",value:function(){}},{key:"render",value:function(){return a.a.createElement(mt,null,a.a.createElement(ct,{path:"/signin",component:br}),a.a.createElement(ct,{path:"/signout",component:vr}),a.a.createElement(ct,{path:"/article/:id",component:Wo}),a.a.createElement(ct,{path:"/",component:Go}))}}]),t}(i.Component),Yo=function(e){function t(e){return u()(this,t),h()(this,g()(t).call(this,e))}return b()(t,e),p()(t,[{key:"componentDidMount",value:function(){this.props.store.dispatch(function(){var e=or()(nr.a.mark((function e(t){var n,r,o,i;return nr.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!Xn(Kn.a.TOKEN)){e.next=9;break}return e.next=3,sr("get","/activity",{});case 3:if(n=e.sent,r=n.data,o=r.data,i=r.msg,r.status){e.next=7;break}return e.abrupt("return",ur("error",i.toString()));case 7:console.log("activity data:",o),t(lo({keywords:o}));case 9:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}())}},{key:"render",value:function(){var e=this.props.store;return a.a.createElement($n,null,a.a.createElement(Xo,{store:e}))}}]),t}(i.Component),Ko=function(e){function t(){return u()(this,t),h()(this,g()(t).apply(this,arguments))}return b()(t,e),p()(t,[{key:"render",value:function(){return a.a.createElement(B,{store:ro},a.a.createElement(Rt,{history:no},a.a.createElement("div",{className:"App"},a.a.createElement("div",null,a.a.createElement(Yo,{store:ro})))))}}]),t}(i.Component);n(208);l.a.render(a.a.createElement(Ko,null),document.getElementById("root"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL3JlZHV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly8vLi9jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludmFyaWFudC9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tZWxlbWVudHR5cGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXJzZXFzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtaW5oZXJpdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItcmVkdXgvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi94bWxodHRwcmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L25vZGVfbW9kdWxlcy9jb21wb25lbnQtZW1pdHRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaHRtbC1wYXJzZXIvbGliL3Byb2Nlc3NOb2Rlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGF0aC10by1yZWdleHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1yZWR1eC9saWIvcmVkdWNlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLXJlZHV4L2xpYi9hY3Rpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXJzZXVyaS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9pcy1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL21hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvcG9sbGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLWJpbmFyeTIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3llYXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmRleG9mL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9zb2NrZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbm9kZV9tb2R1bGVzL2NvbXBvbmVudC1lbWl0dGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWJpbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWh0bWwtcGFyc2VyL2xpYi9jb252ZXJ0Tm9kZVRvRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL1BhcnNlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL1Rva2VuaXplci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9taGFuZGxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9taGFuZGxlci9saWIvbm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tdXRpbHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VudGl0aWVzL2xpYi9kZWNvZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VudGl0aWVzL2xpYi9lbmNvZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2h0bWxwYXJzZXIyL2xpYi9Xcml0YWJsZVN0cmVhbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaHRtbC1wYXJzZXIvbGliL3V0aWxzL2dlbmVyYXRlUHJvcHNGcm9tQXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaHRtbC1wYXJzZXIvbGliL3V0aWxzL2lzVmFsaWRUYWdPckF0dHJpYnV0ZU5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ndWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1kZXZ0b29scy1leHRlbnNpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWh0bWwtcGFyc2VyL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnNjc3M/ZDMxMyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvZm9udHMvc3BpZGVyYXlzZm9udHNfdGhlLWFtYXppbmctc3BpZGVyLW1hbi9UaGVBbWF6aW5nU3BpZGVyTWFuLU1YMXcudHRmIiwid2VicGFjazovLy8uL3B1YmxpYy9pbWFnZXMvMy5qcGciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY29tbW9uL25hdmJhci9uYXZiYXIuc2Nzcz9iYmM0Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9uYXZiYXIvbmF2YmFyLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRvYXN0aWZ5L2Rpc3QvUmVhY3RUb2FzdGlmeS5jc3M/ZDk2NCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdG9hc3RpZnkvZGlzdC9SZWFjdFRvYXN0aWZ5LmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGF0aC10by1yZWdleHAvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYXV0aC9hdXRoLnNjc3M/Yzg1ZiIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hdXRoL2F1dGguc2NzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItcmVkdXgvbGliL3N5bmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1yZWR1eC9saWIvbWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9ob21lL2ZpbHRlci9maWx0ZXIuc2Nzcz8yYjlkIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2hvbWUvZmlsdGVyL2ZpbHRlci5zY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi91cmwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9jb21tb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2RlYnVnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9ub2RlX21vZHVsZXMvY29tcG9uZW50LWVtaXR0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvYmluYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi9zb2NrZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhcy1jb3JzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmcteGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMtYmluYXJ5Mi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJyYXlidWZmZXIuc2xpY2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FmdGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi91dGY4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYXNlNjQtYXJyYXlidWZmZXIvbGliL2Jhc2U2NC1hcnJheWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmxvYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvcG9sbGluZy1qc29ucC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy93ZWJzb2NrZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RvLWFycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWNrbzIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlXaXRob3V0SG9sZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2hvbWUvaG9tZS5zY3NzPzEzOTIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvaG9tZS9ob21lLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvaG9tZS9tYWluL21haW4uc2Nzcz8wNDM2Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2hvbWUvbWFpbi9tYWluLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWh0bWwtcGFyc2VyL2xpYi91dGlscy9pc0VtcHR5VGV4dE5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWh0bWwtcGFyc2VyL2xpYi9lbGVtZW50VHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2h0bWxwYXJzZXIyL25vZGVfbW9kdWxlcy9lbnRpdGllcy9saWIvZGVjb2RlX2NvZGVwb2ludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9taGFuZGxlci9saWIvZWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL0ZlZWRIYW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb211dGlscy9saWIvc3RyaW5naWZ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20tc2VyaWFsaXplci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLXNlcmlhbGl6ZXIvbm9kZV9tb2R1bGVzL2RvbWVsZW1lbnR0eXBlL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW50aXRpZXMvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbnRpdGllcy9saWIvZGVjb2RlX2NvZGVwb2ludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tdXRpbHMvbGliL3RyYXZlcnNhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tdXRpbHMvbGliL21hbmlwdWxhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tdXRpbHMvbGliL3F1ZXJ5aW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb211dGlscy9saWIvbGVnYWN5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb211dGlscy9saWIvaGVscGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL1N0cmVhbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyaW5nX2RlY29kZXIvbGliL3N0cmluZ19kZWNvZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zYWZlLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL1Byb3h5SGFuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL0NvbGxlY3RpbmdIYW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1odG1sLXBhcnNlci9saWIvZWxlbWVudFR5cGVzL1RleHRFbGVtZW50VHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaHRtbC1wYXJzZXIvbGliL2VsZW1lbnRUeXBlcy9UYWdFbGVtZW50VHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaHRtbC1wYXJzZXIvbGliL3V0aWxzL2h0bWxBdHRyaWJ1dGVzVG9SZWFjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaHRtbC1wYXJzZXIvbGliL2RvbS9hdHRyaWJ1dGVzL0Jvb2xlYW5BdHRyaWJ1dGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1odG1sLXBhcnNlci9saWIvZG9tL2F0dHJpYnV0ZXMvUmVhY3RBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1odG1sLXBhcnNlci9saWIvdXRpbHMvaW5saW5lU3R5bGVUb09iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaHRtbC1wYXJzZXIvbGliL2RvbS9lbGVtZW50cy9Wb2lkRWxlbWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWh0bWwtcGFyc2VyL2xpYi9lbGVtZW50VHlwZXMvU3R5bGVFbGVtZW50VHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaHRtbC1wYXJzZXIvbGliL2VsZW1lbnRUeXBlcy9VbnN1cHBvcnRlZEVsZW1lbnRUeXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1odG1sLXBhcnNlci9saWIvSHRtbFBhcnNlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb21tb24vbG9hZGVyLnNjc3M/YzJlZSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb21tb24vbG9hZGVyLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYmxvZy9ibG9nLnNjc3M/MTQyNCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9ibG9nL2Jsb2cuc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVnaXN0ZXJTZXJ2aWNlV29ya2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL0NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL2JhdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvd3JhcE1hcFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwRGlzcGF0Y2hUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcFN0YXRlVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tZXJnZVByb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3NlbGVjdG9yRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9jb25uZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VSZWR1eENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVN0b3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VEaXNwYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvZXNtL3Jlc29sdmUtcGF0aG5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92YWx1ZS1lcXVhbC9lc20vdmFsdWUtZXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpbnktaW52YXJpYW50L2Rpc3QvdGlueS1pbnZhcmlhbnQuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzbS9oaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9taW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0L2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXNtL3JlYWN0LXJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29ubmVjdGVkLXJlYWN0LXJvdXRlci9lc20vYWN0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29ubmVjdGVkLXJlYWN0LXJvdXRlci9lc20vc2VsZWN0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb25uZWN0ZWQtcmVhY3Qtcm91dGVyL2VzbS9Db25uZWN0ZWRSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nvbm5lY3RlZC1yZWFjdC1yb3V0ZXIvZXNtL3JlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nvbm5lY3RlZC1yZWFjdC1yb3V0ZXIvZXNtL3N0cnVjdHVyZS9wbGFpbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29ubmVjdGVkLXJlYWN0LXJvdXRlci9lc20vc3RydWN0dXJlL3BsYWluL2dldEluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb25uZWN0ZWQtcmVhY3Qtcm91dGVyL2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lc20vcmVhY3Qtcm91dGVyLWRvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vY29uZmlnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uR3JvdXBDb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL3V0aWxzL0NoaWxkTWFwcGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbkdyb3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10b2FzdGlmeS9lc20vcmVhY3QtdG9hc3RpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2ltYWdlcy9zcGlkZXI1LnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zZXJ2aWNlcy9scy1zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9uYXZiYXIvbmF2YmFyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9hcGkvYXBpLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9ub3RpZnlNZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hdXRoL2F1dGgtYWN0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hdXRoL2F1dGguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYXV0aC9zaWdub3V0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3V0aWxzL2FjdGlvblR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb25uZWN0ZWQtcmVhY3Qtcm91dGVyL2VzbS9taWRkbGV3YXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC10aHVuay9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9yZWR1Y2Vycy9hcnRpY2xlLXJlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvcmVkdWNlcnMvdXNlci1yZWR1Y2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9yb290LXJlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3V0aWxzL2VmZmVjdHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc29ja2V0RXZlbnRzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3V0aWxzL2FjdGlvblR5cGVzU29ja2V0LmpzIiwid2VicGFjazovLy8uL3NyYy9zb2NrZXRIYW5kbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2luZGV4LWFjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvaG9tZS9hcnRpY2xlLWFjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbHMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvaG9tZS9maWx0ZXIvZmlsdGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9sb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvaG9tZS9tYWluL21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvaG9tZS9ob21lLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Jsb2cvYmxvZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9yb3V0ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJvYmoiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl90eXBlb2YiLCJhc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJzZWxmIiwiX2dldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNvbnN0cnVjdG9yIiwicmFuZG9tU3RyaW5nIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyaW5nIiwic3BsaXQiLCJqb2luIiwiQWN0aW9uVHlwZXMiLCJJTklUIiwiUkVQTEFDRSIsIlBST0JFX1VOS05PV05fQUNUSU9OIiwiaXNQbGFpbk9iamVjdCIsInByb3RvIiwiY3JlYXRlU3RvcmUiLCJyZWR1Y2VyIiwicHJlbG9hZGVkU3RhdGUiLCJlbmhhbmNlciIsIl9yZWYyIiwiYXJndW1lbnRzIiwiRXJyb3IiLCJ1bmRlZmluZWQiLCJjdXJyZW50UmVkdWNlciIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiaXNEaXNwYXRjaGluZyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJzbGljZSIsImdldFN0YXRlIiwic3Vic2NyaWJlIiwibGlzdGVuZXIiLCJpc1N1YnNjcmliZWQiLCJwdXNoIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiZGlzcGF0Y2giLCJhY3Rpb24iLCJ0eXBlIiwibGlzdGVuZXJzIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsIl9yZWYiLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwib2JzZXJ2ZVN0YXRlIiwibmV4dCIsInVuc3Vic2NyaWJlIiwidGhpcyIsImdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlIiwiYWN0aW9uVHlwZSIsIlN0cmluZyIsImNvbWJpbmVSZWR1Y2VycyIsInJlZHVjZXJzIiwicmVkdWNlcktleXMiLCJrZXlzIiwiZmluYWxSZWR1Y2VycyIsInNoYXBlQXNzZXJ0aW9uRXJyb3IiLCJmaW5hbFJlZHVjZXJLZXlzIiwiZm9yRWFjaCIsImFzc2VydFJlZHVjZXJTaGFwZSIsImUiLCJzdGF0ZSIsImhhc0NoYW5nZWQiLCJuZXh0U3RhdGUiLCJfaSIsIl9rZXkiLCJwcmV2aW91c1N0YXRlRm9yS2V5IiwibmV4dFN0YXRlRm9yS2V5IiwiZXJyb3JNZXNzYWdlIiwiYmluZEFjdGlvbkNyZWF0b3IiLCJhY3Rpb25DcmVhdG9yIiwiYXBwbHkiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJhY3Rpb25DcmVhdG9ycyIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJfZGVmaW5lUHJvcGVydHkiLCJvd25LZXlzIiwiZW51bWVyYWJsZU9ubHkiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfb2JqZWN0U3ByZWFkMiIsInNvdXJjZSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY29tcG9zZSIsIl9sZW4iLCJmdW5jcyIsIkFycmF5IiwiYXJnIiwicmVkdWNlIiwiYSIsImIiLCJhcHBseU1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlcyIsInN0b3JlIiwiX2Rpc3BhdGNoIiwibWlkZGxld2FyZUFQSSIsImNoYWluIiwibWFwIiwibWlkZGxld2FyZSIsIlJlZmVyZW5jZUVycm9yIiwiUE9SVCIsIlNFUlZFUl9VUkwiLCJTRVJWRVJfUE9SVCIsIlRPS0VOIiwiaXNCdWZmZXIiLCJpc0FycmF5IiwidmFsIiwiaXNPYmplY3QiLCJpc0Z1bmN0aW9uIiwiZm4iLCJpc0FycmF5QnVmZmVyIiwiaXNGb3JtRGF0YSIsIkZvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsImlzU3RyaW5nIiwiaXNOdW1iZXIiLCJpc1VuZGVmaW5lZCIsImlzRGF0ZSIsImlzRmlsZSIsImlzQmxvYiIsImlzU3RyZWFtIiwicGlwZSIsImlzVVJMU2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJuYXZpZ2F0b3IiLCJwcm9kdWN0Iiwid2luZG93IiwiZG9jdW1lbnQiLCJtZXJnZSIsInJlc3VsdCIsImFzc2lnblZhbHVlIiwiZGVlcE1lcmdlIiwiZXh0ZW5kIiwidGhpc0FyZyIsInRyaW0iLCJzdHIiLCJyZXBsYWNlIiwiYXJyYXlXaXRob3V0SG9sZXMiLCJpdGVyYWJsZVRvQXJyYXkiLCJub25JdGVyYWJsZVNwcmVhZCIsImFyciIsInVzZVNvdXJjZU1hcCIsImxpc3QiLCJpdGVtIiwiY29udGVudCIsImNzc01hcHBpbmciLCJidG9hIiwic291cmNlTWFwcGluZyIsInNvdXJjZU1hcCIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJjb25jYXQiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZVJvb3QiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsIm1lbW8iLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJCb29sZWFuIiwiYWxsIiwiYXRvYiIsImdldFRhcmdldCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImxpc3RUb1N0eWxlcyIsIm9wdGlvbnMiLCJzdHlsZXMiLCJuZXdTdHlsZXMiLCJpZCIsImJhc2UiLCJwYXJ0IiwiY3NzIiwibWVkaWEiLCJwYXJ0cyIsImFkZFN0eWxlc1RvRG9tIiwiZG9tU3R5bGUiLCJqIiwicmVmcyIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJjcmVhdGVFbGVtZW50IiwiYXR0cmlidXRlcyIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0IiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwbHlUb1RhZyIsImZpcnN0Q2hpbGQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwidXBkYXRlIiwic3R5bGVJbmRleCIsInBhcmVudE5vZGUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwiX2RvbVN0eWxlIiwiY29uZGl0aW9uIiwiZm9ybWF0IiwiZiIsImVycm9yIiwiYXJncyIsImFyZ0luZGV4IiwiZnJhbWVzVG9Qb3AiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJnZW4iLCJyZXNvbHZlIiwicmVqZWN0IiwiX25leHQiLCJfdGhyb3ciLCJpbmZvIiwiZG9uZSIsIlByb21pc2UiLCJ0aGVuIiwiZXJyIiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJjb25zb2xlIiwiYmFzZTY0ZW5jb2RlciIsImhhc0JpbmFyeSIsInNsaWNlQnVmZmVyIiwiYWZ0ZXIiLCJ1dGY4IiwiaXNBbmRyb2lkIiwidGVzdCIsInVzZXJBZ2VudCIsImlzUGhhbnRvbUpTIiwiZG9udFNlbmRCbG9icyIsInByb3RvY29sIiwicGFja2V0cyIsIm9wZW4iLCJjbG9zZSIsInBpbmciLCJwb25nIiwibWVzc2FnZSIsInVwZ3JhZGUiLCJub29wIiwicGFja2V0c2xpc3QiLCJCbG9iIiwiYXJ5IiwiZWFjaCIsImVhY2hXaXRoSW5kZXgiLCJlbCIsImNiIiwibXNnIiwiZW5jb2RlUGFja2V0IiwicGFja2V0Iiwic3VwcG9ydHNCaW5hcnkiLCJ1dGY4ZW5jb2RlIiwiY2FsbGJhY2siLCJlbmNvZGVCYXNlNjRQYWNrZXQiLCJjb250ZW50QXJyYXkiLCJVaW50OEFycmF5IiwicmVzdWx0QnVmZmVyIiwiYnl0ZUxlbmd0aCIsImVuY29kZUFycmF5QnVmZmVyIiwiZnIiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJlbmNvZGVCbG9iQXNBcnJheUJ1ZmZlciIsImJsb2IiLCJlbmNvZGVCbG9iIiwiZW5jb2RlQmFzZTY0T2JqZWN0IiwiZW5jb2RlZCIsImVuY29kZSIsInN0cmljdCIsImI2NGRhdGEiLCJiNjQiLCJyZWFkQXNEYXRhVVJMIiwiZnJvbUNoYXJDb2RlIiwidHlwZWQiLCJiYXNpYyIsImRlY29kZVBhY2tldCIsImJpbmFyeVR5cGUiLCJ1dGY4ZGVjb2RlIiwiY2hhckF0IiwiZGVjb2RlQmFzZTY0UGFja2V0Iiwic3Vic3RyIiwiZGVjb2RlIiwidHJ5RGVjb2RlIiwiTnVtYmVyIiwicmVzdCIsImVuY29kZVBheWxvYWQiLCJpc0JpbmFyeSIsImVuY29kZVBheWxvYWRBc0Jsb2IiLCJlbmNvZGVQYXlsb2FkQXNBcnJheUJ1ZmZlciIsImRvbmVDYWxsYmFjayIsInNldExlbmd0aEhlYWRlciIsInJlc3VsdHMiLCJkZWNvZGVQYXlsb2FkIiwiZGVjb2RlUGF5bG9hZEFzQmluYXJ5IiwiY2hyIiwiZW5jb2RlZFBhY2tldHMiLCJ0b3RhbExlbmd0aCIsImFjYyIsImxlbiIsInJlc3VsdEFycmF5IiwiYnVmZmVySW5kZXgiLCJhYiIsInZpZXciLCJjaGFyQ29kZUF0IiwibGVuU3RyIiwicGFyc2VJbnQiLCJiaW5hcnlJZGVudGlmaWVyIiwic2l6ZSIsImxlbmd0aEFyeSIsImJ1ZmZlclRhaWwiLCJidWZmZXJzIiwidGFpbEFycmF5IiwibXNnTGVuZ3RoIiwidG90YWwiLCJQYXJzZXIiLCJEb21IYW5kbGVyIiwiZGVmaW5lUHJvcCIsIlRva2VuaXplciIsIkVsZW1lbnRUeXBlIiwiRGVmYXVsdEhhbmRsZXIiLCJGZWVkSGFuZGxlciIsInBhcnNlRE9NIiwiaGFuZGxlciIsImVuZCIsImRvbSIsInBhcnNlRmVlZCIsImZlZWQiLCJjcmVhdGVEb21TdHJlYW0iLCJlbGVtZW50Q2IiLCJFVkVOVFMiLCJhdHRyaWJ1dGUiLCJjZGF0YXN0YXJ0IiwiY2RhdGFlbmQiLCJ0ZXh0IiwicHJvY2Vzc2luZ2luc3RydWN0aW9uIiwiY29tbWVudCIsImNvbW1lbnRlbmQiLCJjbG9zZXRhZyIsIm9wZW50YWciLCJvcGVudGFnbmFtZSIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJwcm9jZXNzIiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJydW4iLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwiYXJyYXkiLCJuZXh0VGljayIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsImllZWU3NTQiLCJrTWF4TGVuZ3RoIiwiQnVmZmVyIiwiVFlQRURfQVJSQVlfU1VQUE9SVCIsImNyZWF0ZUJ1ZmZlciIsInRoYXQiLCJSYW5nZUVycm9yIiwiZW5jb2RpbmdPck9mZnNldCIsImFsbG9jVW5zYWZlIiwiZnJvbSIsImJ5dGVPZmZzZXQiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFycmF5QnVmZmVyIiwic3RyaW5nIiwiZW5jb2RpbmciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwid3JpdGUiLCJmcm9tU3RyaW5nIiwiY2hlY2tlZCIsImNvcHkiLCJmcm9tT2JqZWN0IiwiYXNzZXJ0U2l6ZSIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwidG9Mb3dlckNhc2UiLCJzbG93VG9TdHJpbmciLCJzdGFydCIsImhleFNsaWNlIiwidXRmOFNsaWNlIiwiYXNjaWlTbGljZSIsImxhdGluMVNsaWNlIiwiYmFzZTY0U2xpY2UiLCJ1dGYxNmxlU2xpY2UiLCJzd2FwIiwiYmlkaXJlY3Rpb25hbEluZGV4T2YiLCJpc05hTiIsImFycmF5SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwicmVhZCIsImJ1ZiIsInJlYWRVSW50MTZCRSIsImZvdW5kSW5kZXgiLCJmb3VuZCIsImhleFdyaXRlIiwib2Zmc2V0IiwicmVtYWluaW5nIiwic3RyTGVuIiwicGFyc2VkIiwidXRmOFdyaXRlIiwiYmxpdEJ1ZmZlciIsImFzY2lpV3JpdGUiLCJieXRlQXJyYXkiLCJhc2NpaVRvQnl0ZXMiLCJsYXRpbjFXcml0ZSIsImJhc2U2NFdyaXRlIiwidWNzMldyaXRlIiwidW5pdHMiLCJoaSIsImxvIiwidXRmMTZsZVRvQnl0ZXMiLCJmcm9tQnl0ZUFycmF5IiwibWluIiwicmVzIiwic2Vjb25kQnl0ZSIsInRoaXJkQnl0ZSIsImZvdXJ0aEJ5dGUiLCJ0ZW1wQ29kZVBvaW50IiwiZmlyc3RCeXRlIiwiY29kZVBvaW50IiwiYnl0ZXNQZXJTZXF1ZW5jZSIsImNvZGVQb2ludHMiLCJNQVhfQVJHVU1FTlRTX0xFTkdUSCIsImRlY29kZUNvZGVQb2ludHNBcnJheSIsIlNsb3dCdWZmZXIiLCJhbGxvYyIsIklOU1BFQ1RfTUFYX0JZVEVTIiwiZ2xvYmFsIiwiZm9vIiwic3ViYXJyYXkiLCJ0eXBlZEFycmF5U3VwcG9ydCIsInBvb2xTaXplIiwiX2F1Z21lbnQiLCJzcGVjaWVzIiwiZmlsbCIsImFsbG9jVW5zYWZlU2xvdyIsIl9pc0J1ZmZlciIsImNvbXBhcmUiLCJ4IiwieSIsInBvcyIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImVxdWFscyIsImluc3BlY3QiLCJtYXgiLCJtYXRjaCIsInRoaXNTdGFydCIsInRoaXNFbmQiLCJ0aGlzQ29weSIsInRhcmdldENvcHkiLCJpbmNsdWRlcyIsImlzRmluaXRlIiwidG9KU09OIiwiX2FyciIsInJldCIsIm91dCIsInRvSGV4IiwiYnl0ZXMiLCJjaGVja09mZnNldCIsImV4dCIsImNoZWNrSW50Iiwib2JqZWN0V3JpdGVVSW50MTYiLCJsaXR0bGVFbmRpYW4iLCJvYmplY3RXcml0ZVVJbnQzMiIsImNoZWNrSUVFRTc1NCIsIndyaXRlRmxvYXQiLCJub0Fzc2VydCIsIndyaXRlRG91YmxlIiwibmV3QnVmIiwic2xpY2VMZW4iLCJyZWFkVUludExFIiwibXVsIiwicmVhZFVJbnRCRSIsInJlYWRVSW50OCIsInJlYWRVSW50MTZMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVSW50MzJCRSIsInJlYWRJbnRMRSIsInBvdyIsInJlYWRJbnRCRSIsInJlYWRJbnQ4IiwicmVhZEludDE2TEUiLCJyZWFkSW50MTZCRSIsInJlYWRJbnQzMkxFIiwicmVhZEludDMyQkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVSW50TEUiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVUludDgiLCJmbG9vciIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUludExFIiwibGltaXQiLCJzdWIiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsInNldCIsImNvZGUiLCJJTlZBTElEX0JBU0U2NF9SRSIsIkluZmluaXR5IiwibGVhZFN1cnJvZ2F0ZSIsInRvQnl0ZUFycmF5Iiwic3RyaW5ndHJpbSIsImJhc2U2NGNsZWFuIiwic3JjIiwiZHN0IiwiVGV4dCIsIkRpcmVjdGl2ZSIsIkNvbW1lbnQiLCJTY3JpcHQiLCJTdHlsZSIsIlRhZyIsIkNEQVRBIiwiRG9jdHlwZSIsImlzVGFnIiwiZWxlbSIsIlJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImRpc3BsYXlOYW1lIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImNvbXBvbmVudCIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsImhhc093biIsImNsYXNzTmFtZXMiLCJjbGFzc2VzIiwiYXJnVHlwZSIsImlubmVyIiwiZGVmYXVsdCIsImciLCJGdW5jdGlvbiIsImxvZyIsImZvcm1hdEFyZ3MiLCJ1c2VDb2xvcnMiLCJuYW1lc3BhY2UiLCJodW1hbml6ZSIsImRpZmYiLCJjb2xvciIsImxhc3RDIiwic2F2ZSIsIm5hbWVzcGFjZXMiLCJzdG9yYWdlIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJsb2FkIiwiZ2V0SXRlbSIsIkRFQlVHIiwiX19ud2pzIiwiZG9jdW1lbnRFbGVtZW50IiwiV2Via2l0QXBwZWFyYW5jZSIsImZpcmVidWciLCJleGNlcHRpb24iLCJ0YWJsZSIsIlJlZ0V4cCIsIiQxIiwibG9jYWxTdG9yYWdlIiwibG9jYWxzdG9yYWdlIiwiY29sb3JzIiwiZm9ybWF0dGVycyIsInYiLCJxcyIsInFyeSIsInBhaXJzIiwicGFpciIsImRlY29kZVVSSUNvbXBvbmVudCIsImN0b3IiLCJzdXBlckN0b3IiLCJzdXBlcl8iLCJUZW1wQ3RvciIsInJvdXRlck1pZGRsZXdhcmUiLCJyb3V0ZXJBY3Rpb25zIiwiZ29Gb3J3YXJkIiwiZ29CYWNrIiwiZ28iLCJDQUxMX0hJU1RPUllfTUVUSE9EIiwicm91dGVyUmVkdWNlciIsIkxPQ0FUSU9OX0NIQU5HRSIsInN5bmNIaXN0b3J5V2l0aFN0b3JlIiwiX3JlZHVjZXIiLCJfYWN0aW9ucyIsIl9zeW5jMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfbWlkZGxld2FyZTIiLCJkZWJ1ZyIsIkVtaXR0ZXIiLCJiaW5hcnkiLCJpc0J1ZiIsIkVuY29kZXIiLCJ0eXBlcyIsIkNPTk5FQ1QiLCJESVNDT05ORUNUIiwiRVZFTlQiLCJBQ0siLCJFUlJPUiIsIkJJTkFSWV9FVkVOVCIsIkJJTkFSWV9BQ0siLCJEZWNvZGVyIiwiRVJST1JfUEFDS0VUIiwiZW5jb2RlQXNTdHJpbmciLCJhdHRhY2htZW50cyIsIm5zcCIsInBheWxvYWQiLCJ0cnlTdHJpbmdpZnkiLCJyZWNvbnN0cnVjdG9yIiwiQmluYXJ5UmVjb25zdHJ1Y3RvciIsInJlY29uUGFjayIsInJlbW92ZUJsb2JzIiwiYmxvYmxlc3NEYXRhIiwiZGVjb25zdHJ1Y3Rpb24iLCJkZWNvbnN0cnVjdFBhY2tldCIsInBhY2siLCJ1bnNoaWZ0IiwiZW5jb2RlQXNCaW5hcnkiLCJhZGQiLCJwYXJzZSIsInRyeVBhcnNlIiwiZGVjb2RlU3RyaW5nIiwidGFrZUJpbmFyeURhdGEiLCJkZXN0cm95IiwiZmluaXNoZWRSZWNvbnN0cnVjdGlvbiIsImJpbkRhdGEiLCJyZWNvbnN0cnVjdFBhY2tldCIsImhhc0NPUlMiLCJvcHRzIiwieGRvbWFpbiIsInhzY2hlbWUiLCJlbmFibGVzWERSIiwiWE1MSHR0cFJlcXVlc3QiLCJYRG9tYWluUmVxdWVzdCIsInBhcnNlciIsIlRyYW5zcG9ydCIsInBhdGgiLCJob3N0bmFtZSIsInBvcnQiLCJzZWN1cmUiLCJxdWVyeSIsInRpbWVzdGFtcFBhcmFtIiwidGltZXN0YW1wUmVxdWVzdHMiLCJyZWFkeVN0YXRlIiwiYWdlbnQiLCJzb2NrZXQiLCJ3aXRoQ3JlZGVudGlhbHMiLCJwZngiLCJwYXNzcGhyYXNlIiwiY2VydCIsImNhIiwiY2lwaGVycyIsInJlamVjdFVuYXV0aG9yaXplZCIsImZvcmNlTm9kZSIsImlzUmVhY3ROYXRpdmUiLCJleHRyYUhlYWRlcnMiLCJsb2NhbEFkZHJlc3MiLCJvbkVycm9yIiwiZGVzYyIsImRlc2NyaXB0aW9uIiwiZG9PcGVuIiwiZG9DbG9zZSIsIm9uQ2xvc2UiLCJzZW5kIiwib25PcGVuIiwib25EYXRhIiwib25QYWNrZXQiLCJtaXhpbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsIl9jYWxsYmFja3MiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2FsbGJhY2tzIiwiaGFzTGlzdGVuZXJzIiwibm9kZXMiLCJ0cmFuc2Zvcm0iLCJub2RlIiwiX2lzRW1wdHlUZXh0Tm9kZTIiLCJ0cmFuc2Zvcm1lZCIsIl9jb252ZXJ0Tm9kZVRvRWxlbWVudDIiLCJyb290IiwiaXNhcnJheSIsInBhdGhUb1JlZ2V4cCIsImNvbXBpbGUiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9SZWdFeHAiLCJQQVRIX1JFR0VYUCIsInRva2VucyIsImRlZmF1bHREZWxpbWl0ZXIiLCJkZWxpbWl0ZXIiLCJleGVjIiwiZXNjYXBlZCIsInByZWZpeCIsImNhcHR1cmUiLCJncm91cCIsIm1vZGlmaWVyIiwiYXN0ZXJpc2siLCJwYXJ0aWFsIiwicmVwZWF0Iiwib3B0aW9uYWwiLCJwYXR0ZXJuIiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJlbmNvZGVVUkkiLCJ0b1VwcGVyQ2FzZSIsIm1hdGNoZXMiLCJwcmV0dHkiLCJ0b2tlbiIsInNlZ21lbnQiLCJhdHRhY2hLZXlzIiwicmUiLCJmbGFncyIsInNlbnNpdGl2ZSIsInJvdXRlIiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJncm91cHMiLCJyZWdleHBUb1JlZ2V4cCIsImFycmF5VG9SZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRvT2JqZWN0IiwiYXNzaWduIiwidGVzdDEiLCJ0ZXN0MiIsInRlc3QzIiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwic3ltYm9scyIsInRvIiwidXRpbHMiLCJ1cmwiLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwic2VyaWFsaXplZFBhcmFtcyIsInRvSVNPU3RyaW5nIiwiaGFzaG1hcmtJbmRleCIsIl9fQ0FOQ0VMX18iLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJoZWFkZXJzIiwiYWRhcHRlciIsImRlZmF1bHRzIiwidHJhbnNmb3JtUmVxdWVzdCIsInRyYW5zZm9ybVJlc3BvbnNlIiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsIm1heENvbnRlbnRMZW5ndGgiLCJ2YWxpZGF0ZVN0YXR1cyIsInN0YXR1cyIsImNvbW1vbiIsIm1ldGhvZCIsInNldHRsZSIsImJ1aWxkVVJMIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwiY3JlYXRlRXJyb3IiLCJjb25maWciLCJyZXF1ZXN0RGF0YSIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdCIsImF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiQXV0aG9yaXphdGlvbiIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0Iiwib25hYm9ydCIsIm9uZXJyb3IiLCJvbnRpbWVvdXQiLCJjb29raWVzIiwieHNyZlZhbHVlIiwic2V0UmVxdWVzdEhlYWRlciIsIm9uRG93bmxvYWRQcm9ncmVzcyIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWxUb2tlbiIsInByb21pc2UiLCJjYW5jZWwiLCJhYm9ydCIsImVuaGFuY2VFcnJvciIsImNvbmZpZzEiLCJjb25maWcyIiwicHJvcCIsIkNhbmNlbCIsIl9leHRlbmRzIiwiaW5pdGlhbFN0YXRlIiwibG9jYXRpb25CZWZvcmVUcmFuc2l0aW9ucyIsInVwZGF0ZUxvY2F0aW9uIiwidXJpIiwiaG9zdCIsImF1dGhvcml0eSIsImlwdjZ1cmkiLCJ3aXRoTmF0aXZlQnVmZmVyIiwid2l0aE5hdGl2ZUFycmF5QnVmZmVyIiwiZWlvIiwiU29ja2V0IiwiQmFja29mZiIsImhhcyIsIk1hbmFnZXIiLCJuc3BzIiwic3VicyIsInJlY29ubmVjdGlvbiIsInJlY29ubmVjdGlvbkF0dGVtcHRzIiwicmVjb25uZWN0aW9uRGVsYXkiLCJyZWNvbm5lY3Rpb25EZWxheU1heCIsInJhbmRvbWl6YXRpb25GYWN0b3IiLCJiYWNrb2ZmIiwiaml0dGVyIiwiY29ubmVjdGluZyIsImxhc3RQaW5nIiwicGFja2V0QnVmZmVyIiwiX3BhcnNlciIsImVuY29kZXIiLCJkZWNvZGVyIiwiYXV0b0Nvbm5lY3QiLCJlbWl0QWxsIiwidXBkYXRlU29ja2V0SWRzIiwiZ2VuZXJhdGVJZCIsImVuZ2luZSIsIl9yZWNvbm5lY3Rpb24iLCJfcmVjb25uZWN0aW9uQXR0ZW1wdHMiLCJfcmVjb25uZWN0aW9uRGVsYXkiLCJzZXRNaW4iLCJfcmFuZG9taXphdGlvbkZhY3RvciIsInNldEppdHRlciIsIl9yZWNvbm5lY3Rpb25EZWxheU1heCIsInNldE1heCIsIl90aW1lb3V0IiwibWF5YmVSZWNvbm5lY3RPbk9wZW4iLCJyZWNvbm5lY3RpbmciLCJhdHRlbXB0cyIsInJlY29ubmVjdCIsImNvbm5lY3QiLCJza2lwUmVjb25uZWN0Iiwib3BlblN1YiIsIm9ub3BlbiIsImVycm9yU3ViIiwiY2xlYW51cCIsInRpbWVyIiwib25waW5nIiwiRGF0ZSIsIm9ucG9uZyIsIm9uZGF0YSIsIm9uZGVjb2RlZCIsIm9uQ29ubmVjdGluZyIsInByb2Nlc3NQYWNrZXRRdWV1ZSIsInNoaWZ0Iiwic3Vic0xlbmd0aCIsImRpc2Nvbm5lY3QiLCJyZXNldCIsIm9uY2xvc2UiLCJyZWFzb24iLCJkZWxheSIsImR1cmF0aW9uIiwib25yZWNvbm5lY3QiLCJhdHRlbXB0IiwiWEhSIiwiSlNPTlAiLCJ3ZWJzb2NrZXQiLCJwb2xsaW5nIiwieGQiLCJ4cyIsImpzb25wIiwibG9jYXRpb24iLCJpc1NTTCIsImZvcmNlSlNPTlAiLCJwYXJzZXFzIiwiaW5oZXJpdCIsInllYXN0IiwiUG9sbGluZyIsImhhc1hIUjIiLCJmb3JjZUJhc2U2NCIsInBvbGwiLCJwYXVzZSIsIm9uUGF1c2UiLCJkb1BvbGwiLCJjYWxsYmFja2ZuIiwiZG9Xcml0ZSIsInNjaGVtYSIsInNpZCIsIndpdGhOYXRpdmVCbG9iIiwid2l0aE5hdGl2ZUZpbGUiLCJGaWxlIiwicHJldiIsImFscGhhYmV0Iiwic2VlZCIsIm51bSIsIm5vdyIsImRlY29kZWQiLCJ0b0FycmF5IiwiaGFzQmluIiwiZXZlbnRzIiwiY29ubmVjdF9lcnJvciIsImNvbm5lY3RfdGltZW91dCIsInJlY29ubmVjdF9hdHRlbXB0IiwicmVjb25uZWN0X2ZhaWxlZCIsInJlY29ubmVjdF9lcnJvciIsImlvIiwianNvbiIsImlkcyIsImFja3MiLCJyZWNlaXZlQnVmZmVyIiwic2VuZEJ1ZmZlciIsImNvbm5lY3RlZCIsImRpc2Nvbm5lY3RlZCIsInN1YkV2ZW50cyIsImV2IiwiY29tcHJlc3MiLCJwb3AiLCJvbnBhY2tldCIsInNhbWVOYW1lc3BhY2UiLCJyb290TmFtZXNwYWNlRXJyb3IiLCJvbmNvbm5lY3QiLCJvbmV2ZW50Iiwib25hY2siLCJvbmRpc2Nvbm5lY3QiLCJhY2siLCJzZW50IiwiZW1pdEJ1ZmZlcmVkIiwiX2VsZW1lbnRUeXBlczIiLCJfZWxlbWVudFR5cGVzIiwiZm9ybVRhZ3MiLCJpbnB1dCIsIm9wdGlvbiIsIm9wdGdyb3VwIiwic2VsZWN0IiwiYnV0dG9uIiwiZGF0YWxpc3QiLCJ0ZXh0YXJlYSIsIm9wZW5JbXBsaWVzQ2xvc2UiLCJ0ciIsInRoIiwidGQiLCJ0aGVhZCIsImJvZHkiLCJsaW5rIiwic2NyaXB0IiwibGkiLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJvdXRwdXQiLCJ2b2lkRWxlbWVudHMiLCJhcmVhIiwiYmFzZWZvbnQiLCJiciIsImNvbCIsImNvbW1hbmQiLCJlbWJlZCIsImZyYW1lIiwiaHIiLCJpbWciLCJpc2luZGV4Iiwia2V5Z2VuIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJmb3JlaWduQ29udGV4dEVsZW1lbnRzIiwibWF0aCIsInN2ZyIsImh0bWxJbnRlZ3JhdGlvbkVsZW1lbnRzIiwibWkiLCJtbyIsIm1uIiwibXMiLCJtdGV4dCIsImZvcmVpZ25PYmplY3QiLCJyZV9uYW1lRW5kIiwiY2JzIiwiX29wdGlvbnMiLCJfY2JzIiwiX3RhZ25hbWUiLCJfYXR0cmlibmFtZSIsIl9hdHRyaWJ2YWx1ZSIsIl9hdHRyaWJzIiwiX3N0YWNrIiwiX2ZvcmVpZ25Db250ZXh0Iiwic3RhcnRJbmRleCIsImVuZEluZGV4IiwiX2xvd2VyQ2FzZVRhZ05hbWVzIiwibG93ZXJDYXNlVGFncyIsInhtbE1vZGUiLCJfbG93ZXJDYXNlQXR0cmlidXRlTmFtZXMiLCJsb3dlckNhc2VBdHRyaWJ1dGVOYW1lcyIsIl90b2tlbml6ZXIiLCJvbnBhcnNlcmluaXQiLCJFdmVudEVtaXR0ZXIiLCJfdXBkYXRlUG9zaXRpb24iLCJpbml0aWFsT2Zmc2V0IiwiX3NlY3Rpb25TdGFydCIsImdldEFic29sdXRlSW5kZXgiLCJvbnRleHQiLCJvbm9wZW50YWduYW1lIiwib25jbG9zZXRhZyIsIm9ub3BlbnRhZyIsIm9ub3BlbnRhZ2VuZCIsIl9jbG9zZUN1cnJlbnRUYWciLCJvbnNlbGZjbG9zaW5ndGFnIiwicmVjb2duaXplU2VsZkNsb3NpbmciLCJvbmF0dHJpYm5hbWUiLCJvbmF0dHJpYmRhdGEiLCJvbmF0dHJpYmVuZCIsIm9uYXR0cmlidXRlIiwiX2dldEluc3RydWN0aW9uTmFtZSIsImlkeCIsInNlYXJjaCIsIm9uZGVjbGFyYXRpb24iLCJvbnByb2Nlc3NpbmdpbnN0cnVjdGlvbiIsIm9uY29tbWVudCIsIm9uY29tbWVudGVuZCIsIm9uY2RhdGEiLCJyZWNvZ25pemVDREFUQSIsIm9uY2RhdGFzdGFydCIsIm9uY2RhdGFlbmQiLCJvbmVuZCIsIm9ucmVzZXQiLCJwYXJzZUNvbXBsZXRlIiwiY2h1bmsiLCJyZXN1bWUiLCJwYXJzZUNodW5rIiwiZGVjb2RlQ29kZVBvaW50IiwiZW50aXR5TWFwIiwibGVnYWN5TWFwIiwieG1sTWFwIiwiVEVYVCIsIkJFRk9SRV9UQUdfTkFNRSIsIklOX1RBR19OQU1FIiwiSU5fU0VMRl9DTE9TSU5HX1RBRyIsIkJFRk9SRV9DTE9TSU5HX1RBR19OQU1FIiwiSU5fQ0xPU0lOR19UQUdfTkFNRSIsIkFGVEVSX0NMT1NJTkdfVEFHX05BTUUiLCJCRUZPUkVfQVRUUklCVVRFX05BTUUiLCJJTl9BVFRSSUJVVEVfTkFNRSIsIkFGVEVSX0FUVFJJQlVURV9OQU1FIiwiQkVGT1JFX0FUVFJJQlVURV9WQUxVRSIsIklOX0FUVFJJQlVURV9WQUxVRV9EUSIsIklOX0FUVFJJQlVURV9WQUxVRV9TUSIsIklOX0FUVFJJQlVURV9WQUxVRV9OUSIsIkJFRk9SRV9ERUNMQVJBVElPTiIsIklOX0RFQ0xBUkFUSU9OIiwiSU5fUFJPQ0VTU0lOR19JTlNUUlVDVElPTiIsIkJFRk9SRV9DT01NRU5UIiwiSU5fQ09NTUVOVCIsIkFGVEVSX0NPTU1FTlRfMSIsIkFGVEVSX0NPTU1FTlRfMiIsIkJFRk9SRV9DREFUQV8xIiwiQkVGT1JFX0NEQVRBXzIiLCJCRUZPUkVfQ0RBVEFfMyIsIkJFRk9SRV9DREFUQV80IiwiQkVGT1JFX0NEQVRBXzUiLCJCRUZPUkVfQ0RBVEFfNiIsIklOX0NEQVRBIiwiQUZURVJfQ0RBVEFfMSIsIkFGVEVSX0NEQVRBXzIiLCJCRUZPUkVfU1BFQ0lBTCIsIkJFRk9SRV9TUEVDSUFMX0VORCIsIkJFRk9SRV9TQ1JJUFRfMSIsIkJFRk9SRV9TQ1JJUFRfMiIsIkJFRk9SRV9TQ1JJUFRfMyIsIkJFRk9SRV9TQ1JJUFRfNCIsIkJFRk9SRV9TQ1JJUFRfNSIsIkFGVEVSX1NDUklQVF8xIiwiQUZURVJfU0NSSVBUXzIiLCJBRlRFUl9TQ1JJUFRfMyIsIkFGVEVSX1NDUklQVF80IiwiQUZURVJfU0NSSVBUXzUiLCJCRUZPUkVfU1RZTEVfMSIsIkJFRk9SRV9TVFlMRV8yIiwiQkVGT1JFX1NUWUxFXzMiLCJCRUZPUkVfU1RZTEVfNCIsIkFGVEVSX1NUWUxFXzEiLCJBRlRFUl9TVFlMRV8yIiwiQUZURVJfU1RZTEVfMyIsIkFGVEVSX1NUWUxFXzQiLCJCRUZPUkVfRU5USVRZIiwiQkVGT1JFX05VTUVSSUNfRU5USVRZIiwiSU5fTkFNRURfRU5USVRZIiwiSU5fTlVNRVJJQ19FTlRJVFkiLCJJTl9IRVhfRU5USVRZIiwiU1BFQ0lBTF9OT05FIiwiU1BFQ0lBTF9TQ1JJUFQiLCJTUEVDSUFMX1NUWUxFIiwid2hpdGVzcGFjZSIsImlmRWxzZVN0YXRlIiwidXBwZXIiLCJTVUNDRVNTIiwiRkFJTFVSRSIsImxvd2VyIiwiX3N0YXRlIiwiX2luZGV4IiwiY29uc3VtZVNwZWNpYWxOYW1lQ2hhciIsIk5FWFRfU1RBVEUiLCJfYnVmZmVyIiwiX2J1ZmZlck9mZnNldCIsIl9iYXNlU3RhdGUiLCJfc3BlY2lhbCIsIl9ydW5uaW5nIiwiX2VuZGVkIiwiX3htbE1vZGUiLCJfZGVjb2RlRW50aXRpZXMiLCJkZWNvZGVFbnRpdGllcyIsIl9zdGF0ZVRleHQiLCJfZ2V0U2VjdGlvbiIsIl9zdGF0ZUJlZm9yZVRhZ05hbWUiLCJfc3RhdGVJblRhZ05hbWUiLCJfZW1pdFRva2VuIiwiX3N0YXRlQmVmb3JlQ2xvc2VpbmdUYWdOYW1lIiwiX3N0YXRlSW5DbG9zZWluZ1RhZ05hbWUiLCJfc3RhdGVBZnRlckNsb3NlaW5nVGFnTmFtZSIsIl9zdGF0ZUJlZm9yZUF0dHJpYnV0ZU5hbWUiLCJfc3RhdGVJblNlbGZDbG9zaW5nVGFnIiwiX3N0YXRlSW5BdHRyaWJ1dGVOYW1lIiwiX3N0YXRlQWZ0ZXJBdHRyaWJ1dGVOYW1lIiwiX3N0YXRlQmVmb3JlQXR0cmlidXRlVmFsdWUiLCJfc3RhdGVJbkF0dHJpYnV0ZVZhbHVlRG91YmxlUXVvdGVzIiwiX3N0YXRlSW5BdHRyaWJ1dGVWYWx1ZVNpbmdsZVF1b3RlcyIsIl9zdGF0ZUluQXR0cmlidXRlVmFsdWVOb1F1b3RlcyIsIl9zdGF0ZUJlZm9yZURlY2xhcmF0aW9uIiwiX3N0YXRlSW5EZWNsYXJhdGlvbiIsIl9zdGF0ZUluUHJvY2Vzc2luZ0luc3RydWN0aW9uIiwiX3N0YXRlQmVmb3JlQ29tbWVudCIsIl9zdGF0ZUluQ29tbWVudCIsIl9zdGF0ZUFmdGVyQ29tbWVudDEiLCJfc3RhdGVBZnRlckNvbW1lbnQyIiwiX3N0YXRlQmVmb3JlQ2RhdGExIiwiX3N0YXRlQmVmb3JlQ2RhdGEyIiwiX3N0YXRlQmVmb3JlQ2RhdGEzIiwiX3N0YXRlQmVmb3JlQ2RhdGE0IiwiX3N0YXRlQmVmb3JlQ2RhdGE1IiwiX3N0YXRlQmVmb3JlQ2RhdGE2IiwiX3N0YXRlSW5DZGF0YSIsIl9zdGF0ZUFmdGVyQ2RhdGExIiwiX3N0YXRlQWZ0ZXJDZGF0YTIiLCJfc3RhdGVCZWZvcmVTcGVjaWFsIiwiX3N0YXRlQmVmb3JlU3BlY2lhbEVuZCIsIl9zdGF0ZUJlZm9yZVNjcmlwdDEiLCJfc3RhdGVCZWZvcmVTY3JpcHQyIiwiX3N0YXRlQmVmb3JlU2NyaXB0MyIsIl9zdGF0ZUJlZm9yZVNjcmlwdDQiLCJfc3RhdGVCZWZvcmVTY3JpcHQ1IiwiX3N0YXRlQWZ0ZXJTY3JpcHQxIiwiX3N0YXRlQWZ0ZXJTY3JpcHQyIiwiX3N0YXRlQWZ0ZXJTY3JpcHQzIiwiX3N0YXRlQWZ0ZXJTY3JpcHQ0IiwiX3N0YXRlQWZ0ZXJTY3JpcHQ1IiwiX3N0YXRlQmVmb3JlU3R5bGUxIiwiX3N0YXRlQmVmb3JlU3R5bGUyIiwiX3N0YXRlQmVmb3JlU3R5bGUzIiwiX3N0YXRlQmVmb3JlU3R5bGU0IiwiX3N0YXRlQWZ0ZXJTdHlsZTEiLCJfc3RhdGVBZnRlclN0eWxlMiIsIl9zdGF0ZUFmdGVyU3R5bGUzIiwiX3N0YXRlQWZ0ZXJTdHlsZTQiLCJfc3RhdGVCZWZvcmVFbnRpdHkiLCJfc3RhdGVCZWZvcmVOdW1lcmljRW50aXR5IiwiX3BhcnNlTmFtZWRFbnRpdHlTdHJpY3QiLCJlbnRpdHkiLCJfZW1pdFBhcnRpYWwiLCJfcGFyc2VMZWdhY3lFbnRpdHkiLCJfc3RhdGVJbk5hbWVkRW50aXR5IiwiX2RlY29kZU51bWVyaWNFbnRpdHkiLCJzZWN0aW9uU3RhcnQiLCJfc3RhdGVJbk51bWVyaWNFbnRpdHkiLCJfc3RhdGVJbkhleEVudGl0eSIsIl9jbGVhbnVwIiwiX3BhcnNlIiwiX2ZpbmlzaCIsIl9oYW5kbGVUcmFpbGluZ0RhdGEiLCJyZV93aGl0ZXNwYWNlIiwiTm9kZVByb3RvdHlwZSIsIkVsZW1lbnRQcm90b3R5cGUiLCJlbGVtZW50Q0IiLCJkZWZhdWx0T3B0cyIsIl9jYWxsYmFjayIsIl9lbGVtZW50Q0IiLCJfZG9uZSIsIl90YWdTdGFjayIsIm5vcm1hbGl6ZVdoaXRlc3BhY2UiLCJ3aXRoU3RhcnRJbmRpY2VzIiwid2l0aEVuZEluZGljZXMiLCJfaGFuZGxlQ2FsbGJhY2siLCJfY3JlYXRlRG9tRWxlbWVudCIsInByb3BlcnRpZXMiLCJ3aXRoRG9tTHZsMSIsImVsZW1lbnQiLCJfYWRkRG9tRWxlbWVudCIsInBhcmVudCIsInNpYmxpbmdzIiwiY2hpbGRyZW4iLCJwcmV2aW91c1NpYmxpbmciLCJhdHRyaWJzIiwibGFzdFRhZyIsIm5vcm1hbGl6ZSIsImlnbm9yZVdoaXRlc3BhY2UiLCJub2RlVHlwZXMiLCJkb21MdmwxIiwidGFnTmFtZSIsIm5leHRTaWJsaW5nIiwibm9kZVZhbHVlIiwiY2RhdGEiLCJzaG9ydGhhbmQiLCJEb21VdGlscyIsIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsImVudGl0aWVzX2pzb25fMSIsImxlZ2FjeV9qc29uXzEiLCJ4bWxfanNvbl8xIiwiZGVjb2RlX2NvZGVwb2ludF8xIiwiZ2V0U3RyaWN0RGVjb2RlciIsImdldFJlcGxhY2VyIiwiZGVjb2RlWE1MIiwiZGVjb2RlSFRNTFN0cmljdCIsInNvcnRlciIsImRlY29kZUhUTUwiLCJsZWdhY3kiLCJzb3J0IiwicmVwbGFjZXIiLCJpbnZlcnNlWE1MIiwiZ2V0SW52ZXJzZU9iaiIsInhtbFJlcGxhY2VyIiwiZ2V0SW52ZXJzZVJlcGxhY2VyIiwiZW5jb2RlWE1MIiwiZ2V0SW52ZXJzZSIsImludmVyc2VIVE1MIiwiaHRtbFJlcGxhY2VyIiwiaW52ZXJzZSIsInNpbmdsZSIsIm11bHRpcGxlIiwiayIsImVuY29kZUhUTUwiLCJyZU5vbkFTQ0lJIiwicmVBc3RyYWxTeW1ib2xzIiwic2luZ2xlQ2hhclJlcGxhY2VyIiwiYXN0cmFsUmVwbGFjZXIiLCJfIiwicmVYbWxDaGFycyIsImVzY2FwZSIsIlN0cmVhbSIsIldyaXRhYmxlU3RyZWFtIiwiV3JpdGFibGUiLCJTdHJpbmdEZWNvZGVyIiwiX2RlY29kZXIiLCJkZWNvZGVTdHJpbmdzIiwiX3dyaXRlIiwiX2h0bWxBdHRyaWJ1dGVzVG9SZWFjdDIiLCJfaW5saW5lU3R5bGVUb09iamVjdDIiLCJuYW1lQ2FjaGUiLCJWQUxJRF9UQUdfUkVHRVgiLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJvYnNlcnZhYmxlIiwibG9va3VwIiwiY2FjaGUiLCJtYW5hZ2VycyIsImZvcmNlTmV3IiwibXVsdGlwbGV4IiwiY29tcG9zZVdpdGhEZXZUb29scyIsIl9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyIsImRldlRvb2xzRW5oYW5jZXIiLCJfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fIiwiaHRtbHBhcnNlcjIiLCJjb252ZXJ0Tm9kZVRvRWxlbWVudCIsInByb2Nlc3NOb2RlcyIsIl9wcm9jZXNzTm9kZXMiLCJfY29udmVydE5vZGVUb0VsZW1lbnQiLCJfaHRtbHBhcnNlciIsIl9IdG1sUGFyc2VyMiIsImgiLCJmb3IiLCJxIiwidSIsInciLCJ6IiwiYWEiLCJBIiwiaXRlcmF0b3IiLCJCIiwiQyIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJEIiwiRSIsImNvbnRleHQiLCJ1cGRhdGVyIiwiRiIsIkciLCJpc1JlYWN0Q29tcG9uZW50Iiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsIkgiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIkkiLCJjdXJyZW50IiwiSiIsIksiLCJMIiwicmVmIiwiX19zZWxmIiwiX19zb3VyY2UiLCJNIiwiJCR0eXBlb2YiLCJfb3duZXIiLCJOIiwiTyIsIlAiLCJRIiwia2V5UHJlZml4IiwiZnVuYyIsImNvdW50IiwiUiIsIlUiLCJTIiwiVCIsImRhIiwiViIsImJhIiwiVyIsIlgiLCJDaGlsZHJlbiIsIm9ubHkiLCJjcmVhdGVSZWYiLCJDb21wb25lbnQiLCJQdXJlQ29tcG9uZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJfY29udGV4dCIsImZvcndhcmRSZWYiLCJsYXp5IiwiX2N0b3IiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsIkZyYWdtZW50IiwiUHJvZmlsZXIiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVGYWN0b3J5IiwiaXNWYWxpZEVsZW1lbnQiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsInN1c3BlbnNlIiwiUmVhY3RDdXJyZW50T3duZXIiLCJJc1NvbWVSZW5kZXJlckFjdGluZyIsIlkiLCJaIiwiZWEiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsImZhIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJoYSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJpYSIsImphIiwiZGVwZW5kZW5jaWVzIiwia2EiLCJsYSIsIm1hIiwibmEiLCJvYSIsInBhIiwicWEiLCJzYSIsInVhIiwidmEiLCJ3YSIsImN1cnJlbnRUYXJnZXQiLCJyYSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc1BlcnNpc3RlbnQiLCJyZWxlYXNlIiwiQmEiLCJDYSIsImluamVjdEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJEYSIsInN0YXRlTm9kZSIsImRpc2FibGVkIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiS2EiLCJMYSIsIk1hIiwiTmEiLCJPYSIsIlBhIiwiUWEiLCJSYSIsIlNhIiwiVGEiLCJVYSIsIldhIiwiWGEiLCJ0YWciLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInJldHVybiIsIllhIiwiWmEiLCIkYSIsImJiIiwiZGIiLCJlYiIsImZiIiwiZ2IiLCJoYiIsImliIiwiamIiLCJrYiIsIk1hcCIsImxiIiwibWIiLCJuYiIsIm9iIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwic2IiLCJ0YiIsInViIiwidmIiLCJxYiIsInJiIiwicGIiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsIndiIiwibm9kZU5hbWUiLCJ5YiIsIl92YWx1ZVRyYWNrZXIiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwieGIiLCJ6YiIsIkFiIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJCYiIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJDYiIsIkViIiwiRmIiLCJHYiIsIm93bmVyRG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50IiwiSWIiLCJIYiIsIkpiIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJLYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiTGIiLCJNYiIsIk5iIiwidGV4dENvbnRlbnQiLCJ4bGlua0hyZWYiLCJPYiIsImh0bWwiLCJtYXRobWwiLCJQYiIsIlFiIiwiUmIiLCJTYiIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJ2YWx1ZU9mIiwiVGIiLCJsYXN0Q2hpbGQiLCJub2RlVHlwZSIsIlViIiwiVmIiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJXYiIsIlhiIiwiWWIiLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwiWmIiLCIkYiIsImFjIiwiYmMiLCJjYyIsImVjIiwiYWx0ZXJuYXRlIiwiZWZmZWN0VGFnIiwiZmMiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsImdjIiwiaWMiLCJjaGlsZCIsInNpYmxpbmciLCJoYyIsImpjIiwia2MiLCJsYyIsIm1jIiwibmMiLCJvYyIsInBjIiwicWMiLCJyYyIsInNjIiwidGMiLCJ1YyIsInZjIiwiemMiLCJibG9ja2VkT24iLCJ0b3BMZXZlbFR5cGUiLCJldmVudFN5c3RlbUZsYWdzIiwibmF0aXZlRXZlbnQiLCJBYyIsImRlbGV0ZSIsInBvaW50ZXJJZCIsIkJjIiwiQ2MiLCJFYyIsIkZjIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwicHJpb3JpdHkiLCJoeWRyYXRlIiwiY29udGFpbmVySW5mbyIsIkdjIiwiSGMiLCJJYyIsIkpjIiwiS2MiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJMYyIsIk1jIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwiTmMiLCJPYyIsImRpc3BhdGNoQ29uZmlnIiwiUGMiLCJfdGFyZ2V0SW5zdCIsIlFjIiwiUmMiLCJTYyIsIlRjIiwiVWMiLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJXYyIsImV2ZW50UG9vbCIsIlhjIiwiZGVzdHJ1Y3RvciIsIlZjIiwiZ2V0UG9vbGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiaXNUcnVzdGVkIiwiWWMiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiWmMiLCJjbGlwYm9hcmREYXRhIiwiJGMiLCJkZXRhaWwiLCJhZCIsInJlbGF0ZWRUYXJnZXQiLCJiZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsImNkIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsImRkIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsImVkIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsImdkIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsImhkIiwiY3RybEtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImxvY2FsZSIsIndoaWNoIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiYnV0dG9ucyIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwib2QiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJwZCIsImRhdGFUcmFuc2ZlciIsInFkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsInJkIiwic2QiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsInVkIiwidmQiLCJ3ZCIsInlkIiwiemQiLCJBZCIsIkJkIiwiQ2QiLCJEZCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImV2ZW50UHJpb3JpdHkiLCJFZCIsImdldEV2ZW50UHJpb3JpdHkiLCJGZCIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiR2QiLCJIZCIsIklkIiwiSmQiLCJLZCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJMZCIsIk1kIiwiTmQiLCJPZCIsIlBkIiwiUWQiLCJEYyIsIlJkIiwiU2QiLCJXZWFrTWFwIiwieGMiLCJTZXQiLCJ5YyIsIlRkIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJVZCIsIlZkIiwiV2QiLCJzZXRQcm9wZXJ0eSIsIlhkIiwibWVudWl0ZW0iLCJZZCIsIlpkIiwiaXMiLCIkZCIsImFlIiwiYmUiLCJjZSIsImRlIiwiZmUiLCJjb250ZW50V2luZG93IiwiaHJlZiIsImdlIiwiY29udGVudEVkaXRhYmxlIiwiaGUiLCJpZSIsImplIiwia2UiLCJsZSIsIm1lIiwibmUiLCJhdXRvRm9jdXMiLCJvZSIsIl9faHRtbCIsInBlIiwicWUiLCJzZSIsInRlIiwidWUiLCJ2ZSIsIndlIiwieGUiLCJ5ZSIsInplIiwiQWUiLCJCZSIsIkNlIiwiRGUiLCJFZSIsIkZlIiwiR2UiLCJIZSIsImRvY3VtZW50TW9kZSIsIkllIiwiSmUiLCJLZSIsIkxlIiwiYmVmb3JlSW5wdXQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsIk1lIiwiTmUiLCJPZSIsIlBlIiwiU2UiLCJRZSIsImNoYXIiLCJSZSIsIlRlIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInJhbmdlIiwidGVsIiwidGltZSIsIndlZWsiLCJVZSIsIlZlIiwiY2hhbmdlIiwiV2UiLCJYZSIsIlllIiwiWmUiLCIkZSIsImFmIiwiYmYiLCJjZiIsImRldGFjaEV2ZW50IiwiZGYiLCJlZiIsImF0dGFjaEV2ZW50IiwiZmYiLCJnZiIsImhmIiwibGYiLCJqZiIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJrZiIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwicG9pbnRlckVudGVyIiwicG9pbnRlckxlYXZlIiwibWYiLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsIm9mIiwicGYiLCJxZiIsInJmIiwic2YiLCJ0ZiIsInVmIiwidmYiLCJ3ZiIsInhmIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJ5ZiIsIm9uU2VsZWN0IiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsIkFmIiwiQmYiLCJDZiIsIkRmIiwiRWYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJGZiIsIkdmIiwiSGYiLCJJZiIsImdldENoaWxkQ29udGV4dCIsIkpmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJLZiIsIkxmIiwiTWYiLCJOZiIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiT2YiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsIlBmIiwidW5zdGFibGVfcmVxdWVzdFBhaW50IiwiUWYiLCJ1bnN0YWJsZV9ub3ciLCJSZiIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiU2YiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsIlRmIiwiVWYiLCJWZiIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwiV2YiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJyZyIsInNnIiwidGciLCJ1ZyIsImNoaWxkRXhwaXJhdGlvblRpbWUiLCJ2ZyIsImZpcnN0Q29udGV4dCIsImV4cGlyYXRpb25UaW1lIiwid2ciLCJ4ZyIsIm9ic2VydmVkQml0cyIsInJlc3BvbmRlcnMiLCJ5ZyIsInpnIiwiYmFzZVN0YXRlIiwiZmlyc3RVcGRhdGUiLCJsYXN0VXBkYXRlIiwiZmlyc3RDYXB0dXJlZFVwZGF0ZSIsImxhc3RDYXB0dXJlZFVwZGF0ZSIsImZpcnN0RWZmZWN0IiwibGFzdEVmZmVjdCIsImZpcnN0Q2FwdHVyZWRFZmZlY3QiLCJsYXN0Q2FwdHVyZWRFZmZlY3QiLCJBZyIsIkJnIiwic3VzcGVuc2VDb25maWciLCJuZXh0RWZmZWN0IiwiQ2ciLCJEZyIsInVwZGF0ZVF1ZXVlIiwiRWciLCJGZyIsIkdnIiwiSGciLCJJZyIsIkpnIiwiS2ciLCJMZyIsIk1nIiwiTmciLCJPZyIsIlNnIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsIlBnIiwiUWciLCJSZyIsIlRnIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiVWciLCJWZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIldnIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJYZyIsIllnIiwiX3N0cmluZ1JlZiIsIlpnIiwiJGciLCJhaCIsImJoIiwiZWxlbWVudFR5cGUiLCJjaCIsImltcGxlbWVudGF0aW9uIiwiZGgiLCJlaCIsInRhIiwiZmgiLCJnaCIsImhoIiwiaWgiLCJqaCIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJwaCIsInFoIiwibWVtb2l6ZWRQcm9wcyIsInJldmVhbE9yZGVyIiwicmgiLCJyZXNwb25kZXIiLCJzaCIsInVoIiwidmgiLCJ3aCIsInhoIiwieWgiLCJ6aCIsIkFoIiwiQmgiLCJDaCIsIkdoIiwiSGgiLCJJaCIsIkpoIiwiS2giLCJMaCIsIk1oIiwiTmgiLCJiYXNlVXBkYXRlIiwiT2giLCJQaCIsIlFoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImxhc3QiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJSaCIsIlNoIiwiVGgiLCJVaCIsImRlcHMiLCJWaCIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwicmVhZENvbnRleHQiLCJ1c2VSZXNwb25kZXIiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVuc3RhYmxlX25leHQiLCJjaSIsImRpIiwiZWkiLCJmaSIsImdpIiwicGVuZGluZ1Byb3BzIiwiaWkiLCJqaSIsImtpIiwibmkiLCJvaSIsInBpIiwicWkiLCJyaSIsInNpIiwidGkiLCJ1aSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsInZpIiwid2kiLCJwZW5kaW5nQ29udGV4dCIsIkhpIiwiSWkiLCJKaSIsIktpIiwieGkiLCJyZXRyeVRpbWUiLCJ5aSIsImZhbGxiYWNrIiwidW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2siLCJ6aSIsIkFpIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJ0YWlsIiwidGFpbEV4cGlyYXRpb24iLCJ0YWlsTW9kZSIsIkJpIiwiQ2kiLCJMaSIsIk1pIiwiTmkiLCJzdGFjayIsIm9uQ2xpY2siLCJvbmNsaWNrIiwiT2kiLCJXZWFrU2V0IiwiUGkiLCJTaSIsIlJpIiwiVGkiLCJVaSIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVmkiLCJXaSIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiUWkiLCJYaSIsIllpIiwiWmkiLCIkaSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJhaiIsIndhc011bHRpcGxlIiwiYmoiLCJkaXNwbGF5IiwiY2oiLCJkaiIsImVqIiwiZmoiLCJnaiIsImhqIiwiaWoiLCJjb21wb25lbnREaWRDYXRjaCIsImpqIiwiY29tcG9uZW50U3RhY2siLCJnayIsImtqIiwiY2VpbCIsImxqIiwibWoiLCJuaiIsIm9qIiwicGoiLCJxaiIsInJqIiwic2oiLCJ0aiIsInVqIiwidmoiLCJ3aiIsInhqIiwieWoiLCJ6aiIsIkFqIiwiQmoiLCJDaiIsIkRqIiwiRWoiLCJGaiIsIkdqIiwiSGoiLCJJaiIsIkpqIiwidGltZW91dE1zIiwiS2oiLCJMaiIsIk1qIiwiTmoiLCJPaiIsImxhc3RFeHBpcmVkVGltZSIsIlBqIiwiZmlyc3RQZW5kaW5nVGltZSIsImxhc3RQaW5nZWRUaW1lIiwibmV4dEtub3duUGVuZGluZ0xldmVsIiwiY2FsbGJhY2tFeHBpcmF0aW9uVGltZSIsImNhbGxiYWNrUHJpb3JpdHkiLCJjYWxsYmFja05vZGUiLCJRaiIsIlJqIiwiU2oiLCJUaiIsIlVqIiwiVmoiLCJXaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkRXhwaXJhdGlvblRpbWUiLCJsYXN0U3VzcGVuZGVkVGltZSIsIlhqIiwidGltZW91dEhhbmRsZSIsIllqIiwiYnVzeU1pbkR1cmF0aW9uTXMiLCJidXN5RGVsYXlNcyIsIlpqIiwiYmsiLCJjayIsInBpbmdDYWNoZSIsImRrIiwiZWsiLCJmayIsImNyZWF0ZUVsZW1lbnROUyIsImlrIiwiZmlyc3RTdXNwZW5kZWRUaW1lIiwicmFuZ2VDb3VudCIsIkRiIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImprIiwiZWUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJmb2N1cyIsIkRoIiwiZGMiLCJmZCIsImhrIiwiRWgiLCJGaCIsInhrIiwiRGkiLCJFaSIsIkZpIiwiR2kiLCJrayIsImxrIiwibWsiLCJoaWRkZW4iLCJWYSIsIm5rIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwicGsiLCJwZW5kaW5nQ2hpbGRyZW4iLCJxayIsInJrIiwic2siLCJ0ayIsInVrIiwidmsiLCJ3YyIsIl9pbnRlcm5hbFJvb3QiLCJ3ayIsInprIiwiaGFzQXR0cmlidXRlIiwieWsiLCJCayIsIkFrIiwidW5tb3VudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwiYWsiLCJDayIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJmbHVzaFN5bmMiLCJFdmVudHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50Iiwib2siLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlUHJvcHMiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsIkRrIiwiRWsiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwicGVyZm9ybWFuY2UiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInNvcnRJbmRleCIsInN0YXJ0VGltZSIsInByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJfc2V0UHJvdG90eXBlT2YiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImJvb2wiLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJ0eXBlT2YiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJMYXp5IiwiTWVtbyIsIlBvcnRhbCIsImlzVmFsaWRFbGVtZW50VHlwZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsIm9yaWdpbmFsTW9kdWxlIiwid2VicGFja1BvbHlmaWxsIiwibG9jYWxzIiwiX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIiwiX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyIsImhhc2giLCJuZWVkUXVvdGVzIiwicnVudGltZSIsIk9wIiwiJFN5bWJvbCIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsIndyYXAiLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJDb250ZXh0IiwiX2ludm9rZSIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJyZWNvcmQiLCJ0cnlDYXRjaCIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJtYWtlSW52b2tlTWV0aG9kIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsInZhbHVlcyIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiaW52b2tlIiwiX19hd2FpdCIsInVud3JhcHBlZCIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsImVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJpdGVyYWJsZSIsIml0ZXJhdG9yTWV0aG9kIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsIm1hcmsiLCJhd3JhcCIsImFzeW5jIiwiaXRlciIsInJldmVyc2UiLCJza2lwVGVtcFJlc2V0Iiwic3RvcCIsInJvb3RSZWNvcmQiLCJydmFsIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJBeGlvcyIsIm1lcmdlQ29uZmlnIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiYXhpb3MiLCJpbnN0YW5jZUNvbmZpZyIsIkNhbmNlbFRva2VuIiwiaXNDYW5jZWwiLCJwcm9taXNlcyIsInNwcmVhZCIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsImludGVyY2VwdG9ycyIsImludGVyY2VwdG9yIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJnZXRVcmkiLCJoYW5kbGVycyIsInVzZSIsImVqZWN0IiwidHJhbnNmb3JtRGF0YSIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0aHJvd0lmUmVxdWVzdGVkIiwiYmFzZVVSTCIsImZucyIsIm5vcm1hbGl6ZWROYW1lIiwiaXNBeGlvc0Vycm9yIiwiY29sdW1uTnVtYmVyIiwiaWdub3JlRHVwbGljYXRlT2YiLCJsaW5lIiwib3JpZ2luVVJMIiwibXNpZSIsInVybFBhcnNpbmdOb2RlIiwicmVzb2x2ZVVSTCIsInBhdGhuYW1lIiwicmVxdWVzdFVSTCIsImV4cGlyZXMiLCJkb21haW4iLCJjb29raWUiLCJ0b0dNVFN0cmluZyIsInJlbGF0aXZlVVJMIiwiZXhlY3V0b3IiLCJyZXNvbHZlUHJvbWlzZSIsImhpc3RvcnkiLCJfcmVmJHNlbGVjdExvY2F0aW9uU3QiLCJzZWxlY3RMb2NhdGlvblN0YXRlIiwiZGVmYXVsdFNlbGVjdExvY2F0aW9uU3RhdGUiLCJfcmVmJGFkanVzdFVybE9uUmVwbGEiLCJhZGp1c3RVcmxPblJlcGxheSIsImluaXRpYWxMb2NhdGlvbiIsImlzVGltZVRyYXZlbGluZyIsInVuc3Vic2NyaWJlRnJvbVN0b3JlIiwidW5zdWJzY3JpYmVGcm9tSGlzdG9yeSIsImN1cnJlbnRMb2NhdGlvbiIsImdldExvY2F0aW9uSW5TdG9yZSIsInVzZUluaXRpYWxJZkVtcHR5IiwiaGFuZGxlU3RvcmVDaGFuZ2UiLCJsb2NhdGlvbkluU3RvcmUiLCJ0cmFuc2l0aW9uVG8iLCJoYW5kbGVMb2NhdGlvbkNoYW5nZSIsImxpc3RlbiIsImdldEN1cnJlbnRMb2NhdGlvbiIsImxhc3RQdWJsaXNoZWRMb2NhdGlvbiIsInVuc3Vic2NyaWJlZCIsInJvdXRpbmciLCJfYWN0aW9uJHBheWxvYWQiLCJhcnIyIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwicGFyc2V1cmkiLCJzZWxlY3RDb2xvciIsImNyZWF0ZURlYnVnIiwiYWJzIiwicHJldlRpbWUiLCJlbmFibGVkIiwiY3VyciIsImNvZXJjZSIsImZvcm1hdHRlciIsImluaXQiLCJpbnN0YW5jZXMiLCJuZXdEZWJ1ZyIsInRvTmFtZXNwYWNlIiwicmVnZXhwIiwiZGlzYWJsZSIsIm5hbWVzIiwic2tpcHMiLCJlbmFibGUiLCJwbHVyYWwiLCJtc0FicyIsImlzUGx1cmFsIiwicm91bmQiLCJwYXJzZUZsb2F0IiwibG9uZyIsImZtdExvbmciLCJmbXRTaG9ydCIsImNocm9tZSIsImxvY2FsIiwicGFja2V0RGF0YSIsIl9kZWNvbnN0cnVjdFBhY2tldCIsInBsYWNlaG9sZGVyIiwiX3BsYWNlaG9sZGVyIiwibmV3RGF0YSIsIl9yZWNvbnN0cnVjdFBhY2tldCIsInBlbmRpbmdCbG9icyIsIl9yZW1vdmVCbG9icyIsImN1cktleSIsImNvbnRhaW5pbmdPYmplY3QiLCJmaWxlUmVhZGVyIiwibGVucyIsImdldExlbnMiLCJ2YWxpZExlbiIsInBsYWNlSG9sZGVyc0xlbiIsInRtcCIsIkFyciIsIl9ieXRlTGVuZ3RoIiwiY3VyQnl0ZSIsInJldkxvb2t1cCIsInVpbnQ4IiwiZXh0cmFCeXRlcyIsImxlbjIiLCJlbmNvZGVDaHVuayIsImlzTEUiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwiTmFOIiwicnQiLCJMTjIiLCJ0cmFuc3BvcnRzIiwidHJhbnNwb3J0T3B0aW9ucyIsIndyaXRlQnVmZmVyIiwicHJldkJ1ZmZlckxlbiIsInBvbGljeVBvcnQiLCJyZW1lbWJlclVwZ3JhZGUiLCJvbmx5QmluYXJ5VXBncmFkZXMiLCJwZXJNZXNzYWdlRGVmbGF0ZSIsInRocmVzaG9sZCIsInVwZ3JhZGVzIiwicGluZ0ludGVydmFsIiwicGluZ1RpbWVvdXQiLCJwaW5nSW50ZXJ2YWxUaW1lciIsInBpbmdUaW1lb3V0VGltZXIiLCJwcmlvcldlYnNvY2tldFN1Y2Nlc3MiLCJjcmVhdGVUcmFuc3BvcnQiLCJjbG9uZSIsIkVJTyIsInRyYW5zcG9ydCIsInJlcXVlc3RUaW1lb3V0IiwicHJvdG9jb2xzIiwic2V0VHJhbnNwb3J0Iiwib25EcmFpbiIsInByb2JlIiwiZmFpbGVkIiwib25UcmFuc3BvcnRPcGVuIiwidXBncmFkZUxvc2VzQmluYXJ5IiwidXBncmFkaW5nIiwiZmx1c2giLCJmcmVlemVUcmFuc3BvcnQiLCJvblRyYW5zcG9ydENsb3NlIiwib251cGdyYWRlIiwib25IYW5kc2hha2UiLCJzZXRQaW5nIiwiZmlsdGVyVXBncmFkZXMiLCJvbkhlYXJ0YmVhdCIsInNlbmRQYWNrZXQiLCJ3YWl0Rm9yVXBncmFkZSIsImNsZWFudXBBbmRDbG9zZSIsImZpbHRlcmVkVXBncmFkZXMiLCJlbXB0eSIsIlJlcXVlc3QiLCJyZXEiLCJzZW5kWGhyIiwicG9sbFhociIsInhociIsInNldERpc2FibGVIZWFkZXJDaGVjayIsImhhc1hEUiIsIm9uTG9hZCIsImNvbnRlbnRUeXBlIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJyZXF1ZXN0c0NvdW50IiwicmVxdWVzdHMiLCJvblN1Y2Nlc3MiLCJmcm9tRXJyb3IiLCJ1bmxvYWRIYW5kbGVyIiwidGVybWluYXRpb25FdmVudCIsImFycmF5YnVmZmVyIiwiYWJ2IiwiZXJyX2NiIiwiYmFpbCIsInByb3h5IiwiYnl0ZUNvdW50IiwiYnl0ZUluZGV4Iiwic3RyaW5nRnJvbUNoYXJDb2RlIiwidWNzMmRlY29kZSIsImV4dHJhIiwiY291bnRlciIsImNoZWNrU2NhbGFyVmFsdWUiLCJjcmVhdGVCeXRlIiwiZW5jb2RlQ29kZVBvaW50IiwicmVhZENvbnRpbnVhdGlvbkJ5dGUiLCJjb250aW51YXRpb25CeXRlIiwiZGVjb2RlU3ltYm9sIiwiYnl0ZTEiLCJieXRlU3RyaW5nIiwidWNzMmVuY29kZSIsImNoYXJzIiwiZW5jb2RlZDEiLCJlbmNvZGVkMiIsImVuY29kZWQzIiwiZW5jb2RlZDQiLCJidWZmZXJMZW5ndGgiLCJCbG9iQnVpbGRlciIsIldlYktpdEJsb2JCdWlsZGVyIiwiTVNCbG9iQnVpbGRlciIsIk1vekJsb2JCdWlsZGVyIiwiYmxvYlN1cHBvcnRlZCIsImJsb2JTdXBwb3J0c0FycmF5QnVmZmVyVmlldyIsImJsb2JCdWlsZGVyU3VwcG9ydGVkIiwiYXBwZW5kIiwiZ2V0QmxvYiIsIm1hcEFycmF5QnVmZmVyVmlld3MiLCJCbG9iQnVpbGRlckNvbnN0cnVjdG9yIiwiQmxvYkNvbnN0cnVjdG9yIiwiSlNPTlBQb2xsaW5nIiwick5ld2xpbmUiLCJyRXNjYXBlZE5ld2xpbmUiLCJnbG9iIiwiX19fZWlvIiwiaWZyYW1lIiwiaW5zZXJ0QXQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImlmcmFtZUlkIiwiY2xhc3NOYW1lIiwicG9zaXRpb24iLCJpbml0SWZyYW1lIiwic3VibWl0IiwiQnJvd3NlcldlYlNvY2tldCIsIk5vZGVXZWJTb2NrZXQiLCJXZWJTb2NrZXQiLCJNb3pXZWJTb2NrZXQiLCJXZWJTb2NrZXRJbXBsIiwiV1MiLCJ1c2luZ0Jyb3dzZXJXZWJTb2NrZXQiLCJjaGVjayIsIndzIiwic3VwcG9ydHMiLCJhZGRFdmVudExpc3RlbmVycyIsImZhY3RvciIsInJhbmQiLCJkZXZpYXRpb24iLCJfRWxlbWVudFR5cGUkVGV4dCRFbGUiLCJfVGV4dEVsZW1lbnRUeXBlMiIsIl9UYWdFbGVtZW50VHlwZTIiLCJfU3R5bGVFbGVtZW50VHlwZTIiLCJfVW5zdXBwb3J0ZWRFbGVtZW50VHlwZTIiLCJkZWNvZGVNYXAiLCJSZWZsZWN0T3duS2V5cyIsIlJlZmxlY3QiLCJSZWZsZWN0QXBwbHkiLCJyZWNlaXZlciIsIk51bWJlcklzTmFOIiwiX2V2ZW50cyIsIl9ldmVudHNDb3VudCIsIl9tYXhMaXN0ZW5lcnMiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwiJGdldE1heExpc3RlbmVycyIsIl9hZGRMaXN0ZW5lciIsInByZXBlbmQiLCJleGlzdGluZyIsIndhcm5pbmciLCJuZXdMaXN0ZW5lciIsIndhcm5lZCIsImVtaXR0ZXIiLCJ3YXJuIiwib25jZVdyYXBwZXIiLCJmaXJlZCIsIndyYXBGbiIsIl9vbmNlV3JhcCIsIndyYXBwZWQiLCJfbGlzdGVuZXJzIiwidW53cmFwIiwiZXZsaXN0ZW5lciIsInVud3JhcExpc3RlbmVycyIsImFycmF5Q2xvbmUiLCJsaXN0ZW5lckNvdW50Iiwic2V0TWF4TGlzdGVuZXJzIiwiZ2V0TWF4TGlzdGVuZXJzIiwiZG9FcnJvciIsImVyIiwib3JpZ2luYWxMaXN0ZW5lciIsInNwbGljZU9uZSIsInJhd0xpc3RlbmVycyIsImV2ZW50TmFtZXMiLCJnZXRFbGVtZW50cyIsIndoYXQiLCJ3aGVyZSIsImdldE9uZUVsZW1lbnQiLCJmZXRjaCIsInJlY3Vyc2UiLCJnZXRUZXh0IiwiYWRkQ29uZGl0aW9uYWxseSIsImlzVmFsaWRGZWVkIiwiY2hpbGRzIiwiZmVlZFJvb3QiLCJ1cGRhdGVkIiwiaXRlbXMiLCJwdWJEYXRlIiwiZ2V0T3V0ZXJIVE1MIiwiZ2V0SW5uZXJIVE1MIiwiZW50aXRpZXMiLCJmb3JlaWduTmFtZXMiLCJlbGVtZW50TmFtZXMiLCJhdHRyaWJ1dGVOYW1lcyIsInVuZW5jb2RlZEVsZW1lbnRzIiwieG1wIiwibm9lbWJlZCIsIm5vZnJhbWVzIiwicGxhaW50ZXh0Iiwibm9zY3JpcHQiLCJzaW5nbGVUYWciLCJjaGVlcmlvIiwicmVuZGVyVGFnIiwicmVuZGVyRGlyZWN0aXZlIiwicmVuZGVyQ29tbWVudCIsInJlbmRlckNkYXRhIiwicmVuZGVyVGV4dCIsImZvcmVpZ25Nb2RlSW50ZWdyYXRpb25Qb2ludHMiLCJmb3JtYXRBdHRycyIsImRlY29kZV8xIiwiZW5jb2RlXzEiLCJsZXZlbCIsImRlY29kZVN0cmljdCIsImVuY29kZV8yIiwiZW5jb2RlSFRNTDQiLCJlbmNvZGVIVE1MNSIsImRlY29kZV8yIiwiZGVjb2RlSFRNTDQiLCJkZWNvZGVIVE1MNSIsImRlY29kZUhUTUw0U3RyaWN0IiwiZGVjb2RlSFRNTDVTdHJpY3QiLCJkZWNvZGVYTUxTdHJpY3QiLCJkZWNvZGVfanNvbl8xIiwiZ2V0Q2hpbGRyZW4iLCJnZXRQYXJlbnQiLCJnZXRTaWJsaW5ncyIsImdldEF0dHJpYnV0ZVZhbHVlIiwiaGFzQXR0cmliIiwiZ2V0TmFtZSIsInJlbW92ZUVsZW1lbnQiLCJyZXBsYWNlRWxlbWVudCIsImN1cnJOZXh0IiwiZmluZCIsImVsZW1zIiwiZmluZE9uZUNoaWxkIiwiZmluZE9uZSIsImV4aXN0c09uZSIsImZpbmRBbGwiLCJ0ZXN0RWxlbWVudCIsInRhZ19uYW1lIiwidGFnX3R5cGUiLCJ0YWdfY29udGFpbnMiLCJDaGVja3MiLCJnZXRBdHRyaWJDaGVjayIsImF0dHJpYiIsImNvbWJpbmVGdW5jcyIsImdldEVsZW1lbnRCeUlkIiwiZ2V0RWxlbWVudHNCeVRhZ1R5cGUiLCJyZW1vdmVTdWJzZXRzIiwiYW5jZXN0b3IiLCJQT1NJVElPTiIsImNvbXBhcmVQb3MiLCJub2RlQSIsIm5vZGVCIiwic2hhcmVkUGFyZW50IiwiYVNpYmxpbmciLCJiU2libGluZyIsImFQYXJlbnRzIiwiYlBhcmVudHMiLCJ1bmlxdWVTb3J0IiwicmVsYXRpdmUiLCJDYnMiLCJzY29wZSIsInJlYWRhYmxlIiwiZW5jIiwibmVuYyIsInJldHJpZWQiLCJfbm9ybWFsaXplRW5jb2RpbmciLCJub3JtYWxpemVFbmNvZGluZyIsInV0ZjE2VGV4dCIsInV0ZjE2RW5kIiwiZmlsbExhc3QiLCJ1dGY4RmlsbExhc3QiLCJiYXNlNjRUZXh0IiwiYmFzZTY0RW5kIiwic2ltcGxlV3JpdGUiLCJzaW1wbGVFbmQiLCJsYXN0TmVlZCIsImxhc3RUb3RhbCIsImxhc3RDaGFyIiwidXRmOENoZWNrQnl0ZSIsImJ5dGUiLCJ1dGY4Q2hlY2tFeHRyYUJ5dGVzIiwidXRmOENoZWNrSW5jb21wbGV0ZSIsImNvcHlQcm9wcyIsIlNhZmVCdWZmZXIiLCJQcm94eUhhbmRsZXIiLCJDb2xsZWN0aW5nSGFuZGxlciIsInJlc3RhcnQiLCJfaXNWYWxpZFRhZ09yQXR0cmlidXRlTmFtZTIiLCJfZ2VuZXJhdGVQcm9wc0Zyb21BdHRyaWJ1dGVzMiIsIl9Wb2lkRWxlbWVudHMyIiwiX3Byb2Nlc3NOb2RlczIiLCJfcmVhY3QyIiwiYXR0ciIsIm1hcHBlZEF0dHJpYnV0ZXMiLCJsb3dlckNhc2VBdHRyaWJ1dGUiLCJfUmVhY3RBdHRyaWJ1dGVzMiIsImdldFBhcnNlZEF0dHJpYnV0ZVZhbHVlIiwiX0Jvb2xlYW5BdHRyaWJ1dGVzMiIsImFjY2VwdCIsImFjY2Vzc2tleSIsImFsbG93ZnVsbHNjcmVlbiIsImFsbG93dHJhbnNwYXJlbmN5IiwiYWx0IiwiYXMiLCJhdXRvY29tcGxldGUiLCJhdXRvcGxheSIsImNlbGxwYWRkaW5nIiwiY2VsbHNwYWNpbmciLCJjaGFyc2V0IiwiY2hhbGxlbmdlIiwiY2l0ZSIsImNsYXNzaWQiLCJjbGFzcyIsImNvbHMiLCJjb2xzcGFuIiwiY29udGVudGVkaXRhYmxlIiwiY29udGV4dG1lbnUiLCJjb250cm9scyIsImNvbnRyb2xzTGlzdCIsImNvb3JkcyIsImNyb3Nzb3JpZ2luIiwiZGVmZXIiLCJkb3dubG9hZCIsImRyYWdnYWJsZSIsImVuY3R5cGUiLCJmb3JtYWN0aW9uIiwiZm9ybWVuY3R5cGUiLCJmb3JtbWV0aG9kIiwiZm9ybW5vdmFsaWRhdGUiLCJmb3JtdGFyZ2V0IiwiZnJhbWVib3JkZXIiLCJoaWdoIiwiaHJlZmxhbmciLCJpY29uIiwiaW5wdXRtb2RlIiwiaW50ZWdyaXR5Iiwia2V5cGFyYW1zIiwia2V5dHlwZSIsImtpbmQiLCJsYWJlbCIsImxhbmciLCJsb29wIiwibG93IiwibWFuaWZlc3QiLCJtYXJnaW5oZWlnaHQiLCJtYXJnaW53aWR0aCIsIm1heGxlbmd0aCIsIm1lZGlhZ3JvdXAiLCJtaW5sZW5ndGgiLCJtdXRlZCIsIm5vdmFsaWRhdGUiLCJvcHRpbXVtIiwicGxheXNpbmxpbmUiLCJwb3N0ZXIiLCJwcmVsb2FkIiwicHJvZmlsZSIsInJhZGlvZ3JvdXAiLCJyZWFkb25seSIsInJlZmVycmVycG9saWN5IiwicmVsIiwicmVxdWlyZWQiLCJyZXZlcnNlZCIsInJvbGUiLCJyb3dzIiwicm93c3BhbiIsInNhbmRib3giLCJzY29wZWQiLCJzY3JvbGxpbmciLCJzZWFtbGVzcyIsInNpemVzIiwic2xvdCIsInNwYW4iLCJzcGVsbGNoZWNrIiwic3JjZG9jIiwic3JjbGFuZyIsInNyY3NldCIsInN0ZXAiLCJzdW1tYXJ5IiwidGFiaW5kZXgiLCJ1c2VtYXAiLCJ3bW9kZSIsImFib3V0IiwiZGF0YXR5cGUiLCJpbmxpc3QiLCJyZXNvdXJjZSIsInR5cGVvZiIsInZvY2FiIiwiYXV0b2NhcGl0YWxpemUiLCJhdXRvY29ycmVjdCIsImF1dG9zYXZlIiwiaXRlbXByb3AiLCJpdGVtc2NvcGUiLCJpdGVtdHlwZSIsIml0ZW1pZCIsIml0ZW1yZWYiLCJzZWN1cml0eSIsInVuc2VsZWN0YWJsZSIsIl9zbGljZWRUb0FycmF5IiwiX24iLCJfZCIsIl9lIiwiX3MiLCJzbGljZUl0ZXJhdG9yIiwiaW5saW5lU3R5bGUiLCJzdHlsZU9iamVjdCIsInN0eWxlUHJvcGVydHlWYWx1ZSIsIl9zdHlsZVByb3BlcnR5VmFsdWUkcyIsIl9zdHlsZVByb3BlcnR5VmFsdWUkczIiLCJjaGFyYWN0ZXIiLCJfcmVmJGRlY29kZUVudGl0aWVzIiwiX3JlZiRwcmVwcm9jZXNzTm9kZXMiLCJwcmVwcm9jZXNzTm9kZXMiLCJfaHRtbHBhcnNlcjIiLCJSZWFjdFJlZHV4Q29udGV4dCIsImdldEJhdGNoIiwiQ0xFQVJFRCIsIm51bGxMaXN0ZW5lcnMiLCJub3RpZnkiLCJTdWJzY3JpcHRpb24iLCJwYXJlbnRTdWIiLCJoYW5kbGVDaGFuZ2VXcmFwcGVyIiwiX3Byb3RvIiwiYWRkTmVzdGVkU3ViIiwidHJ5U3Vic2NyaWJlIiwibm90aWZ5TmVzdGVkU3VicyIsIm9uU3RhdGVDaGFuZ2UiLCJiYXRjaCIsImNsZWFyIiwidHJ5VW5zdWJzY3JpYmUiLCJjb250ZXh0VmFsdWUiLCJzdWJzY3JpcHRpb24iLCJwcmV2aW91c1N0YXRlIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwiRU1QVFlfQVJSQVkiLCJOT19TVUJTQ1JJUFRJT05fQVJSQVkiLCJzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIiLCJ1cGRhdGVDb3VudCIsImluaXRTdGF0ZVVwZGF0ZXMiLCJjb25uZWN0QWR2YW5jZWQiLCJzZWxlY3RvckZhY3RvcnkiLCJfcmVmMiRnZXREaXNwbGF5TmFtZSIsImdldERpc3BsYXlOYW1lIiwiX3JlZjIkbWV0aG9kTmFtZSIsIm1ldGhvZE5hbWUiLCJfcmVmMiRyZW5kZXJDb3VudFByb3AiLCJyZW5kZXJDb3VudFByb3AiLCJfcmVmMiRzaG91bGRIYW5kbGVTdGEiLCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMiLCJfcmVmMiRzdG9yZUtleSIsInN0b3JlS2V5IiwiX3JlZjIkd2l0aFJlZiIsIndpdGhSZWYiLCJfcmVmMiRmb3J3YXJkUmVmIiwiX3JlZjIkY29udGV4dCIsImNvbm5lY3RPcHRpb25zIiwiV3JhcHBlZENvbXBvbmVudCIsIndyYXBwZWRDb21wb25lbnROYW1lIiwic2VsZWN0b3JGYWN0b3J5T3B0aW9ucyIsInB1cmUiLCJ1c2VQdXJlT25seU1lbW8iLCJDb25uZWN0RnVuY3Rpb24iLCJfdXNlTWVtbyIsImZvcndhcmRlZFJlZiIsIndyYXBwZXJQcm9wcyIsInByb3BzQ29udGV4dCIsIkNvbnRleHRUb1VzZSIsImRpZFN0b3JlQ29tZUZyb21Qcm9wcyIsImRpZFN0b3JlQ29tZUZyb21Db250ZXh0IiwiY2hpbGRQcm9wc1NlbGVjdG9yIiwiY3JlYXRlQ2hpbGRTZWxlY3RvciIsIl91c2VNZW1vMiIsIm92ZXJyaWRkZW5Db250ZXh0VmFsdWUiLCJfdXNlUmVkdWNlciIsInByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQiLCJmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoIiwibGFzdENoaWxkUHJvcHMiLCJsYXN0V3JhcHBlclByb3BzIiwiY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSIsInJlbmRlcklzU2NoZWR1bGVkIiwiYWN0dWFsQ2hpbGRQcm9wcyIsImRpZFVuc3Vic2NyaWJlIiwibGFzdFRocm93bkVycm9yIiwiY2hlY2tGb3JVcGRhdGVzIiwibmV3Q2hpbGRQcm9wcyIsImxhdGVzdFN0b3JlU3RhdGUiLCJyZW5kZXJlZFdyYXBwZWRDb21wb25lbnQiLCJDb25uZWN0IiwiZm9yd2FyZGVkIiwic2hhbGxvd0VxdWFsIiwib2JqQSIsIm9iakIiLCJrZXlzQSIsImtleXNCIiwid3JhcE1hcFRvUHJvcHNDb25zdGFudCIsImdldENvbnN0YW50IiwiY29uc3RhbnQiLCJjb25zdGFudFNlbGVjdG9yIiwiZGVwZW5kc09uT3duUHJvcHMiLCJnZXREZXBlbmRzT25Pd25Qcm9wcyIsIm1hcFRvUHJvcHMiLCJ3cmFwTWFwVG9Qcm9wc0Z1bmMiLCJzdGF0ZU9yRGlzcGF0Y2giLCJvd25Qcm9wcyIsIm1hcERpc3BhdGNoVG9Qcm9wcyIsIm1hcFN0YXRlVG9Qcm9wcyIsImRlZmF1bHRNZXJnZVByb3BzIiwic3RhdGVQcm9wcyIsImRpc3BhdGNoUHJvcHMiLCJtZXJnZVByb3BzIiwibWVyZ2VkUHJvcHMiLCJhcmVNZXJnZWRQcm9wc0VxdWFsIiwiaGFzUnVuT25jZSIsIm5leHRNZXJnZWRQcm9wcyIsIndyYXBNZXJnZVByb3BzRnVuYyIsImltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImFyZVN0YXRlc0VxdWFsIiwiYXJlT3duUHJvcHNFcXVhbCIsImFyZVN0YXRlUHJvcHNFcXVhbCIsImhhc1J1bkF0TGVhc3RPbmNlIiwiaGFuZGxlU3Vic2VxdWVudENhbGxzIiwibmV4dE93blByb3BzIiwibmV4dFN0YXRlUHJvcHMiLCJzdGF0ZVByb3BzQ2hhbmdlZCIsInByb3BzQ2hhbmdlZCIsInN0YXRlQ2hhbmdlZCIsImZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJpbml0TWFwU3RhdGVUb1Byb3BzIiwiaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyIsImluaXRNZXJnZVByb3BzIiwiZmFjdG9yaWVzIiwic3RyaWN0RXF1YWwiLCJfdGVtcCIsIl9yZWYkY29ubmVjdEhPQyIsImNvbm5lY3RIT0MiLCJfcmVmJG1hcFN0YXRlVG9Qcm9wc0YiLCJtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMiLCJfcmVmJG1hcERpc3BhdGNoVG9Qcm8iLCJtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMiLCJfcmVmJG1lcmdlUHJvcHNGYWN0b3IiLCJtZXJnZVByb3BzRmFjdG9yaWVzIiwiX3JlZiRzZWxlY3RvckZhY3RvcnkiLCJfcmVmMyIsIl9yZWYzJHB1cmUiLCJfcmVmMyRhcmVTdGF0ZXNFcXVhbCIsIl9yZWYzJGFyZU93blByb3BzRXF1YSIsIl9yZWYzJGFyZVN0YXRlUHJvcHNFcSIsIl9yZWYzJGFyZU1lcmdlZFByb3BzRSIsImV4dHJhT3B0aW9ucyIsImNyZWF0ZVN0b3JlSG9vayIsInVzZVJlZHV4Q29udGV4dCIsInVzZVN0b3JlIiwiY3JlYXRlRGlzcGF0Y2hIb29rIiwicmVmRXF1YWxpdHkiLCJuZXdCYXRjaCIsImNyZWF0ZVNlbGVjdG9ySG9vayIsIl9pbmhlcml0c0xvb3NlIiwiaXNBYnNvbHV0ZSIsImhhc1RyYWlsaW5nU2xhc2giLCJ0b1BhcnRzIiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJ1cCIsImlzUHJvZHVjdGlvbiIsImFkZExlYWRpbmdTbGFzaCIsInN0cmlwTGVhZGluZ1NsYXNoIiwic3RyaXBCYXNlbmFtZSIsImhhc0Jhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwiY3JlYXRlUGF0aCIsImNyZWF0ZUxvY2F0aW9uIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJwYXJzZVBhdGgiLCJkZWNvZGVVUkkiLCJVUklFcnJvciIsImNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIiwicHJvbXB0Iiwic2V0UHJvbXB0IiwibmV4dFByb21wdCIsImNvbmZpcm1UcmFuc2l0aW9uVG8iLCJnZXRVc2VyQ29uZmlybWF0aW9uIiwiYXBwZW5kTGlzdGVuZXIiLCJpc0FjdGl2ZSIsIm5vdGlmeUxpc3RlbmVycyIsImNhblVzZURPTSIsImdldENvbmZpcm1hdGlvbiIsImNvbmZpcm0iLCJQb3BTdGF0ZUV2ZW50IiwiSGFzaENoYW5nZUV2ZW50IiwiZ2V0SGlzdG9yeVN0YXRlIiwiY3JlYXRlQnJvd3Nlckhpc3RvcnkiLCJnbG9iYWxIaXN0b3J5IiwiY2FuVXNlSGlzdG9yeSIsIm5lZWRzSGFzaENoYW5nZUxpc3RlbmVyIiwiX3Byb3BzIiwiX3Byb3BzJGZvcmNlUmVmcmVzaCIsImZvcmNlUmVmcmVzaCIsIl9wcm9wcyRnZXRVc2VyQ29uZmlybSIsIl9wcm9wcyRrZXlMZW5ndGgiLCJrZXlMZW5ndGgiLCJiYXNlbmFtZSIsImdldERPTUxvY2F0aW9uIiwiaGlzdG9yeVN0YXRlIiwiX3dpbmRvdyRsb2NhdGlvbiIsImNyZWF0ZUtleSIsInRyYW5zaXRpb25NYW5hZ2VyIiwiaGFuZGxlUG9wU3RhdGUiLCJpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IiwiaGFuZGxlUG9wIiwiaGFuZGxlSGFzaENoYW5nZSIsImZvcmNlTmV4dFBvcCIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJ0b0luZGV4IiwiYWxsS2V5cyIsImZyb21JbmRleCIsImRlbHRhIiwicmV2ZXJ0UG9wIiwiY3JlYXRlSHJlZiIsImNoZWNrRE9NTGlzdGVuZXJzIiwiaXNCbG9ja2VkIiwicHVzaFN0YXRlIiwicHJldkluZGV4IiwibmV4dEtleXMiLCJyZXBsYWNlU3RhdGUiLCJibG9jayIsInVuYmxvY2siLCJ1bmxpc3RlbiIsIkhhc2hDaGFuZ2VFdmVudCQxIiwiSGFzaFBhdGhDb2RlcnMiLCJoYXNoYmFuZyIsImVuY29kZVBhdGgiLCJkZWNvZGVQYXRoIiwibm9zbGFzaCIsInNsYXNoIiwic3RyaXBIYXNoIiwiZ2V0SGFzaFBhdGgiLCJyZXBsYWNlSGFzaFBhdGgiLCJjcmVhdGVIYXNoSGlzdG9yeSIsIl9wcm9wcyRoYXNoVHlwZSIsImhhc2hUeXBlIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiaWdub3JlUGF0aCIsImVuY29kZWRQYXRoIiwicHJldkxvY2F0aW9uIiwiYWxsUGF0aHMiLCJiYXNlVGFnIiwiZ2V0QXR0cmlidXRlIiwicHVzaEhhc2hQYXRoIiwibmV4dFBhdGhzIiwiY2xhbXAiLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsIk1BWF9TSUdORURfMzFfQklUX0lOVCIsImNhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX1Byb3ZpZGVyJGNoaWxkQ29udGV4IiwiX0NvbnN1bWVyJGNvbnRleHRUeXBlIiwiY29udGV4dFByb3AiLCJfQ29tcG9uZW50IiwiX3RoaXMiLCJuZXdWYWx1ZSIsImNoYW5nZWRCaXRzIiwibmV4dFByb3BzIiwib2xkVmFsdWUiLCJfQ29tcG9uZW50MiIsIl90aGlzMiIsIm9uVXBkYXRlIiwiX3Byb3RvMiIsIl9SZWFjdCRDb21wb25lbnQiLCJSb3V0ZXIiLCJfaXNNb3VudGVkIiwiX3BlbmRpbmdMb2NhdGlvbiIsInN0YXRpY0NvbnRleHQiLCJjb21wdXRlUm9vdE1hdGNoIiwiaXNFeGFjdCIsImNhY2hlJDEiLCJjYWNoZUxpbWl0JDEiLCJjYWNoZUNvdW50JDEiLCJtYXRjaFBhdGgiLCJfb3B0aW9ucyRleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsIm1hdGNoZWQiLCJfY29tcGlsZVBhdGgiLCJjYWNoZUtleSIsInBhdGhDYWNoZSIsImNvbXBpbGVQYXRoJDEiLCJSb3V0ZSIsImNvbnRleHQkMSIsImNvbXB1dGVkTWF0Y2giLCJfdGhpcyRwcm9wcyIsImNyZWF0ZVVSTCIsInN0YXRpY0hhbmRsZXIiLCJTd2l0Y2giLCJ3aXRoUm91dGVyIiwid3JhcHBlZENvbXBvbmVudFJlZiIsInJlbWFpbmluZ1Byb3BzIiwic3RydWN0dXJlIiwiZ2V0SW4iLCJ0b0pTIiwiZ2V0Um91dGVyIiwicm91dGVyIiwiZ2V0TG9jYXRpb24iLCJnZXRBY3Rpb24iLCJnZXRTZWFyY2giLCJnZXRIYXNoIiwiY3JlYXRlTWF0Y2hTZWxlY3RvciIsImxhc3RQYXRobmFtZSIsImxhc3RNYXRjaCIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIl9hcnJheVdpdGhIb2xlcyIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIl9ub25JdGVyYWJsZVJlc3QiLCJfb2JqZWN0U3ByZWFkIiwiaW5qZWN0UXVlcnkiLCJzZWFyY2hRdWVyeSIsImN1cnJlbnRRdWVyeSIsIl9jdXJyZW50UXVlcnkkc3BsaXQyIiwiZnJvbUpTIiwiaW5pdGlhbFJvdXRlclN0YXRlIiwiaXNGaXJzdFJlbmRlcmluZyIsIkNvbm5lY3RlZFJvdXRlciIsIl9QdXJlQ29tcG9uZW50IiwiX2NsYXNzQ2FsbENoZWNrIiwib25Mb2NhdGlvbkNoYW5nZWQiLCJpblRpbWVUcmF2ZWxsaW5nIiwiX2dldExvY2F0aW9uIiwicGF0aG5hbWVJblN0b3JlIiwic2VhcmNoSW5TdG9yZSIsImhhc2hJblN0b3JlIiwiX2hpc3RvcnkkbG9jYXRpb24iLCJwYXRobmFtZUluSGlzdG9yeSIsInNlYXJjaEluSGlzdG9yeSIsImhhc2hJbkhpc3RvcnkiLCJfaW5oZXJpdHMiLCJDb25uZWN0ZWRSb3V0ZXJXaXRoQ29udGV4dCIsInBsYWluIiwiY29ubmVjdFJvdXRlciIsInJlc29sdmVUb0xvY2F0aW9uIiwiZm9yd2FyZFJlZlNoaW0iLCJMaW5rQW5jaG9yIiwiaW5uZXJSZWYiLCJuYXZpZ2F0ZSIsIl9vbkNsaWNrIiwiZXgiLCJpc01vZGlmaWVkRXZlbnQiLCJMaW5rIiwiX3JlZjIkY29tcG9uZW50IiwiZm9yd2FyZFJlZlNoaW0kMSIsImZvcndhcmRSZWYkMSIsIl9yZWYkYXJpYUN1cnJlbnQiLCJhcmlhQ3VycmVudCIsIl9yZWYkYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlU3R5bGUiLCJjbGFzc05hbWVQcm9wIiwiaXNBY3RpdmVQcm9wIiwibG9jYXRpb25Qcm9wIiwic3R5bGVQcm9wIiwiZXNjYXBlZFBhdGgiLCJjbGFzc25hbWVzIiwiam9pbkNsYXNzbmFtZXMiLCJVTk1PVU5URUQiLCJFWElURUQiLCJFTlRFUklORyIsIkVOVEVSRUQiLCJUcmFuc2l0aW9uIiwiaW5pdGlhbFN0YXR1cyIsImFwcGVhciIsImlzTW91bnRpbmciLCJlbnRlciIsImFwcGVhclN0YXR1cyIsImluIiwidW5tb3VudE9uRXhpdCIsIm1vdW50T25FbnRlciIsIm5leHRDYWxsYmFjayIsInByZXZTdGF0ZSIsInVwZGF0ZVN0YXR1cyIsInByZXZQcm9wcyIsIm5leHRTdGF0dXMiLCJjYW5jZWxOZXh0Q2FsbGJhY2siLCJnZXRUaW1lb3V0cyIsImV4aXQiLCJtb3VudGluZyIsInBlcmZvcm1FbnRlciIsInBlcmZvcm1FeGl0IiwiYXBwZWFyaW5nIiwidGltZW91dHMiLCJlbnRlclRpbWVvdXQiLCJzYWZlU2V0U3RhdGUiLCJvbkVudGVyZWQiLCJvbkVudGVyIiwib25FbnRlcmluZyIsIm9uVHJhbnNpdGlvbkVuZCIsIl90aGlzMyIsIm9uRXhpdCIsIm9uRXhpdGluZyIsIm9uRXhpdGVkIiwic2V0TmV4dENhbGxiYWNrIiwiX3RoaXM0IiwiYWN0aXZlIiwiZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lciIsImFkZEVuZExpc3RlbmVyIiwiY2hpbGRQcm9wcyIsIlRyYW5zaXRpb25Hcm91cENvbnRleHQiLCJFWElUSU5HIiwiZ2V0Q2hpbGRNYXBwaW5nIiwibWFwRm4iLCJtYXBwZXIiLCJnZXRQcm9wIiwiZ2V0TmV4dENoaWxkTWFwcGluZyIsInByZXZDaGlsZE1hcHBpbmciLCJuZXh0Q2hpbGRNYXBwaW5nIiwiZ2V0VmFsdWVGb3JLZXkiLCJuZXh0S2V5c1BlbmRpbmciLCJwZW5kaW5nS2V5cyIsInByZXZLZXkiLCJjaGlsZE1hcHBpbmciLCJuZXh0S2V5IiwicGVuZGluZ05leHRLZXkiLCJtZXJnZUNoaWxkTWFwcGluZ3MiLCJoYXNQcmV2IiwiaGFzTmV4dCIsInByZXZDaGlsZCIsImlzTGVhdmluZyIsIlRyYW5zaXRpb25Hcm91cCIsImhhbmRsZUV4aXRlZCIsImZpcnN0UmVuZGVyIiwibW91bnRlZCIsImN1cnJlbnRDaGlsZE1hcHBpbmciLCJjaGlsZEZhY3RvcnkiLCJUT1BfTEVGVCIsIlRPUF9SSUdIVCIsIlRPUF9DRU5URVIiLCJCT1RUT01fTEVGVCIsIkJPVFRPTV9SSUdIVCIsIkJPVFRPTV9DRU5URVIiLCJUWVBFIiwiSU5GTyIsIldBUk5JTkciLCJERUZBVUxUIiwiQUNUSU9OIiwiU0hPVyIsIkNMRUFSIiwiRElEX01PVU5UIiwiV0lMTF9VTk1PVU5UIiwiT05fQ0hBTkdFIiwiTk9PUCIsIlJUX05BTUVTUEFDRSIsImlzVmFsaWREZWxheSIsIm9iamVjdFZhbHVlcyIsImNhblVzZURvbSIsImZhbHNlT3JEZWxheSIsImV2ZW50TWFuYWdlciIsImNzc1RyYW5zaXRpb24iLCJfcmVmJGR1cmF0aW9uIiwiX3JlZiRhcHBlbmRQb3NpdGlvbiIsImFwcGVuZFBvc2l0aW9uIiwiZW50ZXJEdXJhdGlvbiIsImV4aXREdXJhdGlvbiIsInByZXZlbnRFeGl0VHJhbnNpdGlvbiIsImVudGVyQ2xhc3NOYW1lIiwiZXhpdENsYXNzTmFtZSIsImNsYXNzTGlzdCIsImFuaW1hdGlvbkZpbGxNb2RlIiwiYW5pbWF0aW9uRHVyYXRpb24iLCJQcm9ncmVzc0JhciIsIl9jeCIsIl9hbmltYXRpb25FdmVudCIsImlzUnVubmluZyIsImNsb3NlVG9hc3QiLCJoaWRlIiwidXNlclN0eWxlIiwiY29udHJvbGxlZFByb2dyZXNzIiwicHJvZ3Jlc3MiLCJydGwiLCJhbmltYXRpb25QbGF5U3RhdGUiLCJhbmltYXRpb25FdmVudCIsImdldFgiLCJpTG92ZUludGVybmV0RXhwbG9yZXIiLCJUb2FzdCIsImZsYWciLCJjYW5DbG9zZU9uQ2xpY2siLCJjYW5EcmFnIiwiZHJhZyIsInJlbW92YWxEaXN0YW5jZSIsImJvdW5kaW5nUmVjdCIsInBhdXNlVG9hc3QiLCJhdXRvQ2xvc2UiLCJwbGF5VG9hc3QiLCJvbkRyYWdTdGFydCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIm9mZnNldFdpZHRoIiwiZHJhZ2dhYmxlUGVyY2VudCIsIm9uRHJhZ01vdmUiLCJnZXRZIiwib25EcmFnRW5kIiwib25EcmFnVHJhbnNpdGlvbkVuZCIsIl90aGlzJGJvdW5kaW5nUmVjdCIsImJvdHRvbSIsInJpZ2h0IiwicGF1c2VPbkhvdmVyIiwib25FeGl0VHJhbnNpdGlvbkVuZCIsInNjcm9sbEhlaWdodCIsIm1pbkhlaWdodCIsInBhZGRpbmciLCJtYXJnaW4iLCJiaW5kRHJhZ0V2ZW50cyIsInBhdXNlT25Gb2N1c0xvc3MiLCJiaW5kRm9jdXNFdmVudHMiLCJ1bmJpbmREcmFnRXZlbnRzIiwidW5iaW5kRm9jdXNFdmVudHMiLCJjbG9zZUJ1dHRvbiIsImNsb3NlT25DbGljayIsImhpZGVQcm9ncmVzc0JhciIsImJvZHlDbGFzc05hbWUiLCJwcm9ncmVzc0NsYXNzTmFtZSIsInByb2dyZXNzU3R5bGUiLCJ1cGRhdGVJZCIsInRvYXN0UHJvcHMiLCJvbk1vdXNlRW50ZXIiLCJvbk1vdXNlTGVhdmUiLCJvbk1vdXNlRG93biIsIm9uVG91Y2hTdGFydCIsIm9uTW91c2VVcCIsIm9uVG91Y2hFbmQiLCJDbG9zZUJ1dHRvbiIsImFyaWFMYWJlbCIsImNvbnRhaW5lcklkIiwiYXJpYWxMYWJlbCIsIkJvdW5jZSIsIkZsaXAiLCJUb2FzdENvbnRhaW5lciIsInRvYXN0IiwidG9hc3RLZXkiLCJjb2xsZWN0aW9uIiwiaXNUb2FzdEFjdGl2ZSIsImJ1aWxkVG9hc3QiLCJyZW1vdmVUb2FzdCIsImRpc3BhdGNoQ2hhbmdlIiwibWFrZUNsb3NlQnV0dG9uIiwidG9hc3RDbG9zZSIsInRvYXN0SWQiLCJnZXRBdXRvQ2xvc2VEZWxheSIsInRvYXN0QXV0b0Nsb3NlIiwiY2FuQmVSZW5kZXJlZCIsInBhcnNlQ2xhc3NOYW1lIiwiYmVsb25nVG9Db250YWluZXIiLCJlbmFibGVNdWx0aUNvbnRhaW5lciIsInRvYXN0T3B0aW9ucyIsInRvYXN0Q2xhc3NOYW1lIiwiYXBwZW5kVG9hc3QiLCJzdGFsZVRvYXN0SWQiLCJfZXh0ZW5kczIiLCJyZW5kZXJUb2FzdCIsIl90aGlzNSIsInRvYXN0VG9SZW5kZXIiLCJuZXdlc3RPblRvcCIsIl90aGlzNSRjb2xsZWN0aW9uJHRvYSIsImlzRG9jdW1lbnRIaWRkZW4iLCJkaXNhYmxlUG9pbnRlciIsInBvaW50ZXJFdmVudHMiLCJjb250YWluZXJzIiwibGF0ZXN0SW5zdGFuY2UiLCJjb250YWluZXJEb21Ob2RlIiwiY29udGFpbmVyQ29uZmlnIiwiaXNBbnlDb250YWluZXJNb3VudGVkIiwiZ2V0VG9hc3QiLCJjb250YWluZXIiLCJnZXRDb250YWluZXIiLCJtZXJnZU9wdGlvbnMiLCJnZXRUb2FzdElkIiwiZ2VuZXJhdGVUb2FzdElkIiwiZGlzcGF0Y2hUb2FzdCIsIl9sb29wIiwiZGlzbWlzcyIsIm9sZE9wdGlvbnMiLCJvbGRDb250ZW50IiwibmV4dE9wdGlvbnMiLCJvbkNoYW5nZSIsImNvbmZpZ3VyZSIsImNvbnRhaW5lckluc3RhbmNlIiwibHNfZ2V0IiwiTmF2YmFyIiwibmF2SXRlbXMiLCJwYXVzZU9uVmlzaWJpbGl0eUNoYW5nZSIsImxvZ28iLCJhcmlhLWhpZGRlbiIsInJlcXVpcmUiLCJzZXJ2ZXJfdXJsIiwiY2FsbEFQSSIsImNvbmZpZ09iaiIsInNpZ25VcCIsInNpZ25JbiIsIk5vdGlmeU1lIiwic3R5bGVPYmoiLCJzdWNjZXNzIiwiZ29UbyIsInNpZ25pbiIsInNpZ251cCIsInNpZ25vdXQiLCJhbGxVc2VycyIsIkF1dGgiLCJhY3Rpb25zIiwib25TaWduSW4iLCJvblNpZ25VcCIsIlNpZ25PdXQiLCJTRVRfSU5QVVRfVEFHUyIsIlNFVF9BVkFJTEFCTEVfVEFHUyIsIlNFVF9QUklNQVJZX1RBRyIsIlBVU0hfQVJUSUNMRSIsIlNFVF9BUlRJQ0xFUyIsIlNFVF9GSUxURVJFRF9BUlRJQ0xFUyIsIlNFVF9GSUxURVJfSU5QVVQiLCJTRVRfU0hPV19GSUxURVJFRCIsIlNFVF9BQ1RJVklUWSIsIlBVU0hfQUNUSVZJVFkiLCJTRVRfQkxPR19IVE1MIiwiU0VUX0JMT0dfU1RZTEUiLCJTRVRfQkxPR19SRVNQT05TRSIsIl9hcnJheVdpdGhvdXRIb2xlcyIsIl9pdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJjcmVhdGVUaHVua01pZGRsZXdhcmUiLCJleHRyYUFyZ3VtZW50IiwidGh1bmsiLCJ3aXRoRXh0cmFBcmd1bWVudCIsIm5ld1N0YXRlIiwiaW5kZXhPZkZpcnN0IiwiYXJ0aWNsZXMiLCJjcmF3bF9zdGF0dXMiLCJpbmRleE9mQXJ0aWNsZUlkIiwiaW5wdXRfdGFnIiwiYXZhaWxhYmxlX3RhZ3MiLCJwcmltYXJ5X3RhZyIsIndvcmQiLCJrZXl3b3JkcyIsImhlYWRsaW5lIiwiYXV0aG9yIiwicHVibGlzaGVyIiwiaWRlbnRpZmllciIsImZpbHRlcmVkX2FydGljbGVzIiwic2hvd19maWx0ZXJlZCIsImJsb2dfaHRtbCIsImJsb2dfc3R5bGUiLCJibG9nX3Jlc3BvbnNlIiwiYXJ0aWNsZVJlZHVjZXIiLCJhVCIsIm5ld19hcnRpY2xlcyIsIm5ld19hcnRpY2xlIiwibmV3RmlsdGVyIiwiYWN0aXZpdHkiLCJ1c2VyUmVkdWNlciIsInJvb3RSZWR1Y2VyIiwidXNlciIsImJsaW5rX2Rlc2MiLCJuYXYiLCJzb2NrZXRFdmVudHMiLCJsaW5rcyIsImFydGljbGVBY3Rpb25zIiwiYXJ0aWNsZSIsInJlbGF0ZWRfdGFncyIsInNvY2tldElvIiwic29ja2V0U2VydmljZXNMaXN0ZW5lciIsIl9zZXRBY3Rpdml0eSIsIl9wdXNoQWN0aXZpdHkiLCJrZXl3b3JkIiwib25DaGFuZ2VJbnB1dCIsInNldEFydGljbGUiLCJmZXRjaE1vcmVMaW5rcyIsIl9kYXRhIiwic2V0UHJpbWFyeVRhZyIsInNldEZpbHRlcmVkQXJ0aWNsZXMiLCJzZXRSZWxhdGVkVGFncyIsImluZGV4QWN0aW9ucyIsIl9wdXNoQXJ0aWNsZSIsIm9uQ2hhbmdlRmlsdGVySW5wdXQiLCJzZXRTaG93RmlsdGVyZWQiLCJmZXRjaFJlc3BvbnNlcyIsInNldEJsb2dSZXNwb25zZSIsInB1c2hQZW5kaW5nQXJ0aWNsZUxpc3QiLCJwdXNoUGVuZGluZ0FydGljbGUiLCJzdGFydENyYXdsaW5nIiwiX2luZGV4T2ZGaXJzdFBlbmRpbmciLCJwdXNoQ3Jhd2xpbmdBcnRpY2xlIiwicHVzaEFydGljbGUiLCJmZXRjaEh0bWwiLCJzZXRCbG9nSHRtbCIsInNldEJsb2dTdHlsZSIsImFsbF92YWx1ZXNfYXJyYXkiLCJuZXdhcnIiLCJpc19hcnJheSIsImlzX29iaiIsImFsbF92YWx1ZXNfb2JqZWN0Iiwib2JqX3ZhbCIsImV4cG9ydF9vYmoiLCJnZXRBbGxOZXN0ZWRWYWx1ZXMiLCJGaWx0ZXIiLCJvbkZpbHRlciIsImZpbHRlcmVkIiwiZmlsdGVyT2JqIiwiZmlsdGVyT2JqX2tleXMiLCJyZXR1cm5fYm9vbCIsIl92YWx1ZSIsIl91dGlscyIsInJlZmluZVNlYXJjaE9iaiIsImZpbHRlckZ1bmN0aW9uIiwicmVmaW5lZCIsIl9zZWFyY2giLCJiYWNrZ3JvdW5kQ29sb3IiLCJnZXRUaW1lIiwiZGF0YS1rZXluYW1lIiwiZGF0YS12YWx1ZSIsIm9uS2V5VXAiLCJ0YWdzIiwiTG9hZGVyIiwiTWFpbiIsImZpbHRlcl9vYmoiLCJmaWx0ZXJfa2V5cyIsInJlZmluZU9iaiIsIm5ld19jb250ZW50IiwiUmVhY3RIdG1sUGFyc2VyIiwic2hvd19qc29uIiwic2hvd19zdWdnZXN0aW9uIiwiaW5wdXRUYWdFbGVtIiwiaGwiLCJoaWdobGlnaHQiLCJhY3Rpdml0eV9maWx0ZXJlZCIsImFydGljbGVNYXAiLCJoaWRlX2pzb24iLCJpbWFnZSIsImRhdGEtaWRlbnRpZmllciIsIm9wZW5BcnRpY2xlIiwiZGF0ZVB1Ymxpc2hlZCIsInRvTG9jYWxlRGF0ZVN0cmluZyIsImZldGNoX3RpbWUiLCJub0FydGljbGUiLCJkYXRhLXR5cGUiLCJkYXRhLXByaW1hcnktdGFnIiwib25UYWdDbGljayIsImRhdGEtdGFiIiwiY2hhbmdlVGFiIiwiSG9tZSIsIkJsb2ciLCJhcnRpY2xlX2FyciIsImJsb2dfYm9keSIsImRpdiIsImNyb3NzT3JpZ2luIiwiUm91dGVzIiwiU2lnbm91dCIsIkluZGV4IiwiQXBwIiwiUmVhY3RET00iXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBMUIsRUFBb0JrQixFQUFFTyxHQUN0QlgsT0FBT0MsZUFBZVUsRUFBSSxVQUFXLENBQUVULFlBQVksRUFBTUssTUFBT0EsSUFDdEQsRUFBUEUsR0FBNEIsaUJBQVRGLEVBQW1CLElBQUksSUFBSU0sS0FBT04sRUFBT3JCLEVBQW9CVSxFQUFFZSxFQUFJRSxFQUFLLFNBQVNBLEdBQU8sT0FBT04sRUFBTU0sSUFBUUMsS0FBSyxLQUFNRCxJQUM5SSxPQUFPRixHQUlSekIsRUFBb0I2QixFQUFJLFNBQVMxQixHQUNoQyxJQUFJUyxFQUFTVCxHQUFVQSxFQUFPcUIsV0FDN0IsV0FBd0IsT0FBT3JCLEVBQWdCLFNBQy9DLFdBQThCLE9BQU9BLEdBRXRDLE9BREFILEVBQW9CVSxFQUFFRSxFQUFRLElBQUtBLEdBQzVCQSxHQUlSWixFQUFvQmEsRUFBSSxTQUFTaUIsRUFBUUMsR0FBWSxPQUFPakIsT0FBT2tCLFVBQVVDLGVBQWUxQixLQUFLdUIsRUFBUUMsSUFHekcvQixFQUFvQmtDLEVBQUksS0FJakJsQyxFQUFvQkEsRUFBb0JtQyxFQUFJLEssK0JDL0VuRGhDLEVBQU9ELFFBQVUsRUFBUSxLLGdCQ2N6QkMsRUFBT0QsUUFBVSxFQUFRLEdBQVIsSSxjQ0ZuQkMsRUFBT0QsUUFmUCxTQUF5QmtDLEVBQUtULEVBQUtOLEdBWWpDLE9BWElNLEtBQU9TLEVBQ1R0QixPQUFPQyxlQUFlcUIsRUFBS1QsRUFBSyxDQUM5Qk4sTUFBT0EsRUFDUEwsWUFBWSxFQUNacUIsY0FBYyxFQUNkQyxVQUFVLElBR1pGLEVBQUlULEdBQU9OLEVBR05lLEksY0NOVGpDLEVBQU9ELFFBTlAsU0FBeUJxQyxFQUFVQyxHQUNqQyxLQUFNRCxhQUFvQkMsR0FDeEIsTUFBTSxJQUFJQyxVQUFVLHVDLGNDRnhCLFNBQVNDLEVBQWtCQyxFQUFRQyxHQUNqQyxJQUFLLElBQUl4QyxFQUFJLEVBQUdBLEVBQUl3QyxFQUFNQyxPQUFRekMsSUFBSyxDQUNyQyxJQUFJMEMsRUFBYUYsRUFBTXhDLEdBQ3ZCMEMsRUFBVzlCLFdBQWE4QixFQUFXOUIsYUFBYyxFQUNqRDhCLEVBQVdULGNBQWUsRUFDdEIsVUFBV1MsSUFBWUEsRUFBV1IsVUFBVyxHQUNqRHhCLE9BQU9DLGVBQWU0QixFQUFRRyxFQUFXbkIsSUFBS21CLElBVWxEM0MsRUFBT0QsUUFOUCxTQUFzQnNDLEVBQWFPLEVBQVlDLEdBRzdDLE9BRklELEdBQVlMLEVBQWtCRixFQUFZUixVQUFXZSxHQUNyREMsR0FBYU4sRUFBa0JGLEVBQWFRLEdBQ3pDUixJLGdCQ2JULElBQUlTLEVBQVUsRUFBUSxJQUVsQkMsRUFBd0IsRUFBUSxHQVVwQy9DLEVBQU9ELFFBUlAsU0FBb0NpRCxFQUFNNUMsR0FDeEMsT0FBSUEsR0FBMkIsV0FBbEIwQyxFQUFRMUMsSUFBc0MsbUJBQVRBLEVBSTNDMkMsRUFBc0JDLEdBSHBCNUMsSSxjQ05YLFNBQVM2QyxFQUFnQnZDLEdBSXZCLE9BSEFWLEVBQU9ELFFBQVVrRCxFQUFrQnRDLE9BQU91QyxlQUFpQnZDLE9BQU93QyxlQUFpQixTQUF5QnpDLEdBQzFHLE9BQU9BLEVBQUUwQyxXQUFhekMsT0FBT3dDLGVBQWV6QyxJQUV2Q3VDLEVBQWdCdkMsR0FHekJWLEVBQU9ELFFBQVVrRCxHLGdCQ1BqQixJQUFJQyxFQUFpQixFQUFRLElBaUI3QmxELEVBQU9ELFFBZlAsU0FBbUJzRCxFQUFVQyxHQUMzQixHQUEwQixtQkFBZkEsR0FBNEMsT0FBZkEsRUFDdEMsTUFBTSxJQUFJaEIsVUFBVSxzREFHdEJlLEVBQVN4QixVQUFZbEIsT0FBT1ksT0FBTytCLEdBQWNBLEVBQVd6QixVQUFXLENBQ3JFMEIsWUFBYSxDQUNYckMsTUFBT21DLEVBQ1BsQixVQUFVLEVBQ1ZELGNBQWMsS0FHZG9CLEdBQVlKLEVBQWVHLEVBQVVDLEssNkJDZDNDLG9UQVFJRSxFQUFlLFdBQ2pCLE9BQU9DLEtBQUtDLFNBQVNDLFNBQVMsSUFBSUMsVUFBVSxHQUFHQyxNQUFNLElBQUlDLEtBQUssTUFHNURDLEVBQWMsQ0FDaEJDLEtBQU0sZUFBaUJSLElBQ3ZCUyxRQUFTLGtCQUFvQlQsSUFDN0JVLHFCQUFzQixXQUNwQixNQUFPLCtCQUFpQ1YsTUFRNUMsU0FBU1csRUFBY2xDLEdBQ3JCLEdBQW1CLGlCQUFSQSxHQUE0QixPQUFSQSxFQUFjLE9BQU8sRUFHcEQsSUFGQSxJQUFJbUMsRUFBUW5DLEVBRTRCLE9BQWpDdEIsT0FBT3dDLGVBQWVpQixJQUMzQkEsRUFBUXpELE9BQU93QyxlQUFlaUIsR0FHaEMsT0FBT3pELE9BQU93QyxlQUFlbEIsS0FBU21DLEVBNkJ4QyxTQUFTQyxFQUFZQyxFQUFTQyxFQUFnQkMsR0FDNUMsSUFBSUMsRUFFSixHQUE4QixtQkFBbkJGLEdBQXFELG1CQUFiQyxHQUErQyxtQkFBYkEsR0FBbUQsbUJBQWpCRSxVQUFVLEdBQy9ILE1BQU0sSUFBSUMsTUFBTSx1SkFRbEIsR0FMOEIsbUJBQW5CSixRQUFxRCxJQUFiQyxJQUNqREEsRUFBV0QsRUFDWEEsT0FBaUJLLFFBR0ssSUFBYkosRUFBMEIsQ0FDbkMsR0FBd0IsbUJBQWJBLEVBQ1QsTUFBTSxJQUFJRyxNQUFNLDJDQUdsQixPQUFPSCxFQUFTSCxFQUFURyxDQUFzQkYsRUFBU0MsR0FHeEMsR0FBdUIsbUJBQVpELEVBQ1QsTUFBTSxJQUFJSyxNQUFNLDBDQUdsQixJQUFJRSxFQUFpQlAsRUFDakJRLEVBQWVQLEVBQ2ZRLEVBQW1CLEdBQ25CQyxFQUFnQkQsRUFDaEJFLEdBQWdCLEVBU3BCLFNBQVNDLElBQ0hGLElBQWtCRCxJQUNwQkMsRUFBZ0JELEVBQWlCSSxTQVVyQyxTQUFTQyxJQUNQLEdBQUlILEVBQ0YsTUFBTSxJQUFJTixNQUFNLHdNQUdsQixPQUFPRyxFQTJCVCxTQUFTTyxFQUFVQyxHQUNqQixHQUF3QixtQkFBYkEsRUFDVCxNQUFNLElBQUlYLE1BQU0sMkNBR2xCLEdBQUlNLEVBQ0YsTUFBTSxJQUFJTixNQUFNLCtUQUdsQixJQUFJWSxHQUFlLEVBR25CLE9BRkFMLElBQ0FGLEVBQWNRLEtBQUtGLEdBQ1osV0FDTCxHQUFLQyxFQUFMLENBSUEsR0FBSU4sRUFDRixNQUFNLElBQUlOLE1BQU0sb0tBR2xCWSxHQUFlLEVBQ2ZMLElBQ0EsSUFBSU8sRUFBUVQsRUFBY1UsUUFBUUosR0FDbENOLEVBQWNXLE9BQU9GLEVBQU8sS0E4QmhDLFNBQVNHLEVBQVNDLEdBQ2hCLElBQUsxQixFQUFjMEIsR0FDakIsTUFBTSxJQUFJbEIsTUFBTSwyRUFHbEIsUUFBMkIsSUFBaEJrQixFQUFPQyxLQUNoQixNQUFNLElBQUluQixNQUFNLHNGQUdsQixHQUFJTSxFQUNGLE1BQU0sSUFBSU4sTUFBTSxzQ0FHbEIsSUFDRU0sR0FBZ0IsRUFDaEJILEVBQWVELEVBQWVDLEVBQWNlLEdBQzVDLFFBQ0FaLEdBQWdCLEVBS2xCLElBRkEsSUFBSWMsRUFBWWhCLEVBQW1CQyxFQUUxQi9FLEVBQUksRUFBR0EsRUFBSThGLEVBQVVyRCxPQUFRekMsSUFBSyxFQUV6Q3FGLEVBRGVTLEVBQVU5RixNQUkzQixPQUFPNEYsRUE2RVQsT0FIQUQsRUFBUyxDQUNQRSxLQUFNL0IsRUFBWUMsUUFFYlMsRUFBUSxDQUNibUIsU0FBVUEsRUFDVlAsVUFBV0EsRUFDWEQsU0FBVUEsRUFDVlksZUFuRUYsU0FBd0JDLEdBQ3RCLEdBQTJCLG1CQUFoQkEsRUFDVCxNQUFNLElBQUl0QixNQUFNLDhDQUdsQkUsRUFBaUJvQixFQUtqQkwsRUFBUyxDQUNQRSxLQUFNL0IsRUFBWUUsYUF5RGIsS0E5Q1QsV0FDRSxJQUFJaUMsRUFFQUMsRUFBaUJkLEVBQ3JCLE9BQU9hLEVBQU8sQ0FTWmIsVUFBVyxTQUFtQmUsR0FDNUIsR0FBd0IsaUJBQWJBLEdBQXNDLE9BQWJBLEVBQ2xDLE1BQU0sSUFBSTlELFVBQVUsMENBR3RCLFNBQVMrRCxJQUNIRCxFQUFTRSxNQUNYRixFQUFTRSxLQUFLbEIsS0FNbEIsT0FGQWlCLElBRU8sQ0FDTEUsWUFGZ0JKLEVBQWVFLE9BSzdCLEtBQWdCLFdBQ3RCLE9BQU9HLE1BQ05OLEdBY2dDekIsRUEwQnZDLFNBQVNnQyxFQUE4QmpGLEVBQUtxRSxHQUMxQyxJQUFJYSxFQUFhYixHQUFVQSxFQUFPQyxLQUVsQyxNQUFPLFVBRGlCWSxHQUFjLFdBQWNDLE9BQU9ELEdBQWMsS0FBUSxhQUMzQyxjQUFpQmxGLEVBQU0saUxBZ0UvRCxTQUFTb0YsRUFBZ0JDLEdBSXZCLElBSEEsSUFBSUMsRUFBY25HLE9BQU9vRyxLQUFLRixHQUMxQkcsRUFBZ0IsR0FFWC9HLEVBQUksRUFBR0EsRUFBSTZHLEVBQVlwRSxPQUFRekMsSUFBSyxDQUMzQyxJQUFJdUIsRUFBTXNGLEVBQVk3RyxHQUVsQixFQU15QixtQkFBbEI0RyxFQUFTckYsS0FDbEJ3RixFQUFjeEYsR0FBT3FGLEVBQVNyRixJQUlsQyxJQVNJeUYsRUFUQUMsRUFBbUJ2RyxPQUFPb0csS0FBS0MsR0FXbkMsS0FqRUYsU0FBNEJILEdBQzFCbEcsT0FBT29HLEtBQUtGLEdBQVVNLFNBQVEsU0FBVTNGLEdBQ3RDLElBQUk4QyxFQUFVdUMsRUFBU3JGLEdBS3ZCLFFBQTRCLElBSlQ4QyxPQUFRTSxFQUFXLENBQ3BDa0IsS0FBTS9CLEVBQVlDLE9BSWxCLE1BQU0sSUFBSVcsTUFBTSxZQUFlbkQsRUFBTSxpUkFHdkMsUUFFTyxJQUZJOEMsT0FBUU0sRUFBVyxDQUM1QmtCLEtBQU0vQixFQUFZRyx5QkFFbEIsTUFBTSxJQUFJUyxNQUFNLFlBQWVuRCxFQUFNLDZFQUFxRnVDLEVBQVlDLEtBQU8sa1RBb0QvSW9ELENBQW1CSixHQUNuQixNQUFPSyxHQUNQSixFQUFzQkksRUFHeEIsT0FBTyxTQUFxQkMsRUFBT3pCLEdBS2pDLFFBSmMsSUFBVnlCLElBQ0ZBLEVBQVEsSUFHTkwsRUFDRixNQUFNQSxFQWNSLElBWDJDLElBUXZDTSxHQUFhLEVBQ2JDLEVBQVksR0FFUEMsRUFBSyxFQUFHQSxFQUFLUCxFQUFpQnhFLE9BQVErRSxJQUFNLENBQ25ELElBQUlDLEVBQU9SLEVBQWlCTyxHQUN4Qm5ELEVBQVUwQyxFQUFjVSxHQUN4QkMsRUFBc0JMLEVBQU1JLEdBQzVCRSxFQUFrQnRELEVBQVFxRCxFQUFxQjlCLEdBRW5ELFFBQStCLElBQXBCK0IsRUFBaUMsQ0FDMUMsSUFBSUMsRUFBZXBCLEVBQThCaUIsRUFBTTdCLEdBQ3ZELE1BQU0sSUFBSWxCLE1BQU1rRCxHQUdsQkwsRUFBVUUsR0FBUUUsRUFDbEJMLEVBQWFBLEdBQWNLLElBQW9CRCxFQUdqRCxPQUFPSixFQUFhQyxFQUFZRixHQUlwQyxTQUFTUSxFQUFrQkMsRUFBZW5DLEdBQ3hDLE9BQU8sV0FDTCxPQUFPQSxFQUFTbUMsRUFBY0MsTUFBTXhCLEtBQU05QixhQTBCOUMsU0FBU3VELEVBQW1CQyxFQUFnQnRDLEdBQzFDLEdBQThCLG1CQUFuQnNDLEVBQ1QsT0FBT0osRUFBa0JJLEVBQWdCdEMsR0FHM0MsR0FBOEIsaUJBQW5Cc0MsR0FBa0QsT0FBbkJBLEVBQ3hDLE1BQU0sSUFBSXZELE1BQU0sMEVBQStGLE9BQW5CdUQsRUFBMEIsY0FBZ0JBLEdBQWtCLDhGQUcxSixJQUFJQyxFQUFzQixHQUUxQixJQUFLLElBQUkzRyxLQUFPMEcsRUFBZ0IsQ0FDOUIsSUFBSUgsRUFBZ0JHLEVBQWUxRyxHQUVOLG1CQUFsQnVHLElBQ1RJLEVBQW9CM0csR0FBT3NHLEVBQWtCQyxFQUFlbkMsSUFJaEUsT0FBT3VDLEVBR1QsU0FBU0MsRUFBZ0JuRyxFQUFLVCxFQUFLTixHQVlqQyxPQVhJTSxLQUFPUyxFQUNUdEIsT0FBT0MsZUFBZXFCLEVBQUtULEVBQUssQ0FDOUJOLE1BQU9BLEVBQ1BMLFlBQVksRUFDWnFCLGNBQWMsRUFDZEMsVUFBVSxJQUdaRixFQUFJVCxHQUFPTixFQUdOZSxFQUdULFNBQVNvRyxFQUFRMUcsRUFBUTJHLEdBQ3ZCLElBQUl2QixFQUFPcEcsT0FBT29HLEtBQUtwRixHQVN2QixPQVBJaEIsT0FBTzRILHVCQUNUeEIsRUFBS3ZCLEtBQUt3QyxNQUFNakIsRUFBTXBHLE9BQU80SCxzQkFBc0I1RyxJQUdqRDJHLElBQWdCdkIsRUFBT0EsRUFBS3lCLFFBQU8sU0FBVUMsR0FDL0MsT0FBTzlILE9BQU8rSCx5QkFBeUIvRyxFQUFROEcsR0FBSzVILGVBRS9Da0csRUFHVCxTQUFTNEIsRUFBZW5HLEdBQ3RCLElBQUssSUFBSXZDLEVBQUksRUFBR0EsRUFBSXlFLFVBQVVoQyxPQUFRekMsSUFBSyxDQUN6QyxJQUFJMkksRUFBeUIsTUFBaEJsRSxVQUFVekUsR0FBYXlFLFVBQVV6RSxHQUFLLEdBRS9DQSxFQUFJLEVBQ05vSSxFQUFRTyxHQUFRLEdBQU16QixTQUFRLFNBQVUzRixHQUN0QzRHLEVBQWdCNUYsRUFBUWhCLEVBQUtvSCxFQUFPcEgsT0FFN0JiLE9BQU9rSSwwQkFDaEJsSSxPQUFPbUksaUJBQWlCdEcsRUFBUTdCLE9BQU9rSSwwQkFBMEJELElBRWpFUCxFQUFRTyxHQUFRekIsU0FBUSxTQUFVM0YsR0FDaENiLE9BQU9DLGVBQWU0QixFQUFRaEIsRUFBS2IsT0FBTytILHlCQUF5QkUsRUFBUXBILE9BS2pGLE9BQU9nQixFQWFULFNBQVN1RyxJQUNQLElBQUssSUFBSUMsRUFBT3RFLFVBQVVoQyxPQUFRdUcsRUFBUSxJQUFJQyxNQUFNRixHQUFPdEIsRUFBTyxFQUFHQSxFQUFPc0IsRUFBTXRCLElBQ2hGdUIsRUFBTXZCLEdBQVFoRCxVQUFVZ0QsR0FHMUIsT0FBcUIsSUFBakJ1QixFQUFNdkcsT0FDRCxTQUFVeUcsR0FDZixPQUFPQSxHQUlVLElBQWpCRixFQUFNdkcsT0FDRHVHLEVBQU0sR0FHUkEsRUFBTUcsUUFBTyxTQUFVQyxFQUFHQyxHQUMvQixPQUFPLFdBQ0wsT0FBT0QsRUFBRUMsRUFBRXRCLFdBQU0sRUFBUXRELGdCQXNCL0IsU0FBUzZFLElBQ1AsSUFBSyxJQUFJUCxFQUFPdEUsVUFBVWhDLE9BQVE4RyxFQUFjLElBQUlOLE1BQU1GLEdBQU90QixFQUFPLEVBQUdBLEVBQU9zQixFQUFNdEIsSUFDdEY4QixFQUFZOUIsR0FBUWhELFVBQVVnRCxHQUdoQyxPQUFPLFNBQVVyRCxHQUNmLE9BQU8sV0FDTCxJQUFJb0YsRUFBUXBGLEVBQVkyRCxXQUFNLEVBQVF0RCxXQUVsQ2dGLEVBQVksV0FDZCxNQUFNLElBQUkvRSxNQUFNLDJIQUdkZ0YsRUFBZ0IsQ0FDbEJ2RSxTQUFVcUUsRUFBTXJFLFNBQ2hCUSxTQUFVLFdBQ1IsT0FBTzhELEVBQVUxQixXQUFNLEVBQVF0RCxhQUcvQmtGLEVBQVFKLEVBQVlLLEtBQUksU0FBVUMsR0FDcEMsT0FBT0EsRUFBV0gsTUFHcEIsT0FBT2hCLEVBQWUsR0FBSWMsRUFBTyxDQUMvQjdELFNBRkY4RCxFQUFZWCxFQUFRZixXQUFNLEVBQVE0QixFQUF0QmIsQ0FBNkJVLEVBQU03RCxnQixjQ3puQnJENUYsRUFBT0QsUUFSUCxTQUFnQ2lELEdBQzlCLFFBQWEsSUFBVEEsRUFDRixNQUFNLElBQUkrRyxlQUFlLDZEQUczQixPQUFPL0csSSxjQ0xUaEQsRUFBT0QsUUFBVSxDQUNiaUssS0FBTyxHQUNQQyxXQUFhLG1EQUNiQyxZQUFjLEdBQ2RDLE1BQVEscUIsZ0JDSlpuSyxFQUFPRCxRQUFVLEVBQVEsTSw2QkNFekIsSUFBSTBCLEVBQU8sRUFBUSxJQUNmMkksRUFBVyxFQUFRLEtBTW5CekcsRUFBV2hELE9BQU9rQixVQUFVOEIsU0FRaEMsU0FBUzBHLEVBQVFDLEdBQ2YsTUFBOEIsbUJBQXZCM0csRUFBU3ZELEtBQUtrSyxHQTJFdkIsU0FBU0MsRUFBU0QsR0FDaEIsT0FBZSxPQUFSQSxHQUErQixpQkFBUkEsRUF1Q2hDLFNBQVNFLEVBQVdGLEdBQ2xCLE1BQThCLHNCQUF2QjNHLEVBQVN2RCxLQUFLa0ssR0F3RXZCLFNBQVNuRCxFQUFRbEYsRUFBS3dJLEdBRXBCLEdBQUl4SSxRQVVKLEdBTG1CLGlCQUFSQSxJQUVUQSxFQUFNLENBQUNBLElBR0xvSSxFQUFRcEksR0FFVixJQUFLLElBQUloQyxFQUFJLEVBQUdDLEVBQUkrQixFQUFJUyxPQUFRekMsRUFBSUMsRUFBR0QsSUFDckN3SyxFQUFHckssS0FBSyxLQUFNNkIsRUFBSWhDLEdBQUlBLEVBQUdnQyxRQUkzQixJQUFLLElBQUlULEtBQU9TLEVBQ1Z0QixPQUFPa0IsVUFBVUMsZUFBZTFCLEtBQUs2QixFQUFLVCxJQUM1Q2lKLEVBQUdySyxLQUFLLEtBQU02QixFQUFJVCxHQUFNQSxFQUFLUyxHQW9GckNqQyxFQUFPRCxRQUFVLENBQ2ZzSyxRQUFTQSxFQUNUSyxjQTlSRixTQUF1QkosR0FDckIsTUFBOEIseUJBQXZCM0csRUFBU3ZELEtBQUtrSyxJQThSckJGLFNBQVVBLEVBQ1ZPLFdBdFJGLFNBQW9CTCxHQUNsQixNQUE0QixvQkFBYk0sVUFBOEJOLGFBQWVNLFVBc1I1REMsa0JBN1FGLFNBQTJCUCxHQU96QixNQUw0QixvQkFBaEJRLGFBQWlDQSxZQUFrQixPQUNwREEsWUFBWUMsT0FBT1QsR0FFbkIsR0FBVUEsRUFBVSxRQUFNQSxFQUFJVSxrQkFBa0JGLGFBeVEzREcsU0E5UEYsU0FBa0JYLEdBQ2hCLE1BQXNCLGlCQUFSQSxHQThQZFksU0FyUEYsU0FBa0JaLEdBQ2hCLE1BQXNCLGlCQUFSQSxHQXFQZEMsU0FBVUEsRUFDVlksWUE3T0YsU0FBcUJiLEdBQ25CLFlBQXNCLElBQVJBLEdBNk9kYyxPQTFORixTQUFnQmQsR0FDZCxNQUE4QixrQkFBdkIzRyxFQUFTdkQsS0FBS2tLLElBME5yQmUsT0FqTkYsU0FBZ0JmLEdBQ2QsTUFBOEIsa0JBQXZCM0csRUFBU3ZELEtBQUtrSyxJQWlOckJnQixPQXhNRixTQUFnQmhCLEdBQ2QsTUFBOEIsa0JBQXZCM0csRUFBU3ZELEtBQUtrSyxJQXdNckJFLFdBQVlBLEVBQ1plLFNBdExGLFNBQWtCakIsR0FDaEIsT0FBT0MsRUFBU0QsSUFBUUUsRUFBV0YsRUFBSWtCLE9Bc0x2Q0Msa0JBN0tGLFNBQTJCbkIsR0FDekIsTUFBa0Msb0JBQXBCb0IsaUJBQW1DcEIsYUFBZW9CLGlCQTZLaEVDLHFCQWpKRixXQUNFLE9BQXlCLG9CQUFkQyxXQUFvRCxnQkFBdEJBLFVBQVVDLFNBQ1ksaUJBQXRCRCxVQUFVQyxTQUNZLE9BQXRCRCxVQUFVQyxXQUkvQixvQkFBWEMsUUFDYSxvQkFBYkMsV0EwSVQ1RSxRQUFTQSxFQUNUNkUsTUEvRUYsU0FBU0EsSUFDUCxJQUFJQyxFQUFTLEdBQ2IsU0FBU0MsRUFBWTVCLEVBQUs5SSxHQUNHLGlCQUFoQnlLLEVBQU96SyxJQUFvQyxpQkFBUjhJLEVBQzVDMkIsRUFBT3pLLEdBQU93SyxFQUFNQyxFQUFPekssR0FBTThJLEdBRWpDMkIsRUFBT3pLLEdBQU84SSxFQUlsQixJQUFLLElBQUlySyxFQUFJLEVBQUdDLEVBQUl3RSxVQUFVaEMsT0FBUXpDLEVBQUlDLEVBQUdELElBQzNDa0gsRUFBUXpDLFVBQVV6RSxHQUFJaU0sR0FFeEIsT0FBT0QsR0FtRVBFLFVBeERGLFNBQVNBLElBQ1AsSUFBSUYsRUFBUyxHQUNiLFNBQVNDLEVBQVk1QixFQUFLOUksR0FDRyxpQkFBaEJ5SyxFQUFPekssSUFBb0MsaUJBQVI4SSxFQUM1QzJCLEVBQU96SyxHQUFPMkssRUFBVUYsRUFBT3pLLEdBQU04SSxHQUVyQzJCLEVBQU96SyxHQURpQixpQkFBUjhJLEVBQ0Y2QixFQUFVLEdBQUk3QixHQUVkQSxFQUlsQixJQUFLLElBQUlySyxFQUFJLEVBQUdDLEVBQUl3RSxVQUFVaEMsT0FBUXpDLEVBQUlDLEVBQUdELElBQzNDa0gsRUFBUXpDLFVBQVV6RSxHQUFJaU0sR0FFeEIsT0FBT0QsR0EwQ1BHLE9BL0JGLFNBQWdCL0MsRUFBR0MsRUFBRytDLEdBUXBCLE9BUEFsRixFQUFRbUMsR0FBRyxTQUFxQmdCLEVBQUs5SSxHQUVqQzZILEVBQUU3SCxHQURBNkssR0FBMEIsbUJBQVIvQixFQUNYN0ksRUFBSzZJLEVBQUsrQixHQUVWL0IsS0FHTmpCLEdBd0JQaUQsS0F6S0YsU0FBY0MsR0FDWixPQUFPQSxFQUFJQyxRQUFRLE9BQVEsSUFBSUEsUUFBUSxPQUFRLE8sZ0JDcEtqRCxJQUFJQyxFQUFvQixFQUFRLEtBRTVCQyxFQUFrQixFQUFRLEtBRTFCQyxFQUFvQixFQUFRLEtBTWhDM00sRUFBT0QsUUFKUCxTQUE0QjZNLEdBQzFCLE9BQU9ILEVBQWtCRyxJQUFRRixFQUFnQkUsSUFBUUQsTSw2QkNDM0QzTSxFQUFPRCxRQUFVLFNBQVU4TSxHQUN6QixJQUFJQyxFQUFPLEdBcUNYLE9BbkNBQSxFQUFLbkosU0FBVyxXQUNkLE9BQU82QyxLQUFLcUQsS0FBSSxTQUFVa0QsR0FDeEIsSUFBSUMsRUFvQ1YsU0FBZ0NELEVBQU1GLEdBQ3BDLElBQUlHLEVBQVVELEVBQUssSUFBTSxHQUVyQkUsRUFBYUYsRUFBSyxHQUV0QixJQUFLRSxFQUNILE9BQU9ELEVBR1QsR0FBSUgsR0FBZ0MsbUJBQVRLLEtBQXFCLENBQzlDLElBQUlDLEdBV1dDLEVBWGVILEVBYTVCSSxFQUFTSCxLQUFLSSxTQUFTQyxtQkFBbUJDLEtBQUtDLFVBQVVMLE1BQ3pETSxFQUFPLCtEQUErREMsT0FBT04sR0FDMUUsT0FBT00sT0FBT0QsRUFBTSxRQWRyQkUsRUFBYVgsRUFBV1ksUUFBUWhFLEtBQUksU0FBVWpCLEdBQ2hELE1BQU8saUJBQWlCK0UsT0FBT1YsRUFBV2EsWUFBWUgsT0FBTy9FLEVBQVEsVUFFdkUsTUFBTyxDQUFDb0UsR0FBU1csT0FBT0MsR0FBWUQsT0FBTyxDQUFDUixJQUFnQnJKLEtBQUssTUFPckUsSUFBbUJzSixFQUViQyxFQUNBSyxFQVBKLE1BQU8sQ0FBQ1YsR0FBU2xKLEtBQUssTUFyREppSyxDQUF1QmhCLEVBQU1GLEdBRTNDLE9BQUlFLEVBQUssR0FDQSxVQUFVWSxPQUFPWixFQUFLLEdBQUksTUFBTVksT0FBT1gsRUFBUyxLQUdsREEsS0FDTmxKLEtBQUssS0FLVmdKLEVBQUs3TSxFQUFJLFNBQVVFLEVBQVM2TixHQUNILGlCQUFaN04sSUFFVEEsRUFBVSxDQUFDLENBQUMsS0FBTUEsRUFBUyxNQUc3QixJQUFLLElBQUlGLEVBQUksRUFBR0EsRUFBSUUsRUFBUXVDLE9BQVF6QyxJQUFLLENBQ3ZDLElBQUk4TSxFQUFPLEdBQUdZLE9BQU94TixFQUFRRixJQUV6QitOLElBQ0dqQixFQUFLLEdBR1JBLEVBQUssR0FBSyxHQUFHWSxPQUFPSyxFQUFZLFNBQVNMLE9BQU9aLEVBQUssSUFGckRBLEVBQUssR0FBS2lCLEdBTWRsQixFQUFLdEgsS0FBS3VILEtBSVBELEksNkJDNUNULElBR01tQixFQUhGQyxFQUFjLEdBRWRDLEVBRUssV0FVTCxZQVRvQixJQUFURixJQU1UQSxFQUFPRyxRQUFRdEMsUUFBVUMsVUFBWUEsU0FBU3NDLE1BQVF2QyxPQUFPd0MsT0FHeERMLEdBSVBNLEVBQVksV0FDZCxJQUFJTixFQUFPLEdBQ1gsT0FBTyxTQUFrQnpMLEdBQ3ZCLFFBQTRCLElBQWpCeUwsRUFBS3pMLEdBQXlCLENBQ3ZDLElBQUlnTSxFQUFjekMsU0FBUzBDLGNBQWNqTSxHQUV6QyxHQUFJc0osT0FBTzRDLG1CQUFxQkYsYUFBdUIxQyxPQUFPNEMsa0JBQzVELElBR0VGLEVBQWNBLEVBQVlHLGdCQUFnQkMsS0FDMUMsTUFBT3ZILEdBRVBtSCxFQUFjLEtBSWxCUCxFQUFLekwsR0FBVWdNLEVBR2pCLE9BQU9QLEVBQUt6TCxJQXBCQSxHQXdCaEIsU0FBU3FNLEVBQWEvQixFQUFNZ0MsR0FJMUIsSUFIQSxJQUFJQyxFQUFTLEdBQ1RDLEVBQVksR0FFUC9PLEVBQUksRUFBR0EsRUFBSTZNLEVBQUtwSyxPQUFRekMsSUFBSyxDQUNwQyxJQUFJOE0sRUFBT0QsRUFBSzdNLEdBQ1pnUCxFQUFLSCxFQUFRSSxLQUFPbkMsRUFBSyxHQUFLK0IsRUFBUUksS0FBT25DLEVBQUssR0FJbERvQyxFQUFPLENBQ1RDLElBSlFyQyxFQUFLLEdBS2JzQyxNQUpVdEMsRUFBSyxHQUtmSyxVQUpjTCxFQUFLLElBT2hCaUMsRUFBVUMsR0FNYkQsRUFBVUMsR0FBSUssTUFBTTlKLEtBQUsySixHQUx6QkosRUFBT3ZKLEtBQUt3SixFQUFVQyxHQUFNLENBQzFCQSxHQUFJQSxFQUNKSyxNQUFPLENBQUNILEtBT2QsT0FBT0osRUFHVCxTQUFTUSxFQUFlUixFQUFRRCxHQUM5QixJQUFLLElBQUk3TyxFQUFJLEVBQUdBLEVBQUk4TyxFQUFPck0sT0FBUXpDLElBQUssQ0FDdEMsSUFBSThNLEVBQU9nQyxFQUFPOU8sR0FDZHVQLEVBQVd0QixFQUFZbkIsRUFBS2tDLElBQzVCUSxFQUFJLEVBRVIsR0FBSUQsRUFBVSxDQUdaLElBRkFBLEVBQVNFLE9BRUZELEVBQUlELEVBQVNGLE1BQU01TSxPQUFRK00sSUFDaENELEVBQVNGLE1BQU1HLEdBQUcxQyxFQUFLdUMsTUFBTUcsSUFHL0IsS0FBT0EsRUFBSTFDLEVBQUt1QyxNQUFNNU0sT0FBUStNLElBQzVCRCxFQUFTRixNQUFNOUosS0FBS21LLEVBQVM1QyxFQUFLdUMsTUFBTUcsR0FBSVgsUUFFekMsQ0FHTCxJQUZBLElBQUlRLEVBQVEsR0FFTEcsRUFBSTFDLEVBQUt1QyxNQUFNNU0sT0FBUStNLElBQzVCSCxFQUFNOUosS0FBS21LLEVBQVM1QyxFQUFLdUMsTUFBTUcsR0FBSVgsSUFHckNaLEVBQVluQixFQUFLa0MsSUFBTSxDQUNyQkEsR0FBSWxDLEVBQUtrQyxHQUNUUyxLQUFNLEVBQ05KLE1BQU9BLEtBTWYsU0FBU00sRUFBbUJkLEdBQzFCLElBQUllLEVBQVE5RCxTQUFTK0QsY0FBYyxTQUVuQyxRQUF3QyxJQUE3QmhCLEVBQVFpQixXQUFXQyxNQUF1QixDQUNuRCxJQUFJQSxFQUFtRCxLQUVuREEsSUFDRmxCLEVBQVFpQixXQUFXQyxNQUFRQSxHQVEvQixHQUpBclAsT0FBT29HLEtBQUsrSCxFQUFRaUIsWUFBWTVJLFNBQVEsU0FBVTNGLEdBQ2hEcU8sRUFBTUksYUFBYXpPLEVBQUtzTixFQUFRaUIsV0FBV3ZPLE9BR2YsbUJBQW5Cc04sRUFBUW9CLE9BQ2pCcEIsRUFBUW9CLE9BQU9MLE9BQ1YsQ0FDTCxJQUFJck4sRUFBUytMLEVBQVVPLEVBQVFvQixRQUFVLFFBRXpDLElBQUsxTixFQUNILE1BQU0sSUFBSW1DLE1BQU0sMkdBR2xCbkMsRUFBTzJOLFlBQVlOLEdBR3JCLE9BQU9BLEVBY1QsSUFDTU8sRUFERkMsR0FDRUQsRUFBWSxHQUNULFNBQWlCM0ssRUFBTzZLLEdBRTdCLE9BREFGLEVBQVUzSyxHQUFTNkssRUFDWkYsRUFBVTVILE9BQU80RixTQUFTdEssS0FBSyxRQUkxQyxTQUFTeU0sRUFBb0JWLEVBQU9wSyxFQUFPK0ssRUFBUXZPLEdBQ2pELElBQUltTixFQUFNb0IsRUFBUyxHQUFLdk8sRUFBSW1OLElBSTVCLEdBQUlTLEVBQU1ZLFdBQ1JaLEVBQU1ZLFdBQVdDLFFBQVVMLEVBQVk1SyxFQUFPMkosT0FDekMsQ0FDTCxJQUFJdUIsRUFBVTVFLFNBQVM2RSxlQUFleEIsR0FDbEN5QixFQUFhaEIsRUFBTWdCLFdBRW5CQSxFQUFXcEwsSUFDYm9LLEVBQU1pQixZQUFZRCxFQUFXcEwsSUFHM0JvTCxFQUFXbk8sT0FDYm1OLEVBQU1rQixhQUFhSixFQUFTRSxFQUFXcEwsSUFFdkNvSyxFQUFNTSxZQUFZUSxJQUt4QixTQUFTSyxFQUFXbkIsRUFBT2YsRUFBUzdNLEdBQ2xDLElBQUltTixFQUFNbk4sRUFBSW1OLElBQ1ZDLEVBQVFwTixFQUFJb04sTUFDWmpDLEVBQVluTCxFQUFJbUwsVUFhcEIsR0FYSWlDLEdBQ0ZRLEVBQU1JLGFBQWEsUUFBU1osR0FHMUJqQyxHQUFhRixPQUNma0MsR0FBTyx1REFBdUR6QixPQUFPVCxLQUFLSSxTQUFTQyxtQkFBbUJDLEtBQUtDLFVBQVVMLE1BQWUsUUFNbEl5QyxFQUFNWSxXQUNSWixFQUFNWSxXQUFXQyxRQUFVdEIsTUFDdEIsQ0FDTCxLQUFPUyxFQUFNb0IsWUFDWHBCLEVBQU1pQixZQUFZakIsRUFBTW9CLFlBRzFCcEIsRUFBTU0sWUFBWXBFLFNBQVM2RSxlQUFleEIsS0FJOUMsSUFBSThCLEVBQVksS0FDWkMsRUFBbUIsRUFFdkIsU0FBU3hCLEVBQVMxTixFQUFLNk0sR0FDckIsSUFBSWUsRUFDQXVCLEVBQ0FaLEVBRUosR0FBSTFCLEVBQVFvQyxVQUFXLENBQ3JCLElBQUlHLEVBQWFGLElBQ2pCdEIsRUFBUXFCLElBQWNBLEVBQVl0QixFQUFtQmQsSUFDckRzQyxFQUFTYixFQUFvQjlPLEtBQUssS0FBTW9PLEVBQU93QixHQUFZLEdBQzNEYixFQUFTRCxFQUFvQjlPLEtBQUssS0FBTW9PLEVBQU93QixHQUFZLFFBRTNEeEIsRUFBUUQsRUFBbUJkLEdBQzNCc0MsRUFBU0osRUFBV3ZQLEtBQUssS0FBTW9PLEVBQU9mLEdBRXRDMEIsRUFBUyxZQXRGYixTQUE0QlgsR0FFMUIsR0FBeUIsT0FBckJBLEVBQU15QixXQUNSLE9BQU8sRUFHVHpCLEVBQU15QixXQUFXUixZQUFZakIsR0FpRnpCMEIsQ0FBbUIxQixJQUt2QixPQURBdUIsRUFBT25QLEdBQ0EsU0FBcUJ1UCxHQUMxQixHQUFJQSxFQUFRLENBQ1YsR0FBSUEsRUFBT3BDLE1BQVFuTixFQUFJbU4sS0FBT29DLEVBQU9uQyxRQUFVcE4sRUFBSW9OLE9BQVNtQyxFQUFPcEUsWUFBY25MLEVBQUltTCxVQUNuRixPQUdGZ0UsRUFBT25QLEVBQU11UCxRQUViaEIsS0FLTnhRLEVBQU9ELFFBQVUsU0FBVStNLEVBQU1nQyxJQUMvQkEsRUFBVUEsR0FBVyxJQUNiaUIsV0FBMkMsaUJBQXZCakIsRUFBUWlCLFdBQTBCakIsRUFBUWlCLFdBQWEsR0FHOUVqQixFQUFRb0MsV0FBMEMsa0JBQXRCcEMsRUFBUW9DLFlBQ3ZDcEMsRUFBUW9DLFVBQVkvQyxLQUd0QixJQUFJWSxFQUFTRixFQUFhL0IsRUFBTWdDLEdBRWhDLE9BREFTLEVBQWVSLEVBQVFELEdBQ2hCLFNBQWdCMkMsR0FHckIsSUFGQSxJQUFJQyxFQUFZLEdBRVB6UixFQUFJLEVBQUdBLEVBQUk4TyxFQUFPck0sT0FBUXpDLElBQUssQ0FDdEMsSUFBSThNLEVBQU9nQyxFQUFPOU8sR0FDZHVQLEVBQVd0QixFQUFZbkIsRUFBS2tDLElBRTVCTyxJQUNGQSxFQUFTRSxPQUNUZ0MsRUFBVWxNLEtBQUtnSyxJQUlmaUMsR0FFRmxDLEVBRGdCVixFQUFhNEMsRUFBUzNDLEdBQ1pBLEdBRzVCLElBQUssSUFBSXJILEVBQUssRUFBR0EsRUFBS2lLLEVBQVVoUCxPQUFRK0UsSUFBTSxDQUM1QyxJQUFJa0ssRUFBWUQsRUFBVWpLLEdBRTFCLEdBQXVCLElBQW5Ca0ssRUFBVWpDLEtBQVksQ0FDeEIsSUFBSyxJQUFJRCxFQUFJLEVBQUdBLEVBQUlrQyxFQUFVckMsTUFBTTVNLE9BQVErTSxJQUMxQ2tDLEVBQVVyQyxNQUFNRyxZQUdYdkIsRUFBWXlELEVBQVUxQyxTLDZCQ3JPckNqUCxFQUFPRCxRQTVCUyxTQUFTNlIsRUFBV0MsRUFBUXhJLEVBQUdDLEVBQUdoSixFQUFHQyxFQUFHOEcsRUFBR3lLLEdBT3pELElBQUtGLEVBQVcsQ0FDZCxJQUFJRyxFQUNKLFFBQWVuTixJQUFYaU4sRUFDRkUsRUFBUSxJQUFJcE4sTUFDVixxSUFHRyxDQUNMLElBQUlxTixFQUFPLENBQUMzSSxFQUFHQyxFQUFHaEosRUFBR0MsRUFBRzhHLEVBQUd5SyxHQUN2QkcsRUFBVyxHQUNmRixFQUFRLElBQUlwTixNQUNWa04sRUFBT3JGLFFBQVEsT0FBTyxXQUFhLE9BQU93RixFQUFLQyxVQUUzQ3pSLEtBQU8sc0JBSWYsTUFEQXVSLEVBQU1HLFlBQWMsRUFDZEgsSyxjQzVDVixTQUFTSSxFQUFtQkMsRUFBS0MsRUFBU0MsRUFBUUMsRUFBT0MsRUFBUWhSLEVBQUsySCxHQUNwRSxJQUNFLElBQUlzSixFQUFPTCxFQUFJNVEsR0FBSzJILEdBQ2hCakksRUFBUXVSLEVBQUt2UixNQUNqQixNQUFPNlEsR0FFUCxZQURBTyxFQUFPUCxHQUlMVSxFQUFLQyxLQUNQTCxFQUFRblIsR0FFUnlSLFFBQVFOLFFBQVFuUixHQUFPMFIsS0FBS0wsRUFBT0MsR0F3QnZDeFMsRUFBT0QsUUFwQlAsU0FBMkIwSyxHQUN6QixPQUFPLFdBQ0wsSUFBSXpILEVBQU93RCxLQUNQd0wsRUFBT3ROLFVBQ1gsT0FBTyxJQUFJaU8sU0FBUSxTQUFVTixFQUFTQyxHQUNwQyxJQUFJRixFQUFNM0gsRUFBR3pDLE1BQU1oRixFQUFNZ1AsR0FFekIsU0FBU08sRUFBTXJSLEdBQ2JpUixFQUFtQkMsRUFBS0MsRUFBU0MsRUFBUUMsRUFBT0MsRUFBUSxPQUFRdFIsR0FHbEUsU0FBU3NSLEVBQU9LLEdBQ2RWLEVBQW1CQyxFQUFLQyxFQUFTQyxFQUFRQyxFQUFPQyxFQUFRLFFBQVNLLEdBR25FTixPQUFNM04sUyw4QkM3QlosU0FBU2tPLElBRVAsR0FDNEMsb0JBQW5DQyxnQ0FDNEMsbUJBQTVDQSwrQkFBK0JELFNBRnhDLENBTUksRUFVSixJQUVFQywrQkFBK0JELFNBQVNBLEdBQ3hDLE1BQU9ELEdBR1BHLFFBQVFqQixNQUFNYyxLQU9oQkMsR0FDQTlTLEVBQU9ELFFBQVUsRUFBUSxLLGdCQzlCM0IsSUFNSWtULEVBTkFsTSxFQUFPLEVBQVEsS0FDZm1NLEVBQVksRUFBUSxJQUNwQkMsRUFBYyxFQUFRLEtBQ3RCQyxFQUFRLEVBQVEsS0FDaEJDLEVBQU8sRUFBUSxLQUdRLG9CQUFoQnZJLGNBQ1RtSSxFQUFnQixFQUFRLE1BVTFCLElBQUlLLEVBQWlDLG9CQUFkMUgsV0FBNkIsV0FBVzJILEtBQUszSCxVQUFVNEgsV0FRMUVDLEVBQW1DLG9CQUFkN0gsV0FBNkIsYUFBYTJILEtBQUszSCxVQUFVNEgsV0FNOUVFLEVBQWdCSixHQUFhRyxFQU1qQzFULEVBQVE0VCxTQUFXLEVBTW5CLElBQUlDLEVBQVU3VCxFQUFRNlQsUUFBVSxDQUM1QkMsS0FBVSxFQUNWQyxNQUFVLEVBQ1ZDLEtBQVUsRUFDVkMsS0FBVSxFQUNWQyxRQUFVLEVBQ1ZDLFFBQVUsRUFDVkMsS0FBVSxHQUdWQyxFQUFjck4sRUFBSzZNLEdBTW5CZixFQUFNLENBQUUvTSxLQUFNLFFBQVM0SCxLQUFNLGdCQU03QjJHLEVBQU8sRUFBUSxLQW9SbkIsU0FBU3hLLEVBQUl5SyxFQUFLQyxFQUFNN0IsR0FXdEIsSUFWQSxJQUFJekcsRUFBUyxJQUFJL0MsTUFBTW9MLEVBQUk1UixRQUN2QjRELEVBQU84TSxFQUFNa0IsRUFBSTVSLE9BQVFnUSxHQUV6QjhCLEVBQWdCLFNBQVN2VSxFQUFHd1UsRUFBSUMsR0FDbENILEVBQUtFLEdBQUksU0FBUzFDLEVBQU80QyxHQUN2QjFJLEVBQU9oTSxHQUFLMFUsRUFDWkQsRUFBRzNDLEVBQU85RixPQUlMaE0sRUFBSSxFQUFHQSxFQUFJcVUsRUFBSTVSLE9BQVF6QyxJQUM5QnVVLEVBQWN2VSxFQUFHcVUsRUFBSXJVLEdBQUlxRyxHQTlRN0J2RyxFQUFRNlUsYUFBZSxTQUFVQyxFQUFRQyxFQUFnQkMsRUFBWUMsR0FDckMsbUJBQW5CRixJQUNURSxFQUFXRixFQUNYQSxHQUFpQixHQUdPLG1CQUFmQyxJQUNUQyxFQUFXRCxFQUNYQSxFQUFhLE1BR2YsSUFBSXJILE9BQXdCOUksSUFBaEJpUSxFQUFPbkgsVUFDZjlJLEVBQ0FpUSxFQUFPbkgsS0FBSzFDLFFBQVU2SixFQUFPbkgsS0FFakMsR0FBMkIsb0JBQWhCNUMsYUFBK0I0QyxhQUFnQjVDLFlBQ3hELE9BZ0NKLFNBQTJCK0osRUFBUUMsRUFBZ0JFLEdBQ2pELElBQUtGLEVBQ0gsT0FBTy9VLEVBQVFrVixtQkFBbUJKLEVBQVFHLEdBRzVDLElBQUl0SCxFQUFPbUgsRUFBT25ILEtBQ2R3SCxFQUFlLElBQUlDLFdBQVd6SCxHQUM5QjBILEVBQWUsSUFBSUQsV0FBVyxFQUFJekgsRUFBSzJILFlBRTNDRCxFQUFhLEdBQUt4QixFQUFRaUIsRUFBTy9PLE1BQ2pDLElBQUssSUFBSTdGLEVBQUksRUFBR0EsRUFBSWlWLEVBQWF4UyxPQUFRekMsSUFDdkNtVixFQUFhblYsRUFBRSxHQUFLaVYsRUFBYWpWLEdBR25DLE9BQU8rVSxFQUFTSSxFQUFhcEssUUE5Q3BCc0ssQ0FBa0JULEVBQVFDLEVBQWdCRSxHQUM1QyxRQUFvQixJQUFUWCxHQUF3QjNHLGFBQWdCMkcsRUFDeEQsT0EyREosU0FBb0JRLEVBQVFDLEVBQWdCRSxHQUMxQyxJQUFLRixFQUNILE9BQU8vVSxFQUFRa1YsbUJBQW1CSixFQUFRRyxHQUc1QyxHQUFJdEIsRUFDRixPQWxCSixTQUFpQ21CLEVBQVFDLEVBQWdCRSxHQUN2RCxJQUFLRixFQUNILE9BQU8vVSxFQUFRa1YsbUJBQW1CSixFQUFRRyxHQUc1QyxJQUFJTyxFQUFLLElBQUlDLFdBSWIsT0FIQUQsRUFBR0UsT0FBUyxXQUNWMVYsRUFBUTZVLGFBQWEsQ0FBRTlPLEtBQU0rTyxFQUFPL08sS0FBTTRILEtBQU02SCxFQUFHdEosUUFBVTZJLEdBQWdCLEVBQU1FLElBRTlFTyxFQUFHRyxrQkFBa0JiLEVBQU9uSCxNQVMxQmlJLENBQXdCZCxFQUFRQyxFQUFnQkUsR0FHekQsSUFBSXRTLEVBQVMsSUFBSXlTLFdBQVcsR0FDNUJ6UyxFQUFPLEdBQUtrUixFQUFRaUIsRUFBTy9PLE1BQzNCLElBQUk4UCxFQUFPLElBQUl2QixFQUFLLENBQUMzUixFQUFPc0ksT0FBUTZKLEVBQU9uSCxPQUUzQyxPQUFPc0gsRUFBU1ksR0F4RVBDLENBQVdoQixFQUFRQyxFQUFnQkUsR0FJNUMsR0FBSXRILEdBQVFBLEVBQUtMLE9BQ2YsT0FlSixTQUE0QndILEVBQVFHLEdBRWxDLElBQUlmLEVBQVUsSUFBTWxVLEVBQVE2VCxRQUFRaUIsRUFBTy9PLE1BQVErTyxFQUFPbkgsS0FBS0EsS0FDL0QsT0FBT3NILEVBQVNmLEdBbEJQNkIsQ0FBbUJqQixFQUFRRyxHQUlwQyxJQUFJZSxFQUFVbkMsRUFBUWlCLEVBQU8vTyxNQU83QixZQUpJbEIsSUFBY2lRLEVBQU9uSCxPQUN2QnFJLEdBQVdoQixFQUFhMUIsRUFBSzJDLE9BQU9yUCxPQUFPa08sRUFBT25ILE1BQU8sQ0FBRXVJLFFBQVEsSUFBV3RQLE9BQU9rTyxFQUFPbkgsT0FHdkZzSCxFQUFTLEdBQUtlLElBa0V2QmhXLEVBQVFrVixtQkFBcUIsU0FBU0osRUFBUUcsR0FDNUMsSUFVSWtCLEVBVkFqQyxFQUFVLElBQU1sVSxFQUFRNlQsUUFBUWlCLEVBQU8vTyxNQUMzQyxRQUFvQixJQUFUdU8sR0FBd0JRLEVBQU9uSCxnQkFBZ0IyRyxFQUFNLENBQzlELElBQUlrQixFQUFLLElBQUlDLFdBS2IsT0FKQUQsRUFBR0UsT0FBUyxXQUNWLElBQUlVLEVBQU1aLEVBQUd0SixPQUFPcEksTUFBTSxLQUFLLEdBQy9CbVIsRUFBU2YsRUFBVWtDLElBRWRaLEVBQUdhLGNBQWN2QixFQUFPbkgsTUFJakMsSUFDRXdJLEVBQVV2UCxPQUFPMFAsYUFBYXJPLE1BQU0sS0FBTSxJQUFJbU4sV0FBV04sRUFBT25ILE9BQ2hFLE1BQU9yRyxHQUlQLElBRkEsSUFBSWlQLEVBQVEsSUFBSW5CLFdBQVdOLEVBQU9uSCxNQUM5QjZJLEVBQVEsSUFBSXJOLE1BQU1vTixFQUFNNVQsUUFDbkJ6QyxFQUFJLEVBQUdBLEVBQUlxVyxFQUFNNVQsT0FBUXpDLElBQ2hDc1csRUFBTXRXLEdBQUtxVyxFQUFNclcsR0FFbkJpVyxFQUFVdlAsT0FBTzBQLGFBQWFyTyxNQUFNLEtBQU11TyxHQUc1QyxPQURBdEMsR0FBVy9HLEtBQUtnSixHQUNUbEIsRUFBU2YsSUFVbEJsVSxFQUFReVcsYUFBZSxTQUFVOUksRUFBTStJLEVBQVlDLEdBQ2pELFFBQWE5UixJQUFUOEksRUFDRixPQUFPbUYsRUFHVCxHQUFvQixpQkFBVG5GLEVBQW1CLENBQzVCLEdBQXVCLE1BQW5CQSxFQUFLaUosT0FBTyxHQUNkLE9BQU81VyxFQUFRNlcsbUJBQW1CbEosRUFBS21KLE9BQU8sR0FBSUosR0FHcEQsR0FBSUMsSUFFVyxLQURiaEosRUEyQk4sU0FBbUJBLEdBQ2pCLElBQ0VBLEVBQU8yRixFQUFLeUQsT0FBT3BKLEVBQU0sQ0FBRXVJLFFBQVEsSUFDbkMsTUFBTzVPLEdBQ1AsT0FBTyxFQUVULE9BQU9xRyxFQWpDSXFKLENBQVVySixJQUVmLE9BQU9tRixFQUdYLElBQUkvTSxFQUFPNEgsRUFBS2lKLE9BQU8sR0FFdkIsT0FBSUssT0FBT2xSLElBQVNBLEdBQVNzTyxFQUFZdE8sR0FJckM0SCxFQUFLaEwsT0FBUyxFQUNULENBQUVvRCxLQUFNc08sRUFBWXRPLEdBQU80SCxLQUFNQSxFQUFLOUosVUFBVSxJQUVoRCxDQUFFa0MsS0FBTXNPLEVBQVl0TyxJQU5wQitNLEVBV1AvTSxFQURVLElBQUlxUCxXQUFXekgsR0FDVixHQURuQixJQUVJdUosRUFBTzlELEVBQVl6RixFQUFNLEdBSTdCLE9BSEkyRyxHQUF1QixTQUFmb0MsSUFDVlEsRUFBTyxJQUFJNUMsRUFBSyxDQUFDNEMsS0FFWixDQUFFblIsS0FBTXNPLEVBQVl0TyxHQUFPNEgsS0FBTXVKLElBbUIxQ2xYLEVBQVE2VyxtQkFBcUIsU0FBU2pDLEVBQUs4QixHQUN6QyxJQUFJM1EsRUFBT3NPLEVBQVlPLEVBQUlnQyxPQUFPLElBQ2xDLElBQUsxRCxFQUNILE1BQU8sQ0FBRW5OLEtBQU1BLEVBQU00SCxLQUFNLENBQUVMLFFBQVEsRUFBTUssS0FBTWlILEVBQUlrQyxPQUFPLEtBRzlELElBQUluSixFQUFPdUYsRUFBYzZELE9BQU9uQyxFQUFJa0MsT0FBTyxJQU0zQyxNQUptQixTQUFmSixHQUF5QnBDLElBQzNCM0csRUFBTyxJQUFJMkcsRUFBSyxDQUFDM0csS0FHWixDQUFFNUgsS0FBTUEsRUFBTTRILEtBQU1BLElBbUI3QjNOLEVBQVFtWCxjQUFnQixTQUFVdEQsRUFBU2tCLEVBQWdCRSxHQUMzQixtQkFBbkJGLElBQ1RFLEVBQVdGLEVBQ1hBLEVBQWlCLE1BR25CLElBQUlxQyxFQUFXakUsRUFBVVUsR0FFekIsR0FBSWtCLEdBQWtCcUMsRUFDcEIsT0FBSTlDLElBQVNYLEVBQ0ozVCxFQUFRcVgsb0JBQW9CeEQsRUFBU29CLEdBR3ZDalYsRUFBUXNYLDJCQUEyQnpELEVBQVNvQixHQUdyRCxJQUFLcEIsRUFBUWxSLE9BQ1gsT0FBT3NTLEVBQVMsTUFhbEJuTCxFQUFJK0osR0FOSixTQUFtQmlCLEVBQVF5QyxHQUN6QnZYLEVBQVE2VSxhQUFhQyxJQUFTc0MsR0FBbUJyQyxHQUFnQixHQUFPLFNBQVNiLEdBQy9FcUQsRUFBYSxLQU5qQixTQUF5QnJELEdBQ3ZCLE9BQU9BLEVBQVF2UixPQUFTLElBQU11UixFQUtUc0QsQ0FBZ0J0RCxVQUlmLFNBQVNwQixFQUFLMkUsR0FDcEMsT0FBT3hDLEVBQVN3QyxFQUFRMVQsS0FBSyxTQWdDakMvRCxFQUFRMFgsY0FBZ0IsU0FBVS9KLEVBQU0rSSxFQUFZekIsR0FDbEQsR0FBb0IsaUJBQVR0SCxFQUNULE9BQU8zTixFQUFRMlgsc0JBQXNCaEssRUFBTStJLEVBQVl6QixHQVF6RCxJQUFJSCxFQUNKLEdBTjBCLG1CQUFmNEIsSUFDVHpCLEVBQVd5QixFQUNYQSxFQUFhLE1BSUYsS0FBVC9JLEVBRUYsT0FBT3NILEVBQVNuQyxFQUFLLEVBQUcsR0FLMUIsSUFGQSxJQUFpQm5SLEVBQUdpVCxFQUFoQmpTLEVBQVMsR0FFSnpDLEVBQUksRUFBR0MsRUFBSXdOLEVBQUtoTCxPQUFRekMsRUFBSUMsRUFBR0QsSUFBSyxDQUMzQyxJQUFJMFgsRUFBTWpLLEVBQUtpSixPQUFPMVcsR0FFdEIsR0FBWSxNQUFSMFgsRUFBSixDQUtBLEdBQWUsS0FBWGpWLEdBQWtCQSxJQUFXaEIsRUFBSXNWLE9BQU90VSxJQUUxQyxPQUFPc1MsRUFBU25DLEVBQUssRUFBRyxHQUsxQixHQUFJblEsSUFGSmlTLEVBQU1qSCxFQUFLbUosT0FBTzVXLEVBQUksRUFBR3lCLElBRVBnQixPQUVoQixPQUFPc1MsRUFBU25DLEVBQUssRUFBRyxHQUcxQixHQUFJOEIsRUFBSWpTLE9BQVEsQ0FHZCxHQUZBbVMsRUFBUzlVLEVBQVF5VyxhQUFhN0IsRUFBSzhCLEdBQVksR0FFM0M1RCxFQUFJL00sT0FBUytPLEVBQU8vTyxNQUFRK00sRUFBSW5GLE9BQVNtSCxFQUFPbkgsS0FFbEQsT0FBT3NILEVBQVNuQyxFQUFLLEVBQUcsR0FJMUIsSUFBSSxJQURNbUMsRUFBU0gsRUFBUTVVLEVBQUl5QixFQUFHeEIsR0FDZixPQUlyQkQsR0FBS3lCLEVBQ0xnQixFQUFTLFFBOUJQQSxHQUFVaVYsRUFpQ2QsTUFBZSxLQUFYalYsRUFFS3NTLEVBQVNuQyxFQUFLLEVBQUcsUUFGMUIsR0FxQkY5UyxFQUFRc1gsMkJBQTZCLFNBQVN6RCxFQUFTb0IsR0FDckQsSUFBS3BCLEVBQVFsUixPQUNYLE9BQU9zUyxFQUFTLElBQUlsSyxZQUFZLElBU2xDakIsRUFBSStKLEdBTkosU0FBbUJpQixFQUFReUMsR0FDekJ2WCxFQUFRNlUsYUFBYUMsR0FBUSxHQUFNLEdBQU0sU0FBU25ILEdBQ2hELE9BQU80SixFQUFhLEtBQU01SixTQUlOLFNBQVNtRixFQUFLK0UsR0FDcEMsSUFBSUMsRUFBY0QsRUFBZXhPLFFBQU8sU0FBUzBPLEVBQUsvVixHQUNwRCxJQUFJZ1csRUFNSixPQUFPRCxHQUpMQyxFQURlLGlCQUFOaFcsRUFDSEEsRUFBRVcsT0FFRlgsRUFBRXNULFlBRU8xUixXQUFXakIsT0FBU3FWLEVBQU0sSUFDMUMsR0FFQ0MsRUFBYyxJQUFJN0MsV0FBVzBDLEdBRTdCSSxFQUFjLEVBOEJsQixPQTdCQUwsRUFBZXpRLFNBQVEsU0FBU3BGLEdBQzlCLElBQUlrSixFQUF3QixpQkFBTmxKLEVBQ2xCbVcsRUFBS25XLEVBQ1QsR0FBSWtKLEVBQVUsQ0FFWixJQURBLElBQUlrTixFQUFPLElBQUloRCxXQUFXcFQsRUFBRVcsUUFDbkJ6QyxFQUFJLEVBQUdBLEVBQUk4QixFQUFFVyxPQUFRekMsSUFDNUJrWSxFQUFLbFksR0FBSzhCLEVBQUVxVyxXQUFXblksR0FFekJpWSxFQUFLQyxFQUFLbk4sT0FJVmdOLEVBQVlDLEtBRFZoTixFQUMyQixFQUVBLEVBRy9CLElBQUlvTixFQUFTSCxFQUFHN0MsV0FBVzFSLFdBQzNCLElBQVMxRCxFQUFJLEVBQUdBLEVBQUlvWSxFQUFPM1YsT0FBUXpDLElBQ2pDK1gsRUFBWUMsS0FBaUJLLFNBQVNELEVBQU9wWSxJQUUvQytYLEVBQVlDLEtBQWlCLElBRzdCLElBRElFLEVBQU8sSUFBSWhELFdBQVcrQyxHQUNqQmpZLEVBQUksRUFBR0EsRUFBSWtZLEVBQUt6VixPQUFRekMsSUFDL0IrWCxFQUFZQyxLQUFpQkUsRUFBS2xZLE1BSS9CK1UsRUFBU2dELEVBQVloTixZQVFoQ2pMLEVBQVFxWCxvQkFBc0IsU0FBU3hELEVBQVNvQixHQWdDOUNuTCxFQUFJK0osR0EvQkosU0FBbUJpQixFQUFReUMsR0FDekJ2WCxFQUFRNlUsYUFBYUMsR0FBUSxHQUFNLEdBQU0sU0FBU2tCLEdBQ2hELElBQUl3QyxFQUFtQixJQUFJcEQsV0FBVyxHQUV0QyxHQURBb0QsRUFBaUIsR0FBSyxFQUNDLGlCQUFaeEMsRUFBc0IsQ0FFL0IsSUFEQSxJQUFJb0MsRUFBTyxJQUFJaEQsV0FBV1ksRUFBUXJULFFBQ3pCekMsRUFBSSxFQUFHQSxFQUFJOFYsRUFBUXJULE9BQVF6QyxJQUNsQ2tZLEVBQUtsWSxHQUFLOFYsRUFBUXFDLFdBQVduWSxHQUUvQjhWLEVBQVVvQyxFQUFLbk4sT0FDZnVOLEVBQWlCLEdBQUssRUFHeEIsSUFJSUYsR0FKT3RDLGFBQW1CakwsWUFDMUJpTCxFQUFRVixXQUNSVSxFQUFReUMsTUFFSzdVLFdBQ2I4VSxFQUFZLElBQUl0RCxXQUFXa0QsRUFBTzNWLE9BQVMsR0FDL0MsSUFBU3pDLEVBQUksRUFBR0EsRUFBSW9ZLEVBQU8zVixPQUFRekMsSUFDakN3WSxFQUFVeFksR0FBS3FZLFNBQVNELEVBQU9wWSxJQUlqQyxHQUZBd1ksRUFBVUosRUFBTzNWLFFBQVUsSUFFdkIyUixFQUFNLENBQ1IsSUFBSXVCLEVBQU8sSUFBSXZCLEVBQUssQ0FBQ2tFLEVBQWlCdk4sT0FBUXlOLEVBQVV6TixPQUFRK0ssSUFDaEV1QixFQUFhLEtBQU0xQixVQUtELFNBQVMvQyxFQUFLMkUsR0FDcEMsT0FBT3hDLEVBQVMsSUFBSVgsRUFBS21ELFFBYTdCelgsRUFBUTJYLHNCQUF3QixTQUFVaEssRUFBTStJLEVBQVl6QixHQUNoQyxtQkFBZnlCLElBQ1R6QixFQUFXeUIsRUFDWEEsRUFBYSxNQU1mLElBSEEsSUFBSWlDLEVBQWFoTCxFQUNiaUwsRUFBVSxHQUVQRCxFQUFXckQsV0FBYSxHQUFHLENBS2hDLElBSkEsSUFBSXVELEVBQVksSUFBSXpELFdBQVd1RCxHQUMzQnpOLEVBQTRCLElBQWpCMk4sRUFBVSxHQUNyQkMsRUFBWSxHQUVQNVksRUFBSSxFQUNVLE1BQWpCMlksRUFBVTNZLEdBREVBLElBQUssQ0FJckIsR0FBSTRZLEVBQVVuVyxPQUFTLElBQ3JCLE9BQU9zUyxFQUFTbkMsRUFBSyxFQUFHLEdBRzFCZ0csR0FBYUQsRUFBVTNZLEdBR3pCeVksRUFBYXZGLEVBQVl1RixFQUFZLEVBQUlHLEVBQVVuVyxRQUNuRG1XLEVBQVlQLFNBQVNPLEdBRXJCLElBQUlsRSxFQUFNeEIsRUFBWXVGLEVBQVksRUFBR0csR0FDckMsR0FBSTVOLEVBQ0YsSUFDRTBKLEVBQU1oTyxPQUFPMFAsYUFBYXJPLE1BQU0sS0FBTSxJQUFJbU4sV0FBV1IsSUFDckQsTUFBT3ROLEdBRVAsSUFBSWlQLEVBQVEsSUFBSW5CLFdBQVdSLEdBQzNCQSxFQUFNLEdBQ04sSUFBUzFVLEVBQUksRUFBR0EsRUFBSXFXLEVBQU01VCxPQUFRekMsSUFDaEMwVSxHQUFPaE8sT0FBTzBQLGFBQWFDLEVBQU1yVyxJQUt2QzBZLEVBQVFuVCxLQUFLbVAsR0FDYitELEVBQWF2RixFQUFZdUYsRUFBWUcsR0FHdkMsSUFBSUMsRUFBUUgsRUFBUWpXLE9BQ3BCaVcsRUFBUXhSLFNBQVEsU0FBUzZELEVBQVEvSyxHQUMvQitVLEVBQVNqVixFQUFReVcsYUFBYXhMLEVBQVF5TCxHQUFZLEdBQU94VyxFQUFHNlksUSxnQkMxbEJoRSxJQUFJQyxFQUFTLEVBQVEsSUFDakJDLEVBQWEsRUFBUSxJQUV6QixTQUFTQyxFQUFXelksRUFBTVUsR0FHdEIsY0FGT2xCLEVBQU9ELFFBQVFTLEdBQ3RCUixFQUFPRCxRQUFRUyxHQUFRVSxFQUNoQkEsRUFHWGxCLEVBQU9ELFFBQVUsQ0FDYmdaLE9BQVFBLEVBQ1JHLFVBQVcsRUFBUSxJQUNuQkMsWUFBYSxFQUFRLElBQ3JCSCxXQUFZQSxFQUNaLGtCQUNJLE9BQU9DLEVBQVcsY0FBZSxFQUFRLE9BRTdDLGFBQ0ksT0FBT0EsRUFBVyxTQUFVLEVBQVEsT0FFeEMscUJBQ0ksT0FBT0EsRUFBVyxpQkFBa0IsRUFBUSxNQUVoRCxtQkFDSSxPQUFPQSxFQUFXLGVBQWdCLEVBQVEsT0FFOUMsZUFDSSxPQUFPQSxFQUFXLFdBQVksRUFBUSxNQUUxQyx3QkFDSSxPQUFPQSxFQUNILG9CQUNBLEVBQVEsT0FJaEJHLGVBQWdCSixFQUNoQixpQkFDSSxPQUFPQyxFQUFXLGFBQWN6UyxLQUFLNlMsY0FHekNDLFNBQVUsU0FBUzVMLEVBQU1vQixHQUNyQixJQUFJeUssRUFBVSxJQUFJUCxFQUFXbEssR0FFN0IsT0FEQSxJQUFJaUssRUFBT1EsRUFBU3pLLEdBQVMwSyxJQUFJOUwsR0FDMUI2TCxFQUFRRSxLQUVuQkMsVUFBVyxTQUFTQyxFQUFNN0ssR0FDdEIsSUFBSXlLLEVBQVUsSUFBSXZaLEVBQU9ELFFBQVFzWixZQUFZdkssR0FFN0MsT0FEQSxJQUFJaUssRUFBT1EsRUFBU3pLLEdBQVMwSyxJQUFJRyxHQUMxQkosRUFBUUUsS0FFbkJHLGdCQUFpQixTQUFTbEYsRUFBSTVGLEVBQVMrSyxHQUNuQyxJQUFJTixFQUFVLElBQUlQLEVBQVd0RSxFQUFJNUYsRUFBUytLLEdBQzFDLE9BQU8sSUFBSWQsRUFBT1EsRUFBU3pLLElBRy9CZ0wsT0FBUSxDQUVKQyxVQUFXLEVBQ1hDLFdBQVksRUFDWkMsU0FBVSxFQUNWQyxLQUFNLEVBQ05DLHNCQUF1QixFQUN2QkMsUUFBUyxFQUNUQyxXQUFZLEVBQ1pDLFNBQVUsRUFDVkMsUUFBUyxFQUNUQyxZQUFhLEVBQ2J6SSxNQUFPLEVBQ1B5SCxJQUFLLEssY0NwRWIsSUFPSWlCLEVBQ0FDLEVBUkFDLEVBQVUzYSxFQUFPRCxRQUFVLEdBVS9CLFNBQVM2YSxJQUNMLE1BQU0sSUFBSWpXLE1BQU0sbUNBRXBCLFNBQVNrVyxJQUNMLE1BQU0sSUFBSWxXLE1BQU0scUNBc0JwQixTQUFTbVcsRUFBV0MsR0FDaEIsR0FBSU4sSUFBcUJPLFdBRXJCLE9BQU9BLFdBQVdELEVBQUssR0FHM0IsSUFBS04sSUFBcUJHLElBQXFCSCxJQUFxQk8sV0FFaEUsT0FEQVAsRUFBbUJPLFdBQ1pBLFdBQVdELEVBQUssR0FFM0IsSUFFSSxPQUFPTixFQUFpQk0sRUFBSyxHQUMvQixNQUFNMVQsR0FDSixJQUVJLE9BQU9vVCxFQUFpQnJhLEtBQUssS0FBTTJhLEVBQUssR0FDMUMsTUFBTTFULEdBRUosT0FBT29ULEVBQWlCcmEsS0FBS29HLEtBQU11VSxFQUFLLE1BdkNuRCxXQUNHLElBRVFOLEVBRHNCLG1CQUFmTyxXQUNZQSxXQUVBSixFQUV6QixNQUFPdlQsR0FDTG9ULEVBQW1CRyxFQUV2QixJQUVRRixFQUR3QixtQkFBakJPLGFBQ2NBLGFBRUFKLEVBRTNCLE1BQU94VCxHQUNMcVQsRUFBcUJHLEdBakI3QixHQXdFQSxJQUVJSyxFQUZBQyxFQUFRLEdBQ1JDLEdBQVcsRUFFWEMsR0FBYyxFQUVsQixTQUFTQyxJQUNBRixHQUFhRixJQUdsQkUsR0FBVyxFQUNQRixFQUFheFksT0FDYnlZLEVBQVFELEVBQWF2TixPQUFPd04sR0FFNUJFLEdBQWMsRUFFZEYsRUFBTXpZLFFBQ042WSxLQUlSLFNBQVNBLElBQ0wsSUFBSUgsRUFBSixDQUdBLElBQUlJLEVBQVVWLEVBQVdRLEdBQ3pCRixHQUFXLEVBR1gsSUFEQSxJQUFJckQsRUFBTW9ELEVBQU16WSxPQUNWcVYsR0FBSyxDQUdQLElBRkFtRCxFQUFlQyxFQUNmQSxFQUFRLEtBQ0NFLEVBQWF0RCxHQUNkbUQsR0FDQUEsRUFBYUcsR0FBWUksTUFHakNKLEdBQWMsRUFDZHRELEVBQU1vRCxFQUFNelksT0FFaEJ3WSxFQUFlLEtBQ2ZFLEdBQVcsRUFuRWYsU0FBeUJNLEdBQ3JCLEdBQUloQixJQUF1Qk8sYUFFdkIsT0FBT0EsYUFBYVMsR0FHeEIsSUFBS2hCLElBQXVCRyxJQUF3QkgsSUFBdUJPLGFBRXZFLE9BREFQLEVBQXFCTyxhQUNkQSxhQUFhUyxHQUV4QixJQUVXaEIsRUFBbUJnQixHQUM1QixNQUFPclUsR0FDTCxJQUVJLE9BQU9xVCxFQUFtQnRhLEtBQUssS0FBTXNiLEdBQ3ZDLE1BQU9yVSxHQUdMLE9BQU9xVCxFQUFtQnRhLEtBQUtvRyxLQUFNa1YsS0FnRDdDQyxDQUFnQkgsSUFpQnBCLFNBQVNJLEVBQUtiLEVBQUtjLEdBQ2ZyVixLQUFLdVUsSUFBTUEsRUFDWHZVLEtBQUtxVixNQUFRQSxFQVlqQixTQUFTMUgsS0E1QlR3RyxFQUFRbUIsU0FBVyxTQUFVZixHQUN6QixJQUFJL0ksRUFBTyxJQUFJOUksTUFBTXhFLFVBQVVoQyxPQUFTLEdBQ3hDLEdBQUlnQyxVQUFVaEMsT0FBUyxFQUNuQixJQUFLLElBQUl6QyxFQUFJLEVBQUdBLEVBQUl5RSxVQUFVaEMsT0FBUXpDLElBQ2xDK1IsRUFBSy9SLEVBQUksR0FBS3lFLFVBQVV6RSxHQUdoQ2tiLEVBQU0zVixLQUFLLElBQUlvVyxFQUFLYixFQUFLL0ksSUFDSixJQUFqQm1KLEVBQU16WSxRQUFpQjBZLEdBQ3ZCTixFQUFXUyxJQVNuQkssRUFBSy9aLFVBQVU0WixJQUFNLFdBQ2pCalYsS0FBS3VVLElBQUkvUyxNQUFNLEtBQU14QixLQUFLcVYsUUFFOUJsQixFQUFRb0IsTUFBUSxVQUNoQnBCLEVBQVFxQixTQUFVLEVBQ2xCckIsRUFBUXNCLElBQU0sR0FDZHRCLEVBQVF1QixLQUFPLEdBQ2Z2QixFQUFRd0IsUUFBVSxHQUNsQnhCLEVBQVF5QixTQUFXLEdBSW5CekIsRUFBUTBCLEdBQUtsSSxFQUNid0csRUFBUTJCLFlBQWNuSSxFQUN0QndHLEVBQVE0QixLQUFPcEksRUFDZndHLEVBQVE2QixJQUFNckksRUFDZHdHLEVBQVE4QixlQUFpQnRJLEVBQ3pCd0csRUFBUStCLG1CQUFxQnZJLEVBQzdCd0csRUFBUWdDLEtBQU94SSxFQUNmd0csRUFBUWlDLGdCQUFrQnpJLEVBQzFCd0csRUFBUWtDLG9CQUFzQjFJLEVBRTlCd0csRUFBUTVVLFVBQVksU0FBVXZGLEdBQVEsTUFBTyxJQUU3Q21hLEVBQVFtQyxRQUFVLFNBQVV0YyxHQUN4QixNQUFNLElBQUltRSxNQUFNLHFDQUdwQmdXLEVBQVFvQyxJQUFNLFdBQWMsTUFBTyxLQUNuQ3BDLEVBQVFxQyxNQUFRLFNBQVVDLEdBQ3RCLE1BQU0sSUFBSXRZLE1BQU0sbUNBRXBCZ1csRUFBUXVDLE1BQVEsV0FBYSxPQUFPLEksOEJDdkxwQzs7Ozs7OztBQVVBLElBQUk3UCxFQUFTLEVBQVEsS0FDakI4UCxFQUFVLEVBQVEsS0FDbEI5UyxFQUFVLEVBQVEsS0FtRHRCLFNBQVMrUyxJQUNQLE9BQU9DLEVBQU9DLG9CQUNWLFdBQ0EsV0FHTixTQUFTQyxFQUFjQyxFQUFNOWEsR0FDM0IsR0FBSTBhLElBQWUxYSxFQUNqQixNQUFNLElBQUkrYSxXQUFXLDhCQWN2QixPQVpJSixFQUFPQyxxQkFFVEUsRUFBTyxJQUFJckksV0FBV3pTLElBQ2pCVSxVQUFZaWEsRUFBT3hiLFdBR1gsT0FBVDJiLElBQ0ZBLEVBQU8sSUFBSUgsRUFBTzNhLElBRXBCOGEsRUFBSzlhLE9BQVNBLEdBR1Q4YSxFQWFULFNBQVNILEVBQVFsVSxFQUFLdVUsRUFBa0JoYixHQUN0QyxLQUFLMmEsRUFBT0MscUJBQXlCOVcsZ0JBQWdCNlcsR0FDbkQsT0FBTyxJQUFJQSxFQUFPbFUsRUFBS3VVLEVBQWtCaGIsR0FJM0MsR0FBbUIsaUJBQVJ5RyxFQUFrQixDQUMzQixHQUFnQyxpQkFBckJ1VSxFQUNULE1BQU0sSUFBSS9ZLE1BQ1IscUVBR0osT0FBT2daLEVBQVluWCxLQUFNMkMsR0FFM0IsT0FBT3lVLEVBQUtwWCxLQUFNMkMsRUFBS3VVLEVBQWtCaGIsR0FXM0MsU0FBU2tiLEVBQU1KLEVBQU10YyxFQUFPd2MsRUFBa0JoYixHQUM1QyxHQUFxQixpQkFBVnhCLEVBQ1QsTUFBTSxJQUFJb0IsVUFBVSx5Q0FHdEIsTUFBMkIsb0JBQWhCd0ksYUFBK0I1SixhQUFpQjRKLFlBNkg3RCxTQUEwQjBTLEVBQU0zQixFQUFPZ0MsRUFBWW5iLEdBR2pELEdBRkFtWixFQUFNeEcsV0FFRndJLEVBQWEsR0FBS2hDLEVBQU14RyxXQUFhd0ksRUFDdkMsTUFBTSxJQUFJSixXQUFXLDZCQUd2QixHQUFJNUIsRUFBTXhHLFdBQWF3SSxHQUFjbmIsR0FBVSxHQUM3QyxNQUFNLElBQUkrYSxXQUFXLDZCQUlyQjVCLE9BRGlCalgsSUFBZmlaLFFBQXVDalosSUFBWGxDLEVBQ3RCLElBQUl5UyxXQUFXMEcsUUFDSGpYLElBQVhsQyxFQUNELElBQUl5UyxXQUFXMEcsRUFBT2dDLEdBRXRCLElBQUkxSSxXQUFXMEcsRUFBT2dDLEVBQVluYixHQUd4QzJhLEVBQU9DLHFCQUVURSxFQUFPM0IsR0FDRnpZLFVBQVlpYSxFQUFPeGIsVUFHeEIyYixFQUFPTSxFQUFjTixFQUFNM0IsR0FFN0IsT0FBTzJCLEVBdkpFTyxDQUFnQlAsRUFBTXRjLEVBQU93YyxFQUFrQmhiLEdBR25DLGlCQUFWeEIsRUF3RmIsU0FBcUJzYyxFQUFNUSxFQUFRQyxHQUNULGlCQUFiQSxHQUFzQyxLQUFiQSxJQUNsQ0EsRUFBVyxRQUdiLElBQUtaLEVBQU9hLFdBQVdELEdBQ3JCLE1BQU0sSUFBSTNiLFVBQVUsOENBR3RCLElBQUlJLEVBQXdDLEVBQS9CMlMsRUFBVzJJLEVBQVFDLEdBRzVCRSxHQUZKWCxFQUFPRCxFQUFhQyxFQUFNOWEsSUFFUjBiLE1BQU1KLEVBQVFDLEdBRTVCRSxJQUFXemIsSUFJYjhhLEVBQU9BLEVBQUtyWSxNQUFNLEVBQUdnWixJQUd2QixPQUFPWCxFQTVHRWEsQ0FBV2IsRUFBTXRjLEVBQU93YyxHQXNKbkMsU0FBcUJGLEVBQU12YixHQUN6QixHQUFJb2IsRUFBT2pULFNBQVNuSSxHQUFNLENBQ3hCLElBQUk4VixFQUE0QixFQUF0QnVHLEVBQVFyYyxFQUFJUyxRQUd0QixPQUFvQixLQUZwQjhhLEVBQU9ELEVBQWFDLEVBQU16RixJQUVqQnJWLE9BQ0E4YSxHQUdUdmIsRUFBSXNjLEtBQUtmLEVBQU0sRUFBRyxFQUFHekYsR0FDZHlGLEdBR1QsR0FBSXZiLEVBQUssQ0FDUCxHQUE0QixvQkFBaEI2SSxhQUNSN0ksRUFBSStJLGtCQUFrQkYsYUFBZ0IsV0FBWTdJLEVBQ3BELE1BQTBCLGlCQUFmQSxFQUFJUyxTQSs4Q0w0SCxFQS84Q2tDckksRUFBSVMsU0FnOUNyQzRILEVBLzhDRmlULEVBQWFDLEVBQU0sR0FFckJNLEVBQWNOLEVBQU12YixHQUc3QixHQUFpQixXQUFiQSxFQUFJNkQsTUFBcUJ1RSxFQUFRcEksRUFBSXlMLE1BQ3ZDLE9BQU9vUSxFQUFjTixFQUFNdmIsRUFBSXlMLE1BdzhDckMsSUFBZ0JwRCxFQXA4Q2QsTUFBTSxJQUFJaEksVUFBVSxzRkE5S2JrYyxDQUFXaEIsRUFBTXRjLEdBNEIxQixTQUFTdWQsRUFBWWpHLEdBQ25CLEdBQW9CLGlCQUFUQSxFQUNULE1BQU0sSUFBSWxXLFVBQVUsb0NBQ2YsR0FBSWtXLEVBQU8sRUFDaEIsTUFBTSxJQUFJaUYsV0FBVyx3Q0E0QnpCLFNBQVNFLEVBQWFILEVBQU1oRixHQUcxQixHQUZBaUcsRUFBV2pHLEdBQ1hnRixFQUFPRCxFQUFhQyxFQUFNaEYsRUFBTyxFQUFJLEVBQW9CLEVBQWhCOEYsRUFBUTlGLEtBQzVDNkUsRUFBT0Msb0JBQ1YsSUFBSyxJQUFJcmQsRUFBSSxFQUFHQSxFQUFJdVksSUFBUXZZLEVBQzFCdWQsRUFBS3ZkLEdBQUssRUFHZCxPQUFPdWQsRUF3Q1QsU0FBU00sRUFBZU4sRUFBTTNCLEdBQzVCLElBQUluWixFQUFTbVosRUFBTW5aLE9BQVMsRUFBSSxFQUE0QixFQUF4QjRiLEVBQVF6QyxFQUFNblosUUFDbEQ4YSxFQUFPRCxFQUFhQyxFQUFNOWEsR0FDMUIsSUFBSyxJQUFJekMsRUFBSSxFQUFHQSxFQUFJeUMsRUFBUXpDLEdBQUssRUFDL0J1ZCxFQUFLdmQsR0FBZ0IsSUFBWDRiLEVBQU01YixHQUVsQixPQUFPdWQsRUErRFQsU0FBU2MsRUFBUzViLEdBR2hCLEdBQUlBLEdBQVUwYSxJQUNaLE1BQU0sSUFBSUssV0FBVywwREFDYUwsSUFBYXpaLFNBQVMsSUFBTSxVQUVoRSxPQUFnQixFQUFUakIsRUFzRlQsU0FBUzJTLEVBQVkySSxFQUFRQyxHQUMzQixHQUFJWixFQUFPalQsU0FBUzRULEdBQ2xCLE9BQU9BLEVBQU90YixPQUVoQixHQUEyQixvQkFBaEJvSSxhQUE2RCxtQkFBdkJBLFlBQVlDLFNBQ3hERCxZQUFZQyxPQUFPaVQsSUFBV0EsYUFBa0JsVCxhQUNuRCxPQUFPa1QsRUFBTzNJLFdBRU0saUJBQVgySSxJQUNUQSxFQUFTLEdBQUtBLEdBR2hCLElBQUlqRyxFQUFNaUcsRUFBT3RiLE9BQ2pCLEdBQVksSUFBUnFWLEVBQVcsT0FBTyxFQUl0QixJQURBLElBQUkyRyxHQUFjLElBRWhCLE9BQVFULEdBQ04sSUFBSyxRQUNMLElBQUssU0FDTCxJQUFLLFNBQ0gsT0FBT2xHLEVBQ1QsSUFBSyxPQUNMLElBQUssUUFDTCxVQUFLblQsRUFDSCxPQUFPK1osRUFBWVgsR0FBUXRiLE9BQzdCLElBQUssT0FDTCxJQUFLLFFBQ0wsSUFBSyxVQUNMLElBQUssV0FDSCxPQUFhLEVBQU5xVixFQUNULElBQUssTUFDSCxPQUFPQSxJQUFRLEVBQ2pCLElBQUssU0FDSCxPQUFPNkcsRUFBY1osR0FBUXRiLE9BQy9CLFFBQ0UsR0FBSWdjLEVBQWEsT0FBT0MsRUFBWVgsR0FBUXRiLE9BQzVDdWIsR0FBWSxHQUFLQSxHQUFVWSxjQUMzQkgsR0FBYyxHQU10QixTQUFTSSxFQUFjYixFQUFVYyxFQUFPdkYsR0FDdEMsSUFBSWtGLEdBQWMsRUFjbEIsU0FMYzlaLElBQVZtYSxHQUF1QkEsRUFBUSxLQUNqQ0EsRUFBUSxHQUlOQSxFQUFRdlksS0FBSzlELE9BQ2YsTUFBTyxHQU9ULFNBSllrQyxJQUFSNFUsR0FBcUJBLEVBQU1oVCxLQUFLOUQsVUFDbEM4VyxFQUFNaFQsS0FBSzlELFFBR1Q4VyxHQUFPLEVBQ1QsTUFBTyxHQU9ULElBSEFBLEtBQVMsS0FDVHVGLEtBQVcsR0FHVCxNQUFPLEdBS1QsSUFGS2QsSUFBVUEsRUFBVyxVQUd4QixPQUFRQSxHQUNOLElBQUssTUFDSCxPQUFPZSxFQUFTeFksS0FBTXVZLEVBQU92RixHQUUvQixJQUFLLE9BQ0wsSUFBSyxRQUNILE9BQU95RixFQUFVelksS0FBTXVZLEVBQU92RixHQUVoQyxJQUFLLFFBQ0gsT0FBTzBGLEVBQVcxWSxLQUFNdVksRUFBT3ZGLEdBRWpDLElBQUssU0FDTCxJQUFLLFNBQ0gsT0FBTzJGLEVBQVkzWSxLQUFNdVksRUFBT3ZGLEdBRWxDLElBQUssU0FDSCxPQUFPNEYsRUFBWTVZLEtBQU11WSxFQUFPdkYsR0FFbEMsSUFBSyxPQUNMLElBQUssUUFDTCxJQUFLLFVBQ0wsSUFBSyxXQUNILE9BQU82RixFQUFhN1ksS0FBTXVZLEVBQU92RixHQUVuQyxRQUNFLEdBQUlrRixFQUFhLE1BQU0sSUFBSXBjLFVBQVUscUJBQXVCMmIsR0FDNURBLEdBQVlBLEVBQVcsSUFBSVksY0FDM0JILEdBQWMsR0FTdEIsU0FBU1ksRUFBTWhXLEVBQUc1SCxFQUFHckIsR0FDbkIsSUFBSUosRUFBSXFKLEVBQUU1SCxHQUNWNEgsRUFBRTVILEdBQUs0SCxFQUFFakosR0FDVGlKLEVBQUVqSixHQUFLSixFQW1JVCxTQUFTc2YsRUFBc0J2VSxFQUFRVixFQUFLdVQsRUFBWUksRUFBVWhCLEdBRWhFLEdBQXNCLElBQWxCalMsRUFBT3RJLE9BQWMsT0FBUSxFQW1CakMsR0FoQjBCLGlCQUFmbWIsR0FDVEksRUFBV0osRUFDWEEsRUFBYSxHQUNKQSxFQUFhLFdBQ3RCQSxFQUFhLFdBQ0pBLEdBQWMsYUFDdkJBLEdBQWMsWUFFaEJBLEdBQWNBLEVBQ1YyQixNQUFNM0IsS0FFUkEsRUFBYVosRUFBTSxFQUFLalMsRUFBT3RJLE9BQVMsR0FJdENtYixFQUFhLElBQUdBLEVBQWE3UyxFQUFPdEksT0FBU21iLEdBQzdDQSxHQUFjN1MsRUFBT3RJLE9BQVEsQ0FDL0IsR0FBSXVhLEVBQUssT0FBUSxFQUNaWSxFQUFhN1MsRUFBT3RJLE9BQVMsT0FDN0IsR0FBSW1iLEVBQWEsRUFBRyxDQUN6QixJQUFJWixFQUNDLE9BQVEsRUFESlksRUFBYSxFQVV4QixHQUxtQixpQkFBUnZULElBQ1RBLEVBQU0rUyxFQUFPTyxLQUFLdFQsRUFBSzJULElBSXJCWixFQUFPalQsU0FBU0UsR0FFbEIsT0FBbUIsSUFBZkEsRUFBSTVILFFBQ0UsRUFFSCtjLEVBQWF6VSxFQUFRVixFQUFLdVQsRUFBWUksRUFBVWhCLEdBQ2xELEdBQW1CLGlCQUFSM1MsRUFFaEIsT0FEQUEsR0FBWSxJQUNSK1MsRUFBT0MscUJBQ2lDLG1CQUFqQ25JLFdBQVd0VCxVQUFVNkQsUUFDMUJ1WCxFQUNLOUgsV0FBV3RULFVBQVU2RCxRQUFRdEYsS0FBSzRLLEVBQVFWLEVBQUt1VCxHQUUvQzFJLFdBQVd0VCxVQUFVNmQsWUFBWXRmLEtBQUs0SyxFQUFRVixFQUFLdVQsR0FHdkQ0QixFQUFhelUsRUFBUSxDQUFFVixHQUFPdVQsRUFBWUksRUFBVWhCLEdBRzdELE1BQU0sSUFBSTNhLFVBQVUsd0NBR3RCLFNBQVNtZCxFQUFjN1MsRUFBS3RDLEVBQUt1VCxFQUFZSSxFQUFVaEIsR0FDckQsSUEwQkloZCxFQTFCQTBmLEVBQVksRUFDWkMsRUFBWWhULEVBQUlsSyxPQUNoQm1kLEVBQVl2VixFQUFJNUgsT0FFcEIsUUFBaUJrQyxJQUFicVosSUFFZSxVQURqQkEsRUFBV3RYLE9BQU9zWCxHQUFVWSxnQkFDWSxVQUFiWixHQUNWLFlBQWJBLEdBQXVDLGFBQWJBLEdBQXlCLENBQ3JELEdBQUlyUixFQUFJbEssT0FBUyxHQUFLNEgsRUFBSTVILE9BQVMsRUFDakMsT0FBUSxFQUVWaWQsRUFBWSxFQUNaQyxHQUFhLEVBQ2JDLEdBQWEsRUFDYmhDLEdBQWMsRUFJbEIsU0FBU2lDLEVBQU1DLEVBQUs5ZixHQUNsQixPQUFrQixJQUFkMGYsRUFDS0ksRUFBSTlmLEdBRUo4ZixFQUFJQyxhQUFhL2YsRUFBSTBmLEdBS2hDLEdBQUkxQyxFQUFLLENBQ1AsSUFBSWdELEdBQWMsRUFDbEIsSUFBS2hnQixFQUFJNGQsRUFBWTVkLEVBQUkyZixFQUFXM2YsSUFDbEMsR0FBSTZmLEVBQUtsVCxFQUFLM00sS0FBTzZmLEVBQUt4VixHQUFxQixJQUFoQjJWLEVBQW9CLEVBQUloZ0IsRUFBSWdnQixJQUV6RCxJQURvQixJQUFoQkEsSUFBbUJBLEVBQWFoZ0IsR0FDaENBLEVBQUlnZ0IsRUFBYSxJQUFNSixFQUFXLE9BQU9JLEVBQWFOLE9BRXRDLElBQWhCTSxJQUFtQmhnQixHQUFLQSxFQUFJZ2dCLEdBQ2hDQSxHQUFjLE9BS2xCLElBRElwQyxFQUFhZ0MsRUFBWUQsSUFBVy9CLEVBQWErQixFQUFZQyxHQUM1RDVmLEVBQUk0ZCxFQUFZNWQsR0FBSyxFQUFHQSxJQUFLLENBRWhDLElBREEsSUFBSWlnQixHQUFRLEVBQ0h6USxFQUFJLEVBQUdBLEVBQUlvUSxFQUFXcFEsSUFDN0IsR0FBSXFRLEVBQUtsVCxFQUFLM00sRUFBSXdQLEtBQU9xUSxFQUFLeFYsRUFBS21GLEdBQUksQ0FDckN5USxHQUFRLEVBQ1IsTUFHSixHQUFJQSxFQUFPLE9BQU9qZ0IsRUFJdEIsT0FBUSxFQWVWLFNBQVNrZ0IsRUFBVUosRUFBSy9CLEVBQVFvQyxFQUFRMWQsR0FDdEMwZCxFQUFTcEosT0FBT29KLElBQVcsRUFDM0IsSUFBSUMsRUFBWU4sRUFBSXJkLE9BQVMwZCxFQUN4QjFkLEdBR0hBLEVBQVNzVSxPQUFPdFUsSUFDSDJkLElBQ1gzZCxFQUFTMmQsR0FKWDNkLEVBQVMyZCxFQVNYLElBQUlDLEVBQVN0QyxFQUFPdGIsT0FDcEIsR0FBSTRkLEVBQVMsR0FBTSxFQUFHLE1BQU0sSUFBSWhlLFVBQVUsc0JBRXRDSSxFQUFTNGQsRUFBUyxJQUNwQjVkLEVBQVM0ZCxFQUFTLEdBRXBCLElBQUssSUFBSXJnQixFQUFJLEVBQUdBLEVBQUl5QyxJQUFVekMsRUFBRyxDQUMvQixJQUFJc2dCLEVBQVNqSSxTQUFTMEYsRUFBT25ILE9BQVcsRUFBSjVXLEVBQU8sR0FBSSxJQUMvQyxHQUFJdWYsTUFBTWUsR0FBUyxPQUFPdGdCLEVBQzFCOGYsRUFBSUssRUFBU25nQixHQUFLc2dCLEVBRXBCLE9BQU90Z0IsRUFHVCxTQUFTdWdCLEVBQVdULEVBQUsvQixFQUFRb0MsRUFBUTFkLEdBQ3ZDLE9BQU8rZCxFQUFXOUIsRUFBWVgsRUFBUStCLEVBQUlyZCxPQUFTMGQsR0FBU0wsRUFBS0ssRUFBUTFkLEdBRzNFLFNBQVNnZSxFQUFZWCxFQUFLL0IsRUFBUW9DLEVBQVExZCxHQUN4QyxPQUFPK2QsRUFxNkJULFNBQXVCbFUsR0FFckIsSUFEQSxJQUFJb1UsRUFBWSxHQUNQMWdCLEVBQUksRUFBR0EsRUFBSXNNLEVBQUk3SixTQUFVekMsRUFFaEMwZ0IsRUFBVW5iLEtBQXlCLElBQXBCK0csRUFBSTZMLFdBQVduWSxJQUVoQyxPQUFPMGdCLEVBMzZCV0MsQ0FBYTVDLEdBQVMrQixFQUFLSyxFQUFRMWQsR0FHdkQsU0FBU21lLEVBQWFkLEVBQUsvQixFQUFRb0MsRUFBUTFkLEdBQ3pDLE9BQU9nZSxFQUFXWCxFQUFLL0IsRUFBUW9DLEVBQVExZCxHQUd6QyxTQUFTb2UsRUFBYWYsRUFBSy9CLEVBQVFvQyxFQUFRMWQsR0FDekMsT0FBTytkLEVBQVc3QixFQUFjWixHQUFTK0IsRUFBS0ssRUFBUTFkLEdBR3hELFNBQVNxZSxFQUFXaEIsRUFBSy9CLEVBQVFvQyxFQUFRMWQsR0FDdkMsT0FBTytkLEVBazZCVCxTQUF5QmxVLEVBQUt5VSxHQUc1QixJQUZBLElBQUkxZ0IsRUFBRzJnQixFQUFJQyxFQUNQUCxFQUFZLEdBQ1AxZ0IsRUFBSSxFQUFHQSxFQUFJc00sRUFBSTdKLFdBQ2pCc2UsR0FBUyxHQUFLLEtBRGEvZ0IsRUFHaENLLEVBQUlpTSxFQUFJNkwsV0FBV25ZLEdBQ25CZ2hCLEVBQUszZ0IsR0FBSyxFQUNWNGdCLEVBQUs1Z0IsRUFBSSxJQUNUcWdCLEVBQVVuYixLQUFLMGIsR0FDZlAsRUFBVW5iLEtBQUt5YixHQUdqQixPQUFPTixFQS82QldRLENBQWVuRCxFQUFRK0IsRUFBSXJkLE9BQVMwZCxHQUFTTCxFQUFLSyxFQUFRMWQsR0FrRjlFLFNBQVMwYyxFQUFhVyxFQUFLaEIsRUFBT3ZGLEdBQ2hDLE9BQWMsSUFBVnVGLEdBQWV2RixJQUFRdUcsRUFBSXJkLE9BQ3RCMkssRUFBTytULGNBQWNyQixHQUVyQjFTLEVBQU8rVCxjQUFjckIsRUFBSTVhLE1BQU00WixFQUFPdkYsSUFJakQsU0FBU3lGLEVBQVdjLEVBQUtoQixFQUFPdkYsR0FDOUJBLEVBQU0vVixLQUFLNGQsSUFBSXRCLEVBQUlyZCxPQUFROFcsR0FJM0IsSUFIQSxJQUFJOEgsRUFBTSxHQUVOcmhCLEVBQUk4ZSxFQUNEOWUsRUFBSXVaLEdBQUssQ0FDZCxJQVFNK0gsRUFBWUMsRUFBV0MsRUFBWUMsRUFSckNDLEVBQVk1QixFQUFJOWYsR0FDaEIyaEIsRUFBWSxLQUNaQyxFQUFvQkYsRUFBWSxJQUFRLEVBQ3ZDQSxFQUFZLElBQVEsRUFDcEJBLEVBQVksSUFBUSxFQUNyQixFQUVKLEdBQUkxaEIsRUFBSTRoQixHQUFvQnJJLEVBRzFCLE9BQVFxSSxHQUNOLEtBQUssRUFDQ0YsRUFBWSxNQUNkQyxFQUFZRCxHQUVkLE1BQ0YsS0FBSyxFQUV5QixNQUFWLEtBRGxCSixFQUFheEIsRUFBSTlmLEVBQUksT0FFbkJ5aEIsR0FBNkIsR0FBWkMsSUFBcUIsRUFBb0IsR0FBYkosR0FDekIsTUFDbEJLLEVBQVlGLEdBR2hCLE1BQ0YsS0FBSyxFQUNISCxFQUFheEIsRUFBSTlmLEVBQUksR0FDckJ1aEIsRUFBWXpCLEVBQUk5ZixFQUFJLEdBQ1EsTUFBVixJQUFic2hCLElBQXNELE1BQVYsSUFBWkMsS0FDbkNFLEdBQTZCLEdBQVpDLElBQW9CLElBQW9CLEdBQWJKLElBQXNCLEVBQW1CLEdBQVpDLEdBQ3JELE9BQVVFLEVBQWdCLE9BQVVBLEVBQWdCLFNBQ3RFRSxFQUFZRixHQUdoQixNQUNGLEtBQUssRUFDSEgsRUFBYXhCLEVBQUk5ZixFQUFJLEdBQ3JCdWhCLEVBQVl6QixFQUFJOWYsRUFBSSxHQUNwQndoQixFQUFhMUIsRUFBSTlmLEVBQUksR0FDTyxNQUFWLElBQWJzaEIsSUFBc0QsTUFBVixJQUFaQyxJQUFzRCxNQUFWLElBQWJDLEtBQ2xFQyxHQUE2QixHQUFaQyxJQUFvQixJQUFxQixHQUFiSixJQUFzQixJQUFtQixHQUFaQyxJQUFxQixFQUFvQixHQUFiQyxHQUNsRixPQUFVQyxFQUFnQixVQUM1Q0UsRUFBWUYsR0FNSixPQUFkRSxHQUdGQSxFQUFZLE1BQ1pDLEVBQW1CLEdBQ1ZELEVBQVksUUFFckJBLEdBQWEsTUFDYk4sRUFBSTliLEtBQUtvYyxJQUFjLEdBQUssS0FBUSxPQUNwQ0EsRUFBWSxNQUFxQixLQUFaQSxHQUd2Qk4sRUFBSTliLEtBQUtvYyxHQUNUM2hCLEdBQUs0aEIsRUFHUCxPQVFGLFNBQWdDQyxHQUM5QixJQUFJL0osRUFBTStKLEVBQVdwZixPQUNyQixHQUFJcVYsR0FBT2dLLEVBQ1QsT0FBT3BiLE9BQU8wUCxhQUFhck8sTUFBTXJCLE9BQVFtYixHQUkzQyxJQUFJUixFQUFNLEdBQ05yaEIsRUFBSSxFQUNSLEtBQU9BLEVBQUk4WCxHQUNUdUosR0FBTzNhLE9BQU8wUCxhQUFhck8sTUFDekJyQixPQUNBbWIsRUFBVzNjLE1BQU1sRixFQUFHQSxHQUFLOGhCLElBRzdCLE9BQU9ULEVBdkJBVSxDQUFzQlYsR0E5OEIvQnZoQixFQUFRc2QsT0FBU0EsRUFDakJ0ZCxFQUFRa2lCLFdBb1RSLFNBQXFCdmYsSUFDZEEsR0FBVUEsSUFDYkEsRUFBUyxHQUVYLE9BQU8yYSxFQUFPNkUsT0FBT3hmLElBdlR2QjNDLEVBQVFvaUIsa0JBQW9CLEdBMEI1QjlFLEVBQU9DLHlCQUFxRDFZLElBQS9Cd2QsRUFBTzlFLG9CQUNoQzhFLEVBQU85RSxvQkFRWCxXQUNFLElBQ0UsSUFBSTFRLEVBQU0sSUFBSXVJLFdBQVcsR0FFekIsT0FEQXZJLEVBQUl4SixVQUFZLENBQUNBLFVBQVcrUixXQUFXdFQsVUFBV3dnQixJQUFLLFdBQWMsT0FBTyxLQUN2RCxLQUFkelYsRUFBSXlWLE9BQ2lCLG1CQUFqQnpWLEVBQUkwVixVQUN1QixJQUFsQzFWLEVBQUkwVixTQUFTLEVBQUcsR0FBR2pOLFdBQ3ZCLE1BQU9oTyxHQUNQLE9BQU8sR0FmUGtiLEdBS0p4aUIsRUFBUXFkLFdBQWFBLElBa0VyQkMsRUFBT21GLFNBQVcsS0FHbEJuRixFQUFPb0YsU0FBVyxTQUFVN1YsR0FFMUIsT0FEQUEsRUFBSXhKLFVBQVlpYSxFQUFPeGIsVUFDaEIrSyxHQTJCVHlRLEVBQU9PLEtBQU8sU0FBVTFjLEVBQU93YyxFQUFrQmhiLEdBQy9DLE9BQU9rYixFQUFLLEtBQU0xYyxFQUFPd2MsRUFBa0JoYixJQUd6QzJhLEVBQU9DLHNCQUNURCxFQUFPeGIsVUFBVXVCLFVBQVkrUixXQUFXdFQsVUFDeEN3YixFQUFPamEsVUFBWStSLFdBQ0csb0JBQVhuVSxRQUEwQkEsT0FBTzBoQixTQUN4Q3JGLEVBQU9yYyxPQUFPMGhCLFdBQWFyRixHQUU3QjFjLE9BQU9DLGVBQWV5YyxFQUFRcmMsT0FBTzBoQixRQUFTLENBQzVDeGhCLE1BQU8sS0FDUGdCLGNBQWMsS0FpQ3BCbWIsRUFBTzZFLE1BQVEsU0FBVTFKLEVBQU1tSyxFQUFNMUUsR0FDbkMsT0FyQkYsU0FBZ0JULEVBQU1oRixFQUFNbUssRUFBTTFFLEdBRWhDLE9BREFRLEVBQVdqRyxHQUNQQSxHQUFRLEVBQ0grRSxFQUFhQyxFQUFNaEYsUUFFZjVULElBQVQrZCxFQUl5QixpQkFBYjFFLEVBQ1ZWLEVBQWFDLEVBQU1oRixHQUFNbUssS0FBS0EsRUFBTTFFLEdBQ3BDVixFQUFhQyxFQUFNaEYsR0FBTW1LLEtBQUtBLEdBRTdCcEYsRUFBYUMsRUFBTWhGLEdBUW5CMEosQ0FBTSxLQUFNMUosRUFBTW1LLEVBQU0xRSxJQWlCakNaLEVBQU9NLFlBQWMsU0FBVW5GLEdBQzdCLE9BQU9tRixFQUFZLEtBQU1uRixJQUszQjZFLEVBQU91RixnQkFBa0IsU0FBVXBLLEdBQ2pDLE9BQU9tRixFQUFZLEtBQU1uRixJQWlIM0I2RSxFQUFPalQsU0FBVyxTQUFtQmQsR0FDbkMsUUFBZSxNQUFMQSxJQUFhQSxFQUFFdVosWUFHM0J4RixFQUFPeUYsUUFBVSxTQUFrQnpaLEVBQUdDLEdBQ3BDLElBQUsrVCxFQUFPalQsU0FBU2YsS0FBT2dVLEVBQU9qVCxTQUFTZCxHQUMxQyxNQUFNLElBQUloSCxVQUFVLDZCQUd0QixHQUFJK0csSUFBTUMsRUFBRyxPQUFPLEVBS3BCLElBSEEsSUFBSXlaLEVBQUkxWixFQUFFM0csT0FDTnNnQixFQUFJMVosRUFBRTVHLE9BRUR6QyxFQUFJLEVBQUc4WCxFQUFNdFUsS0FBSzRkLElBQUkwQixFQUFHQyxHQUFJL2lCLEVBQUk4WCxJQUFPOVgsRUFDL0MsR0FBSW9KLEVBQUVwSixLQUFPcUosRUFBRXJKLEdBQUksQ0FDakI4aUIsRUFBSTFaLEVBQUVwSixHQUNOK2lCLEVBQUkxWixFQUFFckosR0FDTixNQUlKLE9BQUk4aUIsRUFBSUMsR0FBVyxFQUNmQSxFQUFJRCxFQUFVLEVBQ1gsR0FHVDFGLEVBQU9hLFdBQWEsU0FBcUJELEdBQ3ZDLE9BQVF0WCxPQUFPc1gsR0FBVVksZUFDdkIsSUFBSyxNQUNMLElBQUssT0FDTCxJQUFLLFFBQ0wsSUFBSyxRQUNMLElBQUssU0FDTCxJQUFLLFNBQ0wsSUFBSyxTQUNMLElBQUssT0FDTCxJQUFLLFFBQ0wsSUFBSyxVQUNMLElBQUssV0FDSCxPQUFPLEVBQ1QsUUFDRSxPQUFPLElBSWJ4QixFQUFPMVAsT0FBUyxTQUFpQmIsRUFBTXBLLEdBQ3JDLElBQUsySCxFQUFReUMsR0FDWCxNQUFNLElBQUl4SyxVQUFVLCtDQUd0QixHQUFvQixJQUFoQndLLEVBQUtwSyxPQUNQLE9BQU8yYSxFQUFPNkUsTUFBTSxHQUd0QixJQUFJamlCLEVBQ0osUUFBZTJFLElBQVhsQyxFQUVGLElBREFBLEVBQVMsRUFDSnpDLEVBQUksRUFBR0EsRUFBSTZNLEVBQUtwSyxTQUFVekMsRUFDN0J5QyxHQUFVb0ssRUFBSzdNLEdBQUd5QyxPQUl0QixJQUFJc0ksRUFBU3FTLEVBQU9NLFlBQVlqYixHQUM1QnVnQixFQUFNLEVBQ1YsSUFBS2hqQixFQUFJLEVBQUdBLEVBQUk2TSxFQUFLcEssU0FBVXpDLEVBQUcsQ0FDaEMsSUFBSThmLEVBQU1qVCxFQUFLN00sR0FDZixJQUFLb2QsRUFBT2pULFNBQVMyVixHQUNuQixNQUFNLElBQUl6ZCxVQUFVLCtDQUV0QnlkLEVBQUl4QixLQUFLdlQsRUFBUWlZLEdBQ2pCQSxHQUFPbEQsRUFBSXJkLE9BRWIsT0FBT3NJLEdBOENUcVMsRUFBT2hJLFdBQWFBLEVBMEVwQmdJLEVBQU94YixVQUFVZ2hCLFdBQVksRUFRN0J4RixFQUFPeGIsVUFBVXFoQixPQUFTLFdBQ3hCLElBQUluTCxFQUFNdlIsS0FBSzlELE9BQ2YsR0FBSXFWLEVBQU0sR0FBTSxFQUNkLE1BQU0sSUFBSTBGLFdBQVcsNkNBRXZCLElBQUssSUFBSXhkLEVBQUksRUFBR0EsRUFBSThYLEVBQUs5WCxHQUFLLEVBQzVCcWYsRUFBSzlZLEtBQU12RyxFQUFHQSxFQUFJLEdBRXBCLE9BQU91RyxNQUdUNlcsRUFBT3hiLFVBQVVzaEIsT0FBUyxXQUN4QixJQUFJcEwsRUFBTXZSLEtBQUs5RCxPQUNmLEdBQUlxVixFQUFNLEdBQU0sRUFDZCxNQUFNLElBQUkwRixXQUFXLDZDQUV2QixJQUFLLElBQUl4ZCxFQUFJLEVBQUdBLEVBQUk4WCxFQUFLOVgsR0FBSyxFQUM1QnFmLEVBQUs5WSxLQUFNdkcsRUFBR0EsRUFBSSxHQUNsQnFmLEVBQUs5WSxLQUFNdkcsRUFBSSxFQUFHQSxFQUFJLEdBRXhCLE9BQU91RyxNQUdUNlcsRUFBT3hiLFVBQVV1aEIsT0FBUyxXQUN4QixJQUFJckwsRUFBTXZSLEtBQUs5RCxPQUNmLEdBQUlxVixFQUFNLEdBQU0sRUFDZCxNQUFNLElBQUkwRixXQUFXLDZDQUV2QixJQUFLLElBQUl4ZCxFQUFJLEVBQUdBLEVBQUk4WCxFQUFLOVgsR0FBSyxFQUM1QnFmLEVBQUs5WSxLQUFNdkcsRUFBR0EsRUFBSSxHQUNsQnFmLEVBQUs5WSxLQUFNdkcsRUFBSSxFQUFHQSxFQUFJLEdBQ3RCcWYsRUFBSzlZLEtBQU12RyxFQUFJLEVBQUdBLEVBQUksR0FDdEJxZixFQUFLOVksS0FBTXZHLEVBQUksRUFBR0EsRUFBSSxHQUV4QixPQUFPdUcsTUFHVDZXLEVBQU94YixVQUFVOEIsU0FBVyxXQUMxQixJQUFJakIsRUFBdUIsRUFBZDhELEtBQUs5RCxPQUNsQixPQUFlLElBQVhBLEVBQXFCLEdBQ0EsSUFBckJnQyxVQUFVaEMsT0FBcUJ1YyxFQUFVelksS0FBTSxFQUFHOUQsR0FDL0NvYyxFQUFhOVcsTUFBTXhCLEtBQU05QixZQUdsQzJZLEVBQU94YixVQUFVd2hCLE9BQVMsU0FBaUIvWixHQUN6QyxJQUFLK1QsRUFBT2pULFNBQVNkLEdBQUksTUFBTSxJQUFJaEgsVUFBVSw2QkFDN0MsT0FBSWtFLE9BQVM4QyxHQUNzQixJQUE1QitULEVBQU95RixRQUFRdGMsS0FBTThDLElBRzlCK1QsRUFBT3hiLFVBQVV5aEIsUUFBVSxXQUN6QixJQUFJL1csRUFBTSxHQUNOZ1gsRUFBTXhqQixFQUFRb2lCLGtCQUtsQixPQUpJM2IsS0FBSzlELE9BQVMsSUFDaEI2SixFQUFNL0YsS0FBSzdDLFNBQVMsTUFBTyxFQUFHNGYsR0FBS0MsTUFBTSxTQUFTMWYsS0FBSyxLQUNuRDBDLEtBQUs5RCxPQUFTNmdCLElBQUtoWCxHQUFPLFVBRXpCLFdBQWFBLEVBQU0sS0FHNUI4USxFQUFPeGIsVUFBVWloQixRQUFVLFNBQWtCdGdCLEVBQVF1YyxFQUFPdkYsRUFBS2lLLEVBQVdDLEdBQzFFLElBQUtyRyxFQUFPalQsU0FBUzVILEdBQ25CLE1BQU0sSUFBSUYsVUFBVSw2QkFnQnRCLFFBYmNzQyxJQUFWbWEsSUFDRkEsRUFBUSxRQUVFbmEsSUFBUjRVLElBQ0ZBLEVBQU1oWCxFQUFTQSxFQUFPRSxPQUFTLFFBRWZrQyxJQUFkNmUsSUFDRkEsRUFBWSxRQUVFN2UsSUFBWjhlLElBQ0ZBLEVBQVVsZCxLQUFLOUQsUUFHYnFjLEVBQVEsR0FBS3ZGLEVBQU1oWCxFQUFPRSxRQUFVK2dCLEVBQVksR0FBS0MsRUFBVWxkLEtBQUs5RCxPQUN0RSxNQUFNLElBQUkrYSxXQUFXLHNCQUd2QixHQUFJZ0csR0FBYUMsR0FBVzNFLEdBQVN2RixFQUNuQyxPQUFPLEVBRVQsR0FBSWlLLEdBQWFDLEVBQ2YsT0FBUSxFQUVWLEdBQUkzRSxHQUFTdkYsRUFDWCxPQUFPLEVBUVQsR0FBSWhULE9BQVNoRSxFQUFRLE9BQU8sRUFTNUIsSUFQQSxJQUFJdWdCLEdBSkpXLEtBQWEsSUFEYkQsS0FBZSxHQU1YVCxHQVBKeEosS0FBUyxJQURUdUYsS0FBVyxHQVNQaEgsRUFBTXRVLEtBQUs0ZCxJQUFJMEIsRUFBR0MsR0FFbEJXLEVBQVduZCxLQUFLckIsTUFBTXNlLEVBQVdDLEdBQ2pDRSxFQUFhcGhCLEVBQU8yQyxNQUFNNFosRUFBT3ZGLEdBRTVCdlosRUFBSSxFQUFHQSxFQUFJOFgsSUFBTzlYLEVBQ3pCLEdBQUkwakIsRUFBUzFqQixLQUFPMmpCLEVBQVczakIsR0FBSSxDQUNqQzhpQixFQUFJWSxFQUFTMWpCLEdBQ2IraUIsRUFBSVksRUFBVzNqQixHQUNmLE1BSUosT0FBSThpQixFQUFJQyxHQUFXLEVBQ2ZBLEVBQUlELEVBQVUsRUFDWCxHQTZIVDFGLEVBQU94YixVQUFVZ2lCLFNBQVcsU0FBbUJ2WixFQUFLdVQsRUFBWUksR0FDOUQsT0FBb0QsSUFBN0N6WCxLQUFLZCxRQUFRNEUsRUFBS3VULEVBQVlJLElBR3ZDWixFQUFPeGIsVUFBVTZELFFBQVUsU0FBa0I0RSxFQUFLdVQsRUFBWUksR0FDNUQsT0FBT3NCLEVBQXFCL1ksS0FBTThELEVBQUt1VCxFQUFZSSxHQUFVLElBRy9EWixFQUFPeGIsVUFBVTZkLFlBQWMsU0FBc0JwVixFQUFLdVQsRUFBWUksR0FDcEUsT0FBT3NCLEVBQXFCL1ksS0FBTThELEVBQUt1VCxFQUFZSSxHQUFVLElBa0QvRFosRUFBT3hiLFVBQVV1YyxNQUFRLFNBQWdCSixFQUFRb0MsRUFBUTFkLEVBQVF1YixHQUUvRCxRQUFlclosSUFBWHdiLEVBQ0ZuQyxFQUFXLE9BQ1h2YixFQUFTOEQsS0FBSzlELE9BQ2QwZCxFQUFTLE9BRUosUUFBZXhiLElBQVhsQyxHQUEwQyxpQkFBWDBkLEVBQ3hDbkMsRUFBV21DLEVBQ1gxZCxFQUFTOEQsS0FBSzlELE9BQ2QwZCxFQUFTLE1BRUosS0FBSTBELFNBQVMxRCxHQVdsQixNQUFNLElBQUl6YixNQUNSLDJFQVhGeWIsR0FBa0IsRUFDZDBELFNBQVNwaEIsSUFDWEEsR0FBa0IsT0FDRGtDLElBQWJxWixJQUF3QkEsRUFBVyxVQUV2Q0EsRUFBV3ZiLEVBQ1hBLE9BQVNrQyxHQVNiLElBQUl5YixFQUFZN1osS0FBSzlELE9BQVMwZCxFQUc5QixTQUZleGIsSUFBWGxDLEdBQXdCQSxFQUFTMmQsS0FBVzNkLEVBQVMyZCxHQUVwRHJDLEVBQU90YixPQUFTLElBQU1BLEVBQVMsR0FBSzBkLEVBQVMsSUFBT0EsRUFBUzVaLEtBQUs5RCxPQUNyRSxNQUFNLElBQUkrYSxXQUFXLDBDQUdsQlEsSUFBVUEsRUFBVyxRQUcxQixJQURBLElBQUlTLEdBQWMsSUFFaEIsT0FBUVQsR0FDTixJQUFLLE1BQ0gsT0FBT2tDLEVBQVMzWixLQUFNd1gsRUFBUW9DLEVBQVExZCxHQUV4QyxJQUFLLE9BQ0wsSUFBSyxRQUNILE9BQU84ZCxFQUFVaGEsS0FBTXdYLEVBQVFvQyxFQUFRMWQsR0FFekMsSUFBSyxRQUNILE9BQU9nZSxFQUFXbGEsS0FBTXdYLEVBQVFvQyxFQUFRMWQsR0FFMUMsSUFBSyxTQUNMLElBQUssU0FDSCxPQUFPbWUsRUFBWXJhLEtBQU13WCxFQUFRb0MsRUFBUTFkLEdBRTNDLElBQUssU0FFSCxPQUFPb2UsRUFBWXRhLEtBQU13WCxFQUFRb0MsRUFBUTFkLEdBRTNDLElBQUssT0FDTCxJQUFLLFFBQ0wsSUFBSyxVQUNMLElBQUssV0FDSCxPQUFPcWUsRUFBVXZhLEtBQU13WCxFQUFRb0MsRUFBUTFkLEdBRXpDLFFBQ0UsR0FBSWdjLEVBQWEsTUFBTSxJQUFJcGMsVUFBVSxxQkFBdUIyYixHQUM1REEsR0FBWSxHQUFLQSxHQUFVWSxjQUMzQkgsR0FBYyxJQUt0QnJCLEVBQU94YixVQUFVa2lCLE9BQVMsV0FDeEIsTUFBTyxDQUNMamUsS0FBTSxTQUNONEgsS0FBTXhFLE1BQU1ySCxVQUFVc0QsTUFBTS9FLEtBQUtvRyxLQUFLd2QsTUFBUXhkLEtBQU0sS0F3RnhELElBQUl1YixFQUF1QixLQW9CM0IsU0FBUzdDLEVBQVlhLEVBQUtoQixFQUFPdkYsR0FDL0IsSUFBSXlLLEVBQU0sR0FDVnpLLEVBQU0vVixLQUFLNGQsSUFBSXRCLEVBQUlyZCxPQUFROFcsR0FFM0IsSUFBSyxJQUFJdlosRUFBSThlLEVBQU85ZSxFQUFJdVosSUFBT3ZaLEVBQzdCZ2tCLEdBQU90ZCxPQUFPMFAsYUFBc0IsSUFBVDBKLEVBQUk5ZixJQUVqQyxPQUFPZ2tCLEVBR1QsU0FBUzlFLEVBQWFZLEVBQUtoQixFQUFPdkYsR0FDaEMsSUFBSXlLLEVBQU0sR0FDVnpLLEVBQU0vVixLQUFLNGQsSUFBSXRCLEVBQUlyZCxPQUFROFcsR0FFM0IsSUFBSyxJQUFJdlosRUFBSThlLEVBQU85ZSxFQUFJdVosSUFBT3ZaLEVBQzdCZ2tCLEdBQU90ZCxPQUFPMFAsYUFBYTBKLEVBQUk5ZixJQUVqQyxPQUFPZ2tCLEVBR1QsU0FBU2pGLEVBQVVlLEVBQUtoQixFQUFPdkYsR0FDN0IsSUFBSXpCLEVBQU1nSSxFQUFJcmQsU0FFVHFjLEdBQVNBLEVBQVEsS0FBR0EsRUFBUSxLQUM1QnZGLEdBQU9BLEVBQU0sR0FBS0EsRUFBTXpCLEtBQUt5QixFQUFNekIsR0FHeEMsSUFEQSxJQUFJbU0sRUFBTSxHQUNEamtCLEVBQUk4ZSxFQUFPOWUsRUFBSXVaLElBQU92WixFQUM3QmlrQixHQUFPQyxFQUFNcEUsRUFBSTlmLElBRW5CLE9BQU9pa0IsRUFHVCxTQUFTN0UsRUFBY1UsRUFBS2hCLEVBQU92RixHQUdqQyxJQUZBLElBQUk0SyxFQUFRckUsRUFBSTVhLE1BQU00WixFQUFPdkYsR0FDekI4SCxFQUFNLEdBQ0RyaEIsRUFBSSxFQUFHQSxFQUFJbWtCLEVBQU0xaEIsT0FBUXpDLEdBQUssRUFDckNxaEIsR0FBTzNhLE9BQU8wUCxhQUFhK04sRUFBTW5rQixHQUFvQixJQUFmbWtCLEVBQU1ua0IsRUFBSSxJQUVsRCxPQUFPcWhCLEVBMENULFNBQVMrQyxFQUFhakUsRUFBUWtFLEVBQUs1aEIsR0FDakMsR0FBSzBkLEVBQVMsR0FBTyxHQUFLQSxFQUFTLEVBQUcsTUFBTSxJQUFJM0MsV0FBVyxzQkFDM0QsR0FBSTJDLEVBQVNrRSxFQUFNNWhCLEVBQVEsTUFBTSxJQUFJK2EsV0FBVyx5Q0ErSmxELFNBQVM4RyxFQUFVeEUsRUFBSzdlLEVBQU9rZixFQUFRa0UsRUFBS2YsRUFBS2xDLEdBQy9DLElBQUtoRSxFQUFPalQsU0FBUzJWLEdBQU0sTUFBTSxJQUFJemQsVUFBVSwrQ0FDL0MsR0FBSXBCLEVBQVFxaUIsR0FBT3JpQixFQUFRbWdCLEVBQUssTUFBTSxJQUFJNUQsV0FBVyxxQ0FDckQsR0FBSTJDLEVBQVNrRSxFQUFNdkUsRUFBSXJkLE9BQVEsTUFBTSxJQUFJK2EsV0FBVyxzQkFrRHRELFNBQVMrRyxFQUFtQnpFLEVBQUs3ZSxFQUFPa2YsRUFBUXFFLEdBQzFDdmpCLEVBQVEsSUFBR0EsRUFBUSxNQUFTQSxFQUFRLEdBQ3hDLElBQUssSUFBSWpCLEVBQUksRUFBR3dQLEVBQUloTSxLQUFLNGQsSUFBSXRCLEVBQUlyZCxPQUFTMGQsRUFBUSxHQUFJbmdCLEVBQUl3UCxJQUFLeFAsRUFDN0Q4ZixFQUFJSyxFQUFTbmdCLElBQU1pQixFQUFTLEtBQVMsR0FBS3VqQixFQUFleGtCLEVBQUksRUFBSUEsTUFDbEMsR0FBNUJ3a0IsRUFBZXhrQixFQUFJLEVBQUlBLEdBOEI5QixTQUFTeWtCLEVBQW1CM0UsRUFBSzdlLEVBQU9rZixFQUFRcUUsR0FDMUN2akIsRUFBUSxJQUFHQSxFQUFRLFdBQWFBLEVBQVEsR0FDNUMsSUFBSyxJQUFJakIsRUFBSSxFQUFHd1AsRUFBSWhNLEtBQUs0ZCxJQUFJdEIsRUFBSXJkLE9BQVMwZCxFQUFRLEdBQUluZ0IsRUFBSXdQLElBQUt4UCxFQUM3RDhmLEVBQUlLLEVBQVNuZ0IsR0FBTWlCLElBQXVDLEdBQTVCdWpCLEVBQWV4a0IsRUFBSSxFQUFJQSxHQUFVLElBbUpuRSxTQUFTMGtCLEVBQWM1RSxFQUFLN2UsRUFBT2tmLEVBQVFrRSxFQUFLZixFQUFLbEMsR0FDbkQsR0FBSWpCLEVBQVNrRSxFQUFNdkUsRUFBSXJkLE9BQVEsTUFBTSxJQUFJK2EsV0FBVyxzQkFDcEQsR0FBSTJDLEVBQVMsRUFBRyxNQUFNLElBQUkzQyxXQUFXLHNCQUd2QyxTQUFTbUgsRUFBWTdFLEVBQUs3ZSxFQUFPa2YsRUFBUXFFLEVBQWNJLEdBS3JELE9BSktBLEdBQ0hGLEVBQWE1RSxFQUFLN2UsRUFBT2tmLEVBQVEsR0FFbkNqRCxFQUFRaUIsTUFBTTJCLEVBQUs3ZSxFQUFPa2YsRUFBUXFFLEVBQWMsR0FBSSxHQUM3Q3JFLEVBQVMsRUFXbEIsU0FBUzBFLEVBQWEvRSxFQUFLN2UsRUFBT2tmLEVBQVFxRSxFQUFjSSxHQUt0RCxPQUpLQSxHQUNIRixFQUFhNUUsRUFBSzdlLEVBQU9rZixFQUFRLEdBRW5DakQsRUFBUWlCLE1BQU0yQixFQUFLN2UsRUFBT2tmLEVBQVFxRSxFQUFjLEdBQUksR0FDN0NyRSxFQUFTLEVBL2NsQi9DLEVBQU94YixVQUFVc0QsTUFBUSxTQUFnQjRaLEVBQU92RixHQUM5QyxJQW9CSXVMLEVBcEJBaE4sRUFBTXZSLEtBQUs5RCxPQXFCZixJQXBCQXFjLElBQVVBLEdBR0UsR0FDVkEsR0FBU2hILEdBQ0csSUFBR2dILEVBQVEsR0FDZEEsRUFBUWhILElBQ2pCZ0gsRUFBUWhILElBTlZ5QixPQUFjNVUsSUFBUjRVLEVBQW9CekIsSUFBUXlCLEdBU3hCLEdBQ1JBLEdBQU96QixHQUNHLElBQUd5QixFQUFNLEdBQ1ZBLEVBQU16QixJQUNmeUIsRUFBTXpCLEdBR0p5QixFQUFNdUYsSUFBT3ZGLEVBQU11RixHQUduQjFCLEVBQU9DLHFCQUNUeUgsRUFBU3ZlLEtBQUs4YixTQUFTdkQsRUFBT3ZGLElBQ3ZCcFcsVUFBWWlhLEVBQU94YixjQUNyQixDQUNMLElBQUltakIsRUFBV3hMLEVBQU11RixFQUNyQmdHLEVBQVMsSUFBSTFILEVBQU8ySCxPQUFVcGdCLEdBQzlCLElBQUssSUFBSTNFLEVBQUksRUFBR0EsRUFBSStrQixJQUFZL2tCLEVBQzlCOGtCLEVBQU85a0IsR0FBS3VHLEtBQUt2RyxFQUFJOGUsR0FJekIsT0FBT2dHLEdBV1QxSCxFQUFPeGIsVUFBVW9qQixXQUFhLFNBQXFCN0UsRUFBUS9LLEVBQVl3UCxHQUNyRXpFLEdBQWtCLEVBQ2xCL0ssR0FBMEIsRUFDckJ3UCxHQUFVUixFQUFZakUsRUFBUS9LLEVBQVk3TyxLQUFLOUQsUUFLcEQsSUFIQSxJQUFJNEgsRUFBTTlELEtBQUs0WixHQUNYOEUsRUFBTSxFQUNOamxCLEVBQUksSUFDQ0EsRUFBSW9WLElBQWU2UCxHQUFPLE1BQ2pDNWEsR0FBTzlELEtBQUs0WixFQUFTbmdCLEdBQUtpbEIsRUFHNUIsT0FBTzVhLEdBR1QrUyxFQUFPeGIsVUFBVXNqQixXQUFhLFNBQXFCL0UsRUFBUS9LLEVBQVl3UCxHQUNyRXpFLEdBQWtCLEVBQ2xCL0ssR0FBMEIsRUFDckJ3UCxHQUNIUixFQUFZakUsRUFBUS9LLEVBQVk3TyxLQUFLOUQsUUFLdkMsSUFGQSxJQUFJNEgsRUFBTTlELEtBQUs0WixJQUFXL0ssR0FDdEI2UCxFQUFNLEVBQ0g3UCxFQUFhLElBQU02UCxHQUFPLE1BQy9CNWEsR0FBTzlELEtBQUs0WixJQUFXL0ssR0FBYzZQLEVBR3ZDLE9BQU81YSxHQUdUK1MsRUFBT3hiLFVBQVV1akIsVUFBWSxTQUFvQmhGLEVBQVF5RSxHQUV2RCxPQURLQSxHQUFVUixFQUFZakUsRUFBUSxFQUFHNVosS0FBSzlELFFBQ3BDOEQsS0FBSzRaLElBR2QvQyxFQUFPeGIsVUFBVXdqQixhQUFlLFNBQXVCakYsRUFBUXlFLEdBRTdELE9BREtBLEdBQVVSLEVBQVlqRSxFQUFRLEVBQUc1WixLQUFLOUQsUUFDcEM4RCxLQUFLNFosR0FBVzVaLEtBQUs0WixFQUFTLElBQU0sR0FHN0MvQyxFQUFPeGIsVUFBVW1lLGFBQWUsU0FBdUJJLEVBQVF5RSxHQUU3RCxPQURLQSxHQUFVUixFQUFZakUsRUFBUSxFQUFHNVosS0FBSzlELFFBQ25DOEQsS0FBSzRaLElBQVcsRUFBSzVaLEtBQUs0WixFQUFTLElBRzdDL0MsRUFBT3hiLFVBQVV5akIsYUFBZSxTQUF1QmxGLEVBQVF5RSxHQUc3RCxPQUZLQSxHQUFVUixFQUFZakUsRUFBUSxFQUFHNVosS0FBSzlELFNBRWxDOEQsS0FBSzRaLEdBQ1Q1WixLQUFLNFosRUFBUyxJQUFNLEVBQ3BCNVosS0FBSzRaLEVBQVMsSUFBTSxJQUNELFNBQW5CNVosS0FBSzRaLEVBQVMsSUFHckIvQyxFQUFPeGIsVUFBVTBqQixhQUFlLFNBQXVCbkYsRUFBUXlFLEdBRzdELE9BRktBLEdBQVVSLEVBQVlqRSxFQUFRLEVBQUc1WixLQUFLOUQsUUFFcEIsU0FBZjhELEtBQUs0WixJQUNUNVosS0FBSzRaLEVBQVMsSUFBTSxHQUNyQjVaLEtBQUs0WixFQUFTLElBQU0sRUFDckI1WixLQUFLNFosRUFBUyxLQUdsQi9DLEVBQU94YixVQUFVMmpCLFVBQVksU0FBb0JwRixFQUFRL0ssRUFBWXdQLEdBQ25FekUsR0FBa0IsRUFDbEIvSyxHQUEwQixFQUNyQndQLEdBQVVSLEVBQVlqRSxFQUFRL0ssRUFBWTdPLEtBQUs5RCxRQUtwRCxJQUhBLElBQUk0SCxFQUFNOUQsS0FBSzRaLEdBQ1g4RSxFQUFNLEVBQ05qbEIsRUFBSSxJQUNDQSxFQUFJb1YsSUFBZTZQLEdBQU8sTUFDakM1YSxHQUFPOUQsS0FBSzRaLEVBQVNuZ0IsR0FBS2lsQixFQU01QixPQUZJNWEsSUFGSjRhLEdBQU8sT0FFUzVhLEdBQU83RyxLQUFLZ2lCLElBQUksRUFBRyxFQUFJcFEsSUFFaEMvSyxHQUdUK1MsRUFBT3hiLFVBQVU2akIsVUFBWSxTQUFvQnRGLEVBQVEvSyxFQUFZd1AsR0FDbkV6RSxHQUFrQixFQUNsQi9LLEdBQTBCLEVBQ3JCd1AsR0FBVVIsRUFBWWpFLEVBQVEvSyxFQUFZN08sS0FBSzlELFFBS3BELElBSEEsSUFBSXpDLEVBQUlvVixFQUNKNlAsRUFBTSxFQUNONWEsRUFBTTlELEtBQUs0WixJQUFXbmdCLEdBQ25CQSxFQUFJLElBQU1pbEIsR0FBTyxNQUN0QjVhLEdBQU85RCxLQUFLNFosSUFBV25nQixHQUFLaWxCLEVBTTlCLE9BRkk1YSxJQUZKNGEsR0FBTyxPQUVTNWEsR0FBTzdHLEtBQUtnaUIsSUFBSSxFQUFHLEVBQUlwUSxJQUVoQy9LLEdBR1QrUyxFQUFPeGIsVUFBVThqQixTQUFXLFNBQW1CdkYsRUFBUXlFLEdBRXJELE9BREtBLEdBQVVSLEVBQVlqRSxFQUFRLEVBQUc1WixLQUFLOUQsUUFDdEIsSUFBZjhELEtBQUs0WixJQUMwQixHQUE1QixJQUFPNVosS0FBSzRaLEdBQVUsR0FESzVaLEtBQUs0WixJQUkzQy9DLEVBQU94YixVQUFVK2pCLFlBQWMsU0FBc0J4RixFQUFReUUsR0FDdERBLEdBQVVSLEVBQVlqRSxFQUFRLEVBQUc1WixLQUFLOUQsUUFDM0MsSUFBSTRILEVBQU05RCxLQUFLNFosR0FBVzVaLEtBQUs0WixFQUFTLElBQU0sRUFDOUMsT0FBYyxNQUFOOVYsRUFBc0IsV0FBTkEsRUFBbUJBLEdBRzdDK1MsRUFBT3hiLFVBQVVna0IsWUFBYyxTQUFzQnpGLEVBQVF5RSxHQUN0REEsR0FBVVIsRUFBWWpFLEVBQVEsRUFBRzVaLEtBQUs5RCxRQUMzQyxJQUFJNEgsRUFBTTlELEtBQUs0WixFQUFTLEdBQU01WixLQUFLNFosSUFBVyxFQUM5QyxPQUFjLE1BQU45VixFQUFzQixXQUFOQSxFQUFtQkEsR0FHN0MrUyxFQUFPeGIsVUFBVWlrQixZQUFjLFNBQXNCMUYsRUFBUXlFLEdBRzNELE9BRktBLEdBQVVSLEVBQVlqRSxFQUFRLEVBQUc1WixLQUFLOUQsUUFFbkM4RCxLQUFLNFosR0FDVjVaLEtBQUs0WixFQUFTLElBQU0sRUFDcEI1WixLQUFLNFosRUFBUyxJQUFNLEdBQ3BCNVosS0FBSzRaLEVBQVMsSUFBTSxJQUd6Qi9DLEVBQU94YixVQUFVa2tCLFlBQWMsU0FBc0IzRixFQUFReUUsR0FHM0QsT0FGS0EsR0FBVVIsRUFBWWpFLEVBQVEsRUFBRzVaLEtBQUs5RCxRQUVuQzhELEtBQUs0WixJQUFXLEdBQ3JCNVosS0FBSzRaLEVBQVMsSUFBTSxHQUNwQjVaLEtBQUs0WixFQUFTLElBQU0sRUFDcEI1WixLQUFLNFosRUFBUyxJQUduQi9DLEVBQU94YixVQUFVbWtCLFlBQWMsU0FBc0I1RixFQUFReUUsR0FFM0QsT0FES0EsR0FBVVIsRUFBWWpFLEVBQVEsRUFBRzVaLEtBQUs5RCxRQUNwQ3lhLEVBQVEyQyxLQUFLdFosS0FBTTRaLEdBQVEsRUFBTSxHQUFJLElBRzlDL0MsRUFBT3hiLFVBQVVva0IsWUFBYyxTQUFzQjdGLEVBQVF5RSxHQUUzRCxPQURLQSxHQUFVUixFQUFZakUsRUFBUSxFQUFHNVosS0FBSzlELFFBQ3BDeWEsRUFBUTJDLEtBQUt0WixLQUFNNFosR0FBUSxFQUFPLEdBQUksSUFHL0MvQyxFQUFPeGIsVUFBVXFrQixhQUFlLFNBQXVCOUYsRUFBUXlFLEdBRTdELE9BREtBLEdBQVVSLEVBQVlqRSxFQUFRLEVBQUc1WixLQUFLOUQsUUFDcEN5YSxFQUFRMkMsS0FBS3RaLEtBQU00WixHQUFRLEVBQU0sR0FBSSxJQUc5Qy9DLEVBQU94YixVQUFVc2tCLGFBQWUsU0FBdUIvRixFQUFReUUsR0FFN0QsT0FES0EsR0FBVVIsRUFBWWpFLEVBQVEsRUFBRzVaLEtBQUs5RCxRQUNwQ3lhLEVBQVEyQyxLQUFLdFosS0FBTTRaLEdBQVEsRUFBTyxHQUFJLElBUy9DL0MsRUFBT3hiLFVBQVV1a0IsWUFBYyxTQUFzQmxsQixFQUFPa2YsRUFBUS9LLEVBQVl3UCxJQUM5RTNqQixHQUFTQSxFQUNUa2YsR0FBa0IsRUFDbEIvSyxHQUEwQixFQUNyQndQLElBRUhOLEVBQVMvZCxLQUFNdEYsRUFBT2tmLEVBQVEvSyxFQURmNVIsS0FBS2dpQixJQUFJLEVBQUcsRUFBSXBRLEdBQWMsRUFDTyxHQUd0RCxJQUFJNlAsRUFBTSxFQUNOamxCLEVBQUksRUFFUixJQURBdUcsS0FBSzRaLEdBQWtCLElBQVJsZixJQUNOakIsRUFBSW9WLElBQWU2UCxHQUFPLE1BQ2pDMWUsS0FBSzRaLEVBQVNuZ0IsR0FBTWlCLEVBQVFna0IsRUFBTyxJQUdyQyxPQUFPOUUsRUFBUy9LLEdBR2xCZ0ksRUFBT3hiLFVBQVV3a0IsWUFBYyxTQUFzQm5sQixFQUFPa2YsRUFBUS9LLEVBQVl3UCxJQUM5RTNqQixHQUFTQSxFQUNUa2YsR0FBa0IsRUFDbEIvSyxHQUEwQixFQUNyQndQLElBRUhOLEVBQVMvZCxLQUFNdEYsRUFBT2tmLEVBQVEvSyxFQURmNVIsS0FBS2dpQixJQUFJLEVBQUcsRUFBSXBRLEdBQWMsRUFDTyxHQUd0RCxJQUFJcFYsRUFBSW9WLEVBQWEsRUFDakI2UCxFQUFNLEVBRVYsSUFEQTFlLEtBQUs0WixFQUFTbmdCLEdBQWEsSUFBUmlCLElBQ1ZqQixHQUFLLElBQU1pbEIsR0FBTyxNQUN6QjFlLEtBQUs0WixFQUFTbmdCLEdBQU1pQixFQUFRZ2tCLEVBQU8sSUFHckMsT0FBTzlFLEVBQVMvSyxHQUdsQmdJLEVBQU94YixVQUFVeWtCLFdBQWEsU0FBcUJwbEIsRUFBT2tmLEVBQVF5RSxHQU1oRSxPQUxBM2pCLEdBQVNBLEVBQ1RrZixHQUFrQixFQUNieUUsR0FBVU4sRUFBUy9kLEtBQU10RixFQUFPa2YsRUFBUSxFQUFHLElBQU0sR0FDakQvQyxFQUFPQyxzQkFBcUJwYyxFQUFRdUMsS0FBSzhpQixNQUFNcmxCLElBQ3BEc0YsS0FBSzRaLEdBQW1CLElBQVJsZixFQUNUa2YsRUFBUyxHQVdsQi9DLEVBQU94YixVQUFVMmtCLGNBQWdCLFNBQXdCdGxCLEVBQU9rZixFQUFReUUsR0FVdEUsT0FUQTNqQixHQUFTQSxFQUNUa2YsR0FBa0IsRUFDYnlFLEdBQVVOLEVBQVMvZCxLQUFNdEYsRUFBT2tmLEVBQVEsRUFBRyxNQUFRLEdBQ3BEL0MsRUFBT0MscUJBQ1Q5VyxLQUFLNFosR0FBbUIsSUFBUmxmLEVBQ2hCc0YsS0FBSzRaLEVBQVMsR0FBTWxmLElBQVUsR0FFOUJzakIsRUFBa0JoZSxLQUFNdEYsRUFBT2tmLEdBQVEsR0FFbENBLEVBQVMsR0FHbEIvQyxFQUFPeGIsVUFBVTRrQixjQUFnQixTQUF3QnZsQixFQUFPa2YsRUFBUXlFLEdBVXRFLE9BVEEzakIsR0FBU0EsRUFDVGtmLEdBQWtCLEVBQ2J5RSxHQUFVTixFQUFTL2QsS0FBTXRGLEVBQU9rZixFQUFRLEVBQUcsTUFBUSxHQUNwRC9DLEVBQU9DLHFCQUNUOVcsS0FBSzRaLEdBQVdsZixJQUFVLEVBQzFCc0YsS0FBSzRaLEVBQVMsR0FBYyxJQUFSbGYsR0FFcEJzakIsRUFBa0JoZSxLQUFNdEYsRUFBT2tmLEdBQVEsR0FFbENBLEVBQVMsR0FVbEIvQyxFQUFPeGIsVUFBVTZrQixjQUFnQixTQUF3QnhsQixFQUFPa2YsRUFBUXlFLEdBWXRFLE9BWEEzakIsR0FBU0EsRUFDVGtmLEdBQWtCLEVBQ2J5RSxHQUFVTixFQUFTL2QsS0FBTXRGLEVBQU9rZixFQUFRLEVBQUcsV0FBWSxHQUN4RC9DLEVBQU9DLHFCQUNUOVcsS0FBSzRaLEVBQVMsR0FBTWxmLElBQVUsR0FDOUJzRixLQUFLNFosRUFBUyxHQUFNbGYsSUFBVSxHQUM5QnNGLEtBQUs0WixFQUFTLEdBQU1sZixJQUFVLEVBQzlCc0YsS0FBSzRaLEdBQW1CLElBQVJsZixHQUVoQndqQixFQUFrQmxlLEtBQU10RixFQUFPa2YsR0FBUSxHQUVsQ0EsRUFBUyxHQUdsQi9DLEVBQU94YixVQUFVOGtCLGNBQWdCLFNBQXdCemxCLEVBQU9rZixFQUFReUUsR0FZdEUsT0FYQTNqQixHQUFTQSxFQUNUa2YsR0FBa0IsRUFDYnlFLEdBQVVOLEVBQVMvZCxLQUFNdEYsRUFBT2tmLEVBQVEsRUFBRyxXQUFZLEdBQ3hEL0MsRUFBT0MscUJBQ1Q5VyxLQUFLNFosR0FBV2xmLElBQVUsR0FDMUJzRixLQUFLNFosRUFBUyxHQUFNbGYsSUFBVSxHQUM5QnNGLEtBQUs0WixFQUFTLEdBQU1sZixJQUFVLEVBQzlCc0YsS0FBSzRaLEVBQVMsR0FBYyxJQUFSbGYsR0FFcEJ3akIsRUFBa0JsZSxLQUFNdEYsRUFBT2tmLEdBQVEsR0FFbENBLEVBQVMsR0FHbEIvQyxFQUFPeGIsVUFBVStrQixXQUFhLFNBQXFCMWxCLEVBQU9rZixFQUFRL0ssRUFBWXdQLEdBRzVFLEdBRkEzakIsR0FBU0EsRUFDVGtmLEdBQWtCLEdBQ2J5RSxFQUFVLENBQ2IsSUFBSWdDLEVBQVFwakIsS0FBS2dpQixJQUFJLEVBQUcsRUFBSXBRLEVBQWEsR0FFekNrUCxFQUFTL2QsS0FBTXRGLEVBQU9rZixFQUFRL0ssRUFBWXdSLEVBQVEsR0FBSUEsR0FHeEQsSUFBSTVtQixFQUFJLEVBQ0ppbEIsRUFBTSxFQUNONEIsRUFBTSxFQUVWLElBREF0Z0IsS0FBSzRaLEdBQWtCLElBQVJsZixJQUNOakIsRUFBSW9WLElBQWU2UCxHQUFPLE1BQzdCaGtCLEVBQVEsR0FBYSxJQUFSNGxCLEdBQXNDLElBQXpCdGdCLEtBQUs0WixFQUFTbmdCLEVBQUksS0FDOUM2bUIsRUFBTSxHQUVSdGdCLEtBQUs0WixFQUFTbmdCLElBQU9pQixFQUFRZ2tCLEdBQVEsR0FBSzRCLEVBQU0sSUFHbEQsT0FBTzFHLEVBQVMvSyxHQUdsQmdJLEVBQU94YixVQUFVa2xCLFdBQWEsU0FBcUI3bEIsRUFBT2tmLEVBQVEvSyxFQUFZd1AsR0FHNUUsR0FGQTNqQixHQUFTQSxFQUNUa2YsR0FBa0IsR0FDYnlFLEVBQVUsQ0FDYixJQUFJZ0MsRUFBUXBqQixLQUFLZ2lCLElBQUksRUFBRyxFQUFJcFEsRUFBYSxHQUV6Q2tQLEVBQVMvZCxLQUFNdEYsRUFBT2tmLEVBQVEvSyxFQUFZd1IsRUFBUSxHQUFJQSxHQUd4RCxJQUFJNW1CLEVBQUlvVixFQUFhLEVBQ2pCNlAsRUFBTSxFQUNONEIsRUFBTSxFQUVWLElBREF0Z0IsS0FBSzRaLEVBQVNuZ0IsR0FBYSxJQUFSaUIsSUFDVmpCLEdBQUssSUFBTWlsQixHQUFPLE1BQ3JCaGtCLEVBQVEsR0FBYSxJQUFSNGxCLEdBQXNDLElBQXpCdGdCLEtBQUs0WixFQUFTbmdCLEVBQUksS0FDOUM2bUIsRUFBTSxHQUVSdGdCLEtBQUs0WixFQUFTbmdCLElBQU9pQixFQUFRZ2tCLEdBQVEsR0FBSzRCLEVBQU0sSUFHbEQsT0FBTzFHLEVBQVMvSyxHQUdsQmdJLEVBQU94YixVQUFVbWxCLFVBQVksU0FBb0I5bEIsRUFBT2tmLEVBQVF5RSxHQU85RCxPQU5BM2pCLEdBQVNBLEVBQ1RrZixHQUFrQixFQUNieUUsR0FBVU4sRUFBUy9kLEtBQU10RixFQUFPa2YsRUFBUSxFQUFHLEtBQU8sS0FDbEQvQyxFQUFPQyxzQkFBcUJwYyxFQUFRdUMsS0FBSzhpQixNQUFNcmxCLElBQ2hEQSxFQUFRLElBQUdBLEVBQVEsSUFBT0EsRUFBUSxHQUN0Q3NGLEtBQUs0WixHQUFtQixJQUFSbGYsRUFDVGtmLEVBQVMsR0FHbEIvQyxFQUFPeGIsVUFBVW9sQixhQUFlLFNBQXVCL2xCLEVBQU9rZixFQUFReUUsR0FVcEUsT0FUQTNqQixHQUFTQSxFQUNUa2YsR0FBa0IsRUFDYnlFLEdBQVVOLEVBQVMvZCxLQUFNdEYsRUFBT2tmLEVBQVEsRUFBRyxPQUFTLE9BQ3JEL0MsRUFBT0MscUJBQ1Q5VyxLQUFLNFosR0FBbUIsSUFBUmxmLEVBQ2hCc0YsS0FBSzRaLEVBQVMsR0FBTWxmLElBQVUsR0FFOUJzakIsRUFBa0JoZSxLQUFNdEYsRUFBT2tmLEdBQVEsR0FFbENBLEVBQVMsR0FHbEIvQyxFQUFPeGIsVUFBVXFsQixhQUFlLFNBQXVCaG1CLEVBQU9rZixFQUFReUUsR0FVcEUsT0FUQTNqQixHQUFTQSxFQUNUa2YsR0FBa0IsRUFDYnlFLEdBQVVOLEVBQVMvZCxLQUFNdEYsRUFBT2tmLEVBQVEsRUFBRyxPQUFTLE9BQ3JEL0MsRUFBT0MscUJBQ1Q5VyxLQUFLNFosR0FBV2xmLElBQVUsRUFDMUJzRixLQUFLNFosRUFBUyxHQUFjLElBQVJsZixHQUVwQnNqQixFQUFrQmhlLEtBQU10RixFQUFPa2YsR0FBUSxHQUVsQ0EsRUFBUyxHQUdsQi9DLEVBQU94YixVQUFVc2xCLGFBQWUsU0FBdUJqbUIsRUFBT2tmLEVBQVF5RSxHQVlwRSxPQVhBM2pCLEdBQVNBLEVBQ1RrZixHQUFrQixFQUNieUUsR0FBVU4sRUFBUy9kLEtBQU10RixFQUFPa2YsRUFBUSxFQUFHLFlBQWEsWUFDekQvQyxFQUFPQyxxQkFDVDlXLEtBQUs0WixHQUFtQixJQUFSbGYsRUFDaEJzRixLQUFLNFosRUFBUyxHQUFNbGYsSUFBVSxFQUM5QnNGLEtBQUs0WixFQUFTLEdBQU1sZixJQUFVLEdBQzlCc0YsS0FBSzRaLEVBQVMsR0FBTWxmLElBQVUsSUFFOUJ3akIsRUFBa0JsZSxLQUFNdEYsRUFBT2tmLEdBQVEsR0FFbENBLEVBQVMsR0FHbEIvQyxFQUFPeGIsVUFBVXVsQixhQUFlLFNBQXVCbG1CLEVBQU9rZixFQUFReUUsR0FhcEUsT0FaQTNqQixHQUFTQSxFQUNUa2YsR0FBa0IsRUFDYnlFLEdBQVVOLEVBQVMvZCxLQUFNdEYsRUFBT2tmLEVBQVEsRUFBRyxZQUFhLFlBQ3pEbGYsRUFBUSxJQUFHQSxFQUFRLFdBQWFBLEVBQVEsR0FDeENtYyxFQUFPQyxxQkFDVDlXLEtBQUs0WixHQUFXbGYsSUFBVSxHQUMxQnNGLEtBQUs0WixFQUFTLEdBQU1sZixJQUFVLEdBQzlCc0YsS0FBSzRaLEVBQVMsR0FBTWxmLElBQVUsRUFDOUJzRixLQUFLNFosRUFBUyxHQUFjLElBQVJsZixHQUVwQndqQixFQUFrQmxlLEtBQU10RixFQUFPa2YsR0FBUSxHQUVsQ0EsRUFBUyxHQWdCbEIvQyxFQUFPeGIsVUFBVXdsQixhQUFlLFNBQXVCbm1CLEVBQU9rZixFQUFReUUsR0FDcEUsT0FBT0QsRUFBV3BlLEtBQU10RixFQUFPa2YsR0FBUSxFQUFNeUUsSUFHL0N4SCxFQUFPeGIsVUFBVXlsQixhQUFlLFNBQXVCcG1CLEVBQU9rZixFQUFReUUsR0FDcEUsT0FBT0QsRUFBV3BlLEtBQU10RixFQUFPa2YsR0FBUSxFQUFPeUUsSUFXaER4SCxFQUFPeGIsVUFBVTBsQixjQUFnQixTQUF3QnJtQixFQUFPa2YsRUFBUXlFLEdBQ3RFLE9BQU9DLEVBQVl0ZSxLQUFNdEYsRUFBT2tmLEdBQVEsRUFBTXlFLElBR2hEeEgsRUFBT3hiLFVBQVUybEIsY0FBZ0IsU0FBd0J0bUIsRUFBT2tmLEVBQVF5RSxHQUN0RSxPQUFPQyxFQUFZdGUsS0FBTXRGLEVBQU9rZixHQUFRLEVBQU95RSxJQUlqRHhILEVBQU94YixVQUFVMGMsS0FBTyxTQUFlL2IsRUFBUWlsQixFQUFhMUksRUFBT3ZGLEdBUWpFLEdBUEt1RixJQUFPQSxFQUFRLEdBQ2Z2RixHQUFlLElBQVJBLElBQVdBLEVBQU1oVCxLQUFLOUQsUUFDOUIra0IsR0FBZWpsQixFQUFPRSxTQUFRK2tCLEVBQWNqbEIsRUFBT0UsUUFDbEQra0IsSUFBYUEsRUFBYyxHQUM1QmpPLEVBQU0sR0FBS0EsRUFBTXVGLElBQU92RixFQUFNdUYsR0FHOUJ2RixJQUFRdUYsRUFBTyxPQUFPLEVBQzFCLEdBQXNCLElBQWxCdmMsRUFBT0UsUUFBZ0MsSUFBaEI4RCxLQUFLOUQsT0FBYyxPQUFPLEVBR3JELEdBQUkra0IsRUFBYyxFQUNoQixNQUFNLElBQUloSyxXQUFXLDZCQUV2QixHQUFJc0IsRUFBUSxHQUFLQSxHQUFTdlksS0FBSzlELE9BQVEsTUFBTSxJQUFJK2EsV0FBVyw2QkFDNUQsR0FBSWpFLEVBQU0sRUFBRyxNQUFNLElBQUlpRSxXQUFXLDJCQUc5QmpFLEVBQU1oVCxLQUFLOUQsU0FBUThXLEVBQU1oVCxLQUFLOUQsUUFDOUJGLEVBQU9FLE9BQVMra0IsRUFBY2pPLEVBQU11RixJQUN0Q3ZGLEVBQU1oWCxFQUFPRSxPQUFTK2tCLEVBQWMxSSxHQUd0QyxJQUNJOWUsRUFEQThYLEVBQU15QixFQUFNdUYsRUFHaEIsR0FBSXZZLE9BQVNoRSxHQUFVdWMsRUFBUTBJLEdBQWVBLEVBQWNqTyxFQUUxRCxJQUFLdlosRUFBSThYLEVBQU0sRUFBRzlYLEdBQUssSUFBS0EsRUFDMUJ1QyxFQUFPdkMsRUFBSXduQixHQUFlamhCLEtBQUt2RyxFQUFJOGUsUUFFaEMsR0FBSWhILEVBQU0sTUFBU3NGLEVBQU9DLG9CQUUvQixJQUFLcmQsRUFBSSxFQUFHQSxFQUFJOFgsSUFBTzlYLEVBQ3JCdUMsRUFBT3ZDLEVBQUl3bkIsR0FBZWpoQixLQUFLdkcsRUFBSThlLFFBR3JDNUosV0FBV3RULFVBQVU2bEIsSUFBSXRuQixLQUN2Qm9DLEVBQ0FnRSxLQUFLOGIsU0FBU3ZELEVBQU9BLEVBQVFoSCxHQUM3QjBQLEdBSUosT0FBTzFQLEdBT1RzRixFQUFPeGIsVUFBVThnQixLQUFPLFNBQWVyWSxFQUFLeVUsRUFBT3ZGLEVBQUt5RSxHQUV0RCxHQUFtQixpQkFBUjNULEVBQWtCLENBUzNCLEdBUnFCLGlCQUFWeVUsR0FDVGQsRUFBV2MsRUFDWEEsRUFBUSxFQUNSdkYsRUFBTWhULEtBQUs5RCxRQUNhLGlCQUFSOFcsSUFDaEJ5RSxFQUFXekUsRUFDWEEsRUFBTWhULEtBQUs5RCxRQUVNLElBQWY0SCxFQUFJNUgsT0FBYyxDQUNwQixJQUFJaWxCLEVBQU9yZCxFQUFJOE4sV0FBVyxHQUN0QnVQLEVBQU8sTUFDVHJkLEVBQU1xZCxHQUdWLFFBQWlCL2lCLElBQWJxWixHQUE4QyxpQkFBYkEsRUFDbkMsTUFBTSxJQUFJM2IsVUFBVSw2QkFFdEIsR0FBd0IsaUJBQWIyYixJQUEwQlosRUFBT2EsV0FBV0QsR0FDckQsTUFBTSxJQUFJM2IsVUFBVSxxQkFBdUIyYixPQUVyQixpQkFBUjNULElBQ2hCQSxHQUFZLEtBSWQsR0FBSXlVLEVBQVEsR0FBS3ZZLEtBQUs5RCxPQUFTcWMsR0FBU3ZZLEtBQUs5RCxPQUFTOFcsRUFDcEQsTUFBTSxJQUFJaUUsV0FBVyxzQkFHdkIsR0FBSWpFLEdBQU91RixFQUNULE9BQU92WSxLQVFULElBQUl2RyxFQUNKLEdBTkE4ZSxLQUFrQixFQUNsQnZGLE9BQWM1VSxJQUFSNFUsRUFBb0JoVCxLQUFLOUQsT0FBUzhXLElBQVEsRUFFM0NsUCxJQUFLQSxFQUFNLEdBR0csaUJBQVJBLEVBQ1QsSUFBS3JLLEVBQUk4ZSxFQUFPOWUsRUFBSXVaLElBQU92WixFQUN6QnVHLEtBQUt2RyxHQUFLcUssTUFFUCxDQUNMLElBQUk4WixFQUFRL0csRUFBT2pULFNBQVNFLEdBQ3hCQSxFQUNBcVUsRUFBWSxJQUFJdEIsRUFBTy9TLEVBQUsyVCxHQUFVdGEsWUFDdENvVSxFQUFNcU0sRUFBTTFoQixPQUNoQixJQUFLekMsRUFBSSxFQUFHQSxFQUFJdVosRUFBTXVGLElBQVM5ZSxFQUM3QnVHLEtBQUt2RyxFQUFJOGUsR0FBU3FGLEVBQU1ua0IsRUFBSThYLEdBSWhDLE9BQU92UixNQU1ULElBQUlvaEIsRUFBb0IscUJBbUJ4QixTQUFTekQsRUFBT3ppQixHQUNkLE9BQUlBLEVBQUksR0FBVyxJQUFNQSxFQUFFaUMsU0FBUyxJQUM3QmpDLEVBQUVpQyxTQUFTLElBR3BCLFNBQVNnYixFQUFhWCxFQUFRZ0QsR0FFNUIsSUFBSVksRUFESlosRUFBUUEsR0FBUzZHLElBTWpCLElBSkEsSUFBSW5sQixFQUFTc2IsRUFBT3RiLE9BQ2hCb2xCLEVBQWdCLEtBQ2hCMUQsRUFBUSxHQUVIbmtCLEVBQUksRUFBR0EsRUFBSXlDLElBQVV6QyxFQUFHLENBSS9CLElBSEEyaEIsRUFBWTVELEVBQU81RixXQUFXblksSUFHZCxPQUFVMmhCLEVBQVksTUFBUSxDQUU1QyxJQUFLa0csRUFBZSxDQUVsQixHQUFJbEcsRUFBWSxNQUFRLEVBRWpCWixHQUFTLElBQU0sR0FBR29ELEVBQU01ZSxLQUFLLElBQU0sSUFBTSxLQUM5QyxTQUNLLEdBQUl2RixFQUFJLElBQU15QyxFQUFRLEVBRXRCc2UsR0FBUyxJQUFNLEdBQUdvRCxFQUFNNWUsS0FBSyxJQUFNLElBQU0sS0FDOUMsU0FJRnNpQixFQUFnQmxHLEVBRWhCLFNBSUYsR0FBSUEsRUFBWSxNQUFRLEVBQ2pCWixHQUFTLElBQU0sR0FBR29ELEVBQU01ZSxLQUFLLElBQU0sSUFBTSxLQUM5Q3NpQixFQUFnQmxHLEVBQ2hCLFNBSUZBLEVBQWtFLE9BQXJEa0csRUFBZ0IsT0FBVSxHQUFLbEcsRUFBWSxZQUMvQ2tHLElBRUo5RyxHQUFTLElBQU0sR0FBR29ELEVBQU01ZSxLQUFLLElBQU0sSUFBTSxLQU1oRCxHQUhBc2lCLEVBQWdCLEtBR1psRyxFQUFZLElBQU0sQ0FDcEIsSUFBS1osR0FBUyxHQUFLLEVBQUcsTUFDdEJvRCxFQUFNNWUsS0FBS29jLFFBQ04sR0FBSUEsRUFBWSxLQUFPLENBQzVCLElBQUtaLEdBQVMsR0FBSyxFQUFHLE1BQ3RCb0QsRUFBTTVlLEtBQ0pvYyxHQUFhLEVBQU0sSUFDUCxHQUFaQSxFQUFtQixVQUVoQixHQUFJQSxFQUFZLE1BQVMsQ0FDOUIsSUFBS1osR0FBUyxHQUFLLEVBQUcsTUFDdEJvRCxFQUFNNWUsS0FDSm9jLEdBQWEsR0FBTSxJQUNuQkEsR0FBYSxFQUFNLEdBQU8sSUFDZCxHQUFaQSxFQUFtQixTQUVoQixNQUFJQSxFQUFZLFNBU3JCLE1BQU0sSUFBSWpkLE1BQU0sc0JBUmhCLElBQUtxYyxHQUFTLEdBQUssRUFBRyxNQUN0Qm9ELEVBQU01ZSxLQUNKb2MsR0FBYSxHQUFPLElBQ3BCQSxHQUFhLEdBQU0sR0FBTyxJQUMxQkEsR0FBYSxFQUFNLEdBQU8sSUFDZCxHQUFaQSxFQUFtQixNQU96QixPQUFPd0MsRUE0QlQsU0FBU3hGLEVBQWVyUyxHQUN0QixPQUFPYyxFQUFPMGEsWUFoSWhCLFNBQXNCeGIsR0FJcEIsSUFGQUEsRUFVRixTQUFxQkEsR0FDbkIsT0FBSUEsRUFBSUQsS0FBYUMsRUFBSUQsT0FDbEJDLEVBQUlDLFFBQVEsYUFBYyxJQVozQndiLENBQVd6YixHQUFLQyxRQUFRb2IsRUFBbUIsS0FFekNsbEIsT0FBUyxFQUFHLE1BQU8sR0FFM0IsS0FBTzZKLEVBQUk3SixPQUFTLEdBQU0sR0FDeEI2SixHQUFZLElBRWQsT0FBT0EsRUF1SG1CMGIsQ0FBWTFiLElBR3hDLFNBQVNrVSxFQUFZeUgsRUFBS0MsRUFBSy9ILEVBQVExZCxHQUNyQyxJQUFLLElBQUl6QyxFQUFJLEVBQUdBLEVBQUl5QyxLQUNiekMsRUFBSW1nQixHQUFVK0gsRUFBSXpsQixRQUFZekMsR0FBS2lvQixFQUFJeGxCLFVBRGhCekMsRUFFNUJrb0IsRUFBSWxvQixFQUFJbWdCLEdBQVU4SCxFQUFJam9CLEdBRXhCLE9BQU9BLEssZ0NDdHZEVEQsRUFBT0QsUUFBVSxDQUNoQnFvQixLQUFNLE9BQ05DLFVBQVcsWUFDWEMsUUFBUyxVQUNUQyxPQUFRLFNBQ1JDLE1BQU8sUUFDUEMsSUFBSyxNQUNMQyxNQUFPLFFBQ1BDLFFBQVMsVUFFVEMsTUFBTyxTQUFTQyxHQUNmLE1BQXFCLFFBQWRBLEVBQUsvaUIsTUFBZ0MsV0FBZCtpQixFQUFLL2lCLE1BQW1DLFVBQWQraUIsRUFBSy9pQixRLDZCQ04vRCxJQUFJZ2pCLEVBQVUsRUFBUSxJQUNsQkMsRUFBZ0IsQ0FDaEJDLG1CQUFtQixFQUNuQkMsYUFBYSxFQUNiQyxjQUFjLEVBQ2RDLGNBQWMsRUFDZEMsYUFBYSxFQUNiQyxpQkFBaUIsRUFDakJDLDBCQUEwQixFQUMxQkMsMEJBQTBCLEVBQzFCQyxRQUFRLEVBQ1JDLFdBQVcsRUFDWDNqQixNQUFNLEdBR040akIsRUFBZ0IsQ0FDaEJscEIsTUFBTSxFQUNOa0MsUUFBUSxFQUNSYixXQUFXLEVBQ1g4bkIsUUFBUSxFQUNSQyxRQUFRLEVBQ1JsbEIsV0FBVyxFQUNYbWxCLE9BQU8sR0FXUEMsRUFBZSxDQUNmLFVBQVksRUFDWmhILFNBQVMsRUFDVHFHLGNBQWMsRUFDZEMsYUFBYSxFQUNiSyxXQUFXLEVBQ1gzakIsTUFBTSxHQUdOaWtCLEVBQWUsR0FHbkIsU0FBU0MsRUFBV0MsR0FDaEIsT0FBSW5CLEVBQVFvQixPQUFPRCxHQUNSSCxFQUVKQyxFQUFhRSxFQUFvQixXQUFNbEIsRUFObERnQixFQUFhakIsRUFBUXFCLFlBbEJLLENBQ3RCLFVBQVksRUFDWkMsUUFBUSxFQUNSakIsY0FBYyxFQUNkQyxhQUFhLEVBQ2JLLFdBQVcsR0FzQmYsSUFBSTdvQixFQUFpQkQsT0FBT0MsZUFDeEJ5cEIsRUFBc0IxcEIsT0FBTzBwQixvQkFDN0I5aEIsRUFBd0I1SCxPQUFPNEgsc0JBQy9CRyxFQUEyQi9ILE9BQU8rSCx5QkFDbEN2RixFQUFpQnhDLE9BQU93QyxlQUN4Qm1uQixFQUFrQjNwQixPQUFPa0IsVUF1QzdCN0IsRUFBT0QsUUFyQ1AsU0FBU3dxQixFQUFxQkMsRUFBaUJDLEVBQWlCQyxHQUM1RCxHQUErQixpQkFBcEJELEVBQThCLENBR3JDLEdBQUlILEVBQWlCLENBQ2pCLElBQUlLLEVBQXFCeG5CLEVBQWVzbkIsR0FDcENFLEdBQXNCQSxJQUF1QkwsR0FDN0NDLEVBQXFCQyxFQUFpQkcsRUFBb0JELEdBSWxFLElBQUkzakIsRUFBT3NqQixFQUFvQkksR0FFM0JsaUIsSUFDQXhCLEVBQU9BLEVBQUs0RyxPQUFPcEYsRUFBc0JraUIsS0FNN0MsSUFIQSxJQUFJRyxFQUFnQlosRUFBV1EsR0FDM0JLLEVBQWdCYixFQUFXUyxHQUV0QnhxQixFQUFJLEVBQUdBLEVBQUk4RyxFQUFLckUsU0FBVXpDLEVBQUcsQ0FDbEMsSUFBSXVCLEVBQU11RixFQUFLOUcsR0FDZixLQUFLeXBCLEVBQWNsb0IsSUFBVWtwQixHQUFhQSxFQUFVbHBCLElBQVdxcEIsR0FBaUJBLEVBQWNycEIsSUFBV29wQixHQUFpQkEsRUFBY3BwQixJQUFPLENBQzNJLElBQUltQixFQUFhK0YsRUFBeUIraEIsRUFBaUJqcEIsR0FDM0QsSUFFSVosRUFBZTRwQixFQUFpQmhwQixFQUFLbUIsR0FDdkMsTUFBTzBFLE1BSWpCLE9BQU9takIsRUFHWCxPQUFPQSxJLGdCQ25HWDs7Ozs7R0FPQyxXQUNBLGFBRUEsSUFBSU0sRUFBUyxHQUFHaHBCLGVBRWhCLFNBQVNpcEIsSUFHUixJQUZBLElBQUlDLEVBQVUsR0FFTC9xQixFQUFJLEVBQUdBLEVBQUl5RSxVQUFVaEMsT0FBUXpDLElBQUssQ0FDMUMsSUFBSWtKLEVBQU16RSxVQUFVekUsR0FDcEIsR0FBS2tKLEVBQUwsQ0FFQSxJQUFJOGhCLFNBQWlCOWhCLEVBRXJCLEdBQWdCLFdBQVo4aEIsR0FBb0MsV0FBWkEsRUFDM0JELEVBQVF4bEIsS0FBSzJELFFBQ1AsR0FBSUQsTUFBTW1CLFFBQVFsQixJQUFRQSxFQUFJekcsT0FBUSxDQUM1QyxJQUFJd29CLEVBQVFILEVBQVcvaUIsTUFBTSxLQUFNbUIsR0FDL0IraEIsR0FDSEYsRUFBUXhsQixLQUFLMGxCLFFBRVIsR0FBZ0IsV0FBWkQsRUFDVixJQUFLLElBQUl6cEIsS0FBTzJILEVBQ1gyaEIsRUFBTzFxQixLQUFLK0ksRUFBSzNILElBQVEySCxFQUFJM0gsSUFDaEN3cEIsRUFBUXhsQixLQUFLaEUsSUFNakIsT0FBT3dwQixFQUFRbG5CLEtBQUssS0FHZ0I5RCxFQUFPRCxTQUMzQ2dyQixFQUFXSSxRQUFVSixFQUNyQi9xQixFQUFPRCxRQUFVZ3JCLFFBS2hCLEtBRndCLEVBQUYsV0FDdEIsT0FBT0EsR0FDUCxRQUZvQixPQUVwQixhQXhDSCxJLGNDUEEsSUFBSUssRUFHSkEsRUFBSSxXQUNILE9BQU81a0IsS0FESixHQUlKLElBRUM0a0IsRUFBSUEsR0FBSyxJQUFJQyxTQUFTLGNBQWIsR0FDUixNQUFPaGtCLEdBRWMsaUJBQVh5RSxTQUFxQnNmLEVBQUl0ZixRQU9yQzlMLEVBQU9ELFFBQVVxckIsRyxpQkNuQmpCLFlBTUFyckIsRUFBUXVyQixJQTJLUixZQUFnQnRaLEdBR2YsTUFBMEIsaUJBQVpnQixTQUNiQSxRQUFRc1ksS0FDUnRZLFFBQVFzWSxPQUFPdFosSUEvS2pCalMsRUFBUXdyQixXQWlJUixTQUFvQnZaLEdBUW5CLEdBUEFBLEVBQUssSUFBTXhMLEtBQUtnbEIsVUFBWSxLQUFPLElBQ2xDaGxCLEtBQUtpbEIsV0FDSmpsQixLQUFLZ2xCLFVBQVksTUFBUSxLQUMxQnhaLEVBQUssSUFDSnhMLEtBQUtnbEIsVUFBWSxNQUFRLEtBQzFCLElBQU14ckIsRUFBT0QsUUFBUTJyQixTQUFTbGxCLEtBQUttbEIsT0FFL0JubEIsS0FBS2dsQixVQUNULE9BR0QsTUFBTWxyQixFQUFJLFVBQVlrRyxLQUFLb2xCLE1BQzNCNVosRUFBS3JNLE9BQU8sRUFBRyxFQUFHckYsRUFBRyxrQkFLckIsSUFBSW1GLEVBQVEsRUFDUm9tQixFQUFRLEVBQ1o3WixFQUFLLEdBQUd4RixRQUFRLGNBQWVnWCxJQUNoQixPQUFWQSxJQUdKL2QsSUFDYyxPQUFWK2QsSUFHSHFJLEVBQVFwbUIsTUFJVnVNLEVBQUtyTSxPQUFPa21CLEVBQU8sRUFBR3ZyQixJQWhLdkJQLEVBQVErckIsS0F1TFIsU0FBY0MsR0FDYixJQUNLQSxFQUNIaHNCLEVBQVFpc0IsUUFBUUMsUUFBUSxRQUFTRixHQUVqQ2hzQixFQUFRaXNCLFFBQVFFLFdBQVcsU0FFM0IsTUFBT25hLE1BN0xWaFMsRUFBUW9zQixLQXlNUixXQUNDLElBQUlwckIsRUFDSixJQUNDQSxFQUFJaEIsRUFBUWlzQixRQUFRSSxRQUFRLFNBQzNCLE1BQU9yYSxLQU1KaFIsUUFBd0IsSUFBWjRaLEdBQTJCLFFBQVNBLElBQ3BENVosRUFBSTRaLEVBQVFzQixJQUFJb1EsT0FHakIsT0FBT3RyQixHQXROUmhCLEVBQVF5ckIsVUErRlIsV0FJQyxHQUFzQixvQkFBWDFmLFFBQTBCQSxPQUFPNk8sVUFBb0MsYUFBeEI3TyxPQUFPNk8sUUFBUTdVLE1BQXVCZ0csT0FBTzZPLFFBQVEyUixRQUM1RyxPQUFPLEVBSVIsR0FBeUIsb0JBQWQxZ0IsV0FBNkJBLFVBQVU0SCxXQUFhNUgsVUFBVTRILFVBQVVxTCxjQUFjMkUsTUFBTSx5QkFDdEcsT0FBTyxFQUtSLE1BQTRCLG9CQUFielgsVUFBNEJBLFNBQVN3Z0IsaUJBQW1CeGdCLFNBQVN3Z0IsZ0JBQWdCMWMsT0FBUzlELFNBQVN3Z0IsZ0JBQWdCMWMsTUFBTTJjLGtCQUVwSCxvQkFBWDFnQixRQUEwQkEsT0FBT2tILFVBQVlsSCxPQUFPa0gsUUFBUXlaLFNBQVkzZ0IsT0FBT2tILFFBQVEwWixXQUFhNWdCLE9BQU9rSCxRQUFRMlosUUFHckcsb0JBQWQvZ0IsV0FBNkJBLFVBQVU0SCxXQUFhNUgsVUFBVTRILFVBQVVxTCxjQUFjMkUsTUFBTSxtQkFBcUJsTCxTQUFTc1UsT0FBT0MsR0FBSSxLQUFPLElBRTlILG9CQUFkamhCLFdBQTZCQSxVQUFVNEgsV0FBYTVILFVBQVU0SCxVQUFVcUwsY0FBYzJFLE1BQU0sdUJBcEh0R3pqQixFQUFRaXNCLFFBbU9SLFdBQ0MsSUFHQyxPQUFPYyxhQUNOLE1BQU8vYSxLQXhPUWdiLEdBTWxCaHRCLEVBQVFpdEIsT0FBUyxDQUNoQixVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxXQTRKRGh0QixFQUFPRCxRQUFVLEVBQVEsSUFBUixDQUFvQkEsR0FFckMsTUFBTSxXQUFDa3RCLEdBQWNqdEIsRUFBT0QsUUFNNUJrdEIsRUFBV3hkLEVBQUksU0FBVXlkLEdBQ3hCLElBQ0MsT0FBTzFmLEtBQUtDLFVBQVV5ZixHQUNyQixNQUFPbmIsR0FDUixNQUFPLCtCQUFpQ0EsRUFBTWtDLFksZ0NDN1BoRGxVLEVBQVFpVyxPQUFTLFNBQVUvVCxHQUN6QixJQUFJc0ssRUFBTSxHQUVWLElBQUssSUFBSXRNLEtBQUtnQyxFQUNSQSxFQUFJSCxlQUFlN0IsS0FDakJzTSxFQUFJN0osU0FBUTZKLEdBQU8sS0FDdkJBLEdBQU9nQixtQkFBbUJ0TixHQUFLLElBQU1zTixtQkFBbUJ0TCxFQUFJaEMsS0FJaEUsT0FBT3NNLEdBVVR4TSxFQUFRK1csT0FBUyxTQUFTcVcsR0FHeEIsSUFGQSxJQUFJQyxFQUFNLEdBQ05DLEVBQVFGLEVBQUd0cEIsTUFBTSxLQUNaNUQsRUFBSSxFQUFHQyxFQUFJbXRCLEVBQU0zcUIsT0FBUXpDLEVBQUlDLEVBQUdELElBQUssQ0FDNUMsSUFBSXF0QixFQUFPRCxFQUFNcHRCLEdBQUc0RCxNQUFNLEtBQzFCdXBCLEVBQUlHLG1CQUFtQkQsRUFBSyxLQUFPQyxtQkFBbUJELEVBQUssSUFFN0QsT0FBT0YsSSxjQ2xDVHB0QixFQUFPRCxRQUFVLFNBQVNzSixFQUFHQyxHQUMzQixJQUFJbUIsRUFBSyxhQUNUQSxFQUFHNUksVUFBWXlILEVBQUV6SCxVQUNqQndILEVBQUV4SCxVQUFZLElBQUk0SSxFQUNsQnBCLEVBQUV4SCxVQUFVMEIsWUFBYzhGLEksaUJDTDVCLFlBTUF0SixFQUFRdXJCLElBMktSLFlBQWdCdFosR0FHZixNQUEwQixpQkFBWmdCLFNBQ2JBLFFBQVFzWSxLQUNSdFksUUFBUXNZLE9BQU90WixJQS9LakJqUyxFQUFRd3JCLFdBaUlSLFNBQW9CdlosR0FRbkIsR0FQQUEsRUFBSyxJQUFNeEwsS0FBS2dsQixVQUFZLEtBQU8sSUFDbENobEIsS0FBS2lsQixXQUNKamxCLEtBQUtnbEIsVUFBWSxNQUFRLEtBQzFCeFosRUFBSyxJQUNKeEwsS0FBS2dsQixVQUFZLE1BQVEsS0FDMUIsSUFBTXhyQixFQUFPRCxRQUFRMnJCLFNBQVNsbEIsS0FBS21sQixPQUUvQm5sQixLQUFLZ2xCLFVBQ1QsT0FHRCxNQUFNbHJCLEVBQUksVUFBWWtHLEtBQUtvbEIsTUFDM0I1WixFQUFLck0sT0FBTyxFQUFHLEVBQUdyRixFQUFHLGtCQUtyQixJQUFJbUYsRUFBUSxFQUNSb21CLEVBQVEsRUFDWjdaLEVBQUssR0FBR3hGLFFBQVEsY0FBZWdYLElBQ2hCLE9BQVZBLElBR0ovZCxJQUNjLE9BQVYrZCxJQUdIcUksRUFBUXBtQixNQUlWdU0sRUFBS3JNLE9BQU9rbUIsRUFBTyxFQUFHdnJCLElBaEt2QlAsRUFBUStyQixLQXVMUixTQUFjQyxHQUNiLElBQ0tBLEVBQ0hoc0IsRUFBUWlzQixRQUFRQyxRQUFRLFFBQVNGLEdBRWpDaHNCLEVBQVFpc0IsUUFBUUUsV0FBVyxTQUUzQixNQUFPbmEsTUE3TFZoUyxFQUFRb3NCLEtBeU1SLFdBQ0MsSUFBSXByQixFQUNKLElBQ0NBLEVBQUloQixFQUFRaXNCLFFBQVFJLFFBQVEsU0FDM0IsTUFBT3JhLEtBTUpoUixRQUF3QixJQUFaNFosR0FBMkIsUUFBU0EsSUFDcEQ1WixFQUFJNFosRUFBUXNCLElBQUlvUSxPQUdqQixPQUFPdHJCLEdBdE5SaEIsRUFBUXlyQixVQStGUixXQUlDLEdBQXNCLG9CQUFYMWYsUUFBMEJBLE9BQU82TyxVQUFvQyxhQUF4QjdPLE9BQU82TyxRQUFRN1UsTUFBdUJnRyxPQUFPNk8sUUFBUTJSLFFBQzVHLE9BQU8sRUFJUixHQUF5QixvQkFBZDFnQixXQUE2QkEsVUFBVTRILFdBQWE1SCxVQUFVNEgsVUFBVXFMLGNBQWMyRSxNQUFNLHlCQUN0RyxPQUFPLEVBS1IsTUFBNEIsb0JBQWJ6WCxVQUE0QkEsU0FBU3dnQixpQkFBbUJ4Z0IsU0FBU3dnQixnQkFBZ0IxYyxPQUFTOUQsU0FBU3dnQixnQkFBZ0IxYyxNQUFNMmMsa0JBRXBILG9CQUFYMWdCLFFBQTBCQSxPQUFPa0gsVUFBWWxILE9BQU9rSCxRQUFReVosU0FBWTNnQixPQUFPa0gsUUFBUTBaLFdBQWE1Z0IsT0FBT2tILFFBQVEyWixRQUdyRyxvQkFBZC9nQixXQUE2QkEsVUFBVTRILFdBQWE1SCxVQUFVNEgsVUFBVXFMLGNBQWMyRSxNQUFNLG1CQUFxQmxMLFNBQVNzVSxPQUFPQyxHQUFJLEtBQU8sSUFFOUgsb0JBQWRqaEIsV0FBNkJBLFVBQVU0SCxXQUFhNUgsVUFBVTRILFVBQVVxTCxjQUFjMkUsTUFBTSx1QkFwSHRHempCLEVBQVFpc0IsUUFtT1IsV0FDQyxJQUdDLE9BQU9jLGFBQ04sTUFBTy9hLEtBeE9RZ2IsR0FNbEJodEIsRUFBUWl0QixPQUFTLENBQ2hCLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFdBNEpEaHRCLEVBQU9ELFFBQVUsRUFBUSxJQUFSLENBQW9CQSxHQUVyQyxNQUFNLFdBQUNrdEIsR0FBY2p0QixFQUFPRCxRQU01Qmt0QixFQUFXeGQsRUFBSSxTQUFVeWQsR0FDeEIsSUFDQyxPQUFPMWYsS0FBS0MsVUFBVXlmLEdBQ3JCLE1BQU9uYixHQUNSLE1BQU8sK0JBQWlDQSxFQUFNa0MsWSxnQ0NyUW5CLG1CQUFsQnRULE9BQU9ZLE9BRWhCdkIsRUFBT0QsUUFBVSxTQUFrQnl0QixFQUFNQyxHQUNuQ0EsSUFDRkQsRUFBS0UsT0FBU0QsRUFDZEQsRUFBSzNyQixVQUFZbEIsT0FBT1ksT0FBT2tzQixFQUFVNXJCLFVBQVcsQ0FDbEQwQixZQUFhLENBQ1hyQyxNQUFPc3NCLEVBQ1Azc0IsWUFBWSxFQUNac0IsVUFBVSxFQUNWRCxjQUFjLE9BT3RCbEMsRUFBT0QsUUFBVSxTQUFrQnl0QixFQUFNQyxHQUN2QyxHQUFJQSxFQUFXLENBQ2JELEVBQUtFLE9BQVNELEVBQ2QsSUFBSUUsRUFBVyxhQUNmQSxFQUFTOXJCLFVBQVk0ckIsRUFBVTVyQixVQUMvQjJyQixFQUFLM3JCLFVBQVksSUFBSThyQixFQUNyQkgsRUFBSzNyQixVQUFVMEIsWUFBY2lxQixLLDZCQ3BCakN4dEIsRUFBT0QsUUFBVSxFQUFRLEssNkJDRDNCWSxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FDM0NtQixPQUFPLElBRVRuQixFQUFRNnRCLGlCQUFtQjd0QixFQUFROHRCLGNBQWdCOXRCLEVBQVErdEIsVUFBWS90QixFQUFRZ3VCLE9BQVNodUIsRUFBUWl1QixHQUFLanVCLEVBQVF5TSxRQUFVek0sRUFBUXlGLEtBQU96RixFQUFRa3VCLG9CQUFzQmx1QixFQUFRbXVCLGNBQWdCbnVCLEVBQVFvdUIsZ0JBQWtCcHVCLEVBQVFxdUIsMEJBQXVCeHBCLEVBRXJQLElBQUl5cEIsRUFBVyxFQUFRLElBRXZCMXRCLE9BQU9DLGVBQWViLEVBQVMsa0JBQW1CLENBQ2hEYyxZQUFZLEVBQ1pDLElBQUssV0FDSCxPQUFPdXRCLEVBQVNGLG1CQUdwQnh0QixPQUFPQyxlQUFlYixFQUFTLGdCQUFpQixDQUM5Q2MsWUFBWSxFQUNaQyxJQUFLLFdBQ0gsT0FBT3V0QixFQUFTSCxpQkFJcEIsSUFBSUksRUFBVyxFQUFRLElBRXZCM3RCLE9BQU9DLGVBQWViLEVBQVMsc0JBQXVCLENBQ3BEYyxZQUFZLEVBQ1pDLElBQUssV0FDSCxPQUFPd3RCLEVBQVNMLHVCQUdwQnR0QixPQUFPQyxlQUFlYixFQUFTLE9BQVEsQ0FDckNjLFlBQVksRUFDWkMsSUFBSyxXQUNILE9BQU93dEIsRUFBUzlvQixRQUdwQjdFLE9BQU9DLGVBQWViLEVBQVMsVUFBVyxDQUN4Q2MsWUFBWSxFQUNaQyxJQUFLLFdBQ0gsT0FBT3d0QixFQUFTOWhCLFdBR3BCN0wsT0FBT0MsZUFBZWIsRUFBUyxLQUFNLENBQ25DYyxZQUFZLEVBQ1pDLElBQUssV0FDSCxPQUFPd3RCLEVBQVNOLE1BR3BCcnRCLE9BQU9DLGVBQWViLEVBQVMsU0FBVSxDQUN2Q2MsWUFBWSxFQUNaQyxJQUFLLFdBQ0gsT0FBT3d0QixFQUFTUCxVQUdwQnB0QixPQUFPQyxlQUFlYixFQUFTLFlBQWEsQ0FDMUNjLFlBQVksRUFDWkMsSUFBSyxXQUNILE9BQU93dEIsRUFBU1IsYUFHcEJudEIsT0FBT0MsZUFBZWIsRUFBUyxnQkFBaUIsQ0FDOUNjLFlBQVksRUFDWkMsSUFBSyxXQUNILE9BQU93dEIsRUFBU1QsaUJBSXBCLElBRUlVLEVBQVNDLEVBRkQsRUFBUSxNQU1oQkMsRUFBZUQsRUFGRCxFQUFRLE1BSTFCLFNBQVNBLEVBQXVCdnNCLEdBQU8sT0FBT0EsR0FBT0EsRUFBSVosV0FBYVksRUFBTSxDQUFFLFFBQVdBLEdBRXpGbEMsRUFBUXF1QixxQkFBdUJHLEVBQWdCLFFBQy9DeHVCLEVBQVE2dEIsaUJBQW1CYSxFQUFzQixTLGlCQ3pFakQsSUFBSUMsRUFBUSxFQUFRLElBQVIsQ0FBaUIsb0JBQ3pCQyxFQUFVLEVBQVEsS0FDbEJDLEVBQVMsRUFBUSxLQUNqQnZrQixFQUFVLEVBQVEsSUFDbEJ3a0IsRUFBUSxFQUFRLElBd0dwQixTQUFTQyxLQWhHVC91QixFQUFRNFQsU0FBVyxFQVFuQjVULEVBQVFndkIsTUFBUSxDQUNkLFVBQ0EsYUFDQSxRQUNBLE1BQ0EsUUFDQSxlQUNBLGNBU0ZodkIsRUFBUWl2QixRQUFVLEVBUWxCanZCLEVBQVFrdkIsV0FBYSxFQVFyQmx2QixFQUFRbXZCLE1BQVEsRUFRaEJudkIsRUFBUW92QixJQUFNLEVBUWRwdkIsRUFBUXF2QixNQUFRLEVBUWhCcnZCLEVBQVFzdkIsYUFBZSxFQVF2QnR2QixFQUFRdXZCLFdBQWEsRUFRckJ2dkIsRUFBUSt1QixRQUFVQSxFQVFsQi91QixFQUFRd3ZCLFFBQVVBLEVBVWxCLElBQUlDLEVBQWV6dkIsRUFBUXF2QixNQUFRLGlCQStCbkMsU0FBU0ssRUFBZXh0QixHQUd0QixJQUFJc0ssRUFBTSxHQUFLdEssRUFBSTZELEtBbUJuQixHQWhCSS9GLEVBQVFzdkIsZUFBaUJwdEIsRUFBSTZELE1BQVEvRixFQUFRdXZCLGFBQWVydEIsRUFBSTZELE9BQ2xFeUcsR0FBT3RLLEVBQUl5dEIsWUFBYyxLQUt2Qnp0QixFQUFJMHRCLEtBQU8sTUFBUTF0QixFQUFJMHRCLE1BQ3pCcGpCLEdBQU90SyxFQUFJMHRCLElBQU0sS0FJZixNQUFRMXRCLEVBQUlnTixLQUNkMUMsR0FBT3RLLEVBQUlnTixJQUlULE1BQVFoTixFQUFJeUwsS0FBTSxDQUNwQixJQUFJa2lCLEVBWVIsU0FBc0JyakIsR0FDcEIsSUFDRSxPQUFPaUIsS0FBS0MsVUFBVWxCLEdBQ3RCLE1BQU1sRixHQUNOLE9BQU8sR0FoQk93b0IsQ0FBYTV0QixFQUFJeUwsTUFDL0IsSUFBZ0IsSUFBWmtpQixFQUdGLE9BQU9KLEVBRlBqakIsR0FBT3FqQixFQU9YLE9BREFsQixFQUFNLG1CQUFvQnpzQixFQUFLc0ssR0FDeEJBLEVBMENULFNBQVNnakIsSUFDUC9vQixLQUFLc3BCLGNBQWdCLEtBd0p2QixTQUFTQyxFQUFvQmxiLEdBQzNCck8sS0FBS3dwQixVQUFZbmIsRUFDakJyTyxLQUFLbVMsUUFBVSxHQWtDakIsU0FBUzVHLEVBQU00QyxHQUNiLE1BQU8sQ0FDTDdPLEtBQU0vRixFQUFRcXZCLE1BQ2QxaEIsS0FBTSxpQkFBbUJpSCxHQTdSN0JtYSxFQUFRanRCLFVBQVVtVSxPQUFTLFNBQVMvVCxFQUFLK1MsSUFDdkMwWixFQUFNLHFCQUFzQnpzQixHQUV4QmxDLEVBQVFzdkIsZUFBaUJwdEIsRUFBSTZELE1BQVEvRixFQUFRdXZCLGFBQWVydEIsRUFBSTZELE1BcUV0RSxTQUF3QjdELEVBQUsrUyxHQVczQjRaLEVBQU9xQixZQUFZaHVCLEdBVG5CLFNBQXVCaXVCLEdBQ3JCLElBQUlDLEVBQWlCdkIsRUFBT3dCLGtCQUFrQkYsR0FDMUNHLEVBQU9aLEVBQWVVLEVBQWV0YixRQUNyQzhELEVBQVV3WCxFQUFleFgsUUFFN0JBLEVBQVEyWCxRQUFRRCxHQUNoQnJiLEVBQVMyRCxNQTVFVDRYLENBQWV0dUIsRUFBSytTLEdBR3BCQSxFQUFTLENBRE15YSxFQUFleHRCLE1BK0ZsQzBzQixFQUFRWSxFQUFRMXRCLFdBVWhCMHRCLEVBQVExdEIsVUFBVTJ1QixJQUFNLFNBQVN2dUIsR0FDL0IsSUFBSTRTLEVBQ0osR0FBbUIsaUJBQVI1UyxFQUNUNFMsRUFrQ0osU0FBc0J0SSxHQUNwQixJQUFJdE0sRUFBSSxFQUVKOEIsRUFBSSxDQUNOK0QsS0FBTWtSLE9BQU96SyxFQUFJb0ssT0FBTyxLQUcxQixHQUFJLE1BQVE1VyxFQUFRZ3ZCLE1BQU1odEIsRUFBRStELE1BQzFCLE9BQU9pTSxFQUFNLHVCQUF5QmhRLEVBQUUrRCxNQUkxQyxHQUFJL0YsRUFBUXN2QixlQUFpQnR0QixFQUFFK0QsTUFBUS9GLEVBQVF1dkIsYUFBZXZ0QixFQUFFK0QsS0FBTSxDQUVwRSxJQURBLElBQUlpYSxFQUFNLEdBQ2lCLE1BQXBCeFQsRUFBSW9LLFNBQVMxVyxLQUNsQjhmLEdBQU94VCxFQUFJb0ssT0FBTzFXLEdBQ2RBLEdBQUtzTSxFQUFJN0osVUFFZixHQUFJcWQsR0FBTy9JLE9BQU8rSSxJQUEwQixNQUFsQnhULEVBQUlvSyxPQUFPMVcsR0FDbkMsTUFBTSxJQUFJMEUsTUFBTSx1QkFFbEI1QyxFQUFFMnRCLFlBQWMxWSxPQUFPK0ksR0FJekIsR0FBSSxNQUFReFQsRUFBSW9LLE9BQU8xVyxFQUFJLEdBRXpCLElBREE4QixFQUFFNHRCLElBQU0sS0FDQzF2QixHQUFHLENBRVYsR0FBSSxPQURBSyxFQUFJaU0sRUFBSW9LLE9BQU8xVyxJQUNKLE1BRWYsR0FEQThCLEVBQUU0dEIsS0FBT3J2QixFQUNMTCxJQUFNc00sRUFBSTdKLE9BQVEsV0FHeEJYLEVBQUU0dEIsSUFBTSxJQUlWLElBQUlycEIsRUFBT2lHLEVBQUlvSyxPQUFPMVcsRUFBSSxHQUMxQixHQUFJLEtBQU9xRyxHQUFRMFEsT0FBTzFRLElBQVNBLEVBQU0sQ0FFdkMsSUFEQXZFLEVBQUVrTixHQUFLLEtBQ0VoUCxHQUFHLENBQ1YsSUFBSUssRUFDSixHQUFJLE9BREFBLEVBQUlpTSxFQUFJb0ssT0FBTzFXLEtBQ0YrVyxPQUFPMVcsSUFBTUEsRUFBRyxHQUM3QkwsRUFDRixNQUdGLEdBREE4QixFQUFFa04sSUFBTTFDLEVBQUlvSyxPQUFPMVcsR0FDZkEsSUFBTXNNLEVBQUk3SixPQUFRLE1BRXhCWCxFQUFFa04sR0FBSytILE9BQU9qVixFQUFFa04sSUFJbEIsR0FBSTFDLEVBQUlvSyxTQUFTMVcsR0FBSSxDQUNuQixJQUFJMnZCLEVBYVIsU0FBa0JyakIsR0FDaEIsSUFDRSxPQUFPaUIsS0FBS2lqQixNQUFNbGtCLEdBQ2xCLE1BQU1sRixHQUNOLE9BQU8sR0FqQk9xcEIsQ0FBU25rQixFQUFJc0ssT0FBTzVXLElBRWxDLE1BRGlDLElBQVoydkIsSUFBc0I3dEIsRUFBRStELE9BQVMvRixFQUFRcXZCLE9BQVMva0IsRUFBUXVsQixLQUk3RSxPQUFPN2QsRUFBTSxtQkFGYmhRLEVBQUUyTCxLQUFPa2lCLEVBT2IsT0FEQWxCLEVBQU0sbUJBQW9CbmlCLEVBQUt4SyxHQUN4QkEsRUFuR0k0dUIsQ0FBYTF1QixHQUNsQmxDLEVBQVFzdkIsZUFBaUJ4YSxFQUFPL08sTUFBUS9GLEVBQVF1dkIsYUFBZXphLEVBQU8vTyxNQUN4RVUsS0FBS3NwQixjQUFnQixJQUFJQyxFQUFvQmxiLEdBR0ksSUFBN0NyTyxLQUFLc3BCLGNBQWNFLFVBQVVOLGFBQy9CbHBCLEtBQUttVyxLQUFLLFVBQVc5SCxJQUd2QnJPLEtBQUttVyxLQUFLLFVBQVc5SCxPQUVsQixLQUFJZ2EsRUFBTTVzQixLQUFRQSxFQUFJb0wsT0FXM0IsTUFBTSxJQUFJMUksTUFBTSxpQkFBbUIxQyxHQVZuQyxJQUFLdUUsS0FBS3NwQixjQUNSLE1BQU0sSUFBSW5yQixNQUFNLHFEQUVoQmtRLEVBQVNyTyxLQUFLc3BCLGNBQWNjLGVBQWUzdUIsTUFFekN1RSxLQUFLc3BCLGNBQWdCLEtBQ3JCdHBCLEtBQUttVyxLQUFLLFVBQVc5SCxNQWtHN0IwYSxFQUFRMXRCLFVBQVVndkIsUUFBVSxXQUN0QnJxQixLQUFLc3BCLGVBQ1B0cEIsS0FBS3NwQixjQUFjZ0IsMEJBNkJ2QmYsRUFBb0JsdUIsVUFBVSt1QixlQUFpQixTQUFTRyxHQUV0RCxHQURBdnFCLEtBQUttUyxRQUFRblQsS0FBS3VyQixHQUNkdnFCLEtBQUttUyxRQUFRalcsU0FBVzhELEtBQUt3cEIsVUFBVU4sWUFBYSxDQUN0RCxJQUFJN2EsRUFBUytaLEVBQU9vQyxrQkFBa0J4cUIsS0FBS3dwQixVQUFXeHBCLEtBQUttUyxTQUUzRCxPQURBblMsS0FBS3NxQix5QkFDRWpjLEVBRVQsT0FBTyxNQVNUa2IsRUFBb0JsdUIsVUFBVWl2Qix1QkFBeUIsV0FDckR0cUIsS0FBS3dwQixVQUFZLEtBQ2pCeHBCLEtBQUttUyxRQUFVLEssZ0JDcFpqQixJQUFJc1ksRUFBVSxFQUFRLEtBRXRCanhCLEVBQU9ELFFBQVUsU0FBVW14QixHQUN6QixJQUFJQyxFQUFVRCxFQUFLQyxRQUlmQyxFQUFVRixFQUFLRSxRQUlmQyxFQUFhSCxFQUFLRyxXQUd0QixJQUNFLEdBQUksb0JBQXVCQyxrQkFBb0JILEdBQVdGLEdBQ3hELE9BQU8sSUFBSUssZUFFYixNQUFPanFCLElBS1QsSUFDRSxHQUFJLG9CQUF1QmtxQixpQkFBbUJILEdBQVdDLEVBQ3ZELE9BQU8sSUFBSUUsZUFFYixNQUFPbHFCLElBRVQsSUFBSzhwQixFQUNILElBQ0UsT0FBTyxJQUFJbnVCLEtBQUssQ0FBQyxVQUFVMkssT0FBTyxVQUFVN0osS0FBSyxPQUFNLHFCQUN2RCxNQUFPdUQsTyxnQkM5QmIsSUFBSW1xQixFQUFTLEVBQVEsSUFDakI3QyxFQUFVLEVBQVEsSUFldEIsU0FBUzhDLEVBQVdQLEdBQ2xCMXFCLEtBQUtrckIsS0FBT1IsRUFBS1EsS0FDakJsckIsS0FBS21yQixTQUFXVCxFQUFLUyxTQUNyQm5yQixLQUFLb3JCLEtBQU9WLEVBQUtVLEtBQ2pCcHJCLEtBQUtxckIsT0FBU1gsRUFBS1csT0FDbkJyckIsS0FBS3NyQixNQUFRWixFQUFLWSxNQUNsQnRyQixLQUFLdXJCLGVBQWlCYixFQUFLYSxlQUMzQnZyQixLQUFLd3JCLGtCQUFvQmQsRUFBS2Msa0JBQzlCeHJCLEtBQUt5ckIsV0FBYSxHQUNsQnpyQixLQUFLMHJCLE1BQVFoQixFQUFLZ0IsUUFBUyxFQUMzQjFyQixLQUFLMnJCLE9BQVNqQixFQUFLaUIsT0FDbkIzckIsS0FBSzZxQixXQUFhSCxFQUFLRyxXQUN2QjdxQixLQUFLNHJCLGdCQUFrQmxCLEVBQUtrQixnQkFHNUI1ckIsS0FBSzZyQixJQUFNbkIsRUFBS21CLElBQ2hCN3JCLEtBQUtoRixJQUFNMHZCLEVBQUsxdkIsSUFDaEJnRixLQUFLOHJCLFdBQWFwQixFQUFLb0IsV0FDdkI5ckIsS0FBSytyQixLQUFPckIsRUFBS3FCLEtBQ2pCL3JCLEtBQUtnc0IsR0FBS3RCLEVBQUtzQixHQUNmaHNCLEtBQUtpc0IsUUFBVXZCLEVBQUt1QixRQUNwQmpzQixLQUFLa3NCLG1CQUFxQnhCLEVBQUt3QixtQkFDL0Jsc0IsS0FBS21zQixVQUFZekIsRUFBS3lCLFVBR3RCbnNCLEtBQUtvc0IsY0FBZ0IxQixFQUFLMEIsY0FHMUJwc0IsS0FBS3FzQixhQUFlM0IsRUFBSzJCLGFBQ3pCcnNCLEtBQUtzc0IsYUFBZTVCLEVBQUs0QixhQXRDM0I5eUIsRUFBT0QsUUFBVTB4QixFQTZDakI5QyxFQUFROEMsRUFBVTV2QixXQVVsQjR2QixFQUFVNXZCLFVBQVVreEIsUUFBVSxTQUFVcGUsRUFBS3FlLEdBQzNDLElBQUluZ0IsRUFBTSxJQUFJbE8sTUFBTWdRLEdBSXBCLE9BSEE5QixFQUFJL00sS0FBTyxpQkFDWCtNLEVBQUlvZ0IsWUFBY0QsRUFDbEJ4c0IsS0FBS21XLEtBQUssUUFBUzlKLEdBQ1pyTSxNQVNUaXJCLEVBQVU1dkIsVUFBVWdTLEtBQU8sV0FNekIsTUFMSSxXQUFhck4sS0FBS3lyQixZQUFjLEtBQU96ckIsS0FBS3lyQixhQUM5Q3pyQixLQUFLeXJCLFdBQWEsVUFDbEJ6ckIsS0FBSzBzQixVQUdBMXNCLE1BU1RpckIsRUFBVTV2QixVQUFVaVMsTUFBUSxXQU0xQixNQUxJLFlBQWN0TixLQUFLeXJCLFlBQWMsU0FBV3pyQixLQUFLeXJCLGFBQ25EenJCLEtBQUsyc0IsVUFDTDNzQixLQUFLNHNCLFdBR0E1c0IsTUFVVGlyQixFQUFVNXZCLFVBQVV3eEIsS0FBTyxTQUFVemYsR0FDbkMsR0FBSSxTQUFXcE4sS0FBS3lyQixXQUdsQixNQUFNLElBQUl0dEIsTUFBTSxzQkFGaEI2QixLQUFLNFgsTUFBTXhLLElBWWY2ZCxFQUFVNXZCLFVBQVV5eEIsT0FBUyxXQUMzQjlzQixLQUFLeXJCLFdBQWEsT0FDbEJ6ckIsS0FBS3JFLFVBQVcsRUFDaEJxRSxLQUFLbVcsS0FBSyxTQVVaOFUsRUFBVTV2QixVQUFVMHhCLE9BQVMsU0FBVTdsQixHQUNyQyxJQUFJbUgsRUFBUzJjLEVBQU9oYixhQUFhOUksRUFBTWxILEtBQUsyckIsT0FBTzFiLFlBQ25EalEsS0FBS2d0QixTQUFTM2UsSUFPaEI0YyxFQUFVNXZCLFVBQVUyeEIsU0FBVyxTQUFVM2UsR0FDdkNyTyxLQUFLbVcsS0FBSyxTQUFVOUgsSUFTdEI0YyxFQUFVNXZCLFVBQVV1eEIsUUFBVSxXQUM1QjVzQixLQUFLeXJCLFdBQWEsU0FDbEJ6ckIsS0FBS21XLEtBQUssVyxnQkNoSlosU0FBU2dTLEVBQVExc0IsR0FDZixHQUFJQSxFQUFLLE9BV1gsU0FBZUEsR0FDYixJQUFLLElBQUlULEtBQU9tdEIsRUFBUTlzQixVQUN0QkksRUFBSVQsR0FBT210QixFQUFROXNCLFVBQVVMLEdBRS9CLE9BQU9TLEVBZlN3eEIsQ0FBTXh4QixHQVZ0QmpDLEVBQU9ELFFBQVU0dUIsRUFxQ25CQSxFQUFROXNCLFVBQVV3YSxHQUNsQnNTLEVBQVE5c0IsVUFBVTZ4QixpQkFBbUIsU0FBU0MsRUFBT2xwQixHQUluRCxPQUhBakUsS0FBS290QixXQUFhcHRCLEtBQUtvdEIsWUFBYyxJQUNwQ3B0QixLQUFLb3RCLFdBQVcsSUFBTUQsR0FBU250QixLQUFLb3RCLFdBQVcsSUFBTUQsSUFBVSxJQUM3RG51QixLQUFLaUYsR0FDRGpFLE1BYVRtb0IsRUFBUTlzQixVQUFVMGEsS0FBTyxTQUFTb1gsRUFBT2xwQixHQUN2QyxTQUFTNFIsSUFDUDdWLEtBQUtnVyxJQUFJbVgsRUFBT3RYLEdBQ2hCNVIsRUFBR3pDLE1BQU14QixLQUFNOUIsV0FLakIsT0FGQTJYLEVBQUc1UixHQUFLQSxFQUNSakUsS0FBSzZWLEdBQUdzWCxFQUFPdFgsR0FDUjdWLE1BYVRtb0IsRUFBUTlzQixVQUFVMmEsSUFDbEJtUyxFQUFROXNCLFVBQVU0YSxlQUNsQmtTLEVBQVE5c0IsVUFBVTZhLG1CQUNsQmlTLEVBQVE5c0IsVUFBVWd5QixvQkFBc0IsU0FBU0YsRUFBT2xwQixHQUl0RCxHQUhBakUsS0FBS290QixXQUFhcHRCLEtBQUtvdEIsWUFBYyxHQUdqQyxHQUFLbHZCLFVBQVVoQyxPQUVqQixPQURBOEQsS0FBS290QixXQUFhLEdBQ1hwdEIsS0FJVCxJQVVJa08sRUFWQW9mLEVBQVl0dEIsS0FBS290QixXQUFXLElBQU1ELEdBQ3RDLElBQUtHLEVBQVcsT0FBT3R0QixLQUd2QixHQUFJLEdBQUs5QixVQUFVaEMsT0FFakIsY0FETzhELEtBQUtvdEIsV0FBVyxJQUFNRCxHQUN0Qm50QixLQUtULElBQUssSUFBSXZHLEVBQUksRUFBR0EsRUFBSTZ6QixFQUFVcHhCLE9BQVF6QyxJQUVwQyxJQURBeVUsRUFBS29mLEVBQVU3ekIsTUFDSndLLEdBQU1pSyxFQUFHakssS0FBT0EsRUFBSSxDQUM3QnFwQixFQUFVbnVCLE9BQU8xRixFQUFHLEdBQ3BCLE1BR0osT0FBT3VHLE1BV1Rtb0IsRUFBUTlzQixVQUFVOGEsS0FBTyxTQUFTZ1gsR0FDaENudEIsS0FBS290QixXQUFhcHRCLEtBQUtvdEIsWUFBYyxHQUNyQyxJQUFJNWhCLEVBQU8sR0FBRzdNLE1BQU0vRSxLQUFLc0UsVUFBVyxHQUNoQ292QixFQUFZdHRCLEtBQUtvdEIsV0FBVyxJQUFNRCxHQUV0QyxHQUFJRyxFQUVGLElBQUssSUFBSTd6QixFQUFJLEVBQUc4WCxHQURoQitiLEVBQVlBLEVBQVUzdUIsTUFBTSxJQUNJekMsT0FBUXpDLEVBQUk4WCxJQUFPOVgsRUFDakQ2ekIsRUFBVTd6QixHQUFHK0gsTUFBTXhCLEtBQU13TCxHQUk3QixPQUFPeEwsTUFXVG1vQixFQUFROXNCLFVBQVVrRSxVQUFZLFNBQVM0dEIsR0FFckMsT0FEQW50QixLQUFLb3RCLFdBQWFwdEIsS0FBS290QixZQUFjLEdBQzlCcHRCLEtBQUtvdEIsV0FBVyxJQUFNRCxJQUFVLElBV3pDaEYsRUFBUTlzQixVQUFVa3lCLGFBQWUsU0FBU0osR0FDeEMsUUFBVW50QixLQUFLVCxVQUFVNHRCLEdBQU9qeEIsUyw2QkMvSmxDL0IsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQzNDbUIsT0FBTyxJQUVUbkIsRUFBUW9yQixRQW1CUixTQUFzQjZJLEVBQU9DLEdBRTNCLE9BQU9ELEVBQU14ckIsUUFBTyxTQUFVMHJCLEdBQzVCLFFBQVEsRUFBSUMsRUFBa0JoSixTQUFTK0ksTUFDdENycUIsS0FBSSxTQUFVcXFCLEVBQU16dUIsR0FHckIsSUFBSTJ1QixPQUFjLEVBQ2xCLE1BQXlCLG1CQUFkSCxHQUVXLFFBRHBCRyxFQUFjSCxFQUFVQyxFQUFNenVCLE1BQ0EydUIsR0FNekIsRUFBSUMsRUFBdUJsSixTQUFTK0ksRUFBTXp1QixFQUFPd3VCLEdBTDdDRyxNQTVCZixJQUVJRCxFQUFvQjNGLEVBRkQsRUFBUSxNQU0zQjZGLEVBQXlCN0YsRUFGRCxFQUFRLEtBSXBDLFNBQVNBLEVBQXVCdnNCLEdBQU8sT0FBT0EsR0FBT0EsRUFBSVosV0FBYVksRUFBTSxDQUFFa3BCLFFBQVNscEIsSyw4QkNmdkYsa0JBR0lxeUIsRUFISixRQU1FQSxFQURrQixvQkFBVHR4QixLQUNGQSxLQUNvQixvQkFBWDhJLE9BQ1RBLFlBQ29CLElBQVhzVyxFQUNUQSxFQUVBcGlCLEVBS1QsSUFBSWlNLEVBQVMsWUFBU3FvQixHQUNQLFEseUNDWmZ0MEIsRUFBT0QsUUFOUCxTQUF3QnNELEVBQVVDLEdBQ2hDRCxFQUFTeEIsVUFBWWxCLE9BQU9ZLE9BQU8rQixFQUFXekIsV0FDOUN3QixFQUFTeEIsVUFBVTBCLFlBQWNGLEVBQ2pDQSxFQUFTRCxVQUFZRSxJLGdCQ0h2QixJQUFJaXhCLEVBQVUsRUFBUSxLQUt0QnYwQixFQUFPRCxRQUFVeTBCLEVBQ2pCeDBCLEVBQU9ELFFBQVEwd0IsTUFBUUEsRUFDdkJ6d0IsRUFBT0QsUUFBUTAwQixRQXNHZixTQUFrQmxvQixFQUFLdUMsR0FDckIsT0FBTzRsQixFQUFpQmpFLEVBQU1sa0IsRUFBS3VDLEtBdEdyQzlPLEVBQU9ELFFBQVEyMEIsaUJBQW1CQSxFQUNsQzEwQixFQUFPRCxRQUFRNDBCLGVBQWlCQSxFQU9oQyxJQUFJQyxFQUFjLElBQUloSSxPQUFPLENBRzNCLFVBT0EsMEdBQ0E5b0IsS0FBSyxLQUFNLEtBU2IsU0FBUzJzQixFQUFPbGtCLEVBQUt1QyxHQVFuQixJQVBBLElBS0l3UyxFQUxBdVQsRUFBUyxHQUNUcnpCLEVBQU0sRUFDTmlFLEVBQVEsRUFDUmlzQixFQUFPLEdBQ1BvRCxFQUFtQmhtQixHQUFXQSxFQUFRaW1CLFdBQWEsSUFHZixPQUFoQ3pULEVBQU1zVCxFQUFZSSxLQUFLem9CLEtBQWUsQ0FDNUMsSUFBSWxNLEVBQUlpaEIsRUFBSSxHQUNSMlQsRUFBVTNULEVBQUksR0FDZGxCLEVBQVNrQixFQUFJN2IsTUFLakIsR0FKQWlzQixHQUFRbmxCLEVBQUlwSCxNQUFNTSxFQUFPMmEsR0FDekIzYSxFQUFRMmEsRUFBUy9mLEVBQUVxQyxPQUdmdXlCLEVBQ0Z2RCxHQUFRdUQsRUFBUSxPQURsQixDQUtBLElBQUkzdUIsRUFBT2lHLEVBQUk5RyxHQUNYeXZCLEVBQVM1VCxFQUFJLEdBQ2I5Z0IsRUFBTzhnQixFQUFJLEdBQ1g2VCxFQUFVN1QsRUFBSSxHQUNkOFQsRUFBUTlULEVBQUksR0FDWitULEVBQVcvVCxFQUFJLEdBQ2ZnVSxFQUFXaFUsRUFBSSxHQUdmb1EsSUFDRm1ELEVBQU9ydkIsS0FBS2tzQixHQUNaQSxFQUFPLElBR1QsSUFBSTZELEVBQW9CLE1BQVZMLEdBQTBCLE1BQVI1dUIsR0FBZ0JBLElBQVM0dUIsRUFDckRNLEVBQXNCLE1BQWJILEdBQWlDLE1BQWJBLEVBQzdCSSxFQUF3QixNQUFiSixHQUFpQyxNQUFiQSxFQUMvQk4sRUFBWXpULEVBQUksSUFBTXdULEVBQ3RCWSxFQUFVUCxHQUFXQyxFQUV6QlAsRUFBT3J2QixLQUFLLENBQ1ZoRixLQUFNQSxHQUFRZ0IsSUFDZDB6QixPQUFRQSxHQUFVLEdBQ2xCSCxVQUFXQSxFQUNYVSxTQUFVQSxFQUNWRCxPQUFRQSxFQUNSRCxRQUFTQSxFQUNURCxXQUFZQSxFQUNaSSxRQUFTQSxFQUFVQyxFQUFZRCxHQUFZSixFQUFXLEtBQU8sS0FBT00sRUFBYWIsR0FBYSxTQWNsRyxPQVRJdHZCLEVBQVE4RyxFQUFJN0osU0FDZGd2QixHQUFRbmxCLEVBQUlzSyxPQUFPcFIsSUFJakJpc0IsR0FDRm1ELEVBQU9ydkIsS0FBS2tzQixHQUdQbUQsRUFvQlQsU0FBU2dCLEVBQTBCdHBCLEdBQ2pDLE9BQU91cEIsVUFBVXZwQixHQUFLQyxRQUFRLFdBQVcsU0FBVWxNLEdBQ2pELE1BQU8sSUFBTUEsRUFBRThYLFdBQVcsR0FBR3pVLFNBQVMsSUFBSW95QixpQkFtQjlDLFNBQVNyQixFQUFrQkcsR0FLekIsSUFIQSxJQUFJbUIsRUFBVSxJQUFJOXNCLE1BQU0yckIsRUFBT255QixRQUd0QnpDLEVBQUksRUFBR0EsRUFBSTQwQixFQUFPbnlCLE9BQVF6QyxJQUNSLGlCQUFkNDBCLEVBQU81MEIsS0FDaEIrMUIsRUFBUS8xQixHQUFLLElBQUkyc0IsT0FBTyxPQUFTaUksRUFBTzUwQixHQUFHeTFCLFFBQVUsT0FJekQsT0FBTyxTQUFVenpCLEVBQUtpdkIsR0FNcEIsSUFMQSxJQUFJUSxFQUFPLEdBQ1Boa0IsRUFBT3pMLEdBQU8sR0FFZCtULEdBRFVrYixHQUFRLElBQ0QrRSxPQUFTSixFQUEyQnRvQixtQkFFaER0TixFQUFJLEVBQUdBLEVBQUk0MEIsRUFBT255QixPQUFRekMsSUFBSyxDQUN0QyxJQUFJaTJCLEVBQVFyQixFQUFPNTBCLEdBRW5CLEdBQXFCLGlCQUFWaTJCLEVBQVgsQ0FNQSxJQUNJQyxFQURBajFCLEVBQVF3TSxFQUFLd29CLEVBQU0xMUIsTUFHdkIsR0FBYSxNQUFUVSxFQUFlLENBQ2pCLEdBQUlnMUIsRUFBTVQsU0FBVSxDQUVkUyxFQUFNWCxVQUNSN0QsR0FBUXdFLEVBQU1oQixRQUdoQixTQUVBLE1BQU0sSUFBSTV5QixVQUFVLGFBQWU0ekIsRUFBTTExQixLQUFPLG1CQUlwRCxHQUFJK3pCLEVBQVFyekIsR0FBWixDQUNFLElBQUtnMUIsRUFBTVYsT0FDVCxNQUFNLElBQUlsekIsVUFBVSxhQUFlNHpCLEVBQU0xMUIsS0FBTyxrQ0FBb0NnTixLQUFLQyxVQUFVdk0sR0FBUyxLQUc5RyxHQUFxQixJQUFqQkEsRUFBTXdCLE9BQWMsQ0FDdEIsR0FBSXd6QixFQUFNVCxTQUNSLFNBRUEsTUFBTSxJQUFJbnpCLFVBQVUsYUFBZTR6QixFQUFNMTFCLEtBQU8scUJBSXBELElBQUssSUFBSWlQLEVBQUksRUFBR0EsRUFBSXZPLEVBQU13QixPQUFRK00sSUFBSyxDQUdyQyxHQUZBMG1CLEVBQVVuZ0IsRUFBTzlVLEVBQU11TyxLQUVsQnVtQixFQUFRLzFCLEdBQUdzVCxLQUFLNGlCLEdBQ25CLE1BQU0sSUFBSTd6QixVQUFVLGlCQUFtQjR6QixFQUFNMTFCLEtBQU8sZUFBaUIwMUIsRUFBTVIsUUFBVSxvQkFBc0Jsb0IsS0FBS0MsVUFBVTBvQixHQUFXLEtBR3ZJekUsSUFBZSxJQUFOamlCLEVBQVV5bUIsRUFBTWhCLE9BQVNnQixFQUFNbkIsV0FBYW9CLE9BcEJ6RCxDQTRCQSxHQUZBQSxFQUFVRCxFQUFNWixTQTVFYlEsVUE0RXVDNTBCLEdBNUV4QnNMLFFBQVEsU0FBUyxTQUFVbE0sR0FDL0MsTUFBTyxJQUFNQSxFQUFFOFgsV0FBVyxHQUFHelUsU0FBUyxJQUFJb3lCLGlCQTJFVy9mLEVBQU85VSxJQUVyRDgwQixFQUFRLzFCLEdBQUdzVCxLQUFLNGlCLEdBQ25CLE1BQU0sSUFBSTd6QixVQUFVLGFBQWU0ekIsRUFBTTExQixLQUFPLGVBQWlCMDFCLEVBQU1SLFFBQVUsb0JBQXNCUyxFQUFVLEtBR25IekUsR0FBUXdFLEVBQU1oQixPQUFTaUIsUUFyRHJCekUsR0FBUXdFLEVBd0RaLE9BQU94RSxHQVVYLFNBQVNrRSxFQUFjcnBCLEdBQ3JCLE9BQU9BLEVBQUlDLFFBQVEsNkJBQThCLFFBU25ELFNBQVNtcEIsRUFBYVAsR0FDcEIsT0FBT0EsRUFBTTVvQixRQUFRLGdCQUFpQixRQVV4QyxTQUFTNHBCLEVBQVlDLEVBQUl0dkIsR0FFdkIsT0FEQXN2QixFQUFHdHZCLEtBQU9BLEVBQ0hzdkIsRUFTVCxTQUFTQyxFQUFPeG5CLEdBQ2QsT0FBT0EsRUFBUXluQixVQUFZLEdBQUssSUF3RWxDLFNBQVM1QixFQUFnQkUsRUFBUTl0QixFQUFNK0gsR0FDaEN5bEIsRUFBUXh0QixLQUNYK0gsRUFBa0MvSCxHQUFRK0gsRUFDMUMvSCxFQUFPLElBVVQsSUFMQSxJQUFJa1AsR0FGSm5ILEVBQVVBLEdBQVcsSUFFQW1ILE9BQ2pCdUQsR0FBc0IsSUFBaEIxSyxFQUFRMEssSUFDZGdkLEVBQVEsR0FHSHYyQixFQUFJLEVBQUdBLEVBQUk0MEIsRUFBT255QixPQUFRekMsSUFBSyxDQUN0QyxJQUFJaTJCLEVBQVFyQixFQUFPNTBCLEdBRW5CLEdBQXFCLGlCQUFWaTJCLEVBQ1RNLEdBQVNaLEVBQWFNLE9BQ2pCLENBQ0wsSUFBSWhCLEVBQVNVLEVBQWFNLEVBQU1oQixRQUM1QkMsRUFBVSxNQUFRZSxFQUFNUixRQUFVLElBRXRDM3VCLEVBQUt2QixLQUFLMHdCLEdBRU5BLEVBQU1WLFNBQ1JMLEdBQVcsTUFBUUQsRUFBU0MsRUFBVSxNQWF4Q3FCLEdBTklyQixFQUpBZSxFQUFNVCxTQUNIUyxFQUFNWCxRQUdDTCxFQUFTLElBQU1DLEVBQVUsS0FGekIsTUFBUUQsRUFBUyxJQUFNQyxFQUFVLE1BS25DRCxFQUFTLElBQU1DLEVBQVUsS0FPekMsSUFBSUosRUFBWWEsRUFBYTltQixFQUFRaW1CLFdBQWEsS0FDOUMwQixFQUFvQkQsRUFBTXJ4QixPQUFPNHZCLEVBQVVyeUIsVUFBWXF5QixFQWtCM0QsT0FaSzllLElBQ0h1Z0IsR0FBU0MsRUFBb0JELEVBQU1yeEIsTUFBTSxHQUFJNHZCLEVBQVVyeUIsUUFBVTh6QixHQUFTLE1BQVF6QixFQUFZLFdBSTlGeUIsR0FERWhkLEVBQ08sSUFJQXZELEdBQVV3Z0IsRUFBb0IsR0FBSyxNQUFRMUIsRUFBWSxNQUczRHFCLEVBQVcsSUFBSXhKLE9BQU8sSUFBTTRKLEVBQU9GLEVBQU14bkIsSUFBVy9ILEdBZTdELFNBQVN5dEIsRUFBYzlDLEVBQU0zcUIsRUFBTStILEdBUWpDLE9BUEt5bEIsRUFBUXh0QixLQUNYK0gsRUFBa0MvSCxHQUFRK0gsRUFDMUMvSCxFQUFPLElBR1QrSCxFQUFVQSxHQUFXLEdBRWpCNGlCLGFBQWdCOUUsT0FsSnRCLFNBQXlCOEUsRUFBTTNxQixHQUU3QixJQUFJMnZCLEVBQVNoRixFQUFLOW9CLE9BQU80YSxNQUFNLGFBRS9CLEdBQUlrVCxFQUNGLElBQUssSUFBSXoyQixFQUFJLEVBQUdBLEVBQUl5MkIsRUFBT2gwQixPQUFRekMsSUFDakM4RyxFQUFLdkIsS0FBSyxDQUNSaEYsS0FBTVAsRUFDTmkxQixPQUFRLEtBQ1JILFVBQVcsS0FDWFUsVUFBVSxFQUNWRCxRQUFRLEVBQ1JELFNBQVMsRUFDVEQsVUFBVSxFQUNWSSxRQUFTLE9BS2YsT0FBT1UsRUFBVzFFLEVBQU0zcUIsR0FnSWY0dkIsQ0FBZWpGLEVBQTRCLEdBR2hENkMsRUFBUTdDLEdBeEhkLFNBQXdCQSxFQUFNM3FCLEVBQU0rSCxHQUdsQyxJQUZBLElBQUlRLEVBQVEsR0FFSHJQLEVBQUksRUFBR0EsRUFBSXl4QixFQUFLaHZCLE9BQVF6QyxJQUMvQnFQLEVBQU05SixLQUFLZ3ZCLEVBQWE5QyxFQUFLenhCLEdBQUk4RyxFQUFNK0gsR0FBU2xHLFFBS2xELE9BQU93dEIsRUFGTSxJQUFJeEosT0FBTyxNQUFRdGQsRUFBTXhMLEtBQUssS0FBTyxJQUFLd3lCLEVBQU14bkIsSUFFbkMvSCxHQWdIakI2dkIsQ0FBb0MsRUFBOEIsRUFBUTluQixHQXJHckYsU0FBeUI0aUIsRUFBTTNxQixFQUFNK0gsR0FDbkMsT0FBTzZsQixFQUFlbEUsRUFBTWlCLEVBQU01aUIsR0FBVS9ILEVBQU0rSCxHQXVHM0MrbkIsQ0FBcUMsRUFBOEIsRUFBUS9uQixLOzs7OztFQ2hhcEYsSUFBSXZHLEVBQXdCNUgsT0FBTzRILHNCQUMvQnpHLEVBQWlCbkIsT0FBT2tCLFVBQVVDLGVBQ2xDZzFCLEVBQW1CbjJCLE9BQU9rQixVQUFVazFCLHFCQUV4QyxTQUFTQyxFQUFTMXNCLEdBQ2pCLEdBQUlBLFFBQ0gsTUFBTSxJQUFJaEksVUFBVSx5REFHckIsT0FBTzNCLE9BQU8ySixHQStDZnRLLEVBQU9ELFFBNUNQLFdBQ0MsSUFDQyxJQUFLWSxPQUFPczJCLE9BQ1gsT0FBTyxFQU1SLElBQUlDLEVBQVEsSUFBSXZ3QixPQUFPLE9BRXZCLEdBREF1d0IsRUFBTSxHQUFLLEtBQ2tDLE1BQXpDdjJCLE9BQU8wcEIsb0JBQW9CNk0sR0FBTyxHQUNyQyxPQUFPLEVBS1IsSUFEQSxJQUFJQyxFQUFRLEdBQ0hsM0IsRUFBSSxFQUFHQSxFQUFJLEdBQUlBLElBQ3ZCazNCLEVBQU0sSUFBTXh3QixPQUFPMFAsYUFBYXBXLElBQU1BLEVBS3ZDLEdBQXdCLGVBSFhVLE9BQU8wcEIsb0JBQW9COE0sR0FBT3R0QixLQUFJLFNBQVVuSSxHQUM1RCxPQUFPeTFCLEVBQU16MUIsTUFFSG9DLEtBQUssSUFDZixPQUFPLEVBSVIsSUFBSXN6QixFQUFRLEdBSVosTUFIQSx1QkFBdUJ2ekIsTUFBTSxJQUFJc0QsU0FBUSxTQUFVa3dCLEdBQ2xERCxFQUFNQyxHQUFVQSxLQUdmLHlCQURFMTJCLE9BQU9vRyxLQUFLcEcsT0FBT3MyQixPQUFPLEdBQUlHLElBQVF0ekIsS0FBSyxJQU05QyxNQUFPK08sR0FFUixPQUFPLEdBSVF5a0IsR0FBb0IzMkIsT0FBT3MyQixPQUFTLFNBQVV6MEIsRUFBUW9HLEdBS3RFLElBSkEsSUFBSWdWLEVBRUEyWixFQURBQyxFQUFLUixFQUFTeDBCLEdBR1RSLEVBQUksRUFBR0EsRUFBSTBDLFVBQVVoQyxPQUFRVixJQUFLLENBRzFDLElBQUssSUFBSVIsS0FGVG9jLEVBQU9qZCxPQUFPK0QsVUFBVTFDLElBR25CRixFQUFlMUIsS0FBS3dkLEVBQU1wYyxLQUM3QmcyQixFQUFHaDJCLEdBQU9vYyxFQUFLcGMsSUFJakIsR0FBSStHLEVBQXVCLENBQzFCZ3ZCLEVBQVVodkIsRUFBc0JxVixHQUNoQyxJQUFLLElBQUkzZCxFQUFJLEVBQUdBLEVBQUlzM0IsRUFBUTcwQixPQUFRekMsSUFDL0I2MkIsRUFBaUIxMkIsS0FBS3dkLEVBQU0yWixFQUFRdDNCLE1BQ3ZDdTNCLEVBQUdELEVBQVF0M0IsSUFBTTJkLEVBQUsyWixFQUFRdDNCLE1BTWxDLE9BQU91M0IsSSw2QkN0RlJ4M0IsRUFBT0QsUUFBVSxTQUFjMEssRUFBSTRCLEdBQ2pDLE9BQU8sV0FFTCxJQURBLElBQUkyRixFQUFPLElBQUk5SSxNQUFNeEUsVUFBVWhDLFFBQ3RCekMsRUFBSSxFQUFHQSxFQUFJK1IsRUFBS3RQLE9BQVF6QyxJQUMvQitSLEVBQUsvUixHQUFLeUUsVUFBVXpFLEdBRXRCLE9BQU93SyxFQUFHekMsTUFBTXFFLEVBQVMyRixNLDZCQ043QixJQUFJeWxCLEVBQVEsRUFBUSxJQUVwQixTQUFTemhCLEVBQU8xTCxHQUNkLE9BQU9pRCxtQkFBbUJqRCxHQUN4QmtDLFFBQVEsUUFBUyxLQUNqQkEsUUFBUSxRQUFTLEtBQ2pCQSxRQUFRLE9BQVEsS0FDaEJBLFFBQVEsUUFBUyxLQUNqQkEsUUFBUSxPQUFRLEtBQ2hCQSxRQUFRLFFBQVMsS0FDakJBLFFBQVEsUUFBUyxLQVVyQnhNLEVBQU9ELFFBQVUsU0FBa0IyM0IsRUFBS0MsRUFBUUMsR0FFOUMsSUFBS0QsRUFDSCxPQUFPRCxFQUdULElBQUlHLEVBQ0osR0FBSUQsRUFDRkMsRUFBbUJELEVBQWlCRCxRQUMvQixHQUFJRixFQUFNaHNCLGtCQUFrQmtzQixHQUNqQ0UsRUFBbUJGLEVBQU9oMEIsZUFDckIsQ0FDTCxJQUFJMkwsRUFBUSxHQUVabW9CLEVBQU10d0IsUUFBUXd3QixHQUFRLFNBQW1CcnRCLEVBQUs5SSxHQUN4QzhJLFVBSUFtdEIsRUFBTXB0QixRQUFRQyxHQUNoQjlJLEdBQVksS0FFWjhJLEVBQU0sQ0FBQ0EsR0FHVG10QixFQUFNdHdCLFFBQVFtRCxHQUFLLFNBQW9CNGlCLEdBQ2pDdUssRUFBTXJzQixPQUFPOGhCLEdBQ2ZBLEVBQUlBLEVBQUU0SyxjQUNHTCxFQUFNbHRCLFNBQVMyaUIsS0FDeEJBLEVBQUkxZixLQUFLQyxVQUFVeWYsSUFFckI1ZCxFQUFNOUosS0FBS3dRLEVBQU94VSxHQUFPLElBQU13VSxFQUFPa1gsV0FJMUMySyxFQUFtQnZvQixFQUFNeEwsS0FBSyxLQUdoQyxHQUFJK3pCLEVBQWtCLENBQ3BCLElBQUlFLEVBQWdCTCxFQUFJaHlCLFFBQVEsTUFDVCxJQUFuQnF5QixJQUNGTCxFQUFNQSxFQUFJdnlCLE1BQU0sRUFBRzR5QixJQUdyQkwsS0FBOEIsSUFBdEJBLEVBQUloeUIsUUFBUSxLQUFjLElBQU0sS0FBT215QixFQUdqRCxPQUFPSCxJLDZCQ25FVDEzQixFQUFPRCxRQUFVLFNBQWtCbUIsR0FDakMsU0FBVUEsSUFBU0EsRUFBTTgyQixjLDhCQ0gzQixZQUVBLElBQUlQLEVBQVEsRUFBUSxJQUNoQlEsRUFBc0IsRUFBUSxLQUU5QkMsRUFBdUIsQ0FDekIsZUFBZ0IscUNBR2xCLFNBQVNDLEVBQXNCQyxFQUFTbDNCLElBQ2pDdTJCLEVBQU10c0IsWUFBWWl0QixJQUFZWCxFQUFNdHNCLFlBQVlpdEIsRUFBUSxtQkFDM0RBLEVBQVEsZ0JBQWtCbDNCLEdBaUI5QixJQVpNbTNCLEVBWUZDLEVBQVcsQ0FDYkQsY0FYdUIsSUFBWjFkLEdBQXVFLHFCQUE1Q2hhLE9BQU9rQixVQUFVOEIsU0FBU3ZELEtBQUt1YSxHQUVuRTBkLEVBQVUsRUFBUSxJQUNpQixvQkFBbkIvRyxpQkFFaEIrRyxFQUFVLEVBQVEsS0FFYkEsR0FNUEUsaUJBQWtCLENBQUMsU0FBMEI3cUIsRUFBTTBxQixHQUdqRCxPQUZBSCxFQUFvQkcsRUFBUyxVQUM3QkgsRUFBb0JHLEVBQVMsZ0JBQ3pCWCxFQUFNOXNCLFdBQVcrQyxJQUNuQitwQixFQUFNL3NCLGNBQWNnRCxJQUNwQitwQixFQUFNcnRCLFNBQVNzRCxJQUNmK3BCLEVBQU1sc0IsU0FBU21DLElBQ2YrcEIsRUFBTXBzQixPQUFPcUMsSUFDYitwQixFQUFNbnNCLE9BQU9vQyxHQUVOQSxFQUVMK3BCLEVBQU01c0Isa0JBQWtCNkMsR0FDbkJBLEVBQUsxQyxPQUVWeXNCLEVBQU1oc0Isa0JBQWtCaUMsSUFDMUJ5cUIsRUFBc0JDLEVBQVMsbURBQ3hCMXFCLEVBQUsvSixZQUVWOHpCLEVBQU1sdEIsU0FBU21ELElBQ2pCeXFCLEVBQXNCQyxFQUFTLGtDQUN4QjVxQixLQUFLQyxVQUFVQyxJQUVqQkEsSUFHVDhxQixrQkFBbUIsQ0FBQyxTQUEyQjlxQixHQUU3QyxHQUFvQixpQkFBVEEsRUFDVCxJQUNFQSxFQUFPRixLQUFLaWpCLE1BQU0vaUIsR0FDbEIsTUFBT3JHLElBRVgsT0FBT3FHLElBT1Q4TixRQUFTLEVBRVRpZCxlQUFnQixhQUNoQkMsZUFBZ0IsZUFFaEJDLGtCQUFtQixFQUVuQkMsZUFBZ0IsU0FBd0JDLEdBQ3RDLE9BQU9BLEdBQVUsS0FBT0EsRUFBUyxNQUlyQ1AsRUFBU0YsUUFBVSxDQUNqQlUsT0FBUSxDQUNOLE9BQVUsc0NBSWRyQixFQUFNdHdCLFFBQVEsQ0FBQyxTQUFVLE1BQU8sU0FBUyxTQUE2QjR4QixHQUNwRVQsRUFBU0YsUUFBUVcsR0FBVSxNQUc3QnRCLEVBQU10d0IsUUFBUSxDQUFDLE9BQVEsTUFBTyxVQUFVLFNBQStCNHhCLEdBQ3JFVCxFQUFTRixRQUFRVyxHQUFVdEIsRUFBTXpyQixNQUFNa3NCLE1BR3pDbDRCLEVBQU9ELFFBQVV1NEIsSSwrQ0MvRmpCLElBQUliLEVBQVEsRUFBUSxJQUNoQnVCLEVBQVMsRUFBUSxLQUNqQkMsRUFBVyxFQUFRLElBQ25CQyxFQUFlLEVBQVEsS0FDdkJDLEVBQWtCLEVBQVEsS0FDMUJDLEVBQWMsRUFBUSxJQUUxQnA1QixFQUFPRCxRQUFVLFNBQW9CczVCLEdBQ25DLE9BQU8sSUFBSTFtQixTQUFRLFNBQTRCTixFQUFTQyxHQUN0RCxJQUFJZ25CLEVBQWNELEVBQU8zckIsS0FDckI2ckIsRUFBaUJGLEVBQU9qQixRQUV4QlgsRUFBTTlzQixXQUFXMnVCLFdBQ1pDLEVBQWUsZ0JBR3hCLElBQUlDLEVBQVUsSUFBSWxJLGVBR2xCLEdBQUkrSCxFQUFPSSxLQUFNLENBQ2YsSUFBSUMsRUFBV0wsRUFBT0ksS0FBS0MsVUFBWSxHQUNuQ0MsRUFBV04sRUFBT0ksS0FBS0UsVUFBWSxHQUN2Q0osRUFBZUssY0FBZ0IsU0FBVzFzQixLQUFLd3NCLEVBQVcsSUFBTUMsR0EwRWxFLEdBdkVBSCxFQUFRM2xCLEtBQUt3bEIsRUFBT04sT0FBT2hELGNBQWVrRCxFQUFTSSxFQUFPM0IsSUFBSzJCLEVBQU8xQixPQUFRMEIsRUFBT3pCLG1CQUFtQixHQUd4RzRCLEVBQVFoZSxRQUFVNmQsRUFBTzdkLFFBR3pCZ2UsRUFBUUssbUJBQXFCLFdBQzNCLEdBQUtMLEdBQWtDLElBQXZCQSxFQUFRdkgsYUFRRCxJQUFuQnVILEVBQVFYLFFBQWtCVyxFQUFRTSxhQUF3RCxJQUF6Q04sRUFBUU0sWUFBWXAwQixRQUFRLFVBQWpGLENBS0EsSUFBSXEwQixFQUFrQiwwQkFBMkJQLEVBQVVOLEVBQWFNLEVBQVFRLHlCQUEyQixLQUV2R0MsRUFBVyxDQUNidnNCLEtBRmtCMnJCLEVBQU9hLGNBQXdDLFNBQXhCYixFQUFPYSxhQUFpRFYsRUFBUVMsU0FBL0JULEVBQVFXLGFBR2xGdEIsT0FBUVcsRUFBUVgsT0FDaEJ1QixXQUFZWixFQUFRWSxXQUNwQmhDLFFBQVMyQixFQUNUVixPQUFRQSxFQUNSRyxRQUFTQSxHQUdYUixFQUFPM21CLEVBQVNDLEVBQVEybkIsR0FHeEJULEVBQVUsT0FJWkEsRUFBUWEsUUFBVSxXQUNYYixJQUlMbG5CLEVBQU84bUIsRUFBWSxrQkFBbUJDLEVBQVEsZUFBZ0JHLElBRzlEQSxFQUFVLE9BSVpBLEVBQVFjLFFBQVUsV0FHaEJob0IsRUFBTzhtQixFQUFZLGdCQUFpQkMsRUFBUSxLQUFNRyxJQUdsREEsRUFBVSxNQUlaQSxFQUFRZSxVQUFZLFdBQ2xCam9CLEVBQU84bUIsRUFBWSxjQUFnQkMsRUFBTzdkLFFBQVUsY0FBZTZkLEVBQVEsZUFDekVHLElBR0ZBLEVBQVUsTUFNUi9CLEVBQU05ckIsdUJBQXdCLENBQ2hDLElBQUk2dUIsRUFBVSxFQUFRLEtBR2xCQyxHQUFhcEIsRUFBT2pILGlCQUFtQitHLEVBQWdCRSxFQUFPM0IsT0FBUzJCLEVBQU9aLGVBQ2hGK0IsRUFBUTFhLEtBQUt1WixFQUFPWixxQkFDcEI3ekIsRUFFRTYxQixJQUNGbEIsRUFBZUYsRUFBT1gsZ0JBQWtCK0IsR0F1QjVDLEdBbEJJLHFCQUFzQmpCLEdBQ3hCL0IsRUFBTXR3QixRQUFRb3lCLEdBQWdCLFNBQTBCanZCLEVBQUs5SSxRQUNoQyxJQUFoQjgzQixHQUFxRCxpQkFBdEI5M0IsRUFBSXFkLHFCQUVyQzBhLEVBQWUvM0IsR0FHdEJnNEIsRUFBUWtCLGlCQUFpQmw1QixFQUFLOEksTUFNaEMrdUIsRUFBT2pILGtCQUNUb0gsRUFBUXBILGlCQUFrQixHQUl4QmlILEVBQU9hLGFBQ1QsSUFDRVYsRUFBUVUsYUFBZWIsRUFBT2EsYUFDOUIsTUFBTzd5QixHQUdQLEdBQTRCLFNBQXhCZ3lCLEVBQU9hLGFBQ1QsTUFBTTd5QixFQU02QixtQkFBOUJneUIsRUFBT3NCLG9CQUNoQm5CLEVBQVE5RixpQkFBaUIsV0FBWTJGLEVBQU9zQixvQkFJUCxtQkFBNUJ0QixFQUFPdUIsa0JBQW1DcEIsRUFBUXFCLFFBQzNEckIsRUFBUXFCLE9BQU9uSCxpQkFBaUIsV0FBWTJGLEVBQU91QixrQkFHakR2QixFQUFPeUIsYUFFVHpCLEVBQU95QixZQUFZQyxRQUFRbm9CLE1BQUssU0FBb0Jvb0IsR0FDN0N4QixJQUlMQSxFQUFReUIsUUFDUjNvQixFQUFPMG9CLEdBRVB4QixFQUFVLGNBSU01MEIsSUFBaEIwMEIsSUFDRkEsRUFBYyxNQUloQkUsRUFBUW5HLEtBQUtpRyxRLDZCQ3pLakIsSUFBSTRCLEVBQWUsRUFBUSxLQVkzQmw3QixFQUFPRCxRQUFVLFNBQXFCa1UsRUFBU29sQixFQUFRMVIsRUFBTTZSLEVBQVNTLEdBQ3BFLElBQUlsb0IsRUFBUSxJQUFJcE4sTUFBTXNQLEdBQ3RCLE9BQU9pbkIsRUFBYW5wQixFQUFPc25CLEVBQVExUixFQUFNNlIsRUFBU1MsSyw2QkNkcEQsSUFBSXhDLEVBQVEsRUFBUSxJQVVwQnozQixFQUFPRCxRQUFVLFNBQXFCbzdCLEVBQVNDLEdBRTdDQSxFQUFVQSxHQUFXLEdBQ3JCLElBQUkvQixFQUFTLEdBa0NiLE9BaENBNUIsRUFBTXR3QixRQUFRLENBQUMsTUFBTyxTQUFVLFNBQVUsU0FBUyxTQUEwQmswQixRQUM5QyxJQUFsQkQsRUFBUUMsS0FDakJoQyxFQUFPZ0MsR0FBUUQsRUFBUUMsT0FJM0I1RCxFQUFNdHdCLFFBQVEsQ0FBQyxVQUFXLE9BQVEsVUFBVSxTQUE2QmswQixHQUNuRTVELEVBQU1sdEIsU0FBUzZ3QixFQUFRQyxJQUN6QmhDLEVBQU9nQyxHQUFRNUQsRUFBTXRyQixVQUFVZ3ZCLEVBQVFFLEdBQU9ELEVBQVFDLFNBQ3BCLElBQWxCRCxFQUFRQyxHQUN4QmhDLEVBQU9nQyxHQUFRRCxFQUFRQyxHQUNkNUQsRUFBTWx0QixTQUFTNHdCLEVBQVFFLElBQ2hDaEMsRUFBT2dDLEdBQVE1RCxFQUFNdHJCLFVBQVVndkIsRUFBUUUsU0FDTCxJQUFsQkYsRUFBUUUsS0FDeEJoQyxFQUFPZ0MsR0FBUUYsRUFBUUUsT0FJM0I1RCxFQUFNdHdCLFFBQVEsQ0FDWixVQUFXLG1CQUFvQixvQkFBcUIsbUJBQ3BELFVBQVcsa0JBQW1CLFVBQVcsZUFBZ0IsaUJBQ3pELGlCQUFrQixtQkFBb0IscUJBQXNCLG1CQUM1RCxpQkFBa0IsZUFBZ0IsWUFBYSxhQUFjLGNBQzdELGVBQ0MsU0FBMEJrMEIsUUFDRSxJQUFsQkQsRUFBUUMsR0FDakJoQyxFQUFPZ0MsR0FBUUQsRUFBUUMsUUFDVyxJQUFsQkYsRUFBUUUsS0FDeEJoQyxFQUFPZ0MsR0FBUUYsRUFBUUUsT0FJcEJoQyxJLDZCQ3pDVCxTQUFTaUMsRUFBT3JuQixHQUNkek4sS0FBS3lOLFFBQVVBLEVBR2pCcW5CLEVBQU96NUIsVUFBVThCLFNBQVcsV0FDMUIsTUFBTyxVQUFZNkMsS0FBS3lOLFFBQVUsS0FBT3pOLEtBQUt5TixRQUFVLEtBRzFEcW5CLEVBQU96NUIsVUFBVW0yQixZQUFhLEVBRTlCaDRCLEVBQU9ELFFBQVV1N0IsRyw2QkNoQmpCMzZCLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUMzQ21CLE9BQU8sSUFHVCxJQUFJcTZCLEVBQVc1NkIsT0FBT3MyQixRQUFVLFNBQVV6MEIsR0FBVSxJQUFLLElBQUl2QyxFQUFJLEVBQUdBLEVBQUl5RSxVQUFVaEMsT0FBUXpDLElBQUssQ0FBRSxJQUFJMkksRUFBU2xFLFVBQVV6RSxHQUFJLElBQUssSUFBSXVCLEtBQU9vSCxFQUFjakksT0FBT2tCLFVBQVVDLGVBQWUxQixLQUFLd0ksRUFBUXBILEtBQVFnQixFQUFPaEIsR0FBT29ILEVBQU9wSCxJQUFZLE9BQU9nQixHQUV2UHpDLEVBQVFtdUIsY0FpQlIsV0FDRSxJQUFJNW1CLEVBQVE1QyxVQUFVaEMsT0FBUyxRQUFzQmtDLElBQWpCRixVQUFVLEdBQW1CQSxVQUFVLEdBQUs4MkIsRUFFNUV0MUIsRUFBT3hCLFVBQVVoQyxPQUFTLFFBQXNCa0MsSUFBakJGLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxHQUMzRW9CLEVBQU9JLEVBQUtKLEtBQ1o4cEIsRUFBVTFwQixFQUFLMHBCLFFBRW5CLEdBQUk5cEIsSUFBU3FvQixFQUNYLE9BQU9vTixFQUFTLEdBQUlqMEIsRUFBTyxDQUFFbTBCLDBCQUEyQjdMLElBRzFELE9BQU90b0IsR0F2QlQsSUFBSTZtQixFQUFrQnB1QixFQUFRb3VCLGdCQUFrQiwyQkFFNUNxTixFQUFlLENBQ2pCQywwQkFBMkIsTyw2QkNkN0I5NkIsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQzNDbUIsT0FBTyxJQU9ULElBQUkrc0IsRUFBc0JsdUIsRUFBUWt1QixvQkFBc0IsK0JBRXhELFNBQVN5TixFQUFlM0MsR0FDdEIsT0FBTyxXQUNMLElBQUssSUFBSS92QixFQUFPdEUsVUFBVWhDLE9BQVFzUCxFQUFPOUksTUFBTUYsR0FBT3RCLEVBQU8sRUFBR0EsRUFBT3NCLEVBQU10QixJQUMzRXNLLEVBQUt0SyxHQUFRaEQsVUFBVWdELEdBR3pCLE1BQU8sQ0FDTDVCLEtBQU1tb0IsRUFDTjJCLFFBQVMsQ0FBRW1KLE9BQVFBLEVBQVEvbUIsS0FBTUEsS0FVdkMsSUFBSXhNLEVBQU96RixFQUFReUYsS0FBT2syQixFQUFlLFFBQ3JDbHZCLEVBQVV6TSxFQUFReU0sUUFBVWt2QixFQUFlLFdBQzNDMU4sRUFBS2p1QixFQUFRaXVCLEdBQUswTixFQUFlLE1BQ2pDM04sRUFBU2h1QixFQUFRZ3VCLE9BQVMyTixFQUFlLFVBQ3pDNU4sRUFBWS90QixFQUFRK3RCLFVBQVk0TixFQUFlLGFBRS9CMzdCLEVBQVE4dEIsY0FBZ0IsQ0FBRXJvQixLQUFNQSxFQUFNZ0gsUUFBU0EsRUFBU3doQixHQUFJQSxFQUFJRCxPQUFRQSxFQUFRRCxVQUFXQSxJLGNDN0IvRyxJQUFJdUksRUFBSywwT0FFTC9tQixFQUFRLENBQ1IsU0FBVSxXQUFZLFlBQWEsV0FBWSxPQUFRLFdBQVksT0FBUSxPQUFRLFdBQVksT0FBUSxZQUFhLE9BQVEsUUFBUyxVQUd6SXRQLEVBQU9ELFFBQVUsU0FBa0J3TSxHQUMvQixJQUFJMmIsRUFBTTNiLEVBQ05qRCxFQUFJaUQsRUFBSTdHLFFBQVEsS0FDaEIyQixFQUFJa0YsRUFBSTdHLFFBQVEsTUFFVixHQUFONEQsSUFBaUIsR0FBTmpDLElBQ1hrRixFQUFNQSxFQUFJM0ksVUFBVSxFQUFHMEYsR0FBS2lELEVBQUkzSSxVQUFVMEYsRUFBR2pDLEdBQUdtRixRQUFRLEtBQU0sS0FBT0QsRUFBSTNJLFVBQVV5RCxFQUFHa0YsRUFBSTdKLFNBTzlGLElBSkEsSUFBSXJDLEVBQUlnMkIsRUFBR3JCLEtBQUt6b0IsR0FBTyxJQUNuQm92QixFQUFNLEdBQ04xN0IsRUFBSSxHQUVEQSxLQUNIMDdCLEVBQUlyc0IsRUFBTXJQLElBQU1JLEVBQUVKLElBQU0sR0FVNUIsT0FQVSxHQUFOcUosSUFBaUIsR0FBTmpDLElBQ1hzMEIsRUFBSS95QixPQUFTc2YsRUFDYnlULEVBQUlDLEtBQU9ELEVBQUlDLEtBQUtoNEIsVUFBVSxFQUFHKzNCLEVBQUlDLEtBQUtsNUIsT0FBUyxHQUFHOEosUUFBUSxLQUFNLEtBQ3BFbXZCLEVBQUlFLFVBQVlGLEVBQUlFLFVBQVVydkIsUUFBUSxJQUFLLElBQUlBLFFBQVEsSUFBSyxJQUFJQSxRQUFRLEtBQU0sS0FDOUVtdkIsRUFBSUcsU0FBVSxHQUdYSCxJLGNDckNYLElBQUloNEIsRUFBVyxHQUFHQSxTQUVsQjNELEVBQU9ELFFBQVVtSixNQUFNbUIsU0FBVyxTQUFVdUMsR0FDMUMsTUFBNkIsa0JBQXRCakosRUFBU3ZELEtBQUt3TSxLLDZCQ0Z2QjVNLEVBQU9ELFFBZVAsU0FBZWtDLEdBQ2IsT0FBUTg1QixHQUFvQjFlLEVBQU9qVCxTQUFTbkksSUFDbkMrNUIsSUFBMEIvNUIsYUFBZTZJLGFBQWVDLEVBQU85SSxLQWYxRSxJQUFJODVCLEVBQXFDLG1CQUFYMWUsR0FBb0QsbUJBQXBCQSxFQUFPalQsU0FDakU0eEIsRUFBK0MsbUJBQWhCbHhCLFlBRS9CQyxFQUFTLFNBQVU5SSxHQUNyQixNQUFxQyxtQkFBdkI2SSxZQUFZQyxPQUF3QkQsWUFBWUMsT0FBTzlJLEdBQVFBLEVBQUkrSSxrQkFBa0JGLGUseUNDRnJHLElBQUlteEIsRUFBTSxFQUFRLEtBQ2RDLEVBQVMsRUFBUSxJQUNqQnZOLEVBQVUsRUFBUSxJQUNsQjZDLEVBQVMsRUFBUSxJQUNqQm5WLEVBQUssRUFBUSxJQUNiNWEsRUFBTyxFQUFRLElBQ2ZpdEIsRUFBUSxFQUFRLEdBQVIsQ0FBaUIsNEJBQ3pCaHBCLEVBQVUsRUFBUSxJQUNsQnkyQixFQUFVLEVBQVEsS0FNbEJDLEVBQU16N0IsT0FBT2tCLFVBQVVDLGVBZ0IzQixTQUFTdTZCLEVBQVNWLEVBQUt6SyxHQUNyQixLQUFNMXFCLGdCQUFnQjYxQixHQUFVLE9BQU8sSUFBSUEsRUFBUVYsRUFBS3pLLEdBQ3BEeUssR0FBUSxpQkFBb0JBLElBQzlCekssRUFBT3lLLEVBQ1BBLE9BQU0vMkIsSUFFUnNzQixFQUFPQSxHQUFRLElBRVZRLEtBQU9SLEVBQUtRLE1BQVEsYUFDekJsckIsS0FBSzgxQixLQUFPLEdBQ1o5MUIsS0FBSysxQixLQUFPLEdBQ1ovMUIsS0FBSzBxQixLQUFPQSxFQUNaMXFCLEtBQUtnMkIsY0FBbUMsSUFBdEJ0TCxFQUFLc0wsY0FDdkJoMkIsS0FBS2kyQixxQkFBcUJ2TCxFQUFLdUwsc0JBQXdCNVUsS0FDdkRyaEIsS0FBS2syQixrQkFBa0J4TCxFQUFLd0wsbUJBQXFCLEtBQ2pEbDJCLEtBQUttMkIscUJBQXFCekwsRUFBS3lMLHNCQUF3QixLQUN2RG4yQixLQUFLbzJCLG9CQUFvQjFMLEVBQUswTCxxQkFBdUIsSUFDckRwMkIsS0FBS3EyQixRQUFVLElBQUlWLEVBQVEsQ0FDekI5YSxJQUFLN2EsS0FBS2syQixvQkFDVm5aLElBQUsvYyxLQUFLbTJCLHVCQUNWRyxPQUFRdDJCLEtBQUtvMkIsd0JBRWZwMkIsS0FBS2dWLFFBQVEsTUFBUTBWLEVBQUsxVixRQUFVLElBQVEwVixFQUFLMVYsU0FDakRoVixLQUFLeXJCLFdBQWEsU0FDbEJ6ckIsS0FBS20xQixJQUFNQSxFQUNYbjFCLEtBQUt1MkIsV0FBYSxHQUNsQnYyQixLQUFLdzJCLFNBQVcsS0FDaEJ4MkIsS0FBS3lYLFVBQVcsRUFDaEJ6WCxLQUFLeTJCLGFBQWUsR0FDcEIsSUFBSUMsRUFBVWhNLEVBQUtNLFFBQVVBLEVBQzdCaHJCLEtBQUsyMkIsUUFBVSxJQUFJRCxFQUFRcE8sUUFDM0J0b0IsS0FBSzQyQixRQUFVLElBQUlGLEVBQVEzTixRQUMzQi9vQixLQUFLNjJCLGFBQW1DLElBQXJCbk0sRUFBS21NLFlBQ3BCNzJCLEtBQUs2MkIsYUFBYTcyQixLQUFLcU4sT0EzQzdCN1QsRUFBT0QsUUFBVXM4QixFQW9EakJBLEVBQVF4NkIsVUFBVXk3QixRQUFVLFdBRTFCLElBQUssSUFBSTNOLEtBRFRucEIsS0FBS21XLEtBQUszVSxNQUFNeEIsS0FBTTlCLFdBQ044QixLQUFLODFCLEtBQ2ZGLEVBQUloOEIsS0FBS29HLEtBQUs4MUIsS0FBTTNNLElBQ3RCbnBCLEtBQUs4MUIsS0FBSzNNLEdBQUtoVCxLQUFLM1UsTUFBTXhCLEtBQUs4MUIsS0FBSzNNLEdBQU1qckIsWUFXaEQyM0IsRUFBUXg2QixVQUFVMDdCLGdCQUFrQixXQUNsQyxJQUFLLElBQUk1TixLQUFPbnBCLEtBQUs4MUIsS0FDZkYsRUFBSWg4QixLQUFLb0csS0FBSzgxQixLQUFNM00sS0FDdEJucEIsS0FBSzgxQixLQUFLM00sR0FBSzFnQixHQUFLekksS0FBS2czQixXQUFXN04sS0FhMUMwTSxFQUFReDZCLFVBQVUyN0IsV0FBYSxTQUFVN04sR0FDdkMsT0FBZ0IsTUFBUkEsRUFBYyxHQUFNQSxFQUFNLEtBQVFucEIsS0FBS2kzQixPQUFPeHVCLElBT3hEMGYsRUFBUTBOLEVBQVF4NkIsV0FVaEJ3NkIsRUFBUXg2QixVQUFVMjZCLGFBQWUsU0FBVXRQLEdBQ3pDLE9BQUt4b0IsVUFBVWhDLFFBQ2Y4RCxLQUFLazNCLGdCQUFrQnhRLEVBQ2hCMW1CLE1BRnVCQSxLQUFLazNCLGVBYXJDckIsRUFBUXg2QixVQUFVNDZCLHFCQUF1QixTQUFVdlAsR0FDakQsT0FBS3hvQixVQUFVaEMsUUFDZjhELEtBQUttM0Isc0JBQXdCelEsRUFDdEIxbUIsTUFGdUJBLEtBQUttM0IsdUJBYXJDdEIsRUFBUXg2QixVQUFVNjZCLGtCQUFvQixTQUFVeFAsR0FDOUMsT0FBS3hvQixVQUFVaEMsUUFDZjhELEtBQUtvM0IsbUJBQXFCMVEsRUFDMUIxbUIsS0FBS3EyQixTQUFXcjJCLEtBQUtxMkIsUUFBUWdCLE9BQU8zUSxHQUM3QjFtQixNQUh1QkEsS0FBS28zQixvQkFNckN2QixFQUFReDZCLFVBQVUrNkIsb0JBQXNCLFNBQVUxUCxHQUNoRCxPQUFLeG9CLFVBQVVoQyxRQUNmOEQsS0FBS3MzQixxQkFBdUI1USxFQUM1QjFtQixLQUFLcTJCLFNBQVdyMkIsS0FBS3EyQixRQUFRa0IsVUFBVTdRLEdBQ2hDMW1CLE1BSHVCQSxLQUFLczNCLHNCQWNyQ3pCLEVBQVF4NkIsVUFBVTg2QixxQkFBdUIsU0FBVXpQLEdBQ2pELE9BQUt4b0IsVUFBVWhDLFFBQ2Y4RCxLQUFLdzNCLHNCQUF3QjlRLEVBQzdCMW1CLEtBQUtxMkIsU0FBV3IyQixLQUFLcTJCLFFBQVFvQixPQUFPL1EsR0FDN0IxbUIsTUFIdUJBLEtBQUt3M0IsdUJBYXJDM0IsRUFBUXg2QixVQUFVMlosUUFBVSxTQUFVMFIsR0FDcEMsT0FBS3hvQixVQUFVaEMsUUFDZjhELEtBQUswM0IsU0FBV2hSLEVBQ1QxbUIsTUFGdUJBLEtBQUswM0IsVUFZckM3QixFQUFReDZCLFVBQVVzOEIscUJBQXVCLFlBRWxDMzNCLEtBQUs0M0IsY0FBZ0I1M0IsS0FBS2szQixlQUEyQyxJQUExQmwzQixLQUFLcTJCLFFBQVF3QixVQUUzRDczQixLQUFLODNCLGFBWVRqQyxFQUFReDZCLFVBQVVnUyxLQUNsQndvQixFQUFReDZCLFVBQVUwOEIsUUFBVSxTQUFVOXpCLEVBQUl5bUIsR0FFeEMsR0FEQXhDLEVBQU0sZ0JBQWlCbG9CLEtBQUt5ckIsYUFDdkJ6ckIsS0FBS3lyQixXQUFXdnNCLFFBQVEsUUFBUyxPQUFPYyxLQUU3Q2tvQixFQUFNLGFBQWNsb0IsS0FBS20xQixLQUN6Qm4xQixLQUFLaTNCLE9BQVN4QixFQUFJejFCLEtBQUttMUIsSUFBS24xQixLQUFLMHFCLE1BQ2pDLElBQUlpQixFQUFTM3JCLEtBQUtpM0IsT0FDZHo2QixFQUFPd0QsS0FDWEEsS0FBS3lyQixXQUFhLFVBQ2xCenJCLEtBQUtnNEIsZUFBZ0IsRUFHckIsSUFBSUMsRUFBVXBpQixFQUFHOFYsRUFBUSxRQUFRLFdBQy9CbnZCLEVBQUswN0IsU0FDTGowQixHQUFNQSxPQUlKazBCLEVBQVd0aUIsRUFBRzhWLEVBQVEsU0FBUyxTQUFVemtCLEdBSzNDLEdBSkFnaEIsRUFBTSxpQkFDTjFyQixFQUFLNDdCLFVBQ0w1N0IsRUFBS2l2QixXQUFhLFNBQ2xCanZCLEVBQUtzNkIsUUFBUSxnQkFBaUI1dkIsR0FDMUJqRCxFQUFJLENBQ04sSUFBSW9JLEVBQU0sSUFBSWxPLE1BQU0sb0JBQ3BCa08sRUFBSW5GLEtBQU9BLEVBQ1hqRCxFQUFHb0ksUUFHSDdQLEVBQUttN0IsMEJBS1QsSUFBSSxJQUFVMzNCLEtBQUswM0IsU0FBVSxDQUMzQixJQUFJMWlCLEVBQVVoVixLQUFLMDNCLFNBQ25CeFAsRUFBTSx3Q0FBeUNsVCxHQUcvQyxJQUFJcWpCLEVBQVE3akIsWUFBVyxXQUNyQjBULEVBQU0scUNBQXNDbFQsR0FDNUNpakIsRUFBUTVOLFVBQ1JzQixFQUFPcmUsUUFDUHFlLEVBQU94VixLQUFLLFFBQVMsV0FDckIzWixFQUFLczZCLFFBQVEsa0JBQW1COWhCLEtBQy9CQSxHQUVIaFYsS0FBSysxQixLQUFLLzJCLEtBQUssQ0FDYnFyQixRQUFTLFdBQ1A1VixhQUFhNGpCLE1BUW5CLE9BSEFyNEIsS0FBSysxQixLQUFLLzJCLEtBQUtpNUIsR0FDZmo0QixLQUFLKzFCLEtBQUsvMkIsS0FBS201QixHQUVSbjRCLE1BU1Q2MUIsRUFBUXg2QixVQUFVNjhCLE9BQVMsV0FDekJoUSxFQUFNLFFBR05sb0IsS0FBS280QixVQUdMcDRCLEtBQUt5ckIsV0FBYSxPQUNsQnpyQixLQUFLbVcsS0FBSyxRQUdWLElBQUl3VixFQUFTM3JCLEtBQUtpM0IsT0FDbEJqM0IsS0FBSysxQixLQUFLLzJCLEtBQUs2VyxFQUFHOFYsRUFBUSxPQUFRMXdCLEVBQUsrRSxLQUFNLFlBQzdDQSxLQUFLKzFCLEtBQUsvMkIsS0FBSzZXLEVBQUc4VixFQUFRLE9BQVExd0IsRUFBSytFLEtBQU0sWUFDN0NBLEtBQUsrMUIsS0FBSy8yQixLQUFLNlcsRUFBRzhWLEVBQVEsT0FBUTF3QixFQUFLK0UsS0FBTSxZQUM3Q0EsS0FBSysxQixLQUFLLzJCLEtBQUs2VyxFQUFHOFYsRUFBUSxRQUFTMXdCLEVBQUsrRSxLQUFNLGFBQzlDQSxLQUFLKzFCLEtBQUsvMkIsS0FBSzZXLEVBQUc4VixFQUFRLFFBQVMxd0IsRUFBSytFLEtBQU0sYUFDOUNBLEtBQUsrMUIsS0FBSy8yQixLQUFLNlcsRUFBRzdWLEtBQUs0MkIsUUFBUyxVQUFXMzdCLEVBQUsrRSxLQUFNLGdCQVN4RDYxQixFQUFReDZCLFVBQVVpOUIsT0FBUyxXQUN6QnQ0QixLQUFLdzJCLFNBQVcsSUFBSStCLEtBQ3BCdjRCLEtBQUs4MkIsUUFBUSxTQVNmakIsRUFBUXg2QixVQUFVbTlCLE9BQVMsV0FDekJ4NEIsS0FBSzgyQixRQUFRLE9BQVEsSUFBSXlCLEtBQVN2NEIsS0FBS3cyQixXQVN6Q1gsRUFBUXg2QixVQUFVbzlCLE9BQVMsU0FBVXZ4QixHQUNuQ2xILEtBQUs0MkIsUUFBUTVNLElBQUk5aUIsSUFTbkIydUIsRUFBUXg2QixVQUFVcTlCLFVBQVksU0FBVXJxQixHQUN0Q3JPLEtBQUttVyxLQUFLLFNBQVU5SCxJQVN0QnduQixFQUFReDZCLFVBQVV5NEIsUUFBVSxTQUFVem5CLEdBQ3BDNmIsRUFBTSxRQUFTN2IsR0FDZnJNLEtBQUs4MkIsUUFBUSxRQUFTenFCLElBVXhCd3BCLEVBQVF4NkIsVUFBVXN3QixPQUFTLFNBQVV4QyxFQUFLdUIsR0FDeEMsSUFBSWlCLEVBQVMzckIsS0FBSzgxQixLQUFLM00sR0FDdkIsSUFBS3dDLEVBQVEsQ0FDWEEsRUFBUyxJQUFJK0osRUFBTzExQixLQUFNbXBCLEVBQUt1QixHQUMvQjFxQixLQUFLODFCLEtBQUszTSxHQUFPd0MsRUFDakIsSUFBSW52QixFQUFPd0QsS0FDWDJyQixFQUFPOVYsR0FBRyxhQUFjOGlCLEdBQ3hCaE4sRUFBTzlWLEdBQUcsV0FBVyxXQUNuQjhWLEVBQU9sakIsR0FBS2pNLEVBQUt3NkIsV0FBVzdOLE1BRzFCbnBCLEtBQUs2MkIsYUFFUDhCLElBSUosU0FBU0EsS0FDRHo1QixFQUFRMUMsRUFBSys1QixXQUFZNUssSUFDN0JudkIsRUFBSys1QixXQUFXdjNCLEtBQUsyc0IsR0FJekIsT0FBT0EsR0FTVGtLLEVBQVF4NkIsVUFBVWd2QixRQUFVLFNBQVVzQixHQUNwQyxJQUFJMXNCLEVBQVFDLEVBQVFjLEtBQUt1MkIsV0FBWTVLLElBQ2hDMXNCLEdBQU9lLEtBQUt1MkIsV0FBV3AzQixPQUFPRixFQUFPLEdBQ3RDZSxLQUFLdTJCLFdBQVdyNkIsUUFFcEI4RCxLQUFLc04sU0FVUHVvQixFQUFReDZCLFVBQVVnVCxPQUFTLFNBQVVBLEdBQ25DNlosRUFBTSxvQkFBcUI3WixHQUMzQixJQUFJN1IsRUFBT3dELEtBQ1BxTyxFQUFPaWQsT0FBeUIsSUFBaEJqZCxFQUFPL08sT0FBWStPLEVBQU84YSxLQUFPLElBQU05YSxFQUFPaWQsT0FFN0Q5dUIsRUFBS2liLFNBV1JqYixFQUFLaTZCLGFBQWF6M0IsS0FBS3FQLElBVHZCN1IsRUFBS2liLFVBQVcsRUFDaEJ6WCxLQUFLMjJCLFFBQVFubkIsT0FBT25CLEdBQVEsU0FBVStDLEdBQ3BDLElBQUssSUFBSTNYLEVBQUksRUFBR0EsRUFBSTJYLEVBQWVsVixPQUFRekMsSUFDekMrQyxFQUFLeTZCLE9BQU9yZixNQUFNeEcsRUFBZTNYLEdBQUk0VSxFQUFPL0YsU0FFOUM5TCxFQUFLaWIsVUFBVyxFQUNoQmpiLEVBQUtvOEIsMEJBY1gvQyxFQUFReDZCLFVBQVV1OUIsbUJBQXFCLFdBQ3JDLEdBQUk1NEIsS0FBS3kyQixhQUFhdjZCLE9BQVMsSUFBTThELEtBQUt5WCxTQUFVLENBQ2xELElBQUlvUyxFQUFPN3BCLEtBQUt5MkIsYUFBYW9DLFFBQzdCNzRCLEtBQUtxTyxPQUFPd2IsS0FVaEJnTSxFQUFReDZCLFVBQVUrOEIsUUFBVSxXQUMxQmxRLEVBQU0sV0FHTixJQURBLElBQUk0USxFQUFhOTRCLEtBQUsrMUIsS0FBSzc1QixPQUNsQnpDLEVBQUksRUFBR0EsRUFBSXEvQixFQUFZci9CLElBQUssQ0FDekJ1RyxLQUFLKzFCLEtBQUs4QyxRQUNoQnhPLFVBR05ycUIsS0FBS3kyQixhQUFlLEdBQ3BCejJCLEtBQUt5WCxVQUFXLEVBQ2hCelgsS0FBS3cyQixTQUFXLEtBRWhCeDJCLEtBQUs0MkIsUUFBUXZNLFdBU2Z3TCxFQUFReDZCLFVBQVVpUyxNQUNsQnVvQixFQUFReDZCLFVBQVUwOUIsV0FBYSxXQUM3QjdRLEVBQU0sY0FDTmxvQixLQUFLZzRCLGVBQWdCLEVBQ3JCaDRCLEtBQUs0M0IsY0FBZSxFQUNoQixZQUFjNTNCLEtBQUt5ckIsWUFHckJ6ckIsS0FBS280QixVQUVQcDRCLEtBQUtxMkIsUUFBUTJDLFFBQ2JoNUIsS0FBS3lyQixXQUFhLFNBQ2R6ckIsS0FBS2kzQixRQUFRajNCLEtBQUtpM0IsT0FBTzNwQixTQVMvQnVvQixFQUFReDZCLFVBQVU0OUIsUUFBVSxTQUFVQyxHQUNwQ2hSLEVBQU0sV0FFTmxvQixLQUFLbzRCLFVBQ0xwNEIsS0FBS3EyQixRQUFRMkMsUUFDYmg1QixLQUFLeXJCLFdBQWEsU0FDbEJ6ckIsS0FBS21XLEtBQUssUUFBUytpQixHQUVmbDVCLEtBQUtrM0IsZ0JBQWtCbDNCLEtBQUtnNEIsZUFDOUJoNEIsS0FBSzgzQixhQVVUakMsRUFBUXg2QixVQUFVeThCLFVBQVksV0FDNUIsR0FBSTkzQixLQUFLNDNCLGNBQWdCNTNCLEtBQUtnNEIsY0FBZSxPQUFPaDRCLEtBRXBELElBQUl4RCxFQUFPd0QsS0FFWCxHQUFJQSxLQUFLcTJCLFFBQVF3QixVQUFZNzNCLEtBQUttM0Isc0JBQ2hDalAsRUFBTSxvQkFDTmxvQixLQUFLcTJCLFFBQVEyQyxRQUNiaDVCLEtBQUs4MkIsUUFBUSxvQkFDYjkyQixLQUFLNDNCLGNBQWUsTUFDZixDQUNMLElBQUl1QixFQUFRbjVCLEtBQUtxMkIsUUFBUStDLFdBQ3pCbFIsRUFBTSwwQ0FBMkNpUixHQUVqRG41QixLQUFLNDNCLGNBQWUsRUFDcEIsSUFBSVMsRUFBUTdqQixZQUFXLFdBQ2pCaFksRUFBS3c3QixnQkFFVDlQLEVBQU0sd0JBQ04xckIsRUFBS3M2QixRQUFRLG9CQUFxQnQ2QixFQUFLNjVCLFFBQVF3QixVQUMvQ3I3QixFQUFLczZCLFFBQVEsZUFBZ0J0NkIsRUFBSzY1QixRQUFRd0IsVUFHdENyN0IsRUFBS3c3QixlQUVUeDdCLEVBQUs2USxNQUFLLFNBQVVoQixHQUNkQSxHQUNGNmIsRUFBTSwyQkFDTjFyQixFQUFLbzdCLGNBQWUsRUFDcEJwN0IsRUFBS3M3QixZQUNMdDdCLEVBQUtzNkIsUUFBUSxrQkFBbUJ6cUIsRUFBSW5GLFFBRXBDZ2hCLEVBQU0scUJBQ04xckIsRUFBSzY4QixxQkFHUkYsR0FFSG41QixLQUFLKzFCLEtBQUsvMkIsS0FBSyxDQUNicXJCLFFBQVMsV0FDUDVWLGFBQWE0akIsUUFZckJ4QyxFQUFReDZCLFVBQVVnK0IsWUFBYyxXQUM5QixJQUFJQyxFQUFVdDVCLEtBQUtxMkIsUUFBUXdCLFNBQzNCNzNCLEtBQUs0M0IsY0FBZSxFQUNwQjUzQixLQUFLcTJCLFFBQVEyQyxRQUNiaDVCLEtBQUsrMkIsa0JBQ0wvMkIsS0FBSzgyQixRQUFRLFlBQWF3QyxLLGdCQ3ZqQjVCLElBQUl4TyxFQUFpQixFQUFRLElBQ3pCeU8sRUFBTSxFQUFRLEtBQ2RDLEVBQVEsRUFBUSxLQUNoQkMsRUFBWSxFQUFRLEtBTXhCbGdDLEVBQVFtZ0MsUUFVUixTQUFrQmhQLEdBQ2hCLElBQ0lpUCxHQUFLLEVBQ0xDLEdBQUssRUFDTEMsR0FBUSxJQUFVblAsRUFBS21QLE1BRTNCLEdBQXdCLG9CQUFiQyxTQUEwQixDQUNuQyxJQUFJQyxFQUFRLFdBQWFELFNBQVMzc0IsU0FDOUJpZSxFQUFPME8sU0FBUzFPLEtBR2ZBLElBQ0hBLEVBQU8yTyxFQUFRLElBQU0sSUFHdkJKLEVBQUtqUCxFQUFLUyxXQUFhMk8sU0FBUzNPLFVBQVlDLElBQVNWLEVBQUtVLEtBQzFEd08sRUFBS2xQLEVBQUtXLFNBQVcwTyxFQU92QixHQUpBclAsRUFBS0MsUUFBVWdQLEVBQ2ZqUCxFQUFLRSxRQUFVZ1AsRUFHWCxTQUZFLElBQUk5TyxFQUFlSixLQUVIQSxFQUFLc1AsV0FDekIsT0FBTyxJQUFJVCxFQUFJN08sR0FFZixJQUFLbVAsRUFBTyxNQUFNLElBQUkxN0IsTUFBTSxrQkFDNUIsT0FBTyxJQUFJcTdCLEVBQU05TyxJQXBDckJueEIsRUFBUWtnQyxVQUFZQSxHLGdCQ1ZwQixJQUFJeE8sRUFBWSxFQUFRLElBQ3BCZ1AsRUFBVSxFQUFRLElBQ2xCalAsRUFBUyxFQUFRLElBQ2pCa1AsRUFBVSxFQUFRLElBQ2xCQyxFQUFRLEVBQVEsSUFDaEJqUyxFQUFRLEVBQVEsR0FBUixDQUFpQiw0QkFNN0IxdUIsRUFBT0QsUUFBVTZnQyxFQU1qQixJQUFJQyxFQUdLLE1BREcsSUFEVyxFQUFRLElBQ25CLENBQW1CLENBQUUxUCxTQUFTLElBQ3JCK0ksYUFVckIsU0FBUzBHLEVBQVMxUCxHQUNoQixJQUFJNFAsRUFBZTVQLEdBQVFBLEVBQUs0UCxZQUMzQkQsSUFBV0MsSUFDZHQ2QixLQUFLc08sZ0JBQWlCLEdBRXhCMmMsRUFBVXJ4QixLQUFLb0csS0FBTTBxQixHQU92QndQLEVBQVFFLEVBQVNuUCxHQU1qQm1QLEVBQVEvK0IsVUFBVXJCLEtBQU8sVUFTekJvZ0MsRUFBUS8rQixVQUFVcXhCLE9BQVMsV0FDekIxc0IsS0FBS3U2QixRQVVQSCxFQUFRLytCLFVBQVVtL0IsTUFBUSxTQUFVQyxHQUNsQyxJQUFJaitCLEVBQU93RCxLQUlYLFNBQVN3NkIsSUFDUHRTLEVBQU0sVUFDTjFyQixFQUFLaXZCLFdBQWEsU0FDbEJnUCxJQUdGLEdBUkF6NkIsS0FBS3lyQixXQUFhLFVBUWR6ckIsS0FBSzA1QixVQUFZMTVCLEtBQUtyRSxTQUFVLENBQ2xDLElBQUkyVyxFQUFRLEVBRVJ0UyxLQUFLMDVCLFVBQ1B4UixFQUFNLCtDQUNONVYsSUFDQXRTLEtBQUsrVixLQUFLLGdCQUFnQixXQUN4Qm1TLEVBQU0sZ0NBQ0o1VixHQUFTa29CLFFBSVZ4NkIsS0FBS3JFLFdBQ1J1c0IsRUFBTSwrQ0FDTjVWLElBQ0F0UyxLQUFLK1YsS0FBSyxTQUFTLFdBQ2pCbVMsRUFBTSxnQ0FDSjVWLEdBQVNrb0IsYUFJZkEsS0FVSkosRUFBUS8rQixVQUFVay9CLEtBQU8sV0FDdkJyUyxFQUFNLFdBQ05sb0IsS0FBSzA1QixTQUFVLEVBQ2YxNUIsS0FBSzA2QixTQUNMMTZCLEtBQUttVyxLQUFLLFNBU1ppa0IsRUFBUS8rQixVQUFVMHhCLE9BQVMsU0FBVTdsQixHQUNuQyxJQUFJMUssRUFBT3dELEtBQ1hrb0IsRUFBTSxzQkFBdUJoaEIsR0FrQjdCOGpCLEVBQU8vWixjQUFjL0osRUFBTWxILEtBQUsyckIsT0FBTzFiLFlBakJ4QixTQUFVNUIsRUFBUXBQLEVBQU9xVCxHQU90QyxHQUxJLFlBQWM5VixFQUFLaXZCLFlBQ3JCanZCLEVBQUtzd0IsU0FJSCxVQUFZemUsRUFBTy9PLEtBRXJCLE9BREE5QyxFQUFLb3dCLFdBQ0UsRUFJVHB3QixFQUFLd3dCLFNBQVMzZSxNQU9aLFdBQWFyTyxLQUFLeXJCLGFBRXBCenJCLEtBQUswNUIsU0FBVSxFQUNmMTVCLEtBQUttVyxLQUFLLGdCQUVOLFNBQVduVyxLQUFLeXJCLFdBQ2xCenJCLEtBQUt1NkIsT0FFTHJTLEVBQU0sdUNBQXdDbG9CLEtBQUt5ckIsY0FXekQyTyxFQUFRLytCLFVBQVVzeEIsUUFBVSxXQUMxQixJQUFJbndCLEVBQU93RCxLQUVYLFNBQVNzTixJQUNQNGEsRUFBTSx3QkFDTjFyQixFQUFLb2IsTUFBTSxDQUFDLENBQUV0WSxLQUFNLFdBR2xCLFNBQVdVLEtBQUt5ckIsWUFDbEJ2RCxFQUFNLDRCQUNONWEsTUFJQTRhLEVBQU0sd0NBQ05sb0IsS0FBSytWLEtBQUssT0FBUXpJLEtBWXRCOHNCLEVBQVEvK0IsVUFBVXVjLE1BQVEsU0FBVXhLLEdBQ2xDLElBQUk1USxFQUFPd0QsS0FDWEEsS0FBS3JFLFVBQVcsRUFDaEIsSUFBSWcvQixFQUFhLFdBQ2ZuK0IsRUFBS2IsVUFBVyxFQUNoQmEsRUFBSzJaLEtBQUssVUFHWjZVLEVBQU90YSxjQUFjdEQsRUFBU3BOLEtBQUtzTyxnQkFBZ0IsU0FBVXBILEdBQzNEMUssRUFBS28rQixRQUFRMXpCLEVBQU15ekIsT0FVdkJQLEVBQVEvK0IsVUFBVTg1QixJQUFNLFdBQ3RCLElBQUk3SixFQUFRdHJCLEtBQUtzckIsT0FBUyxHQUN0QnVQLEVBQVM3NkIsS0FBS3FyQixPQUFTLFFBQVUsT0FDakNELEVBQU8sR0F5QlgsT0F0QkksSUFBVXByQixLQUFLd3JCLG9CQUNqQkYsRUFBTXRyQixLQUFLdXJCLGdCQUFrQjRPLEtBRzFCbjZCLEtBQUtzTyxnQkFBbUJnZCxFQUFNd1AsTUFDakN4UCxFQUFNM2IsSUFBTSxHQUdkMmIsRUFBUTJPLEVBQVF6cUIsT0FBTzhiLEdBR25CdHJCLEtBQUtvckIsT0FBVSxVQUFZeVAsR0FBZ0MsTUFBdEJycUIsT0FBT3hRLEtBQUtvckIsT0FDakQsU0FBV3lQLEdBQWdDLEtBQXRCcnFCLE9BQU94USxLQUFLb3JCLFNBQ25DQSxFQUFPLElBQU1wckIsS0FBS29yQixNQUloQkUsRUFBTXB2QixTQUNSb3ZCLEVBQVEsSUFBTUEsR0FJVHVQLEVBQVMsUUFEMkIsSUFBaEM3NkIsS0FBS21yQixTQUFTanNCLFFBQVEsS0FDRCxJQUFNYyxLQUFLbXJCLFNBQVcsSUFBTW5yQixLQUFLbXJCLFVBQVlDLEVBQU9wckIsS0FBS2tyQixLQUFPSSxJLGlCQ25QbEcsWUFNQSxJQUFJem5CLEVBQVUsRUFBUSxLQUVsQjFHLEVBQVdoRCxPQUFPa0IsVUFBVThCLFNBQzVCNDlCLEVBQWlDLG1CQUFUbHRCLE1BQ1ksb0JBQVRBLE1BQWdELDZCQUF4QjFRLEVBQVN2RCxLQUFLaVUsTUFDakVtdEIsRUFBaUMsbUJBQVRDLE1BQ1ksb0JBQVRBLE1BQWdELDZCQUF4Qjk5QixFQUFTdkQsS0FBS3FoQyxNQU1yRXpoQyxFQUFPRCxRQVdQLFNBQVNtVCxFQUFXalIsR0FDbEIsSUFBS0EsR0FBc0IsaUJBQVJBLEVBQ2pCLE9BQU8sRUFHVCxHQUFJb0ksRUFBUXBJLEdBQU0sQ0FDaEIsSUFBSyxJQUFJaEMsRUFBSSxFQUFHQyxFQUFJK0IsRUFBSVMsT0FBUXpDLEVBQUlDLEVBQUdELElBQ3JDLEdBQUlpVCxFQUFValIsRUFBSWhDLElBQ2hCLE9BQU8sRUFHWCxPQUFPLEVBR1QsR0FBdUIsbUJBQVhvZCxHQUF5QkEsRUFBT2pULFVBQVlpVCxFQUFPalQsU0FBU25JLElBQzlDLG1CQUFoQjZJLGFBQThCN0ksYUFBZTZJLGFBQ3BEeTJCLEdBQWtCdC9CLGFBQWVvUyxNQUNqQ210QixHQUFrQnYvQixhQUFldy9CLEtBRWxDLE9BQU8sRUFJVCxHQUFJeC9CLEVBQUk4aEIsUUFBZ0MsbUJBQWY5aEIsRUFBSThoQixRQUE4QyxJQUFyQnJmLFVBQVVoQyxPQUM5RCxPQUFPd1EsRUFBVWpSLEVBQUk4aEIsVUFBVSxHQUdqQyxJQUFLLElBQUl2aUIsS0FBT1MsRUFDZCxHQUFJdEIsT0FBT2tCLFVBQVVDLGVBQWUxQixLQUFLNkIsRUFBS1QsSUFBUTBSLEVBQVVqUixFQUFJVCxJQUNsRSxPQUFPLEVBSVgsT0FBTyxLLHNEQzVEVCxJQUtJa2dDLEVBTEFDLEVBQVcsbUVBQW1FOTlCLE1BQU0sSUFDcEZuQixFQUFTLEdBQ1RtSCxFQUFNLEdBQ04rM0IsRUFBTyxFQUNQM2hDLEVBQUksRUFVUixTQUFTK1YsRUFBTzZyQixHQUNkLElBQUk5ckIsRUFBVSxHQUVkLEdBQ0VBLEVBQVU0ckIsRUFBU0UsRUFBTW4vQixHQUFVcVQsRUFDbkM4ckIsRUFBTXArQixLQUFLOGlCLE1BQU1zYixFQUFNbi9CLFNBQ2hCbS9CLEVBQU0sR0FFZixPQUFPOXJCLEVBMEJULFNBQVM0cUIsSUFDUCxJQUFJbUIsRUFBTTlyQixHQUFRLElBQUkrb0IsTUFFdEIsT0FBSStDLElBQVFKLEdBQWFFLEVBQU8sRUFBR0YsRUFBT0ksR0FDbkNBLEVBQUssSUFBSzlyQixFQUFPNHJCLEtBTTFCLEtBQU8zaEMsRUFBSXlDLEVBQVF6QyxJQUFLNEosRUFBSTgzQixFQUFTMWhDLElBQU1BLEVBSzNDMGdDLEVBQU0zcUIsT0FBU0EsRUFDZjJxQixFQUFNN3BCLE9BaENOLFNBQWdCdkssR0FDZCxJQUFJdzFCLEVBQVUsRUFFZCxJQUFLOWhDLEVBQUksRUFBR0EsRUFBSXNNLEVBQUk3SixPQUFRekMsSUFDMUI4aEMsRUFBVUEsRUFBVXIvQixFQUFTbUgsRUFBSTBDLEVBQUlvSyxPQUFPMVcsSUFHOUMsT0FBTzhoQyxHQTBCVC9oQyxFQUFPRCxRQUFVNGdDLEcsY0NsRWpCLElBQUlqN0IsRUFBVSxHQUFHQSxRQUVqQjFGLEVBQU9ELFFBQVUsU0FBUzZNLEVBQUszSyxHQUM3QixHQUFJeUQsRUFBUyxPQUFPa0gsRUFBSWxILFFBQVF6RCxHQUNoQyxJQUFLLElBQUloQyxFQUFJLEVBQUdBLEVBQUkyTSxFQUFJbEssU0FBVXpDLEVBQ2hDLEdBQUkyTSxFQUFJM00sS0FBT2dDLEVBQUssT0FBT2hDLEVBRTdCLE9BQVEsSSxnQkNIVixJQUFJdXhCLEVBQVMsRUFBUSxJQUNqQjdDLEVBQVUsRUFBUSxJQUNsQnFULEVBQVUsRUFBUSxLQUNsQjNsQixFQUFLLEVBQVEsSUFDYjVhLEVBQU8sRUFBUSxJQUNmaXRCLEVBQVEsRUFBUSxHQUFSLENBQWlCLDJCQUN6QitSLEVBQVUsRUFBUSxJQUNsQndCLEVBQVMsRUFBUSxJQU1yQmppQyxFQUFPRCxRQUFvQm04QixFQVMzQixJQUFJZ0csRUFBUyxDQUNYM0QsUUFBUyxFQUNUNEQsY0FBZSxFQUNmQyxnQkFBaUIsRUFDakJyRixXQUFZLEVBQ1p3QyxXQUFZLEVBQ1p4dEIsTUFBTyxFQUNQdXNCLFVBQVcsRUFDWCtELGtCQUFtQixFQUNuQkMsaUJBQWtCLEVBQ2xCQyxnQkFBaUIsRUFDakJuRSxhQUFjLEVBQ2RycUIsS0FBTSxFQUNOQyxLQUFNLEdBT0oySSxFQUFPZ1MsRUFBUTlzQixVQUFVOGEsS0FRN0IsU0FBU3VmLEVBQVFzRyxFQUFJN1MsRUFBS3VCLEdBQ3hCMXFCLEtBQUtnOEIsR0FBS0EsRUFDVmg4QixLQUFLbXBCLElBQU1BLEVBQ1hucEIsS0FBS2k4QixLQUFPajhCLEtBQ1pBLEtBQUtrOEIsSUFBTSxFQUNYbDhCLEtBQUttOEIsS0FBTyxHQUNabjhCLEtBQUtvOEIsY0FBZ0IsR0FDckJwOEIsS0FBS3E4QixXQUFhLEdBQ2xCcjhCLEtBQUtzOEIsV0FBWSxFQUNqQnQ4QixLQUFLdThCLGNBQWUsRUFDcEJ2OEIsS0FBSzh2QixNQUFRLEdBQ1RwRixHQUFRQSxFQUFLWSxRQUNmdHJCLEtBQUtzckIsTUFBUVosRUFBS1ksT0FFaEJ0ckIsS0FBS2c4QixHQUFHbkYsYUFBYTcyQixLQUFLcU4sT0FPaEM4YSxFQUFRdU4sRUFBT3I2QixXQVFmcTZCLEVBQU9yNkIsVUFBVW1oQyxVQUFZLFdBQzNCLElBQUl4OEIsS0FBSysxQixLQUFULENBRUEsSUFBSWlHLEVBQUtoOEIsS0FBS2c4QixHQUNkaDhCLEtBQUsrMUIsS0FBTyxDQUNWbGdCLEVBQUdtbUIsRUFBSSxPQUFRL2dDLEVBQUsrRSxLQUFNLFdBQzFCNlYsRUFBR21tQixFQUFJLFNBQVUvZ0MsRUFBSytFLEtBQU0sYUFDNUI2VixFQUFHbW1CLEVBQUksUUFBUy9nQyxFQUFLK0UsS0FBTSxlQVUvQjAxQixFQUFPcjZCLFVBQVVnUyxLQUNqQnFvQixFQUFPcjZCLFVBQVUwOEIsUUFBVSxXQUN6QixPQUFJLzNCLEtBQUtzOEIsVUFBa0J0OEIsTUFFM0JBLEtBQUt3OEIsWUFDTHg4QixLQUFLZzhCLEdBQUczdUIsT0FDSixTQUFXck4sS0FBS2c4QixHQUFHdlEsWUFBWXpyQixLQUFLazRCLFNBQ3hDbDRCLEtBQUttVyxLQUFLLGNBQ0huVyxPQVVUMDFCLEVBQU9yNkIsVUFBVXd4QixLQUFPLFdBQ3RCLElBQUlyaEIsRUFBT2d3QixFQUFRdDlCLFdBR25CLE9BRkFzTixFQUFLc2UsUUFBUSxXQUNiOXBCLEtBQUttVyxLQUFLM1UsTUFBTXhCLEtBQU13TCxHQUNmeEwsTUFZVDAxQixFQUFPcjZCLFVBQVU4YSxLQUFPLFNBQVVzbUIsR0FDaEMsR0FBSWYsRUFBT3BnQyxlQUFlbWhDLEdBRXhCLE9BREF0bUIsRUFBSzNVLE1BQU14QixLQUFNOUIsV0FDVjhCLEtBR1QsSUFBSXdMLEVBQU9nd0IsRUFBUXQ5QixXQUNmbVEsRUFBUyxDQUNYL08sV0FBNkJsQixJQUF0QjRCLEtBQUs4dkIsTUFBTTFILE9BQXVCcG9CLEtBQUs4dkIsTUFBTTFILE9BQVNxVCxFQUFPandCLElBQVN3ZixFQUFPbkMsYUFBZW1DLEVBQU90QyxNQUMxR3hoQixLQUFNc0UsRUFHUixRQUFpQixJQWtCakIsT0FqQkE2QyxFQUFPL0YsUUFBUW8wQixVQUFZMThCLEtBQUs4dkIsUUFBUyxJQUFVOXZCLEtBQUs4dkIsTUFBTTRNLFNBRzFELG1CQUFzQmx4QixFQUFLQSxFQUFLdFAsT0FBUyxLQUMzQ2dzQixFQUFNLGlDQUFrQ2xvQixLQUFLazhCLEtBQzdDbDhCLEtBQUttOEIsS0FBS244QixLQUFLazhCLEtBQU8xd0IsRUFBS214QixNQUMzQnR1QixFQUFPNUYsR0FBS3pJLEtBQUtrOEIsT0FHZmw4QixLQUFLczhCLFVBQ1B0OEIsS0FBS3FPLE9BQU9BLEdBRVpyTyxLQUFLcThCLFdBQVdyOUIsS0FBS3FQLEdBR3ZCck8sS0FBSzh2QixNQUFRLEdBRU45dkIsTUFVVDAxQixFQUFPcjZCLFVBQVVnVCxPQUFTLFNBQVVBLEdBQ2xDQSxFQUFPOGEsSUFBTW5wQixLQUFLbXBCLElBQ2xCbnBCLEtBQUtnOEIsR0FBRzN0QixPQUFPQSxJQVNqQnFuQixFQUFPcjZCLFVBQVU2OEIsT0FBUyxXQUl4QixHQUhBaFEsRUFBTSxrQ0FHRixNQUFRbG9CLEtBQUttcEIsSUFDZixHQUFJbnBCLEtBQUtzckIsTUFBTyxDQUNkLElBQUlBLEVBQThCLGlCQUFmdHJCLEtBQUtzckIsTUFBcUIyTyxFQUFRenFCLE9BQU94UCxLQUFLc3JCLE9BQVN0ckIsS0FBS3NyQixNQUMvRXBELEVBQU0sdUNBQXdDb0QsR0FDOUN0ckIsS0FBS3FPLE9BQU8sQ0FBQy9PLEtBQU0wckIsRUFBT3hDLFFBQVM4QyxNQUFPQSxTQUUxQ3RyQixLQUFLcU8sT0FBTyxDQUFDL08sS0FBTTByQixFQUFPeEMsV0FZaENrTixFQUFPcjZCLFVBQVU0OUIsUUFBVSxTQUFVQyxHQUNuQ2hSLEVBQU0sYUFBY2dSLEdBQ3BCbDVCLEtBQUtzOEIsV0FBWSxFQUNqQnQ4QixLQUFLdThCLGNBQWUsU0FDYnY4QixLQUFLeUksR0FDWnpJLEtBQUttVyxLQUFLLGFBQWMraUIsSUFVMUJ4RCxFQUFPcjZCLFVBQVV1aEMsU0FBVyxTQUFVdnVCLEdBQ3BDLElBQUl3dUIsRUFBZ0J4dUIsRUFBTzhhLE1BQVFucEIsS0FBS21wQixJQUNwQzJULEVBQXFCenVCLEVBQU8vTyxPQUFTMHJCLEVBQU9wQyxPQUF3QixNQUFmdmEsRUFBTzhhLElBRWhFLEdBQUswVCxHQUFrQkMsRUFFdkIsT0FBUXp1QixFQUFPL08sTUFDYixLQUFLMHJCLEVBQU94QyxRQUNWeG9CLEtBQUsrOEIsWUFDTCxNQUVGLEtBQUsvUixFQUFPdEMsTUFJWixLQUFLc0MsRUFBT25DLGFBQ1Y3b0IsS0FBS2c5QixRQUFRM3VCLEdBQ2IsTUFFRixLQUFLMmMsRUFBT3JDLElBSVosS0FBS3FDLEVBQU9sQyxXQUNWOW9CLEtBQUtpOUIsTUFBTTV1QixHQUNYLE1BRUYsS0FBSzJjLEVBQU92QyxXQUNWem9CLEtBQUtrOUIsZUFDTCxNQUVGLEtBQUtsUyxFQUFPcEMsTUFDVjVvQixLQUFLbVcsS0FBSyxRQUFTOUgsRUFBT25ILFFBWWhDd3VCLEVBQU9yNkIsVUFBVTJoQyxRQUFVLFNBQVUzdUIsR0FDbkMsSUFBSTdDLEVBQU82QyxFQUFPbkgsTUFBUSxHQUMxQmdoQixFQUFNLG9CQUFxQjFjLEdBRXZCLE1BQVE2QyxFQUFPNUYsS0FDakJ5ZixFQUFNLG1DQUNOMWMsRUFBS3hNLEtBQUtnQixLQUFLbTlCLElBQUk5dUIsRUFBTzVGLE1BR3hCekksS0FBS3M4QixVQUNQbm1CLEVBQUszVSxNQUFNeEIsS0FBTXdMLEdBRWpCeEwsS0FBS284QixjQUFjcDlCLEtBQUt3TSxJQVU1QmtxQixFQUFPcjZCLFVBQVU4aEMsSUFBTSxTQUFVMTBCLEdBQy9CLElBQUlqTSxFQUFPd0QsS0FDUG85QixHQUFPLEVBQ1gsT0FBTyxXQUVMLElBQUlBLEVBQUosQ0FDQUEsR0FBTyxFQUNQLElBQUk1eEIsRUFBT2d3QixFQUFRdDlCLFdBQ25CZ3FCLEVBQU0saUJBQWtCMWMsR0FFeEJoUCxFQUFLNlIsT0FBTyxDQUNWL08sS0FBTW04QixFQUFPandCLEdBQVF3ZixFQUFPbEMsV0FBYWtDLEVBQU9yQyxJQUNoRGxnQixHQUFJQSxFQUNKdkIsS0FBTXNFLE9BWVprcUIsRUFBT3I2QixVQUFVNGhDLE1BQVEsU0FBVTV1QixHQUNqQyxJQUFJOHVCLEVBQU1uOUIsS0FBS204QixLQUFLOXRCLEVBQU81RixJQUN2QixtQkFBc0IwMEIsR0FDeEJqVixFQUFNLHlCQUEwQjdaLEVBQU81RixHQUFJNEYsRUFBT25ILE1BQ2xEaTJCLEVBQUkzN0IsTUFBTXhCLEtBQU1xTyxFQUFPbkgsYUFDaEJsSCxLQUFLbThCLEtBQUs5dEIsRUFBTzVGLEtBRXhCeWYsRUFBTSxhQUFjN1osRUFBTzVGLEtBVS9CaXRCLEVBQU9yNkIsVUFBVTBoQyxVQUFZLFdBQzNCLzhCLEtBQUtzOEIsV0FBWSxFQUNqQnQ4QixLQUFLdThCLGNBQWUsRUFDcEJ2OEIsS0FBS21XLEtBQUssV0FDVm5XLEtBQUtxOUIsZ0JBU1AzSCxFQUFPcjZCLFVBQVVnaUMsYUFBZSxXQUM5QixJQUFJNWpDLEVBQ0osSUFBS0EsRUFBSSxFQUFHQSxFQUFJdUcsS0FBS284QixjQUFjbGdDLE9BQVF6QyxJQUN6QzBjLEVBQUszVSxNQUFNeEIsS0FBTUEsS0FBS284QixjQUFjM2lDLElBSXRDLElBRkF1RyxLQUFLbzhCLGNBQWdCLEdBRWhCM2lDLEVBQUksRUFBR0EsRUFBSXVHLEtBQUtxOEIsV0FBV25nQyxPQUFRekMsSUFDdEN1RyxLQUFLcU8sT0FBT3JPLEtBQUtxOEIsV0FBVzVpQyxJQUU5QnVHLEtBQUtxOEIsV0FBYSxJQVNwQjNHLEVBQU9yNkIsVUFBVTZoQyxhQUFlLFdBQzlCaFYsRUFBTSx5QkFBMEJsb0IsS0FBS21wQixLQUNyQ25wQixLQUFLcXFCLFVBQ0xycUIsS0FBS2k1QixRQUFRLHlCQVdmdkQsRUFBT3I2QixVQUFVZ3ZCLFFBQVUsV0FDekIsR0FBSXJxQixLQUFLKzFCLEtBQU0sQ0FFYixJQUFLLElBQUl0OEIsRUFBSSxFQUFHQSxFQUFJdUcsS0FBSysxQixLQUFLNzVCLE9BQVF6QyxJQUNwQ3VHLEtBQUsrMUIsS0FBS3Q4QixHQUFHNHdCLFVBRWZycUIsS0FBSysxQixLQUFPLEtBR2QvMUIsS0FBS2c4QixHQUFHM1IsUUFBUXJxQixPQVVsQjAxQixFQUFPcjZCLFVBQVVpUyxNQUNqQm9vQixFQUFPcjZCLFVBQVUwOUIsV0FBYSxXQWE1QixPQVpJLzRCLEtBQUtzOEIsWUFDUHBVLEVBQU0sNkJBQThCbG9CLEtBQUttcEIsS0FDekNucEIsS0FBS3FPLE9BQU8sQ0FBRS9PLEtBQU0wckIsRUFBT3ZDLGNBSTdCem9CLEtBQUtxcUIsVUFFRHJxQixLQUFLczhCLFdBRVB0OEIsS0FBS2k1QixRQUFRLHdCQUVSajVCLE1BV1QwMUIsRUFBT3I2QixVQUFVcWhDLFNBQVcsU0FBVUEsR0FFcEMsT0FEQTE4QixLQUFLOHZCLE1BQU00TSxTQUFXQSxFQUNmMThCLE1BV1QwMUIsRUFBT3I2QixVQUFVK3NCLE9BQVMsU0FBVUEsR0FFbEMsT0FEQXBvQixLQUFLOHZCLE1BQU0xSCxPQUFTQSxFQUNicG9CLE8sZ0JDcmFULFNBQVNtb0IsRUFBUTFzQixHQUNmLEdBQUlBLEVBQUssT0FXWCxTQUFlQSxHQUNiLElBQUssSUFBSVQsS0FBT210QixFQUFROXNCLFVBQ3RCSSxFQUFJVCxHQUFPbXRCLEVBQVE5c0IsVUFBVUwsR0FFL0IsT0FBT1MsRUFmU3d4QixDQUFNeHhCLEdBVnRCakMsRUFBT0QsUUFBVTR1QixFQXFDbkJBLEVBQVE5c0IsVUFBVXdhLEdBQ2xCc1MsRUFBUTlzQixVQUFVNnhCLGlCQUFtQixTQUFTQyxFQUFPbHBCLEdBSW5ELE9BSEFqRSxLQUFLb3RCLFdBQWFwdEIsS0FBS290QixZQUFjLElBQ3BDcHRCLEtBQUtvdEIsV0FBVyxJQUFNRCxHQUFTbnRCLEtBQUtvdEIsV0FBVyxJQUFNRCxJQUFVLElBQzdEbnVCLEtBQUtpRixHQUNEakUsTUFhVG1vQixFQUFROXNCLFVBQVUwYSxLQUFPLFNBQVNvWCxFQUFPbHBCLEdBQ3ZDLFNBQVM0UixJQUNQN1YsS0FBS2dXLElBQUltWCxFQUFPdFgsR0FDaEI1UixFQUFHekMsTUFBTXhCLEtBQU05QixXQUtqQixPQUZBMlgsRUFBRzVSLEdBQUtBLEVBQ1JqRSxLQUFLNlYsR0FBR3NYLEVBQU90WCxHQUNSN1YsTUFhVG1vQixFQUFROXNCLFVBQVUyYSxJQUNsQm1TLEVBQVE5c0IsVUFBVTRhLGVBQ2xCa1MsRUFBUTlzQixVQUFVNmEsbUJBQ2xCaVMsRUFBUTlzQixVQUFVZ3lCLG9CQUFzQixTQUFTRixFQUFPbHBCLEdBSXRELEdBSEFqRSxLQUFLb3RCLFdBQWFwdEIsS0FBS290QixZQUFjLEdBR2pDLEdBQUtsdkIsVUFBVWhDLE9BRWpCLE9BREE4RCxLQUFLb3RCLFdBQWEsR0FDWHB0QixLQUlULElBVUlrTyxFQVZBb2YsRUFBWXR0QixLQUFLb3RCLFdBQVcsSUFBTUQsR0FDdEMsSUFBS0csRUFBVyxPQUFPdHRCLEtBR3ZCLEdBQUksR0FBSzlCLFVBQVVoQyxPQUVqQixjQURPOEQsS0FBS290QixXQUFXLElBQU1ELEdBQ3RCbnRCLEtBS1QsSUFBSyxJQUFJdkcsRUFBSSxFQUFHQSxFQUFJNnpCLEVBQVVweEIsT0FBUXpDLElBRXBDLElBREF5VSxFQUFLb2YsRUFBVTd6QixNQUNKd0ssR0FBTWlLLEVBQUdqSyxLQUFPQSxFQUFJLENBQzdCcXBCLEVBQVVudUIsT0FBTzFGLEVBQUcsR0FDcEIsTUFHSixPQUFPdUcsTUFXVG1vQixFQUFROXNCLFVBQVU4YSxLQUFPLFNBQVNnWCxHQUNoQ250QixLQUFLb3RCLFdBQWFwdEIsS0FBS290QixZQUFjLEdBQ3JDLElBQUk1aEIsRUFBTyxHQUFHN00sTUFBTS9FLEtBQUtzRSxVQUFXLEdBQ2hDb3ZCLEVBQVl0dEIsS0FBS290QixXQUFXLElBQU1ELEdBRXRDLEdBQUlHLEVBRUYsSUFBSyxJQUFJN3pCLEVBQUksRUFBRzhYLEdBRGhCK2IsRUFBWUEsRUFBVTN1QixNQUFNLElBQ0l6QyxPQUFRekMsRUFBSThYLElBQU85WCxFQUNqRDZ6QixFQUFVN3pCLEdBQUcrSCxNQUFNeEIsS0FBTXdMLEdBSTdCLE9BQU94TCxNQVdUbW9CLEVBQVE5c0IsVUFBVWtFLFVBQVksU0FBUzR0QixHQUVyQyxPQURBbnRCLEtBQUtvdEIsV0FBYXB0QixLQUFLb3RCLFlBQWMsR0FDOUJwdEIsS0FBS290QixXQUFXLElBQU1ELElBQVUsSUFXekNoRixFQUFROXNCLFVBQVVreUIsYUFBZSxTQUFTSixHQUN4QyxRQUFVbnRCLEtBQUtULFVBQVU0dEIsR0FBT2p4QixTLGNDNUpsQzFDLEVBQU9ELFFBV1AsU0FBYWtDLEVBQUtnaEMsRUFBSXg0QixHQUVwQixPQURBeEksRUFBSW9hLEdBQUc0bUIsRUFBSXg0QixHQUNKLENBQ0xvbUIsUUFBUyxXQUNQNXVCLEVBQUl3YSxlQUFld21CLEVBQUl4NEIsTyxjQ2hCN0IsSUFBSXRGLEVBQVEsR0FBR0EsTUFXZm5GLEVBQU9ELFFBQVUsU0FBU2tDLEVBQUt3SSxHQUU3QixHQURJLGlCQUFtQkEsSUFBSUEsRUFBS3hJLEVBQUl3SSxJQUNoQyxtQkFBcUJBLEVBQUksTUFBTSxJQUFJOUYsTUFBTSw4QkFDN0MsSUFBSXFOLEVBQU83TSxFQUFNL0UsS0FBS3NFLFVBQVcsR0FDakMsT0FBTyxXQUNMLE9BQU8rRixFQUFHekMsTUFBTS9GLEVBQUsrUCxFQUFLckUsT0FBT3hJLEVBQU0vRSxLQUFLc0UsZ0IsNkJDbEJoRC9ELE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUMzQ21CLE9BQU8sSUFFVG5CLEVBQVFvckIsUUFnQlIsU0FBOEIrSSxFQUFNenVCLEVBQU93dUIsR0FDekMsT0FBTzZQLEVBQWUzWSxRQUFRK0ksRUFBS3B1QixNQUFNb3VCLEVBQU16dUIsRUFBT3d1QixJQWZ4RCxJQUlnQ2h5QixFQUo1QjhoQyxFQUFnQixFQUFRLEtBRXhCRCxHQUU0QjdoQyxFQUZZOGhDLElBRVM5aEMsRUFBSVosV0FBYVksRUFBTSxDQUFFa3BCLFFBQVNscEIsSSxnQkNYdkYsSUFBSWlYLEVBQVksRUFBUSxJQXlCcEI4cUIsRUFBVyxDQUNYQyxPQUFPLEVBQ1BDLFFBQVEsRUFDUkMsVUFBVSxFQUNWQyxRQUFRLEVBQ1JDLFFBQVEsRUFDUkMsVUFBVSxFQUNWQyxVQUFVLEdBR1ZDLEVBQW1CLENBQ25CQyxHQUFJLENBQUVBLElBQUksRUFBTUMsSUFBSSxFQUFNQyxJQUFJLEdBQzlCRCxHQUFJLENBQUVBLElBQUksR0FDVkMsR0FBSSxDQUFFQyxPQUFPLEVBQU1GLElBQUksRUFBTUMsSUFBSSxHQUNqQ0UsS0FBTSxDQUFFajJCLE1BQU0sRUFBTWsyQixNQUFNLEVBQU1DLFFBQVEsR0FDeENDLEdBQUksQ0FBRUEsSUFBSSxHQUNWampDLEVBQUcsQ0FBRUEsR0FBRyxHQUNSa2pDLEdBQUksQ0FBRWxqQyxHQUFHLEdBQ1RtakMsR0FBSSxDQUFFbmpDLEdBQUcsR0FDVG9qQyxHQUFJLENBQUVwakMsR0FBRyxHQUNUcWpDLEdBQUksQ0FBRXJqQyxHQUFHLEdBQ1RzakMsR0FBSSxDQUFFdGpDLEdBQUcsR0FDVHVqQyxHQUFJLENBQUV2akMsR0FBRyxHQUNUcWlDLE9BQVFKLEVBQ1JDLE1BQU9ELEVBQ1B1QixPQUFRdkIsRUFDUkssT0FBUUwsRUFDUk0sU0FBVU4sRUFDVk8sU0FBVVAsRUFDVkUsT0FBUSxDQUFFQSxRQUFRLEdBQ2xCQyxTQUFVLENBQUVBLFVBQVUsSUFHdEJxQixFQUFlLENBQ2ZwaUMsVUFBVyxLQUNYcWlDLE1BQU0sRUFDTnYyQixNQUFNLEVBQ053MkIsVUFBVSxFQUNWQyxJQUFJLEVBQ0pDLEtBQUssRUFDTEMsU0FBUyxFQUNUQyxPQUFPLEVBQ1BDLE9BQU8sRUFDUEMsSUFBSSxFQUNKQyxLQUFLLEVBQ0xoQyxPQUFPLEVBQ1BpQyxTQUFTLEVBQ1RDLFFBQVEsRUFDUnJCLE1BQU0sRUFDTnNCLE1BQU0sRUFDTkMsT0FBTyxFQUNQejlCLFFBQVEsRUFDUjA5QixPQUFPLEVBQ1BDLEtBQUssR0FHTEMsRUFBeUIsQ0FDekJwakMsVUFBVyxLQUNYcWpDLE1BQU0sRUFDTkMsS0FBSyxHQUVMQyxFQUEwQixDQUMxQnZqQyxVQUFXLEtBQ1h3akMsSUFBSSxFQUNKQyxJQUFJLEVBQ0pDLElBQUksRUFDSkMsSUFBSSxFQUNKQyxPQUFPLEVBQ1Asa0JBQWtCLEVBQ2xCQyxlQUFlLEVBQ2ZqVSxNQUFNLEVBQ05qWCxPQUFPLEdBR1BtckIsRUFBYSxRQUVqQixTQUFTbnVCLEVBQU9vdUIsRUFBS3I0QixHQUNqQnRJLEtBQUs0Z0MsU0FBV3Q0QixHQUFXLEdBQzNCdEksS0FBSzZnQyxLQUFPRixHQUFPLEdBRW5CM2dDLEtBQUs4Z0MsU0FBVyxHQUNoQjlnQyxLQUFLK2dDLFlBQWMsR0FDbkIvZ0MsS0FBS2doQyxhQUFlLEdBQ3BCaGhDLEtBQUtpaEMsU0FBVyxLQUNoQmpoQyxLQUFLa2hDLE9BQVMsR0FDZGxoQyxLQUFLbWhDLGdCQUFrQixHQUV2Qm5oQyxLQUFLb2hDLFdBQWEsRUFDbEJwaEMsS0FBS3FoQyxTQUFXLEtBRWhCcmhDLEtBQUtzaEMsbUJBQ0Qsa0JBQW1CdGhDLEtBQUs0Z0MsV0FDaEI1Z0MsS0FBSzRnQyxTQUFTVyxlQUNmdmhDLEtBQUs0Z0MsU0FBU1ksUUFDekJ4aEMsS0FBS3loQyx5QkFDRCw0QkFBNkJ6aEMsS0FBSzRnQyxXQUMxQjVnQyxLQUFLNGdDLFNBQVNjLHlCQUNmMWhDLEtBQUs0Z0MsU0FBU1ksUUFFckJ4aEMsS0FBSzRnQyxTQUFTbHVCLFlBQ2RBLEVBQVkxUyxLQUFLNGdDLFNBQVNsdUIsV0FFOUIxUyxLQUFLMmhDLFdBQWEsSUFBSWp2QixFQUFVMVMsS0FBSzRnQyxTQUFVNWdDLE1BRTNDQSxLQUFLNmdDLEtBQUtlLGNBQWM1aEMsS0FBSzZnQyxLQUFLZSxhQUFhNWhDLE1BR3ZELEVBQVEsR0FBUixDQUFvQnVTLEVBQVEsRUFBUSxLQUFVc3ZCLGNBRTlDdHZCLEVBQU9sWCxVQUFVeW1DLGdCQUFrQixTQUFTQyxHQUNsQixPQUFsQi9oQyxLQUFLcWhDLFNBQ0RyaEMsS0FBSzJoQyxXQUFXSyxlQUFpQkQsRUFDakMvaEMsS0FBS29oQyxXQUFhLEVBRWxCcGhDLEtBQUtvaEMsV0FBYXBoQyxLQUFLMmhDLFdBQVdLLGNBQWdCRCxFQUVuRC9oQyxLQUFLb2hDLFdBQWFwaEMsS0FBS3FoQyxTQUFXLEVBQ3pDcmhDLEtBQUtxaEMsU0FBV3JoQyxLQUFLMmhDLFdBQVdNLG9CQUlwQzF2QixFQUFPbFgsVUFBVTZtQyxPQUFTLFNBQVNoN0IsR0FDL0JsSCxLQUFLOGhDLGdCQUFnQixHQUNyQjloQyxLQUFLcWhDLFdBRURyaEMsS0FBSzZnQyxLQUFLcUIsUUFBUWxpQyxLQUFLNmdDLEtBQUtxQixPQUFPaDdCLElBRzNDcUwsRUFBT2xYLFVBQVU4bUMsY0FBZ0IsU0FBU25vQyxHQU90QyxHQU5JZ0csS0FBS3NoQyxxQkFDTHRuQyxFQUFPQSxFQUFLcWUsZUFHaEJyWSxLQUFLOGdDLFNBQVc5bUMsR0FFWGdHLEtBQUs0Z0MsU0FBU1ksU0FBV3huQyxLQUFRZ2tDLEVBQ2xDLElBQ0ksSUFBSS92QixHQUNIQSxFQUFLak8sS0FBS2toQyxPQUFPbGhDLEtBQUtraEMsT0FBT2hsQyxPQUFTLE1BQ3ZDOGhDLEVBQWlCaGtDLEdBQ2pCZ0csS0FBS29pQyxXQUFXbjBCLEtBSXBCak8sS0FBSzRnQyxTQUFTWSxTQUFheG5DLEtBQVFnbEMsSUFDbkNoL0IsS0FBS2toQyxPQUFPbGlDLEtBQUtoRixHQUNiQSxLQUFRZ21DLEVBQXdCaGdDLEtBQUttaEMsZ0JBQWdCbmlDLE1BQUssR0FDckRoRixLQUFRbW1DLEdBQ2JuZ0MsS0FBS21oQyxnQkFBZ0JuaUMsTUFBSyxJQUc5QmdCLEtBQUs2Z0MsS0FBS3NCLGVBQWVuaUMsS0FBSzZnQyxLQUFLc0IsY0FBY25vQyxHQUNqRGdHLEtBQUs2Z0MsS0FBS3dCLFlBQVdyaUMsS0FBS2loQyxTQUFXLEtBRzdDMXVCLEVBQU9sWCxVQUFVaW5DLGFBQWUsV0FDNUJ0aUMsS0FBSzhoQyxnQkFBZ0IsR0FFakI5aEMsS0FBS2loQyxXQUNEamhDLEtBQUs2Z0MsS0FBS3dCLFdBQ1ZyaUMsS0FBSzZnQyxLQUFLd0IsVUFBVXJpQyxLQUFLOGdDLFNBQVU5Z0MsS0FBS2loQyxVQUM1Q2poQyxLQUFLaWhDLFNBQVcsT0FJZmpoQyxLQUFLNGdDLFNBQVNZLFNBQ2Z4aEMsS0FBSzZnQyxLQUFLdUIsWUFDVnBpQyxLQUFLOGdDLFlBQVk5QixHQUVqQmgvQixLQUFLNmdDLEtBQUt1QixXQUFXcGlDLEtBQUs4Z0MsVUFHOUI5Z0MsS0FBSzhnQyxTQUFXLElBR3BCdnVCLEVBQU9sWCxVQUFVK21DLFdBQWEsU0FBU3BvQyxHQVduQyxHQVZBZ0csS0FBSzhoQyxnQkFBZ0IsR0FFakI5aEMsS0FBS3NoQyxxQkFDTHRuQyxFQUFPQSxFQUFLcWUsZ0JBR1pyZSxLQUFRZ21DLEdBQTBCaG1DLEtBQVFtbUMsSUFDMUNuZ0MsS0FBS21oQyxnQkFBZ0J4RSxPQUlyQjM4QixLQUFLa2hDLE9BQU9obEMsUUFDVGxDLEtBQVFnbEMsSUFBaUJoL0IsS0FBSzRnQyxTQUFTWSxRQVlsQ3hoQyxLQUFLNGdDLFNBQVNZLFNBQXFCLE9BQVR4bkMsR0FBMEIsTUFBVEEsSUFDbkRnRyxLQUFLbWlDLGNBQWNub0MsR0FDbkJnRyxLQUFLdWlDLHdCQWJQLENBQ0UsSUFBSTlsQixFQUFNemMsS0FBS2toQyxPQUFPaG9CLFlBQVlsZixHQUNsQyxJQUFhLElBQVR5aUIsRUFDQSxHQUFJemMsS0FBSzZnQyxLQUFLdUIsV0FFVixJQURBM2xCLEVBQU16YyxLQUFLa2hDLE9BQU9obEMsT0FBU3VnQixFQUNwQkEsS0FBT3pjLEtBQUs2Z0MsS0FBS3VCLFdBQVdwaUMsS0FBS2toQyxPQUFPdkUsWUFDNUMzOEIsS0FBS2toQyxPQUFPaGxDLE9BQVN1Z0IsTUFDWixNQUFUemlCLEdBQWlCZ0csS0FBSzRnQyxTQUFTWSxVQUN0Q3hoQyxLQUFLbWlDLGNBQWNub0MsR0FDbkJnRyxLQUFLdWlDLHNCQVFqQmh3QixFQUFPbFgsVUFBVW1uQyxpQkFBbUIsV0FFNUJ4aUMsS0FBSzRnQyxTQUFTWSxTQUNkeGhDLEtBQUs0Z0MsU0FBUzZCLHNCQUNkemlDLEtBQUttaEMsZ0JBQWdCbmhDLEtBQUttaEMsZ0JBQWdCamxDLE9BQVMsR0FFbkQ4RCxLQUFLdWlDLG1CQUVMdmlDLEtBQUtzaUMsZ0JBSWIvdkIsRUFBT2xYLFVBQVVrbkMsaUJBQW1CLFdBQ2hDLElBQUl2b0MsRUFBT2dHLEtBQUs4Z0MsU0FFaEI5Z0MsS0FBS3NpQyxlQUlEdGlDLEtBQUtraEMsT0FBT2xoQyxLQUFLa2hDLE9BQU9obEMsT0FBUyxLQUFPbEMsSUFDcENnRyxLQUFLNmdDLEtBQUt1QixZQUNWcGlDLEtBQUs2Z0MsS0FBS3VCLFdBQVdwb0MsR0FFekJnRyxLQUFLa2hDLE9BQU92RSxRQUtwQnBxQixFQUFPbFgsVUFBVXFuQyxhQUFlLFNBQVMxb0MsR0FDakNnRyxLQUFLeWhDLDJCQUNMem5DLEVBQU9BLEVBQUtxZSxlQUVoQnJZLEtBQUsrZ0MsWUFBYy9tQyxHQUd2QnVZLEVBQU9sWCxVQUFVc25DLGFBQWUsU0FBU2pvQyxHQUNyQ3NGLEtBQUtnaEMsY0FBZ0J0bUMsR0FHekI2WCxFQUFPbFgsVUFBVXVuQyxZQUFjLFdBQ3ZCNWlDLEtBQUs2Z0MsS0FBS2dDLGFBQ1Y3aUMsS0FBSzZnQyxLQUFLZ0MsWUFBWTdpQyxLQUFLK2dDLFlBQWEvZ0MsS0FBS2doQyxjQUU3Q2hoQyxLQUFLaWhDLFdBQ0o5bUMsT0FBT2tCLFVBQVVDLGVBQWUxQixLQUFLb0csS0FBS2loQyxTQUFVamhDLEtBQUsrZ0MsZUFFMUQvZ0MsS0FBS2loQyxTQUFTamhDLEtBQUsrZ0MsYUFBZS9nQyxLQUFLZ2hDLGNBRTNDaGhDLEtBQUsrZ0MsWUFBYyxHQUNuQi9nQyxLQUFLZ2hDLGFBQWUsSUFHeEJ6dUIsRUFBT2xYLFVBQVV5bkMsb0JBQXNCLFNBQVNwb0MsR0FDNUMsSUFBSXFvQyxFQUFNcm9DLEVBQU1zb0MsT0FBT3RDLEdBQ25CMW1DLEVBQU8rb0MsRUFBTSxFQUFJcm9DLEVBQVFBLEVBQU0yVixPQUFPLEVBQUcweUIsR0FNN0MsT0FKSS9pQyxLQUFLc2hDLHFCQUNMdG5DLEVBQU9BLEVBQUtxZSxlQUdUcmUsR0FHWHVZLEVBQU9sWCxVQUFVNG5DLGNBQWdCLFNBQVN2b0MsR0FDdEMsR0FBSXNGLEtBQUs2Z0MsS0FBS3FDLHdCQUF5QixDQUNuQyxJQUFJbHBDLEVBQU9nRyxLQUFLOGlDLG9CQUFvQnBvQyxHQUNwQ3NGLEtBQUs2Z0MsS0FBS3FDLHdCQUF3QixJQUFNbHBDLEVBQU0sSUFBTVUsS0FJNUQ2WCxFQUFPbFgsVUFBVTZuQyx3QkFBMEIsU0FBU3hvQyxHQUNoRCxHQUFJc0YsS0FBSzZnQyxLQUFLcUMsd0JBQXlCLENBQ25DLElBQUlscEMsRUFBT2dHLEtBQUs4aUMsb0JBQW9CcG9DLEdBQ3BDc0YsS0FBSzZnQyxLQUFLcUMsd0JBQXdCLElBQU1scEMsRUFBTSxJQUFNVSxLQUk1RDZYLEVBQU9sWCxVQUFVOG5DLFVBQVksU0FBU3pvQyxHQUNsQ3NGLEtBQUs4aEMsZ0JBQWdCLEdBRWpCOWhDLEtBQUs2Z0MsS0FBS3NDLFdBQVduakMsS0FBSzZnQyxLQUFLc0MsVUFBVXpvQyxHQUN6Q3NGLEtBQUs2Z0MsS0FBS3VDLGNBQWNwakMsS0FBSzZnQyxLQUFLdUMsZ0JBRzFDN3dCLEVBQU9sWCxVQUFVZ29DLFFBQVUsU0FBUzNvQyxHQUNoQ3NGLEtBQUs4aEMsZ0JBQWdCLEdBRWpCOWhDLEtBQUs0Z0MsU0FBU1ksU0FBV3hoQyxLQUFLNGdDLFNBQVMwQyxnQkFDbkN0akMsS0FBSzZnQyxLQUFLMEMsY0FBY3ZqQyxLQUFLNmdDLEtBQUswQyxlQUNsQ3ZqQyxLQUFLNmdDLEtBQUtxQixRQUFRbGlDLEtBQUs2Z0MsS0FBS3FCLE9BQU94bkMsR0FDbkNzRixLQUFLNmdDLEtBQUsyQyxZQUFZeGpDLEtBQUs2Z0MsS0FBSzJDLGNBRXBDeGpDLEtBQUttakMsVUFBVSxVQUFZem9DLEVBQVEsT0FJM0M2WCxFQUFPbFgsVUFBVXk0QixRQUFVLFNBQVN6bkIsR0FDNUJyTSxLQUFLNmdDLEtBQUsvTSxTQUFTOXpCLEtBQUs2Z0MsS0FBSy9NLFFBQVF6bkIsSUFHN0NrRyxFQUFPbFgsVUFBVW9vQyxNQUFRLFdBQ3JCLEdBQUl6akMsS0FBSzZnQyxLQUFLdUIsV0FDVixJQUNJLElBQUkzb0MsRUFBSXVHLEtBQUtraEMsT0FBT2hsQyxPQUNwQnpDLEVBQUksRUFDSnVHLEtBQUs2Z0MsS0FBS3VCLFdBQVdwaUMsS0FBS2toQyxTQUFTem5DLEtBR3ZDdUcsS0FBSzZnQyxLQUFLNEMsT0FBT3pqQyxLQUFLNmdDLEtBQUs0QyxTQUluQ2x4QixFQUFPbFgsVUFBVTI5QixNQUFRLFdBQ2pCaDVCLEtBQUs2Z0MsS0FBSzZDLFNBQVMxakMsS0FBSzZnQyxLQUFLNkMsVUFDakMxakMsS0FBSzJoQyxXQUFXM0ksUUFFaEJoNUIsS0FBSzhnQyxTQUFXLEdBQ2hCOWdDLEtBQUsrZ0MsWUFBYyxHQUNuQi9nQyxLQUFLaWhDLFNBQVcsS0FDaEJqaEMsS0FBS2toQyxPQUFTLEdBRVZsaEMsS0FBSzZnQyxLQUFLZSxjQUFjNWhDLEtBQUs2Z0MsS0FBS2UsYUFBYTVoQyxPQUl2RHVTLEVBQU9sWCxVQUFVc29DLGNBQWdCLFNBQVN6OEIsR0FDdENsSCxLQUFLZzVCLFFBQ0xoNUIsS0FBS2dULElBQUk5TCxJQUdicUwsRUFBT2xYLFVBQVV1YyxNQUFRLFNBQVNnc0IsR0FDOUI1akMsS0FBSzJoQyxXQUFXL3BCLE1BQU1nc0IsSUFHMUJyeEIsRUFBT2xYLFVBQVUyWCxJQUFNLFNBQVM0d0IsR0FDNUI1akMsS0FBSzJoQyxXQUFXM3VCLElBQUk0d0IsSUFHeEJyeEIsRUFBT2xYLFVBQVVtL0IsTUFBUSxXQUNyQng2QixLQUFLMmhDLFdBQVduSCxTQUdwQmpvQixFQUFPbFgsVUFBVXdvQyxPQUFTLFdBQ3RCN2pDLEtBQUsyaEMsV0FBV2tDLFVBSXBCdHhCLEVBQU9sWCxVQUFVeW9DLFdBQWF2eEIsRUFBT2xYLFVBQVV1YyxNQUMvQ3JGLEVBQU9sWCxVQUFVNlEsS0FBT3FHLEVBQU9sWCxVQUFVMlgsSUFFekN4WixFQUFPRCxRQUFVZ1osRyxnQkM3WGpCL1ksRUFBT0QsUUFBVW1aLEdBRWpCLElBQUlxeEIsRUFBa0IsRUFBUSxLQUMxQkMsRUFBWSxFQUFRLEtBQ3BCQyxFQUFZLEVBQVEsS0FDcEJDLEVBQVMsRUFBUSxLQUVqQnpxQyxFQUFJLEVBRUowcUMsRUFBTzFxQyxJQUNQMnFDLEVBQWtCM3FDLElBQ2xCNHFDLEVBQWM1cUMsSUFDZDZxQyxFQUFzQjdxQyxJQUN0QjhxQyxFQUEwQjlxQyxJQUMxQitxQyxFQUFzQi9xQyxJQUN0QmdyQyxFQUF5QmhyQyxJQUd6QmlyQyxFQUF3QmpyQyxJQUN4QmtyQyxFQUFvQmxyQyxJQUNwQm1yQyxFQUF1Qm5yQyxJQUN2Qm9yQyxFQUF5QnByQyxJQUN6QnFyQyxFQUF3QnJyQyxJQUN4QnNyQyxFQUF3QnRyQyxJQUN4QnVyQyxFQUF3QnZyQyxJQUd4QndyQyxFQUFxQnhyQyxJQUNyQnlyQyxFQUFpQnpyQyxJQUdqQjByQyxFQUE0QjFyQyxJQUc1QjJyQyxFQUFpQjNyQyxJQUNqQjRyQyxFQUFhNXJDLElBQ2I2ckMsRUFBa0I3ckMsSUFDbEI4ckMsRUFBa0I5ckMsSUFHbEIrckMsRUFBaUIvckMsSUFDakJnc0MsRUFBaUJoc0MsSUFDakJpc0MsRUFBaUJqc0MsSUFDakJrc0MsRUFBaUJsc0MsSUFDakJtc0MsRUFBaUJuc0MsSUFDakJvc0MsRUFBaUJwc0MsSUFDakJxc0MsRUFBV3JzQyxJQUNYc3NDLEVBQWdCdHNDLElBQ2hCdXNDLEVBQWdCdnNDLElBR2hCd3NDLEVBQWlCeHNDLElBQ2pCeXNDLEVBQXFCenNDLElBRXJCMHNDLEVBQWtCMXNDLElBQ2xCMnNDLEVBQWtCM3NDLElBQ2xCNHNDLEVBQWtCNXNDLElBQ2xCNnNDLEVBQWtCN3NDLElBQ2xCOHNDLEVBQWtCOXNDLElBQ2xCK3NDLEVBQWlCL3NDLElBQ2pCZ3RDLEVBQWlCaHRDLElBQ2pCaXRDLEVBQWlCanRDLElBQ2pCa3RDLEVBQWlCbHRDLElBQ2pCbXRDLEVBQWlCbnRDLElBRWpCb3RDLEVBQWlCcHRDLElBQ2pCcXRDLEVBQWlCcnRDLElBQ2pCc3RDLEVBQWlCdHRDLElBQ2pCdXRDLEVBQWlCdnRDLElBQ2pCd3RDLEdBQWdCeHRDLElBQ2hCeXRDLEdBQWdCenRDLElBQ2hCMHRDLEdBQWdCMXRDLElBQ2hCMnRDLEdBQWdCM3RDLElBRWhCNHRDLEdBQWdCNXRDLElBQ2hCNnRDLEdBQXdCN3RDLElBQ3hCOHRDLEdBQWtCOXRDLElBQ2xCK3RDLEdBQW9CL3RDLElBQ3BCZ3VDLEdBQWdCaHVDLElBRWhCd1AsR0FBSSxFQUVKeStCLEdBQWV6K0IsS0FDZjArQixHQUFpQjErQixLQUNqQjIrQixHQUFnQjMrQixLQUVwQixTQUFTNCtCLEdBQVcvdEMsR0FDaEIsTUFBYSxNQUFOQSxHQUFtQixPQUFOQSxHQUFvQixPQUFOQSxHQUFvQixPQUFOQSxHQUFvQixPQUFOQSxFQUdsRSxTQUFTZ3VDLEdBQVlDLEVBQU9DLEVBQVNDLEdBQ2pDLElBQUlDLEVBQVFILEVBQU0xdkIsY0FFbEIsT0FBSTB2QixJQUFVRyxFQUNILFNBQVNwdUMsR0FDUkEsSUFBTW91QyxFQUNObG9DLEtBQUttb0MsT0FBU0gsR0FFZGhvQyxLQUFLbW9DLE9BQVNGLEVBQ2Rqb0MsS0FBS29vQyxXQUlOLFNBQVN0dUMsR0FDUkEsSUFBTW91QyxHQUFTcHVDLElBQU1pdUMsRUFDckIvbkMsS0FBS21vQyxPQUFTSCxHQUVkaG9DLEtBQUttb0MsT0FBU0YsRUFDZGpvQyxLQUFLb29DLFdBTXJCLFNBQVNDLEdBQXVCTixFQUFPTyxHQUNuQyxJQUFJSixFQUFRSCxFQUFNMXZCLGNBRWxCLE9BQU8sU0FBU3ZlLEdBQ1JBLElBQU1vdUMsR0FBU3B1QyxJQUFNaXVDLEVBQ3JCL25DLEtBQUttb0MsT0FBU0csR0FFZHRvQyxLQUFLbW9DLE9BQVM5RCxFQUNkcmtDLEtBQUtvb0MsV0FLakIsU0FBUzExQixHQUFVcEssRUFBU3E0QixHQUN4QjNnQyxLQUFLbW9DLE9BQVNoRSxFQUNkbmtDLEtBQUt1b0MsUUFBVSxHQUNmdm9DLEtBQUtnaUMsY0FBZ0IsRUFDckJoaUMsS0FBS29vQyxPQUFTLEVBQ2Rwb0MsS0FBS3dvQyxjQUFnQixFQUNyQnhvQyxLQUFLeW9DLFdBQWF0RSxFQUNsQm5rQyxLQUFLMG9DLFNBQVdoQixHQUNoQjFuQyxLQUFLNmdDLEtBQU9GLEVBQ1ozZ0MsS0FBSzJvQyxVQUFXLEVBQ2hCM29DLEtBQUs0b0MsUUFBUyxFQUNkNW9DLEtBQUs2b0MsWUFBY3ZnQyxJQUFXQSxFQUFRazVCLFNBQ3RDeGhDLEtBQUs4b0MsbUJBQXFCeGdDLElBQVdBLEVBQVF5Z0MsZ0JBR2pEcjJCLEdBQVVyWCxVQUFVMnRDLFdBQWEsU0FBU2x2QyxHQUM1QixNQUFOQSxHQUNJa0csS0FBS29vQyxPQUFTcG9DLEtBQUtnaUMsZUFDbkJoaUMsS0FBSzZnQyxLQUFLcUIsT0FBT2xpQyxLQUFLaXBDLGVBRTFCanBDLEtBQUttb0MsT0FBUy9ELEVBQ2Rwa0MsS0FBS2dpQyxjQUFnQmhpQyxLQUFLb29DLFFBRTFCcG9DLEtBQUs4b0MsaUJBQ0w5b0MsS0FBSzBvQyxXQUFhaEIsSUFDWixNQUFONXRDLElBRUlrRyxLQUFLb29DLE9BQVNwb0MsS0FBS2dpQyxlQUNuQmhpQyxLQUFLNmdDLEtBQUtxQixPQUFPbGlDLEtBQUtpcEMsZUFFMUJqcEMsS0FBS3lvQyxXQUFhdEUsRUFDbEJua0MsS0FBS21vQyxPQUFTZCxHQUNkcm5DLEtBQUtnaUMsY0FBZ0JoaUMsS0FBS29vQyxTQUlsQzExQixHQUFVclgsVUFBVTZ0QyxvQkFBc0IsU0FBU3B2QyxHQUNyQyxNQUFOQSxFQUNBa0csS0FBS21vQyxPQUFTNUQsRUFDRCxNQUFOenFDLEdBQ1BrRyxLQUFLNmdDLEtBQUtxQixPQUFPbGlDLEtBQUtpcEMsZUFDdEJqcEMsS0FBS2dpQyxjQUFnQmhpQyxLQUFLb29DLFFBQ2IsTUFBTnR1QyxHQUFha0csS0FBSzBvQyxXQUFhaEIsSUFBZ0JHLEdBQVcvdEMsR0FDakVrRyxLQUFLbW9DLE9BQVNoRSxFQUNELE1BQU5ycUMsR0FDUGtHLEtBQUttb0MsT0FBU2xELEVBQ2RqbEMsS0FBS2dpQyxjQUFnQmhpQyxLQUFLb29DLE9BQVMsR0FDdEIsTUFBTnR1QyxHQUNQa0csS0FBS21vQyxPQUFTaEQsRUFDZG5sQyxLQUFLZ2lDLGNBQWdCaGlDLEtBQUtvb0MsT0FBUyxJQUVuQ3BvQyxLQUFLbW9DLE9BQ0Fub0MsS0FBSzZvQyxVQUFtQixNQUFOL3VDLEdBQW1CLE1BQU5BLEVBRTFCdXFDLEVBREE0QixFQUVWam1DLEtBQUtnaUMsY0FBZ0JoaUMsS0FBS29vQyxTQUlsQzExQixHQUFVclgsVUFBVTh0QyxnQkFBa0IsU0FBU3J2QyxJQUNqQyxNQUFOQSxHQUFtQixNQUFOQSxHQUFhK3RDLEdBQVcvdEMsTUFDckNrRyxLQUFLb3BDLFdBQVcsaUJBQ2hCcHBDLEtBQUttb0MsT0FBU3pELEVBQ2Qxa0MsS0FBS29vQyxXQUliMTFCLEdBQVVyWCxVQUFVZ3VDLDRCQUE4QixTQUFTdnZDLEdBQ25EK3RDLEdBQVcvdEMsS0FDQSxNQUFOQSxFQUNMa0csS0FBS21vQyxPQUFTaEUsRUFDUG5rQyxLQUFLMG9DLFdBQWFoQixHQUNmLE1BQU41dEMsR0FBbUIsTUFBTkEsRUFDYmtHLEtBQUttb0MsT0FBU2pDLEdBRWRsbUMsS0FBS21vQyxPQUFTaEUsRUFDZG5rQyxLQUFLb29DLFdBR1Rwb0MsS0FBS21vQyxPQUFTM0QsRUFDZHhrQyxLQUFLZ2lDLGNBQWdCaGlDLEtBQUtvb0MsVUFJbEMxMUIsR0FBVXJYLFVBQVVpdUMsd0JBQTBCLFNBQVN4dkMsSUFDekMsTUFBTkEsR0FBYSt0QyxHQUFXL3RDLE1BQ3hCa0csS0FBS29wQyxXQUFXLGNBQ2hCcHBDLEtBQUttb0MsT0FBUzFELEVBQ2R6a0MsS0FBS29vQyxXQUliMTFCLEdBQVVyWCxVQUFVa3VDLDJCQUE2QixTQUFTenZDLEdBRTVDLE1BQU5BLElBQ0FrRyxLQUFLbW9DLE9BQVNoRSxFQUNkbmtDLEtBQUtnaUMsY0FBZ0JoaUMsS0FBS29vQyxPQUFTLElBSTNDMTFCLEdBQVVyWCxVQUFVbXVDLDBCQUE0QixTQUFTMXZDLEdBQzNDLE1BQU5BLEdBQ0FrRyxLQUFLNmdDLEtBQUt5QixlQUNWdGlDLEtBQUttb0MsT0FBU2hFLEVBQ2Rua0MsS0FBS2dpQyxjQUFnQmhpQyxLQUFLb29DLE9BQVMsR0FDdEIsTUFBTnR1QyxFQUNQa0csS0FBS21vQyxPQUFTN0QsRUFDTnVELEdBQVcvdEMsS0FDbkJrRyxLQUFLbW9DLE9BQVN4RCxFQUNkM2tDLEtBQUtnaUMsY0FBZ0JoaUMsS0FBS29vQyxTQUlsQzExQixHQUFVclgsVUFBVW91Qyx1QkFBeUIsU0FBUzN2QyxHQUN4QyxNQUFOQSxHQUNBa0csS0FBSzZnQyxLQUFLMkIsbUJBQ1Z4aUMsS0FBS21vQyxPQUFTaEUsRUFDZG5rQyxLQUFLZ2lDLGNBQWdCaGlDLEtBQUtvb0MsT0FBUyxHQUMzQlAsR0FBVy90QyxLQUNuQmtHLEtBQUttb0MsT0FBU3pELEVBQ2Qxa0MsS0FBS29vQyxXQUliMTFCLEdBQVVyWCxVQUFVcXVDLHNCQUF3QixTQUFTNXZDLElBQ3ZDLE1BQU5BLEdBQW1CLE1BQU5BLEdBQW1CLE1BQU5BLEdBQWErdEMsR0FBVy90QyxNQUNsRGtHLEtBQUs2Z0MsS0FBSzZCLGFBQWExaUMsS0FBS2lwQyxlQUM1QmpwQyxLQUFLZ2lDLGVBQWlCLEVBQ3RCaGlDLEtBQUttb0MsT0FBU3ZELEVBQ2Q1a0MsS0FBS29vQyxXQUliMTFCLEdBQVVyWCxVQUFVc3VDLHlCQUEyQixTQUFTN3ZDLEdBQzFDLE1BQU5BLEVBQ0FrRyxLQUFLbW9DLE9BQVN0RCxFQUNELE1BQU4vcUMsR0FBbUIsTUFBTkEsR0FDcEJrRyxLQUFLNmdDLEtBQUsrQixjQUNWNWlDLEtBQUttb0MsT0FBU3pELEVBQ2Qxa0MsS0FBS29vQyxVQUNHUCxHQUFXL3RDLEtBQ25Ca0csS0FBSzZnQyxLQUFLK0IsY0FDVjVpQyxLQUFLbW9DLE9BQVN4RCxFQUNkM2tDLEtBQUtnaUMsY0FBZ0JoaUMsS0FBS29vQyxTQUlsQzExQixHQUFVclgsVUFBVXV1QywyQkFBNkIsU0FBUzl2QyxHQUM1QyxNQUFOQSxHQUNBa0csS0FBS21vQyxPQUFTckQsRUFDZDlrQyxLQUFLZ2lDLGNBQWdCaGlDLEtBQUtvb0MsT0FBUyxHQUN0QixNQUFOdHVDLEdBQ1BrRyxLQUFLbW9DLE9BQVNwRCxFQUNkL2tDLEtBQUtnaUMsY0FBZ0JoaUMsS0FBS29vQyxPQUFTLEdBQzNCUCxHQUFXL3RDLEtBQ25Ca0csS0FBS21vQyxPQUFTbkQsRUFDZGhsQyxLQUFLZ2lDLGNBQWdCaGlDLEtBQUtvb0MsT0FDMUJwb0MsS0FBS29vQyxXQUliMTFCLEdBQVVyWCxVQUFVd3VDLG1DQUFxQyxTQUFTL3ZDLEdBQ3BELE1BQU5BLEdBQ0FrRyxLQUFLb3BDLFdBQVcsZ0JBQ2hCcHBDLEtBQUs2Z0MsS0FBSytCLGNBQ1Y1aUMsS0FBS21vQyxPQUFTekQsR0FDUDFrQyxLQUFLOG9DLGlCQUF5QixNQUFOaHZDLElBQy9Ca0csS0FBS29wQyxXQUFXLGdCQUNoQnBwQyxLQUFLeW9DLFdBQWF6b0MsS0FBS21vQyxPQUN2Qm5vQyxLQUFLbW9DLE9BQVNkLEdBQ2RybkMsS0FBS2dpQyxjQUFnQmhpQyxLQUFLb29DLFNBSWxDMTFCLEdBQVVyWCxVQUFVeXVDLG1DQUFxQyxTQUFTaHdDLEdBQ3BELE1BQU5BLEdBQ0FrRyxLQUFLb3BDLFdBQVcsZ0JBQ2hCcHBDLEtBQUs2Z0MsS0FBSytCLGNBQ1Y1aUMsS0FBS21vQyxPQUFTekQsR0FDUDFrQyxLQUFLOG9DLGlCQUF5QixNQUFOaHZDLElBQy9Ca0csS0FBS29wQyxXQUFXLGdCQUNoQnBwQyxLQUFLeW9DLFdBQWF6b0MsS0FBS21vQyxPQUN2Qm5vQyxLQUFLbW9DLE9BQVNkLEdBQ2RybkMsS0FBS2dpQyxjQUFnQmhpQyxLQUFLb29DLFNBSWxDMTFCLEdBQVVyWCxVQUFVMHVDLCtCQUFpQyxTQUFTandDLEdBQ3REK3RDLEdBQVcvdEMsSUFBWSxNQUFOQSxHQUNqQmtHLEtBQUtvcEMsV0FBVyxnQkFDaEJwcEMsS0FBSzZnQyxLQUFLK0IsY0FDVjVpQyxLQUFLbW9DLE9BQVN6RCxFQUNkMWtDLEtBQUtvb0MsVUFDRXBvQyxLQUFLOG9DLGlCQUF5QixNQUFOaHZDLElBQy9Ca0csS0FBS29wQyxXQUFXLGdCQUNoQnBwQyxLQUFLeW9DLFdBQWF6b0MsS0FBS21vQyxPQUN2Qm5vQyxLQUFLbW9DLE9BQVNkLEdBQ2RybkMsS0FBS2dpQyxjQUFnQmhpQyxLQUFLb29DLFNBSWxDMTFCLEdBQVVyWCxVQUFVMnVDLHdCQUEwQixTQUFTbHdDLEdBQ25Ea0csS0FBS21vQyxPQUNLLE1BQU5ydUMsRUFDTTByQyxFQUNNLE1BQU4xckMsRUFDSXNyQyxFQUNBRixHQUdsQnh5QixHQUFVclgsVUFBVTR1QyxvQkFBc0IsU0FBU253QyxHQUNyQyxNQUFOQSxJQUNBa0csS0FBSzZnQyxLQUFLb0MsY0FBY2pqQyxLQUFLaXBDLGVBQzdCanBDLEtBQUttb0MsT0FBU2hFLEVBQ2Rua0MsS0FBS2dpQyxjQUFnQmhpQyxLQUFLb29DLE9BQVMsSUFJM0MxMUIsR0FBVXJYLFVBQVU2dUMsOEJBQWdDLFNBQVNwd0MsR0FDL0MsTUFBTkEsSUFDQWtHLEtBQUs2Z0MsS0FBS3FDLHdCQUF3QmxqQyxLQUFLaXBDLGVBQ3ZDanBDLEtBQUttb0MsT0FBU2hFLEVBQ2Rua0MsS0FBS2dpQyxjQUFnQmhpQyxLQUFLb29DLE9BQVMsSUFJM0MxMUIsR0FBVXJYLFVBQVU4dUMsb0JBQXNCLFNBQVNyd0MsR0FDckMsTUFBTkEsR0FDQWtHLEtBQUttb0MsT0FBUzlDLEVBQ2RybEMsS0FBS2dpQyxjQUFnQmhpQyxLQUFLb29DLE9BQVMsR0FFbkNwb0MsS0FBS21vQyxPQUFTakQsR0FJdEJ4eUIsR0FBVXJYLFVBQVUrdUMsZ0JBQWtCLFNBQVN0d0MsR0FDakMsTUFBTkEsSUFBV2tHLEtBQUttb0MsT0FBUzdDLElBR2pDNXlCLEdBQVVyWCxVQUFVZ3ZDLG9CQUFzQixTQUFTdndDLEdBRTNDa0csS0FBS21vQyxPQURDLE1BQU5ydUMsRUFDY3lyQyxFQUVBRixHQUl0QjN5QixHQUFVclgsVUFBVWl2QyxvQkFBc0IsU0FBU3h3QyxHQUNyQyxNQUFOQSxHQUVBa0csS0FBSzZnQyxLQUFLc0MsVUFDTm5qQyxLQUFLdW9DLFFBQVFuckMsVUFBVTRDLEtBQUtnaUMsY0FBZWhpQyxLQUFLb29DLE9BQVMsSUFFN0Rwb0MsS0FBS21vQyxPQUFTaEUsRUFDZG5rQyxLQUFLZ2lDLGNBQWdCaGlDLEtBQUtvb0MsT0FBUyxHQUN0QixNQUFOdHVDLElBQ1BrRyxLQUFLbW9DLE9BQVM5QyxJQUt0QjN5QixHQUFVclgsVUFBVWt2QyxtQkFBcUJ6QyxHQUNyQyxJQUNBckMsRUFDQVAsR0FFSnh5QixHQUFVclgsVUFBVW12QyxtQkFBcUIxQyxHQUNyQyxJQUNBcEMsRUFDQVIsR0FFSnh5QixHQUFVclgsVUFBVW92QyxtQkFBcUIzQyxHQUNyQyxJQUNBbkMsRUFDQVQsR0FFSnh5QixHQUFVclgsVUFBVXF2QyxtQkFBcUI1QyxHQUNyQyxJQUNBbEMsRUFDQVYsR0FFSnh5QixHQUFVclgsVUFBVXN2QyxtQkFBcUI3QyxHQUNyQyxJQUNBakMsRUFDQVgsR0FHSnh5QixHQUFVclgsVUFBVXV2QyxtQkFBcUIsU0FBUzl3QyxHQUNwQyxNQUFOQSxHQUNBa0csS0FBS21vQyxPQUFTckMsRUFDZDlsQyxLQUFLZ2lDLGNBQWdCaGlDLEtBQUtvb0MsT0FBUyxJQUVuQ3BvQyxLQUFLbW9DLE9BQVNqRCxFQUNkbGxDLEtBQUtvb0MsV0FJYjExQixHQUFVclgsVUFBVXd2QyxjQUFnQixTQUFTL3dDLEdBQy9CLE1BQU5BLElBQVdrRyxLQUFLbW9DLE9BQVNwQyxJQUdqQ3J6QixHQUFVclgsVUFBVXl2QyxrQkFBb0IsU0FBU2h4QyxHQUM5QmtHLEtBQUttb0MsT0FBVixNQUFOcnVDLEVBQXlCa3NDLEVBQ1ZGLEdBR3ZCcHpCLEdBQVVyWCxVQUFVMHZDLGtCQUFvQixTQUFTanhDLEdBQ25DLE1BQU5BLEdBRUFrRyxLQUFLNmdDLEtBQUt3QyxRQUNOcmpDLEtBQUt1b0MsUUFBUW5yQyxVQUFVNEMsS0FBS2dpQyxjQUFlaGlDLEtBQUtvb0MsT0FBUyxJQUU3RHBvQyxLQUFLbW9DLE9BQVNoRSxFQUNkbmtDLEtBQUtnaUMsY0FBZ0JoaUMsS0FBS29vQyxPQUFTLEdBQ3RCLE1BQU50dUMsSUFDUGtHLEtBQUttb0MsT0FBU3JDLElBS3RCcHpCLEdBQVVyWCxVQUFVMnZDLG9CQUFzQixTQUFTbHhDLEdBQ3JDLE1BQU5BLEdBQW1CLE1BQU5BLEVBQ2JrRyxLQUFLbW9DLE9BQVNoQyxFQUNELE1BQU5yc0MsR0FBbUIsTUFBTkEsRUFDcEJrRyxLQUFLbW9DLE9BQVN0QixHQUVkN21DLEtBQUttb0MsT0FBUzlELEVBQ2Rya0MsS0FBS29vQyxXQUliMTFCLEdBQVVyWCxVQUFVNHZDLHVCQUF5QixTQUFTbnhDLEdBQzlDa0csS0FBSzBvQyxXQUFhZixJQUF5QixNQUFON3RDLEdBQW1CLE1BQU5BLEVBRTNDa0csS0FBSzBvQyxXQUFhZCxJQUF3QixNQUFOOXRDLEdBQW1CLE1BQU5BLEVBRXJEa0csS0FBS21vQyxPQUFTaEUsRUFEakJua0MsS0FBS21vQyxPQUFTbEIsR0FGZGpuQyxLQUFLbW9DLE9BQVMzQixHQU10Qjl6QixHQUFVclgsVUFBVTZ2QyxvQkFBc0I3QyxHQUN0QyxJQUNBakMsR0FFSjF6QixHQUFVclgsVUFBVTh2QyxvQkFBc0I5QyxHQUN0QyxJQUNBaEMsR0FFSjN6QixHQUFVclgsVUFBVSt2QyxvQkFBc0IvQyxHQUN0QyxJQUNBL0IsR0FFSjV6QixHQUFVclgsVUFBVWd3QyxvQkFBc0JoRCxHQUN0QyxJQUNBOUIsR0FHSjd6QixHQUFVclgsVUFBVWl3QyxvQkFBc0IsU0FBU3h4QyxJQUNyQyxNQUFOQSxHQUFtQixNQUFOQSxHQUFhK3RDLEdBQVcvdEMsTUFDckNrRyxLQUFLMG9DLFNBQVdmLElBRXBCM25DLEtBQUttb0MsT0FBUzlELEVBQ2Rya0MsS0FBS29vQyxVQUdUMTFCLEdBQVVyWCxVQUFVa3dDLG1CQUFxQnpELEdBQVksSUFBS3JCLEVBQWdCdEMsR0FDMUV6eEIsR0FBVXJYLFVBQVVtd0MsbUJBQXFCMUQsR0FBWSxJQUFLcEIsRUFBZ0J2QyxHQUMxRXp4QixHQUFVclgsVUFBVW93QyxtQkFBcUIzRCxHQUFZLElBQUtuQixFQUFnQnhDLEdBQzFFenhCLEdBQVVyWCxVQUFVcXdDLG1CQUFxQjVELEdBQVksSUFBS2xCLEVBQWdCekMsR0FFMUV6eEIsR0FBVXJYLFVBQVVzd0MsbUJBQXFCLFNBQVM3eEMsR0FDcEMsTUFBTkEsR0FBYSt0QyxHQUFXL3RDLElBQ3hCa0csS0FBSzBvQyxTQUFXaEIsR0FDaEIxbkMsS0FBS21vQyxPQUFTM0QsRUFDZHhrQyxLQUFLZ2lDLGNBQWdCaGlDLEtBQUtvb0MsT0FBUyxFQUNuQ3BvQyxLQUFLb29DLFVBQ0Zwb0MsS0FBS21vQyxPQUFTaEUsR0FHekJ6eEIsR0FBVXJYLFVBQVV1d0MsbUJBQXFCdkQsR0FDckMsSUFDQXZCLEdBRUpwMEIsR0FBVXJYLFVBQVV3d0MsbUJBQXFCeEQsR0FDckMsSUFDQXRCLEdBRUpyMEIsR0FBVXJYLFVBQVV5d0MsbUJBQXFCekQsR0FDckMsSUFDQXJCLEdBR0p0MEIsR0FBVXJYLFVBQVUwd0MsbUJBQXFCLFNBQVNqeUMsSUFDcEMsTUFBTkEsR0FBbUIsTUFBTkEsR0FBYSt0QyxHQUFXL3RDLE1BQ3JDa0csS0FBSzBvQyxTQUFXZCxJQUVwQjVuQyxLQUFLbW9DLE9BQVM5RCxFQUNkcmtDLEtBQUtvb0MsVUFHVDExQixHQUFVclgsVUFBVTJ3QyxrQkFBb0JsRSxHQUFZLElBQUtaLEdBQWUvQyxHQUN4RXp4QixHQUFVclgsVUFBVTR3QyxrQkFBb0JuRSxHQUFZLElBQUtYLEdBQWVoRCxHQUN4RXp4QixHQUFVclgsVUFBVTZ3QyxrQkFBb0JwRSxHQUFZLElBQUtWLEdBQWVqRCxHQUV4RXp4QixHQUFVclgsVUFBVTh3QyxrQkFBb0IsU0FBU3J5QyxHQUNuQyxNQUFOQSxHQUFhK3RDLEdBQVcvdEMsSUFDeEJrRyxLQUFLMG9DLFNBQVdoQixHQUNoQjFuQyxLQUFLbW9DLE9BQVMzRCxFQUNkeGtDLEtBQUtnaUMsY0FBZ0JoaUMsS0FBS29vQyxPQUFTLEVBQ25DcG9DLEtBQUtvb0MsVUFDRnBvQyxLQUFLbW9DLE9BQVNoRSxHQUd6Qnp4QixHQUFVclgsVUFBVSt3QyxtQkFBcUJ0RSxHQUNyQyxJQUNBUixHQUNBQyxJQUVKNzBCLEdBQVVyWCxVQUFVZ3hDLDBCQUE0QnZFLEdBQzVDLElBQ0FMLEdBQ0FELElBSUo5MEIsR0FBVXJYLFVBQVVpeEMsd0JBQTBCLFdBRTFDLEdBQUl0c0MsS0FBS2dpQyxjQUFnQixFQUFJaGlDLEtBQUtvb0MsT0FBUSxDQUN0QyxJQUFJbUUsRUFBU3ZzQyxLQUFLdW9DLFFBQVFuckMsVUFDbEI0QyxLQUFLZ2lDLGNBQWdCLEVBQ3JCaGlDLEtBQUtvb0MsUUFFVC9rQyxFQUFNckQsS0FBSzZvQyxTQUFXM0UsRUFBU0YsRUFFL0IzZ0MsRUFBSS9ILGVBQWVpeEMsS0FDbkJ2c0MsS0FBS3dzQyxhQUFhbnBDLEVBQUlrcEMsSUFDdEJ2c0MsS0FBS2dpQyxjQUFnQmhpQyxLQUFLb29DLE9BQVMsS0FNL0MxMUIsR0FBVXJYLFVBQVVveEMsbUJBQXFCLFdBQ3JDLElBQUlsMEIsRUFBUXZZLEtBQUtnaUMsY0FBZ0IsRUFDN0IzaEIsRUFBUXJnQixLQUFLb29DLE9BQVM3dkIsRUFJMUIsSUFGSThILEVBQVEsSUFBR0EsRUFBUSxHQUVoQkEsR0FBUyxHQUFHLENBRWYsSUFBSWtzQixFQUFTdnNDLEtBQUt1b0MsUUFBUWw0QixPQUFPa0ksRUFBTzhILEdBRXhDLEdBQUk0akIsRUFBVTNvQyxlQUFlaXhDLEdBR3pCLE9BRkF2c0MsS0FBS3dzQyxhQUFhdkksRUFBVXNJLFNBQzVCdnNDLEtBQUtnaUMsZUFBaUIzaEIsRUFBUSxHQUc5QkEsTUFLWjNOLEdBQVVyWCxVQUFVcXhDLG9CQUFzQixTQUFTNXlDLEdBQ3JDLE1BQU5BLEdBQ0FrRyxLQUFLc3NDLDBCQUNEdHNDLEtBQUtnaUMsY0FBZ0IsRUFBSWhpQyxLQUFLb29DLFNBQVdwb0MsS0FBSzZvQyxVQUM5QzdvQyxLQUFLeXNDLHFCQUVUenNDLEtBQUttb0MsT0FBU25vQyxLQUFLeW9DLGFBRWxCM3VDLEVBQUksS0FBT0EsRUFBSSxPQUNmQSxFQUFJLEtBQU9BLEVBQUksT0FDZkEsRUFBSSxLQUFPQSxFQUFJLE9BRVprRyxLQUFLNm9DLFVBQ0E3b0MsS0FBS2dpQyxjQUFnQixJQUFNaGlDLEtBQUtvb0MsU0FDaENwb0MsS0FBS3lvQyxhQUFldEUsRUFDZixNQUFOcnFDLEdBQ0FrRyxLQUFLc3NDLDBCQUdUdHNDLEtBQUt5c0Msc0JBR1R6c0MsS0FBS21vQyxPQUFTbm9DLEtBQUt5b0MsV0FDbkJ6b0MsS0FBS29vQyxXQUliMTFCLEdBQVVyWCxVQUFVc3hDLHFCQUF1QixTQUFTL3lCLEVBQVFsUixHQUN4RCxJQUFJa2tDLEVBQWU1c0MsS0FBS2dpQyxjQUFnQnBvQixFQUV4QyxHQUFJZ3pCLElBQWlCNXNDLEtBQUtvb0MsT0FBUSxDQUU5QixJQUFJbUUsRUFBU3ZzQyxLQUFLdW9DLFFBQVFuckMsVUFBVXd2QyxFQUFjNXNDLEtBQUtvb0MsUUFDbkRydUIsRUFBU2pJLFNBQVN5NkIsRUFBUTdqQyxHQUU5QjFJLEtBQUt3c0MsYUFBYXpJLEVBQWdCaHFCLElBQ2xDL1osS0FBS2dpQyxjQUFnQmhpQyxLQUFLb29DLFlBRTFCcG9DLEtBQUtnaUMsZ0JBR1RoaUMsS0FBS21vQyxPQUFTbm9DLEtBQUt5b0MsWUFHdkIvMUIsR0FBVXJYLFVBQVV3eEMsc0JBQXdCLFNBQVMveUMsR0FDdkMsTUFBTkEsR0FDQWtHLEtBQUsyc0MscUJBQXFCLEVBQUcsSUFDN0Izc0MsS0FBS2dpQyxrQkFDRWxvQyxFQUFJLEtBQU9BLEVBQUksT0FDakJrRyxLQUFLNm9DLFNBR043b0MsS0FBS21vQyxPQUFTbm9DLEtBQUt5b0MsV0FGbkJ6b0MsS0FBSzJzQyxxQkFBcUIsRUFBRyxJQUlqQzNzQyxLQUFLb29DLFdBSWIxMUIsR0FBVXJYLFVBQVV5eEMsa0JBQW9CLFNBQVNoekMsR0FDbkMsTUFBTkEsR0FDQWtHLEtBQUsyc0MscUJBQXFCLEVBQUcsSUFDN0Izc0MsS0FBS2dpQyxrQkFFSmxvQyxFQUFJLEtBQU9BLEVBQUksT0FDZkEsRUFBSSxLQUFPQSxFQUFJLE9BQ2ZBLEVBQUksS0FBT0EsRUFBSSxPQUVYa0csS0FBSzZvQyxTQUdON29DLEtBQUttb0MsT0FBU25vQyxLQUFLeW9DLFdBRm5Cem9DLEtBQUsyc0MscUJBQXFCLEVBQUcsSUFJakMzc0MsS0FBS29vQyxXQUliMTFCLEdBQVVyWCxVQUFVMHhDLFNBQVcsV0FDdkIvc0MsS0FBS2dpQyxjQUFnQixHQUNyQmhpQyxLQUFLdW9DLFFBQVUsR0FDZnZvQyxLQUFLd29DLGVBQWlCeG9DLEtBQUtvb0MsT0FDM0Jwb0MsS0FBS29vQyxPQUFTLEdBQ1Bwb0MsS0FBSzJvQyxXQUNSM29DLEtBQUttb0MsU0FBV2hFLEdBQ1pua0MsS0FBS2dpQyxnQkFBa0JoaUMsS0FBS29vQyxRQUM1QnBvQyxLQUFLNmdDLEtBQUtxQixPQUFPbGlDLEtBQUt1b0MsUUFBUWw0QixPQUFPclEsS0FBS2dpQyxnQkFFOUNoaUMsS0FBS3VvQyxRQUFVLEdBQ2Z2b0MsS0FBS3dvQyxlQUFpQnhvQyxLQUFLb29DLE9BQzNCcG9DLEtBQUtvb0MsT0FBUyxHQUNQcG9DLEtBQUtnaUMsZ0JBQWtCaGlDLEtBQUtvb0MsUUFFbkNwb0MsS0FBS3VvQyxRQUFVLEdBQ2Z2b0MsS0FBS3dvQyxlQUFpQnhvQyxLQUFLb29DLE9BQzNCcG9DLEtBQUtvb0MsT0FBUyxJQUdkcG9DLEtBQUt1b0MsUUFBVXZvQyxLQUFLdW9DLFFBQVFsNEIsT0FBT3JRLEtBQUtnaUMsZUFDeENoaUMsS0FBS29vQyxRQUFVcG9DLEtBQUtnaUMsY0FDcEJoaUMsS0FBS3dvQyxlQUFpQnhvQyxLQUFLZ2lDLGVBRy9CaGlDLEtBQUtnaUMsY0FBZ0IsSUFLN0J0dkIsR0FBVXJYLFVBQVV1YyxNQUFRLFNBQVNnc0IsR0FDN0I1akMsS0FBSzRvQyxRQUFRNW9DLEtBQUs2Z0MsS0FBSy9NLFFBQVEzMUIsTUFBTSx5QkFFekM2QixLQUFLdW9DLFNBQVczRSxFQUNoQjVqQyxLQUFLZ3RDLFVBR1R0NkIsR0FBVXJYLFVBQVUyeEMsT0FBUyxXQUN6QixLQUFPaHRDLEtBQUtvb0MsT0FBU3BvQyxLQUFLdW9DLFFBQVFyc0MsUUFBVThELEtBQUsyb0MsVUFBVSxDQUN2RCxJQUFJN3VDLEVBQUlrRyxLQUFLdW9DLFFBQVFwNEIsT0FBT25RLEtBQUtvb0MsUUFDN0Jwb0MsS0FBS21vQyxTQUFXaEUsRUFDaEJua0MsS0FBS2dwQyxXQUFXbHZDLEdBQ1RrRyxLQUFLbW9DLFNBQVcvRCxFQUN2QnBrQyxLQUFLa3BDLG9CQUFvQnB2QyxHQUNsQmtHLEtBQUttb0MsU0FBVzlELEVBQ3ZCcmtDLEtBQUttcEMsZ0JBQWdCcnZDLEdBQ2RrRyxLQUFLbW9DLFNBQVc1RCxFQUN2QnZrQyxLQUFLcXBDLDRCQUE0QnZ2QyxHQUMxQmtHLEtBQUttb0MsU0FBVzNELEVBQ3ZCeGtDLEtBQUtzcEMsd0JBQXdCeHZDLEdBQ3RCa0csS0FBS21vQyxTQUFXMUQsRUFDdkJ6a0MsS0FBS3VwQywyQkFBMkJ6dkMsR0FDekJrRyxLQUFLbW9DLFNBQVc3RCxFQUN2QnRrQyxLQUFLeXBDLHVCQUF1QjN2QyxHQUNyQmtHLEtBQUttb0MsU0FBV3pELEVBS3ZCMWtDLEtBQUt3cEMsMEJBQTBCMXZDLEdBQ3hCa0csS0FBS21vQyxTQUFXeEQsRUFDdkIza0MsS0FBSzBwQyxzQkFBc0I1dkMsR0FDcEJrRyxLQUFLbW9DLFNBQVd2RCxFQUN2QjVrQyxLQUFLMnBDLHlCQUF5Qjd2QyxHQUN2QmtHLEtBQUttb0MsU0FBV3RELEVBQ3ZCN2tDLEtBQUs0cEMsMkJBQTJCOXZDLEdBQ3pCa0csS0FBS21vQyxTQUFXckQsRUFDdkI5a0MsS0FBSzZwQyxtQ0FBbUMvdkMsR0FDakNrRyxLQUFLbW9DLFNBQVdwRCxFQUN2Qi9rQyxLQUFLOHBDLG1DQUFtQ2h3QyxHQUNqQ2tHLEtBQUttb0MsU0FBV25ELEVBQ3ZCaGxDLEtBQUsrcEMsK0JBQStCandDLEdBQzdCa0csS0FBS21vQyxTQUFXbEQsRUFLdkJqbEMsS0FBS2dxQyx3QkFBd0Jsd0MsR0FDdEJrRyxLQUFLbW9DLFNBQVdqRCxFQUN2QmxsQyxLQUFLaXFDLG9CQUFvQm53QyxHQUNsQmtHLEtBQUttb0MsU0FBV2hELEVBS3ZCbmxDLEtBQUtrcUMsOEJBQThCcHdDLEdBQzVCa0csS0FBS21vQyxTQUFXL0MsRUFLdkJwbEMsS0FBS21xQyxvQkFBb0Jyd0MsR0FDbEJrRyxLQUFLbW9DLFNBQVc5QyxFQUN2QnJsQyxLQUFLb3FDLGdCQUFnQnR3QyxHQUNka0csS0FBS21vQyxTQUFXN0MsRUFDdkJ0bEMsS0FBS3FxQyxvQkFBb0J2d0MsR0FDbEJrRyxLQUFLbW9DLFNBQVc1QyxFQUN2QnZsQyxLQUFLc3FDLG9CQUFvQnh3QyxHQUNsQmtHLEtBQUttb0MsU0FBVzNDLEVBS3ZCeGxDLEtBQUt1cUMsbUJBQW1CendDLEdBQ2pCa0csS0FBS21vQyxTQUFXMUMsRUFDdkJ6bEMsS0FBS3dxQyxtQkFBbUIxd0MsR0FDakJrRyxLQUFLbW9DLFNBQVd6QyxFQUN2QjFsQyxLQUFLeXFDLG1CQUFtQjN3QyxHQUNqQmtHLEtBQUttb0MsU0FBV3hDLEVBQ3ZCM2xDLEtBQUswcUMsbUJBQW1CNXdDLEdBQ2pCa0csS0FBS21vQyxTQUFXdkMsRUFDdkI1bEMsS0FBSzJxQyxtQkFBbUI3d0MsR0FDakJrRyxLQUFLbW9DLFNBQVd0QyxFQUN2QjdsQyxLQUFLNHFDLG1CQUFtQjl3QyxHQUNqQmtHLEtBQUttb0MsU0FBV3JDLEVBQ3ZCOWxDLEtBQUs2cUMsY0FBYy93QyxHQUNaa0csS0FBS21vQyxTQUFXcEMsRUFDdkIvbEMsS0FBSzhxQyxrQkFBa0JoeEMsR0FDaEJrRyxLQUFLbW9DLFNBQVduQyxFQUN2QmhtQyxLQUFLK3FDLGtCQUFrQmp4QyxHQUNoQmtHLEtBQUttb0MsU0FBV2xDLEVBS3ZCam1DLEtBQUtnckMsb0JBQW9CbHhDLEdBQ2xCa0csS0FBS21vQyxTQUFXakMsRUFDdkJsbUMsS0FBS2lyQyx1QkFBdUJueEMsR0FDckJrRyxLQUFLbW9DLFNBQVdoQyxFQUt2Qm5tQyxLQUFLa3JDLG9CQUFvQnB4QyxHQUNsQmtHLEtBQUttb0MsU0FBVy9CLEVBQ3ZCcG1DLEtBQUttckMsb0JBQW9CcnhDLEdBQ2xCa0csS0FBS21vQyxTQUFXOUIsRUFDdkJybUMsS0FBS29yQyxvQkFBb0J0eEMsR0FDbEJrRyxLQUFLbW9DLFNBQVc3QixFQUN2QnRtQyxLQUFLcXJDLG9CQUFvQnZ4QyxHQUNsQmtHLEtBQUttb0MsU0FBVzVCLEVBQ3ZCdm1DLEtBQUtzckMsb0JBQW9CeHhDLEdBQ2xCa0csS0FBS21vQyxTQUFXM0IsRUFDdkJ4bUMsS0FBS3VyQyxtQkFBbUJ6eEMsR0FDakJrRyxLQUFLbW9DLFNBQVcxQixFQUN2QnptQyxLQUFLd3JDLG1CQUFtQjF4QyxHQUNqQmtHLEtBQUttb0MsU0FBV3pCLEVBQ3ZCMW1DLEtBQUt5ckMsbUJBQW1CM3hDLEdBQ2pCa0csS0FBS21vQyxTQUFXeEIsRUFDdkIzbUMsS0FBSzByQyxtQkFBbUI1eEMsR0FDakJrRyxLQUFLbW9DLFNBQVd2QixFQUN2QjVtQyxLQUFLMnJDLG1CQUFtQjd4QyxHQUNqQmtHLEtBQUttb0MsU0FBV3RCLEVBS3ZCN21DLEtBQUs0ckMsbUJBQW1COXhDLEdBQ2pCa0csS0FBS21vQyxTQUFXckIsRUFDdkI5bUMsS0FBSzZyQyxtQkFBbUIveEMsR0FDakJrRyxLQUFLbW9DLFNBQVdwQixFQUN2Qi9tQyxLQUFLOHJDLG1CQUFtQmh5QyxHQUNqQmtHLEtBQUttb0MsU0FBV25CLEVBQ3ZCaG5DLEtBQUsrckMsbUJBQW1CanlDLEdBQ2pCa0csS0FBS21vQyxTQUFXbEIsR0FDdkJqbkMsS0FBS2dzQyxrQkFBa0JseUMsR0FDaEJrRyxLQUFLbW9DLFNBQVdqQixHQUN2QmxuQyxLQUFLaXNDLGtCQUFrQm55QyxHQUNoQmtHLEtBQUttb0MsU0FBV2hCLEdBQ3ZCbm5DLEtBQUtrc0Msa0JBQWtCcHlDLEdBQ2hCa0csS0FBS21vQyxTQUFXZixHQUN2QnBuQyxLQUFLbXNDLGtCQUFrQnJ5QyxHQUNoQmtHLEtBQUttb0MsU0FBV2QsR0FLdkJybkMsS0FBS29zQyxtQkFBbUJ0eUMsR0FDakJrRyxLQUFLbW9DLFNBQVdiLEdBQ3ZCdG5DLEtBQUtxc0MsMEJBQTBCdnlDLEdBQ3hCa0csS0FBS21vQyxTQUFXWixHQUN2QnZuQyxLQUFLMHNDLG9CQUFvQjV5QyxHQUNsQmtHLEtBQUttb0MsU0FBV1gsR0FDdkJ4bkMsS0FBSzZzQyxzQkFBc0IveUMsR0FDcEJrRyxLQUFLbW9DLFNBQVdWLEdBQ3ZCem5DLEtBQUs4c0Msa0JBQWtCaHpDLEdBRXZCa0csS0FBSzZnQyxLQUFLL00sUUFBUTMxQixNQUFNLGtCQUFtQjZCLEtBQUttb0MsUUFHcERub0MsS0FBS29vQyxTQUdUcG9DLEtBQUsrc0MsWUFHVHI2QixHQUFVclgsVUFBVW0vQixNQUFRLFdBQ3hCeDZCLEtBQUsyb0MsVUFBVyxHQUVwQmoyQixHQUFVclgsVUFBVXdvQyxPQUFTLFdBQ3pCN2pDLEtBQUsyb0MsVUFBVyxFQUVaM29DLEtBQUtvb0MsT0FBU3BvQyxLQUFLdW9DLFFBQVFyc0MsUUFDM0I4RCxLQUFLZ3RDLFNBRUxodEMsS0FBSzRvQyxRQUNMNW9DLEtBQUtpdEMsV0FJYnY2QixHQUFVclgsVUFBVTJYLElBQU0sU0FBUzR3QixHQUMzQjVqQyxLQUFLNG9DLFFBQVE1b0MsS0FBSzZnQyxLQUFLL00sUUFBUTMxQixNQUFNLHVCQUNyQ3lsQyxHQUFPNWpDLEtBQUs0WCxNQUFNZ3NCLEdBRXRCNWpDLEtBQUs0b0MsUUFBUyxFQUVWNW9DLEtBQUsyb0MsVUFBVTNvQyxLQUFLaXRDLFdBRzVCdjZCLEdBQVVyWCxVQUFVNHhDLFFBQVUsV0FFdEJqdEMsS0FBS2dpQyxjQUFnQmhpQyxLQUFLb29DLFFBQzFCcG9DLEtBQUtrdEMsc0JBR1RsdEMsS0FBSzZnQyxLQUFLNEMsU0FHZC93QixHQUFVclgsVUFBVTZ4QyxvQkFBc0IsV0FDdEMsSUFBSWhtQyxFQUFPbEgsS0FBS3VvQyxRQUFRbDRCLE9BQU9yUSxLQUFLZ2lDLGVBR2hDaGlDLEtBQUttb0MsU0FBV3JDLEdBQ2hCOWxDLEtBQUttb0MsU0FBV3BDLEdBQ2hCL2xDLEtBQUttb0MsU0FBV25DLEVBRWhCaG1DLEtBQUs2Z0MsS0FBS3dDLFFBQVFuOEIsR0FFbEJsSCxLQUFLbW9DLFNBQVc5QyxHQUNoQnJsQyxLQUFLbW9DLFNBQVc3QyxHQUNoQnRsQyxLQUFLbW9DLFNBQVc1QyxFQUVoQnZsQyxLQUFLNmdDLEtBQUtzQyxVQUFVajhCLEdBQ2JsSCxLQUFLbW9DLFNBQVdaLElBQW9Cdm5DLEtBQUs2b0MsU0FNekM3b0MsS0FBS21vQyxTQUFXWCxJQUFzQnhuQyxLQUFLNm9DLFNBTTNDN29DLEtBQUttb0MsU0FBV1YsSUFBa0J6bkMsS0FBSzZvQyxTQU85QzdvQyxLQUFLbW9DLFNBQVc5RCxHQUNoQnJrQyxLQUFLbW9DLFNBQVd6RCxHQUNoQjFrQyxLQUFLbW9DLFNBQVd0RCxHQUNoQjdrQyxLQUFLbW9DLFNBQVd2RCxHQUNoQjVrQyxLQUFLbW9DLFNBQVd4RCxHQUNoQjNrQyxLQUFLbW9DLFNBQVdwRCxHQUNoQi9rQyxLQUFLbW9DLFNBQVdyRCxHQUNoQjlrQyxLQUFLbW9DLFNBQVduRCxHQUNoQmhsQyxLQUFLbW9DLFNBQVczRCxHQUVoQnhrQyxLQUFLNmdDLEtBQUtxQixPQUFPaDdCLElBaEJqQmxILEtBQUsyc0MscUJBQXFCLEVBQUcsSUFDekIzc0MsS0FBS2dpQyxjQUFnQmhpQyxLQUFLb29DLFNBQzFCcG9DLEtBQUttb0MsT0FBU25vQyxLQUFLeW9DLFdBQ25Cem9DLEtBQUtrdEMseUJBVFRsdEMsS0FBSzJzQyxxQkFBcUIsRUFBRyxJQUN6QjNzQyxLQUFLZ2lDLGNBQWdCaGlDLEtBQUtvb0MsU0FDMUJwb0MsS0FBS21vQyxPQUFTbm9DLEtBQUt5b0MsV0FDbkJ6b0MsS0FBS2t0Qyx5QkFUVGx0QyxLQUFLeXNDLHFCQUNEenNDLEtBQUtnaUMsY0FBZ0JoaUMsS0FBS29vQyxTQUMxQnBvQyxLQUFLbW9DLE9BQVNub0MsS0FBS3lvQyxXQUNuQnpvQyxLQUFLa3RDLHlCQStCakJ4NkIsR0FBVXJYLFVBQVUyOUIsTUFBUSxXQUN4QnRtQixHQUFVOVksS0FDTm9HLEtBQ0EsQ0FBRXdoQyxRQUFTeGhDLEtBQUs2b0MsU0FBVUUsZUFBZ0Ivb0MsS0FBSzhvQyxpQkFDL0M5b0MsS0FBSzZnQyxPQUlibnVCLEdBQVVyWCxVQUFVNG1DLGlCQUFtQixXQUNuQyxPQUFPamlDLEtBQUt3b0MsY0FBZ0J4b0MsS0FBS29vQyxRQUdyQzExQixHQUFVclgsVUFBVTR0QyxZQUFjLFdBQzlCLE9BQU9qcEMsS0FBS3VvQyxRQUFRbnJDLFVBQVU0QyxLQUFLZ2lDLGNBQWVoaUMsS0FBS29vQyxTQUczRDExQixHQUFVclgsVUFBVSt0QyxXQUFhLFNBQVNwdkMsR0FDdENnRyxLQUFLNmdDLEtBQUs3bUMsR0FBTWdHLEtBQUtpcEMsZUFDckJqcEMsS0FBS2dpQyxlQUFpQixHQUcxQnR2QixHQUFVclgsVUFBVW14QyxhQUFlLFNBQVM5eEMsR0FDcENzRixLQUFLeW9DLGFBQWV0RSxFQUNwQm5rQyxLQUFLNmdDLEtBQUs4QixhQUFham9DLEdBRXZCc0YsS0FBSzZnQyxLQUFLcUIsT0FBT3huQyxLLGdCQ3Y4QnpCLElBQUlpWSxFQUFjLEVBQVEsSUFFdEJ3NkIsRUFBZ0IsT0FDaEJDLEVBQWdCLEVBQVEsSUFDeEJDLEVBQW1CLEVBQVEsS0FFL0IsU0FBUzc2QixFQUFXaEUsRUFBVWxHLEVBQVNnbEMsR0FDZixpQkFBYjkrQixHQUNUOCtCLEVBQVlobEMsRUFDWkEsRUFBVWtHLEVBQ1ZBLEVBQVcsTUFDaUIsbUJBQVpsRyxJQUNoQmdsQyxFQUFZaGxDLEVBQ1pBLEVBQVVpbEMsR0FFWHZ0QyxLQUFLd3RDLFVBQVloL0IsRUFDakJ4TyxLQUFLNGdDLFNBQVd0NEIsR0FBV2lsQyxFQUMzQnZ0QyxLQUFLeXRDLFdBQWFILEVBQ2xCdHRDLEtBQUtpVCxJQUFNLEdBQ1hqVCxLQUFLMHRDLE9BQVEsRUFDYjF0QyxLQUFLMnRDLFVBQVksR0FDakIzdEMsS0FBSzAyQixRQUFVMTJCLEtBQUswMkIsU0FBVyxLQUloQyxJQUFJNlcsRUFBYyxDQUNqQksscUJBQXFCLEVBQ3JCQyxrQkFBa0IsRUFDbEJDLGdCQUFnQixHQUdqQnQ3QixFQUFXblgsVUFBVXVtQyxhQUFlLFNBQVM1VyxHQUM1Q2hyQixLQUFLMDJCLFFBQVUxTCxHQUloQnhZLEVBQVduWCxVQUFVcW9DLFFBQVUsV0FDOUJseEIsRUFBVzVZLEtBQUtvRyxLQUFNQSxLQUFLd3RDLFVBQVd4dEMsS0FBSzRnQyxTQUFVNWdDLEtBQUt5dEMsYUFJM0RqN0IsRUFBV25YLFVBQVVvb0MsTUFBUSxXQUN6QnpqQyxLQUFLMHRDLFFBQ1IxdEMsS0FBSzB0QyxPQUFRLEVBQ2IxdEMsS0FBSzAyQixRQUFVLEtBQ2YxMkIsS0FBSyt0QyxnQkFBZ0IsUUFHdEJ2N0IsRUFBV25YLFVBQVUweUMsZ0JBQ3JCdjdCLEVBQVduWCxVQUFVeTRCLFFBQVUsU0FBU3ZvQixHQUN2QyxHQUE2QixtQkFBbkJ2TCxLQUFLd3RDLFVBQ2R4dEMsS0FBS3d0QyxVQUFVamlDLEVBQU92TCxLQUFLaVQsVUFFM0IsR0FBRzFILEVBQU8sTUFBTUEsR0FJbEJpSCxFQUFXblgsVUFBVSttQyxXQUFhLFdBR2pDLElBQUkvZixFQUFPcmlCLEtBQUsydEMsVUFBVWhSLE1BRXZCMzhCLEtBQUs0Z0MsU0FBU2tOLGdCQUFrQnpyQixJQUNsQ0EsRUFBS2dmLFNBQVdyaEMsS0FBSzAyQixRQUFRMkssVUFHM0JyaEMsS0FBS3l0QyxZQUFZenRDLEtBQUt5dEMsV0FBV3ByQixJQUdyQzdQLEVBQVduWCxVQUFVMnlDLGtCQUFvQixTQUFTQyxHQUNqRCxJQUFLanVDLEtBQUs0Z0MsU0FBU3NOLFlBQWEsT0FBT0QsRUFFdkMsSUFBSUUsRUFPSixJQUFLLElBQUluekMsS0FMUm16QyxFQUR1QixRQUFwQkYsRUFBVzN1QyxLQUNKbkYsT0FBT1ksT0FBT3N5QyxHQUVkbHpDLE9BQU9ZLE9BQU9xeUMsR0FHVGEsRUFDWEEsRUFBVzN5QyxlQUFlTixLQUM3Qm16QyxFQUFRbnpDLEdBQU9pekMsRUFBV2p6QyxJQUk1QixPQUFPbXpDLEdBR1IzN0IsRUFBV25YLFVBQVUreUMsZUFBaUIsU0FBU0QsR0FDOUMsSUFBSUUsRUFBU3J1QyxLQUFLMnRDLFVBQVUzdEMsS0FBSzJ0QyxVQUFVenhDLE9BQVMsR0FDaERveUMsRUFBV0QsRUFBU0EsRUFBT0UsU0FBV3Z1QyxLQUFLaVQsSUFDM0N1N0IsRUFBa0JGLEVBQVNBLEVBQVNweUMsT0FBUyxHQUVqRGl5QyxFQUFRcnVDLEtBQU8sS0FFWkUsS0FBSzRnQyxTQUFTaU4sbUJBQ2hCTSxFQUFRL00sV0FBYXBoQyxLQUFLMDJCLFFBQVEwSyxZQUVoQ3BoQyxLQUFLNGdDLFNBQVNrTixpQkFDaEJLLEVBQVE5TSxTQUFXcmhDLEtBQUswMkIsUUFBUTJLLFVBRzlCbU4sR0FDRkwsRUFBUWpULEtBQU9zVCxFQUNmQSxFQUFnQjF1QyxLQUFPcXVDLEdBRXZCQSxFQUFRalQsS0FBTyxLQUdoQm9ULEVBQVN0dkMsS0FBS212QyxHQUNkQSxFQUFRRSxPQUFTQSxHQUFVLE1BRzVCNzdCLEVBQVduWCxVQUFVZ25DLFVBQVksU0FBU3JvQyxFQUFNeTBDLEdBQy9DLElBQUlSLEVBQWEsQ0FDaEIzdUMsS0FBZSxXQUFUdEYsRUFBb0IyWSxFQUFZb1AsT0FBa0IsVUFBVC9uQixFQUFtQjJZLEVBQVlxUCxNQUFRclAsRUFBWXNQLElBQ2xHam9CLEtBQU1BLEVBQ055MEMsUUFBU0EsRUFDVEYsU0FBVSxJQUdQSixFQUFVbnVDLEtBQUtndUMsa0JBQWtCQyxHQUVyQ2p1QyxLQUFLb3VDLGVBQWVELEdBRXBCbnVDLEtBQUsydEMsVUFBVTN1QyxLQUFLbXZDLElBR3JCMzdCLEVBQVduWCxVQUFVNm1DLE9BQVMsU0FBU2g3QixHQUd0QyxJQUVJd25DLEVBRkFDLEVBQVkzdUMsS0FBSzRnQyxTQUFTZ04scUJBQXVCNXRDLEtBQUs0Z0MsU0FBU2dPLGlCQUluRSxJQUFJNXVDLEtBQUsydEMsVUFBVXp4QyxRQUFVOEQsS0FBS2lULElBQUkvVyxTQUFXd3lDLEVBQVUxdUMsS0FBS2lULElBQUlqVCxLQUFLaVQsSUFBSS9XLE9BQU8sSUFBSW9ELE9BQVNxVCxFQUFZaVAsS0FDekcrc0IsRUFDRkQsRUFBUXhuQyxNQUFRd25DLEVBQVF4bkMsS0FBT0EsR0FBTWxCLFFBQVFtbkMsRUFBZSxLQUU1RHVCLEVBQVF4bkMsTUFBUUEsT0FHakIsR0FDQ2xILEtBQUsydEMsVUFBVXp4QyxTQUNkd3lDLEVBQVUxdUMsS0FBSzJ0QyxVQUFVM3RDLEtBQUsydEMsVUFBVXp4QyxPQUFTLE1BQ2pEd3lDLEVBQVVBLEVBQVFILFNBQVNHLEVBQVFILFNBQVNyeUMsT0FBUyxLQUN0RHd5QyxFQUFRcHZDLE9BQVNxVCxFQUFZaVAsS0FFMUIrc0IsRUFDRkQsRUFBUXhuQyxNQUFRd25DLEVBQVF4bkMsS0FBT0EsR0FBTWxCLFFBQVFtbkMsRUFBZSxLQUU1RHVCLEVBQVF4bkMsTUFBUUEsTUFFWCxDQUNIeW5DLElBQ0Z6bkMsRUFBT0EsRUFBS2xCLFFBQVFtbkMsRUFBZSxNQUdwQyxJQUFJZ0IsRUFBVW51QyxLQUFLZ3VDLGtCQUFrQixDQUNwQzltQyxLQUFNQSxFQUNONUgsS0FBTXFULEVBQVlpUCxPQUduQjVoQixLQUFLb3VDLGVBQWVELEtBS3ZCMzdCLEVBQVduWCxVQUFVOG5DLFVBQVksU0FBU2o4QixHQUN6QyxJQUFJd25DLEVBQVUxdUMsS0FBSzJ0QyxVQUFVM3RDLEtBQUsydEMsVUFBVXp4QyxPQUFTLEdBRXJELEdBQUd3eUMsR0FBV0EsRUFBUXB2QyxPQUFTcVQsRUFBWW1QLFFBQzFDNHNCLEVBQVF4bkMsTUFBUUEsTUFEakIsQ0FLQSxJQUFJK21DLEVBQWEsQ0FDaEIvbUMsS0FBTUEsRUFDTjVILEtBQU1xVCxFQUFZbVAsU0FHZnFzQixFQUFVbnVDLEtBQUtndUMsa0JBQWtCQyxHQUVyQ2p1QyxLQUFLb3VDLGVBQWVELEdBQ3BCbnVDLEtBQUsydEMsVUFBVTN1QyxLQUFLbXZDLEtBR3JCMzdCLEVBQVduWCxVQUFVa29DLGFBQWUsV0FDbkMsSUFBSTBLLEVBQWEsQ0FDaEJNLFNBQVUsQ0FBQyxDQUNWcm5DLEtBQU0sR0FDTjVILEtBQU1xVCxFQUFZaVAsT0FFbkJ0aUIsS0FBTXFULEVBQVl1UCxPQUdmaXNCLEVBQVVudUMsS0FBS2d1QyxrQkFBa0JDLEdBRXJDanVDLEtBQUtvdUMsZUFBZUQsR0FDcEJudUMsS0FBSzJ0QyxVQUFVM3VDLEtBQUttdkMsSUFHckIzN0IsRUFBV25YLFVBQVUrbkMsYUFBZTV3QixFQUFXblgsVUFBVW1vQyxXQUFhLFdBQ3JFeGpDLEtBQUsydEMsVUFBVWhSLE9BR2hCbnFCLEVBQVduWCxVQUFVNm5DLHdCQUEwQixTQUFTbHBDLEVBQU1rTixHQUM3RCxJQUFJaW5DLEVBQVVudUMsS0FBS2d1QyxrQkFBa0IsQ0FDcENoMEMsS0FBTUEsRUFDTmtOLEtBQU1BLEVBQ041SCxLQUFNcVQsRUFBWWtQLFlBR25CN2hCLEtBQUtvdUMsZUFBZUQsSUFHckIzMEMsRUFBT0QsUUFBVWlaLEcsY0N0TmpCLElBQUk0NkIsRUFBZ0I1ekMsRUFBT0QsUUFBVSxDQUNwQyxpQkFDQyxJQUFJZzFDLEVBQVd2dUMsS0FBS3V1QyxTQUNwQixPQUFPQSxHQUFZQSxFQUFTLElBQU0sTUFFbkMsZ0JBQ0MsSUFBSUEsRUFBV3Z1QyxLQUFLdXVDLFNBQ3BCLE9BQU9BLEdBQVlBLEVBQVNBLEVBQVNyeUMsT0FBUyxJQUFNLE1BRXJELGVBQ0MsT0FBTzJ5QyxFQUFVN3VDLEtBQUtWLE9BQVN1dkMsRUFBVVYsVUFJdkNXLEVBQVUsQ0FDYkMsUUFBUyxPQUNUMWtDLFdBQVksV0FDWlMsV0FBWSxTQUNaMGpDLGdCQUFpQixPQUNqQlEsWUFBYSxPQUNiQyxVQUFXLFFBR1JKLEVBQVksQ0FDZlYsUUFBUyxFQUNUejZCLEtBQU0sRUFDTnc3QixNQUFPLEVBQ1B0N0IsUUFBUyxHQUdWelosT0FBT29HLEtBQUt1dUMsR0FBU251QyxTQUFRLFNBQVMzRixHQUNyQyxJQUFJbTBDLEVBQVlMLEVBQVE5ekMsR0FDeEJiLE9BQU9DLGVBQWVnekMsRUFBZXB5QyxFQUFLLENBQ3pDVixJQUFLLFdBQ0osT0FBTzBGLEtBQUttdkMsSUFBYyxNQUUzQmp1QixJQUFLLFNBQVNwZCxHQUViLE9BREE5RCxLQUFLbXZDLEdBQWFyckMsRUFDWEEsUyxnQkN4Q1YsSUFBSXNyQyxFQUFXNTFDLEVBQU9ELFFBRXRCLENBQ0MsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1BvSCxTQUFRLFNBQVNtZCxHQUNsQjNqQixPQUFPb0csS0FBS3VkLEdBQUtuZCxTQUFRLFNBQVMzRixHQUNqQ28wQyxFQUFTcDBDLEdBQU84aUIsRUFBSTlpQixHQUFLQyxLQUFLbTBDLFUsNkJDVmhDLElBQUlDLEVBQW1CcnZDLE1BQVFBLEtBQUtxdkMsaUJBQW9CLFNBQVVDLEdBQzlELE9BQVFBLEdBQU9BLEVBQUl6MEMsV0FBY3kwQyxFQUFNLENBQUUsUUFBV0EsSUFFeERuMUMsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLElBQ3RELElBQUk2MEMsRUFBa0JGLEVBQWdCLEVBQVEsS0FDMUNHLEVBQWdCSCxFQUFnQixFQUFRLE1BQ3hDSSxFQUFhSixFQUFnQixFQUFRLEtBQ3JDSyxFQUFxQkwsRUFBZ0IsRUFBUSxNQUdqRCxTQUFTTSxFQUFpQnRzQyxHQUN0QixJQUFJOUMsRUFBT3BHLE9BQU9vRyxLQUFLOEMsR0FBSy9GLEtBQUssS0FDN0IwSSxFQUFVNHBDLEVBQVl2c0MsR0FFdEJ3c0IsRUFBSyxJQUFJekosT0FBTyxRQURwQjdsQixHQUFRLDRCQUM0QixLQUFNLEtBQzFDLE9BQU8sU0FBVXdGLEdBQU8sT0FBTzVGLE9BQU80RixHQUFLQyxRQUFRNnBCLEVBQUk3cEIsSUFQM0R6TSxFQUFRczJDLFVBQVlGLEVBQWlCRixFQUFXOXFCLFNBQ2hEcHJCLEVBQVF1MkMsaUJBQW1CSCxFQUFpQkosRUFBZ0I1cUIsU0FRNUQsSUFBSW9yQixFQUFTLFNBQVVsdEMsRUFBR0MsR0FBSyxPQUFRRCxFQUFJQyxFQUFJLEdBQUssR0F5QnBELFNBQVM4c0MsRUFBWXZzQyxHQUNqQixPQUFPLFNBQWlCMEMsR0FDcEIsTUFBc0IsTUFBbEJBLEVBQUlvSyxPQUFPLEdBQ1csTUFBbEJwSyxFQUFJb0ssT0FBTyxJQUFnQyxNQUFsQnBLLEVBQUlvSyxPQUFPLEdBQzdCdS9CLEVBQW1CL3FCLFFBQVE3UyxTQUFTL0wsRUFBSXNLLE9BQU8sR0FBSSxLQUV2RHEvQixFQUFtQi9xQixRQUFRN1MsU0FBUy9MLEVBQUlzSyxPQUFPLEdBQUksS0FFdkRoTixFQUFJMEMsRUFBSXBILE1BQU0sR0FBSSxLQWhDakNwRixFQUFReTJDLFdBQWEsV0FHakIsSUFGQSxJQUFJQyxFQUFTOTFDLE9BQU9vRyxLQUFLaXZDLEVBQWM3cUIsU0FBU3VyQixLQUFLSCxHQUNqRHh2QyxFQUFPcEcsT0FBT29HLEtBQUtndkMsRUFBZ0I1cUIsU0FBU3VyQixLQUFLSCxHQUM1Q3QyQyxFQUFJLEVBQUd3UCxFQUFJLEVBQUd4UCxFQUFJOEcsRUFBS3JFLE9BQVF6QyxJQUNoQ3cyQyxFQUFPaG5DLEtBQU8xSSxFQUFLOUcsSUFDbkI4RyxFQUFLOUcsSUFBTSxLQUNYd1AsS0FHQTFJLEVBQUs5RyxJQUFNLElBR25CLElBQUlvMkIsRUFBSyxJQUFJekosT0FBTyxPQUFTN2xCLEVBQUtqRCxLQUFLLEtBQU8sZ0NBQWlDLEtBQzNFMEksRUFBVTRwQyxFQUFZTCxFQUFnQjVxQixTQUMxQyxTQUFTd3JCLEVBQVNwcUMsR0FHZCxNQUZ1QixNQUFuQkEsRUFBSXNLLFFBQVEsS0FDWnRLLEdBQU8sS0FDSkMsRUFBUUQsR0FHbkIsT0FBTyxTQUFVQSxHQUNiLE9BQU81RixPQUFPNEYsR0FBS0MsUUFBUTZwQixFQUFJc2dCLElBckJsQixJLDZsNUJDbEJyQixJQUFJZCxFQUFtQnJ2QyxNQUFRQSxLQUFLcXZDLGlCQUFvQixTQUFVQyxHQUM5RCxPQUFRQSxHQUFPQSxFQUFJejBDLFdBQWN5MEMsRUFBTSxDQUFFLFFBQVdBLElBRXhEbjFDLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxJQUN0RCxJQUNJMDFDLEVBQWFDLEVBREFoQixFQUFnQixFQUFRLEtBQ0MxcUIsU0FDdEMyckIsRUFBY0MsRUFBbUJILEdBQ3JDNzJDLEVBQVFpM0MsVUFBWUMsRUFBV0wsRUFBWUUsR0FDM0MsSUFDSUksRUFBY0wsRUFESWhCLEVBQWdCLEVBQVEsS0FDRTFxQixTQUM1Q2dzQixFQUFlSixFQUFtQkcsR0FFdEMsU0FBU0wsRUFBYzUwQyxHQUNuQixPQUFPdEIsT0FBT29HLEtBQUs5RSxHQUNkeTBDLE9BQ0F0dEMsUUFBTyxTQUFVZ3VDLEVBQVM1MkMsR0FFM0IsT0FEQTQyQyxFQUFRbjFDLEVBQUl6QixJQUFTLElBQU1BLEVBQU8sSUFDM0I0MkMsSUFDUixJQUVQLFNBQVNMLEVBQW1CSyxHQUN4QixJQUFJQyxFQUFTLEdBQ1RDLEVBQVcsR0FVZixPQVRBMzJDLE9BQU9vRyxLQUFLcXdDLEdBQVNqd0MsU0FBUSxTQUFVb3dDLEdBQ25DLE9BQW9CLElBQWJBLEVBQUU3MEMsT0FFRDIwQyxFQUFPN3hDLEtBQUssS0FBTyt4QyxHQUVuQkQsRUFBUzl4QyxLQUFLK3hDLE1BRzFCRCxFQUFTaG5CLFFBQVEsSUFBTSttQixFQUFPdnpDLEtBQUssSUFBTSxLQUNsQyxJQUFJOG9CLE9BQU8wcUIsRUFBU3h6QyxLQUFLLEtBQU0sS0FyQjFDL0QsRUFBUXkzQyxXQUFhUCxFQUFXQyxFQUFhQyxHQXVCN0MsSUFBSU0sRUFBYSxjQUNiQyxFQUFrQixrQ0FDdEIsU0FBU0MsRUFBbUJyM0MsR0FDeEIsTUFBTyxNQUFRQSxFQUNWOFgsV0FBVyxHQUNYelUsU0FBUyxJQUNUb3lCLGNBQWdCLElBR3pCLFNBQVM2aEIsRUFBZXQzQyxFQUFHdTNDLEdBS3ZCLE1BQU8sT0FEMkIsTUFGdkJ2M0MsRUFBRThYLFdBQVcsR0FFQSxPQURkOVgsRUFBRThYLFdBQVcsR0FDeUIsTUFBUyxPQUNoQ3pVLFNBQVMsSUFBSW95QixjQUFnQixJQUUxRCxTQUFTa2hCLEVBQVdHLEVBQVMvZ0IsR0FDekIsT0FBTyxTQUFVM29CLEdBQ2IsT0FBT0EsRUFDRmxCLFFBQVE2cEIsR0FBSSxTQUFVNzFCLEdBQVEsT0FBTzQyQyxFQUFRNTJDLE1BQzdDZ00sUUFBUWtyQyxFQUFpQkUsR0FDekJwckMsUUFBUWlyQyxFQUFZRSxJQUdqQyxJQUFJRyxFQUFhZixFQUFtQkgsR0FPcEM3MkMsRUFBUWc0QyxPQU5SLFNBQWdCcnFDLEdBQ1osT0FBT0EsRUFDRmxCLFFBQVFzckMsRUFBWUgsR0FDcEJuckMsUUFBUWtyQyxFQUFpQkUsR0FDekJwckMsUUFBUWlyQyxFQUFZRSxLLGdCQ2hFN0IzM0MsRUFBT0QsUUFBVWk0QyxFQUVqQixJQUFJai9CLEVBQVMsRUFBUSxJQUNqQmsvQixFQUFpQixFQUFRLEtBQW1CQyxTQUM1Q0MsRUFBZ0IsRUFBUSxLQUFrQkEsY0FDMUM5NkIsRUFBUyxFQUFRLElBQVVBLE9BRS9CLFNBQVMyNkIsRUFBTzdRLEVBQUtyNEIsR0FDakIsSUFBSTBpQixFQUFVaHJCLEtBQUswMkIsUUFBVSxJQUFJbmtCLEVBQU9vdUIsRUFBS3I0QixHQUN6Q3N1QixFQUFXNTJCLEtBQUs0eEMsU0FBVyxJQUFJRCxFQUVuQ0YsRUFBZTczQyxLQUFLb0csS0FBTSxDQUFFNnhDLGVBQWUsSUFFM0M3eEMsS0FBSytWLEtBQUssVUFBVSxXQUNoQmlWLEVBQU9oWSxJQUFJNGpCLEVBQVE1akIsVUFJM0IsRUFBUSxHQUFSLENBQW9CdytCLEVBQVFDLEdBRTVCRCxFQUFPbjJDLFVBQVV5MkMsT0FBUyxTQUFTbE8sRUFBT25zQixFQUFVdkosR0FDNUMwMUIsYUFBaUIvc0IsSUFBUStzQixFQUFRNWpDLEtBQUs0eEMsU0FBU2g2QixNQUFNZ3NCLElBQ3pENWpDLEtBQUswMkIsUUFBUTllLE1BQU1nc0IsR0FDbkIxMUIsTSw2QkNyQkovVCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FDM0NtQixPQUFPLElBR1QsSUFBSXE2QixFQUFXNTZCLE9BQU9zMkIsUUFBVSxTQUFVejBCLEdBQVUsSUFBSyxJQUFJdkMsRUFBSSxFQUFHQSxFQUFJeUUsVUFBVWhDLE9BQVF6QyxJQUFLLENBQUUsSUFBSTJJLEVBQVNsRSxVQUFVekUsR0FBSSxJQUFLLElBQUl1QixLQUFPb0gsRUFBY2pJLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBS3dJLEVBQVFwSCxLQUFRZ0IsRUFBT2hCLEdBQU9vSCxFQUFPcEgsSUFBWSxPQUFPZ0IsR0FFdlB6QyxFQUFRb3JCLFFBa0JSLFNBQXFDcGIsRUFBWXZPLEdBRy9DLElBQUlpQixFQUFRODRCLEVBQVMsSUFBSSxFQUFJZ2QsRUFBd0JwdEIsU0FBU3BiLEdBQWEsQ0FBRXZPLElBQUtBLElBSXZELGlCQUFoQmlCLEVBQU1vTixPQUFzQnBOLEVBQU1vTixpQkFBaUJsSixPQUM1RGxFLEVBQU1vTixPQUFRLEVBQUkyb0MsRUFBc0JydEIsU0FBUzFvQixFQUFNb04sY0FFaERwTixFQUFNb04sTUFHZixPQUFPcE4sR0E3QlQsSUFFSTgxQyxFQUEwQi9wQixFQUZELEVBQVEsTUFNakNncUIsRUFBd0JocUIsRUFGRCxFQUFRLE1BSW5DLFNBQVNBLEVBQXVCdnNCLEdBQU8sT0FBT0EsR0FBT0EsRUFBSVosV0FBYVksRUFBTSxDQUFFa3BCLFFBQVNscEIsSyw2QkNoQnZGdEIsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQzNDbUIsT0FBTyxJQUVUbkIsRUFBUW9yQixRQUtSLFNBQW1Db3FCLEdBQzVCa0QsRUFBVTMyQyxlQUFleXpDLEtBQzVCa0QsRUFBVWxELEdBQVdtRCxFQUFnQm5sQyxLQUFLZ2lDLElBRTVDLE9BQU9rRCxFQUFVbEQsSUFSbkIsSUFBSW1ELEVBQWtCLDhCQUVsQkQsRUFBWSxJLDZCQ1JELFNBQVNFLEVBQXlCcmtCLEdBQ2hELElBQUlyb0IsRUFDQWpMLEVBQVNzekIsRUFBS3R6QixPQWFsQixNQVhzQixtQkFBWEEsRUFDTkEsRUFBTzQzQyxXQUNWM3NDLEVBQVNqTCxFQUFPNDNDLFlBRWhCM3NDLEVBQVNqTCxFQUFPLGNBQ2hCQSxFQUFPNDNDLFdBQWEzc0MsR0FHckJBLEVBQVMsZUFHSEEsRUFmUixtQyw4QkNBQSxZQUdBLElBQUl6SyxFQUFNLHVCQUVWeEIsRUFBT0QsUUFBVSxXQUNmLE9BQU9xaUIsRUFBTzVnQixJQUFRNGdCLEVBQU81Z0IsSUFBUSxHQUFLLEssa0NDRDVDLElBQUlrMkIsRUFBTSxFQUFRLEtBQ2RsRyxFQUFTLEVBQVEsSUFDakI2SyxFQUFVLEVBQVEsSUFDbEIzTixFQUFRLEVBQVEsR0FBUixDQUFpQixvQkFNN0IxdUIsRUFBT0QsUUFBVUEsRUFBVTg0QyxFQU0zQixJQUFJQyxFQUFRLzRDLEVBQVFnNUMsU0FBVyxHQWUvQixTQUFTRixFQUFRbGQsRUFBS3pLLEdBQ0QsaUJBQVJ5SyxJQUNUekssRUFBT3lLLEVBQ1BBLE9BQU0vMkIsR0FHUnNzQixFQUFPQSxHQUFRLEdBRWYsSUFRSXNSLEVBUkFqaUIsRUFBU21YLEVBQUlpRSxHQUNiL3lCLEVBQVMyWCxFQUFPM1gsT0FDaEJxRyxFQUFLc1IsRUFBT3RSLEdBQ1p5aUIsRUFBT25SLEVBQU9tUixLQUNkMlIsRUFBZ0J5VixFQUFNN3BDLElBQU95aUIsS0FBUW9uQixFQUFNN3BDLEdBQUlxdEIsS0FtQm5ELE9BbEJvQnBMLEVBQUs4bkIsVUFBWTluQixFQUFLLDBCQUN0QixJQUFVQSxFQUFLK25CLFdBQWE1VixHQUs5QzNVLEVBQU0sK0JBQWdDOWxCLEdBQ3RDNDVCLEVBQUtuRyxFQUFRenpCLEVBQVFzb0IsS0FFaEI0bkIsRUFBTTdwQyxLQUNUeWYsRUFBTSx5QkFBMEI5bEIsR0FDaENrd0MsRUFBTTdwQyxHQUFNb3RCLEVBQVF6ekIsRUFBUXNvQixJQUU5QnNSLEVBQUtzVyxFQUFNN3BDLElBRVRzUixFQUFPdVIsUUFBVVosRUFBS1ksUUFDeEJaLEVBQUtZLE1BQVF2UixFQUFPdVIsT0FFZjBRLEVBQUdyUSxPQUFPNVIsRUFBT21SLEtBQU1SLEdBU2hDbnhCLEVBQVE0VCxTQUFXNmQsRUFBTzdkLFNBUzFCNVQsRUFBUXcrQixRQUFVc2EsRUFRbEI5NEMsRUFBUXM4QixRQUFVLEVBQVEsSUFDMUJ0OEIsRUFBUW04QixPQUFTLEVBQVEsSyw2QkMzRnpCLElBQUluekIsRUFBVSxFQUFRLEdBQVNBLFFBRS9CaEosRUFBUXNCLFlBQWEsRUFDckJ0QixFQUFRbTVDLG9CQUNZLG9CQUFYcHRDLFFBQTBCQSxPQUFPcXRDLHFDQUN0Q3J0QyxPQUFPcXRDLHFDQUNQLFdBQ0UsR0FBeUIsSUFBckJ6MEMsVUFBVWhDLE9BQ2QsTUFBNEIsaUJBQWpCZ0MsVUFBVSxHQUF3QnFFLEVBQ3RDQSxFQUFRZixNQUFNLEtBQU10RCxZQUlqQzNFLEVBQVFxNUMsaUJBQ1ksb0JBQVh0dEMsUUFBMEJBLE9BQU91dEMsNkJBQ3RDdnRDLE9BQU91dEMsNkJBQ1AsV0FBYSxPQUFPLFNBQVNsbEMsR0FBUSxPQUFPQSxLLDZCQ2hCaER4VCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FDM0NtQixPQUFPLElBRVRuQixFQUFRdTVDLFlBQWN2NUMsRUFBUXc1QyxxQkFBdUJ4NUMsRUFBUXk1QyxrQkFBZTUwQyxFQUU1RSxJQUFJNjBDLEVBQWdCLEVBQVEsSUFFNUI5NEMsT0FBT0MsZUFBZWIsRUFBUyxlQUFnQixDQUM3Q2MsWUFBWSxFQUNaQyxJQUFLLFdBQ0gsT0FBTzB0QixFQUF1QmlyQixHQUFldHVCLFdBSWpELElBQUl1dUIsRUFBd0IsRUFBUSxJQUVwQy80QyxPQUFPQyxlQUFlYixFQUFTLHVCQUF3QixDQUNyRGMsWUFBWSxFQUNaQyxJQUFLLFdBQ0gsT0FBTzB0QixFQUF1QmtyQixHQUF1QnZ1QixXQUl6RCxJQUFJd3VCLEVBQWMsRUFBUSxJQUUxQmg1QyxPQUFPQyxlQUFlYixFQUFTLGNBQWUsQ0FDNUNjLFlBQVksRUFDWkMsSUFBSyxXQUNILE9BQU8wdEIsRUFBdUJtckIsR0FBYXh1QixXQUkvQyxJQUVJeXVCLEVBQWVwckIsRUFGRCxFQUFRLE1BSTFCLFNBQVNBLEVBQXVCdnNCLEdBQU8sT0FBT0EsR0FBT0EsRUFBSVosV0FBYVksRUFBTSxDQUFFa3BCLFFBQVNscEIsR0FFdkZsQyxFQUFRb3JCLFFBQVV5dUIsRUFBYXp1QixTOzs7Ozs7OztHQy9CbEIsSUFBSTB1QixFQUFFLEVBQVEsSUFBaUJuNEMsRUFBRSxtQkFBb0JWLFFBQVFBLE9BQU84NEMsSUFBSS8zQyxFQUFFTCxFQUFFVixPQUFPODRDLElBQUksaUJBQWlCLE1BQU1DLEVBQUVyNEMsRUFBRVYsT0FBTzg0QyxJQUFJLGdCQUFnQixNQUFNLzRDLEVBQUVXLEVBQUVWLE9BQU84NEMsSUFBSSxrQkFBa0IsTUFBTTM0QyxFQUFFTyxFQUFFVixPQUFPODRDLElBQUkscUJBQXFCLE1BQU1FLEVBQUV0NEMsRUFBRVYsT0FBTzg0QyxJQUFJLGtCQUFrQixNQUFNNXNCLEVBQUV4ckIsRUFBRVYsT0FBTzg0QyxJQUFJLGtCQUFrQixNQUFNRyxFQUFFdjRDLEVBQUVWLE9BQU84NEMsSUFBSSxpQkFBaUIsTUFBTS8yQixFQUFFcmhCLEVBQUVWLE9BQU84NEMsSUFBSSxxQkFBcUIsTUFBTTkyQixFQUFFdGhCLEVBQUVWLE9BQU84NEMsSUFBSSxrQkFBa0IsTUFBTXA0QyxHQUFHVixPQUFPODRDLElBQUksdUJBQ3BjLElBQUlJLEVBQUV4NEMsRUFBRVYsT0FBTzg0QyxJQUFJLGNBQWMsTUFBTUssRUFBR3o0QyxFQUFFVixPQUFPODRDLElBQUksY0FBYyxNQUFNcDRDLEdBQUdWLE9BQU84NEMsSUFBSSxxQkFBcUJwNEMsR0FBR1YsT0FBTzg0QyxJQUFJLG1CQUFtQnA0QyxHQUFHVixPQUFPODRDLElBQUksZUFBZSxJQUFJTSxFQUFFLG1CQUFvQnA1QyxRQUFRQSxPQUFPcTVDLFNBQ3JOLFNBQVNDLEVBQUVqeEMsR0FBRyxJQUFJLElBQUlDLEVBQUUseURBQXlERCxFQUFFL0ksRUFBRSxFQUFFQSxFQUFFb0UsVUFBVWhDLE9BQU9wQyxJQUFJZ0osR0FBRyxXQUFXaUUsbUJBQW1CN0ksVUFBVXBFLElBQUksTUFBTSx5QkFBeUIrSSxFQUFFLFdBQVdDLEVBQUUsaUhBQWlILElBQUlpeEMsRUFBRSxDQUFDQyxVQUFVLFdBQVcsT0FBTSxHQUFJQyxtQkFBbUIsYUFBYUMsb0JBQW9CLGFBQWFDLGdCQUFnQixjQUFjQyxFQUFFLEdBQ25jLFNBQVNDLEVBQUV4eEMsRUFBRUMsRUFBRWhKLEdBQUdrRyxLQUFLL0QsTUFBTTRHLEVBQUU3QyxLQUFLczBDLFFBQVF4eEMsRUFBRTlDLEtBQUtrSixLQUFLa3JDLEVBQUVwMEMsS0FBS3UwQyxRQUFRejZDLEdBQUdpNkMsRUFBNlIsU0FBU1MsS0FBNkIsU0FBU0MsRUFBRTV4QyxFQUFFQyxFQUFFaEosR0FBR2tHLEtBQUsvRCxNQUFNNEcsRUFBRTdDLEtBQUtzMEMsUUFBUXh4QyxFQUFFOUMsS0FBS2tKLEtBQUtrckMsRUFBRXAwQyxLQUFLdTBDLFFBQVF6NkMsR0FBR2k2QyxFQUEzWU0sRUFBRWg1QyxVQUFVcTVDLGlCQUFpQixHQUFHTCxFQUFFaDVDLFVBQVVzNUMsU0FBUyxTQUFTOXhDLEVBQUVDLEdBQUcsR0FBRyxpQkFBa0JELEdBQUcsbUJBQW9CQSxHQUFHLE1BQU1BLEVBQUUsTUFBTTFFLE1BQU0yMUMsRUFBRSxLQUFLOXpDLEtBQUt1MEMsUUFBUUosZ0JBQWdCbjBDLEtBQUs2QyxFQUFFQyxFQUFFLGFBQWF1eEMsRUFBRWg1QyxVQUFVdTVDLFlBQVksU0FBUy94QyxHQUFHN0MsS0FBS3UwQyxRQUFRTixtQkFBbUJqMEMsS0FBSzZDLEVBQUUsZ0JBQThCMnhDLEVBQUVuNUMsVUFBVWc1QyxFQUFFaDVDLFVBQXNGLElBQUl3NUMsRUFBRUosRUFBRXA1QyxVQUFVLElBQUltNUMsRUFDL2VLLEVBQUU5M0MsWUFBWTAzQyxFQUFFcEIsRUFBRXdCLEVBQUVSLEVBQUVoNUMsV0FBV3c1QyxFQUFFQyxzQkFBcUIsRUFBRyxJQUFJQyxFQUFFLENBQUNDLFFBQVEsTUFBTUMsRUFBRSxDQUFDRCxRQUFRLE1BQU1FLEVBQUUvNkMsT0FBT2tCLFVBQVVDLGVBQWU2NUMsRUFBRSxDQUFDbjZDLEtBQUksRUFBR282QyxLQUFJLEVBQUdDLFFBQU8sRUFBR0MsVUFBUyxHQUN2SyxTQUFTQyxFQUFFMXlDLEVBQUVDLEVBQUVoSixHQUFHLElBQUkrRyxFQUFFOUcsRUFBRSxHQUFHNnFCLEVBQUUsS0FBS2xyQixFQUFFLEtBQUssR0FBRyxNQUFNb0osRUFBRSxJQUFJakMsVUFBSyxJQUFTaUMsRUFBRXN5QyxNQUFNMTdDLEVBQUVvSixFQUFFc3lDLFVBQUssSUFBU3R5QyxFQUFFOUgsTUFBTTRwQixFQUFFLEdBQUc5aEIsRUFBRTlILEtBQUs4SCxFQUFFb3lDLEVBQUV0N0MsS0FBS2tKLEVBQUVqQyxLQUFLczBDLEVBQUU3NUMsZUFBZXVGLEtBQUs5RyxFQUFFOEcsR0FBR2lDLEVBQUVqQyxJQUFJLElBQUl5SyxFQUFFcE4sVUFBVWhDLE9BQU8sRUFBRSxHQUFHLElBQUlvUCxFQUFFdlIsRUFBRXcwQyxTQUFTejBDLE9BQU8sR0FBRyxFQUFFd1IsRUFBRSxDQUFDLElBQUksSUFBSXlsQyxFQUFFcnVDLE1BQU00SSxHQUFHelIsRUFBRSxFQUFFQSxFQUFFeVIsRUFBRXpSLElBQUlrM0MsRUFBRWwzQyxHQUFHcUUsVUFBVXJFLEVBQUUsR0FBR0UsRUFBRXcwQyxTQUFTd0MsRUFBRSxHQUFHbHVDLEdBQUdBLEVBQUU4ZixhQUFhLElBQUk5aEIsS0FBS3lLLEVBQUV6SSxFQUFFOGYsa0JBQWUsSUFBUzVvQixFQUFFOEcsS0FBSzlHLEVBQUU4RyxHQUFHeUssRUFBRXpLLElBQUksTUFBTSxDQUFDMjBDLFNBQVNqNkMsRUFBRStELEtBQUt1RCxFQUFFN0gsSUFBSTRwQixFQUFFd3dCLElBQUkxN0MsRUFBRXVDLE1BQU1sQyxFQUFFMDdDLE9BQU9SLEVBQUVELFNBQ3ZVLFNBQVNVLEVBQUU3eUMsR0FBRyxNQUFNLGlCQUFrQkEsR0FBRyxPQUFPQSxHQUFHQSxFQUFFMnlDLFdBQVdqNkMsRUFBMEcsSUFBSW82QyxFQUFFLE9BQU9DLEVBQUUsR0FBRyxTQUFTQyxFQUFFaHpDLEVBQUVDLEVBQUVoSixFQUFFK0csR0FBRyxHQUFHKzBDLEVBQUUxNUMsT0FBTyxDQUFDLElBQUluQyxFQUFFNjdDLEVBQUVqWixNQUE4RCxPQUF4RDVpQyxFQUFFMEwsT0FBTzVDLEVBQUU5SSxFQUFFKzdDLFVBQVVoekMsRUFBRS9JLEVBQUVnOEMsS0FBS2o4QyxFQUFFQyxFQUFFdTZDLFFBQVF6ekMsRUFBRTlHLEVBQUVpOEMsTUFBTSxFQUFTajhDLEVBQUUsTUFBTSxDQUFDMEwsT0FBTzVDLEVBQUVpekMsVUFBVWh6QyxFQUFFaXpDLEtBQUtqOEMsRUFBRXc2QyxRQUFRenpDLEVBQUVtMUMsTUFBTSxHQUM3YixTQUFTQyxFQUFFcHpDLEdBQUdBLEVBQUU0QyxPQUFPLEtBQUs1QyxFQUFFaXpDLFVBQVUsS0FBS2p6QyxFQUFFa3pDLEtBQUssS0FBS2x6QyxFQUFFeXhDLFFBQVEsS0FBS3p4QyxFQUFFbXpDLE1BQU0sRUFBRSxHQUFHSixFQUFFMTVDLFFBQVEwNUMsRUFBRTUyQyxLQUFLNkQsR0FFMkYsU0FBU3F6QyxFQUFFcnpDLEVBQUVDLEVBQUVoSixHQUFHLE9BQU8sTUFBTStJLEVBQUUsRUFEbE8sU0FBU3N6QyxFQUFFdHpDLEVBQUVDLEVBQUVoSixFQUFFK0csR0FBRyxJQUFJOUcsU0FBUzhJLEVBQUssY0FBYzlJLEdBQUcsWUFBWUEsSUFBRThJLEVBQUUsTUFBSyxJQUFJK2hCLEdBQUUsRUFBRyxHQUFHLE9BQU8vaEIsRUFBRStoQixHQUFFLE9BQVEsT0FBTzdxQixHQUFHLElBQUssU0FBUyxJQUFLLFNBQVM2cUIsR0FBRSxFQUFHLE1BQU0sSUFBSyxTQUFTLE9BQU8vaEIsRUFBRTJ5QyxVQUFVLEtBQUtqNkMsRUFBRSxLQUFLZzRDLEVBQUUzdUIsR0FBRSxHQUFJLEdBQUdBLEVBQUUsT0FBTzlxQixFQUFFK0csRUFBRWdDLEVBQUUsS0FBS0MsRUFBRSxJQUFJc3pDLEVBQUV2ekMsRUFBRSxHQUFHQyxHQUFHLEVBQXlCLEdBQXZCOGhCLEVBQUUsRUFBRTloQixFQUFFLEtBQUtBLEVBQUUsSUFBSUEsRUFBRSxJQUFPSixNQUFNbUIsUUFBUWhCLEdBQUcsSUFBSSxJQUFJbkosRUFBRSxFQUFFQSxFQUFFbUosRUFBRTNHLE9BQU94QyxJQUFJLENBQVEsSUFBSTRSLEVBQUV4SSxFQUFFc3pDLEVBQWZyOEMsRUFBRThJLEVBQUVuSixHQUFlQSxHQUFHa3JCLEdBQUd1eEIsRUFBRXA4QyxFQUFFdVIsRUFBRXhSLEVBQUUrRyxRQUFRLEdBQUcsT0FBT2dDLEdBQUcsaUJBQWtCQSxFQUFFeUksRUFBRSxLQUFpQ0EsRUFBRSxtQkFBN0JBLEVBQUVzb0MsR0FBRy93QyxFQUFFK3dDLElBQUkvd0MsRUFBRSxlQUFzQ3lJLEVBQUUsS0FBTSxtQkFBb0JBLEVBQUUsSUFBSXpJLEVBQUV5SSxFQUFFMVIsS0FBS2lKLEdBQUduSixFQUNwZixJQUFJSyxFQUFFOEksRUFBRS9DLFFBQVFvTSxNQUE2QjBZLEdBQUd1eEIsRUFBMUJwOEMsRUFBRUEsRUFBRVcsTUFBTTRRLEVBQUV4SSxFQUFFc3pDLEVBQUVyOEMsRUFBRUwsS0FBY0ksRUFBRStHLFFBQVEsR0FBRyxXQUFXOUcsRUFBRSxNQUFNRCxFQUFFLEdBQUcrSSxFQUFFMUUsTUFBTTIxQyxFQUFFLEdBQUcsb0JBQW9CaDZDLEVBQUUscUJBQXFCSyxPQUFPb0csS0FBS3NDLEdBQUd2RixLQUFLLE1BQU0sSUFBSXhELEVBQUUsS0FBSyxPQUFPOHFCLEVBQXFDdXhCLENBQUV0ekMsRUFBRSxHQUFHQyxFQUFFaEosR0FBRyxTQUFTczhDLEVBQUV2ekMsRUFBRUMsR0FBRyxNQUFNLGlCQUFrQkQsR0FBRyxPQUFPQSxHQUFHLE1BQU1BLEVBQUU3SCxJQUg3SSxTQUFnQjZILEdBQUcsSUFBSUMsRUFBRSxDQUFDLElBQUksS0FBSyxJQUFJLE1BQU0sTUFBTSxLQUFLLEdBQUdELEdBQUdtRCxRQUFRLFNBQVEsU0FBU25ELEdBQUcsT0FBT0MsRUFBRUQsTUFHOEMwdUMsQ0FBTzF1QyxFQUFFN0gsS0FBSzhILEVBQUUzRixTQUFTLElBQUksU0FBUzZ1QixFQUFHbnBCLEVBQUVDLEdBQUdELEVBQUVrekMsS0FBS244QyxLQUFLaUosRUFBRXl4QyxRQUFReHhDLEVBQUVELEVBQUVtekMsU0FDelgsU0FBU0ssRUFBR3h6QyxFQUFFQyxFQUFFaEosR0FBRyxJQUFJK0csRUFBRWdDLEVBQUU0QyxPQUFPMUwsRUFBRThJLEVBQUVpekMsVUFBVWp6QyxFQUFFQSxFQUFFa3pDLEtBQUtuOEMsS0FBS2lKLEVBQUV5eEMsUUFBUXh4QyxFQUFFRCxFQUFFbXpDLFNBQVN0ekMsTUFBTW1CLFFBQVFoQixHQUFHeXpDLEVBQUV6ekMsRUFBRWhDLEVBQUUvRyxHQUFFLFNBQVMrSSxHQUFHLE9BQU9BLEtBQUksTUFBTUEsSUFBSTZ5QyxFQUFFN3lDLEtBQUtBLEVBSnRKLFNBQVlBLEVBQUVDLEdBQUcsTUFBTSxDQUFDMHlDLFNBQVNqNkMsRUFBRStELEtBQUt1RCxFQUFFdkQsS0FBS3RFLElBQUk4SCxFQUFFc3lDLElBQUl2eUMsRUFBRXV5QyxJQUFJbjVDLE1BQU00RyxFQUFFNUcsTUFBTXc1QyxPQUFPNXlDLEVBQUU0eUMsUUFJa0VjLENBQUcxekMsRUFBRTlJLElBQUk4SSxFQUFFN0gsS0FBSzhILEdBQUdBLEVBQUU5SCxNQUFNNkgsRUFBRTdILElBQUksSUFBSSxHQUFHNkgsRUFBRTdILEtBQUtnTCxRQUFRMnZDLEVBQUUsT0FBTyxLQUFLNzdDLElBQUkrRyxFQUFFN0IsS0FBSzZELElBQUksU0FBU3l6QyxFQUFFenpDLEVBQUVDLEVBQUVoSixFQUFFK0csRUFBRTlHLEdBQUcsSUFBSTZxQixFQUFFLEdBQUcsTUFBTTlxQixJQUFJOHFCLEdBQUcsR0FBRzlxQixHQUFHa00sUUFBUTJ2QyxFQUFFLE9BQU8sS0FBa0JPLEVBQUVyekMsRUFBRXd6QyxFQUFqQnZ6QyxFQUFFK3lDLEVBQUUveUMsRUFBRThoQixFQUFFL2pCLEVBQUU5RyxJQUFhazhDLEVBQUVuekMsR0FBRyxTQUFTMHpDLElBQUksSUFBSTN6QyxFQUFFa3lDLEVBQUVDLFFBQVEsR0FBRyxPQUFPbnlDLEVBQUUsTUFBTTFFLE1BQU0yMUMsRUFBRSxNQUFNLE9BQU9qeEMsRUFDcFosSUFBSTR6QyxFQUFFLENBQUNDLFNBQVMsQ0FBQ3J6QyxJQUFJLFNBQVNSLEVBQUVDLEVBQUVoSixHQUFHLEdBQUcsTUFBTStJLEVBQUUsT0FBT0EsRUFBRSxJQUFJaEMsRUFBRSxHQUFtQixPQUFoQnkxQyxFQUFFenpDLEVBQUVoQyxFQUFFLEtBQUtpQyxFQUFFaEosR0FBVStHLEdBQUdGLFFBQVEsU0FBU2tDLEVBQUVDLEVBQUVoSixHQUFHLEdBQUcsTUFBTStJLEVBQUUsT0FBT0EsRUFBcUJxekMsRUFBRXJ6QyxFQUFFbXBCLEVBQXZCbHBCLEVBQUUreUMsRUFBRSxLQUFLLEtBQUsveUMsRUFBRWhKLElBQWFtOEMsRUFBRW56QyxJQUFJa3pDLE1BQU0sU0FBU256QyxHQUFHLE9BQU9xekMsRUFBRXJ6QyxHQUFFLFdBQVcsT0FBTyxPQUFNLE9BQU8yNEIsUUFBUSxTQUFTMzRCLEdBQUcsSUFBSUMsRUFBRSxHQUFxQyxPQUFsQ3d6QyxFQUFFenpDLEVBQUVDLEVBQUUsTUFBSyxTQUFTRCxHQUFHLE9BQU9BLEtBQVdDLEdBQUc2ekMsS0FBSyxTQUFTOXpDLEdBQUcsSUFBSTZ5QyxFQUFFN3lDLEdBQUcsTUFBTTFFLE1BQU0yMUMsRUFBRSxNQUFNLE9BQU9qeEMsSUFBSSt6QyxVQUFVLFdBQVcsTUFBTSxDQUFDNUIsUUFBUSxPQUFPNkIsVUFBVXhDLEVBQUV5QyxjQUFjckMsRUFBRXNDLGNBQWMsU0FBU2wwQyxFQUFFQyxHQUN6VixZQUQ0VixJQUFTQSxJQUFJQSxFQUFFLE9BQU1ELEVBQUUsQ0FBQzJ5QyxTQUFTL0IsRUFBRXVELHNCQUFzQmwwQyxFQUNyZ0JtMEMsY0FBY3AwQyxFQUFFcTBDLGVBQWVyMEMsRUFBRXMwQyxhQUFhLEVBQUVDLFNBQVMsS0FBS0MsU0FBUyxPQUFRRCxTQUFTLENBQUM1QixTQUFTOXVCLEVBQUU0d0IsU0FBU3owQyxHQUFVQSxFQUFFdzBDLFNBQVN4MEMsR0FBRzAwQyxXQUFXLFNBQVMxMEMsR0FBRyxNQUFNLENBQUMyeUMsU0FBU2o1QixFQUFFcUgsT0FBTy9nQixJQUFJMjBDLEtBQUssU0FBUzMwQyxHQUFHLE1BQU0sQ0FBQzJ5QyxTQUFTN0IsRUFBRzhELE1BQU01MEMsRUFBRTYwQyxTQUFTLEVBQUVDLFFBQVEsT0FBT2x3QyxLQUFLLFNBQVM1RSxFQUFFQyxHQUFHLE1BQU0sQ0FBQzB5QyxTQUFTOUIsRUFBRXAwQyxLQUFLdUQsRUFBRXlaLGFBQVEsSUFBU3haLEVBQUUsS0FBS0EsSUFBSTgwQyxZQUFZLFNBQVMvMEMsRUFBRUMsR0FBRyxPQUFPMHpDLElBQUlvQixZQUFZLzBDLEVBQUVDLElBQUkrMEMsV0FBVyxTQUFTaDFDLEVBQUVDLEdBQUcsT0FBTzB6QyxJQUFJcUIsV0FBV2gxQyxFQUFFQyxJQUFJZzFDLFVBQVUsU0FBU2oxQyxFQUFFQyxHQUFHLE9BQU8wekMsSUFBSXNCLFVBQVVqMUMsRUFBRUMsSUFBSWkxQyxvQkFBb0IsU0FBU2wxQyxFQUNuZ0JDLEVBQUVoSixHQUFHLE9BQU8wOEMsSUFBSXVCLG9CQUFvQmwxQyxFQUFFQyxFQUFFaEosSUFBSWsrQyxjQUFjLGFBQWFDLGdCQUFnQixTQUFTcDFDLEVBQUVDLEdBQUcsT0FBTzB6QyxJQUFJeUIsZ0JBQWdCcDFDLEVBQUVDLElBQUlvMUMsUUFBUSxTQUFTcjFDLEVBQUVDLEdBQUcsT0FBTzB6QyxJQUFJMEIsUUFBUXIxQyxFQUFFQyxJQUFJcTFDLFdBQVcsU0FBU3QxQyxFQUFFQyxFQUFFaEosR0FBRyxPQUFPMDhDLElBQUkyQixXQUFXdDFDLEVBQUVDLEVBQUVoSixJQUFJcytDLE9BQU8sU0FBU3YxQyxHQUFHLE9BQU8yekMsSUFBSTRCLE9BQU92MUMsSUFBSXcxQyxTQUFTLFNBQVN4MUMsR0FBRyxPQUFPMnpDLElBQUk2QixTQUFTeDFDLElBQUl5MUMsU0FBUy85QyxFQUFFZytDLFNBQVMvRSxFQUFFZ0YsV0FBVzc5QyxFQUFFODlDLFNBQVNqOEIsRUFBRWxULGNBQWNpc0MsRUFBRW1ELGFBQWEsU0FBUzcxQyxFQUFFQyxFQUFFaEosR0FBRyxHQUFHLE1BQU8rSSxFQUFjLE1BQU0xRSxNQUFNMjFDLEVBQUUsSUFBSWp4QyxJQUFJLElBQUloQyxFQUFFd3lDLEVBQUUsR0FBR3h3QyxFQUFFNUcsT0FBT2xDLEVBQUU4SSxFQUFFN0gsSUFBSTRwQixFQUFFL2hCLEVBQUV1eUMsSUFBSTE3QyxFQUFFbUosRUFBRTR5QyxPQUNyZixHQUFHLE1BQU0zeUMsRUFBRSxDQUFvRSxRQUFuRSxJQUFTQSxFQUFFc3lDLE1BQU14d0IsRUFBRTloQixFQUFFc3lDLElBQUkxN0MsRUFBRXU3QyxFQUFFRCxjQUFTLElBQVNseUMsRUFBRTlILE1BQU1qQixFQUFFLEdBQUcrSSxFQUFFOUgsS0FBUTZILEVBQUV2RCxNQUFNdUQsRUFBRXZELEtBQUtxakIsYUFBYSxJQUFJclgsRUFBRXpJLEVBQUV2RCxLQUFLcWpCLGFBQWEsSUFBSW91QixLQUFLanVDLEVBQUVveUMsRUFBRXQ3QyxLQUFLa0osRUFBRWl1QyxLQUFLb0UsRUFBRTc1QyxlQUFleTFDLEtBQUtsd0MsRUFBRWt3QyxRQUFHLElBQVNqdUMsRUFBRWl1QyxTQUFJLElBQVN6bEMsRUFBRUEsRUFBRXlsQyxHQUFHanVDLEVBQUVpdUMsSUFBSSxJQUFJQSxFQUFFN3lDLFVBQVVoQyxPQUFPLEVBQUUsR0FBRyxJQUFJNjBDLEVBQUVsd0MsRUFBRTB0QyxTQUFTejBDLE9BQU8sR0FBRyxFQUFFaTNDLEVBQUUsQ0FBQ3psQyxFQUFFNUksTUFBTXF1QyxHQUFHLElBQUksSUFBSWwzQyxFQUFFLEVBQUVBLEVBQUVrM0MsRUFBRWwzQyxJQUFJeVIsRUFBRXpSLEdBQUdxRSxVQUFVckUsRUFBRSxHQUFHZ0gsRUFBRTB0QyxTQUFTampDLEVBQUUsTUFBTSxDQUFDa3FDLFNBQVNqNkMsRUFBRStELEtBQUt1RCxFQUFFdkQsS0FBS3RFLElBQUlqQixFQUFFcTdDLElBQUl4d0IsRUFBRTNvQixNQUFNNEUsRUFBRTQwQyxPQUFPLzdDLElBQUlpL0MsY0FBYyxTQUFTOTFDLEdBQUcsSUFBSUMsRUFBRXl5QyxFQUFFdDZDLEtBQUssS0FBSzRILEdBQVksT0FBVEMsRUFBRXhELEtBQUt1RCxFQUFTQyxHQUFHODFDLGVBQWVsRCxFQUFFLy9CLFFBQVEsVUFDcmZrakMsbURBQW1ELENBQUNDLHVCQUF1Qi9ELEVBQUVnRSx3QkFBd0IsQ0FBQ0MsU0FBUyxNQUFNQyxrQkFBa0JoRSxFQUFFaUUscUJBQXFCLENBQUNsRSxTQUFRLEdBQUl2a0IsT0FBTzRpQixJQUFJOEYsRUFBRSxDQUFDeDBCLFFBQVE4eEIsR0FBRzJDLEVBQUVELEdBQUcxQyxHQUFHMEMsRUFBRTMvQyxFQUFPRCxRQUFRNi9DLEVBQUV6MEIsU0FBU3kwQixHOzs7Ozs7OztHQ1ozTixJQUFJekYsRUFBRyxFQUFRLEdBQVN6NEMsRUFBRSxFQUFRLElBQWlCcTRDLEVBQUUsRUFBUSxJQUFhLFNBQVNDLEVBQUUzd0MsR0FBRyxJQUFJLElBQUlDLEVBQUUseURBQXlERCxFQUFFL0ksRUFBRSxFQUFFQSxFQUFFb0UsVUFBVWhDLE9BQU9wQyxJQUFJZ0osR0FBRyxXQUFXaUUsbUJBQW1CN0ksVUFBVXBFLElBQUksTUFBTSx5QkFBeUIrSSxFQUFFLFdBQVdDLEVBQUUsaUhBQWlILElBQUk2d0MsRUFBRyxNQUFNeDFDLE1BQU1xMUMsRUFBRSxNQUFNLElBQUkrQyxFQUFHLEtBQUt2cUIsRUFBRyxHQUM3YixTQUFTcXFCLElBQUssR0FBR0UsRUFBRyxJQUFJLElBQUkxekMsS0FBS21wQixFQUFHLENBQUMsSUFBSWxwQixFQUFFa3BCLEVBQUducEIsR0FBRy9JLEVBQUV5OEMsRUFBR3IzQyxRQUFRMkQsR0FBRyxNQUFNLEVBQUUvSSxHQUFHLE1BQU1xRSxNQUFNcTFDLEVBQUUsR0FBRzN3QyxJQUFJLElBQUl3MkMsRUFBR3YvQyxHQUFHLENBQUMsSUFBSWdKLEVBQUV3MkMsY0FBYyxNQUFNbjdDLE1BQU1xMUMsRUFBRSxHQUFHM3dDLElBQTJCLElBQUksSUFBSTlJLEtBQS9Ccy9DLEVBQUd2L0MsR0FBR2dKLEVBQUVoSixFQUFFZ0osRUFBRXkyQyxXQUEwQixDQUFDLElBQUkxNEMsT0FBRSxFQUFXeUssRUFBRXhSLEVBQUVDLEdBQUc2cUIsRUFBRTloQixFQUFFdXdDLEVBQUV0NUMsRUFBRSxHQUFHeS9DLEVBQUdsK0MsZUFBZSszQyxHQUFHLE1BQU1sMUMsTUFBTXExQyxFQUFFLEdBQUdILElBQUltRyxFQUFHbkcsR0FBRy9uQyxFQUFFLElBQUl5bEMsRUFBRXpsQyxFQUFFbXVDLHdCQUF3QixHQUFHMUksRUFBRSxDQUFDLElBQUlsd0MsS0FBS2t3QyxFQUFFQSxFQUFFejFDLGVBQWV1RixJQUFJNjRDLEVBQUczSSxFQUFFbHdDLEdBQUcrakIsRUFBRXl1QixHQUFHeHlDLEdBQUUsT0FBUXlLLEVBQUVxdUMsa0JBQWtCRCxFQUFHcHVDLEVBQUVxdUMsaUJBQWlCLzBCLEVBQUV5dUIsR0FBR3h5QyxHQUFFLEdBQUlBLEdBQUUsRUFBRyxJQUFJQSxFQUFFLE1BQU0xQyxNQUFNcTFDLEVBQUUsR0FBR3o1QyxFQUFFOEksT0FDamMsU0FBUzYyQyxFQUFHNzJDLEVBQUVDLEVBQUVoSixHQUFHLEdBQUc4L0MsRUFBRy8yQyxHQUFHLE1BQU0xRSxNQUFNcTFDLEVBQUUsSUFBSTN3QyxJQUFJKzJDLEVBQUcvMkMsR0FBR0MsRUFBRSsyQyxFQUFHaDNDLEdBQUdDLEVBQUV5MkMsV0FBV3ovQyxHQUFHZ2dELGFBQWEsSUFBSVQsRUFBRyxHQUFHRyxFQUFHLEdBQUdJLEVBQUcsR0FBR0MsRUFBRyxHQUFHLFNBQVNFLEVBQUdsM0MsRUFBRUMsRUFBRWhKLEVBQUVDLEVBQUU4RyxFQUFFeUssRUFBRXNaLEVBQUV5dUIsRUFBRXRDLEdBQUcsSUFBSXIzQyxFQUFFZ0osTUFBTXJILFVBQVVzRCxNQUFNL0UsS0FBS3NFLFVBQVUsR0FBRyxJQUFJNEUsRUFBRXRCLE1BQU0xSCxFQUFFSixHQUFHLE1BQU1HLEdBQUdtRyxLQUFLdXNCLFFBQVExeUIsSUFBSSxJQUFJbWdELEdBQUcsRUFBR0MsRUFBRyxLQUFLQyxHQUFHLEVBQUdDLEVBQUcsS0FBS0MsRUFBRyxDQUFDN3RCLFFBQVEsU0FBUzFwQixHQUFHbTNDLEdBQUcsRUFBR0MsRUFBR3AzQyxJQUFJLFNBQVN3M0MsRUFBR3gzQyxFQUFFQyxFQUFFaEosRUFBRUMsRUFBRThHLEVBQUV5SyxFQUFFc1osRUFBRXl1QixFQUFFdEMsR0FBR2lKLEdBQUcsRUFBR0MsRUFBRyxLQUFLRixFQUFHdjRDLE1BQU00NEMsRUFBR2w4QyxXQUN2TyxJQUFJbzhDLEVBQUcsS0FBS0MsRUFBRyxLQUFLQyxFQUFHLEtBQUssU0FBU0MsRUFBRzUzQyxFQUFFQyxFQUFFaEosR0FBRyxJQUFJQyxFQUFFOEksRUFBRXZELE1BQU0sZ0JBQWdCdUQsRUFBRTYzQyxjQUFjRixFQUFHMWdELEdBQXhPLFNBQVkrSSxFQUFFQyxFQUFFaEosRUFBRUMsRUFBRThHLEVBQUV5SyxFQUFFc1osRUFBRXl1QixFQUFFdEMsR0FBNEIsR0FBekJzSixFQUFHNzRDLE1BQU14QixLQUFLOUIsV0FBYzg3QyxFQUFHLENBQUMsSUFBR0EsRUFBZ0MsTUFBTTc3QyxNQUFNcTFDLEVBQUUsTUFBMUMsSUFBSTk1QyxFQUFFdWdELEVBQUdELEdBQUcsRUFBR0MsRUFBRyxLQUE4QkMsSUFBS0EsR0FBRyxFQUFHQyxFQUFHemdELElBQXVHaWhELENBQUc1Z0QsRUFBRStJLE9BQUUsRUFBT0QsR0FBR0EsRUFBRTYzQyxjQUFjLEtBQUssU0FBU0UsRUFBRy8zQyxFQUFFQyxHQUFHLEdBQUcsTUFBTUEsRUFBRSxNQUFNM0UsTUFBTXExQyxFQUFFLEtBQUssT0FBRyxNQUFNM3dDLEVBQVNDLEVBQUtKLE1BQU1tQixRQUFRaEIsR0FBT0gsTUFBTW1CLFFBQVFmLElBQVVELEVBQUU3RCxLQUFLd0MsTUFBTXFCLEVBQUVDLEdBQUdELElBQUVBLEVBQUU3RCxLQUFLOEQsR0FBVUQsR0FBU0gsTUFBTW1CLFFBQVFmLEdBQUcsQ0FBQ0QsR0FBR3NFLE9BQU9yRSxHQUFHLENBQUNELEVBQUVDLEdBQ3BkLFNBQVMrM0MsRUFBR2g0QyxFQUFFQyxFQUFFaEosR0FBRzRJLE1BQU1tQixRQUFRaEIsR0FBR0EsRUFBRWxDLFFBQVFtQyxFQUFFaEosR0FBRytJLEdBQUdDLEVBQUVsSixLQUFLRSxFQUFFK0ksR0FBRyxJQUFJaTRDLEVBQUcsS0FBSyxTQUFTQyxFQUFHbDRDLEdBQUcsR0FBR0EsRUFBRSxDQUFDLElBQUlDLEVBQUVELEVBQUVtNEMsbUJBQW1CbGhELEVBQUUrSSxFQUFFbzRDLG1CQUFtQixHQUFHdjRDLE1BQU1tQixRQUFRZixHQUFHLElBQUksSUFBSS9JLEVBQUUsRUFBRUEsRUFBRStJLEVBQUU1RyxTQUFTMkcsRUFBRXE0Qyx1QkFBdUJuaEQsSUFBSTBnRCxFQUFHNTNDLEVBQUVDLEVBQUUvSSxHQUFHRCxFQUFFQyxTQUFTK0ksR0FBRzIzQyxFQUFHNTNDLEVBQUVDLEVBQUVoSixHQUFHK0ksRUFBRW00QyxtQkFBbUIsS0FBS240QyxFQUFFbzRDLG1CQUFtQixLQUFLcDRDLEVBQUVzNEMsZ0JBQWdCdDRDLEVBQUU5RixZQUFZcStDLFFBQVF2NEMsSUFBSSxTQUFTdzRDLEVBQUd4NEMsR0FBd0MsR0FBckMsT0FBT0EsSUFBSWk0QyxFQUFHRixFQUFHRSxFQUFHajRDLElBQUlBLEVBQUVpNEMsRUFBR0EsRUFBRyxLQUFRajRDLEVBQUUsQ0FBVSxHQUFUZzRDLEVBQUdoNEMsRUFBRWs0QyxHQUFPRCxFQUFHLE1BQU0zOEMsTUFBTXExQyxFQUFFLEtBQUssR0FBRzBHLEVBQUcsTUFBTXIzQyxFQUFFczNDLEVBQUdELEdBQUcsRUFBR0MsRUFBRyxLQUFLdDNDLEdBQzVkLElBQUl5NEMsRUFBRyxDQUFDQyx1QkFBdUIsU0FBUzE0QyxHQUFHLEdBQUcwekMsRUFBRyxNQUFNcDRDLE1BQU1xMUMsRUFBRSxNQUFNK0MsRUFBRzd6QyxNQUFNckgsVUFBVXNELE1BQU0vRSxLQUFLaUosR0FBR3d6QyxLQUFNbUYseUJBQXlCLFNBQVMzNEMsR0FBRyxJQUFTL0ksRUFBTGdKLEdBQUUsRUFBSyxJQUFJaEosS0FBSytJLEVBQUUsR0FBR0EsRUFBRXZILGVBQWV4QixHQUFHLENBQUMsSUFBSUMsRUFBRThJLEVBQUUvSSxHQUFHLElBQUlreUIsRUFBRzF3QixlQUFleEIsSUFBSWt5QixFQUFHbHlCLEtBQUtDLEVBQUUsQ0FBQyxHQUFHaXlCLEVBQUdseUIsR0FBRyxNQUFNcUUsTUFBTXExQyxFQUFFLElBQUkxNUMsSUFBSWt5QixFQUFHbHlCLEdBQUdDLEVBQUUrSSxHQUFFLEdBQUlBLEdBQUd1ekMsTUFDL1IsU0FBU29GLEVBQUc1NEMsRUFBRUMsR0FBRyxJQUFJaEosRUFBRStJLEVBQUU2NEMsVUFBVSxJQUFJNWhELEVBQUUsT0FBTyxLQUFLLElBQUlDLEVBQUV1Z0QsRUFBR3hnRCxHQUFHLElBQUlDLEVBQUUsT0FBTyxLQUFLRCxFQUFFQyxFQUFFK0ksR0FBR0QsRUFBRSxPQUFPQyxHQUFHLElBQUssVUFBVSxJQUFLLGlCQUFpQixJQUFLLGdCQUFnQixJQUFLLHVCQUF1QixJQUFLLGNBQWMsSUFBSyxxQkFBcUIsSUFBSyxjQUFjLElBQUsscUJBQXFCLElBQUssWUFBWSxJQUFLLG9CQUFvQi9JLEdBQUdBLEVBQUU0aEQsWUFBcUI1aEQsSUFBSSxZQUFiOEksRUFBRUEsRUFBRXZELE9BQXVCLFVBQVV1RCxHQUFHLFdBQVdBLEdBQUcsYUFBYUEsSUFBSUEsR0FBRzlJLEVBQUUsTUFBTThJLEVBQUUsUUFBUUEsR0FBRSxFQUFHLEdBQUdBLEVBQUUsT0FBTyxLQUFLLEdBQUcvSSxHQUFHLG1CQUFvQkEsRUFBRSxNQUFNcUUsTUFBTXExQyxFQUFFLElBQUkxd0MsU0FBU2hKLElBQzFmLE9BQU9BLEVBQUUsSUFBSThoRCxFQUFHakksRUFBR2tGLG1EQUFtRCtDLEVBQUd0Z0QsZUFBZSw0QkFBNEJzZ0QsRUFBRzlDLHVCQUF1QixDQUFDOUQsUUFBUSxPQUFPNEcsRUFBR3RnRCxlQUFlLDZCQUE2QnNnRCxFQUFHN0Msd0JBQXdCLENBQUNDLFNBQVMsT0FDbFAsSUFBSTZDLEVBQUcsY0FBY3BJLEVBQUUsbUJBQW9CajVDLFFBQVFBLE9BQU84NEMsSUFBSXdJLEVBQUdySSxFQUFFajVDLE9BQU84NEMsSUFBSSxpQkFBaUIsTUFBTXlJLEVBQUd0SSxFQUFFajVDLE9BQU84NEMsSUFBSSxnQkFBZ0IsTUFBTTBJLEVBQUd2SSxFQUFFajVDLE9BQU84NEMsSUFBSSxrQkFBa0IsTUFBTTJJLEVBQUd4SSxFQUFFajVDLE9BQU84NEMsSUFBSSxxQkFBcUIsTUFBTTRJLEVBQUd6SSxFQUFFajVDLE9BQU84NEMsSUFBSSxrQkFBa0IsTUFBTTZJLEVBQUcxSSxFQUFFajVDLE9BQU84NEMsSUFBSSxrQkFBa0IsTUFBTThJLEVBQUczSSxFQUFFajVDLE9BQU84NEMsSUFBSSxpQkFBaUIsTUFBTStJLEVBQUc1SSxFQUFFajVDLE9BQU84NEMsSUFBSSx5QkFBeUIsTUFBTWdKLEVBQUc3SSxFQUFFajVDLE9BQU84NEMsSUFBSSxxQkFBcUIsTUFBTWlKLEVBQUc5SSxFQUFFajVDLE9BQU84NEMsSUFBSSxrQkFBa0IsTUFBTWtKLEVBQUcvSSxFQUFFajVDLE9BQU84NEMsSUFBSSx1QkFDdmUsTUFBTW1KLEVBQUdoSixFQUFFajVDLE9BQU84NEMsSUFBSSxjQUFjLE1BQU1vSixFQUFHakosRUFBRWo1QyxPQUFPODRDLElBQUksY0FBYyxNQUFNRyxHQUFHajVDLE9BQU84NEMsSUFBSSxxQkFBcUJHLEdBQUdqNUMsT0FBTzg0QyxJQUFJLG1CQUFtQkcsR0FBR2o1QyxPQUFPODRDLElBQUksZUFBZSxJQUFJcUosRUFBRyxtQkFBb0JuaUQsUUFBUUEsT0FBT3E1QyxTQUFTLFNBQVMrSSxFQUFHLzVDLEdBQUcsT0FBRyxPQUFPQSxHQUFHLGlCQUFrQkEsRUFBUyxLQUF3QyxtQkFBbkNBLEVBQUU4NUMsR0FBSTk1QyxFQUFFODVDLElBQUs5NUMsRUFBRSxlQUEwQ0EsRUFBRSxLQUV6VixTQUFTZzZDLEVBQUdoNkMsR0FBRyxHQUFHLE1BQU1BLEVBQUUsT0FBTyxLQUFLLEdBQUcsbUJBQW9CQSxFQUFFLE9BQU9BLEVBQUUrZixhQUFhL2YsRUFBRTdJLE1BQU0sS0FBSyxHQUFHLGlCQUFrQjZJLEVBQUUsT0FBT0EsRUFBRSxPQUFPQSxHQUFHLEtBQUttNUMsRUFBRyxNQUFNLFdBQVcsS0FBS0QsRUFBRyxNQUFNLFNBQVMsS0FBS0csRUFBRyxNQUFNLFdBQVcsS0FBS0QsRUFBRyxNQUFNLGFBQWEsS0FBS00sRUFBRyxNQUFNLFdBQVcsS0FBS0MsRUFBRyxNQUFNLGVBQWUsR0FBRyxpQkFBa0IzNUMsRUFBRSxPQUFPQSxFQUFFMnlDLFVBQVUsS0FBSzRHLEVBQUcsTUFBTSxtQkFBbUIsS0FBS0QsRUFBRyxNQUFNLG1CQUFtQixLQUFLRyxFQUFHLElBQUl4NUMsRUFBRUQsRUFBRStnQixPQUFtQyxPQUE1QjlnQixFQUFFQSxFQUFFOGYsYUFBYTlmLEVBQUU5SSxNQUFNLEdBQVU2SSxFQUFFK2YsY0FBYyxLQUFLOWYsRUFBRSxjQUFjQSxFQUFFLElBQ25mLGNBQWMsS0FBSzI1QyxFQUFHLE9BQU9JLEVBQUdoNkMsRUFBRXZELE1BQU0sS0FBS285QyxFQUFHLEdBQUc3NUMsRUFBRSxJQUFJQSxFQUFFNjBDLFFBQVE3MEMsRUFBRTgwQyxRQUFRLEtBQUssT0FBT2tGLEVBQUdoNkMsR0FBRyxPQUFPLEtBQUssU0FBU2k2QyxFQUFHajZDLEdBQUcsSUFBSUMsRUFBRSxHQUFHLEVBQUUsQ0FBQ0QsRUFBRSxPQUFPQSxFQUFFazZDLEtBQUssS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEVBQUUsSUFBSWpqRCxFQUFFLEdBQUcsTUFBTStJLEVBQUUsUUFBUSxJQUFJOUksRUFBRThJLEVBQUVtNkMsWUFBWW44QyxFQUFFZ0MsRUFBRW82QyxhQUFhM3hDLEVBQUV1eEMsRUFBR2g2QyxFQUFFdkQsTUFBTXhGLEVBQUUsS0FBS0MsSUFBSUQsRUFBRStpRCxFQUFHOWlELEVBQUV1RixPQUFPdkYsRUFBRXVSLEVBQUVBLEVBQUUsR0FBR3pLLEVBQUV5SyxFQUFFLFFBQVF6SyxFQUFFcThDLFNBQVNsM0MsUUFBUTYxQyxFQUFHLElBQUksSUFBSWg3QyxFQUFFczhDLFdBQVcsSUFBSXJqRCxJQUFJd1IsRUFBRSxnQkFBZ0J4UixFQUFFLEtBQUtBLEVBQUUsYUFBYUMsR0FBRyxXQUFXdVIsRUFBRXhJLEdBQUdoSixFQUFFK0ksRUFBRUEsRUFBRXU2QyxhQUFhdjZDLEdBQUcsT0FBT0MsRUFDcmMsSUFBSXU2QyxJQUFLLG9CQUFxQi8zQyxhQUFRLElBQXFCQSxPQUFPQyxlQUFVLElBQXFCRCxPQUFPQyxTQUFTK0QsZUFBZWcwQyxHQUFHLEtBQUtDLEdBQUcsS0FBSzdyQyxHQUFHLEtBQUssU0FBUzhyQyxHQUFHMzZDLEdBQUcsR0FBR0EsRUFBRTAzQyxFQUFHMTNDLEdBQUcsQ0FBQyxHQUFHLG1CQUFvQnk2QyxHQUFHLE1BQU1uL0MsTUFBTXExQyxFQUFFLE1BQU0sSUFBSTF3QyxFQUFFdzNDLEVBQUd6M0MsRUFBRTY0QyxXQUFXNEIsR0FBR3o2QyxFQUFFNjRDLFVBQVU3NEMsRUFBRXZELEtBQUt3RCxJQUFJLFNBQVNvTCxHQUFHckwsR0FBRzA2QyxHQUFHN3JDLEdBQUdBLEdBQUcxUyxLQUFLNkQsR0FBRzZPLEdBQUcsQ0FBQzdPLEdBQUcwNkMsR0FBRzE2QyxFQUFFLFNBQVM0NkMsS0FBSyxHQUFHRixHQUFHLENBQUMsSUFBSTE2QyxFQUFFMDZDLEdBQUd6NkMsRUFBRTRPLEdBQW9CLEdBQWpCQSxHQUFHNnJDLEdBQUcsS0FBS0MsR0FBRzM2QyxHQUFNQyxFQUFFLElBQUlELEVBQUUsRUFBRUEsRUFBRUMsRUFBRTVHLE9BQU8yRyxJQUFJMjZDLEdBQUcxNkMsRUFBRUQsS0FBSyxTQUFTNjZDLEdBQUc3NkMsRUFBRUMsR0FBRyxPQUFPRCxFQUFFQyxHQUFHLFNBQVM2NkMsR0FBRzk2QyxFQUFFQyxFQUFFaEosRUFBRUMsR0FBRyxPQUFPOEksRUFBRUMsRUFBRWhKLEVBQUVDLEdBQUcsU0FBUzZqRCxNQUNsZSxJQUFJQyxHQUFHSCxHQUFHSSxJQUFHLEVBQUdDLElBQUcsRUFBRyxTQUFTQyxLQUFRLE9BQU9ULElBQUksT0FBTzdyQyxLQUFHa3NDLEtBQUtILE1BQUssSUFBSVEsSUFBSSxJQUFJQyxHQUFHLDhWQUE4VkMsR0FBR2hrRCxPQUFPa0IsVUFBVUMsZUFBZThpRCxHQUFHLEdBQUdDLEdBQUcsR0FFdlEsU0FBU3ZLLEdBQUVqeEMsRUFBRUMsRUFBRWhKLEVBQUVDLEVBQUU4RyxFQUFFeUssR0FBR3RMLEtBQUtzK0MsZ0JBQWdCLElBQUl4N0MsR0FBRyxJQUFJQSxHQUFHLElBQUlBLEVBQUU5QyxLQUFLdStDLGNBQWN4a0QsRUFBRWlHLEtBQUt3K0MsbUJBQW1CMzlDLEVBQUViLEtBQUt5K0MsZ0JBQWdCM2tELEVBQUVrRyxLQUFLMCtDLGFBQWE3N0MsRUFBRTdDLEtBQUtWLEtBQUt3RCxFQUFFOUMsS0FBSzIrQyxZQUFZcnpDLEVBQUUsSUFBSThvQyxHQUFFLEdBQ3haLHVJQUF1SS8yQyxNQUFNLEtBQUtzRCxTQUFRLFNBQVNrQyxHQUFHdXhDLEdBQUV2eEMsR0FBRyxJQUFJaXhDLEdBQUVqeEMsRUFBRSxHQUFFLEVBQUdBLEVBQUUsTUFBSyxNQUFNLENBQUMsQ0FBQyxnQkFBZ0Isa0JBQWtCLENBQUMsWUFBWSxTQUFTLENBQUMsVUFBVSxPQUFPLENBQUMsWUFBWSxlQUFlbEMsU0FBUSxTQUFTa0MsR0FBRyxJQUFJQyxFQUFFRCxFQUFFLEdBQUd1eEMsR0FBRXR4QyxHQUFHLElBQUlneEMsR0FBRWh4QyxFQUFFLEdBQUUsRUFBR0QsRUFBRSxHQUFHLE1BQUssTUFBTSxDQUFDLGtCQUFrQixZQUFZLGFBQWEsU0FBU2xDLFNBQVEsU0FBU2tDLEdBQUd1eEMsR0FBRXZ4QyxHQUFHLElBQUlpeEMsR0FBRWp4QyxFQUFFLEdBQUUsRUFBR0EsRUFBRXdWLGNBQWMsTUFBSyxNQUM5ZCxDQUFDLGNBQWMsNEJBQTRCLFlBQVksaUJBQWlCMVgsU0FBUSxTQUFTa0MsR0FBR3V4QyxHQUFFdnhDLEdBQUcsSUFBSWl4QyxHQUFFanhDLEVBQUUsR0FBRSxFQUFHQSxFQUFFLE1BQUssTUFBTSx3TkFBd054RixNQUFNLEtBQUtzRCxTQUFRLFNBQVNrQyxHQUFHdXhDLEdBQUV2eEMsR0FBRyxJQUFJaXhDLEdBQUVqeEMsRUFBRSxHQUFFLEVBQUdBLEVBQUV3VixjQUFjLE1BQUssTUFDelosQ0FBQyxVQUFVLFdBQVcsUUFBUSxZQUFZMVgsU0FBUSxTQUFTa0MsR0FBR3V4QyxHQUFFdnhDLEdBQUcsSUFBSWl4QyxHQUFFanhDLEVBQUUsR0FBRSxFQUFHQSxFQUFFLE1BQUssTUFBTSxDQUFDLFVBQVUsWUFBWWxDLFNBQVEsU0FBU2tDLEdBQUd1eEMsR0FBRXZ4QyxHQUFHLElBQUlpeEMsR0FBRWp4QyxFQUFFLEdBQUUsRUFBR0EsRUFBRSxNQUFLLE1BQU0sQ0FBQyxPQUFPLE9BQU8sT0FBTyxRQUFRbEMsU0FBUSxTQUFTa0MsR0FBR3V4QyxHQUFFdnhDLEdBQUcsSUFBSWl4QyxHQUFFanhDLEVBQUUsR0FBRSxFQUFHQSxFQUFFLE1BQUssTUFBTSxDQUFDLFVBQVUsU0FBU2xDLFNBQVEsU0FBU2tDLEdBQUd1eEMsR0FBRXZ4QyxHQUFHLElBQUlpeEMsR0FBRWp4QyxFQUFFLEdBQUUsRUFBR0EsRUFBRXdWLGNBQWMsTUFBSyxNQUFNLElBQUl1bUMsR0FBRyxnQkFBZ0IsU0FBU0MsR0FBR2g4QyxHQUFHLE9BQU9BLEVBQUUsR0FBRzBzQixjQUd0TSxTQUFTdXZCLEdBQUdqOEMsR0FBRyxjQUFjQSxHQUFHLElBQUssVUFBVSxJQUFLLFNBQVMsSUFBSyxTQUFTLElBQUssU0FBUyxJQUFLLFlBQVksT0FBT0EsRUFBRSxRQUFRLE1BQU0sSUFDMVQsU0FBU2s4QyxHQUFHbDhDLEVBQUVDLEVBQUVoSixFQUFFQyxHQUFHLElBQUk4RyxFQUFFdXpDLEdBQUU5NEMsZUFBZXdILEdBQUdzeEMsR0FBRXR4QyxHQUFHLE1BQVcsT0FBT2pDLEVBQUUsSUFBSUEsRUFBRXZCLE1BQUt2RixJQUFPLEVBQUUrSSxFQUFFNUcsU0FBUyxNQUFNNEcsRUFBRSxJQUFJLE1BQU1BLEVBQUUsTUFBSSxNQUFNQSxFQUFFLElBQUksTUFBTUEsRUFBRSxRQVBuSixTQUFZRCxFQUFFQyxFQUFFaEosRUFBRUMsR0FBRyxHQUFHLE1BQU8rSSxHQURvRixTQUFZRCxFQUFFQyxFQUFFaEosRUFBRUMsR0FBRyxHQUFHLE9BQU9ELEdBQUcsSUFBSUEsRUFBRXdGLEtBQUssT0FBTSxFQUFHLGNBQWN3RCxHQUFHLElBQUssV0FBVyxJQUFLLFNBQVMsT0FBTSxFQUFHLElBQUssVUFBVSxPQUFHL0ksSUFBYyxPQUFPRCxHQUFTQSxFQUFFd2tELGdCQUFtRCxXQUFuQ3o3QyxFQUFFQSxFQUFFd1YsY0FBYzFaLE1BQU0sRUFBRSxLQUFzQixVQUFVa0UsR0FBRSxRQUFRLE9BQU0sR0FDblRtOEMsQ0FBR244QyxFQUFFQyxFQUFFaEosRUFBRUMsR0FBRyxPQUFNLEVBQUcsR0FBR0EsRUFBRSxPQUFNLEVBQUcsR0FBRyxPQUFPRCxFQUFFLE9BQU9BLEVBQUV3RixNQUFNLEtBQUssRUFBRSxPQUFPd0QsRUFBRSxLQUFLLEVBQUUsT0FBTSxJQUFLQSxFQUFFLEtBQUssRUFBRSxPQUFPa1csTUFBTWxXLEdBQUcsS0FBSyxFQUFFLE9BQU9rVyxNQUFNbFcsSUFBSSxFQUFFQSxFQUFFLE9BQU0sRUFPckRtOEMsQ0FBR244QyxFQUFFaEosRUFBRStHLEVBQUU5RyxLQUFLRCxFQUFFLE1BQU1DLEdBQUcsT0FBTzhHLEVBUmhNLFNBQVlnQyxHQUFHLFFBQUdzN0MsR0FBR3ZrRCxLQUFLeWtELEdBQUd4N0MsS0FBZXM3QyxHQUFHdmtELEtBQUt3a0QsR0FBR3Y3QyxLQUFlcTdDLEdBQUdueEMsS0FBS2xLLEdBQVV3N0MsR0FBR3g3QyxJQUFHLEdBQUd1N0MsR0FBR3Y3QyxJQUFHLEdBQVMsSUFRa0ZxOEMsQ0FBR3A4QyxLQUFLLE9BQU9oSixFQUFFK0ksRUFBRXM4QyxnQkFBZ0JyOEMsR0FBR0QsRUFBRTRHLGFBQWEzRyxFQUFFLEdBQUdoSixJQUFJK0csRUFBRTQ5QyxnQkFBZ0I1N0MsRUFBRWhDLEVBQUU2OUMsY0FBYyxPQUFPNWtELEVBQUUsSUFBSStHLEVBQUV2QixNQUFRLEdBQUd4RixHQUFHZ0osRUFBRWpDLEVBQUUwOUMsY0FBY3hrRCxFQUFFOEcsRUFBRTI5QyxtQkFBbUIsT0FBTzFrRCxFQUFFK0ksRUFBRXM4QyxnQkFBZ0JyOEMsSUFBYWhKLEVBQUUsS0FBWCtHLEVBQUVBLEVBQUV2QixPQUFjLElBQUl1QixJQUFHLElBQUsvRyxFQUFFLEdBQUcsR0FBR0EsRUFBRUMsRUFBRThJLEVBQUV1OEMsZUFBZXJsRCxFQUFFK0ksRUFBRWhKLEdBQUcrSSxFQUFFNEcsYUFBYTNHLEVBQUVoSixNQUM1ZCxTQUFTdWxELEdBQUd4OEMsR0FBRyxJQUFJQyxFQUFFRCxFQUFFdkQsS0FBSyxPQUFPdUQsRUFBRUEsRUFBRXk4QyxXQUFXLFVBQVV6OEMsRUFBRXdWLGdCQUFnQixhQUFhdlYsR0FBRyxVQUFVQSxHQUVwRixTQUFTeThDLEdBQUcxOEMsR0FBR0EsRUFBRTI4QyxnQkFBZ0IzOEMsRUFBRTI4QyxjQUR2RCxTQUFZMzhDLEdBQUcsSUFBSUMsRUFBRXU4QyxHQUFHeDhDLEdBQUcsVUFBVSxRQUFRL0ksRUFBRUssT0FBTytILHlCQUF5QlcsRUFBRTlGLFlBQVkxQixVQUFVeUgsR0FBRy9JLEVBQUUsR0FBRzhJLEVBQUVDLEdBQUcsSUFBSUQsRUFBRXZILGVBQWV3SCxTQUFJLElBQXFCaEosR0FBRyxtQkFBb0JBLEVBQUVRLEtBQUssbUJBQW9CUixFQUFFb25CLElBQUksQ0FBQyxJQUFJcmdCLEVBQUUvRyxFQUFFUSxJQUFJZ1IsRUFBRXhSLEVBQUVvbkIsSUFBaUwsT0FBN0svbUIsT0FBT0MsZUFBZXlJLEVBQUVDLEVBQUUsQ0FBQ3BILGNBQWEsRUFBR3BCLElBQUksV0FBVyxPQUFPdUcsRUFBRWpILEtBQUtvRyxPQUFPa2hCLElBQUksU0FBU3JlLEdBQUc5SSxFQUFFLEdBQUc4SSxFQUFFeUksRUFBRTFSLEtBQUtvRyxLQUFLNkMsTUFBTTFJLE9BQU9DLGVBQWV5SSxFQUFFQyxFQUFFLENBQUN6SSxXQUFXUCxFQUFFTyxhQUFtQixDQUFDb2xELFNBQVMsV0FBVyxPQUFPMWxELEdBQUcybEQsU0FBUyxTQUFTNzhDLEdBQUc5SSxFQUFFLEdBQUc4SSxHQUFHODhDLGFBQWEsV0FBVzk4QyxFQUFFMjhDLGNBQ3hmLFlBQVkzOEMsRUFBRUMsTUFBdUQ4OEMsQ0FBRy84QyxJQUFJLFNBQVNnOUMsR0FBR2g5QyxHQUFHLElBQUlBLEVBQUUsT0FBTSxFQUFHLElBQUlDLEVBQUVELEVBQUUyOEMsY0FBYyxJQUFJMThDLEVBQUUsT0FBTSxFQUFHLElBQUloSixFQUFFZ0osRUFBRTI4QyxXQUFlMWxELEVBQUUsR0FBcUQsT0FBbEQ4SSxJQUFJOUksRUFBRXNsRCxHQUFHeDhDLEdBQUdBLEVBQUVpVixRQUFRLE9BQU8sUUFBUWpWLEVBQUVuSSxRQUFPbUksRUFBRTlJLEtBQWFELElBQUdnSixFQUFFNDhDLFNBQVM3OEMsSUFBRyxHQUFPLFNBQVNpOUMsR0FBR2o5QyxFQUFFQyxHQUFHLElBQUloSixFQUFFZ0osRUFBRWdWLFFBQVEsT0FBTzVjLEVBQUUsR0FBRzRILEVBQUUsQ0FBQ2k5QyxvQkFBZSxFQUFPQyxrQkFBYSxFQUFPdGxELFdBQU0sRUFBT29kLFFBQVEsTUFBTWhlLEVBQUVBLEVBQUUrSSxFQUFFbzlDLGNBQWNDLGlCQUN6WSxTQUFTQyxHQUFHdDlDLEVBQUVDLEdBQUcsSUFBSWhKLEVBQUUsTUFBTWdKLEVBQUVrOUMsYUFBYSxHQUFHbDlDLEVBQUVrOUMsYUFBYWptRCxFQUFFLE1BQU0rSSxFQUFFZ1YsUUFBUWhWLEVBQUVnVixRQUFRaFYsRUFBRWk5QyxlQUFlam1ELEVBQUVnbEQsR0FBRyxNQUFNaDhDLEVBQUVwSSxNQUFNb0ksRUFBRXBJLE1BQU1aLEdBQUcrSSxFQUFFbzlDLGNBQWMsQ0FBQ0MsZUFBZW5tRCxFQUFFcW1ELGFBQWF0bUQsRUFBRXVtRCxXQUFXLGFBQWF2OUMsRUFBRXhELE1BQU0sVUFBVXdELEVBQUV4RCxLQUFLLE1BQU13RCxFQUFFZ1YsUUFBUSxNQUFNaFYsRUFBRXBJLE9BQU8sU0FBUzRsRCxHQUFHejlDLEVBQUVDLEdBQWUsT0FBWkEsRUFBRUEsRUFBRWdWLFVBQWlCaW5DLEdBQUdsOEMsRUFBRSxVQUFVQyxHQUFFLEdBQ2pVLFNBQVN5OUMsR0FBRzE5QyxFQUFFQyxHQUFHdzlDLEdBQUd6OUMsRUFBRUMsR0FBRyxJQUFJaEosRUFBRWdsRCxHQUFHaDhDLEVBQUVwSSxPQUFPWCxFQUFFK0ksRUFBRXhELEtBQUssR0FBRyxNQUFNeEYsRUFBSyxXQUFXQyxHQUFNLElBQUlELEdBQUcsS0FBSytJLEVBQUVuSSxPQUFPbUksRUFBRW5JLE9BQU9aLEtBQUUrSSxFQUFFbkksTUFBTSxHQUFHWixHQUFPK0ksRUFBRW5JLFFBQVEsR0FBR1osSUFBSStJLEVBQUVuSSxNQUFNLEdBQUdaLFFBQVEsR0FBRyxXQUFXQyxHQUFHLFVBQVVBLEVBQThCLFlBQTNCOEksRUFBRXM4QyxnQkFBZ0IsU0FBZ0JyOEMsRUFBRXhILGVBQWUsU0FBU2tsRCxHQUFHMzlDLEVBQUVDLEVBQUV4RCxLQUFLeEYsR0FBR2dKLEVBQUV4SCxlQUFlLGlCQUFpQmtsRCxHQUFHMzlDLEVBQUVDLEVBQUV4RCxLQUFLdy9DLEdBQUdoOEMsRUFBRWs5QyxlQUFlLE1BQU1sOUMsRUFBRWdWLFNBQVMsTUFBTWhWLEVBQUVpOUMsaUJBQWlCbDlDLEVBQUVrOUMsaUJBQWlCajlDLEVBQUVpOUMsZ0JBQ25aLFNBQVNVLEdBQUc1OUMsRUFBRUMsRUFBRWhKLEdBQUcsR0FBR2dKLEVBQUV4SCxlQUFlLFVBQVV3SCxFQUFFeEgsZUFBZSxnQkFBZ0IsQ0FBQyxJQUFJdkIsRUFBRStJLEVBQUV4RCxLQUFLLEtBQUssV0FBV3ZGLEdBQUcsVUFBVUEsUUFBRyxJQUFTK0ksRUFBRXBJLE9BQU8sT0FBT29JLEVBQUVwSSxPQUFPLE9BQU9vSSxFQUFFLEdBQUdELEVBQUVvOUMsY0FBY0csYUFBYXRtRCxHQUFHZ0osSUFBSUQsRUFBRW5JLFFBQVFtSSxFQUFFbkksTUFBTW9JLEdBQUdELEVBQUVtOUMsYUFBYWw5QyxFQUFXLE1BQVRoSixFQUFFK0ksRUFBRTdJLFFBQWM2SSxFQUFFN0ksS0FBSyxJQUFJNkksRUFBRWs5QyxnQkFBZ0JsOUMsRUFBRWs5QyxlQUFlbDlDLEVBQUVrOUMsaUJBQWlCbDlDLEVBQUVvOUMsY0FBY0MsZUFBZSxLQUFLcG1ELElBQUkrSSxFQUFFN0ksS0FBS0YsR0FDMVgsU0FBUzBtRCxHQUFHMzlDLEVBQUVDLEVBQUVoSixHQUFNLFdBQVdnSixHQUFHRCxFQUFFNjlDLGNBQWNDLGdCQUFnQjk5QyxJQUFFLE1BQU0vSSxFQUFFK0ksRUFBRW05QyxhQUFhLEdBQUduOUMsRUFBRW85QyxjQUFjRyxhQUFhdjlDLEVBQUVtOUMsZUFBZSxHQUFHbG1ELElBQUkrSSxFQUFFbTlDLGFBQWEsR0FBR2xtRCxJQUF3RixTQUFTOG1ELEdBQUcvOUMsRUFBRUMsR0FBNkQsT0FBMURELEVBQUUzSCxFQUFFLENBQUNxekMsY0FBUyxHQUFRenJDLElBQU1BLEVBQWxJLFNBQVlELEdBQUcsSUFBSUMsRUFBRSxHQUF1RCxPQUFwRDZ3QyxFQUFHK0MsU0FBUy8xQyxRQUFRa0MsR0FBRSxTQUFTQSxHQUFHLE1BQU1BLElBQUlDLEdBQUdELE1BQVlDLEVBQWlEKzlDLENBQUcvOUMsRUFBRXlyQyxhQUFVMXJDLEVBQUUwckMsU0FBU3pyQyxHQUFTRCxFQUNqVixTQUFTaStDLEdBQUdqK0MsRUFBRUMsRUFBRWhKLEVBQUVDLEdBQWUsR0FBWjhJLEVBQUVBLEVBQUV5RixRQUFXeEYsRUFBRSxDQUFDQSxFQUFFLEdBQUcsSUFBSSxJQUFJakMsRUFBRSxFQUFFQSxFQUFFL0csRUFBRW9DLE9BQU8yRSxJQUFJaUMsRUFBRSxJQUFJaEosRUFBRStHLEtBQUksRUFBRyxJQUFJL0csRUFBRSxFQUFFQSxFQUFFK0ksRUFBRTNHLE9BQU9wQyxJQUFJK0csRUFBRWlDLEVBQUV4SCxlQUFlLElBQUl1SCxFQUFFL0ksR0FBR1ksT0FBT21JLEVBQUUvSSxHQUFHaW5ELFdBQVdsZ0QsSUFBSWdDLEVBQUUvSSxHQUFHaW5ELFNBQVNsZ0QsR0FBR0EsR0FBRzlHLElBQUk4SSxFQUFFL0ksR0FBR2tuRCxpQkFBZ0IsT0FBUSxDQUFtQixJQUFsQmxuRCxFQUFFLEdBQUdnbEQsR0FBR2hsRCxHQUFHZ0osRUFBRSxLQUFTakMsRUFBRSxFQUFFQSxFQUFFZ0MsRUFBRTNHLE9BQU8yRSxJQUFJLENBQUMsR0FBR2dDLEVBQUVoQyxHQUFHbkcsUUFBUVosRUFBaUQsT0FBOUMrSSxFQUFFaEMsR0FBR2tnRCxVQUFTLE9BQUdobkQsSUFBSThJLEVBQUVoQyxHQUFHbWdELGlCQUFnQixJQUFXLE9BQU9sK0MsR0FBR0QsRUFBRWhDLEdBQUc4NkMsV0FBVzc0QyxFQUFFRCxFQUFFaEMsSUFBSSxPQUFPaUMsSUFBSUEsRUFBRWkrQyxVQUFTLElBQ3BZLFNBQVNFLEdBQUdwK0MsRUFBRUMsR0FBRyxHQUFHLE1BQU1BLEVBQUVvK0Msd0JBQXdCLE1BQU0vaUQsTUFBTXExQyxFQUFFLEtBQUssT0FBT3Q0QyxFQUFFLEdBQUc0SCxFQUFFLENBQUNwSSxXQUFNLEVBQU9zbEQsa0JBQWEsRUFBT3pSLFNBQVMsR0FBRzFyQyxFQUFFbzlDLGNBQWNHLGVBQWUsU0FBU2UsR0FBR3QrQyxFQUFFQyxHQUFHLElBQUloSixFQUFFZ0osRUFBRXBJLE1BQU0sR0FBRyxNQUFNWixFQUFFLENBQStCLEdBQTlCQSxFQUFFZ0osRUFBRWs5QyxhQUE2QixPQUFoQmw5QyxFQUFFQSxFQUFFeXJDLFVBQW9CLENBQUMsR0FBRyxNQUFNejBDLEVBQUUsTUFBTXFFLE1BQU1xMUMsRUFBRSxLQUFLLEdBQUc5d0MsTUFBTW1CLFFBQVFmLEdBQUcsQ0FBQyxLQUFLLEdBQUdBLEVBQUU1RyxRQUFRLE1BQU1pQyxNQUFNcTFDLEVBQUUsS0FBSzF3QyxFQUFFQSxFQUFFLEdBQUdoSixFQUFFZ0osRUFBRSxNQUFNaEosSUFBSUEsRUFBRSxJQUFJK0ksRUFBRW85QyxjQUFjLENBQUNHLGFBQWF0QixHQUFHaGxELElBQzNZLFNBQVNzbkQsR0FBR3YrQyxFQUFFQyxHQUFHLElBQUloSixFQUFFZ2xELEdBQUdoOEMsRUFBRXBJLE9BQU9YLEVBQUUra0QsR0FBR2g4QyxFQUFFazlDLGNBQWMsTUFBTWxtRCxLQUFJQSxFQUFFLEdBQUdBLEtBQU0rSSxFQUFFbkksUUFBUW1JLEVBQUVuSSxNQUFNWixHQUFHLE1BQU1nSixFQUFFazlDLGNBQWNuOUMsRUFBRW05QyxlQUFlbG1ELElBQUkrSSxFQUFFbTlDLGFBQWFsbUQsSUFBSSxNQUFNQyxJQUFJOEksRUFBRW05QyxhQUFhLEdBQUdqbUQsR0FBRyxTQUFTc25ELEdBQUd4K0MsR0FBRyxJQUFJQyxFQUFFRCxFQUFFeStDLFlBQVl4K0MsSUFBSUQsRUFBRW85QyxjQUFjRyxjQUFjLEtBQUt0OUMsR0FBRyxPQUFPQSxJQUFJRCxFQUFFbkksTUFBTW9JLEdBYi9SLDBqQ0FBMGpDekYsTUFBTSxLQUFLc0QsU0FBUSxTQUFTa0MsR0FBRyxJQUFJQyxFQUFFRCxFQUFFbUQsUUFBUTQ0QyxHQUN6bUNDLElBQUl6SyxHQUFFdHhDLEdBQUcsSUFBSWd4QyxHQUFFaHhDLEVBQUUsR0FBRSxFQUFHRCxFQUFFLE1BQUssTUFBTSwyRUFBMkV4RixNQUFNLEtBQUtzRCxTQUFRLFNBQVNrQyxHQUFHLElBQUlDLEVBQUVELEVBQUVtRCxRQUFRNDRDLEdBQUdDLElBQUl6SyxHQUFFdHhDLEdBQUcsSUFBSWd4QyxHQUFFaHhDLEVBQUUsR0FBRSxFQUFHRCxFQUFFLGdDQUErQixNQUFNLENBQUMsV0FBVyxXQUFXLGFBQWFsQyxTQUFRLFNBQVNrQyxHQUFHLElBQUlDLEVBQUVELEVBQUVtRCxRQUFRNDRDLEdBQUdDLElBQUl6SyxHQUFFdHhDLEdBQUcsSUFBSWd4QyxHQUFFaHhDLEVBQUUsR0FBRSxFQUFHRCxFQUFFLHdDQUF1QyxNQUFNLENBQUMsV0FBVyxlQUFlbEMsU0FBUSxTQUFTa0MsR0FBR3V4QyxHQUFFdnhDLEdBQUcsSUFBSWl4QyxHQUFFanhDLEVBQUUsR0FBRSxFQUFHQSxFQUFFd1YsY0FBYyxNQUFLLE1BQ25jKzdCLEdBQUVtTixVQUFVLElBQUl6TixHQUFFLFlBQVksR0FBRSxFQUFHLGFBQWEsZ0NBQStCLEdBQUksQ0FBQyxNQUFNLE9BQU8sU0FBUyxjQUFjbnpDLFNBQVEsU0FBU2tDLEdBQUd1eEMsR0FBRXZ4QyxHQUFHLElBQUlpeEMsR0FBRWp4QyxFQUFFLEdBQUUsRUFBR0EsRUFBRXdWLGNBQWMsTUFBSyxNQVcrRyxJQUFJbXBDLEdBQUcsQ0FBQ0MsS0FBSywrQkFBK0JDLE9BQU8scUNBQXFDeGhCLElBQUksOEJBQzlYLFNBQVN5aEIsR0FBRzkrQyxHQUFHLE9BQU9BLEdBQUcsSUFBSyxNQUFNLE1BQU0sNkJBQTZCLElBQUssT0FBTyxNQUFNLHFDQUFxQyxRQUFRLE1BQU0sZ0NBQWdDLFNBQVMrK0MsR0FBRy8rQyxFQUFFQyxHQUFHLE9BQU8sTUFBTUQsR0FBRyxpQ0FBaUNBLEVBQUU4K0MsR0FBRzcrQyxHQUFHLCtCQUErQkQsR0FBRyxrQkFBa0JDLEVBQUUsK0JBQStCRCxFQUMzVSxJQUFJZy9DLEdBQUdDLEdBQUcsU0FBU2ovQyxHQUFHLE1BQU0sb0JBQXFCay9DLE9BQU9BLE1BQU1DLHdCQUF3QixTQUFTbC9DLEVBQUVoSixFQUFFQyxFQUFFOEcsR0FBR2toRCxNQUFNQyx5QkFBd0IsV0FBVyxPQUFPbi9DLEVBQUVDLEVBQUVoSixPQUFVK0ksRUFBNUosRUFBK0osU0FBU0EsRUFBRUMsR0FBRyxHQUFHRCxFQUFFby9DLGVBQWVULEdBQUd0aEIsS0FBSyxjQUFjcjlCLEVBQUVBLEVBQUVxL0MsVUFBVXAvQyxNQUFNLENBQTJGLEtBQTFGKytDLEdBQUdBLElBQUl0OEMsU0FBUytELGNBQWMsUUFBVTQ0QyxVQUFVLFFBQVFwL0MsRUFBRXEvQyxVQUFVaGxELFdBQVcsU0FBYTJGLEVBQUUrK0MsR0FBR3AzQyxXQUFXNUgsRUFBRTRILFlBQVk1SCxFQUFFeUgsWUFBWXpILEVBQUU0SCxZQUFZLEtBQUszSCxFQUFFMkgsWUFBWTVILEVBQUU4RyxZQUFZN0csRUFBRTJILGdCQUNqYixTQUFTMjNDLEdBQUd2L0MsRUFBRUMsR0FBRyxHQUFHQSxFQUFFLENBQUMsSUFBSWhKLEVBQUUrSSxFQUFFNEgsV0FBVyxHQUFHM1EsR0FBR0EsSUFBSStJLEVBQUV3L0MsV0FBVyxJQUFJdm9ELEVBQUV3b0QsU0FBd0IsWUFBZHhvRCxFQUFFbTFDLFVBQVVuc0MsR0FBVUQsRUFBRXkrQyxZQUFZeCtDLEVBQUUsU0FBU3kvQyxHQUFHMS9DLEVBQUVDLEdBQUcsSUFBSWhKLEVBQUUsR0FBa0YsT0FBL0VBLEVBQUUrSSxFQUFFd1YsZUFBZXZWLEVBQUV1VixjQUFjdmUsRUFBRSxTQUFTK0ksR0FBRyxTQUFTQyxFQUFFaEosRUFBRSxNQUFNK0ksR0FBRyxNQUFNQyxFQUFTaEosRUFBRSxJQUFJMG9ELEdBQUcsQ0FBQ0MsYUFBYUYsR0FBRyxZQUFZLGdCQUFnQkcsbUJBQW1CSCxHQUFHLFlBQVksc0JBQXNCSSxlQUFlSixHQUFHLFlBQVksa0JBQWtCSyxjQUFjTCxHQUFHLGFBQWEsa0JBQWtCTSxHQUFHLEdBQUdDLEdBQUcsR0FDMU0sU0FBU0MsR0FBR2xnRCxHQUFHLEdBQUdnZ0QsR0FBR2hnRCxHQUFHLE9BQU9nZ0QsR0FBR2hnRCxHQUFHLElBQUkyL0MsR0FBRzMvQyxHQUFHLE9BQU9BLEVBQUUsSUFBWS9JLEVBQVJnSixFQUFFMC9DLEdBQUczL0MsR0FBSyxJQUFJL0ksS0FBS2dKLEVBQUUsR0FBR0EsRUFBRXhILGVBQWV4QixJQUFJQSxLQUFLZ3BELEdBQUcsT0FBT0QsR0FBR2hnRCxHQUFHQyxFQUFFaEosR0FBRyxPQUFPK0ksRUFBOVh3NkMsSUFBS3lGLEdBQUd2OUMsU0FBUytELGNBQWMsT0FBT0QsTUFBTSxtQkFBbUIvRCxnQkFBZ0JrOUMsR0FBR0MsYUFBYU8saUJBQWlCUixHQUFHRSxtQkFBbUJNLGlCQUFpQlIsR0FBR0csZUFBZUssV0FBVyxvQkFBb0IxOUMsZUFBZWs5QyxHQUFHSSxjQUFjSyxZQUF3SixJQUFJQyxHQUFHSCxHQUFHLGdCQUFnQkksR0FBR0osR0FBRyxzQkFBc0JLLEdBQUdMLEdBQUcsa0JBQWtCTSxHQUFHTixHQUFHLGlCQUFpQk8sR0FBRyxzTkFBc05qbUQsTUFBTSxLQUNwc0IsU0FBU2ttRCxHQUFHMWdELEdBQUcsSUFBSUMsRUFBRUQsRUFBRS9JLEVBQUUrSSxFQUFFLEdBQUdBLEVBQUUyZ0QsVUFBVSxLQUFLMWdELEVBQUVzNkMsUUFBUXQ2QyxFQUFFQSxFQUFFczZDLFdBQVcsQ0FBQ3Y2QyxFQUFFQyxFQUFFLEdBQU8sSUFBaUIsTUFBckJBLEVBQUVELEdBQVM0Z0QsYUFBa0IzcEQsRUFBRWdKLEVBQUVzNkMsUUFBUXY2QyxFQUFFQyxFQUFFczZDLGFBQWF2NkMsR0FBRyxPQUFPLElBQUlDLEVBQUVpNkMsSUFBSWpqRCxFQUFFLEtBQUssU0FBUzRwRCxHQUFHN2dELEdBQUcsR0FBRyxLQUFLQSxFQUFFazZDLElBQUksQ0FBQyxJQUFJajZDLEVBQUVELEVBQUU4Z0QsY0FBc0UsR0FBeEQsT0FBTzdnRCxJQUFrQixRQUFkRCxFQUFFQSxFQUFFMmdELGFBQXFCMWdELEVBQUVELEVBQUU4Z0QsZ0JBQW1CLE9BQU83Z0QsRUFBRSxPQUFPQSxFQUFFOGdELFdBQVcsT0FBTyxLQUFLLFNBQVNDLEdBQUdoaEQsR0FBRyxHQUFHMGdELEdBQUcxZ0QsS0FBS0EsRUFBRSxNQUFNMUUsTUFBTXExQyxFQUFFLE1BRWhLLFNBQVNzUSxHQUFHamhELEdBQVcsS0FBUkEsRUFEdE4sU0FBWUEsR0FBRyxJQUFJQyxFQUFFRCxFQUFFMmdELFVBQVUsSUFBSTFnRCxFQUFFLENBQVMsR0FBRyxRQUFYQSxFQUFFeWdELEdBQUcxZ0QsSUFBZSxNQUFNMUUsTUFBTXExQyxFQUFFLE1BQU0sT0FBTzF3QyxJQUFJRCxFQUFFLEtBQUtBLEVBQUUsSUFBSSxJQUFJL0ksRUFBRStJLEVBQUU5SSxFQUFFK0ksSUFBSSxDQUFDLElBQUlqQyxFQUFFL0csRUFBRXNqRCxPQUFPLEdBQUcsT0FBT3Y4QyxFQUFFLE1BQU0sSUFBSXlLLEVBQUV6SyxFQUFFMmlELFVBQVUsR0FBRyxPQUFPbDRDLEVBQUUsQ0FBWSxHQUFHLFFBQWR2UixFQUFFOEcsRUFBRXU4QyxRQUFtQixDQUFDdGpELEVBQUVDLEVBQUUsU0FBUyxNQUFNLEdBQUc4RyxFQUFFa2pELFFBQVF6NEMsRUFBRXk0QyxNQUFNLENBQUMsSUFBSXo0QyxFQUFFekssRUFBRWtqRCxNQUFNejRDLEdBQUcsQ0FBQyxHQUFHQSxJQUFJeFIsRUFBRSxPQUFPK3BELEdBQUdoakQsR0FBR2dDLEVBQUUsR0FBR3lJLElBQUl2UixFQUFFLE9BQU84cEQsR0FBR2hqRCxHQUFHaUMsRUFBRXdJLEVBQUVBLEVBQUUwNEMsUUFBUSxNQUFNN2xELE1BQU1xMUMsRUFBRSxNQUFPLEdBQUcxNUMsRUFBRXNqRCxTQUFTcmpELEVBQUVxakQsT0FBT3RqRCxFQUFFK0csRUFBRTlHLEVBQUV1UixNQUFNLENBQUMsSUFBSSxJQUFJc1osR0FBRSxFQUFHeXVCLEVBQUV4eUMsRUFBRWtqRCxNQUFNMVEsR0FBRyxDQUFDLEdBQUdBLElBQUl2NUMsRUFBRSxDQUFDOHFCLEdBQUUsRUFBRzlxQixFQUFFK0csRUFBRTlHLEVBQUV1UixFQUFFLE1BQU0sR0FBRytuQyxJQUFJdDVDLEVBQUUsQ0FBQzZxQixHQUFFLEVBQUc3cUIsRUFBRThHLEVBQUUvRyxFQUFFd1IsRUFBRSxNQUFNK25DLEVBQUVBLEVBQUUyUSxRQUFRLElBQUlwL0IsRUFBRSxDQUFDLElBQUl5dUIsRUFBRS9uQyxFQUFFeTRDLE1BQU0xUSxHQUFHLENBQUMsR0FBR0EsSUFDNWZ2NUMsRUFBRSxDQUFDOHFCLEdBQUUsRUFBRzlxQixFQUFFd1IsRUFBRXZSLEVBQUU4RyxFQUFFLE1BQU0sR0FBR3d5QyxJQUFJdDVDLEVBQUUsQ0FBQzZxQixHQUFFLEVBQUc3cUIsRUFBRXVSLEVBQUV4UixFQUFFK0csRUFBRSxNQUFNd3lDLEVBQUVBLEVBQUUyUSxRQUFRLElBQUlwL0IsRUFBRSxNQUFNem1CLE1BQU1xMUMsRUFBRSxPQUFRLEdBQUcxNUMsRUFBRTBwRCxZQUFZenBELEVBQUUsTUFBTW9FLE1BQU1xMUMsRUFBRSxNQUFPLEdBQUcsSUFBSTE1QyxFQUFFaWpELElBQUksTUFBTTUrQyxNQUFNcTFDLEVBQUUsTUFBTSxPQUFPMTVDLEVBQUU0aEQsVUFBVTFHLFVBQVVsN0MsRUFBRStJLEVBQUVDLEVBQW1CbWhELENBQUdwaEQsSUFBUyxPQUFPLEtBQUssSUFBSSxJQUFJQyxFQUFFRCxJQUFJLENBQUMsR0FBRyxJQUFJQyxFQUFFaTZDLEtBQUssSUFBSWo2QyxFQUFFaTZDLElBQUksT0FBT2o2QyxFQUFFLEdBQUdBLEVBQUVpaEQsTUFBTWpoRCxFQUFFaWhELE1BQU0zRyxPQUFPdDZDLEVBQUVBLEVBQUVBLEVBQUVpaEQsVUFBVSxDQUFDLEdBQUdqaEQsSUFBSUQsRUFBRSxNQUFNLE1BQU1DLEVBQUVraEQsU0FBUyxDQUFDLElBQUlsaEQsRUFBRXM2QyxRQUFRdDZDLEVBQUVzNkMsU0FBU3Y2QyxFQUFFLE9BQU8sS0FBS0MsRUFBRUEsRUFBRXM2QyxPQUFPdDZDLEVBQUVraEQsUUFBUTVHLE9BQU90NkMsRUFBRXM2QyxPQUFPdDZDLEVBQUVBLEVBQUVraEQsU0FBUyxPQUFPLEtBQzVjLElBQUlFLEdBQUdDLEdBQUdDLEdBQUdDLElBQUcsRUFBR0MsR0FBRyxHQUFHQyxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxHQUFHLElBQUl6RyxJQUFJMEcsR0FBRyxJQUFJMUcsSUFBSTJHLEdBQUcsR0FBR0MsR0FBRywwUUFBMFF4bkQsTUFBTSxLQUFLeW5ELEdBQUcsZ0hBQWdIem5ELE1BQU0sS0FDN1gsU0FBUzBuRCxHQUFHbGlELEVBQUVDLEVBQUVoSixFQUFFQyxHQUFHLE1BQU0sQ0FBQ2lyRCxVQUFVbmlELEVBQUVvaUQsYUFBYW5pRCxFQUFFb2lELGlCQUFtQixHQUFGcHJELEVBQUtxckQsWUFBWXByRCxHQUFHLFNBQVNxckQsR0FBR3ZpRCxFQUFFQyxHQUFHLE9BQU9ELEdBQUcsSUFBSyxRQUFRLElBQUssT0FBTzBoRCxHQUFHLEtBQUssTUFBTSxJQUFLLFlBQVksSUFBSyxZQUFZQyxHQUFHLEtBQUssTUFBTSxJQUFLLFlBQVksSUFBSyxXQUFXQyxHQUFHLEtBQUssTUFBTSxJQUFLLGNBQWMsSUFBSyxhQUFhQyxHQUFHVyxPQUFPdmlELEVBQUV3aUQsV0FBVyxNQUFNLElBQUssb0JBQW9CLElBQUsscUJBQXFCWCxHQUFHVSxPQUFPdmlELEVBQUV3aUQsWUFDL2QsU0FBU0MsR0FBRzFpRCxFQUFFQyxFQUFFaEosRUFBRUMsRUFBRThHLEdBQUcsT0FBRyxPQUFPZ0MsR0FBR0EsRUFBRXNpRCxjQUFjdGtELEdBQVNnQyxFQUFFa2lELEdBQUdqaUQsRUFBRWhKLEVBQUVDLEVBQUU4RyxHQUFHLE9BQU9pQyxJQUFZLFFBQVJBLEVBQUUwaUQsR0FBRzFpRCxLQUFhcWhELEdBQUdyaEQsSUFBSUQsSUFBRUEsRUFBRXFpRCxrQkFBa0JuckQsRUFBUzhJLEdBQzlJLFNBQVM0aUQsR0FBRzVpRCxHQUFHLElBQUlDLEVBQUU0aUQsR0FBRzdpRCxFQUFFN0csUUFBUSxHQUFHLE9BQU84RyxFQUFFLENBQUMsSUFBSWhKLEVBQUV5cEQsR0FBR3pnRCxHQUFHLEdBQUcsT0FBT2hKLEVBQUUsR0FBVyxNQUFSZ0osRUFBRWhKLEVBQUVpakQsTUFBWSxHQUFXLFFBQVJqNkMsRUFBRTRnRCxHQUFHNXBELElBQW9GLE9BQXZFK0ksRUFBRW1pRCxVQUFVbGlELE9BQUV5d0MsRUFBRW9TLHlCQUF5QjlpRCxFQUFFK2lELFVBQVMsV0FBV3hCLEdBQUd0cUQsV0FBa0IsR0FBRyxJQUFJZ0osR0FBR2hKLEVBQUU0aEQsVUFBVW1LLFFBQThELFlBQXJEaGpELEVBQUVtaUQsVUFBVSxJQUFJbHJELEVBQUVpakQsSUFBSWpqRCxFQUFFNGhELFVBQVVvSyxjQUFjLE1BQWFqakQsRUFBRW1pRCxVQUFVLEtBQUssU0FBU2UsR0FBR2xqRCxHQUFHLEdBQUcsT0FBT0EsRUFBRW1pRCxVQUFVLE9BQU0sRUFBRyxJQUFJbGlELEVBQUVrakQsR0FBR25qRCxFQUFFb2lELGFBQWFwaUQsRUFBRXFpRCxpQkFBaUJyaUQsRUFBRXNpRCxhQUFhLEdBQUcsT0FBT3JpRCxFQUFFLENBQUMsSUFBSWhKLEVBQUUwckQsR0FBRzFpRCxHQUFpQyxPQUE5QixPQUFPaEosR0FBR3FxRCxHQUFHcnFELEdBQUcrSSxFQUFFbWlELFVBQVVsaUQsR0FBUSxFQUFHLE9BQU0sRUFDOWQsU0FBU21qRCxHQUFHcGpELEVBQUVDLEVBQUVoSixHQUFHaXNELEdBQUdsakQsSUFBSS9JLEVBQUV1ckQsT0FBT3ZpRCxHQUFHLFNBQVNvakQsS0FBSyxJQUFJN0IsSUFBRyxFQUFHLEVBQUVDLEdBQUdwb0QsUUFBUSxDQUFDLElBQUkyRyxFQUFFeWhELEdBQUcsR0FBRyxHQUFHLE9BQU96aEQsRUFBRW1pRCxVQUFVLENBQW1CLFFBQWxCbmlELEVBQUUyaUQsR0FBRzNpRCxFQUFFbWlELGFBQXFCZCxHQUFHcmhELEdBQUcsTUFBTSxJQUFJQyxFQUFFa2pELEdBQUduakQsRUFBRW9pRCxhQUFhcGlELEVBQUVxaUQsaUJBQWlCcmlELEVBQUVzaUQsYUFBYSxPQUFPcmlELEVBQUVELEVBQUVtaUQsVUFBVWxpRCxFQUFFd2hELEdBQUd6ckIsUUFBUSxPQUFPMHJCLElBQUl3QixHQUFHeEIsTUFBTUEsR0FBRyxNQUFNLE9BQU9DLElBQUl1QixHQUFHdkIsTUFBTUEsR0FBRyxNQUFNLE9BQU9DLElBQUlzQixHQUFHdEIsTUFBTUEsR0FBRyxNQUFNQyxHQUFHL2pELFFBQVFzbEQsSUFBSXRCLEdBQUdoa0QsUUFBUXNsRCxJQUFJLFNBQVNFLEdBQUd0akQsRUFBRUMsR0FBR0QsRUFBRW1pRCxZQUFZbGlELElBQUlELEVBQUVtaUQsVUFBVSxLQUFLWCxLQUFLQSxJQUFHLEVBQUc5USxFQUFFNlMsMEJBQTBCN1MsRUFBRThTLHdCQUF3QkgsTUFDN2QsU0FBU0ksR0FBR3pqRCxHQUFHLFNBQVNDLEVBQUVBLEdBQUcsT0FBT3FqRCxHQUFHcmpELEVBQUVELEdBQUcsR0FBRyxFQUFFeWhELEdBQUdwb0QsT0FBTyxDQUFDaXFELEdBQUc3QixHQUFHLEdBQUd6aEQsR0FBRyxJQUFJLElBQUkvSSxFQUFFLEVBQUVBLEVBQUV3cUQsR0FBR3BvRCxPQUFPcEMsSUFBSSxDQUFDLElBQUlDLEVBQUV1cUQsR0FBR3hxRCxHQUFHQyxFQUFFaXJELFlBQVluaUQsSUFBSTlJLEVBQUVpckQsVUFBVSxPQUErRixJQUF4RixPQUFPVCxJQUFJNEIsR0FBRzVCLEdBQUcxaEQsR0FBRyxPQUFPMmhELElBQUkyQixHQUFHM0IsR0FBRzNoRCxHQUFHLE9BQU80aEQsSUFBSTBCLEdBQUcxQixHQUFHNWhELEdBQUc2aEQsR0FBRy9qRCxRQUFRbUMsR0FBRzZoRCxHQUFHaGtELFFBQVFtQyxHQUFPaEosRUFBRSxFQUFFQSxFQUFFOHFELEdBQUcxb0QsT0FBT3BDLEtBQUlDLEVBQUU2cUQsR0FBRzlxRCxJQUFLa3JELFlBQVluaUQsSUFBSTlJLEVBQUVpckQsVUFBVSxNQUFNLEtBQUssRUFBRUosR0FBRzFvRCxRQUFpQixRQUFScEMsRUFBRThxRCxHQUFHLElBQVlJLFdBQVlTLEdBQUczckQsR0FBRyxPQUFPQSxFQUFFa3JELFdBQVdKLEdBQUcvckIsUUFDL1gsU0FBUzB0QixHQUFHMWpELEdBQTZGLE9BQTFGQSxFQUFFQSxFQUFFN0csUUFBUTZHLEVBQUUyakQsWUFBWWxoRCxRQUFTbWhELDBCQUEwQjVqRCxFQUFFQSxFQUFFNGpELHlCQUFnQyxJQUFJNWpELEVBQUV5L0MsU0FBU3ovQyxFQUFFaUksV0FBV2pJLEVBQUUsU0FBUzZqRCxHQUFHN2pELEdBQUcsR0FBR0EsRUFBRUEsRUFBRXU2QyxhQUFhdjZDLEdBQUcsSUFBSUEsRUFBRWs2QyxLQUFLLE9BQU9sNkMsR0FBSSxLQUFLLFNBQVM4akQsR0FBRzlqRCxFQUFFQyxFQUFFaEosSUFBTWdKLEVBQUUyNEMsRUFBRzU0QyxFQUFFL0ksRUFBRThzRCxlQUFlbk4sd0JBQXdCMzJDLE9BQUloSixFQUFFa2hELG1CQUFtQkosRUFBRzlnRCxFQUFFa2hELG1CQUFtQmw0QyxHQUFHaEosRUFBRW1oRCxtQkFBbUJMLEVBQUc5Z0QsRUFBRW1oRCxtQkFBbUJwNEMsSUFDdFgsU0FBU2drRCxHQUFHaGtELEdBQUcsR0FBR0EsR0FBR0EsRUFBRStqRCxlQUFlbk4sd0JBQXdCLENBQUMsSUFBSSxJQUFJMzJDLEVBQUVELEVBQUVpa0QsWUFBWWh0RCxFQUFFLEdBQUdnSixHQUFHaEosRUFBRWtGLEtBQUs4RCxHQUFHQSxFQUFFNGpELEdBQUc1akQsR0FBRyxJQUFJQSxFQUFFaEosRUFBRW9DLE9BQU8sRUFBRTRHLEtBQUs2akQsR0FBRzdzRCxFQUFFZ0osR0FBRyxXQUFXRCxHQUFHLElBQUlDLEVBQUUsRUFBRUEsRUFBRWhKLEVBQUVvQyxPQUFPNEcsSUFBSTZqRCxHQUFHN3NELEVBQUVnSixHQUFHLFVBQVVELElBQUksU0FBU2trRCxHQUFHbGtELEVBQUVDLEVBQUVoSixHQUFHK0ksR0FBRy9JLEdBQUdBLEVBQUU4c0QsZUFBZWpOLG1CQUFtQjcyQyxFQUFFMjRDLEVBQUc1NEMsRUFBRS9JLEVBQUU4c0QsZUFBZWpOLHFCQUFxQjcvQyxFQUFFa2hELG1CQUFtQkosRUFBRzlnRCxFQUFFa2hELG1CQUFtQmw0QyxHQUFHaEosRUFBRW1oRCxtQkFBbUJMLEVBQUc5Z0QsRUFBRW1oRCxtQkFBbUJwNEMsSUFBSSxTQUFTbWtELEdBQUdua0QsR0FBR0EsR0FBR0EsRUFBRStqRCxlQUFlak4sa0JBQWtCb04sR0FBR2xrRCxFQUFFaWtELFlBQVksS0FBS2prRCxHQUNoZSxTQUFTb2tELEdBQUdwa0QsR0FBR2c0QyxFQUFHaDRDLEVBQUVna0QsSUFBSSxTQUFTSyxLQUFLLE9BQU0sRUFBRyxTQUFTQyxLQUFLLE9BQU0sRUFBRyxTQUFTOVMsR0FBRXh4QyxFQUFFQyxFQUFFaEosRUFBRUMsR0FBNEYsSUFBSSxJQUFJOEcsS0FBakdiLEtBQUs0bUQsZUFBZS9qRCxFQUFFN0MsS0FBSzhtRCxZQUFZaGtELEVBQUU5QyxLQUFLbWxELFlBQVlyckQsRUFBRStJLEVBQUU3QyxLQUFLakQsWUFBWXFxRCxVQUF5QnZrRCxFQUFFdkgsZUFBZXVGLE1BQU1pQyxFQUFFRCxFQUFFaEMsSUFBSWIsS0FBS2EsR0FBR2lDLEVBQUVoSixHQUFHLFdBQVcrRyxFQUFFYixLQUFLaEUsT0FBT2pDLEVBQUVpRyxLQUFLYSxHQUFHL0csRUFBRStHLElBQWdJLE9BQTVIYixLQUFLcW5ELG9CQUFvQixNQUFNdnRELEVBQUV3dEQsaUJBQWlCeHRELEVBQUV3dEQsa0JBQWlCLElBQUt4dEQsRUFBRXl0RCxhQUFhTCxHQUFHQyxHQUFHbm5ELEtBQUtrN0MscUJBQXFCaU0sR0FBVW5uRCxLQUczSixTQUFTd25ELEdBQUcza0QsRUFBRUMsRUFBRWhKLEVBQUVDLEdBQUcsR0FBR2lHLEtBQUt5bkQsVUFBVXZyRCxPQUFPLENBQUMsSUFBSTJFLEVBQUViLEtBQUt5bkQsVUFBVTlxQixNQUEyQixPQUFyQjM4QixLQUFLcEcsS0FBS2lILEVBQUVnQyxFQUFFQyxFQUFFaEosRUFBRUMsR0FBVThHLEVBQUUsT0FBTyxJQUFJYixLQUFLNkMsRUFBRUMsRUFBRWhKLEVBQUVDLEdBQzdYLFNBQVMydEQsR0FBRzdrRCxHQUFHLEtBQUtBLGFBQWE3QyxNQUFNLE1BQU03QixNQUFNcTFDLEVBQUUsTUFBTTN3QyxFQUFFOGtELGFBQWEsR0FBRzNuRCxLQUFLeW5ELFVBQVV2ckQsUUFBUThELEtBQUt5bkQsVUFBVXpvRCxLQUFLNkQsR0FBRyxTQUFTK2tELEdBQUcva0QsR0FBR0EsRUFBRTRrRCxVQUFVLEdBQUc1a0QsRUFBRWdsRCxVQUFVTCxHQUFHM2tELEVBQUV1NEMsUUFBUXNNLEdBSGxMeHNELEVBQUVtNUMsR0FBRWg1QyxVQUFVLENBQUN5c0QsZUFBZSxXQUFXOW5ELEtBQUtzbkQsa0JBQWlCLEVBQUcsSUFBSXprRCxFQUFFN0MsS0FBS21sRCxZQUFZdGlELElBQUlBLEVBQUVpbEQsZUFBZWpsRCxFQUFFaWxELGlCQUFpQixrQkFBbUJqbEQsRUFBRTBrRCxjQUFjMWtELEVBQUUwa0QsYUFBWSxHQUFJdm5ELEtBQUtxbkQsbUJBQW1CSCxLQUFLYSxnQkFBZ0IsV0FBVyxJQUFJbGxELEVBQUU3QyxLQUFLbWxELFlBQVl0aUQsSUFBSUEsRUFBRWtsRCxnQkFBZ0JsbEQsRUFBRWtsRCxrQkFBa0Isa0JBQW1CbGxELEVBQUVtbEQsZUFBZW5sRCxFQUFFbWxELGNBQWEsR0FBSWhvRCxLQUFLazdDLHFCQUFxQmdNLEtBQUtlLFFBQVEsV0FBV2pvRCxLQUFLbTdDLGFBQWErTCxJQUFJL0wsYUFBYWdNLEdBQUdRLFdBQVcsV0FBVyxJQUNwZDdrRCxFQUR3ZEQsRUFBRTdDLEtBQUtqRCxZQUFZcXFELFVBQ3plLElBQUl0a0QsS0FBS0QsRUFBRTdDLEtBQUs4QyxHQUFHLEtBQUs5QyxLQUFLbWxELFlBQVlubEQsS0FBSzhtRCxZQUFZOW1ELEtBQUs0bUQsZUFBZSxLQUFLNW1ELEtBQUtrN0MscUJBQXFCbDdDLEtBQUtxbkQsbUJBQW1CRixHQUFHbm5ELEtBQUtpN0MsbUJBQW1CajdDLEtBQUtnN0MsbUJBQW1CLFFBQVEzRyxHQUFFK1MsVUFBVSxDQUFDOW5ELEtBQUssS0FBS3RELE9BQU8sS0FBSzArQyxjQUFjLFdBQVcsT0FBTyxNQUFNd04sV0FBVyxLQUFLQyxRQUFRLEtBQUtDLFdBQVcsS0FBS0MsVUFBVSxTQUFTeGxELEdBQUcsT0FBT0EsRUFBRXdsRCxXQUFXOXZCLEtBQUsrQyxPQUFPZ3NCLGlCQUFpQixLQUFLZ0IsVUFBVSxNQUM5WWpVLEdBQUV6dUMsT0FBTyxTQUFTL0MsR0FBRyxTQUFTQyxLQUFLLFNBQVNoSixJQUFJLE9BQU9DLEVBQUV5SCxNQUFNeEIsS0FBSzlCLFdBQVcsSUFBSW5FLEVBQUVpRyxLQUFLOEMsRUFBRXpILFVBQVV0QixFQUFFc0IsVUFBVSxJQUFJd0YsRUFBRSxJQUFJaUMsRUFBbUgsT0FBakg1SCxFQUFFMkYsRUFBRS9HLEVBQUV1QixXQUFXdkIsRUFBRXVCLFVBQVV3RixFQUFFL0csRUFBRXVCLFVBQVUwQixZQUFZakQsRUFBRUEsRUFBRXN0RCxVQUFVbHNELEVBQUUsR0FBR25CLEVBQUVxdEQsVUFBVXZrRCxHQUFHL0ksRUFBRThMLE9BQU83TCxFQUFFNkwsT0FBT2dpRCxHQUFHOXRELEdBQVVBLEdBQUc4dEQsR0FBR3ZULElBQ3ZFLElBQUlrVSxHQUFHbFUsR0FBRXp1QyxPQUFPLENBQUM0aUQsY0FBYyxLQUFLQyxZQUFZLEtBQUtDLGNBQWMsT0FBT0MsR0FBR3RVLEdBQUV6dUMsT0FBTyxDQUFDZ2pELGNBQWMsU0FBUy9sRCxHQUFHLE1BQU0sa0JBQWtCQSxFQUFFQSxFQUFFK2xELGNBQWN0akQsT0FBT3NqRCxpQkFBaUJDLEdBQUd4VSxHQUFFenVDLE9BQU8sQ0FBQytMLEtBQUssS0FBS20zQyxPQUFPLE9BQU9DLEdBQUdGLEdBQUdqakQsT0FBTyxDQUFDb2pELGNBQWMsT0FDemEsU0FBU0MsR0FBR3BtRCxHQUFHLElBQUlDLEVBQUVELEVBQUVxbUQsUUFBK0UsTUFBdkUsYUFBYXJtRCxFQUFnQixLQUFiQSxFQUFFQSxFQUFFc21ELFdBQWdCLEtBQUtybUQsSUFBSUQsRUFBRSxJQUFLQSxFQUFFQyxFQUFFLEtBQUtELElBQUlBLEVBQUUsSUFBVyxJQUFJQSxHQUFHLEtBQUtBLEVBQUVBLEVBQUUsRUFDN0gsSUFBSXVtRCxHQUFHLENBQUNDLElBQUksU0FBU0MsU0FBUyxJQUFJQyxLQUFLLFlBQVlDLEdBQUcsVUFBVUMsTUFBTSxhQUFhQyxLQUFLLFlBQVlDLElBQUksU0FBU0MsSUFBSSxLQUFLQyxLQUFLLGNBQWNDLEtBQUssY0FBY0MsT0FBTyxhQUFhQyxnQkFBZ0IsZ0JBQWdCQyxHQUFHLENBQUNDLEVBQUUsWUFBWUMsRUFBRSxNQUFNQyxHQUFHLFFBQVFDLEdBQUcsUUFBUUMsR0FBRyxRQUFRQyxHQUFHLFVBQVVDLEdBQUcsTUFBTUMsR0FBRyxRQUFRQyxHQUFHLFdBQVdDLEdBQUcsU0FBU0MsR0FBRyxJQUFJQyxHQUFHLFNBQVNDLEdBQUcsV0FBV0MsR0FBRyxNQUFNQyxHQUFHLE9BQU9DLEdBQUcsWUFBWUMsR0FBRyxVQUFVQyxHQUFHLGFBQWFDLEdBQUcsWUFBWUMsR0FBRyxTQUFTQyxHQUFHLFNBQVNDLElBQUksS0FBS0MsSUFBSSxLQUFLQyxJQUFJLEtBQUtDLElBQUksS0FDaGZDLElBQUksS0FBS0MsSUFBSSxLQUFLQyxJQUFJLEtBQUtDLElBQUksS0FBS0MsSUFBSSxLQUFLQyxJQUFJLE1BQU1DLElBQUksTUFBTUMsSUFBSSxNQUFNQyxJQUFJLFVBQVVDLElBQUksYUFBYUMsSUFBSSxRQUFRQyxHQUFHLENBQUNDLElBQUksU0FBU0MsUUFBUSxVQUFVQyxLQUFLLFVBQVVDLE1BQU0sWUFBWSxTQUFTQyxHQUFHOXBELEdBQUcsSUFBSUMsRUFBRTlDLEtBQUttbEQsWUFBWSxPQUFPcmlELEVBQUU4cEQsaUJBQWlCOXBELEVBQUU4cEQsaUJBQWlCL3BELE1BQUlBLEVBQUV5cEQsR0FBR3pwRCxPQUFNQyxFQUFFRCxHQUFNLFNBQVNncUQsS0FBSyxPQUFPRixHQVFwSSxJQVByTCxJQUFJbGtELEdBQUdvZ0QsR0FBR2pqRCxPQUFPLENBQUM1SyxJQUFJLFNBQVM2SCxHQUFHLEdBQUdBLEVBQUU3SCxJQUFJLENBQUMsSUFBSThILEVBQUVzbUQsR0FBR3ZtRCxFQUFFN0gsTUFBTTZILEVBQUU3SCxJQUFJLEdBQUcsaUJBQWlCOEgsRUFBRSxPQUFPQSxFQUFFLE1BQU0sYUFBYUQsRUFBRXZELEtBQWMsTUFBUnVELEVBQUVvbUQsR0FBR3BtRCxJQUFVLFFBQVExQyxPQUFPMFAsYUFBYWhOLEdBQUksWUFBWUEsRUFBRXZELE1BQU0sVUFBVXVELEVBQUV2RCxLQUFLMnFELEdBQUdwbkQsRUFBRXFtRCxVQUFVLGVBQWUsSUFBSXB2QixTQUFTLEtBQUtnekIsUUFBUSxLQUFLQyxTQUFTLEtBQUtDLE9BQU8sS0FBS0MsUUFBUSxLQUFLaitCLE9BQU8sS0FBS2srQixPQUFPLEtBQUtOLGlCQUFpQkMsR0FBRzFELFNBQVMsU0FBU3RtRCxHQUFHLE1BQU0sYUFBYUEsRUFBRXZELEtBQUsycEQsR0FBR3BtRCxHQUFHLEdBQUdxbUQsUUFBUSxTQUFTcm1ELEdBQUcsTUFBTSxZQUFZQSxFQUFFdkQsTUFBTSxVQUFVdUQsRUFBRXZELEtBQUt1RCxFQUFFcW1ELFFBQVEsR0FBR2lFLE1BQU0sU0FBU3RxRCxHQUFHLE1BQU0sYUFDN2ZBLEVBQUV2RCxLQUFLMnBELEdBQUdwbUQsR0FBRyxZQUFZQSxFQUFFdkQsTUFBTSxVQUFVdUQsRUFBRXZELEtBQUt1RCxFQUFFcW1ELFFBQVEsS0FBS2tFLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxJQUFHLEVBQUdDLElBQUcsRUFBR0MsR0FBRzNFLEdBQUdqakQsT0FBTyxDQUFDNm5ELFFBQVEsS0FBS0MsUUFBUSxLQUFLQyxRQUFRLEtBQUtDLFFBQVEsS0FBS0MsTUFBTSxLQUFLQyxNQUFNLEtBQUtoQixRQUFRLEtBQUtDLFNBQVMsS0FBS0MsT0FBTyxLQUFLQyxRQUFRLEtBQUtMLGlCQUFpQkMsR0FBR2h2QixPQUFPLEtBQUtrd0IsUUFBUSxLQUFLL0UsY0FBYyxTQUFTbm1ELEdBQUcsT0FBT0EsRUFBRW1tRCxnQkFBZ0JubUQsRUFBRW1yRCxjQUFjbnJELEVBQUUyakQsV0FBVzNqRCxFQUFFb3JELFVBQVVwckQsRUFBRW1yRCxjQUFjRSxVQUFVLFNBQVNyckQsR0FBRyxHQUFHLGNBQWNBLEVBQUUsT0FBT0EsRUFBRXFyRCxVQUFVLElBQUlwckQsRUFBRXNxRCxHQUFnQixPQUFiQSxHQUFHdnFELEVBQUU0cUQsUUFBZUgsR0FBRyxjQUFjenFELEVBQUV2RCxLQUFLdUQsRUFBRTRxRCxRQUMvZTNxRCxFQUFFLEdBQUd3cUQsSUFBRyxFQUFHLElBQUlhLFVBQVUsU0FBU3RyRCxHQUFHLEdBQUcsY0FBY0EsRUFBRSxPQUFPQSxFQUFFc3JELFVBQVUsSUFBSXJyRCxFQUFFdXFELEdBQWdCLE9BQWJBLEdBQUd4cUQsRUFBRTZxRCxRQUFlSCxHQUFHLGNBQWMxcUQsRUFBRXZELEtBQUt1RCxFQUFFNnFELFFBQVE1cUQsRUFBRSxHQUFHeXFELElBQUcsRUFBRyxNQUFNYSxHQUFHWixHQUFHNW5ELE9BQU8sQ0FBQzAvQyxVQUFVLEtBQUsrSSxNQUFNLEtBQUtDLE9BQU8sS0FBS0MsU0FBUyxLQUFLQyxtQkFBbUIsS0FBS0MsTUFBTSxLQUFLQyxNQUFNLEtBQUtDLE1BQU0sS0FBS0MsWUFBWSxLQUFLQyxVQUFVLE9BQU9DLEdBQUd0QixHQUFHNW5ELE9BQU8sQ0FBQ21wRCxhQUFhLE9BQU9DLEdBQUduRyxHQUFHampELE9BQU8sQ0FBQ3FwRCxRQUFRLEtBQUtDLGNBQWMsS0FBS0MsZUFBZSxLQUFLbkMsT0FBTyxLQUFLQyxRQUFRLEtBQUtILFFBQVEsS0FBS0MsU0FBUyxLQUFLSCxpQkFBaUJDLEtBQUt1QyxHQUFHL2EsR0FBRXp1QyxPQUFPLENBQUM4NEMsYUFBYSxLQUNoZ0IrSixZQUFZLEtBQUtDLGNBQWMsT0FBTzJHLEdBQUc3QixHQUFHNW5ELE9BQU8sQ0FBQzBwRCxPQUFPLFNBQVN6c0QsR0FBRyxNQUFNLFdBQVdBLEVBQUVBLEVBQUV5c0QsT0FBTyxnQkFBZ0J6c0QsR0FBR0EsRUFBRTBzRCxZQUFZLEdBQUdDLE9BQU8sU0FBUzNzRCxHQUFHLE1BQU0sV0FBV0EsRUFBRUEsRUFBRTJzRCxPQUFPLGdCQUFnQjNzRCxHQUFHQSxFQUFFNHNELFlBQVksZUFBZTVzRCxHQUFHQSxFQUFFNnNELFdBQVcsR0FBR0MsT0FBTyxLQUFLQyxVQUFVLE9BQU96eEIsR0FBRyxDQUFDLENBQUMsT0FBTyxPQUFPLEdBQUcsQ0FBQyxTQUFTLFNBQVMsR0FBRyxDQUFDLFFBQVEsUUFBUSxHQUFHLENBQUMsUUFBUSxRQUFRLEdBQUcsQ0FBQyxjQUFjLGNBQWMsR0FBRyxDQUFDLE9BQU8sT0FBTyxHQUFHLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxXQUFXLFdBQVcsR0FBRyxDQUFDLFdBQVcsY0FBYyxHQUFHLENBQUMsVUFBVSxVQUM5ZSxHQUFHLENBQUMsWUFBWSxZQUFZLEdBQUcsQ0FBQyxPQUFPLE9BQU8sR0FBRyxDQUFDLFFBQVEsUUFBUSxHQUFHLENBQUMsUUFBUSxRQUFRLEdBQUcsQ0FBQyxVQUFVLFVBQVUsR0FBRyxDQUFDLFVBQVUsVUFBVSxHQUFHLENBQUMsV0FBVyxXQUFXLEdBQUcsQ0FBQyxRQUFRLFFBQVEsR0FBRyxDQUFDLFlBQVksWUFBWSxHQUFHLENBQUMsVUFBVSxVQUFVLEdBQUcsQ0FBQyxRQUFRLFFBQVEsR0FBRyxDQUFDLFFBQVEsUUFBUSxHQUFHLENBQUMsT0FBTyxPQUFPLEdBQUcsQ0FBQyxnQkFBZ0IsZ0JBQWdCLEdBQUcsQ0FBQyxjQUFjLGNBQWMsR0FBRyxDQUFDLFlBQVksWUFBWSxHQUFHLENBQUMsYUFBYSxhQUFhLEdBQUcsQ0FBQyxRQUFRLFFBQVEsR0FBRyxDQUFDLFNBQVMsU0FBUyxHQUFHLENBQUMsU0FBUyxTQUFTLEdBQUcsQ0FBQyxjQUFjLGNBQ2xmLEdBQUcsQ0FBQyxXQUFXLFdBQVcsR0FBRyxDQUFDLGFBQWEsYUFBYSxHQUFHLENBQUMsZUFBZSxlQUFlLEdBQUcsQ0FBQyxPQUFPLE9BQU8sR0FBRyxDQUFDLFlBQVksWUFBWSxHQUFHLENBQUMsV0FBVyxXQUFXLEdBQUcsQ0FBQyxZQUFZLFlBQVksR0FBRyxDQUFDLFdBQVcsV0FBVyxHQUFHLENBQUMsWUFBWSxZQUFZLEdBQUcsQ0FBQyxXQUFXLFdBQVcsR0FBRyxDQUFDLFlBQVksWUFBWSxHQUFHLENBQUMsY0FBYyxjQUFjLEdBQUcsQ0FBQyxhQUFhLGFBQWEsR0FBRyxDQUFDLGNBQWMsY0FBYyxHQUFHLENBQUMsU0FBUyxTQUFTLEdBQUcsQ0FBQyxTQUFTLFNBQVMsR0FBRyxDQUFDLFlBQVksWUFBWSxHQUFHLENBQUMsUUFBUSxRQUFRLEdBQUcsQ0FBQyxRQUFRLFFBQ2hmLEdBQUcsQ0FBQytrQixHQUFHLGVBQWUsR0FBRyxDQUFDQyxHQUFHLHFCQUFxQixHQUFHLENBQUNDLEdBQUcsaUJBQWlCLEdBQUcsQ0FBQyxVQUFVLFVBQVUsR0FBRyxDQUFDLGlCQUFpQixpQkFBaUIsR0FBRyxDQUFDLGlCQUFpQixpQkFBaUIsR0FBRyxDQUFDLFVBQVUsVUFBVSxHQUFHLENBQUMsWUFBWSxZQUFZLEdBQUcsQ0FBQyxRQUFRLFFBQVEsR0FBRyxDQUFDLFFBQVEsUUFBUSxHQUFHLENBQUMsb0JBQW9CLG9CQUFvQixHQUFHLENBQUMsT0FBTyxPQUFPLEdBQUcsQ0FBQyxhQUFhLGFBQWEsR0FBRyxDQUFDLGlCQUFpQixpQkFBaUIsR0FBRyxDQUFDLFlBQVksWUFBWSxHQUFHLENBQUMscUJBQXFCLHFCQUFxQixHQUFHLENBQUMsVUFBVSxVQUFVLEdBQUcsQ0FBQyxXQUNsZixXQUFXLEdBQUcsQ0FBQyxVQUFVLFVBQVUsR0FBRyxDQUFDLFVBQVUsVUFBVSxHQUFHLENBQUMsVUFBVSxVQUFVLEdBQUcsQ0FBQyxhQUFhLGFBQWEsR0FBRyxDQUFDQyxHQUFHLGdCQUFnQixHQUFHLENBQUMsVUFBVSxVQUFVLElBQUl3TSxHQUFHLEdBQUdDLEdBQUcsR0FBR0MsR0FBRyxFQUFPQSxHQUFHNXhCLEdBQUdqaUMsT0FBTzZ6RCxLQUFLLENBQUMsSUFBSUMsR0FBRzd4QixHQUFHNHhCLElBQUlFLEdBQUdELEdBQUcsR0FBR0UsR0FBR0YsR0FBRyxHQUFHRyxHQUFHSCxHQUFHLEdBQUdJLEdBQUcsTUFBTUYsR0FBRyxHQUFHM2dDLGNBQWMyZ0MsR0FBR3Z4RCxNQUFNLElBQUkweEQsR0FBRyxDQUFDNVcsd0JBQXdCLENBQUM2VyxRQUFRRixHQUFHRyxTQUFTSCxHQUFHLFdBQVd0VyxhQUFhLENBQUNtVyxJQUFJTyxjQUFjTCxJQUFJTixHQUFHSyxJQUFJRyxHQUFHUCxHQUFHRyxJQUFJSSxHQUNwWixJQUFJSSxHQUFHLENBQUNsWCxXQUFXc1csR0FBR2EsaUJBQWlCLFNBQVM3dEQsR0FBVyxZQUFPLEtBQWZBLEVBQUVpdEQsR0FBR2p0RCxJQUFxQkEsRUFBRTJ0RCxjQUFjLEdBQUdsWCxjQUFjLFNBQVN6MkMsRUFBRUMsRUFBRWhKLEVBQUVDLEdBQUcsSUFBSThHLEVBQUVpdkQsR0FBR2p0RCxHQUFHLElBQUloQyxFQUFFLE9BQU8sS0FBSyxPQUFPZ0MsR0FBRyxJQUFLLFdBQVcsR0FBRyxJQUFJb21ELEdBQUdudkQsR0FBRyxPQUFPLEtBQUssSUFBSyxVQUFVLElBQUssUUFBUStJLEVBQUU0RixHQUFHLE1BQU0sSUFBSyxPQUFPLElBQUssUUFBUTVGLEVBQUVrbUQsR0FBRyxNQUFNLElBQUssUUFBUSxHQUFHLElBQUlqdkQsRUFBRStqQyxPQUFPLE9BQU8sS0FBSyxJQUFLLFdBQVcsSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLFlBQVksSUFBSyxVQUFVLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxjQUFjaDdCLEVBQUUycUQsR0FBRyxNQUFNLElBQUssT0FBTyxJQUFLLFVBQVUsSUFBSyxZQUFZLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLE9BQU8zcUQsRUFDL2tCaXNELEdBQUcsTUFBTSxJQUFLLGNBQWMsSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLGFBQWFqc0QsRUFBRW1zRCxHQUFHLE1BQU0sS0FBSzlMLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxHQUFHdmdELEVBQUUwbEQsR0FBRyxNQUFNLEtBQUtsRixHQUFHeGdELEVBQUV1c0QsR0FBRyxNQUFNLElBQUssU0FBU3ZzRCxFQUFFZ21ELEdBQUcsTUFBTSxJQUFLLFFBQVFobUQsRUFBRXdzRCxHQUFHLE1BQU0sSUFBSyxPQUFPLElBQUssTUFBTSxJQUFLLFFBQVF4c0QsRUFBRThsRCxHQUFHLE1BQU0sSUFBSyxvQkFBb0IsSUFBSyxxQkFBcUIsSUFBSyxnQkFBZ0IsSUFBSyxjQUFjLElBQUssY0FBYyxJQUFLLGFBQWEsSUFBSyxjQUFjLElBQUssWUFBWTlsRCxFQUFFdXJELEdBQUcsTUFBTSxRQUFRdnJELEVBQUV3eEMsR0FBK0IsT0FBTjRTLEdBQXZCbmtELEVBQUVELEVBQUVnbEQsVUFBVWhuRCxFQUFFaUMsRUFBRWhKLEVBQUVDLElBQWdCK0ksSUFBSTZ0RCxHQUFHcGQsRUFBRXFkLDhCQUN4ZEMsR0FBR3RkLEVBQUVvUyx5QkFBeUJtTCxHQUFHTCxHQUFHQyxpQkFBaUJLLEdBQUcsR0FBR0MsR0FBRyxHQUM5RCxTQUFTQyxHQUFHcHVELEdBQUcsSUFBSUMsRUFBRUQsRUFBRXF1RCxXQUFXcDNELEVBQUVnSixFQUFFLEVBQUUsQ0FBQyxJQUFJaEosRUFBRSxDQUFDK0ksRUFBRXN1RCxVQUFVbnlELEtBQUtsRixHQUFHLE1BQU0sSUFBSUMsRUFBRUQsRUFBRSxHQUFHLElBQUlDLEVBQUVnakQsSUFBSWhqRCxFQUFFQSxFQUFFMmhELFVBQVVvSyxrQkFBa0IsQ0FBQyxLQUFLL3JELEVBQUVxakQsUUFBUXJqRCxFQUFFQSxFQUFFcWpELE9BQU9yakQsRUFBRSxJQUFJQSxFQUFFZ2pELElBQUksS0FBS2hqRCxFQUFFMmhELFVBQVVvSyxjQUFjLElBQUkvckQsRUFBRSxNQUFjLEtBQVIrSSxFQUFFaEosRUFBRWlqRCxNQUFXLElBQUlqNkMsR0FBR0QsRUFBRXN1RCxVQUFVbnlELEtBQUtsRixHQUFHQSxFQUFFNHJELEdBQUczckQsU0FBU0QsR0FBRyxJQUFJQSxFQUFFLEVBQUVBLEVBQUUrSSxFQUFFc3VELFVBQVVqMUQsT0FBT3BDLElBQUksQ0FBQ2dKLEVBQUVELEVBQUVzdUQsVUFBVXIzRCxHQUFHLElBQUkrRyxFQUFFMGxELEdBQUcxakQsRUFBRXNpRCxhQUFhcHJELEVBQUU4SSxFQUFFb2lELGFBQWEsSUFBSSxJQUFJMzVDLEVBQUV6SSxFQUFFc2lELFlBQVl2Z0MsRUFBRS9oQixFQUFFcWlELGlCQUFpQjdSLEVBQUUsS0FBS3RDLEVBQUUsRUFBRUEsRUFBRXNJLEVBQUduOUMsT0FBTzYwQyxJQUFJLENBQUMsSUFBSXIzQyxFQUFFMi9DLEVBQUd0SSxHQUFHcjNDLElBQUlBLEVBQUVBLEVBQUU0L0MsY0FBY3YvQyxFQUFFK0ksRUFBRXdJLEVBQUV6SyxFQUFFK2pCLE1BQU15dUIsRUFBRXVILEVBQUd2SCxFQUFFMzVDLElBQUkyaEQsRUFBR2hJLElBQy9lLElBQUkrZCxJQUFHLEVBQUcsU0FBUzVjLEdBQUUzeEMsRUFBRUMsR0FBR3V1RCxHQUFHdnVELEVBQUVELEdBQUUsR0FBSSxTQUFTd3VELEdBQUd4dUQsRUFBRUMsRUFBRWhKLEdBQUcsT0FBT2czRCxHQUFHaHVELElBQUksS0FBSyxFQUFFLElBQUkvSSxFQUFFdTNELEdBQUdyMkQsS0FBSyxLQUFLNkgsRUFBRSxHQUFHLE1BQU0sS0FBSyxFQUFFL0ksRUFBRXczRCxHQUFHdDJELEtBQUssS0FBSzZILEVBQUUsR0FBRyxNQUFNLFFBQVEvSSxFQUFFeTNELEdBQUd2MkQsS0FBSyxLQUFLNkgsRUFBRSxHQUFHaEosRUFBRStJLEVBQUVxcUIsaUJBQWlCcHFCLEVBQUUvSSxHQUFFLEdBQUk4SSxFQUFFcXFCLGlCQUFpQnBxQixFQUFFL0ksR0FBRSxHQUFJLFNBQVN1M0QsR0FBR3p1RCxFQUFFQyxFQUFFaEosR0FBR2drRCxJQUFJRixLQUFLLElBQUk3akQsRUFBRXkzRCxHQUFHM3dELEVBQUVpOUMsR0FBR0EsSUFBRyxFQUFHLElBQUlILEdBQUc1akQsRUFBRThJLEVBQUVDLEVBQUVoSixHQUFHLFNBQVNna0QsR0FBR2o5QyxJQUFJbTlDLE1BQU0sU0FBU3VULEdBQUcxdUQsRUFBRUMsRUFBRWhKLEdBQUcrMkQsR0FBR0YsR0FBR2EsR0FBR3YyRCxLQUFLLEtBQUs0SCxFQUFFQyxFQUFFaEosSUFDaFcsU0FBUzIzRCxHQUFHNXVELEVBQUVDLEVBQUVoSixFQUFFQyxHQUFHLEdBQUdpM0QsR0FBRzkwRCxPQUFPLENBQUMsSUFBSTJFLEVBQUVtd0QsR0FBR3IwQixNQUFNOTdCLEVBQUVva0QsYUFBYXBpRCxFQUFFaEMsRUFBRXFrRCxpQkFBaUJwaUQsRUFBRWpDLEVBQUVza0QsWUFBWXJyRCxFQUFFK0csRUFBRXF3RCxXQUFXbjNELEVBQUU4SSxFQUFFaEMsT0FBT2dDLEVBQUUsQ0FBQ29pRCxhQUFhcGlELEVBQUVxaUQsaUJBQWlCcGlELEVBQUVxaUQsWUFBWXJyRCxFQUFFbzNELFdBQVduM0QsRUFBRW8zRCxVQUFVLElBQUksSUFBSSxHQUFHcnVELEVBQUVtdUQsR0FBR24zRCxFQUFFK0ksRUFBRWs3QyxHQUFHajdDLEVBQUVoSixPQUFFLE9BQVksQ0FBQ2lrRCxJQUFHLEVBQUcsSUFBSUYsR0FBRy82QyxFQUFFaEosT0FBRSxHQUFRLFFBQVFpa0QsSUFBRyxFQUFHQyxPQUFPLFFBQVFuN0MsRUFBRW9pRCxhQUFhLEtBQUtwaUQsRUFBRXNpRCxZQUFZLEtBQUt0aUQsRUFBRXF1RCxXQUFXLEtBQUtydUQsRUFBRXN1RCxVQUFVajFELE9BQU8sRUFBRTgwRCxHQUFHOTBELE9BQU82MEQsSUFBSUMsR0FBR2h5RCxLQUFLNkQsSUFDNVksU0FBUzJ1RCxHQUFHM3VELEVBQUVDLEVBQUVoSixHQUFHLEdBQUdzM0QsR0FBRyxHQUFHLEVBQUU5TSxHQUFHcG9ELFNBQVMsRUFBRTJvRCxHQUFHM2xELFFBQVEyRCxHQUFHQSxFQUFFa2lELEdBQUcsS0FBS2xpRCxFQUFFQyxFQUFFaEosR0FBR3dxRCxHQUFHdGxELEtBQUs2RCxPQUFPLENBQUMsSUFBSTlJLEVBQUVpc0QsR0FBR25qRCxFQUFFQyxFQUFFaEosR0FBRyxPQUFPQyxFQUFFcXJELEdBQUd2aUQsRUFBRS9JLElBQUksRUFBRStxRCxHQUFHM2xELFFBQVEyRCxJQUFJQSxFQUFFa2lELEdBQUdockQsRUFBRThJLEVBQUVDLEVBQUVoSixHQUFHd3FELEdBQUd0bEQsS0FBSzZELElBNUJwQixTQUFZQSxFQUFFQyxFQUFFaEosRUFBRUMsR0FBRyxPQUFPK0ksR0FBRyxJQUFLLFFBQVEsT0FBT3loRCxHQUFHZ0IsR0FBR2hCLEdBQUcxaEQsRUFBRUMsRUFBRWhKLEVBQUVDLElBQUcsRUFBRyxJQUFLLFlBQVksT0FBT3lxRCxHQUFHZSxHQUFHZixHQUFHM2hELEVBQUVDLEVBQUVoSixFQUFFQyxJQUFHLEVBQUcsSUFBSyxZQUFZLE9BQU8wcUQsR0FBR2MsR0FBR2QsR0FBRzVoRCxFQUFFQyxFQUFFaEosRUFBRUMsSUFBRyxFQUFHLElBQUssY0FBYyxJQUFJOEcsRUFBRTlHLEVBQUV1ckQsVUFBZ0QsT0FBdENaLEdBQUd4akMsSUFBSXJnQixFQUFFMGtELEdBQUdiLEdBQUdwcUQsSUFBSXVHLElBQUksS0FBS2dDLEVBQUVDLEVBQUVoSixFQUFFQyxLQUFVLEVBQUcsSUFBSyxvQkFBb0IsT0FBTzhHLEVBQUU5RyxFQUFFdXJELFVBQVVYLEdBQUd6akMsSUFBSXJnQixFQUFFMGtELEdBQUdaLEdBQUdycUQsSUFBSXVHLElBQUksS0FBS2dDLEVBQUVDLEVBQUVoSixFQUFFQyxLQUFJLEVBQUcsT0FBTSxFQTRCM1QyM0QsQ0FBRzMzRCxFQUFFOEksRUFBRUMsRUFBRWhKLEtBQUtzckQsR0FBR3ZpRCxFQUFFL0ksR0FBRzIzRCxHQUFHNXVELEVBQUVDLEVBQUVoSixFQUFFLFFBQVEsU0FBU2tzRCxHQUFHbmpELEVBQUVDLEVBQUVoSixHQUFHLElBQUlDLEVBQUV3c0QsR0FBR3pzRCxHQUFXLEdBQUcsUUFBWEMsRUFBRTJyRCxHQUFHM3JELElBQWUsQ0FBQyxJQUFJOEcsRUFBRTBpRCxHQUFHeHBELEdBQUcsR0FBRyxPQUFPOEcsRUFBRTlHLEVBQUUsU0FBUyxDQUFDLElBQUl1UixFQUFFekssRUFBRWs4QyxJQUFJLEdBQUcsS0FBS3p4QyxFQUFFLENBQVMsR0FBRyxRQUFYdlIsRUFBRTJwRCxHQUFHN2lELElBQWUsT0FBTzlHLEVBQUVBLEVBQUUsVUFBVSxHQUFHLElBQUl1UixFQUFFLENBQUMsR0FBR3pLLEVBQUU2NkMsVUFBVW1LLFFBQVEsT0FBTyxJQUFJaGxELEVBQUVrOEMsSUFBSWw4QyxFQUFFNjZDLFVBQVVvSyxjQUFjLEtBQUsvckQsRUFBRSxVQUFVOEcsSUFBSTlHLElBQUlBLEVBQUUsT0FBbUIsT0FBWjAzRCxHQUFHNXVELEVBQUVDLEVBQUVoSixFQUFFQyxHQUFVLEtBQ3hlLFNBQVM0M0QsR0FBRzl1RCxHQUFHLElBQUl3NkMsRUFBRyxPQUFNLEVBQVksSUFBSXY2QyxHQUFiRCxFQUFFLEtBQUtBLEtBQWEwQyxTQUFxRyxPQUE1RnpDLEtBQUlBLEVBQUV5QyxTQUFTK0QsY0FBYyxRQUFTRyxhQUFhNUcsRUFBRSxXQUFXQyxFQUFFLG1CQUFvQkEsRUFBRUQsSUFBV0MsRUFBRSxJQUFJOHVELEdBQUcsSUFBSyxtQkFBb0JDLFFBQVFBLFFBQVE1VCxLQUFLLFNBQVM2VCxHQUFHanZELEdBQUcsSUFBSUMsRUFBRTh1RCxHQUFHdDNELElBQUl1SSxHQUF1QyxZQUFwQyxJQUFTQyxJQUFJQSxFQUFFLElBQUlpdkQsSUFBSUgsR0FBRzF3QyxJQUFJcmUsRUFBRUMsSUFBV0EsRUFDaFMsU0FBU2t2RCxHQUFHbnZELEVBQUVDLEVBQUVoSixHQUFHLElBQUlBLEVBQUU4N0IsSUFBSS95QixHQUFHLENBQUMsT0FBT0EsR0FBRyxJQUFLLFNBQVN3dUQsR0FBR3Z1RCxFQUFFLFVBQVMsR0FBSSxNQUFNLElBQUssUUFBUSxJQUFLLE9BQU91dUQsR0FBR3Z1RCxFQUFFLFNBQVEsR0FBSXV1RCxHQUFHdnVELEVBQUUsUUFBTyxHQUFJaEosRUFBRWt3QixJQUFJLFFBQVFsd0IsRUFBRWt3QixJQUFJLFNBQVMsTUFBTSxJQUFLLFNBQVMsSUFBSyxRQUFRMm5DLEdBQUc5dUQsSUFBSXd1RCxHQUFHdnVELEVBQUVELEdBQUUsR0FBSSxNQUFNLElBQUssVUFBVSxJQUFLLFNBQVMsSUFBSyxRQUFRLE1BQU0sU0FBUyxJQUFJeWdELEdBQUdwa0QsUUFBUTJELElBQUkyeEMsR0FBRTN4QyxFQUFFQyxHQUFHaEosRUFBRWt3QixJQUFJbm5CLElBQzFULElBQUlvdkQsR0FBRyxDQUFDQyx5QkFBd0IsRUFBR0MsbUJBQWtCLEVBQUdDLGtCQUFpQixFQUFHQyxrQkFBaUIsRUFBR0MsU0FBUSxFQUFHQyxjQUFhLEVBQUdDLGlCQUFnQixFQUFHQyxhQUFZLEVBQUdDLFNBQVEsRUFBR0MsTUFBSyxFQUFHQyxVQUFTLEVBQUdDLGNBQWEsRUFBR0MsWUFBVyxFQUFHQyxjQUFhLEVBQUdDLFdBQVUsRUFBR0MsVUFBUyxFQUFHQyxTQUFRLEVBQUdDLFlBQVcsRUFBR0MsYUFBWSxFQUFHQyxjQUFhLEVBQUdDLFlBQVcsRUFBR0MsZUFBYyxFQUFHQyxnQkFBZSxFQUFHQyxpQkFBZ0IsRUFBR0MsWUFBVyxFQUFHQyxXQUFVLEVBQUdDLFlBQVcsRUFBR0MsU0FBUSxFQUFHQyxPQUFNLEVBQUdDLFNBQVEsRUFBR0MsU0FBUSxFQUFHQyxRQUFPLEVBQUdDLFFBQU8sRUFBR0MsTUFBSyxFQUFHQyxhQUFZLEVBQzFmQyxjQUFhLEVBQUdDLGFBQVksRUFBR0MsaUJBQWdCLEVBQUdDLGtCQUFpQixFQUFHQyxrQkFBaUIsRUFBR0MsZUFBYyxFQUFHQyxhQUFZLEdBQUlDLEdBQUcsQ0FBQyxTQUFTLEtBQUssTUFBTSxLQUE2SCxTQUFTQyxHQUFHaHlELEVBQUVDLEVBQUVoSixHQUFHLE9BQU8sTUFBTWdKLEdBQUcsa0JBQW1CQSxHQUFHLEtBQUtBLEVBQUUsR0FBR2hKLEdBQUcsaUJBQWtCZ0osR0FBRyxJQUFJQSxHQUFHbXZELEdBQUczMkQsZUFBZXVILElBQUlvdkQsR0FBR3B2RCxJQUFJLEdBQUdDLEdBQUdnRCxPQUFPaEQsRUFBRSxLQUM5WixTQUFTZ3lELEdBQUdqeUQsRUFBRUMsR0FBYSxJQUFJLElBQUloSixLQUFsQitJLEVBQUVBLEVBQUV3RyxNQUFtQnZHLEVBQUUsR0FBR0EsRUFBRXhILGVBQWV4QixHQUFHLENBQUMsSUFBSUMsRUFBRSxJQUFJRCxFQUFFb0YsUUFBUSxNQUFNMkIsRUFBRWcwRCxHQUFHLzZELEVBQUVnSixFQUFFaEosR0FBR0MsR0FBRyxVQUFVRCxJQUFJQSxFQUFFLFlBQVlDLEVBQUU4SSxFQUFFa3lELFlBQVlqN0QsRUFBRStHLEdBQUdnQyxFQUFFL0ksR0FBRytHLEdBRFQxRyxPQUFPb0csS0FBSzB4RCxJQUFJdHhELFNBQVEsU0FBU2tDLEdBQUcreEQsR0FBR2owRCxTQUFRLFNBQVNtQyxHQUFHQSxFQUFFQSxFQUFFRCxFQUFFc04sT0FBTyxHQUFHb2YsY0FBYzFzQixFQUFFekYsVUFBVSxHQUFHNjBELEdBQUdudkQsR0FBR212RCxHQUFHcHZELFNBQ3JHLElBQUlteUQsR0FBRzk1RCxFQUFFLENBQUMrNUQsVUFBUyxHQUFJLENBQUNoMkIsTUFBSyxFQUFHdjJCLE1BQUssRUFBR3kyQixJQUFHLEVBQUdDLEtBQUksRUFBR0UsT0FBTSxFQUFHRSxJQUFHLEVBQUdDLEtBQUksRUFBR2hDLE9BQU0sRUFBR2tDLFFBQU8sRUFBR3JCLE1BQUssRUFBR3NCLE1BQUssRUFBR0MsT0FBTSxFQUFHejlCLFFBQU8sRUFBRzA5QixPQUFNLEVBQUdDLEtBQUksSUFDbFQsU0FBU20xQixHQUFHcnlELEVBQUVDLEdBQUcsR0FBR0EsRUFBRSxDQUFDLEdBQUdreUQsR0FBR255RCxLQUFLLE1BQU1DLEVBQUV5ckMsVUFBVSxNQUFNenJDLEVBQUVvK0MseUJBQXlCLE1BQU0vaUQsTUFBTXExQyxFQUFFLElBQUkzd0MsRUFBRSxLQUFLLEdBQUcsTUFBTUMsRUFBRW8rQyx3QkFBd0IsQ0FBQyxHQUFHLE1BQU1wK0MsRUFBRXlyQyxTQUFTLE1BQU1wd0MsTUFBTXExQyxFQUFFLEtBQUssS0FBSyxpQkFBa0Ixd0MsRUFBRW8rQyx5QkFBeUIsV0FBV3ArQyxFQUFFbytDLHlCQUF5QixNQUFNL2lELE1BQU1xMUMsRUFBRSxLQUFNLEdBQUcsTUFBTTF3QyxFQUFFdUcsT0FBTyxpQkFBa0J2RyxFQUFFdUcsTUFBTSxNQUFNbEwsTUFBTXExQyxFQUFFLEdBQUcsTUFDbFcsU0FBUzJoQixHQUFHdHlELEVBQUVDLEdBQUcsSUFBSSxJQUFJRCxFQUFFM0QsUUFBUSxLQUFLLE1BQU0saUJBQWtCNEQsRUFBRXN5RCxHQUFHLE9BQU92eUQsR0FBRyxJQUFLLGlCQUFpQixJQUFLLGdCQUFnQixJQUFLLFlBQVksSUFBSyxnQkFBZ0IsSUFBSyxnQkFBZ0IsSUFBSyxtQkFBbUIsSUFBSyxpQkFBaUIsSUFBSyxnQkFBZ0IsT0FBTSxFQUFHLFFBQVEsT0FBTSxHQUFJLFNBQVN3eUQsR0FBR3h5RCxFQUFFQyxHQUF1RCxJQUFJaEosRUFBRWc0RCxHQUExRGp2RCxFQUFFLElBQUlBLEVBQUV5L0MsVUFBVSxLQUFLei9DLEVBQUV5L0MsU0FBU3ovQyxFQUFFQSxFQUFFNjlDLGVBQTBCNTlDLEVBQUUrMkMsRUFBRy8yQyxHQUFHLElBQUksSUFBSS9JLEVBQUUsRUFBRUEsRUFBRStJLEVBQUU1RyxPQUFPbkMsSUFBSWk0RCxHQUFHbHZELEVBQUUvSSxHQUFHOEksRUFBRS9JLEdBQUcsU0FBU3c3RCxNQUM3WixTQUFTQyxHQUFHMXlELEdBQXdELFFBQUcsS0FBeERBLEVBQUVBLElBQUksb0JBQXFCMEMsU0FBU0EsY0FBUyxJQUFrQyxPQUFPLEtBQUssSUFBSSxPQUFPMUMsRUFBRTg5QyxlQUFlOTlDLEVBQUV3N0IsS0FBSyxNQUFNdjdCLEdBQUcsT0FBT0QsRUFBRXc3QixNQUFNLFNBQVNtM0IsR0FBRzN5RCxHQUFHLEtBQUtBLEdBQUdBLEVBQUU0SCxZQUFZNUgsRUFBRUEsRUFBRTRILFdBQVcsT0FBTzVILEVBQUUsU0FBUzR5RCxHQUFHNXlELEVBQUVDLEdBQUcsSUFBd0IvSSxFQUFwQkQsRUFBRTA3RCxHQUFHM3lELEdBQU8sSUFBSkEsRUFBRSxFQUFZL0ksR0FBRyxDQUFDLEdBQUcsSUFBSUEsRUFBRXdvRCxTQUFTLENBQTBCLEdBQXpCdm9ELEVBQUU4SSxFQUFFL0ksRUFBRXduRCxZQUFZcGxELE9BQVUyRyxHQUFHQyxHQUFHL0ksR0FBRytJLEVBQUUsTUFBTSxDQUFDNHFCLEtBQUs1ekIsRUFBRThmLE9BQU85VyxFQUFFRCxHQUFHQSxFQUFFOUksRUFBRThJLEVBQUUsQ0FBQyxLQUFLL0ksR0FBRyxDQUFDLEdBQUdBLEVBQUVrMUMsWUFBWSxDQUFDbDFDLEVBQUVBLEVBQUVrMUMsWUFBWSxNQUFNbnNDLEVBQUUvSSxFQUFFQSxFQUFFZ1IsV0FBV2hSLE9BQUUsRUFBT0EsRUFBRTA3RCxHQUFHMTdELElBQzNQLFNBQVM0N0QsS0FBSyxJQUFJLElBQUk3eUQsRUFBRXlDLE9BQU94QyxFQUFFeXlELEtBQUt6eUQsYUFBYUQsRUFBRXFGLG1CQUFtQixDQUFDLElBQUksSUFBSXBPLEVBQUUsaUJBQWtCZ0osRUFBRTZ5RCxjQUFjNzdCLFNBQVM4N0IsS0FBSyxNQUFNNzdELEdBQUdELEdBQUUsRUFBRyxJQUFHQSxFQUF5QixNQUFNZ0osRUFBRXl5RCxJQUEvQjF5RCxFQUFFQyxFQUFFNnlELGVBQWdDcHdELFVBQVUsT0FBT3pDLEVBQzVZLFNBQVMreUQsR0FBR2h6RCxHQUFHLElBQUlDLEVBQUVELEdBQUdBLEVBQUV5OEMsVUFBVXo4QyxFQUFFeThDLFNBQVNqbkMsY0FBYyxPQUFPdlYsSUFBSSxVQUFVQSxJQUFJLFNBQVNELEVBQUV2RCxNQUFNLFdBQVd1RCxFQUFFdkQsTUFBTSxRQUFRdUQsRUFBRXZELE1BQU0sUUFBUXVELEVBQUV2RCxNQUFNLGFBQWF1RCxFQUFFdkQsT0FBTyxhQUFhd0QsR0FBRyxTQUFTRCxFQUFFaXpELGlCQUFpQixJQUFJQyxHQUFHLElBQUlDLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRyxLQUFLLFNBQVNDLEdBQUd4ekQsRUFBRUMsR0FBRyxPQUFPRCxHQUFHLElBQUssU0FBUyxJQUFLLFFBQVEsSUFBSyxTQUFTLElBQUssV0FBVyxRQUFRQyxFQUFFd3pELFVBQVUsT0FBTSxFQUM3WCxTQUFTQyxHQUFHMXpELEVBQUVDLEdBQUcsTUFBTSxhQUFhRCxHQUFHLFdBQVdBLEdBQUcsYUFBYUEsR0FBRyxpQkFBa0JDLEVBQUV5ckMsVUFBVSxpQkFBa0J6ckMsRUFBRXlyQyxVQUFVLGlCQUFrQnpyQyxFQUFFbytDLHlCQUF5QixPQUFPcCtDLEVBQUVvK0MseUJBQXlCLE1BQU1wK0MsRUFBRW8rQyx3QkFBd0JzVixPQUFPLElBQUlDLEdBQUcsbUJBQW9CamlELFdBQVdBLGdCQUFXLEVBQU9raUQsR0FBRyxtQkFBb0JqaUQsYUFBYUEsa0JBQWEsRUFBTyxTQUFTb2IsR0FBR2h0QixHQUFHLEtBQUssTUFBTUEsRUFBRUEsRUFBRUEsRUFBRW1zQyxZQUFZLENBQUMsSUFBSWxzQyxFQUFFRCxFQUFFeS9DLFNBQVMsR0FBRyxJQUFJeC9DLEdBQUcsSUFBSUEsRUFBRSxNQUFNLE9BQU9ELEVBQ2xjLFNBQVM4ekQsR0FBRzl6RCxHQUFHQSxFQUFFQSxFQUFFMnJDLGdCQUFnQixJQUFJLElBQUkxckMsRUFBRSxFQUFFRCxHQUFHLENBQUMsR0FBRyxJQUFJQSxFQUFFeS9DLFNBQVMsQ0FBQyxJQUFJeG9ELEVBQUUrSSxFQUFFcUUsS0FBSyxHQUFHcE4sSUFBSWk4RCxJQUFJajhELElBQUlvOEQsSUFBSXA4RCxJQUFJbThELEdBQUcsQ0FBQyxHQUFHLElBQUluekQsRUFBRSxPQUFPRCxFQUFFQyxTQUFTaEosSUFBSWs4RCxJQUFJbHpELElBQUlELEVBQUVBLEVBQUUyckMsZ0JBQWdCLE9BQU8sS0FBSyxJQUFJb29CLEdBQUczNUQsS0FBS0MsU0FBU0MsU0FBUyxJQUFJd0IsTUFBTSxHQUFHazRELEdBQUcsMkJBQTJCRCxHQUFHRSxHQUFHLHdCQUF3QkYsR0FBR0csR0FBRyxxQkFBcUJILEdBQ3ZULFNBQVNsUixHQUFHN2lELEdBQUcsSUFBSUMsRUFBRUQsRUFBRWcwRCxJQUFJLEdBQUcvekQsRUFBRSxPQUFPQSxFQUFFLElBQUksSUFBSWhKLEVBQUUrSSxFQUFFaUksV0FBV2hSLEdBQUcsQ0FBQyxHQUFHZ0osRUFBRWhKLEVBQUVpOUQsS0FBS2o5RCxFQUFFKzhELElBQUksQ0FBZSxHQUFkLzhELEVBQUVnSixFQUFFMGdELFVBQWEsT0FBTzFnRCxFQUFFaWhELE9BQU8sT0FBT2pxRCxHQUFHLE9BQU9BLEVBQUVpcUQsTUFBTSxJQUFJbGhELEVBQUU4ekQsR0FBRzl6RCxHQUFHLE9BQU9BLEdBQUcsQ0FBQyxHQUFHL0ksRUFBRStJLEVBQUVnMEQsSUFBSSxPQUFPLzhELEVBQUUrSSxFQUFFOHpELEdBQUc5ekQsR0FBRyxPQUFPQyxFQUFNaEosR0FBSitJLEVBQUUvSSxHQUFNZ1IsV0FBVyxPQUFPLEtBQUssU0FBUzA2QyxHQUFHM2lELEdBQWtCLFFBQWZBLEVBQUVBLEVBQUVnMEQsS0FBS2gwRCxFQUFFazBELE1BQWMsSUFBSWwwRCxFQUFFazZDLEtBQUssSUFBSWw2QyxFQUFFazZDLEtBQUssS0FBS2w2QyxFQUFFazZDLEtBQUssSUFBSWw2QyxFQUFFazZDLElBQUksS0FBS2w2QyxFQUFFLFNBQVNtMEQsR0FBR24wRCxHQUFHLEdBQUcsSUFBSUEsRUFBRWs2QyxLQUFLLElBQUlsNkMsRUFBRWs2QyxJQUFJLE9BQU9sNkMsRUFBRTY0QyxVQUFVLE1BQU12OUMsTUFBTXExQyxFQUFFLEtBQU0sU0FBU3lqQixHQUFHcDBELEdBQUcsT0FBT0EsRUFBRWkwRCxLQUFLLEtBQUssSUFBSUksR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsS0FDOWMsU0FBU0MsS0FBSyxHQUFHRCxHQUFHLE9BQU9BLEdBQUcsSUFBSXYwRCxFQUFrQjlJLEVBQWhCK0ksRUFBRXEwRCxHQUFHcjlELEVBQUVnSixFQUFFNUcsT0FBUzJFLEVBQUUsVUFBVXEyRCxHQUFHQSxHQUFHeDhELE1BQU13OEQsR0FBRzVWLFlBQVloMkMsRUFBRXpLLEVBQUUzRSxPQUFPLElBQUkyRyxFQUFFLEVBQUVBLEVBQUUvSSxHQUFHZ0osRUFBRUQsS0FBS2hDLEVBQUVnQyxHQUFHQSxLQUFLLElBQUkraEIsRUFBRTlxQixFQUFFK0ksRUFBRSxJQUFJOUksRUFBRSxFQUFFQSxHQUFHNnFCLEdBQUc5aEIsRUFBRWhKLEVBQUVDLEtBQUs4RyxFQUFFeUssRUFBRXZSLEdBQUdBLEtBQUssT0FBT3E5RCxHQUFHdjJELEVBQUVsQyxNQUFNa0UsRUFBRSxFQUFFOUksRUFBRSxFQUFFQSxPQUFFLEdBQVEsSUFBSXU5RCxHQUFHampCLEdBQUV6dUMsT0FBTyxDQUFDc0IsS0FBSyxPQUFPcXdELEdBQUdsakIsR0FBRXp1QyxPQUFPLENBQUNzQixLQUFLLE9BQU9zd0QsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUlDLEdBQUdwYSxHQUFJLHFCQUFxQi8zQyxPQUFPb3lELEdBQUcsS0FBS3JhLEdBQUksaUJBQWlCOTNDLFdBQVdteUQsR0FBR255RCxTQUFTb3lELGNBQ3BYLElBQUlDLEdBQUd2YSxHQUFJLGNBQWMvM0MsU0FBU295RCxHQUFHRyxHQUFHeGEsS0FBTW9hLElBQUlDLElBQUksRUFBRUEsSUFBSSxJQUFJQSxJQUFJSSxHQUFHMzNELE9BQU8wUCxhQUFhLElBQUlrb0QsR0FBRyxDQUFDQyxZQUFZLENBQUN2ZSx3QkFBd0IsQ0FBQzZXLFFBQVEsZ0JBQWdCQyxTQUFTLHdCQUF3QnpXLGFBQWEsQ0FBQyxpQkFBaUIsV0FBVyxZQUFZLFVBQVVtZSxlQUFlLENBQUN4ZSx3QkFBd0IsQ0FBQzZXLFFBQVEsbUJBQW1CQyxTQUFTLDJCQUEyQnpXLGFBQWEsdURBQXVEejhDLE1BQU0sTUFBTTY2RCxpQkFBaUIsQ0FBQ3plLHdCQUF3QixDQUFDNlcsUUFBUSxxQkFDN2VDLFNBQVMsNkJBQTZCelcsYUFBYSx5REFBeUR6OEMsTUFBTSxNQUFNODZELGtCQUFrQixDQUFDMWUsd0JBQXdCLENBQUM2VyxRQUFRLHNCQUFzQkMsU0FBUyw4QkFBOEJ6VyxhQUFhLDBEQUEwRHo4QyxNQUFNLE9BQU8rNkQsSUFBRyxFQUNoVSxTQUFTQyxHQUFHeDFELEVBQUVDLEdBQUcsT0FBT0QsR0FBRyxJQUFLLFFBQVEsT0FBTyxJQUFJMjBELEdBQUd0NEQsUUFBUTRELEVBQUVvbUQsU0FBUyxJQUFLLFVBQVUsT0FBTyxNQUFNcG1ELEVBQUVvbUQsUUFBUSxJQUFLLFdBQVcsSUFBSyxZQUFZLElBQUssT0FBTyxPQUFNLEVBQUcsUUFBUSxPQUFNLEdBQUksU0FBU29QLEdBQUd6MUQsR0FBYyxNQUFNLGlCQUFqQkEsRUFBRUEsRUFBRWltRCxTQUFrQyxTQUFTam1ELEVBQUVBLEVBQUVxRSxLQUFLLEtBQUssSUFBSXF4RCxJQUFHLEVBRTFRLElBQUlDLEdBQUcsQ0FBQ2pmLFdBQVd3ZSxHQUFHemUsY0FBYyxTQUFTejJDLEVBQUVDLEVBQUVoSixFQUFFQyxHQUFHLElBQUk4RyxFQUFFLEdBQUc0MkQsR0FBRzMwRCxFQUFFLENBQUMsT0FBT0QsR0FBRyxJQUFLLG1CQUFtQixJQUFJeUksRUFBRXlzRCxHQUFHRyxpQkFBaUIsTUFBTXAxRCxFQUFFLElBQUssaUJBQWlCd0ksRUFBRXlzRCxHQUFHRSxlQUFlLE1BQU1uMUQsRUFBRSxJQUFLLG9CQUFvQndJLEVBQUV5c0QsR0FBR0ksa0JBQWtCLE1BQU1yMUQsRUFBRXdJLE9BQUUsT0FBWWl0RCxHQUFHRixHQUFHeDFELEVBQUUvSSxLQUFLd1IsRUFBRXlzRCxHQUFHRSxnQkFBZ0IsWUFBWXAxRCxHQUFHLE1BQU0vSSxFQUFFb3ZELFVBQVU1OUMsRUFBRXlzRCxHQUFHRyxrQkFDbEwsT0FEb001c0QsR0FBR3VzRCxJQUFJLE9BQU8vOUQsRUFBRW96RCxTQUFTcUwsSUFBSWp0RCxJQUFJeXNELEdBQUdHLGlCQUFpQjVzRCxJQUFJeXNELEdBQUdFLGdCQUFnQk0sS0FBSzEzRCxFQUFFdzJELE9BQVlGLEdBQUcsVUFBUkQsR0FBR245RCxHQUFrQm05RCxHQUFHeDhELE1BQU13OEQsR0FBRzVWLFlBQVlpWCxJQUFHLElBQUtqdEQsRUFBRWdzRCxHQUFHelAsVUFBVXY4QyxFQUN6ZnhJLEVBQUVoSixFQUFFQyxHQUFHOEcsRUFBRXlLLEVBQUVwRSxLQUFLckcsRUFBVyxRQUFSQSxFQUFFeTNELEdBQUd4K0QsTUFBY3dSLEVBQUVwRSxLQUFLckcsR0FBSW9tRCxHQUFHMzdDLEdBQUd6SyxFQUFFeUssR0FBR3pLLEVBQUUsTUFBTWdDLEVBQUUrMEQsR0FIdU0sU0FBWS8wRCxFQUFFQyxHQUFHLE9BQU9ELEdBQUcsSUFBSyxpQkFBaUIsT0FBT3kxRCxHQUFHeDFELEdBQUcsSUFBSyxXQUFXLE9BQUcsS0FBS0EsRUFBRXFxRCxNQUFhLE1BQUtpTCxJQUFHLEVBQVVOLElBQUcsSUFBSyxZQUFZLE9BQU9qMUQsRUFBRUMsRUFBRW9FLFFBQVM0d0QsSUFBSU0sR0FBRyxLQUFLdjFELEVBQUUsUUFBUSxPQUFPLE1BR2hZNDFELENBQUc1MUQsRUFBRS9JLEdBRjlFLFNBQVkrSSxFQUFFQyxHQUFHLEdBQUd5MUQsR0FBRyxNQUFNLG1CQUFtQjExRCxJQUFJNDBELElBQUlZLEdBQUd4MUQsRUFBRUMsSUFBSUQsRUFBRXcwRCxLQUFLRCxHQUFHRCxHQUFHRCxHQUFHLEtBQUtxQixJQUFHLEVBQUcxMUQsR0FBRyxLQUFLLE9BQU9BLEdBQUcsSUFBSyxRQUFRLE9BQU8sS0FBSyxJQUFLLFdBQVcsS0FBS0MsRUFBRWdxRCxTQUFTaHFELEVBQUVrcUQsUUFBUWxxRCxFQUFFbXFELFVBQVVucUQsRUFBRWdxRCxTQUFTaHFELEVBQUVrcUQsT0FBTyxDQUFDLEdBQUdscUQsRUFBRTQxRCxNQUFNLEVBQUU1MUQsRUFBRTQxRCxLQUFLeDhELE9BQU8sT0FBTzRHLEVBQUU0MUQsS0FBSyxHQUFHNTFELEVBQUVxcUQsTUFBTSxPQUFPaHRELE9BQU8wUCxhQUFhL00sRUFBRXFxRCxPQUFPLE9BQU8sS0FBSyxJQUFLLGlCQUFpQixPQUFPMEssSUFBSSxPQUFPLzBELEVBQUVvcUQsT0FBTyxLQUFLcHFELEVBQUVvRSxLQUFLLFFBQVEsT0FBTyxNQUVqVHl4RCxDQUFHOTFELEVBQUUvSSxNQUFLZ0osRUFBRXkwRCxHQUFHMVAsVUFBVWtRLEdBQUdDLFlBQVlsMUQsRUFBRWhKLEVBQUVDLElBQUttTixLQUFLckUsRUFBRW9rRCxHQUFHbmtELElBQUlBLEVBQUUsS0FBWSxPQUFPakMsRUFBRWlDLEVBQUUsT0FBT0EsRUFBRWpDLEVBQUUsQ0FBQ0EsRUFBRWlDLEtBQUs4MUQsR0FBRyxDQUFDeHpDLE9BQU0sRUFBR3l6QyxNQUFLLEVBQUdDLFVBQVMsRUFBRyxrQkFBaUIsRUFBR0MsT0FBTSxFQUFHQyxPQUFNLEVBQUdDLFFBQU8sRUFBRzlsQyxVQUFTLEVBQUcrbEMsT0FBTSxFQUFHbDJCLFFBQU8sRUFBR20yQixLQUFJLEVBQUd6bEQsTUFBSyxFQUFHMGxELE1BQUssRUFBR2xvQyxLQUFJLEVBQUdtb0MsTUFBSyxHQUFJLFNBQVNDLEdBQUd6MkQsR0FBRyxJQUFJQyxFQUFFRCxHQUFHQSxFQUFFeThDLFVBQVV6OEMsRUFBRXk4QyxTQUFTam5DLGNBQWMsTUFBTSxVQUFVdlYsSUFBSTgxRCxHQUFHLzFELEVBQUV2RCxNQUFNLGFBQWF3RCxFQUM1YixJQUFJeTJELEdBQUcsQ0FBQ0MsT0FBTyxDQUFDL2Ysd0JBQXdCLENBQUM2VyxRQUFRLFdBQVdDLFNBQVMsbUJBQW1CelcsYUFBYSw4REFBOER6OEMsTUFBTSxPQUFPLFNBQVNvOEQsR0FBRzUyRCxFQUFFQyxFQUFFaEosR0FBOEQsT0FBM0QrSSxFQUFFd3hDLEdBQUV3VCxVQUFVMFIsR0FBR0MsT0FBTzMyRCxFQUFFQyxFQUFFaEosSUFBS3dGLEtBQUssU0FBUzRPLEdBQUdwVSxHQUFHbXRELEdBQUdwa0QsR0FBVUEsRUFBRSxJQUFJNjJELEdBQUcsS0FBS0MsR0FBRyxLQUFLLFNBQVNDLEdBQUcvMkQsR0FBR3c0QyxFQUFHeDRDLEdBQUcsU0FBU2czRCxHQUFHaDNELEdBQWUsR0FBR2c5QyxHQUFUbVgsR0FBR24wRCxJQUFZLE9BQU9BLEVBQUUsU0FBU2kzRCxHQUFHajNELEVBQUVDLEdBQUcsR0FBRyxXQUFXRCxFQUFFLE9BQU9DLEVBQUUsSUFBSWkzRCxJQUFHLEVBQzlZLFNBQVNDLEtBQUtOLEtBQUtBLEdBQUdPLFlBQVksbUJBQW1CQyxJQUFJUCxHQUFHRCxHQUFHLE1BQU0sU0FBU1EsR0FBR3IzRCxHQUFHLEdBQUcsVUFBVUEsRUFBRTY3QyxjQUFjbWIsR0FBR0YsSUFBSSxHQUFHOTJELEVBQUU0MkQsR0FBR0UsR0FBRzkyRCxFQUFFMGpELEdBQUcxakQsSUFBSWk3QyxHQUFHekMsRUFBR3g0QyxPQUFPLENBQUNpN0MsSUFBRyxFQUFHLElBQUlKLEdBQUdrYyxHQUFHLzJELEdBQUcsUUFBUWk3QyxJQUFHLEVBQUdFLE9BQU8sU0FBU21jLEdBQUd0M0QsRUFBRUMsRUFBRWhKLEdBQUcsVUFBVStJLEdBQUdtM0QsS0FBVUwsR0FBRzcvRCxHQUFSNC9ELEdBQUc1MkQsR0FBVXMzRCxZQUFZLG1CQUFtQkYsS0FBSyxTQUFTcjNELEdBQUdtM0QsS0FBSyxTQUFTSyxHQUFHeDNELEdBQUcsR0FBRyxvQkFBb0JBLEdBQUcsVUFBVUEsR0FBRyxZQUFZQSxFQUFFLE9BQU9nM0QsR0FBR0YsSUFBSSxTQUFTVyxHQUFHejNELEVBQUVDLEdBQUcsR0FBRyxVQUFVRCxFQUFFLE9BQU9nM0QsR0FBRy8yRCxHQUFHLFNBQVN5M0QsR0FBRzEzRCxFQUFFQyxHQUFHLEdBQUcsVUFBVUQsR0FBRyxXQUFXQSxFQUFFLE9BQU9nM0QsR0FBRy8yRCxHQUQvRXU2QyxJQUFLMGMsR0FBR3BJLEdBQUcsWUFBWXBzRCxTQUFTb3lELGNBQWMsRUFBRXB5RCxTQUFTb3lELGVBRTFjLElBQ2lUNkMsR0FEN1NDLEdBQUcsQ0FBQ2xoQixXQUFXZ2dCLEdBQUdtQix1QkFBdUJYLEdBQUd6Z0IsY0FBYyxTQUFTejJDLEVBQUVDLEVBQUVoSixFQUFFQyxHQUFHLElBQUk4RyxFQUFFaUMsRUFBRWswRCxHQUFHbDBELEdBQUd3QyxPQUFPZ0csRUFBRXpLLEVBQUV5K0MsVUFBVXorQyxFQUFFeStDLFNBQVNqbkMsY0FBYyxHQUFHLFdBQVcvTSxHQUFHLFVBQVVBLEdBQUcsU0FBU3pLLEVBQUV2QixLQUFLLElBQUlzbEIsRUFBRWsxQyxRQUFRLEdBQUdSLEdBQUd6NEQsR0FBRyxHQUFHazVELEdBQUduMUMsRUFBRTIxQyxPQUFPLENBQUMzMUMsRUFBRXkxQyxHQUFHLElBQUlobkIsRUFBRThtQixRQUFRN3VELEVBQUV6SyxFQUFFeStDLFdBQVcsVUFBVWgwQyxFQUFFK00sZ0JBQWdCLGFBQWF4WCxFQUFFdkIsTUFBTSxVQUFVdUIsRUFBRXZCLFFBQVFzbEIsRUFBRTAxQyxJQUFJLEdBQUcxMUMsSUFBSUEsRUFBRUEsRUFBRS9oQixFQUFFQyxJQUFJLE9BQU8yMkQsR0FBRzcwQyxFQUFFOXFCLEVBQUVDLEdBQUdzNUMsR0FBR0EsRUFBRXh3QyxFQUFFaEMsRUFBRWlDLEdBQUcsU0FBU0QsSUFBSUEsRUFBRWhDLEVBQUVvL0MsZ0JBQWdCcDlDLEVBQUV3OUMsWUFBWSxXQUFXeC9DLEVBQUV2QixNQUFNa2hELEdBQUczL0MsRUFBRSxTQUFTQSxFQUFFbkcsU0FBU2lnRSxHQUFHLENBQUNDLFdBQVcsQ0FBQ2poQixpQkFBaUIsZUFDeGZHLGFBQWEsQ0FBQyxXQUFXLGNBQWMrZ0IsV0FBVyxDQUFDbGhCLGlCQUFpQixlQUFlRyxhQUFhLENBQUMsV0FBVyxjQUFjZ2hCLGFBQWEsQ0FBQ25oQixpQkFBaUIsaUJBQWlCRyxhQUFhLENBQUMsYUFBYSxnQkFBZ0JpaEIsYUFBYSxDQUFDcGhCLGlCQUFpQixpQkFBaUJHLGFBQWEsQ0FBQyxhQUFhLGlCQUFvQmtoQixHQUFHLENBQUN6aEIsV0FBV29oQixHQUFHcmhCLGNBQWMsU0FBU3oyQyxFQUFFQyxFQUFFaEosRUFBRUMsRUFBRThHLEdBQUcsSUFBSXlLLEVBQUUsY0FBY3pJLEdBQUcsZ0JBQWdCQSxFQUFFK2hCLEVBQUUsYUFBYS9oQixHQUFHLGVBQWVBLEVBQUUsR0FBR3lJLEdBQUcsSUFBTyxHQUFGekssS0FBUS9HLEVBQUVrdkQsZUFBZWx2RCxFQUFFazBELGVBQWVwcEMsSUFBSXRaLEVBQUUsT0FBTyxLQUM5UyxHQUF4TXpLLEVBQUU5RyxFQUFFdUwsU0FBU3ZMLEVBQUVBLEdBQUc4RyxFQUFFOUcsRUFBRTJtRCxlQUFlNy9DLEVBQUVvNkQsYUFBYXA2RCxFQUFFcTZELGFBQWE1MUQsT0FBVXNmLEdBQU1BLEVBQUU5aEIsRUFBZ0QsUUFBOUNBLEdBQUdBLEVBQUVoSixFQUFFa3ZELGVBQWVsdkQsRUFBRW0wRCxXQUFXdkksR0FBRzVpRCxHQUFHLFFBQXdCQSxLQUFSd0ksRUFBRWk0QyxHQUFHemdELEtBQVUsSUFBSUEsRUFBRWk2QyxLQUFLLElBQUlqNkMsRUFBRWk2QyxPQUFLajZDLEVBQUUsT0FBVThoQixFQUFFLEtBQVFBLElBQUk5aEIsRUFBRSxPQUFPLEtBQUssR0FBRyxhQUFhRCxHQUFHLGNBQWNBLEVBQUcsSUFBSXd3QyxFQUFFbWEsR0FBT3pjLEVBQUU0cEIsR0FBR0UsV0FBZW5oRSxFQUFFaWhFLEdBQUdDLFdBQWUvZ0UsRUFBRSxZQUFnQixlQUFlZ0osR0FBRyxnQkFBZ0JBLElBQUV3d0MsRUFBRSthLEdBQUdyZCxFQUFFNHBCLEdBQUdJLGFBQWFyaEUsRUFBRWloRSxHQUFHRyxhQUFhamhFLEVBQUUsV0FDdFQsR0FEZ1VnSixFQUFFLE1BQU0raEIsRUFBRS9qQixFQUFFbTJELEdBQUdweUMsR0FBRy9qQixFQUFFLE1BQU1pQyxFQUFFakMsRUFBRW0yRCxHQUFHbDBELElBQUdpdUMsRUFBRXNDLEVBQUV3VSxVQUFVOVcsRUFBRW5zQixFQUFFOXFCLEVBQUVDLElBQUt1RixLQUFLekYsRUFBRSxRQUFRazNDLEVBQUUvMEMsT0FDL2U2RyxFQUFFa3VDLEVBQUVpWSxjQUFjbm9ELEdBQUU5RyxFQUFFczVDLEVBQUV3VSxVQUFVbnVELEVBQUVvSixFQUFFaEosRUFBRUMsSUFBS3VGLEtBQUt6RixFQUFFLFFBQVFFLEVBQUVpQyxPQUFPNkUsRUFBRTlHLEVBQUVpdkQsY0FBY25tRCxFQUFNaEosRUFBRWlKLEdBQU51d0MsRUFBRXp1QixJQUFZL3FCLEVBQUVnSixFQUFFLENBQWEsSUFBUkEsRUFBRWhKLEVBQUUrcUIsRUFBRSxFQUFNOWhCLEVBQWhCcEosRUFBRTI1QyxFQUFrQnZ3QyxFQUFFQSxFQUFFNGpELEdBQUc1akQsR0FBRzhoQixJQUFRLElBQUo5aEIsRUFBRSxFQUFNakMsRUFBRWdDLEVBQUVoQyxFQUFFQSxFQUFFNmxELEdBQUc3bEQsR0FBR2lDLElBQUksS0FBSyxFQUFFOGhCLEVBQUU5aEIsR0FBR3BKLEVBQUVndEQsR0FBR2h0RCxHQUFHa3JCLElBQUksS0FBSyxFQUFFOWhCLEVBQUU4aEIsR0FBRy9oQixFQUFFNmpELEdBQUc3akQsR0FBR0MsSUFBSSxLQUFLOGhCLEtBQUssQ0FBQyxHQUFHbHJCLElBQUltSixHQUFHbkosSUFBSW1KLEVBQUUyZ0QsVUFBVSxNQUFNM2dELEVBQUVuSixFQUFFZ3RELEdBQUdodEQsR0FBR21KLEVBQUU2akQsR0FBRzdqRCxHQUFHbkosRUFBRSxVQUFVQSxFQUFFLEtBQVMsSUFBSm1KLEVBQUVuSixFQUFNQSxFQUFFLEdBQUcyNUMsR0FBR0EsSUFBSXh3QyxJQUFxQixRQUFqQitoQixFQUFFeXVCLEVBQUVtUSxZQUF1QjUrQixJQUFJL2hCLElBQVFuSixFQUFFc0YsS0FBS3EwQyxHQUFHQSxFQUFFcVQsR0FBR3JULEdBQUcsSUFBSUEsRUFBRSxHQUFHeDVDLEdBQUdBLElBQUlnSixJQUFxQixRQUFqQitoQixFQUFFL3FCLEVBQUUycEQsWUFBdUI1K0IsSUFBSS9oQixJQUFRd3dDLEVBQUVyMEMsS0FBS25GLEdBQUdBLEVBQUU2c0QsR0FBRzdzRCxHQUFHLElBQUlBLEVBQUUsRUFBRUEsRUFBRUgsRUFBRXdDLE9BQU9yQyxJQUFJa3RELEdBQUdydEQsRUFBRUcsR0FBRyxVQUFVazNDLEdBQUcsSUFBSWwzQyxFQUN0Znc1QyxFQUFFbjNDLE9BQU8sRUFBRXJDLEtBQUtrdEQsR0FBRzFULEVBQUV4NUMsR0FBRyxXQUFXRSxHQUFHLE9BQUdELElBQUkwZ0UsSUFBVUEsR0FBRyxLQUFLLENBQUN6cEIsS0FBR3lwQixHQUFHMWdFLEVBQVEsQ0FBQ2kzQyxFQUFFaDNDLE1BQXFFLElBQUlvaEUsR0FBRyxtQkFBb0JoaEUsT0FBT2k3RCxHQUFHajdELE9BQU9pN0QsR0FBNUcsU0FBWXZ5RCxFQUFFQyxHQUFHLE9BQU9ELElBQUlDLElBQUksSUFBSUQsR0FBRyxFQUFFQSxHQUFJLEVBQUVDLElBQUlELEdBQUlBLEdBQUdDLEdBQUlBLEdBQW9EczRELEdBQUdqaEUsT0FBT2tCLFVBQVVDLGVBQWUsU0FBUysvRCxHQUFHeDRELEVBQUVDLEdBQUcsR0FBR3E0RCxHQUFHdDRELEVBQUVDLEdBQUcsT0FBTSxFQUFHLEdBQUcsaUJBQWtCRCxHQUFHLE9BQU9BLEdBQUcsaUJBQWtCQyxHQUFHLE9BQU9BLEVBQUUsT0FBTSxFQUFHLElBQUloSixFQUFFSyxPQUFPb0csS0FBS3NDLEdBQUc5SSxFQUFFSSxPQUFPb0csS0FBS3VDLEdBQUcsR0FBR2hKLEVBQUVvQyxTQUFTbkMsRUFBRW1DLE9BQU8sT0FBTSxFQUFHLElBQUluQyxFQUFFLEVBQUVBLEVBQUVELEVBQUVvQyxPQUFPbkMsSUFBSSxJQUFJcWhFLEdBQUd4aEUsS0FBS2tKLEVBQUVoSixFQUFFQyxNQUFNb2hFLEdBQUd0NEQsRUFBRS9JLEVBQUVDLElBQUkrSSxFQUFFaEosRUFBRUMsS0FBSyxPQUFNLEVBQUcsT0FBTSxFQUMvZSxJQUFJdWhFLEdBQUdqZSxHQUFJLGlCQUFpQjkzQyxVQUFVLElBQUlBLFNBQVNveUQsYUFBYTRELEdBQUcsQ0FBQzM5QixPQUFPLENBQUM2Yix3QkFBd0IsQ0FBQzZXLFFBQVEsV0FBV0MsU0FBUyxtQkFBbUJ6VyxhQUFhLGlGQUFpRno4QyxNQUFNLE9BQU9tK0QsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsSUFBRyxFQUMxUixTQUFTQyxHQUFHLzRELEVBQUVDLEdBQUcsSUFBSWhKLEVBQUVnSixFQUFFd0MsU0FBU3hDLEVBQUVBLEVBQUV5QyxTQUFTLElBQUl6QyxFQUFFdy9DLFNBQVN4L0MsRUFBRUEsRUFBRTQ5QyxjQUFjLE9BQUdpYixJQUFJLE1BQU1ILElBQUlBLEtBQUtqRyxHQUFHejdELEdBQVUsTUFBVSxtQkFBTEEsRUFBRTBoRSxLQUF5QjNGLEdBQUcvN0QsR0FBR0EsRUFBRSxDQUFDeWUsTUFBTXplLEVBQUUraEUsZUFBZTdvRCxJQUFJbFosRUFBRWdpRSxjQUF1RmhpRSxFQUFFLENBQUNpaUUsWUFBM0VqaUUsR0FBR0EsRUFBRTRtRCxlQUFlNW1ELEVBQUU0bUQsY0FBY3VhLGFBQWEzMUQsUUFBUTAyRCxnQkFBK0JELFdBQVdFLGFBQWFuaUUsRUFBRW1pRSxhQUFhQyxVQUFVcGlFLEVBQUVvaUUsVUFBVUMsWUFBWXJpRSxFQUFFcWlFLGFBQXFCVCxJQUFJTCxHQUFHSyxHQUFHNWhFLEdBQUcsTUFBTTRoRSxHQUFHNWhFLEdBQUUrSSxFQUFFd3hDLEdBQUV3VCxVQUFVMFQsR0FBRzM5QixPQUFPNjlCLEdBQUc1NEQsRUFBRUMsSUFBS3hELEtBQUssU0FBU3VELEVBQUU3RyxPQUFPdy9ELEdBQUd2VSxHQUFHcGtELEdBQUdBLElBQzFkLElBQUl1NUQsR0FBRyxDQUFDN2lCLFdBQVdnaUIsR0FBR2ppQixjQUFjLFNBQVN6MkMsRUFBRUMsRUFBRWhKLEVBQUVDLEdBQUcsSUFBK0R1UixFQUEzRHpLLEVBQUU5RyxFQUFFdUwsU0FBU3ZMLEVBQUVBLEVBQUV3TCxTQUFTLElBQUl4TCxFQUFFdW9ELFNBQVN2b0QsRUFBRUEsRUFBRTJtRCxjQUFnQixLQUFLcDFDLEdBQUd6SyxHQUFHLENBQUNnQyxFQUFFLENBQUNoQyxFQUFFaXhELEdBQUdqeEQsR0FBR3lLLEVBQUV1dUMsRUFBR3dpQixTQUFTLElBQUksSUFBSXozQyxFQUFFLEVBQUVBLEVBQUV0WixFQUFFcFAsT0FBTzBvQixJQUFJLElBQUkvakIsRUFBRSswQixJQUFJdHFCLEVBQUVzWixJQUFJLENBQUMvakIsR0FBRSxFQUFHLE1BQU1nQyxFQUFFaEMsR0FBRSxFQUFHeUssR0FBR3pLLEVBQUUsR0FBR3lLLEVBQUUsT0FBTyxLQUFzQixPQUFqQnpLLEVBQUVpQyxFQUFFazBELEdBQUdsMEQsR0FBR3dDLE9BQWN6QyxHQUFHLElBQUssU0FBV3kyRCxHQUFHejRELElBQUksU0FBU0EsRUFBRWkxRCxtQkFBZ0IwRixHQUFHMzZELEVBQUU0NkQsR0FBRzM0RCxFQUFFNDRELEdBQUcsTUFBSyxNQUFNLElBQUssT0FBT0EsR0FBR0QsR0FBR0QsR0FBRyxLQUFLLE1BQU0sSUFBSyxZQUFZRyxJQUFHLEVBQUcsTUFBTSxJQUFLLGNBQWMsSUFBSyxVQUFVLElBQUssVUFBVSxPQUFPQSxJQUFHLEVBQUdDLEdBQUc5aEUsRUFBRUMsR0FBRyxJQUFLLGtCQUFrQixHQUFHdWhFLEdBQUcsTUFDcmYsSUFBSyxVQUFVLElBQUssUUFBUSxPQUFPTSxHQUFHOWhFLEVBQUVDLEdBQUcsT0FBTyxPQUFPdWhELEVBQUdDLHVCQUF1QiwwSEFBMEhsK0MsTUFBTSxNQUFnQmk5QyxFQUFHMmMsR0FBRzFjLEVBQVRpTCxHQUFlaEwsRUFBR3djLEdBQUcxYixFQUFHRSx5QkFBeUIsQ0FBQzhnQixrQkFBa0I3TCxHQUFHOEwsc0JBQXNCdkIsR0FBR3dCLGtCQUFrQi9CLEdBQUdnQyxrQkFBa0JMLEdBQUdNLHVCQUF1QmxFLEtBQUssSUFBSXpHLElBQUksSUFBSTRLLEdBQUcsR0FBR0MsSUFBSSxFQUFFLFNBQVNub0IsR0FBRTV4QyxHQUFHLEVBQUUrNUQsS0FBSy81RCxFQUFFbXlDLFFBQVEybkIsR0FBR0MsSUFBSUQsR0FBR0MsSUFBSSxLQUFLQSxNQUNoZCxTQUFTN25CLEdBQUVseUMsRUFBRUMsR0FBRzg1RCxLQUFLRCxHQUFHQyxJQUFJLzVELEVBQUVteUMsUUFBUW55QyxFQUFFbXlDLFFBQVFseUMsRUFBRSxJQUFJKzVELEdBQUcsR0FBRzVuQixHQUFFLENBQUNELFFBQVE2bkIsSUFBSTNuQixHQUFFLENBQUNGLFNBQVEsR0FBSThuQixHQUFHRCxHQUFHLFNBQVNFLEdBQUdsNkQsRUFBRUMsR0FBRyxJQUFJaEosRUFBRStJLEVBQUV2RCxLQUFLb2pCLGFBQWEsSUFBSTVvQixFQUFFLE9BQU8raUUsR0FBRyxJQUFJOWlFLEVBQUU4SSxFQUFFNjRDLFVBQVUsR0FBRzNoRCxHQUFHQSxFQUFFaWpFLDhDQUE4Q2w2RCxFQUFFLE9BQU8vSSxFQUFFa2pFLDBDQUEwQyxJQUFTM3hELEVBQUx6SyxFQUFFLEdBQUssSUFBSXlLLEtBQUt4UixFQUFFK0csRUFBRXlLLEdBQUd4SSxFQUFFd0ksR0FBb0gsT0FBakh2UixLQUFJOEksRUFBRUEsRUFBRTY0QyxXQUFZc2hCLDRDQUE0Q2w2RCxFQUFFRCxFQUFFbzZELDBDQUEwQ3A4RCxHQUFVQSxFQUFFLFNBQVNzMEMsR0FBRXR5QyxHQUF5QixPQUFPLE9BQTdCQSxFQUFFQSxFQUFFMmYsbUJBQ3BjLFNBQVMwNkMsR0FBR3I2RCxHQUFHNHhDLEdBQUVTLElBQUtULEdBQUVRLElBQUssU0FBU2tvQixHQUFHdDZELEdBQUc0eEMsR0FBRVMsSUFBS1QsR0FBRVEsSUFBSyxTQUFTbW9CLEdBQUd2NkQsRUFBRUMsRUFBRWhKLEdBQUcsR0FBR203QyxHQUFFRCxVQUFVNm5CLEdBQUcsTUFBTTErRCxNQUFNcTFDLEVBQUUsTUFBTXVCLEdBQUVFLEdBQUVueUMsR0FBS2l5QyxHQUFFRyxHQUFFcDdDLEdBQUssU0FBU3VqRSxHQUFHeDZELEVBQUVDLEVBQUVoSixHQUFHLElBQUlDLEVBQUU4SSxFQUFFNjRDLFVBQWdDLEdBQXRCNzRDLEVBQUVDLEVBQUUwZixrQkFBcUIsbUJBQW9Cem9CLEVBQUV1akUsZ0JBQWdCLE9BQU94akUsRUFBd0IsSUFBSSxJQUFJK0csS0FBOUI5RyxFQUFFQSxFQUFFdWpFLGtCQUFpQyxLQUFLejhELEtBQUtnQyxHQUFHLE1BQU0xRSxNQUFNcTFDLEVBQUUsSUFBSXFKLEVBQUcvNUMsSUFBSSxVQUFVakMsSUFBSSxPQUFPM0YsRUFBRSxHQUFHcEIsRUFBRSxHQUFHQyxHQUFHLFNBQVN3akUsR0FBRzE2RCxHQUFHLElBQUlDLEVBQUVELEVBQUU2NEMsVUFBc0csT0FBNUY1NEMsRUFBRUEsR0FBR0EsRUFBRTA2RCwyQ0FBMkNYLEdBQUdDLEdBQUc3bkIsR0FBRUQsUUFBUUQsR0FBRUUsR0FBRW55QyxHQUFLaXlDLEdBQUVHLEdBQUVBLEdBQUVGLFVBQWlCLEVBQ2xlLFNBQVN5b0IsR0FBRzU2RCxFQUFFQyxFQUFFaEosR0FBRyxJQUFJQyxFQUFFOEksRUFBRTY0QyxVQUFVLElBQUkzaEQsRUFBRSxNQUFNb0UsTUFBTXExQyxFQUFFLE1BQU0xNUMsR0FBR2dKLEVBQUV1NkQsR0FBR3g2RCxFQUFFQyxFQUFFZzZELElBQUkvaUUsRUFBRXlqRSwwQ0FBMEMxNkQsRUFBRTJ4QyxHQUFFUyxJQUFLVCxHQUFFUSxJQUFLRixHQUFFRSxHQUFFbnlDLElBQU0yeEMsR0FBRVMsSUFBS0gsR0FBRUcsR0FBRXA3QyxHQUNoSyxJQUFJNGpFLEdBQUducUIsRUFBRW9TLHlCQUF5QmdZLEdBQUdwcUIsRUFBRTZTLDBCQUEwQndYLEdBQUdycUIsRUFBRXNxQix3QkFBd0JDLEdBQUd2cUIsRUFBRXdxQixxQkFBcUJDLEdBQUd6cUIsRUFBRTBxQixzQkFBc0JDLEdBQUczcUIsRUFBRTRxQixhQUFhQyxHQUFHN3FCLEVBQUU4cUIsaUNBQWlDQyxHQUFHL3FCLEVBQUVnckIsMkJBQTJCQyxHQUFHanJCLEVBQUVxZCw4QkFBOEI2TixHQUFHbHJCLEVBQUU4Uyx3QkFBd0JxWSxHQUFHbnJCLEVBQUVvckIscUJBQXFCQyxHQUFHcnJCLEVBQUVzckIsc0JBQXNCQyxHQUFHLEdBQUdDLFFBQUcsSUFBU2YsR0FBR0EsR0FBRyxhQUFhZ0IsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLElBQUcsRUFBR0MsR0FBR2pCLEtBQUtrQixHQUFHLElBQUlELEdBQUdqQixHQUFHLFdBQVcsT0FBT0EsS0FBS2lCLElBQ3ZjLFNBQVNFLEtBQUssT0FBT2pCLE1BQU0sS0FBS0UsR0FBRyxPQUFPLEdBQUcsS0FBS0UsR0FBRyxPQUFPLEdBQUcsS0FBS0MsR0FBRyxPQUFPLEdBQUcsS0FBS0MsR0FBRyxPQUFPLEdBQUcsS0FBS0UsR0FBRyxPQUFPLEdBQUcsUUFBUSxNQUFNemdFLE1BQU1xMUMsRUFBRSxPQUFRLFNBQVM4ckIsR0FBR3o4RCxHQUFHLE9BQU9BLEdBQUcsS0FBSyxHQUFHLE9BQU95N0QsR0FBRyxLQUFLLEdBQUcsT0FBT0UsR0FBRyxLQUFLLEdBQUcsT0FBT0MsR0FBRyxLQUFLLEdBQUcsT0FBT0MsR0FBRyxLQUFLLEdBQUcsT0FBT0UsR0FBRyxRQUFRLE1BQU16Z0UsTUFBTXExQyxFQUFFLE9BQVEsU0FBUytyQixHQUFHMThELEVBQUVDLEdBQVcsT0FBUkQsRUFBRXk4RCxHQUFHejhELEdBQVU2NkQsR0FBRzc2RCxFQUFFQyxHQUFHLFNBQVMwOEQsR0FBRzM4RCxFQUFFQyxFQUFFaEosR0FBVyxPQUFSK0ksRUFBRXk4RCxHQUFHejhELEdBQVU4NkQsR0FBRzk2RCxFQUFFQyxFQUFFaEosR0FBRyxTQUFTMmxFLEdBQUc1OEQsR0FBOEMsT0FBM0MsT0FBT204RCxJQUFJQSxHQUFHLENBQUNuOEQsR0FBR284RCxHQUFHdEIsR0FBR1csR0FBR29CLEtBQUtWLEdBQUdoZ0UsS0FBSzZELEdBQVVpOEQsR0FBRyxTQUFTYSxLQUFLLEdBQUcsT0FBT1YsR0FBRyxDQUFDLElBQUlwOEQsRUFBRW84RCxHQUFHQSxHQUFHLEtBQUtyQixHQUFHLzZELEdBQUc2OEQsS0FDL2UsU0FBU0EsS0FBSyxJQUFJUixJQUFJLE9BQU9GLEdBQUcsQ0FBQ0UsSUFBRyxFQUFHLElBQUlyOEQsRUFBRSxFQUFFLElBQUksSUFBSUMsRUFBRWs4RCxHQUFHTyxHQUFHLElBQUcsV0FBVyxLQUFLMThELEVBQUVDLEVBQUU1RyxPQUFPMkcsSUFBSSxDQUFDLElBQUkvSSxFQUFFZ0osRUFBRUQsR0FBRyxHQUFHL0ksRUFBRUEsR0FBRSxTQUFVLE9BQU9BLE9BQU1rbEUsR0FBRyxLQUFLLE1BQU1sbEUsR0FBRyxNQUFNLE9BQU9rbEUsS0FBS0EsR0FBR0EsR0FBR3JnRSxNQUFNa0UsRUFBRSxJQUFJODZELEdBQUdXLEdBQUdxQixJQUFJN2xFLEVBQUcsUUFBUW9sRSxJQUFHLElBQUssSUFBSVUsR0FBRyxFQUFFLFNBQVNDLEdBQUdoOUQsRUFBRUMsRUFBRWhKLEdBQVMsT0FBTyxZQUFzQyxJQUF4QixXQUFXK0ksRUFBRUMsRUFBRSxLQUExQ2hKLEdBQUcsSUFBNkMsSUFBTUEsRUFBRSxTQUFTZ21FLEdBQUdqOUQsRUFBRUMsR0FBRyxHQUFHRCxHQUFHQSxFQUFFOGYsYUFBeUMsSUFBSSxJQUFJN29CLEtBQW5DZ0osRUFBRTVILEVBQUUsR0FBRzRILEdBQUdELEVBQUVBLEVBQUU4ZixrQkFBNEIsSUFBUzdmLEVBQUVoSixLQUFLZ0osRUFBRWhKLEdBQUcrSSxFQUFFL0ksSUFBSSxPQUFPZ0osRUFBRSxJQUFJaTlELEdBQUcsQ0FBQy9xQixRQUFRLE1BQU1nckIsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsS0FBSyxTQUFTQyxLQUFLRCxHQUFHRCxHQUFHRCxHQUFHLEtBQzNlLFNBQVNJLEdBQUd2OUQsRUFBRUMsR0FBRyxJQUFJaEosRUFBRStJLEVBQUV2RCxLQUFLZzRDLFNBQVN2QyxHQUFFZ3JCLEdBQUdqbUUsRUFBRW05QyxlQUFpQm45QyxFQUFFbTlDLGNBQWNuMEMsRUFBRSxTQUFTdTlELEdBQUd4OUQsR0FBRyxJQUFJQyxFQUFFaTlELEdBQUcvcUIsUUFBUVAsR0FBRXNyQixJQUFNbDlELEVBQUV2RCxLQUFLZzRDLFNBQVNMLGNBQWNuMEMsRUFBRSxTQUFTdzlELEdBQUd6OUQsRUFBRUMsR0FBRyxLQUFLLE9BQU9ELEdBQUcsQ0FBQyxJQUFJL0ksRUFBRStJLEVBQUUyZ0QsVUFBVSxHQUFHM2dELEVBQUUwOUQsb0JBQW9CejlELEVBQUVELEVBQUUwOUQsb0JBQW9CejlELEVBQUUsT0FBT2hKLEdBQUdBLEVBQUV5bUUsb0JBQW9CejlELElBQUloSixFQUFFeW1FLG9CQUFvQno5RCxPQUFRLE1BQUcsT0FBT2hKLEdBQUdBLEVBQUV5bUUsb0JBQW9CejlELEdBQStCLE1BQTdCaEosRUFBRXltRSxvQkFBb0J6OUQsRUFBYUQsRUFBRUEsRUFBRXU2QyxRQUM3WSxTQUFTb2pCLEdBQUczOUQsRUFBRUMsR0FBR2s5RCxHQUFHbjlELEVBQUVxOUQsR0FBR0QsR0FBRyxLQUFzQixRQUFqQnA5RCxFQUFFQSxFQUFFaTNDLGVBQXVCLE9BQU9qM0MsRUFBRTQ5RCxlQUFlNTlELEVBQUU2OUQsZ0JBQWdCNTlELElBQUk2OUQsSUFBRyxHQUFJOTlELEVBQUU0OUQsYUFBYSxNQUFNLFNBQVNHLEdBQUcvOUQsRUFBRUMsR0FBRyxHQUFHbzlELEtBQUtyOUQsSUFBRyxJQUFLQyxHQUFHLElBQUlBLEVBQW1HLEdBQTdGLGlCQUFrQkEsR0FBRyxhQUFhQSxJQUFFbzlELEdBQUdyOUQsRUFBRUMsRUFBRSxZQUFXQSxFQUFFLENBQUN3eEMsUUFBUXp4QyxFQUFFZytELGFBQWEvOUQsRUFBRWhELEtBQUssTUFBUyxPQUFPbWdFLEdBQUcsQ0FBQyxHQUFHLE9BQU9ELEdBQUcsTUFBTTdoRSxNQUFNcTFDLEVBQUUsTUFBTXlzQixHQUFHbjlELEVBQUVrOUQsR0FBR2xtQixhQUFhLENBQUM0bUIsZUFBZSxFQUFFRCxhQUFhMzlELEVBQUVnK0QsV0FBVyxXQUFXYixHQUFHQSxHQUFHbmdFLEtBQUtnRCxFQUFFLE9BQU9ELEVBQUVvMEMsY0FBYyxJQUFJOHBCLElBQUcsRUFDdmIsU0FBU0MsR0FBR24rRCxHQUFHLE1BQU0sQ0FBQ28rRCxVQUFVcCtELEVBQUVxK0QsWUFBWSxLQUFLQyxXQUFXLEtBQUtDLG9CQUFvQixLQUFLQyxtQkFBbUIsS0FBS0MsWUFBWSxLQUFLQyxXQUFXLEtBQUtDLG9CQUFvQixLQUFLQyxtQkFBbUIsTUFBTSxTQUFTQyxHQUFHNytELEdBQUcsTUFBTSxDQUFDbytELFVBQVVwK0QsRUFBRW8rRCxVQUFVQyxZQUFZcitELEVBQUVxK0QsWUFBWUMsV0FBV3QrRCxFQUFFcytELFdBQVdDLG9CQUFvQixLQUFLQyxtQkFBbUIsS0FBS0MsWUFBWSxLQUFLQyxXQUFXLEtBQUtDLG9CQUFvQixLQUFLQyxtQkFBbUIsTUFDbmEsU0FBU0UsR0FBRzkrRCxFQUFFQyxHQUFHLE1BQU0sQ0FBQzQ5RCxlQUFlNzlELEVBQUUrK0QsZUFBZTkrRCxFQUFFaTZDLElBQUksRUFBRTN6QixRQUFRLEtBQUs1YSxTQUFTLEtBQUsxTyxLQUFLLEtBQUsraEUsV0FBVyxNQUFNLFNBQVNDLEdBQUdqL0QsRUFBRUMsR0FBRyxPQUFPRCxFQUFFcytELFdBQVd0K0QsRUFBRXErRCxZQUFZcitELEVBQUVzK0QsV0FBV3IrRCxHQUFHRCxFQUFFcytELFdBQVdyaEUsS0FBS2dELEVBQUVELEVBQUVzK0QsV0FBV3IrRCxHQUMxTixTQUFTaS9ELEdBQUdsL0QsRUFBRUMsR0FBRyxJQUFJaEosRUFBRStJLEVBQUUyZ0QsVUFBVSxHQUFHLE9BQU8xcEQsRUFBRSxDQUFDLElBQUlDLEVBQUU4SSxFQUFFbS9ELFlBQWdCbmhFLEVBQUUsS0FBSyxPQUFPOUcsSUFBSUEsRUFBRThJLEVBQUVtL0QsWUFBWWhCLEdBQUduK0QsRUFBRThnRCxxQkFBcUI1cEQsRUFBRThJLEVBQUVtL0QsWUFBWW5oRSxFQUFFL0csRUFBRWtvRSxZQUFZLE9BQU9qb0UsRUFBRSxPQUFPOEcsR0FBRzlHLEVBQUU4SSxFQUFFbS9ELFlBQVloQixHQUFHbitELEVBQUU4Z0QsZUFBZTlpRCxFQUFFL0csRUFBRWtvRSxZQUFZaEIsR0FBR2xuRSxFQUFFNnBELGdCQUFnQjVwRCxFQUFFOEksRUFBRW0vRCxZQUFZTixHQUFHN2dFLEdBQUcsT0FBT0EsSUFBSUEsRUFBRS9HLEVBQUVrb0UsWUFBWU4sR0FBRzNuRSxJQUFJLE9BQU84RyxHQUFHOUcsSUFBSThHLEVBQUVpaEUsR0FBRy9uRSxFQUFFK0ksR0FBRyxPQUFPL0ksRUFBRW9uRSxZQUFZLE9BQU90Z0UsRUFBRXNnRSxZQUFZVyxHQUFHL25FLEVBQUUrSSxHQUFHZy9ELEdBQUdqaEUsRUFBRWlDLEtBQUtnL0QsR0FBRy9uRSxFQUFFK0ksR0FBR2pDLEVBQUVzZ0UsV0FBV3IrRCxHQUNqYSxTQUFTbS9ELEdBQUdwL0QsRUFBRUMsR0FBRyxJQUFJaEosRUFBRStJLEVBQUVtL0QsWUFBaUUsUUFBckRsb0UsRUFBRSxPQUFPQSxFQUFFK0ksRUFBRW0vRCxZQUFZaEIsR0FBR24rRCxFQUFFOGdELGVBQWV1ZSxHQUFHci9ELEVBQUUvSSxJQUFZdW5FLG1CQUFtQnZuRSxFQUFFc25FLG9CQUFvQnRuRSxFQUFFdW5FLG1CQUFtQnYrRCxHQUFHaEosRUFBRXVuRSxtQkFBbUJ2aEUsS0FBS2dELEVBQUVoSixFQUFFdW5FLG1CQUFtQnYrRCxHQUFHLFNBQVNvL0QsR0FBR3IvRCxFQUFFQyxHQUFHLElBQUloSixFQUFFK0ksRUFBRTJnRCxVQUErRCxPQUFyRCxPQUFPMXBELEdBQUdnSixJQUFJaEosRUFBRWtvRSxjQUFjbC9ELEVBQUVELEVBQUVtL0QsWUFBWU4sR0FBRzUrRCxJQUFXQSxFQUN2VCxTQUFTcS9ELEdBQUd0L0QsRUFBRUMsRUFBRWhKLEVBQUVDLEVBQUU4RyxFQUFFeUssR0FBRyxPQUFPeFIsRUFBRWlqRCxLQUFLLEtBQUssRUFBRSxNQUFtQixtQkFBWmw2QyxFQUFFL0ksRUFBRXN2QixTQUE4QnZtQixFQUFFakosS0FBSzBSLEVBQUV2UixFQUFFOEcsR0FBR2dDLEVBQUUsS0FBSyxFQUFFQSxFQUFFNGdELFdBQXVCLEtBQWI1Z0QsRUFBRTRnRCxVQUFnQixHQUFHLEtBQUssRUFBc0QsR0FBRyxPQUEzQzVpRCxFQUFFLG1CQUFkZ0MsRUFBRS9JLEVBQUVzdkIsU0FBZ0N2bUIsRUFBRWpKLEtBQUswUixFQUFFdlIsRUFBRThHLEdBQUdnQyxHQUEwQixNQUFNLE9BQU8zSCxFQUFFLEdBQUduQixFQUFFOEcsR0FBRyxLQUFLLEVBQUVrZ0UsSUFBRyxFQUFHLE9BQU9obkUsRUFDN1EsU0FBU3FvRSxHQUFHdi9ELEVBQUVDLEVBQUVoSixFQUFFQyxFQUFFOEcsR0FBR2tnRSxJQUFHLEVBQWEsSUFBSSxJQUFJejFELEdBQWxCeEksRUFBRW8vRCxHQUFHci9ELEVBQUVDLElBQWVtK0QsVUFBVXI4QyxFQUFFLEtBQUt5dUIsRUFBRSxFQUFFdEMsRUFBRWp1QyxFQUFFbytELFlBQVl4bkUsRUFBRTRSLEVBQUUsT0FBT3lsQyxHQUFHLENBQUMsSUFBSWwzQyxFQUFFazNDLEVBQUUydkIsZUFBZTdtRSxFQUFFZ0gsR0FBRyxPQUFPK2pCLElBQUlBLEVBQUVtc0IsRUFBRXpsQyxFQUFFNVIsR0FBRzI1QyxFQUFFeDVDLElBQUl3NUMsRUFBRXg1QyxLQUFLd29FLEdBQUd4b0UsRUFBRWszQyxFQUFFNndCLGdCQUFnQmxvRSxFQUFFeW9FLEdBQUd0L0QsRUFBRUMsRUFBRWl1QyxFQUFFcjNDLEVBQUVJLEVBQUVDLEdBQUcsT0FBT2czQyxFQUFFdmlDLFdBQVczTCxFQUFFNGdELFdBQVcsR0FBRzFTLEVBQUU4d0IsV0FBVyxLQUFLLE9BQU8vK0QsRUFBRXkrRCxXQUFXeitELEVBQUV3K0QsWUFBWXgrRCxFQUFFeStELFdBQVd4d0IsR0FBR2p1QyxFQUFFeStELFdBQVdNLFdBQVc5d0IsRUFBRWp1QyxFQUFFeStELFdBQVd4d0IsS0FBS0EsRUFBRUEsRUFBRWp4QyxLQUFZLElBQVBqRyxFQUFFLEtBQVNrM0MsRUFBRWp1QyxFQUFFcytELG9CQUFvQixPQUFPcndCLEdBQUcsQ0FBQyxJQUFJZ0QsRUFBRWhELEVBQUUydkIsZUFBZTNzQixFQUFFbHpDLEdBQUcsT0FBT2hILElBQUlBLEVBQUVrM0MsRUFBRSxPQUFPbnNCLElBQUl0WixFQUFFNVIsSUFBSTI1QyxFQUFFVSxJQUFJVixFQUFFVSxLQUFLcjZDLEVBQUV5b0UsR0FBR3QvRCxFQUFFQyxFQUFFaXVDLEVBQUVyM0MsRUFBRUksRUFBRUMsR0FBRyxPQUNuZmczQyxFQUFFdmlDLFdBQVczTCxFQUFFNGdELFdBQVcsR0FBRzFTLEVBQUU4d0IsV0FBVyxLQUFLLE9BQU8vK0QsRUFBRTIrRCxtQkFBbUIzK0QsRUFBRTArRCxvQkFBb0IxK0QsRUFBRTIrRCxtQkFBbUIxd0IsR0FBR2p1QyxFQUFFMitELG1CQUFtQkksV0FBVzl3QixFQUFFanVDLEVBQUUyK0QsbUJBQW1CMXdCLEtBQUtBLEVBQUVBLEVBQUVqeEMsS0FBSyxPQUFPOGtCLElBQUk5aEIsRUFBRXErRCxXQUFXLE1BQU0sT0FBT3RuRSxFQUFFaUosRUFBRXUrRCxtQkFBbUIsS0FBS3grRCxFQUFFNGdELFdBQVcsR0FBRyxPQUFPNytCLEdBQUcsT0FBTy9xQixJQUFJeVIsRUFBRTVSLEdBQUdvSixFQUFFbStELFVBQVUzMUQsRUFBRXhJLEVBQUVvK0QsWUFBWXQ4QyxFQUFFOWhCLEVBQUVzK0Qsb0JBQW9Cdm5FLEVBQUV5b0UsR0FBR2p2QixHQUFHeHdDLEVBQUU2OUQsZUFBZXJ0QixFQUFFeHdDLEVBQUU4Z0QsY0FBY2pxRCxFQUN4WSxTQUFTNm9FLEdBQUcxL0QsRUFBRUMsRUFBRWhKLEdBQUcsT0FBT2dKLEVBQUVzK0Qsc0JBQXNCLE9BQU90K0QsRUFBRXErRCxhQUFhcitELEVBQUVxK0QsV0FBV3JoRSxLQUFLZ0QsRUFBRXMrRCxvQkFBb0J0K0QsRUFBRXErRCxXQUFXcitELEVBQUV1K0Qsb0JBQW9CditELEVBQUVzK0Qsb0JBQW9CdCtELEVBQUV1K0QsbUJBQW1CLE1BQU1tQixHQUFHMS9ELEVBQUV3K0QsWUFBWXhuRSxHQUFHZ0osRUFBRXcrRCxZQUFZeCtELEVBQUV5K0QsV0FBVyxLQUFLaUIsR0FBRzEvRCxFQUFFMCtELG9CQUFvQjFuRSxHQUFHZ0osRUFBRTArRCxvQkFBb0IxK0QsRUFBRTIrRCxtQkFBbUIsS0FBSyxTQUFTZSxHQUFHMy9ELEVBQUVDLEdBQUcsS0FBSyxPQUFPRCxHQUFHLENBQUMsSUFBSS9JLEVBQUUrSSxFQUFFMkwsU0FBUyxHQUFHLE9BQU8xVSxFQUFFLENBQUMrSSxFQUFFMkwsU0FBUyxLQUFLLElBQUl6VSxFQUFFK0ksRUFBRSxHQUFHLG1CQUFvQmhKLEVBQUUsTUFBTXFFLE1BQU1xMUMsRUFBRSxJQUFJMTVDLElBQUlBLEVBQUVGLEtBQUtHLEdBQUc4SSxFQUFFQSxFQUFFZy9ELFlBQ3hkLElBQUlZLEdBQUc3bUIsRUFBRzdDLHdCQUF3QjJwQixJQUFHLElBQUsvdUIsRUFBR2tELFdBQVczdEMsS0FBSyxTQUFTeTVELEdBQUc5L0QsRUFBRUMsRUFBRWhKLEVBQUVDLEdBQThCRCxFQUFFLE9BQVhBLEVBQUVBLEVBQUVDLEVBQXRCK0ksRUFBRUQsRUFBRThnRCxnQkFBOEM3Z0QsRUFBRTVILEVBQUUsR0FBRzRILEVBQUVoSixHQUFHK0ksRUFBRThnRCxjQUFjN3BELEVBQWtCLFFBQWhCQyxFQUFFOEksRUFBRW0vRCxjQUFzQixJQUFJbi9ELEVBQUU2OUQsaUJBQWlCM21FLEVBQUVrbkUsVUFBVW5uRSxHQUMvTixJQUFJOG9FLEdBQUcsQ0FBQzV1QixVQUFVLFNBQVNueEMsR0FBRyxTQUFPQSxFQUFFQSxFQUFFZ2dFLHNCQUFxQnRmLEdBQUcxZ0QsS0FBS0EsR0FBTXN4QyxnQkFBZ0IsU0FBU3R4QyxFQUFFQyxFQUFFaEosR0FBRytJLEVBQUVBLEVBQUVnZ0Usb0JBQW9CLElBQUk5b0UsRUFBRStvRSxLQUFLamlFLEVBQUU0aEUsR0FBR3pwQixVQUFxQm40QyxFQUFFOGdFLEdBQWQ1bkUsRUFBRWdwRSxHQUFHaHBFLEVBQUU4SSxFQUFFaEMsR0FBVUEsSUFBS3VvQixRQUFRdG1CLEVBQUUsTUFBU2hKLElBQWMrRyxFQUFFMk4sU0FBUzFVLEdBQUdpb0UsR0FBR2wvRCxFQUFFaEMsR0FBR21pRSxHQUFHbmdFLEVBQUU5SSxJQUFJbTZDLG9CQUFvQixTQUFTcnhDLEVBQUVDLEVBQUVoSixHQUFHK0ksRUFBRUEsRUFBRWdnRSxvQkFBb0IsSUFBSTlvRSxFQUFFK29FLEtBQUtqaUUsRUFBRTRoRSxHQUFHenBCLFVBQXFCbjRDLEVBQUU4Z0UsR0FBZDVuRSxFQUFFZ3BFLEdBQUdocEUsRUFBRThJLEVBQUVoQyxHQUFVQSxJQUFLazhDLElBQUksRUFBRWw4QyxFQUFFdW9CLFFBQVF0bUIsRUFBRSxNQUFTaEosSUFBYytHLEVBQUUyTixTQUFTMVUsR0FBR2lvRSxHQUFHbC9ELEVBQUVoQyxHQUFHbWlFLEdBQUduZ0UsRUFBRTlJLElBQUlrNkMsbUJBQW1CLFNBQVNweEMsRUFBRUMsR0FBR0QsRUFBRUEsRUFBRWdnRSxvQkFBb0IsSUFBSS9vRSxFQUFFZ3BFLEtBQUsvb0UsRUFBRTBvRSxHQUFHenBCLFVBQ3Zlai9DLEVBQUU0bkUsR0FBZDduRSxFQUFFaXBFLEdBQUdqcEUsRUFBRStJLEVBQUU5SSxHQUFVQSxJQUFLZ2pELElBQUksRUFBRSxNQUFTajZDLElBQWMvSSxFQUFFeVUsU0FBUzFMLEdBQUdpL0QsR0FBR2wvRCxFQUFFOUksR0FBR2lwRSxHQUFHbmdFLEVBQUUvSSxLQUFLLFNBQVNtcEUsR0FBR3BnRSxFQUFFQyxFQUFFaEosRUFBRUMsRUFBRThHLEVBQUV5SyxFQUFFc1osR0FBaUIsTUFBTSxtQkFBcEIvaEIsRUFBRUEsRUFBRTY0QyxXQUFzQ3duQixzQkFBc0JyZ0UsRUFBRXFnRSxzQkFBc0JucEUsRUFBRXVSLEVBQUVzWixJQUFHOWhCLEVBQUV6SCxZQUFXeUgsRUFBRXpILFVBQVV5NUMsd0JBQXNCdW1CLEdBQUd2aEUsRUFBRUMsS0FBS3NoRSxHQUFHeDZELEVBQUV5SyxJQUM3USxTQUFTNjNELEdBQUd0Z0UsRUFBRUMsRUFBRWhKLEdBQUcsSUFBSUMsR0FBRSxFQUFHOEcsRUFBRWc4RCxHQUFPdnhELEVBQUV4SSxFQUFFMmYsWUFBOFcsTUFBbFcsaUJBQWtCblgsR0FBRyxPQUFPQSxFQUFFQSxFQUFFczFELEdBQUd0MUQsSUFBSXpLLEVBQUVzMEMsR0FBRXJ5QyxHQUFHZzZELEdBQUc3bkIsR0FBRUQsUUFBeUIxcEMsR0FBR3ZSLEVBQUUsT0FBdEJBLEVBQUUrSSxFQUFFNGYsZUFBd0NxNkMsR0FBR2w2RCxFQUFFaEMsR0FBR2c4RCxJQUFJLzVELEVBQUUsSUFBSUEsRUFBRWhKLEVBQUV3UixHQUFHekksRUFBRThnRCxjQUFjLE9BQU83Z0QsRUFBRWhDLFlBQU8sSUFBU2dDLEVBQUVoQyxNQUFNZ0MsRUFBRWhDLE1BQU0sS0FBS2dDLEVBQUV5eEMsUUFBUXF1QixHQUFHLy9ELEVBQUU2NEMsVUFBVTU0QyxFQUFFQSxFQUFFKy9ELG9CQUFvQmhnRSxFQUFFOUksS0FBSThJLEVBQUVBLEVBQUU2NEMsV0FBWXNoQiw0Q0FBNENuOEQsRUFBRWdDLEVBQUVvNkQsMENBQTBDM3hELEdBQVV4SSxFQUM5WixTQUFTc2dFLEdBQUd2Z0UsRUFBRUMsRUFBRWhKLEVBQUVDLEdBQUc4SSxFQUFFQyxFQUFFaEMsTUFBTSxtQkFBb0JnQyxFQUFFdWdFLDJCQUEyQnZnRSxFQUFFdWdFLDBCQUEwQnZwRSxFQUFFQyxHQUFHLG1CQUFvQitJLEVBQUV3Z0Usa0NBQWtDeGdFLEVBQUV3Z0UsaUNBQWlDeHBFLEVBQUVDLEdBQUcrSSxFQUFFaEMsUUFBUStCLEdBQUcrL0QsR0FBRzF1QixvQkFBb0JweEMsRUFBRUEsRUFBRWhDLE1BQU0sTUFDL1AsU0FBU3lpRSxHQUFHMWdFLEVBQUVDLEVBQUVoSixFQUFFQyxHQUFHLElBQUk4RyxFQUFFZ0MsRUFBRTY0QyxVQUFVNzZDLEVBQUU1RSxNQUFNbkMsRUFBRStHLEVBQUVDLE1BQU0rQixFQUFFOGdELGNBQWM5aUQsRUFBRXFJLEtBQUt3NUQsR0FBRyxJQUFJcDNELEVBQUV4SSxFQUFFMmYsWUFBWSxpQkFBa0JuWCxHQUFHLE9BQU9BLEVBQUV6SyxFQUFFeXpDLFFBQVFzc0IsR0FBR3QxRCxJQUFJQSxFQUFFNnBDLEdBQUVyeUMsR0FBR2c2RCxHQUFHN25CLEdBQUVELFFBQVFuMEMsRUFBRXl6QyxRQUFReW9CLEdBQUdsNkQsRUFBRXlJLElBQW9CLFFBQWhCQSxFQUFFekksRUFBRW0vRCxlQUF1QkksR0FBR3YvRCxFQUFFeUksRUFBRXhSLEVBQUUrRyxFQUFFOUcsR0FBRzhHLEVBQUVDLE1BQU0rQixFQUFFOGdELGVBQTRDLG1CQUE3QnI0QyxFQUFFeEksRUFBRWlnQiw0QkFBaUQ0L0MsR0FBRzkvRCxFQUFFQyxFQUFFd0ksRUFBRXhSLEdBQUcrRyxFQUFFQyxNQUFNK0IsRUFBRThnRCxlQUFlLG1CQUFvQjdnRCxFQUFFaWdCLDBCQUEwQixtQkFBb0JsaUIsRUFBRTJpRSx5QkFBeUIsbUJBQW9CM2lFLEVBQUU0aUUsMkJBQTJCLG1CQUNsZTVpRSxFQUFFNmlFLHFCQUFxQjVnRSxFQUFFakMsRUFBRUMsTUFBTSxtQkFBb0JELEVBQUU2aUUsb0JBQW9CN2lFLEVBQUU2aUUscUJBQXFCLG1CQUFvQjdpRSxFQUFFNGlFLDJCQUEyQjVpRSxFQUFFNGlFLDRCQUE0QjNnRSxJQUFJakMsRUFBRUMsT0FBTzhoRSxHQUFHMXVCLG9CQUFvQnJ6QyxFQUFFQSxFQUFFQyxNQUFNLE1BQXNCLFFBQWhCd0ssRUFBRXpJLEVBQUVtL0QsZUFBdUJJLEdBQUd2L0QsRUFBRXlJLEVBQUV4UixFQUFFK0csRUFBRTlHLEdBQUc4RyxFQUFFQyxNQUFNK0IsRUFBRThnRCxnQkFBZ0IsbUJBQW9COWlELEVBQUU4aUUsb0JBQW9COWdFLEVBQUU0Z0QsV0FBVyxHQUFHLElBQUltZ0IsR0FBR2xoRSxNQUFNbUIsUUFDdFgsU0FBU2dnRSxHQUFHaGhFLEVBQUVDLEVBQUVoSixHQUFXLEdBQUcsUUFBWCtJLEVBQUUvSSxFQUFFczdDLE1BQWlCLG1CQUFvQnZ5QyxHQUFHLGlCQUFrQkEsRUFBRSxDQUFDLEdBQUcvSSxFQUFFMjdDLE9BQU8sQ0FBWSxHQUFYMzdDLEVBQUVBLEVBQUUyN0MsT0FBWSxDQUFDLEdBQUcsSUFBSTM3QyxFQUFFaWpELElBQUksTUFBTTUrQyxNQUFNcTFDLEVBQUUsTUFBTSxJQUFJejVDLEVBQUVELEVBQUU0aEQsVUFBVSxJQUFJM2hELEVBQUUsTUFBTW9FLE1BQU1xMUMsRUFBRSxJQUFJM3dDLElBQUksSUFBSWhDLEVBQUUsR0FBR2dDLEVBQUUsT0FBRyxPQUFPQyxHQUFHLE9BQU9BLEVBQUVzeUMsS0FBSyxtQkFBb0J0eUMsRUFBRXN5QyxLQUFLdHlDLEVBQUVzeUMsSUFBSTB1QixhQUFhampFLEVBQVNpQyxFQUFFc3lDLE1BQUl0eUMsRUFBRSxTQUFTRCxHQUFHLElBQUlDLEVBQUUvSSxFQUFFbVAsS0FBS3BHLElBQUk0L0QsS0FBSzUvRCxFQUFFL0ksRUFBRW1QLEtBQUssSUFBSSxPQUFPckcsU0FBU0MsRUFBRWpDLEdBQUdpQyxFQUFFakMsR0FBR2dDLElBQUtpaEUsV0FBV2pqRSxFQUFTaUMsR0FBRSxHQUFHLGlCQUFrQkQsRUFBRSxNQUFNMUUsTUFBTXExQyxFQUFFLE1BQU0sSUFBSTE1QyxFQUFFMjdDLE9BQU8sTUFBTXQzQyxNQUFNcTFDLEVBQUUsSUFBSTN3QyxJQUFLLE9BQU9BLEVBQ2hlLFNBQVNraEUsR0FBR2xoRSxFQUFFQyxHQUFHLEdBQUcsYUFBYUQsRUFBRXZELEtBQUssTUFBTW5CLE1BQU1xMUMsRUFBRSxHQUFHLG9CQUFvQnI1QyxPQUFPa0IsVUFBVThCLFNBQVN2RCxLQUFLa0osR0FBRyxxQkFBcUIzSSxPQUFPb0csS0FBS3VDLEdBQUd4RixLQUFLLE1BQU0sSUFBSXdGLEVBQUUsS0FDcEssU0FBU2toRSxHQUFHbmhFLEdBQUcsU0FBU0MsRUFBRUEsRUFBRWhKLEdBQUcsR0FBRytJLEVBQUUsQ0FBQyxJQUFJOUksRUFBRStJLEVBQUV5K0QsV0FBVyxPQUFPeG5FLEdBQUdBLEVBQUU4bkUsV0FBVy9uRSxFQUFFZ0osRUFBRXkrRCxXQUFXem5FLEdBQUdnSixFQUFFdytELFlBQVl4K0QsRUFBRXkrRCxXQUFXem5FLEVBQUVBLEVBQUUrbkUsV0FBVyxLQUFLL25FLEVBQUUycEQsVUFBVSxHQUFHLFNBQVMzcEQsRUFBRUEsRUFBRUMsR0FBRyxJQUFJOEksRUFBRSxPQUFPLEtBQUssS0FBSyxPQUFPOUksR0FBRytJLEVBQUVoSixFQUFFQyxHQUFHQSxFQUFFQSxFQUFFaXFELFFBQVEsT0FBTyxLQUFLLFNBQVNqcUQsRUFBRThJLEVBQUVDLEdBQUcsSUFBSUQsRUFBRSxJQUFJbzdDLElBQUksT0FBT243QyxHQUFHLE9BQU9BLEVBQUU5SCxJQUFJNkgsRUFBRXFlLElBQUlwZSxFQUFFOUgsSUFBSThILEdBQUdELEVBQUVxZSxJQUFJcGUsRUFBRTdELE1BQU02RCxHQUFHQSxFQUFFQSxFQUFFa2hELFFBQVEsT0FBT25oRCxFQUFFLFNBQVNoQyxFQUFFZ0MsRUFBRUMsRUFBRWhKLEdBQXdDLE9BQXJDK0ksRUFBRW9oRSxHQUFHcGhFLEVBQUVDLElBQU83RCxNQUFNLEVBQUU0RCxFQUFFbWhELFFBQVEsS0FBWW5oRCxFQUFFLFNBQVN5SSxFQUFFeEksRUFBRWhKLEVBQUVDLEdBQWEsT0FBVitJLEVBQUU3RCxNQUFNbEYsRUFBTThJLEVBQTRCLFFBQWpCOUksRUFBRStJLEVBQUUwZ0QsWUFBNkJ6cEQsRUFBRUEsRUFBRWtGLE9BQVFuRixHQUFHZ0osRUFBRTJnRCxVQUN0ZixFQUFFM3BELEdBQUdDLEdBQUUrSSxFQUFFMmdELFVBQVUsRUFBUzNwRCxHQURzYUEsRUFDcGEsU0FBUzhxQixFQUFFOWhCLEdBQTBDLE9BQXZDRCxHQUFHLE9BQU9DLEVBQUUwZ0QsWUFBWTFnRCxFQUFFMmdELFVBQVUsR0FBVTNnRCxFQUFFLFNBQVN1d0MsRUFBRXh3QyxFQUFFQyxFQUFFaEosRUFBRUMsR0FBRyxPQUFHLE9BQU8rSSxHQUFHLElBQUlBLEVBQUVpNkMsTUFBV2o2QyxFQUFFb2hFLEdBQUdwcUUsRUFBRStJLEVBQUVqSSxLQUFLYixJQUFLcWpELE9BQU92NkMsRUFBRUMsS0FBRUEsRUFBRWpDLEVBQUVpQyxFQUFFaEosSUFBT3NqRCxPQUFPdjZDLEVBQVNDLEdBQUUsU0FBU2l1QyxFQUFFbHVDLEVBQUVDLEVBQUVoSixFQUFFQyxHQUFHLE9BQUcsT0FBTytJLEdBQUdBLEVBQUVxaEUsY0FBY3JxRSxFQUFFd0YsT0FBWXZGLEVBQUU4RyxFQUFFaUMsRUFBRWhKLEVBQUVtQyxRQUFXbTVDLElBQUl5dUIsR0FBR2hoRSxFQUFFQyxFQUFFaEosR0FBR0MsRUFBRXFqRCxPQUFPdjZDLEVBQUU5SSxLQUFFQSxFQUFFcXFFLEdBQUd0cUUsRUFBRXdGLEtBQUt4RixFQUFFa0IsSUFBSWxCLEVBQUVtQyxNQUFNLEtBQUs0RyxFQUFFakksS0FBS2IsSUFBS3E3QyxJQUFJeXVCLEdBQUdoaEUsRUFBRUMsRUFBRWhKLEdBQUdDLEVBQUVxakQsT0FBT3Y2QyxFQUFTOUksR0FBRSxTQUFTTCxFQUFFbUosRUFBRUMsRUFBRWhKLEVBQUVDLEdBQUcsT0FBRyxPQUFPK0ksR0FBRyxJQUFJQSxFQUFFaTZDLEtBQUtqNkMsRUFBRTQ0QyxVQUFVb0ssZ0JBQWdCaHNELEVBQUVnc0QsZUFBZWhqRCxFQUFFNDRDLFVBQVUyb0IsaUJBQzFldnFFLEVBQUV1cUUsaUJBQXNCdmhFLEVBQUV3aEUsR0FBR3hxRSxFQUFFK0ksRUFBRWpJLEtBQUtiLElBQUtxakQsT0FBT3Y2QyxFQUFFQyxLQUFFQSxFQUFFakMsRUFBRWlDLEVBQUVoSixFQUFFeTBDLFVBQVUsS0FBUTZPLE9BQU92NkMsRUFBU0MsR0FBRSxTQUFTakosRUFBRWdKLEVBQUVDLEVBQUVoSixFQUFFQyxFQUFFdVIsR0FBRyxPQUFHLE9BQU94SSxHQUFHLElBQUlBLEVBQUVpNkMsTUFBV2o2QyxFQUFFeWhFLEdBQUd6cUUsRUFBRStJLEVBQUVqSSxLQUFLYixFQUFFdVIsSUFBSzh4QyxPQUFPdjZDLEVBQUVDLEtBQUVBLEVBQUVqQyxFQUFFaUMsRUFBRWhKLElBQU9zakQsT0FBT3Y2QyxFQUFTQyxHQUFFLFNBQVNpeEMsRUFBRWx4QyxFQUFFQyxFQUFFaEosR0FBRyxHQUFHLGlCQUFrQmdKLEdBQUcsaUJBQWtCQSxFQUFFLE9BQU9BLEVBQUVvaEUsR0FBRyxHQUFHcGhFLEVBQUVELEVBQUVqSSxLQUFLZCxJQUFLc2pELE9BQU92NkMsRUFBRUMsRUFBRSxHQUFHLGlCQUFrQkEsR0FBRyxPQUFPQSxFQUFFLENBQUMsT0FBT0EsRUFBRTB5QyxVQUFVLEtBQUtzRyxFQUFHLE9BQU9oaUQsRUFBRXNxRSxHQUFHdGhFLEVBQUV4RCxLQUFLd0QsRUFBRTlILElBQUk4SCxFQUFFN0csTUFBTSxLQUFLNEcsRUFBRWpJLEtBQUtkLElBQUtzN0MsSUFBSXl1QixHQUFHaGhFLEVBQUUsS0FBS0MsR0FBR2hKLEVBQUVzakQsT0FBT3Y2QyxFQUFFL0ksRUFBRSxLQUFLaWlELEVBQUcsT0FBT2o1QyxFQUFFd2hFLEdBQUd4aEUsRUFBRUQsRUFBRWpJLEtBQUtkLElBQUtzakQsT0FBT3Y2QyxFQUFFQyxFQUFFLEdBQUc4Z0UsR0FBRzlnRSxJQUMzZjg1QyxFQUFHOTVDLEdBQUcsT0FBT0EsRUFBRXloRSxHQUFHemhFLEVBQUVELEVBQUVqSSxLQUFLZCxFQUFFLE9BQVFzakQsT0FBT3Y2QyxFQUFFQyxFQUFFaWhFLEdBQUdsaEUsRUFBRUMsR0FBRyxPQUFPLEtBQUssU0FBUzBaLEVBQUUzWixFQUFFQyxFQUFFaEosRUFBRUMsR0FBRyxJQUFJOEcsRUFBRSxPQUFPaUMsRUFBRUEsRUFBRTlILElBQUksS0FBSyxHQUFHLGlCQUFrQmxCLEdBQUcsaUJBQWtCQSxFQUFFLE9BQU8sT0FBTytHLEVBQUUsS0FBS3d5QyxFQUFFeHdDLEVBQUVDLEVBQUUsR0FBR2hKLEVBQUVDLEdBQUcsR0FBRyxpQkFBa0JELEdBQUcsT0FBT0EsRUFBRSxDQUFDLE9BQU9BLEVBQUUwN0MsVUFBVSxLQUFLc0csRUFBRyxPQUFPaGlELEVBQUVrQixNQUFNNkYsRUFBRS9HLEVBQUV3RixPQUFPMDhDLEVBQUduaUQsRUFBRWdKLEVBQUVDLEVBQUVoSixFQUFFbUMsTUFBTXN5QyxTQUFTeDBDLEVBQUU4RyxHQUFHa3dDLEVBQUVsdUMsRUFBRUMsRUFBRWhKLEVBQUVDLEdBQUcsS0FBSyxLQUFLZ2lELEVBQUcsT0FBT2ppRCxFQUFFa0IsTUFBTTZGLEVBQUVuSCxFQUFFbUosRUFBRUMsRUFBRWhKLEVBQUVDLEdBQUcsS0FBSyxHQUFHNnBFLEdBQUc5cEUsSUFBSThpRCxFQUFHOWlELEdBQUcsT0FBTyxPQUFPK0csRUFBRSxLQUFLaEgsRUFBRWdKLEVBQUVDLEVBQUVoSixFQUFFQyxFQUFFLE1BQU1ncUUsR0FBR2xoRSxFQUFFL0ksR0FBRyxPQUFPLEtBQUssU0FBUys2QyxFQUFFaHlDLEVBQUVDLEVBQUVoSixFQUFFQyxFQUFFOEcsR0FBRyxHQUFHLGlCQUFrQjlHLEdBQUcsaUJBQWtCQSxFQUFFLE9BQzVlczVDLEVBQUV2d0MsRUFEaWZELEVBQ2xnQkEsRUFBRXZJLElBQUlSLElBQUksS0FBVyxHQUFHQyxFQUFFOEcsR0FBRyxHQUFHLGlCQUFrQjlHLEdBQUcsT0FBT0EsRUFBRSxDQUFDLE9BQU9BLEVBQUV5N0MsVUFBVSxLQUFLc0csRUFBRyxPQUFPajVDLEVBQUVBLEVBQUV2SSxJQUFJLE9BQU9QLEVBQUVpQixJQUFJbEIsRUFBRUMsRUFBRWlCLE1BQU0sS0FBS2pCLEVBQUV1RixPQUFPMDhDLEVBQUduaUQsRUFBRWlKLEVBQUVELEVBQUU5SSxFQUFFa0MsTUFBTXN5QyxTQUFTMXRDLEVBQUU5RyxFQUFFaUIsS0FBSysxQyxFQUFFanVDLEVBQUVELEVBQUU5SSxFQUFFOEcsR0FBRyxLQUFLazdDLEVBQUcsT0FBMkNyaUQsRUFBRW9KLEVBQXRDRCxFQUFFQSxFQUFFdkksSUFBSSxPQUFPUCxFQUFFaUIsSUFBSWxCLEVBQUVDLEVBQUVpQixNQUFNLEtBQVdqQixFQUFFOEcsR0FBRyxHQUFHK2lFLEdBQUc3cEUsSUFBSTZpRCxFQUFHN2lELEdBQUcsT0FBd0JGLEVBQUVpSixFQUFuQkQsRUFBRUEsRUFBRXZJLElBQUlSLElBQUksS0FBV0MsRUFBRThHLEVBQUUsTUFBTWtqRSxHQUFHamhFLEVBQUUvSSxHQUFHLE9BQU8sS0FBSyxTQUFTMjVDLEVBQUU3eUMsRUFBRStqQixFQUFFeXVCLEVBQUV0QyxHQUFHLElBQUksSUFBSXIzQyxFQUFFLEtBQUtHLEVBQUUsS0FBS1UsRUFBRXFxQixFQUFFckksRUFBRXFJLEVBQUUsRUFBRWd2QixFQUFFLEtBQUssT0FBT3I1QyxHQUFHZ2lCLEVBQUU4MkIsRUFBRW4zQyxPQUFPcWdCLElBQUksQ0FBQ2hpQixFQUFFMEUsTUFBTXNkLEdBQUdxM0IsRUFBRXI1QyxFQUFFQSxFQUFFLE1BQU1xNUMsRUFBRXI1QyxFQUFFeXBELFFBQVEsSUFBSXpvRCxFQUFFaWhCLEVBQUUzYixFQUFFdEcsRUFBRTg0QyxFQUFFOTJCLEdBQUd3MEIsR0FBRyxHQUFHLE9BQU94MUMsRUFBRSxDQUFDLE9BQU9oQixJQUFJQSxFQUFFcTVDLEdBQUcsTUFBTS93QyxHQUNyZnRJLEdBQUcsT0FBT2dCLEVBQUVpb0QsV0FBVzFnRCxFQUFFakMsRUFBRXRHLEdBQUdxcUIsRUFBRXRaLEVBQUUvUCxFQUFFcXBCLEVBQUVySSxHQUFHLE9BQU8xaUIsRUFBRUgsRUFBRTZCLEVBQUUxQixFQUFFbXFELFFBQVF6b0QsRUFBRTFCLEVBQUUwQixFQUFFaEIsRUFBRXE1QyxFQUFFLEdBQUdyM0IsSUFBSTgyQixFQUFFbjNDLE9BQU8sT0FBT3BDLEVBQUUrRyxFQUFFdEcsR0FBR2IsRUFBRSxHQUFHLE9BQU9hLEVBQUUsQ0FBQyxLQUFLZ2lCLEVBQUU4MkIsRUFBRW4zQyxPQUFPcWdCLElBQWtCLFFBQWRoaUIsRUFBRXc1QyxFQUFFbHpDLEVBQUV3eUMsRUFBRTkyQixHQUFHdzBCLE1BQWNuc0IsRUFBRXRaLEVBQUUvUSxFQUFFcXFCLEVBQUVySSxHQUFHLE9BQU8xaUIsRUFBRUgsRUFBRWEsRUFBRVYsRUFBRW1xRCxRQUFRenBELEVBQUVWLEVBQUVVLEdBQUcsT0FBT2IsRUFBRSxJQUFJYSxFQUFFUixFQUFFOEcsRUFBRXRHLEdBQUdnaUIsRUFBRTgyQixFQUFFbjNDLE9BQU9xZ0IsSUFBc0IsUUFBbEJxM0IsRUFBRWlCLEVBQUV0NkMsRUFBRXNHLEVBQUUwYixFQUFFODJCLEVBQUU5MkIsR0FBR3cwQixNQUFjbHVDLEdBQUcsT0FBTyt3QyxFQUFFNFAsV0FBV2pwRCxFQUFFOHFELE9BQU8sT0FBT3pSLEVBQUU1NEMsSUFBSXVoQixFQUFFcTNCLEVBQUU1NEMsS0FBSzRwQixFQUFFdFosRUFBRXNvQyxFQUFFaHZCLEVBQUVySSxHQUFHLE9BQU8xaUIsRUFBRUgsRUFBRWs2QyxFQUFFLzVDLEVBQUVtcUQsUUFBUXBRLEVBQUUvNUMsRUFBRSs1QyxHQUE0QyxPQUF6Qy93QyxHQUFHdEksRUFBRW9HLFNBQVEsU0FBU2tDLEdBQUcsT0FBT0MsRUFBRWpDLEVBQUVnQyxNQUFZbkosRUFBRSxTQUFTOHFFLEVBQUczakUsRUFBRStqQixFQUFFeXVCLEVBQUV0QyxHQUFHLElBQUlyM0MsRUFBRWtqRCxFQUFHdkosR0FBRyxHQUFHLG1CQUFvQjM1QyxFQUFFLE1BQU15RSxNQUFNcTFDLEVBQUUsTUFDeGUsR0FBRyxPQUQyZUgsRUFBRTM1QyxFQUFFRSxLQUFLeTVDLElBQzVlLE1BQU1sMUMsTUFBTXExQyxFQUFFLE1BQU0sSUFBSSxJQUFJMzVDLEVBQUVILEVBQUUsS0FBS2EsRUFBRXFxQixFQUFFckksRUFBRXFJLEVBQUUsRUFBRWd2QixFQUFFLEtBQUtyNEMsRUFBRTgzQyxFQUFFdnpDLE9BQU8sT0FBT3ZGLElBQUlnQixFQUFFMlEsS0FBS3FRLElBQUloaEIsRUFBRTgzQyxFQUFFdnpDLE9BQU8sQ0FBQ3ZGLEVBQUUwRSxNQUFNc2QsR0FBR3EzQixFQUFFcjVDLEVBQUVBLEVBQUUsTUFBTXE1QyxFQUFFcjVDLEVBQUV5cEQsUUFBUSxJQUFJdFEsRUFBRWwzQixFQUFFM2IsRUFBRXRHLEVBQUVnQixFQUFFYixNQUFNcTJDLEdBQUcsR0FBRyxPQUFPMkMsRUFBRSxDQUFDLE9BQU9uNUMsSUFBSUEsRUFBRXE1QyxHQUFHLE1BQU0vd0MsR0FBR3RJLEdBQUcsT0FBT201QyxFQUFFOFAsV0FBVzFnRCxFQUFFakMsRUFBRXRHLEdBQUdxcUIsRUFBRXRaLEVBQUVvb0MsRUFBRTl1QixFQUFFckksR0FBRyxPQUFPMWlCLEVBQUVILEVBQUVnNkMsRUFBRTc1QyxFQUFFbXFELFFBQVF0USxFQUFFNzVDLEVBQUU2NUMsRUFBRW41QyxFQUFFcTVDLEVBQUUsR0FBR3I0QyxFQUFFMlEsS0FBSyxPQUFPcFMsRUFBRStHLEVBQUV0RyxHQUFHYixFQUFFLEdBQUcsT0FBT2EsRUFBRSxDQUFDLE1BQU1nQixFQUFFMlEsS0FBS3FRLElBQUloaEIsRUFBRTgzQyxFQUFFdnpDLE9BQXdCLFFBQWpCdkUsRUFBRXc0QyxFQUFFbHpDLEVBQUV0RixFQUFFYixNQUFNcTJDLE1BQWNuc0IsRUFBRXRaLEVBQUUvUCxFQUFFcXBCLEVBQUVySSxHQUFHLE9BQU8xaUIsRUFBRUgsRUFBRTZCLEVBQUUxQixFQUFFbXFELFFBQVF6b0QsRUFBRTFCLEVBQUUwQixHQUFHLE9BQU83QixFQUFFLElBQUlhLEVBQUVSLEVBQUU4RyxFQUFFdEcsSUFBSWdCLEVBQUUyUSxLQUFLcVEsSUFBSWhoQixFQUFFODNDLEVBQUV2ekMsT0FBNEIsUUFBckJ2RSxFQUFFczVDLEVBQUV0NkMsRUFBRXNHLEVBQUUwYixFQUFFaGhCLEVBQUViLE1BQU1xMkMsTUFBY2x1QyxHQUFHLE9BQ2hmdEgsRUFBRWlvRCxXQUFXanBELEVBQUU4cUQsT0FBTyxPQUFPOXBELEVBQUVQLElBQUl1aEIsRUFBRWhoQixFQUFFUCxLQUFLNHBCLEVBQUV0WixFQUFFL1AsRUFBRXFwQixFQUFFckksR0FBRyxPQUFPMWlCLEVBQUVILEVBQUU2QixFQUFFMUIsRUFBRW1xRCxRQUFRem9ELEVBQUUxQixFQUFFMEIsR0FBNEMsT0FBekNzSCxHQUFHdEksRUFBRW9HLFNBQVEsU0FBU2tDLEdBQUcsT0FBT0MsRUFBRWpDLEVBQUVnQyxNQUFZbkosRUFBRSxPQUFPLFNBQVNtSixFQUFFOUksRUFBRXVSLEVBQUUrbkMsR0FBRyxJQUFJdEMsRUFBRSxpQkFBa0J6bEMsR0FBRyxPQUFPQSxHQUFHQSxFQUFFaE0sT0FBTzA4QyxHQUFJLE9BQU8xd0MsRUFBRXRRLElBQUkrMUMsSUFBSXpsQyxFQUFFQSxFQUFFclAsTUFBTXN5QyxVQUFVLElBQUk3MEMsRUFBRSxpQkFBa0I0UixHQUFHLE9BQU9BLEVBQUUsR0FBRzVSLEVBQUUsT0FBTzRSLEVBQUVrcUMsVUFBVSxLQUFLc0csRUFBR2o1QyxFQUFFLENBQVMsSUFBUm5KLEVBQUU0UixFQUFFdFEsSUFBUSsxQyxFQUFFaDNDLEVBQUUsT0FBT2czQyxHQUFHLENBQUMsR0FBR0EsRUFBRS8xQyxNQUFNdEIsRUFBRSxJQUFHLElBQUlxM0MsRUFBRWdNLElBQUl6eEMsRUFBRWhNLE9BQU8wOEMsRUFBR2pMLEVBQUVvekIsY0FBYzc0RCxFQUFFaE0sS0FBSyxDQUFDeEYsRUFBRStJLEVBQUVrdUMsRUFBRWlULFVBQVNqcUQsRUFBRThHLEVBQUVrd0MsRUFBRXpsQyxFQUFFaE0sT0FBTzA4QyxFQUFHMXdDLEVBQUVyUCxNQUFNc3lDLFNBQVNqakMsRUFBRXJQLFFBQVdtNUMsSUFBSXl1QixHQUFHaGhFLEVBQUVrdUMsRUFBRXpsQyxHQUFHdlIsRUFBRXFqRCxPQUFPdjZDLEVBQUVBLEVBQUU5SSxFQUFFLE1BQU04SSxFQUFPL0ksRUFBRStJLEVBQ2xnQmt1QyxHQUFHLE1BQVdqdUMsRUFBRUQsRUFBRWt1QyxHQUFHQSxFQUFFQSxFQUFFaVQsUUFBUTE0QyxFQUFFaE0sT0FBTzA4QyxJQUFJamlELEVBQUV3cUUsR0FBR2o1RCxFQUFFclAsTUFBTXN5QyxTQUFTMXJDLEVBQUVqSSxLQUFLeTRDLEVBQUUvbkMsRUFBRXRRLE1BQU9vaUQsT0FBT3Y2QyxFQUFFQSxFQUFFOUksS0FBSXM1QyxFQUFFK3dCLEdBQUc5NEQsRUFBRWhNLEtBQUtnTSxFQUFFdFEsSUFBSXNRLEVBQUVyUCxNQUFNLEtBQUs0RyxFQUFFakksS0FBS3k0QyxJQUFLK0IsSUFBSXl1QixHQUFHaGhFLEVBQUU5SSxFQUFFdVIsR0FBRytuQyxFQUFFK0osT0FBT3Y2QyxFQUFFQSxFQUFFd3dDLEdBQUcsT0FBT3p1QixFQUFFL2hCLEdBQUcsS0FBS2s1QyxFQUFHbDVDLEVBQUUsQ0FBQyxJQUFJa3VDLEVBQUV6bEMsRUFBRXRRLElBQUksT0FBT2pCLEdBQUcsQ0FBQyxHQUFHQSxFQUFFaUIsTUFBTSsxQyxFQUFFLElBQUcsSUFBSWgzQyxFQUFFZ2pELEtBQUtoakQsRUFBRTJoRCxVQUFVb0ssZ0JBQWdCeDZDLEVBQUV3NkMsZUFBZS9yRCxFQUFFMmhELFVBQVUyb0IsaUJBQWlCLzRELEVBQUUrNEQsZUFBZSxDQUFDdnFFLEVBQUUrSSxFQUFFOUksRUFBRWlxRCxVQUFTanFELEVBQUU4RyxFQUFFOUcsRUFBRXVSLEVBQUVpakMsVUFBVSxLQUFRNk8sT0FBT3Y2QyxFQUFFQSxFQUFFOUksRUFBRSxNQUFNOEksRUFBTy9JLEVBQUUrSSxFQUFFOUksR0FBRyxNQUFXK0ksRUFBRUQsRUFBRTlJLEdBQUdBLEVBQUVBLEVBQUVpcUQsU0FBUWpxRCxFQUFFdXFFLEdBQUdoNUQsRUFBRXpJLEVBQUVqSSxLQUFLeTRDLElBQUsrSixPQUFPdjZDLEVBQUVBLEVBQUU5SSxFQUFFLE9BQU82cUIsRUFBRS9oQixHQUFHLEdBQUcsaUJBQ25leUksR0FBRyxpQkFBa0JBLEVBQUUsT0FBT0EsRUFBRSxHQUFHQSxFQUFFLE9BQU92UixHQUFHLElBQUlBLEVBQUVnakQsS0FBS2pqRCxFQUFFK0ksRUFBRTlJLEVBQUVpcUQsVUFBU2pxRCxFQUFFOEcsRUFBRTlHLEVBQUV1UixJQUFPOHhDLE9BQU92NkMsRUFBRUEsRUFBRTlJLElBQUlELEVBQUUrSSxFQUFFOUksSUFBR0EsRUFBRW1xRSxHQUFHNTRELEVBQUV6SSxFQUFFakksS0FBS3k0QyxJQUFLK0osT0FBT3Y2QyxFQUFFQSxFQUFFOUksR0FBRzZxQixFQUFFL2hCLEdBQUcsR0FBRytnRSxHQUFHdDRELEdBQUcsT0FBT29vQyxFQUFFN3dDLEVBQUU5SSxFQUFFdVIsRUFBRStuQyxHQUFHLEdBQUd1SixFQUFHdHhDLEdBQUcsT0FBT2s1RCxFQUFHM2hFLEVBQUU5SSxFQUFFdVIsRUFBRStuQyxHQUFjLEdBQVgzNUMsR0FBR3FxRSxHQUFHbGhFLEVBQUV5SSxRQUFNLElBQXFCQSxJQUFJeWxDLEVBQUUsT0FBT2x1QyxFQUFFazZDLEtBQUssS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNbDZDLEVBQUVBLEVBQUV2RCxLQUFLbkIsTUFBTXExQyxFQUFFLElBQUkzd0MsRUFBRStmLGFBQWEvZixFQUFFN0ksTUFBTSxjQUFlLE9BQU9GLEVBQUUrSSxFQUFFOUksSUFBSSxJQUFJMHFFLEdBQUdULElBQUcsR0FBSVUsR0FBR1YsSUFBRyxHQUFJVyxHQUFHLEdBQUdDLEdBQUcsQ0FBQzV2QixRQUFRMnZCLElBQUlFLEdBQUcsQ0FBQzd2QixRQUFRMnZCLElBQUlHLEdBQUcsQ0FBQzl2QixRQUFRMnZCLElBQUksU0FBU0ksR0FBR2xpRSxHQUFHLEdBQUdBLElBQUk4aEUsR0FBRyxNQUFNeG1FLE1BQU1xMUMsRUFBRSxNQUFNLE9BQU8zd0MsRUFDdmUsU0FBU21pRSxHQUFHbmlFLEVBQUVDLEdBQUdpeUMsR0FBRSt2QixHQUFHaGlFLEdBQUtpeUMsR0FBRTh2QixHQUFHaGlFLEdBQUtreUMsR0FBRTZ2QixHQUFHRCxJQUFNLElBQUk3cUUsRUFBRWdKLEVBQUV3L0MsU0FBUyxPQUFPeG9ELEdBQUcsS0FBSyxFQUFFLEtBQUssR0FBR2dKLEdBQUdBLEVBQUVBLEVBQUVpakIsaUJBQWlCampCLEVBQUVtL0MsYUFBYUwsR0FBRyxLQUFLLElBQUksTUFBTSxRQUFrRTkrQyxFQUFFOCtDLEdBQXJDOStDLEdBQXZCaEosRUFBRSxJQUFJQSxFQUFFZ0osRUFBRWdJLFdBQVdoSSxHQUFNbS9DLGNBQWMsS0FBS25vRCxFQUFFQSxFQUFFaTFDLFNBQWtCMEYsR0FBRW13QixJQUFNN3ZCLEdBQUU2dkIsR0FBRzloRSxHQUFLLFNBQVNtaUUsR0FBR3BpRSxHQUFHNHhDLEdBQUVtd0IsSUFBTW53QixHQUFFb3dCLElBQU1wd0IsR0FBRXF3QixJQUFNLFNBQVNJLEdBQUdyaUUsR0FBR2tpRSxHQUFHRCxHQUFHOXZCLFNBQVMsSUFBSWx5QyxFQUFFaWlFLEdBQUdILEdBQUc1dkIsU0FBYWw3QyxFQUFFOG5ELEdBQUc5K0MsRUFBRUQsRUFBRXZELE1BQU13RCxJQUFJaEosSUFBSWk3QyxHQUFFOHZCLEdBQUdoaUUsR0FBS2t5QyxHQUFFNnZCLEdBQUc5cUUsSUFBTSxTQUFTcXJFLEdBQUd0aUUsR0FBR2dpRSxHQUFHN3ZCLFVBQVVueUMsSUFBSTR4QyxHQUFFbXdCLElBQU1ud0IsR0FBRW93QixLQUFPLElBQUl0dkIsR0FBRSxDQUFDUCxRQUFRLEdBQzNiLFNBQVNvd0IsR0FBR3ZpRSxHQUFHLElBQUksSUFBSUMsRUFBRUQsRUFBRSxPQUFPQyxHQUFHLENBQUMsR0FBRyxLQUFLQSxFQUFFaTZDLElBQUksQ0FBQyxJQUFJampELEVBQUVnSixFQUFFNmdELGNBQWMsR0FBRyxPQUFPN3BELElBQW1CLFFBQWZBLEVBQUVBLEVBQUU4cEQsYUFBcUI5cEQsRUFBRW9OLE9BQU8rdUQsSUFBSW44RCxFQUFFb04sT0FBT2d2RCxJQUFJLE9BQU9wekQsT0FBTyxHQUFHLEtBQUtBLEVBQUVpNkMsVUFBSyxJQUFTajZDLEVBQUV1aUUsY0FBY0MsYUFBYSxHQUFHLElBQWlCLEdBQVp4aUUsRUFBRTJnRCxXQUFjLE9BQU8zZ0QsT0FBTyxHQUFHLE9BQU9BLEVBQUVpaEQsTUFBTSxDQUFDamhELEVBQUVpaEQsTUFBTTNHLE9BQU90NkMsRUFBRUEsRUFBRUEsRUFBRWloRCxNQUFNLFNBQVMsR0FBR2poRCxJQUFJRCxFQUFFLE1BQU0sS0FBSyxPQUFPQyxFQUFFa2hELFNBQVMsQ0FBQyxHQUFHLE9BQU9saEQsRUFBRXM2QyxRQUFRdDZDLEVBQUVzNkMsU0FBU3Y2QyxFQUFFLE9BQU8sS0FBS0MsRUFBRUEsRUFBRXM2QyxPQUFPdDZDLEVBQUVraEQsUUFBUTVHLE9BQU90NkMsRUFBRXM2QyxPQUFPdDZDLEVBQUVBLEVBQUVraEQsUUFBUSxPQUFPLEtBQUssU0FBU3VoQixHQUFHMWlFLEVBQUVDLEdBQUcsTUFBTSxDQUFDMGlFLFVBQVUzaUUsRUFBRTVHLE1BQU02RyxHQUN2ZSxJQUFJMmlFLEdBQUc3cEIsRUFBRzlDLHVCQUF1QnBELEdBQUVrRyxFQUFHN0Msd0JBQXdCN2EsR0FBRyxFQUFFd25DLEdBQUcsS0FBSy92QixHQUFFLEtBQUtnd0IsR0FBRyxLQUFLQyxHQUFHLEtBQUtod0IsR0FBRSxLQUFLaXdCLEdBQUcsS0FBS0MsR0FBRyxFQUFFQyxHQUFHLEtBQUtDLEdBQUcsRUFBRUMsSUFBRyxFQUFHQyxHQUFHLEtBQUtDLEdBQUcsRUFBRSxTQUFTdHdCLEtBQUksTUFBTTEzQyxNQUFNcTFDLEVBQUUsTUFBTyxTQUFTNHlCLEdBQUd2akUsRUFBRUMsR0FBRyxHQUFHLE9BQU9BLEVBQUUsT0FBTSxFQUFHLElBQUksSUFBSWhKLEVBQUUsRUFBRUEsRUFBRWdKLEVBQUU1RyxRQUFRcEMsRUFBRStJLEVBQUUzRyxPQUFPcEMsSUFBSSxJQUFJcWhFLEdBQUd0NEQsRUFBRS9JLEdBQUdnSixFQUFFaEosSUFBSSxPQUFNLEVBQUcsT0FBTSxFQUN0UyxTQUFTdXNFLEdBQUd4akUsRUFBRUMsRUFBRWhKLEVBQUVDLEVBQUU4RyxFQUFFeUssR0FBa0YsR0FBL0U0eUIsR0FBRzV5QixFQUFFbzZELEdBQUc1aUUsRUFBRTZpRSxHQUFHLE9BQU85aUUsRUFBRUEsRUFBRThnRCxjQUFjLEtBQUs4aEIsR0FBR3p3QixRQUFRLE9BQU8yd0IsR0FBR1csR0FBR0MsR0FBR3pqRSxFQUFFaEosRUFBRUMsRUFBRThHLEdBQU1vbEUsR0FBRyxDQUFDLEdBQUdBLElBQUcsRUFBR0UsSUFBSSxFQUFFUixHQUFHLE9BQU85aUUsRUFBRUEsRUFBRThnRCxjQUFjLEtBQUtraUIsR0FBR0QsR0FBR0csR0FBR253QixHQUFFRCxHQUFFLEtBQUs4dkIsR0FBR3p3QixRQUFRdXhCLEdBQUd6akUsRUFBRWhKLEVBQUVDLEVBQUU4RyxTQUFTb2xFLElBQUlDLEdBQUcsS0FBS0MsR0FBRyxFQUFtSyxHQUFqS1YsR0FBR3p3QixRQUFRd3hCLElBQUczakUsRUFBRTZpRSxJQUFLL2hCLGNBQWNpaUIsR0FBRy9pRSxFQUFFNjlELGVBQWVvRixHQUFHampFLEVBQUVtL0QsWUFBWStELEdBQUdsakUsRUFBRTRnRCxXQUFXdWlCLEdBQUduakUsRUFBRSxPQUFPOHlDLElBQUcsT0FBT0EsR0FBRTcxQyxLQUFLbytCLEdBQUcsRUFBRTJuQyxHQUFHandCLEdBQUVnd0IsR0FBR0QsR0FBR2h3QixHQUFFK3ZCLEdBQUcsS0FBS0ksR0FBRyxFQUFFQyxHQUFHLEtBQUtDLEdBQUcsRUFBS25qRSxFQUFFLE1BQU0xRSxNQUFNcTFDLEVBQUUsTUFBTSxPQUFPMXdDLEVBQ2hhLFNBQVMyakUsS0FBS2hCLEdBQUd6d0IsUUFBUXd4QixHQUFHdG9DLEdBQUcsRUFBRTJuQyxHQUFHandCLEdBQUVnd0IsR0FBR0QsR0FBR2h3QixHQUFFK3ZCLEdBQUcsS0FBS0ksR0FBRyxFQUFFQyxHQUFHLEtBQUtDLEdBQUcsRUFBRUMsSUFBRyxFQUFHQyxHQUFHLEtBQUtDLEdBQUcsRUFBRSxTQUFTTyxLQUFLLElBQUk3akUsRUFBRSxDQUFDOGdELGNBQWMsS0FBS3NkLFVBQVUsS0FBS3RzRCxNQUFNLEtBQUtneUQsV0FBVyxLQUFLN21FLEtBQUssTUFBaUMsT0FBM0IsT0FBTzgxQyxHQUFFZ3dCLEdBQUdod0IsR0FBRS95QyxFQUFFK3lDLEdBQUVBLEdBQUU5MUMsS0FBSytDLEVBQVMreUMsR0FBRSxTQUFTZ3hCLEtBQUssR0FBRyxPQUFPZixHQUFRQSxJQUFMandCLEdBQUVpd0IsSUFBUS9sRSxLQUFVNmxFLEdBQUcsUUFBUmh3QixHQUFFZ3dCLElBQWVod0IsR0FBRTcxQyxLQUFLLFNBQVMsQ0FBQyxHQUFHLE9BQU82bEUsR0FBRyxNQUFNeG5FLE1BQU1xMUMsRUFBRSxNQUFXLElBQUkzd0MsRUFBRSxDQUFDOGdELGVBQVpoTyxHQUFFZ3dCLElBQTBCaGlCLGNBQWNzZCxVQUFVdHJCLEdBQUVzckIsVUFBVXRzRCxNQUFNZ2hDLEdBQUVoaEMsTUFBTWd5RCxXQUFXaHhCLEdBQUVneEIsV0FBVzdtRSxLQUFLLE1BQU04MUMsR0FBRSxPQUFPQSxHQUFFZ3dCLEdBQUcvaUUsRUFBRSt5QyxHQUFFOTFDLEtBQUsrQyxFQUFFOGlFLEdBQUdod0IsR0FBRTcxQyxLQUFLLE9BQU84MUMsR0FDcGUsU0FBU2l4QixHQUFHaGtFLEVBQUVDLEdBQUcsTUFBTSxtQkFBb0JBLEVBQUVBLEVBQUVELEdBQUdDLEVBQ2xELFNBQVNna0UsR0FBR2prRSxHQUFHLElBQUlDLEVBQUU4akUsS0FBSzlzRSxFQUFFZ0osRUFBRTZSLE1BQU0sR0FBRyxPQUFPN2EsRUFBRSxNQUFNcUUsTUFBTXExQyxFQUFFLE1BQThCLEdBQXhCMTVDLEVBQUVpdEUsb0JBQW9CbGtFLEVBQUssRUFBRXNqRSxHQUFHLENBQUMsSUFBSXBzRSxFQUFFRCxFQUFFc0YsU0FBUyxHQUFHLE9BQU84bUUsR0FBRyxDQUFDLElBQUlybEUsRUFBRXFsRSxHQUFHNXJFLElBQUlSLEdBQUcsUUFBRyxJQUFTK0csRUFBRSxDQUFDcWxFLEdBQUc3Z0IsT0FBT3ZyRCxHQUFHLElBQUl3UixFQUFFeEksRUFBRTZnRCxjQUFjLEdBQUdyNEMsRUFBRXpJLEVBQUV5SSxFQUFFekssRUFBRXhCLFFBQVF3QixFQUFFQSxFQUFFZixXQUFXLE9BQU9lLEdBQWlILE9BQTlHczZELEdBQUc3dkQsRUFBRXhJLEVBQUU2Z0QsaUJBQWlCZ2QsSUFBRyxHQUFJNzlELEVBQUU2Z0QsY0FBY3I0QyxFQUFFeEksRUFBRTZqRSxhQUFhN3NFLEVBQUVrdEUsT0FBT2xrRSxFQUFFbStELFVBQVUzMUQsR0FBR3hSLEVBQUVtdEUsa0JBQWtCMzdELEVBQVEsQ0FBQ0EsRUFBRXZSLElBQUksTUFBTSxDQUFDK0ksRUFBRTZnRCxjQUFjNXBELEdBQUdBLEVBQUVELEVBQUVrdEUsS0FBSyxJQUFJcGlELEVBQUU5aEIsRUFBRTZqRSxXQUE0RixHQUFqRnI3RCxFQUFFeEksRUFBRW0rRCxVQUFVLE9BQU9yOEMsR0FBRyxPQUFPN3FCLElBQUlBLEVBQUUrRixLQUFLLE1BQU0vRixFQUFFNnFCLEVBQUU5a0IsTUFBTS9GLEVBQUUsT0FBT0EsRUFBRUEsRUFBRStGLEtBQUssS0FBUSxPQUN2Zi9GLEVBQUUsQ0FBQyxJQUFJczVDLEVBQUV4eUMsRUFBRSxLQUFLa3dDLEVBQUVoM0MsRUFBRUwsR0FBRSxFQUFHLEVBQUUsQ0FBQyxJQUFJRyxFQUFFazNDLEVBQUUydkIsZUFBZTdtRSxFQUFFcWtDLElBQUl4a0MsSUFBSUEsR0FBRSxFQUFHMjVDLEVBQUV6dUIsRUFBRS9qQixFQUFFeUssR0FBR3pSLEVBQUVpc0UsSUFBVXhELEdBQUx3RCxHQUFHanNFLEtBQVl3b0UsR0FBR3hvRSxFQUFFazNDLEVBQUU2d0IsZ0JBQWdCdDJELEVBQUV5bEMsRUFBRW0yQixlQUFlcmtFLEVBQUVrdUMsRUFBRW8yQixXQUFXdGtFLEVBQUV5SSxFQUFFeWxDLEVBQUUxeEMsU0FBU3VsQixFQUFFbXNCLEVBQUVBLEVBQUVBLEVBQUVqeEMsV0FBVyxPQUFPaXhDLEdBQUdBLElBQUloM0MsR0FBR0wsSUFBSTI1QyxFQUFFenVCLEVBQUUvakIsRUFBRXlLLEdBQUc2dkQsR0FBRzd2RCxFQUFFeEksRUFBRTZnRCxpQkFBaUJnZCxJQUFHLEdBQUk3OUQsRUFBRTZnRCxjQUFjcjRDLEVBQUV4SSxFQUFFNmpFLFdBQVd0ekIsRUFBRXZ3QyxFQUFFbStELFVBQVVwZ0UsRUFBRS9HLEVBQUVtdEUsa0JBQWtCMzdELEVBQUUsTUFBTSxDQUFDeEksRUFBRTZnRCxjQUFjN3BELEVBQUVzRixVQUN2VixTQUFTZ29FLEdBQUd2a0UsR0FBRyxJQUFJQyxFQUFFNGpFLEtBQWlMLE1BQTVLLG1CQUFvQjdqRSxJQUFJQSxFQUFFQSxLQUFLQyxFQUFFNmdELGNBQWM3Z0QsRUFBRW0rRCxVQUFVcCtELEVBQWlGQSxHQUEvRUEsRUFBRUMsRUFBRTZSLE1BQU0sQ0FBQ3F5RCxLQUFLLEtBQUs1bkUsU0FBUyxLQUFLMm5FLG9CQUFvQkYsR0FBR0ksa0JBQWtCcGtFLElBQU96RCxTQUFTaW9FLEdBQUdwc0UsS0FBSyxLQUFLeXFFLEdBQUc3aUUsR0FBUyxDQUFDQyxFQUFFNmdELGNBQWM5Z0QsR0FBRyxTQUFTeWtFLEdBQUd6a0UsR0FBRyxPQUFPaWtFLEdBQUdELElBQU0sU0FBU1UsR0FBRzFrRSxFQUFFQyxFQUFFaEosRUFBRUMsR0FBd00sT0FBck04SSxFQUFFLENBQUNrNkMsSUFBSWw2QyxFQUFFOUgsT0FBTytILEVBQUV1bkIsUUFBUXZ3QixFQUFFMHRFLEtBQUt6dEUsRUFBRStGLEtBQUssTUFBTSxPQUFPaW1FLElBQUlBLEdBQUcsQ0FBQ3hFLFdBQVcsT0FBU0EsV0FBVzErRCxFQUFFL0MsS0FBSytDLEVBQW9CLFFBQWhCQyxFQUFFaWpFLEdBQUd4RSxZQUFvQndFLEdBQUd4RSxXQUFXMStELEVBQUUvQyxLQUFLK0MsR0FBRy9JLEVBQUVnSixFQUFFaEQsS0FBS2dELEVBQUVoRCxLQUFLK0MsRUFBRUEsRUFBRS9DLEtBQUtoRyxFQUFFaXNFLEdBQUd4RSxXQUFXMStELEdBQVdBLEVBQ2hlLFNBQVM0a0UsR0FBRzVrRSxFQUFFQyxFQUFFaEosRUFBRUMsR0FBRyxJQUFJOEcsRUFBRTZsRSxLQUFLVixJQUFJbmpFLEVBQUVoQyxFQUFFOGlELGNBQWM0akIsR0FBR3prRSxFQUFFaEosT0FBRSxPQUFPLElBQVNDLEVBQUUsS0FBS0EsR0FBRyxTQUFTMnRFLEdBQUc3a0UsRUFBRUMsRUFBRWhKLEVBQUVDLEdBQUcsSUFBSThHLEVBQUUrbEUsS0FBSzdzRSxPQUFFLElBQVNBLEVBQUUsS0FBS0EsRUFBRSxJQUFJdVIsT0FBRSxFQUFPLEdBQUcsT0FBT3FxQyxHQUFFLENBQUMsSUFBSS93QixFQUFFK3dCLEdBQUVnTyxjQUEwQixHQUFacjRDLEVBQUVzWixFQUFFeUYsUUFBVyxPQUFPdHdCLEdBQUdxc0UsR0FBR3JzRSxFQUFFNnFCLEVBQUU0aUQsTUFBbUIsWUFBWkQsR0FBRyxFQUFFenRFLEVBQUV3UixFQUFFdlIsR0FBV2lzRSxJQUFJbmpFLEVBQUVoQyxFQUFFOGlELGNBQWM0akIsR0FBR3prRSxFQUFFaEosRUFBRXdSLEVBQUV2UixHQUFHLFNBQVM0dEUsR0FBRzlrRSxFQUFFQyxHQUFHLE9BQU8ya0UsR0FBRyxJQUFJLElBQUk1a0UsRUFBRUMsR0FBRyxTQUFTOGtFLEdBQUcva0UsRUFBRUMsR0FBRyxPQUFPNGtFLEdBQUcsSUFBSSxJQUFJN2tFLEVBQUVDLEdBQ3JXLFNBQVMra0UsR0FBR2hsRSxFQUFFQyxHQUFHLE1BQUcsbUJBQW9CQSxHQUFTRCxFQUFFQSxJQUFJQyxFQUFFRCxHQUFHLFdBQVdDLEVBQUUsUUFBVSxNQUFPQSxHQUFxQkQsRUFBRUEsSUFBSUMsRUFBRWt5QyxRQUFRbnlDLEVBQUUsV0FBV0MsRUFBRWt5QyxRQUFRLFlBQXRFLEVBQTRFLFNBQVM4eUIsTUFBTSxTQUFTQyxHQUFHbGxFLEVBQUVDLEdBQTRDLE9BQXpDNGpFLEtBQUsvaUIsY0FBYyxDQUFDOWdELE9BQUUsSUFBU0MsRUFBRSxLQUFLQSxHQUFVRCxFQUFFLFNBQVNtbEUsR0FBR25sRSxFQUFFQyxHQUFHLElBQUloSixFQUFFOHNFLEtBQUs5akUsT0FBRSxJQUFTQSxFQUFFLEtBQUtBLEVBQUUsSUFBSS9JLEVBQUVELEVBQUU2cEQsY0FBYyxPQUFHLE9BQU81cEQsR0FBRyxPQUFPK0ksR0FBR3NqRSxHQUFHdGpFLEVBQUUvSSxFQUFFLElBQVdBLEVBQUUsSUFBR0QsRUFBRTZwRCxjQUFjLENBQUM5Z0QsRUFBRUMsR0FBVUQsR0FDL1gsU0FBU3drRSxHQUFHeGtFLEVBQUVDLEVBQUVoSixHQUFHLEtBQUssR0FBR3FzRSxJQUFJLE1BQU1ob0UsTUFBTXExQyxFQUFFLE1BQU0sSUFBSXo1QyxFQUFFOEksRUFBRTJnRCxVQUFVLEdBQUczZ0QsSUFBSTZpRSxJQUFJLE9BQU8zckUsR0FBR0EsSUFBSTJyRSxHQUFHLEdBQUdPLElBQUcsRUFBR3BqRSxFQUFFLENBQUM2OUQsZUFBZXhpQyxHQUFHMGpDLGVBQWUsS0FBS3ZpRSxPQUFPdkYsRUFBRW90RSxhQUFhLEtBQUtDLFdBQVcsS0FBS3JuRSxLQUFLLE1BQU0sT0FBT29tRSxLQUFLQSxHQUFHLElBQUlqb0IsVUFBaUIsS0FBWm5rRCxFQUFFb3NFLEdBQUc1ckUsSUFBSXdJLElBQWNvakUsR0FBR2hsRCxJQUFJcGUsRUFBRUQsT0FBTyxDQUFDLElBQUlDLEVBQUVoSixFQUFFLE9BQU9nSixFQUFFaEQsTUFBTWdELEVBQUVBLEVBQUVoRCxLQUFLZ0QsRUFBRWhELEtBQUsrQyxNQUFNLENBQUMsSUFBSWhDLEVBQUVpaUUsS0FBS3gzRCxFQUFFbTNELEdBQUd6cEIsU0FBcUIxdEMsRUFBRSxDQUFDbzFELGVBQWY3L0QsRUFBRWtpRSxHQUFHbGlFLEVBQUVnQyxFQUFFeUksR0FBdUJzMkQsZUFBZXQyRCxFQUFFak0sT0FBT3ZGLEVBQUVvdEUsYUFBYSxLQUFLQyxXQUFXLEtBQUtybkUsS0FBSyxNQUFNLElBQUk4a0IsRUFBRTloQixFQUFFa2tFLEtBQUssR0FBRyxPQUFPcGlELEVBQUV0WixFQUFFeEwsS0FBS3dMLE1BQU0sQ0FBQyxJQUFJK25DLEVBQUV6dUIsRUFBRTlrQixLQUFLLE9BQU91ekMsSUFDamYvbkMsRUFBRXhMLEtBQUt1ekMsR0FBR3p1QixFQUFFOWtCLEtBQUt3TCxFQUFXLEdBQVR4SSxFQUFFa2tFLEtBQUsxN0QsRUFBSyxJQUFJekksRUFBRTY5RCxpQkFBaUIsT0FBTzNtRSxHQUFHLElBQUlBLEVBQUUybUUsaUJBQTBDLFFBQXhCM21FLEVBQUUrSSxFQUFFaWtFLHFCQUE4QixJQUFJLElBQUloMkIsRUFBRWp1QyxFQUFFbWtFLGtCQUFrQnZ0RSxFQUFFSyxFQUFFZzNDLEVBQUVqM0MsR0FBbUMsR0FBaEN3UixFQUFFNDdELGFBQWFudEUsRUFBRXVSLEVBQUU2N0QsV0FBV3p0RSxFQUFLeWhFLEdBQUd6aEUsRUFBRXEzQyxHQUFHLE9BQU8sTUFBTWwzQyxJQUFhbXBFLEdBQUduZ0UsRUFBRWhDLElBQzVPLElBQUkybEUsR0FBRyxDQUFDeUIsWUFBWXJILEdBQUdocEIsWUFBWS9CLEdBQUVnQyxXQUFXaEMsR0FBRWlDLFVBQVVqQyxHQUFFa0Msb0JBQW9CbEMsR0FBRW9DLGdCQUFnQnBDLEdBQUVxQyxRQUFRckMsR0FBRXNDLFdBQVd0QyxHQUFFdUMsT0FBT3ZDLEdBQUV3QyxTQUFTeEMsR0FBRW1DLGNBQWNuQyxHQUFFcXlCLGFBQWFyeUIsR0FBRXN5QixpQkFBaUJ0eUIsR0FBRXV5QixjQUFjdnlCLElBQUd5d0IsR0FBRyxDQUFDMkIsWUFBWXJILEdBQUdocEIsWUFBWW13QixHQUFHbHdCLFdBQVcrb0IsR0FBRzlvQixVQUFVNnZCLEdBQUc1dkIsb0JBQW9CLFNBQVNsMUMsRUFBRUMsRUFBRWhKLEdBQTZDLE9BQTFDQSxFQUFFLE1BQU9BLEVBQWNBLEVBQUVxTixPQUFPLENBQUN0RSxJQUFJLEtBQVk0a0UsR0FBRyxFQUFFLEdBQUdJLEdBQUc1c0UsS0FBSyxLQUFLNkgsRUFBRUQsR0FBRy9JLElBQUltK0MsZ0JBQWdCLFNBQVNwMUMsRUFBRUMsR0FBRyxPQUFPMmtFLEdBQUcsRUFBRSxHQUFHNWtFLEVBQUVDLElBQUlvMUMsUUFBUSxTQUFTcjFDLEVBQUVDLEdBQUcsSUFBSWhKLEVBQUU0c0UsS0FDN2MsT0FEa2Q1akUsT0FBRSxJQUFTQSxFQUFFLEtBQUtBLEVBQUVELEVBQUVBLElBQUkvSSxFQUFFNnBELGNBQ3BmLENBQUM5Z0QsRUFBRUMsR0FBVUQsR0FBR3MxQyxXQUFXLFNBQVN0MUMsRUFBRUMsRUFBRWhKLEdBQUcsSUFBSUMsRUFBRTJzRSxLQUFxSyxPQUFoSzVqRSxPQUFFLElBQVNoSixFQUFFQSxFQUFFZ0osR0FBR0EsRUFBRS9JLEVBQUU0cEQsY0FBYzVwRCxFQUFFa25FLFVBQVVuK0QsRUFBZ0ZELEdBQTlFQSxFQUFFOUksRUFBRTRhLE1BQU0sQ0FBQ3F5RCxLQUFLLEtBQUs1bkUsU0FBUyxLQUFLMm5FLG9CQUFvQmxrRSxFQUFFb2tFLGtCQUFrQm5rRSxJQUFPMUQsU0FBU2lvRSxHQUFHcHNFLEtBQUssS0FBS3lxRSxHQUFHN2lFLEdBQVMsQ0FBQzlJLEVBQUU0cEQsY0FBYzlnRCxJQUFJdTFDLE9BQU8sU0FBU3YxQyxHQUE0QixPQUFkQSxFQUFFLENBQUNteUMsUUFBUW55QyxHQUFoQjZqRSxLQUE0Qi9pQixjQUFjOWdELEdBQUd3MUMsU0FBUyt1QixHQUFHcHZCLGNBQWM4dkIsR0FBR0ksYUFBYTNDLEdBQUc0QyxpQkFBaUIsU0FBU3RsRSxFQUFFQyxHQUFHLElBQUloSixFQUFFc3RFLEdBQUd2a0UsR0FBRzlJLEVBQUVELEVBQUUsR0FBRytHLEVBQUUvRyxFQUFFLEdBQzdZLE9BRGdaNnRFLElBQUcsV0FBV3AwQixFQUFFODBCLGVBQWMsV0FBVyxJQUFJdnVFLEVBQUU0N0MsR0FBRXNELFNBQVN0RCxHQUFFc0QsY0FBUyxJQUFTbDJDLEVBQUUsS0FBS0EsRUFBRSxJQUFJakMsRUFBRWdDLEdBQUcsUUFBUTZ5QyxHQUFFc0QsU0FDdmdCbC9DLFFBQU0sQ0FBQytJLEVBQUVDLElBQVcvSSxHQUFHcXVFLGNBQWMsU0FBU3ZsRSxHQUFHLElBQUlDLEVBQUVza0UsSUFBRyxHQUFJdHRFLEVBQUVnSixFQUFFLEdBQUcvSSxFQUFFK0ksRUFBRSxHQUFHLE1BQU0sQ0FBQ2lsRSxJQUFHLFNBQVNqbEUsR0FBRy9JLEdBQUUsR0FBSXc1QyxFQUFFODBCLGVBQWMsV0FBVyxJQUFJdnVFLEVBQUU0N0MsR0FBRXNELFNBQVN0RCxHQUFFc0QsY0FBUyxJQUFTbjJDLEVBQUUsS0FBS0EsRUFBRSxJQUFJOUksR0FBRSxHQUFJK0ksSUFBSSxRQUFRNHlDLEdBQUVzRCxTQUFTbC9DLFFBQU0sQ0FBQytJLEVBQUUvSSxJQUFJQSxLQUFLeXNFLEdBQUcsQ0FBQzBCLFlBQVlySCxHQUFHaHBCLFlBQVlvd0IsR0FBR253QixXQUFXK29CLEdBQUc5b0IsVUFBVTh2QixHQUFHN3ZCLG9CQUFvQixTQUFTbDFDLEVBQUVDLEVBQUVoSixHQUE2QyxPQUExQ0EsRUFBRSxNQUFPQSxFQUFjQSxFQUFFcU4sT0FBTyxDQUFDdEUsSUFBSSxLQUFZNmtFLEdBQUcsRUFBRSxHQUFHRyxHQUFHNXNFLEtBQUssS0FBSzZILEVBQUVELEdBQUcvSSxJQUFJbStDLGdCQUFnQixTQUFTcDFDLEVBQUVDLEdBQUcsT0FBTzRrRSxHQUFHLEVBQUUsR0FBRzdrRSxFQUFFQyxJQUFJbzFDLFFBQVEsU0FBU3IxQyxFQUFFQyxHQUFHLElBQUloSixFQUFFOHNFLEtBQUs5akUsT0FBRSxJQUFTQSxFQUNuZixLQUFLQSxFQUFFLElBQUkvSSxFQUFFRCxFQUFFNnBELGNBQWMsT0FBRyxPQUFPNXBELEdBQUcsT0FBTytJLEdBQUdzakUsR0FBR3RqRSxFQUFFL0ksRUFBRSxJQUFXQSxFQUFFLElBQUc4SSxFQUFFQSxJQUFJL0ksRUFBRTZwRCxjQUFjLENBQUM5Z0QsRUFBRUMsR0FBVUQsSUFBR3MxQyxXQUFXMnVCLEdBQUcxdUIsT0FBTyxXQUFXLE9BQU93dUIsS0FBS2pqQixlQUFldEwsU0FBU2l2QixHQUFHdHZCLGNBQWM4dkIsR0FBR0ksYUFBYTNDLEdBQUc0QyxpQkFBaUIsU0FBU3RsRSxFQUFFQyxHQUFHLElBQUloSixFQUFFd3RFLEtBQU12dEUsRUFBRUQsRUFBRSxHQUFHK0csRUFBRS9HLEVBQUUsR0FBbUksT0FBaEk4dEUsSUFBRyxXQUFXcjBCLEVBQUU4MEIsZUFBYyxXQUFXLElBQUl2dUUsRUFBRTQ3QyxHQUFFc0QsU0FBU3RELEdBQUVzRCxjQUFTLElBQVNsMkMsRUFBRSxLQUFLQSxFQUFFLElBQUlqQyxFQUFFZ0MsR0FBRyxRQUFRNnlDLEdBQUVzRCxTQUFTbC9DLFFBQU0sQ0FBQytJLEVBQUVDLElBQVcvSSxHQUFHcXVFLGNBQWMsU0FBU3ZsRSxHQUFHLElBQUlDLEVBQUV3a0UsS0FBT3h0RSxFQUFFZ0osRUFBRSxHQUFHL0ksRUFBRStJLEVBQUUsR0FBRyxNQUFNLENBQUNrbEUsSUFBRyxTQUFTbGxFLEdBQUcvSSxHQUFFLEdBQUl3NUMsRUFBRTgwQixlQUFjLFdBQVcsSUFBSXZ1RSxFQUM1Z0I0N0MsR0FBRXNELFNBQVN0RCxHQUFFc0QsY0FBUyxJQUFTbjJDLEVBQUUsS0FBS0EsRUFBRSxJQUFJOUksR0FBRSxHQUFJK0ksSUFBSSxRQUFRNHlDLEdBQUVzRCxTQUFTbC9DLFFBQU0sQ0FBQytJLEVBQUUvSSxJQUFJQSxLQUFLd3VFLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxJQUFHLEVBQUcsU0FBU0MsR0FBRzVsRSxFQUFFQyxHQUFHLElBQUloSixFQUFFNHVFLEdBQUcsRUFBRSxLQUFLLEtBQUssR0FBRzV1RSxFQUFFcXFFLFlBQVksVUFBVXJxRSxFQUFFd0YsS0FBSyxVQUFVeEYsRUFBRTRoRCxVQUFVNTRDLEVBQUVoSixFQUFFc2pELE9BQU92NkMsRUFBRS9JLEVBQUUycEQsVUFBVSxFQUFFLE9BQU81Z0QsRUFBRTArRCxZQUFZMStELEVBQUUwK0QsV0FBV00sV0FBVy9uRSxFQUFFK0ksRUFBRTArRCxXQUFXem5FLEdBQUcrSSxFQUFFeStELFlBQVl6K0QsRUFBRTArRCxXQUFXem5FLEVBQ3BVLFNBQVMyZ0IsR0FBRzVYLEVBQUVDLEdBQUcsT0FBT0QsRUFBRWs2QyxLQUFLLEtBQUssRUFBRSxJQUFJampELEVBQUUrSSxFQUFFdkQsS0FBeUUsT0FBTyxRQUEzRXdELEVBQUUsSUFBSUEsRUFBRXcvQyxVQUFVeG9ELEVBQUV1ZSxnQkFBZ0J2VixFQUFFdzhDLFNBQVNqbkMsY0FBYyxLQUFLdlYsS0FBbUJELEVBQUU2NEMsVUFBVTU0QyxHQUFFLEdBQU8sS0FBSyxFQUFFLE9BQW9ELFFBQTdDQSxFQUFFLEtBQUtELEVBQUU4bEUsY0FBYyxJQUFJN2xFLEVBQUV3L0MsU0FBUyxLQUFLeC9DLEtBQVlELEVBQUU2NEMsVUFBVTU0QyxHQUFFLEdBQU8sS0FBSyxHQUFZLFFBQVEsT0FBTSxHQUN0UixTQUFTOGxFLEdBQUcvbEUsR0FBRyxHQUFHMmxFLEdBQUcsQ0FBQyxJQUFJMWxFLEVBQUV5bEUsR0FBRyxHQUFHemxFLEVBQUUsQ0FBQyxJQUFJaEosRUFBRWdKLEVBQUUsSUFBSTJYLEdBQUc1WCxFQUFFQyxHQUFHLENBQXFCLEtBQXBCQSxFQUFFK3NCLEdBQUcvMUIsRUFBRWsxQyxnQkFBcUJ2MEIsR0FBRzVYLEVBQUVDLEdBQStDLE9BQTNDRCxFQUFFNGdELFdBQXVCLEtBQWI1Z0QsRUFBRTRnRCxVQUFnQixFQUFFK2tCLElBQUcsT0FBR0YsR0FBR3psRSxHQUFTNGxFLEdBQUdILEdBQUd4dUUsR0FBR3d1RSxHQUFHemxFLEVBQUUwbEUsR0FBRzE0QyxHQUFHL3NCLEVBQUUySCxpQkFBaUI1SCxFQUFFNGdELFdBQXVCLEtBQWI1Z0QsRUFBRTRnRCxVQUFnQixFQUFFK2tCLElBQUcsRUFBR0YsR0FBR3psRSxHQUFHLFNBQVNnbUUsR0FBR2htRSxHQUFHLElBQUlBLEVBQUVBLEVBQUV1NkMsT0FBTyxPQUFPdjZDLEdBQUcsSUFBSUEsRUFBRWs2QyxLQUFLLElBQUlsNkMsRUFBRWs2QyxLQUFLLEtBQUtsNkMsRUFBRWs2QyxLQUFLbDZDLEVBQUVBLEVBQUV1NkMsT0FBT2tyQixHQUFHemxFLEVBQzVULFNBQVNpbUUsR0FBR2ptRSxHQUFHLEdBQUdBLElBQUl5bEUsR0FBRyxPQUFNLEVBQUcsSUFBSUUsR0FBRyxPQUFPSyxHQUFHaG1FLEdBQUcybEUsSUFBRyxHQUFHLEVBQUcsSUFBSTFsRSxFQUFFRCxFQUFFdkQsS0FBSyxHQUFHLElBQUl1RCxFQUFFazZDLEtBQUssU0FBU2o2QyxHQUFHLFNBQVNBLElBQUl5ekQsR0FBR3p6RCxFQUFFRCxFQUFFd2lFLGVBQWUsSUFBSXZpRSxFQUFFeWxFLEdBQUd6bEUsR0FBRzJsRSxHQUFHNWxFLEVBQUVDLEdBQUdBLEVBQUUrc0IsR0FBRy9zQixFQUFFa3NDLGFBQW1CLEdBQU42NUIsR0FBR2htRSxHQUFNLEtBQUtBLEVBQUVrNkMsSUFBSSxDQUFnRCxLQUE3Qmw2QyxFQUFFLFFBQXBCQSxFQUFFQSxFQUFFOGdELGVBQXlCOWdELEVBQUUrZ0QsV0FBVyxNQUFXLE1BQU16bEQsTUFBTXExQyxFQUFFLE1BQU0zd0MsRUFBRSxDQUFpQixJQUFoQkEsRUFBRUEsRUFBRW1zQyxZQUFnQmxzQyxFQUFFLEVBQUVELEdBQUcsQ0FBQyxHQUFHLElBQUlBLEVBQUV5L0MsU0FBUyxDQUFDLElBQUl4b0QsRUFBRStJLEVBQUVxRSxLQUFLLEdBQUdwTixJQUFJazhELEdBQUcsQ0FBQyxHQUFHLElBQUlsekQsRUFBRSxDQUFDeWxFLEdBQUcxNEMsR0FBR2h0QixFQUFFbXNDLGFBQWEsTUFBTW5zQyxFQUFFQyxTQUFTaEosSUFBSWk4RCxJQUFJajhELElBQUlvOEQsSUFBSXA4RCxJQUFJbThELElBQUluekQsSUFBSUQsRUFBRUEsRUFBRW1zQyxZQUFZdTVCLEdBQUcsV0FBV0EsR0FBR0QsR0FBR3o0QyxHQUFHaHRCLEVBQUU2NEMsVUFBVTFNLGFBQWEsS0FBSyxPQUFNLEVBQ2hmLFNBQVN4USxLQUFLK3BDLEdBQUdELEdBQUcsS0FBS0UsSUFBRyxFQUFHLElBQUlwb0MsR0FBR3diLEVBQUczQyxrQkFBa0IwbkIsSUFBRyxFQUFHLFNBQVMxcUIsR0FBRXB6QyxFQUFFQyxFQUFFaEosRUFBRUMsR0FBRytJLEVBQUVpaEQsTUFBTSxPQUFPbGhELEVBQUU2aEUsR0FBRzVoRSxFQUFFLEtBQUtoSixFQUFFQyxHQUFHMHFFLEdBQUczaEUsRUFBRUQsRUFBRWtoRCxNQUFNanFELEVBQUVDLEdBQUcsU0FBU2d2RSxHQUFHbG1FLEVBQUVDLEVBQUVoSixFQUFFQyxFQUFFOEcsR0FBRy9HLEVBQUVBLEVBQUU4cEIsT0FBTyxJQUFJdFksRUFBRXhJLEVBQUVzeUMsSUFBOEIsT0FBMUJvckIsR0FBRzE5RCxFQUFFakMsR0FBRzlHLEVBQUVzc0UsR0FBR3hqRSxFQUFFQyxFQUFFaEosRUFBRUMsRUFBRXVSLEVBQUV6SyxHQUFNLE9BQU9nQyxHQUFJODlELElBQTRHNzlELEVBQUUyZ0QsV0FBVyxFQUFFeE4sR0FBRXB6QyxFQUFFQyxFQUFFL0ksRUFBRThHLEdBQVVpQyxFQUFFaWhELFFBQXJJamhELEVBQUVrL0QsWUFBWW4vRCxFQUFFbS9ELFlBQVlsL0QsRUFBRTJnRCxZQUFZLElBQUk1Z0QsRUFBRTY5RCxnQkFBZ0I3L0QsSUFBSWdDLEVBQUU2OUQsZUFBZSxHQUFHc0ksR0FBR25tRSxFQUFFQyxFQUFFakMsSUFDdFUsU0FBU29vRSxHQUFHcG1FLEVBQUVDLEVBQUVoSixFQUFFQyxFQUFFOEcsRUFBRXlLLEdBQUcsR0FBRyxPQUFPekksRUFBRSxDQUFDLElBQUkraEIsRUFBRTlxQixFQUFFd0YsS0FBSyxNQUFHLG1CQUFvQnNsQixHQUFJc2tELEdBQUd0a0QsU0FBSSxJQUFTQSxFQUFFakMsY0FBYyxPQUFPN29CLEVBQUV3aUIsY0FBUyxJQUFTeGlCLEVBQUU2b0IsZUFBc0Q5ZixFQUFFdWhFLEdBQUd0cUUsRUFBRXdGLEtBQUssS0FBS3ZGLEVBQUUsS0FBSytJLEVBQUVsSSxLQUFLMFEsSUFBSzhwQyxJQUFJdHlDLEVBQUVzeUMsSUFBSXZ5QyxFQUFFdTZDLE9BQU90NkMsRUFBU0EsRUFBRWloRCxNQUFNbGhELElBQTFHQyxFQUFFaTZDLElBQUksR0FBR2o2QyxFQUFFeEQsS0FBS3NsQixFQUFFdWtELEdBQUd0bUUsRUFBRUMsRUFBRThoQixFQUFFN3FCLEVBQUU4RyxFQUFFeUssSUFBdUYsT0FBVnNaLEVBQUUvaEIsRUFBRWtoRCxNQUFTbGpELEVBQUV5SyxJQUFJekssRUFBRStqQixFQUFFeWdELGVBQTBCdnJFLEVBQUUsUUFBZEEsRUFBRUEsRUFBRXdpQixTQUFtQnhpQixFQUFFdWhFLElBQUt4NkQsRUFBRTlHLElBQUk4SSxFQUFFdXlDLE1BQU10eUMsRUFBRXN5QyxLQUFZNHpCLEdBQUdubUUsRUFBRUMsRUFBRXdJLElBQUd4SSxFQUFFMmdELFdBQVcsR0FBRTVnRCxFQUFFb2hFLEdBQUdyL0MsRUFBRTdxQixJQUFPcTdDLElBQUl0eUMsRUFBRXN5QyxJQUFJdnlDLEVBQUV1NkMsT0FBT3Q2QyxFQUFTQSxFQUFFaWhELE1BQU1saEQsR0FDcmIsU0FBU3NtRSxHQUFHdG1FLEVBQUVDLEVBQUVoSixFQUFFQyxFQUFFOEcsRUFBRXlLLEdBQUcsT0FBTyxPQUFPekksR0FBR3c0RCxHQUFHeDRELEVBQUV3aUUsY0FBY3RyRSxJQUFJOEksRUFBRXV5QyxNQUFNdHlDLEVBQUVzeUMsTUFBTXVyQixJQUFHLEVBQUc5L0QsRUFBRXlLLEdBQUcwOUQsR0FBR25tRSxFQUFFQyxFQUFFd0ksR0FBRzg5RCxHQUFHdm1FLEVBQUVDLEVBQUVoSixFQUFFQyxFQUFFdVIsR0FBRyxTQUFTKzlELEdBQUd4bUUsRUFBRUMsR0FBRyxJQUFJaEosRUFBRWdKLEVBQUVzeUMsS0FBTyxPQUFPdnlDLEdBQUcsT0FBTy9JLEdBQUcsT0FBTytJLEdBQUdBLEVBQUV1eUMsTUFBTXQ3QyxLQUFFZ0osRUFBRTJnRCxXQUFXLEtBQUksU0FBUzJsQixHQUFHdm1FLEVBQUVDLEVBQUVoSixFQUFFQyxFQUFFOEcsR0FBRyxJQUFJeUssRUFBRTZwQyxHQUFFcjdDLEdBQUdnakUsR0FBRzduQixHQUFFRCxRQUE0QyxPQUFwQzFwQyxFQUFFeXhELEdBQUdqNkQsRUFBRXdJLEdBQUdrMUQsR0FBRzE5RCxFQUFFakMsR0FBRy9HLEVBQUV1c0UsR0FBR3hqRSxFQUFFQyxFQUFFaEosRUFBRUMsRUFBRXVSLEVBQUV6SyxHQUFNLE9BQU9nQyxHQUFJODlELElBQTRHNzlELEVBQUUyZ0QsV0FBVyxFQUFFeE4sR0FBRXB6QyxFQUFFQyxFQUFFaEosRUFBRStHLEdBQVVpQyxFQUFFaWhELFFBQXJJamhELEVBQUVrL0QsWUFBWW4vRCxFQUFFbS9ELFlBQVlsL0QsRUFBRTJnRCxZQUFZLElBQUk1Z0QsRUFBRTY5RCxnQkFBZ0I3L0QsSUFBSWdDLEVBQUU2OUQsZUFBZSxHQUFHc0ksR0FBR25tRSxFQUFFQyxFQUFFakMsSUFDdlosU0FBU3lvRSxHQUFHem1FLEVBQUVDLEVBQUVoSixFQUFFQyxFQUFFOEcsR0FBRyxHQUFHczBDLEdBQUVyN0MsR0FBRyxDQUFDLElBQUl3UixHQUFFLEVBQUdpeUQsR0FBR3o2RCxRQUFRd0ksR0FBRSxFQUFXLEdBQVJrMUQsR0FBRzE5RCxFQUFFakMsR0FBTSxPQUFPaUMsRUFBRTQ0QyxVQUFVLE9BQU83NEMsSUFBSUEsRUFBRTJnRCxVQUFVLEtBQUsxZ0QsRUFBRTBnRCxVQUFVLEtBQUsxZ0QsRUFBRTJnRCxXQUFXLEdBQUcwZixHQUFHcmdFLEVBQUVoSixFQUFFQyxHQUFLd3BFLEdBQUd6Z0UsRUFBRWhKLEVBQUVDLEVBQUU4RyxHQUFHOUcsR0FBRSxPQUFRLEdBQUcsT0FBTzhJLEVBQUUsQ0FBQyxJQUFJK2hCLEVBQUU5aEIsRUFBRTQ0QyxVQUFVckksRUFBRXZ3QyxFQUFFdWlFLGNBQWN6Z0QsRUFBRTNvQixNQUFNbzNDLEVBQUUsSUFBSXRDLEVBQUVuc0IsRUFBRTB2QixRQUFRNTZDLEVBQUVJLEVBQUUyb0IsWUFBWSxpQkFBa0Ivb0IsR0FBRyxPQUFPQSxFQUFFQSxFQUFFa25FLEdBQUdsbkUsR0FBd0JBLEVBQUVxakUsR0FBR2o2RCxFQUF6QnBKLEVBQUV5N0MsR0FBRXI3QyxHQUFHZ2pFLEdBQUc3bkIsR0FBRUQsU0FBbUIsSUFBSW43QyxFQUFFQyxFQUFFaXBCLHlCQUF5Qmd4QixFQUFFLG1CQUFvQmw2QyxHQUFHLG1CQUFvQitxQixFQUFFNCtDLHdCQUF3Qnp2QixHQUFHLG1CQUFvQm52QixFQUFFMCtDLGtDQUN4ZCxtQkFBb0IxK0MsRUFBRXkrQyw0QkFBNEJod0IsSUFBSXQ1QyxHQUFHZzNDLElBQUlyM0MsSUFBSTBwRSxHQUFHdGdFLEVBQUU4aEIsRUFBRTdxQixFQUFFTCxHQUFHcW5FLElBQUcsRUFBRyxJQUFJdmtELEVBQUUxWixFQUFFNmdELGNBQWM1UyxFQUFFbnNCLEVBQUU5akIsTUFBTTBiLEVBQUUsSUFBSXE0QixFQUFFL3hDLEVBQUVrL0QsWUFBWSxPQUFPbnRCLElBQUl1dEIsR0FBR3QvRCxFQUFFK3hDLEVBQUU5NkMsRUFBRTZxQixFQUFFL2pCLEdBQUdrd0MsRUFBRWp1QyxFQUFFNmdELGVBQWV0USxJQUFJdDVDLEdBQUd5aUIsSUFBSXUwQixHQUFHbUUsR0FBRUYsU0FBUytyQixJQUFJLG1CQUFvQmxuRSxJQUFJOG9FLEdBQUc3L0QsRUFBRWhKLEVBQUVELEVBQUVFLEdBQUdnM0MsRUFBRWp1QyxFQUFFNmdELGdCQUFnQnRRLEVBQUUwdEIsSUFBSWtDLEdBQUduZ0UsRUFBRWhKLEVBQUV1NUMsRUFBRXQ1QyxFQUFFeWlCLEVBQUV1MEIsRUFBRXIzQyxLQUFLcTZDLEdBQUcsbUJBQW9CbnZCLEVBQUU2K0MsMkJBQTJCLG1CQUFvQjcrQyxFQUFFOCtDLHFCQUFxQixtQkFBb0I5K0MsRUFBRTgrQyxvQkFBb0I5K0MsRUFBRTgrQyxxQkFBcUIsbUJBQW9COStDLEVBQUU2K0MsMkJBQzFkNytDLEVBQUU2K0MsNkJBQTZCLG1CQUFvQjcrQyxFQUFFKytDLG9CQUFvQjdnRSxFQUFFMmdELFdBQVcsS0FBSyxtQkFBb0I3K0IsRUFBRSsrQyxvQkFBb0I3Z0UsRUFBRTJnRCxXQUFXLEdBQUczZ0QsRUFBRXVpRSxjQUFjdHJFLEVBQUUrSSxFQUFFNmdELGNBQWM1UyxHQUFHbnNCLEVBQUUzb0IsTUFBTWxDLEVBQUU2cUIsRUFBRTlqQixNQUFNaXdDLEVBQUVuc0IsRUFBRTB2QixRQUFRNTZDLEVBQUVLLEVBQUVzNUMsSUFBSSxtQkFBb0J6dUIsRUFBRSsrQyxvQkFBb0I3Z0UsRUFBRTJnRCxXQUFXLEdBQUcxcEQsR0FBRSxRQUFTNnFCLEVBQUU5aEIsRUFBRTQ0QyxVQUFVckksRUFBRXZ3QyxFQUFFdWlFLGNBQWN6Z0QsRUFBRTNvQixNQUFNNkcsRUFBRXhELE9BQU93RCxFQUFFcWhFLFlBQVk5d0IsRUFBRXlzQixHQUFHaDlELEVBQUV4RCxLQUFLK3pDLEdBQUd0QyxFQUFFbnNCLEVBQUUwdkIsUUFBd0IsaUJBQWhCNTZDLEVBQUVJLEVBQUUyb0IsY0FBaUMsT0FBTy9vQixFQUFFQSxFQUFFa25FLEdBQUdsbkUsR0FBd0JBLEVBQUVxakUsR0FBR2o2RCxFQUF6QnBKLEVBQUV5N0MsR0FBRXI3QyxHQUFHZ2pFLEdBQUc3bkIsR0FBRUQsVUFBaURqQixFQUNuZixtQkFEcWRsNkMsRUFBRUMsRUFBRWlwQiwyQkFDbGMsbUJBQW9CNkIsRUFBRTQrQywwQkFBMEIsbUJBQW9CNStDLEVBQUUwK0Msa0NBQWtDLG1CQUFvQjErQyxFQUFFeStDLDRCQUE0Qmh3QixJQUFJdDVDLEdBQUdnM0MsSUFBSXIzQyxJQUFJMHBFLEdBQUd0Z0UsRUFBRThoQixFQUFFN3FCLEVBQUVMLEdBQUdxbkUsSUFBRyxFQUFHaHdCLEVBQUVqdUMsRUFBRTZnRCxjQUFjbm5DLEVBQUVvSSxFQUFFOWpCLE1BQU1pd0MsRUFBa0IsUUFBaEI4RCxFQUFFL3hDLEVBQUVrL0QsZUFBdUJJLEdBQUd0L0QsRUFBRSt4QyxFQUFFOTZDLEVBQUU2cUIsRUFBRS9qQixHQUFHMmIsRUFBRTFaLEVBQUU2Z0QsZUFBZXRRLElBQUl0NUMsR0FBR2czQyxJQUFJdjBCLEdBQUcwNEIsR0FBRUYsU0FBUytyQixJQUFJLG1CQUFvQmxuRSxJQUFJOG9FLEdBQUc3L0QsRUFBRWhKLEVBQUVELEVBQUVFLEdBQUd5aUIsRUFBRTFaLEVBQUU2Z0QsZ0JBQWdCOXBELEVBQUVrbkUsSUFBSWtDLEdBQUduZ0UsRUFBRWhKLEVBQUV1NUMsRUFBRXQ1QyxFQUFFZzNDLEVBQUV2MEIsRUFBRTlpQixLQUFLcTZDLEdBQUcsbUJBQW9CbnZCLEVBQUUya0QsNEJBQTRCLG1CQUFvQjNrRCxFQUFFNGtELHNCQUNyZSxtQkFBb0I1a0QsRUFBRTRrRCxxQkFBcUI1a0QsRUFBRTRrRCxvQkFBb0J6dkUsRUFBRXlpQixFQUFFOWlCLEdBQUcsbUJBQW9Ca3JCLEVBQUUya0QsNEJBQTRCM2tELEVBQUUya0QsMkJBQTJCeHZFLEVBQUV5aUIsRUFBRTlpQixJQUFJLG1CQUFvQmtyQixFQUFFNmtELHFCQUFxQjNtRSxFQUFFMmdELFdBQVcsR0FBRyxtQkFBb0I3K0IsRUFBRTQrQywwQkFBMEIxZ0UsRUFBRTJnRCxXQUFXLE9BQU8sbUJBQW9CNytCLEVBQUU2a0Qsb0JBQW9CcDJCLElBQUl4d0MsRUFBRXdpRSxlQUFldDBCLElBQUlsdUMsRUFBRThnRCxnQkFBZ0I3Z0QsRUFBRTJnRCxXQUFXLEdBQUcsbUJBQW9CNytCLEVBQUU0K0MseUJBQXlCbndCLElBQUl4d0MsRUFBRXdpRSxlQUFldDBCLElBQUlsdUMsRUFBRThnRCxnQkFBZ0I3Z0QsRUFBRTJnRCxXQUFXLEtBQUszZ0QsRUFBRXVpRSxjQUNsZnRyRSxFQUFFK0ksRUFBRTZnRCxjQUFjbm5DLEdBQUdvSSxFQUFFM29CLE1BQU1sQyxFQUFFNnFCLEVBQUU5akIsTUFBTTBiLEVBQUVvSSxFQUFFMHZCLFFBQVE1NkMsRUFBRUssRUFBRUYsSUFBSSxtQkFBb0IrcUIsRUFBRTZrRCxvQkFBb0JwMkIsSUFBSXh3QyxFQUFFd2lFLGVBQWV0MEIsSUFBSWx1QyxFQUFFOGdELGdCQUFnQjdnRCxFQUFFMmdELFdBQVcsR0FBRyxtQkFBb0I3K0IsRUFBRTQrQyx5QkFBeUJud0IsSUFBSXh3QyxFQUFFd2lFLGVBQWV0MEIsSUFBSWx1QyxFQUFFOGdELGdCQUFnQjdnRCxFQUFFMmdELFdBQVcsS0FBSzFwRCxHQUFFLEdBQUksT0FBTzJ2RSxHQUFHN21FLEVBQUVDLEVBQUVoSixFQUFFQyxFQUFFdVIsRUFBRXpLLEdBQ3RTLFNBQVM2b0UsR0FBRzdtRSxFQUFFQyxFQUFFaEosRUFBRUMsRUFBRThHLEVBQUV5SyxHQUFHKzlELEdBQUd4bUUsRUFBRUMsR0FBRyxJQUFJOGhCLEVBQUUsSUFBaUIsR0FBWjloQixFQUFFMmdELFdBQWMsSUFBSTFwRCxJQUFJNnFCLEVBQUUsT0FBTy9qQixHQUFHNDhELEdBQUczNkQsRUFBRWhKLEdBQUUsR0FBSWt2RSxHQUFHbm1FLEVBQUVDLEVBQUV3SSxHQUFHdlIsRUFBRStJLEVBQUU0NEMsVUFBVXRiLEdBQUc0VSxRQUFRbHlDLEVBQUUsSUFBSXV3QyxFQUFFenVCLEdBQUcsbUJBQW9COXFCLEVBQUVncEIseUJBQXlCLEtBQUsvb0IsRUFBRTZwQixTQUEySSxPQUFsSTlnQixFQUFFMmdELFdBQVcsRUFBRSxPQUFPNWdELEdBQUcraEIsR0FBRzloQixFQUFFaWhELE1BQU0wZ0IsR0FBRzNoRSxFQUFFRCxFQUFFa2hELE1BQU0sS0FBS3o0QyxHQUFHeEksRUFBRWloRCxNQUFNMGdCLEdBQUczaEUsRUFBRSxLQUFLdXdDLEVBQUUvbkMsSUFBSTJxQyxHQUFFcHpDLEVBQUVDLEVBQUV1d0MsRUFBRS9uQyxHQUFHeEksRUFBRTZnRCxjQUFjNXBELEVBQUUrRyxNQUFNRCxHQUFHNDhELEdBQUczNkQsRUFBRWhKLEdBQUUsR0FBV2dKLEVBQUVpaEQsTUFBTSxTQUFTNGxCLEdBQUc5bUUsR0FBRyxJQUFJQyxFQUFFRCxFQUFFNjRDLFVBQVU1NEMsRUFBRThtRSxlQUFleE0sR0FBR3Y2RCxFQUFFQyxFQUFFOG1FLGVBQWU5bUUsRUFBRThtRSxpQkFBaUI5bUUsRUFBRXd4QyxTQUFTeHhDLEVBQUV3eEMsU0FBUzhvQixHQUFHdjZELEVBQUVDLEVBQUV3eEMsU0FBUSxHQUFJMHdCLEdBQUduaUUsRUFBRUMsRUFBRWdqRCxlQUNwZSxJQU9vYitqQixHQUFHQyxHQUFHQyxHQUFHQyxHQVB6YkMsR0FBRyxDQUFDcm1CLFdBQVcsS0FBS3NtQixVQUFVLEdBQ2xDLFNBQVNDLEdBQUd0bkUsRUFBRUMsRUFBRWhKLEdBQUcsSUFBK0N1NUMsRUFBM0N0NUMsRUFBRStJLEVBQUVsSSxLQUFLaUcsRUFBRWlDLEVBQUU2bEUsYUFBYXI5RCxFQUFFaXFDLEdBQUVQLFFBQVFwd0IsR0FBRSxFQUF1TixJQUFqTnl1QixFQUFFLElBQWlCLEdBQVp2d0MsRUFBRTJnRCxjQUFpQnBRLEVBQUUsSUFBTyxFQUFGL25DLEtBQU8sT0FBT3pJLEdBQUcsT0FBT0EsRUFBRThnRCxnQkFBZ0J0USxHQUFHenVCLEdBQUUsRUFBRzloQixFQUFFMmdELFlBQVksSUFBSSxPQUFPNWdELEdBQUcsT0FBT0EsRUFBRThnRCxvQkFBZSxJQUFTOWlELEVBQUV1cEUsV0FBVSxJQUFLdnBFLEVBQUV3cEUsNkJBQTZCLytELEdBQUcsR0FBR3lwQyxHQUFFUSxHQUFJLEVBQUZqcUMsR0FBVSxPQUFPekksRUFBRSxDQUE0QixRQUEzQixJQUFTaEMsRUFBRXVwRSxVQUFVeEIsR0FBRzlsRSxHQUFNOGhCLEVBQUUsQ0FBNkMsR0FBNUNBLEVBQUUvakIsRUFBRXVwRSxVQUFTdnBFLEVBQUUwakUsR0FBRyxLQUFLeHFFLEVBQUUsRUFBRSxPQUFRcWpELE9BQU90NkMsRUFBSyxJQUFZLEVBQVBBLEVBQUVsSSxNQUFRLElBQUlpSSxFQUFFLE9BQU9DLEVBQUU2Z0QsY0FBYzdnRCxFQUFFaWhELE1BQU1BLE1BQU1qaEQsRUFBRWloRCxNQUFNbGpELEVBQUVrakQsTUFBTWxoRCxFQUFFLE9BQU9BLEdBQUdBLEVBQUV1NkMsT0FBT3Y4QyxFQUFFZ0MsRUFBRUEsRUFBRW1oRCxRQUM3YSxPQURxYmxxRCxFQUFFeXFFLEdBQUczL0MsRUFBRTdxQixFQUFFRCxFQUFFLE9BQVFzakQsT0FDbmZ0NkMsRUFBRWpDLEVBQUVtakQsUUFBUWxxRCxFQUFFZ0osRUFBRTZnRCxjQUFjc21CLEdBQUdubkUsRUFBRWloRCxNQUFNbGpELEVBQVMvRyxFQUFvQyxPQUFsQ0MsRUFBRThHLEVBQUUwdEMsU0FBU3pyQyxFQUFFNmdELGNBQWMsS0FBWTdnRCxFQUFFaWhELE1BQU0yZ0IsR0FBRzVoRSxFQUFFLEtBQUsvSSxFQUFFRCxHQUFHLEdBQUcsT0FBTytJLEVBQUU4Z0QsY0FBYyxDQUF1QixHQUFaNXBELEdBQVY4SSxFQUFFQSxFQUFFa2hELE9BQVVDLFFBQVdwL0IsRUFBRSxDQUFrRCxHQUFqRC9qQixFQUFFQSxFQUFFdXBFLFVBQVN0d0UsRUFBRW1xRSxHQUFHcGhFLEVBQUVBLEVBQUU4bEUsZUFBa0J2ckIsT0FBT3Q2QyxFQUFLLElBQVksRUFBUEEsRUFBRWxJLFFBQVVncUIsRUFBRSxPQUFPOWhCLEVBQUU2Z0QsY0FBYzdnRCxFQUFFaWhELE1BQU1BLE1BQU1qaEQsRUFBRWloRCxTQUFVbGhELEVBQUVraEQsTUFBTyxJQUFJanFELEVBQUVpcUQsTUFBTW4vQixFQUFFLE9BQU9BLEdBQUdBLEVBQUV3NEIsT0FBT3RqRCxFQUFFOHFCLEVBQUVBLEVBQUVvL0IsUUFBK0csT0FBdkdqcUQsRUFBRWtxRSxHQUFHbHFFLEVBQUU4RyxFQUFFOUcsRUFBRTJtRSxpQkFBa0J0akIsT0FBT3Q2QyxFQUFFaEosRUFBRWtxRCxRQUFRanFELEVBQUVELEVBQUV5bUUsb0JBQW9CLEVBQUV6OUQsRUFBRTZnRCxjQUFjc21CLEdBQUdubkUsRUFBRWloRCxNQUFNanFELEVBQVNDLEVBQ3BjLE9BRHNjRCxFQUFFMnFFLEdBQUczaEUsRUFBRUQsRUFBRWtoRCxNQUFNbGpELEVBQUUwdEMsU0FBU3owQyxHQUFHZ0osRUFBRTZnRCxjQUMxZSxLQUFZN2dELEVBQUVpaEQsTUFBTWpxRCxFQUFZLEdBQVYrSSxFQUFFQSxFQUFFa2hELE1BQVNuL0IsRUFBRSxDQUE4RSxHQUE3RUEsRUFBRS9qQixFQUFFdXBFLFVBQVN2cEUsRUFBRTBqRSxHQUFHLEtBQUt4cUUsRUFBRSxFQUFFLE9BQVFxakQsT0FBT3Q2QyxFQUFFakMsRUFBRWtqRCxNQUFNbGhELEVBQUUsT0FBT0EsSUFBSUEsRUFBRXU2QyxPQUFPdjhDLEdBQU0sSUFBWSxFQUFQaUMsRUFBRWxJLE1BQVEsSUFBSWlJLEVBQUUsT0FBT0MsRUFBRTZnRCxjQUFjN2dELEVBQUVpaEQsTUFBTUEsTUFBTWpoRCxFQUFFaWhELE1BQU1sakQsRUFBRWtqRCxNQUFNbGhELEVBQUUsT0FBT0EsR0FBR0EsRUFBRXU2QyxPQUFPdjhDLEVBQUVnQyxFQUFFQSxFQUFFbWhELFFBQW9ILE9BQTVHbHFELEVBQUV5cUUsR0FBRzMvQyxFQUFFN3FCLEVBQUVELEVBQUUsT0FBUXNqRCxPQUFPdDZDLEVBQUVqQyxFQUFFbWpELFFBQVFscUQsRUFBRUEsRUFBRTJwRCxXQUFXLEVBQUU1aUQsRUFBRTAvRCxvQkFBb0IsRUFBRXo5RCxFQUFFNmdELGNBQWNzbUIsR0FBR25uRSxFQUFFaWhELE1BQU1sakQsRUFBUy9HLEVBQXVCLE9BQXJCZ0osRUFBRTZnRCxjQUFjLEtBQVk3Z0QsRUFBRWloRCxNQUFNMGdCLEdBQUczaEUsRUFBRUQsRUFBRWhDLEVBQUUwdEMsU0FBU3owQyxHQUM5WSxTQUFTd3dFLEdBQUd6bkUsRUFBRUMsR0FBR0QsRUFBRTY5RCxlQUFlNTlELElBQUlELEVBQUU2OUQsZUFBZTU5RCxHQUFHLElBQUloSixFQUFFK0ksRUFBRTJnRCxVQUFVLE9BQU8xcEQsR0FBR0EsRUFBRTRtRSxlQUFlNTlELElBQUloSixFQUFFNG1FLGVBQWU1OUQsR0FBR3c5RCxHQUFHejlELEVBQUV1NkMsT0FBT3Q2QyxHQUFHLFNBQVN5bkUsR0FBRzFuRSxFQUFFQyxFQUFFaEosRUFBRUMsRUFBRThHLEVBQUV5SyxHQUFHLElBQUlzWixFQUFFL2hCLEVBQUU4Z0QsY0FBYyxPQUFPLytCLEVBQUUvaEIsRUFBRThnRCxjQUFjLENBQUM2bUIsWUFBWTFuRSxFQUFFMm5FLFVBQVUsS0FBS3pELEtBQUtqdEUsRUFBRTJ3RSxLQUFLNXdFLEVBQUU2d0UsZUFBZSxFQUFFQyxTQUFTL3BFLEVBQUUwZ0UsV0FBV2oyRCxJQUFJc1osRUFBRTRsRCxZQUFZMW5FLEVBQUU4aEIsRUFBRTZsRCxVQUFVLEtBQUs3bEQsRUFBRW9pRCxLQUFLanRFLEVBQUU2cUIsRUFBRThsRCxLQUFLNXdFLEVBQUU4cUIsRUFBRStsRCxlQUFlLEVBQUUvbEQsRUFBRWdtRCxTQUFTL3BFLEVBQUUrakIsRUFBRTI4QyxXQUFXajJELEdBQzdZLFNBQVN1L0QsR0FBR2hvRSxFQUFFQyxFQUFFaEosR0FBRyxJQUFJQyxFQUFFK0ksRUFBRTZsRSxhQUFhOW5FLEVBQUU5RyxFQUFFdXJFLFlBQVloNkQsRUFBRXZSLEVBQUUyd0UsS0FBcUMsR0FBaEN6MEIsR0FBRXB6QyxFQUFFQyxFQUFFL0ksRUFBRXcwQyxTQUFTejBDLEdBQWtCLElBQU8sR0FBdEJDLEVBQUV3N0MsR0FBRVAsVUFBcUJqN0MsRUFBSSxFQUFGQSxFQUFJLEVBQUUrSSxFQUFFMmdELFdBQVcsT0FBTyxDQUFDLEdBQUcsT0FBTzVnRCxHQUFHLElBQWlCLEdBQVpBLEVBQUU0Z0QsV0FBYzVnRCxFQUFFLElBQUlBLEVBQUVDLEVBQUVpaEQsTUFBTSxPQUFPbGhELEdBQUcsQ0FBQyxHQUFHLEtBQUtBLEVBQUVrNkMsSUFBSSxPQUFPbDZDLEVBQUU4Z0QsZUFBZTJtQixHQUFHem5FLEVBQUUvSSxRQUFRLEdBQUcsS0FBSytJLEVBQUVrNkMsSUFBSXV0QixHQUFHem5FLEVBQUUvSSxRQUFRLEdBQUcsT0FBTytJLEVBQUVraEQsTUFBTSxDQUFDbGhELEVBQUVraEQsTUFBTTNHLE9BQU92NkMsRUFBRUEsRUFBRUEsRUFBRWtoRCxNQUFNLFNBQVMsR0FBR2xoRCxJQUFJQyxFQUFFLE1BQU1ELEVBQUUsS0FBSyxPQUFPQSxFQUFFbWhELFNBQVMsQ0FBQyxHQUFHLE9BQU9uaEQsRUFBRXU2QyxRQUFRdjZDLEVBQUV1NkMsU0FBU3Q2QyxFQUFFLE1BQU1ELEVBQUVBLEVBQUVBLEVBQUV1NkMsT0FBT3Y2QyxFQUFFbWhELFFBQVE1RyxPQUFPdjZDLEVBQUV1NkMsT0FBT3Y2QyxFQUFFQSxFQUFFbWhELFFBQVFqcUQsR0FBRyxFQUFXLEdBQVRnN0MsR0FBRVEsR0FBRXg3QyxHQUFRLElBQVksRUFBUCtJLEVBQUVsSSxNQUFRa0ksRUFBRTZnRCxjQUNsZixVQUFVLE9BQU85aUQsR0FBRyxJQUFLLFdBQXFCLElBQVYvRyxFQUFFZ0osRUFBRWloRCxNQUFVbGpELEVBQUUsS0FBSyxPQUFPL0csR0FBaUIsUUFBZCtJLEVBQUUvSSxFQUFFMHBELFlBQW9CLE9BQU80aEIsR0FBR3ZpRSxLQUFLaEMsRUFBRS9HLEdBQUdBLEVBQUVBLEVBQUVrcUQsUUFBWSxRQUFKbHFELEVBQUUrRyxJQUFZQSxFQUFFaUMsRUFBRWloRCxNQUFNamhELEVBQUVpaEQsTUFBTSxPQUFPbGpELEVBQUUvRyxFQUFFa3FELFFBQVFscUQsRUFBRWtxRCxRQUFRLE1BQU11bUIsR0FBR3puRSxHQUFFLEVBQUdqQyxFQUFFL0csRUFBRXdSLEVBQUV4SSxFQUFFeStELFlBQVksTUFBTSxJQUFLLFlBQTZCLElBQWpCem5FLEVBQUUsS0FBSytHLEVBQUVpQyxFQUFFaWhELE1BQVVqaEQsRUFBRWloRCxNQUFNLEtBQUssT0FBT2xqRCxHQUFHLENBQWUsR0FBRyxRQUFqQmdDLEVBQUVoQyxFQUFFMmlELFlBQXVCLE9BQU80aEIsR0FBR3ZpRSxHQUFHLENBQUNDLEVBQUVpaEQsTUFBTWxqRCxFQUFFLE1BQU1nQyxFQUFFaEMsRUFBRW1qRCxRQUFRbmpELEVBQUVtakQsUUFBUWxxRCxFQUFFQSxFQUFFK0csRUFBRUEsRUFBRWdDLEVBQUUwbkUsR0FBR3puRSxHQUFFLEVBQUdoSixFQUFFLEtBQUt3UixFQUFFeEksRUFBRXkrRCxZQUFZLE1BQU0sSUFBSyxXQUFXZ0osR0FBR3puRSxHQUFFLEVBQUcsS0FBSyxVQUFLLEVBQU9BLEVBQUV5K0QsWUFBWSxNQUFNLFFBQVF6K0QsRUFBRTZnRCxjQUFjLEtBQUssT0FBTzdnRCxFQUFFaWhELE1BQy9mLFNBQVNpbEIsR0FBR25tRSxFQUFFQyxFQUFFaEosR0FBRyxPQUFPK0ksSUFBSUMsRUFBRWczQyxhQUFhajNDLEVBQUVpM0MsY0FBYyxJQUFJLy9DLEVBQUUrSSxFQUFFNDlELGVBQTRCLEdBQWIsSUFBSTNtRSxHQUFHdW9FLEdBQUd2b0UsR0FBTStJLEVBQUV5OUQsb0JBQW9Cem1FLEVBQUUsT0FBTyxLQUFLLEdBQUcsT0FBTytJLEdBQUdDLEVBQUVpaEQsUUFBUWxoRCxFQUFFa2hELE1BQU0sTUFBTTVsRCxNQUFNcTFDLEVBQUUsTUFBTSxHQUFHLE9BQU8xd0MsRUFBRWloRCxNQUFNLENBQTZELElBQWxEanFELEVBQUVtcUUsR0FBWnBoRSxFQUFFQyxFQUFFaWhELE1BQWFsaEQsRUFBRThsRSxhQUFhOWxFLEVBQUU2OUQsZ0JBQWdCNTlELEVBQUVpaEQsTUFBTWpxRCxFQUFNQSxFQUFFc2pELE9BQU90NkMsRUFBRSxPQUFPRCxFQUFFbWhELFNBQVNuaEQsRUFBRUEsRUFBRW1oRCxTQUFRbHFELEVBQUVBLEVBQUVrcUQsUUFBUWlnQixHQUFHcGhFLEVBQUVBLEVBQUU4bEUsYUFBYTlsRSxFQUFFNjlELGlCQUFrQnRqQixPQUFPdDZDLEVBQUVoSixFQUFFa3FELFFBQVEsS0FBSyxPQUFPbGhELEVBQUVpaEQsTUFBTSxTQUFTK21CLEdBQUdqb0UsR0FBR0EsRUFBRTRnRCxXQUFXLEVBSzlhLFNBQVNzbkIsR0FBR2xvRSxFQUFFQyxHQUFHLE9BQU9ELEVBQUUrbkUsVUFBVSxJQUFLLFNBQVM5bkUsRUFBRUQsRUFBRTZuRSxLQUFLLElBQUksSUFBSTV3RSxFQUFFLEtBQUssT0FBT2dKLEdBQUcsT0FBT0EsRUFBRTBnRCxZQUFZMXBELEVBQUVnSixHQUFHQSxFQUFFQSxFQUFFa2hELFFBQVEsT0FBT2xxRCxFQUFFK0ksRUFBRTZuRSxLQUFLLEtBQUs1d0UsRUFBRWtxRCxRQUFRLEtBQUssTUFBTSxJQUFLLFlBQVlscUQsRUFBRStJLEVBQUU2bkUsS0FBSyxJQUFJLElBQUkzd0UsRUFBRSxLQUFLLE9BQU9ELEdBQUcsT0FBT0EsRUFBRTBwRCxZQUFZenBELEVBQUVELEdBQUdBLEVBQUVBLEVBQUVrcUQsUUFBUSxPQUFPanFELEVBQUUrSSxHQUFHLE9BQU9ELEVBQUU2bkUsS0FBSzduRSxFQUFFNm5FLEtBQUssS0FBSzduRSxFQUFFNm5FLEtBQUsxbUIsUUFBUSxLQUFLanFELEVBQUVpcUQsUUFBUSxNQUNqVSxTQUFTZ25CLEdBQUdub0UsR0FBRyxPQUFPQSxFQUFFazZDLEtBQUssS0FBSyxFQUFFNUgsR0FBRXR5QyxFQUFFdkQsT0FBTzQ5RCxLQUFNLElBQUlwNkQsRUFBRUQsRUFBRTRnRCxVQUFVLE9BQVMsS0FBRjNnRCxHQUFRRCxFQUFFNGdELFdBQWEsS0FBSDNnRCxFQUFRLEdBQUdELEdBQUcsS0FBSyxLQUFLLEVBQTRCLEdBQTFCb2lFLEtBQU05SCxLQUF1QixJQUFPLElBQXhCcjZELEVBQUVELEVBQUU0Z0QsWUFBd0IsTUFBTXRsRCxNQUFNcTFDLEVBQUUsTUFBNkIsT0FBdkIzd0MsRUFBRTRnRCxXQUFhLEtBQUgzZ0QsRUFBUSxHQUFVRCxFQUFFLEtBQUssRUFBRSxPQUFPc2lFLEdBQUd0aUUsR0FBRyxLQUFLLEtBQUssR0FBRyxPQUFPNHhDLEdBQUVjLElBQXFCLE1BQWhCenlDLEVBQUVELEVBQUU0Z0QsWUFBa0I1Z0QsRUFBRTRnRCxXQUFhLEtBQUgzZ0QsRUFBUSxHQUFHRCxHQUFHLEtBQUssS0FBSyxHQUFHLE9BQU80eEMsR0FBRWMsSUFBSyxLQUFLLEtBQUssRUFBRSxPQUFPMHZCLEtBQU0sS0FBSyxLQUFLLEdBQUcsT0FBTzVFLEdBQUd4OUQsR0FBRyxLQUFLLFFBQVEsT0FBTyxNQUFNLFNBQVNvb0UsR0FBR3BvRSxFQUFFQyxHQUFHLE1BQU0sQ0FBQ3BJLE1BQU1tSSxFQUFFVCxPQUFPVSxFQUFFb29FLE1BQU1wdUIsRUFBR2g2QyxJQUxqZCttRSxHQUFHLFNBQVNobkUsRUFBRUMsR0FBRyxJQUFJLElBQUloSixFQUFFZ0osRUFBRWloRCxNQUFNLE9BQU9qcUQsR0FBRyxDQUFDLEdBQUcsSUFBSUEsRUFBRWlqRCxLQUFLLElBQUlqakQsRUFBRWlqRCxJQUFJbDZDLEVBQUU4RyxZQUFZN1AsRUFBRTRoRCxnQkFBZ0IsR0FBRyxJQUFJNWhELEVBQUVpakQsS0FBSyxPQUFPampELEVBQUVpcUQsTUFBTSxDQUFDanFELEVBQUVpcUQsTUFBTTNHLE9BQU90akQsRUFBRUEsRUFBRUEsRUFBRWlxRCxNQUFNLFNBQVMsR0FBR2pxRCxJQUFJZ0osRUFBRSxNQUFNLEtBQUssT0FBT2hKLEVBQUVrcUQsU0FBUyxDQUFDLEdBQUcsT0FBT2xxRCxFQUFFc2pELFFBQVF0akQsRUFBRXNqRCxTQUFTdDZDLEVBQUUsT0FBT2hKLEVBQUVBLEVBQUVzakQsT0FBT3RqRCxFQUFFa3FELFFBQVE1RyxPQUFPdGpELEVBQUVzakQsT0FBT3RqRCxFQUFFQSxFQUFFa3FELFVBQVU4bEIsR0FBRyxhQUM3U0MsR0FBRyxTQUFTbG5FLEVBQUVDLEVBQUVoSixFQUFFQyxFQUFFOEcsR0FBRyxJQUFJeUssRUFBRXpJLEVBQUV3aUUsY0FBYyxHQUFHLzVELElBQUl2UixFQUFFLENBQUMsSUFBc1dzNUMsRUFBRXRDLEVBQXBXbnNCLEVBQUU5aEIsRUFBRTQ0QyxVQUFnQyxPQUF0QnFwQixHQUFHSCxHQUFHNXZCLFNBQVNueUMsRUFBRSxLQUFZL0ksR0FBRyxJQUFLLFFBQVF3UixFQUFFdzBDLEdBQUdsN0IsRUFBRXRaLEdBQUd2UixFQUFFK2xELEdBQUdsN0IsRUFBRTdxQixHQUFHOEksRUFBRSxHQUFHLE1BQU0sSUFBSyxTQUFTeUksRUFBRXMxQyxHQUFHaDhCLEVBQUV0WixHQUFHdlIsRUFBRTZtRCxHQUFHaDhCLEVBQUU3cUIsR0FBRzhJLEVBQUUsR0FBRyxNQUFNLElBQUssU0FBU3lJLEVBQUVwUSxFQUFFLEdBQUdvUSxFQUFFLENBQUM1USxXQUFNLElBQVNYLEVBQUVtQixFQUFFLEdBQUduQixFQUFFLENBQUNXLFdBQU0sSUFBU21JLEVBQUUsR0FBRyxNQUFNLElBQUssV0FBV3lJLEVBQUUyMUMsR0FBR3I4QixFQUFFdFosR0FBR3ZSLEVBQUVrbkQsR0FBR3I4QixFQUFFN3FCLEdBQUc4SSxFQUFFLEdBQUcsTUFBTSxRQUFRLG1CQUFvQnlJLEVBQUU2L0QsU0FBUyxtQkFBb0JweEUsRUFBRW94RSxVQUFVdm1ELEVBQUV3bUQsUUFBUTlWLElBQTJCLElBQUlqaUIsS0FBM0I2aEIsR0FBR3A3RCxFQUFFQyxHQUFXRCxFQUFFLEtBQWN3UixFQUFFLElBQUl2UixFQUFFdUIsZUFBZSszQyxJQUFJL25DLEVBQUVoUSxlQUFlKzNDLElBQUksTUFBTS9uQyxFQUFFK25DLEdBQUcsR0FBRyxVQUMvZUEsRUFBRSxJQUFJdEMsS0FBS25zQixFQUFFdFosRUFBRStuQyxHQUFLenVCLEVBQUV0cEIsZUFBZXkxQyxLQUFLajNDLElBQUlBLEVBQUUsSUFBSUEsRUFBRWkzQyxHQUFHLFFBQVEsNEJBQTRCc0MsR0FBRyxhQUFhQSxHQUFHLG1DQUFtQ0EsR0FBRyw2QkFBNkJBLEdBQUcsY0FBY0EsSUFBSXVHLEVBQUd0K0MsZUFBZSszQyxHQUFHeHdDLElBQUlBLEVBQUUsS0FBS0EsRUFBRUEsR0FBRyxJQUFJN0QsS0FBS3EwQyxFQUFFLE9BQU8sSUFBSUEsS0FBS3Q1QyxFQUFFLENBQUMsSUFBSUwsRUFBRUssRUFBRXM1QyxHQUF5QixHQUF0Qnp1QixFQUFFLE1BQU10WixFQUFFQSxFQUFFK25DLFFBQUcsRUFBVXQ1QyxFQUFFdUIsZUFBZSszQyxJQUFJMzVDLElBQUlrckIsSUFBSSxNQUFNbHJCLEdBQUcsTUFBTWtyQixHQUFHLEdBQUcsVUFBVXl1QixFQUFFLEdBQUd6dUIsRUFBRSxDQUFDLElBQUltc0IsS0FBS25zQixHQUFHQSxFQUFFdHBCLGVBQWV5MUMsSUFBSXIzQyxHQUFHQSxFQUFFNEIsZUFBZXkxQyxLQUFLajNDLElBQUlBLEVBQUUsSUFBSUEsRUFBRWkzQyxHQUFHLElBQUksSUFBSUEsS0FBS3IzQyxFQUFFQSxFQUFFNEIsZUFBZXkxQyxJQUFJbnNCLEVBQUVtc0IsS0FBS3IzQyxFQUFFcTNDLEtBQUtqM0MsSUFBSUEsRUFBRSxJQUNwZkEsRUFBRWkzQyxHQUFHcjNDLEVBQUVxM0MsU0FBU2ozQyxJQUFJK0ksSUFBSUEsRUFBRSxJQUFJQSxFQUFFN0QsS0FBS3EwQyxFQUFFdjVDLElBQUlBLEVBQUVKLE1BQU0sNEJBQTRCMjVDLEdBQUczNUMsRUFBRUEsRUFBRUEsRUFBRTg4RCxZQUFPLEVBQU81eEMsRUFBRUEsRUFBRUEsRUFBRTR4QyxZQUFPLEVBQU8sTUFBTTk4RCxHQUFHa3JCLElBQUlsckIsSUFBSW1KLEVBQUVBLEdBQUcsSUFBSTdELEtBQUtxMEMsRUFBRSxHQUFHMzVDLElBQUksYUFBYTI1QyxFQUFFenVCLElBQUlsckIsR0FBRyxpQkFBa0JBLEdBQUcsaUJBQWtCQSxJQUFJbUosRUFBRUEsR0FBRyxJQUFJN0QsS0FBS3EwQyxFQUFFLEdBQUczNUMsR0FBRyxtQ0FBbUMyNUMsR0FBRyw2QkFBNkJBLElBQUl1RyxFQUFHdCtDLGVBQWUrM0MsSUFBSSxNQUFNMzVDLEdBQUcyN0QsR0FBR3gwRCxFQUFFd3lDLEdBQUd4d0MsR0FBRytoQixJQUFJbHJCLElBQUltSixFQUFFLE1BQU1BLEVBQUVBLEdBQUcsSUFBSTdELEtBQUtxMEMsRUFBRTM1QyxJQUFJSSxJQUFJK0ksRUFBRUEsR0FBRyxJQUFJN0QsS0FBSyxRQUFRbEYsR0FBRytHLEVBQUVnQyxHQUFHQyxFQUFFay9ELFlBQVluaEUsSUFBSWlxRSxHQUFHaG9FLEtBQUtrbkUsR0FBRyxTQUFTbm5FLEVBQUVDLEVBQUVoSixFQUFFQyxHQUFHRCxJQUFJQyxHQUFHK3dFLEdBQUdob0UsSUFHemUsSUFBSXVvRSxHQUFHLG1CQUFvQkMsUUFBUUEsUUFBUXZaLElBQUksU0FBU3daLEdBQUcxb0UsRUFBRUMsR0FBRyxJQUFJaEosRUFBRWdKLEVBQUVWLE9BQU9ySSxFQUFFK0ksRUFBRW9vRSxNQUFNLE9BQU9ueEUsR0FBRyxPQUFPRCxJQUFJQyxFQUFFK2lELEVBQUdoakQsSUFBSSxPQUFPQSxHQUFHK2lELEVBQUcvaUQsRUFBRXdGLE1BQU13RCxFQUFFQSxFQUFFcEksTUFBTSxPQUFPbUksR0FBRyxJQUFJQSxFQUFFazZDLEtBQUtGLEVBQUdoNkMsRUFBRXZELE1BQU0sSUFBSWtOLFFBQVFqQixNQUFNekksR0FBRyxNQUFNakMsR0FBRzJULFlBQVcsV0FBVyxNQUFNM1QsTUFBc0gsU0FBUzJxRSxHQUFHM29FLEdBQUcsSUFBSUMsRUFBRUQsRUFBRXV5QyxJQUFJLEdBQUcsT0FBT3R5QyxFQUFFLEdBQUcsbUJBQW9CQSxFQUFFLElBQUlBLEVBQUUsTUFBTSxNQUFNaEosR0FBRzJ4RSxHQUFHNW9FLEVBQUUvSSxRQUFRZ0osRUFBRWt5QyxRQUFRLEtBQ2xkLFNBQVMwMkIsR0FBRzdvRSxFQUFFQyxHQUFHLE9BQU9BLEVBQUVpNkMsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRzR1QixHQUFHLEVBQUUsRUFBRTdvRSxHQUFHLE1BQU0sS0FBSyxFQUFFLEdBQWUsSUFBWkEsRUFBRTJnRCxXQUFlLE9BQU81Z0QsRUFBRSxDQUFDLElBQUkvSSxFQUFFK0ksRUFBRXdpRSxjQUFjdHJFLEVBQUU4SSxFQUFFOGdELGNBQTRCN2dELEdBQWRELEVBQUVDLEVBQUU0NEMsV0FBYzhuQix3QkFBd0IxZ0UsRUFBRXFoRSxjQUFjcmhFLEVBQUV4RCxLQUFLeEYsRUFBRWdtRSxHQUFHaDlELEVBQUV4RCxLQUFLeEYsR0FBR0MsR0FBRzhJLEVBQUUrb0Usb0NBQW9DOW9FLEVBQUUsTUFBTSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxHQUFHLE1BQU0sUUFBUSxNQUFNM0UsTUFBTXExQyxFQUFFLE9BQ3BWLFNBQVNtNEIsR0FBRzlvRSxFQUFFQyxFQUFFaEosR0FBZ0QsR0FBRyxRQUFoQ0EsRUFBRSxRQUFsQkEsRUFBRUEsRUFBRWtvRSxhQUF1QmxvRSxFQUFFeW5FLFdBQVcsTUFBaUIsQ0FBQyxJQUFJeG5FLEVBQUVELEVBQUVBLEVBQUVnRyxLQUFLLEVBQUUsQ0FBQyxHQUFHLElBQUsvRixFQUFFZ2pELElBQUlsNkMsR0FBRyxDQUFDLElBQUloQyxFQUFFOUcsRUFBRXN3QixRQUFRdHdCLEVBQUVzd0IsYUFBUSxPQUFPLElBQVN4cEIsR0FBR0EsSUFBSSxJQUFLOUcsRUFBRWdqRCxJQUFJajZDLEtBQUtqQyxFQUFFOUcsRUFBRWdCLE9BQU9oQixFQUFFc3dCLFFBQVF4cEIsS0FBSzlHLEVBQUVBLEVBQUUrRixXQUFXL0YsSUFBSUQsSUFDL04sU0FBUyt4RSxHQUFHaHBFLEVBQUVDLEVBQUVoSixHQUFpQyxPQUE5QixtQkFBb0JneUUsSUFBSUEsR0FBR2hwRSxHQUFVQSxFQUFFaTZDLEtBQUssS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFtQixHQUFHLFFBQW5CbDZDLEVBQUVDLEVBQUVrL0QsY0FBeUMsUUFBZm4vRCxFQUFFQSxFQUFFMCtELFlBQXFCLENBQUMsSUFBSXhuRSxFQUFFOEksRUFBRS9DLEtBQUt5L0QsR0FBRyxHQUFHemxFLEVBQUUsR0FBR0EsR0FBRSxXQUFXLElBQUkrSSxFQUFFOUksRUFBRSxFQUFFLENBQUMsSUFBSUQsRUFBRStJLEVBQUV3bkIsUUFBUSxRQUFHLElBQVN2d0IsRUFBRSxDQUFDLElBQUk4cUIsRUFBRTloQixFQUFFLElBQUloSixJQUFJLE1BQU11NUMsR0FBR280QixHQUFHN21ELEVBQUV5dUIsSUFBSXh3QyxFQUFFQSxFQUFFL0MsV0FBVytDLElBQUk5SSxNQUFLLE1BQU0sS0FBSyxFQUFFeXhFLEdBQUcxb0UsR0FBaUIsbUJBQWRoSixFQUFFZ0osRUFBRTQ0QyxXQUFnQ3F3QixzQkFIaEcsU0FBWWxwRSxFQUFFQyxHQUFHLElBQUlBLEVBQUU3RyxNQUFNNEcsRUFBRXdpRSxjQUFjdmlFLEVBQUVoQyxNQUFNK0IsRUFBRThnRCxjQUFjN2dELEVBQUVpcEUsdUJBQXVCLE1BQU1qeUUsR0FBRzJ4RSxHQUFHNW9FLEVBQUUvSSxJQUdVa3lFLENBQUdscEUsRUFBRWhKLEdBQUcsTUFBTSxLQUFLLEVBQUUweEUsR0FBRzFvRSxHQUFHLE1BQU0sS0FBSyxFQUFFbXBFLEdBQUdwcEUsRUFBRUMsRUFBRWhKLElBQzNaLFNBQVNveUUsR0FBR3JwRSxHQUFHLElBQUlDLEVBQUVELEVBQUUyZ0QsVUFBVTNnRCxFQUFFdTZDLE9BQU8sS0FBS3Y2QyxFQUFFa2hELE1BQU0sS0FBS2xoRCxFQUFFOGdELGNBQWMsS0FBSzlnRCxFQUFFbS9ELFlBQVksS0FBS24vRCxFQUFFaTNDLGFBQWEsS0FBS2ozQyxFQUFFMmdELFVBQVUsS0FBSzNnRCxFQUFFeStELFlBQVksS0FBS3orRCxFQUFFMCtELFdBQVcsS0FBSzErRCxFQUFFOGxFLGFBQWEsS0FBSzlsRSxFQUFFd2lFLGNBQWMsS0FBSyxPQUFPdmlFLEdBQUdvcEUsR0FBR3BwRSxHQUFHLFNBQVNxcEUsR0FBR3RwRSxHQUFHLE9BQU8sSUFBSUEsRUFBRWs2QyxLQUFLLElBQUlsNkMsRUFBRWs2QyxLQUFLLElBQUlsNkMsRUFBRWs2QyxJQUN6UixTQUFTcXZCLEdBQUd2cEUsR0FBR0EsRUFBRSxDQUFDLElBQUksSUFBSUMsRUFBRUQsRUFBRXU2QyxPQUFPLE9BQU90NkMsR0FBRyxDQUFDLEdBQUdxcEUsR0FBR3JwRSxHQUFHLENBQUMsSUFBSWhKLEVBQUVnSixFQUFFLE1BQU1ELEVBQUVDLEVBQUVBLEVBQUVzNkMsT0FBTyxNQUFNai9DLE1BQU1xMUMsRUFBRSxNQUFxQixPQUFkMXdDLEVBQUVoSixFQUFFNGhELFVBQWlCNWhELEVBQUVpakQsS0FBSyxLQUFLLEVBQUUsSUFBSWhqRCxHQUFFLEVBQUcsTUFBTSxLQUFLLEVBQStCLEtBQUssRUFBRStJLEVBQUVBLEVBQUVnakQsY0FBYy9yRCxHQUFFLEVBQUcsTUFBTSxRQUFRLE1BQU1vRSxNQUFNcTFDLEVBQUUsTUFBbUIsR0FBWjE1QyxFQUFFMnBELFlBQWVyQixHQUFHdC9DLEVBQUUsSUFBSWhKLEVBQUUycEQsWUFBWSxJQUFJNWdELEVBQUVDLEVBQUUsSUFBSWhKLEVBQUUrSSxJQUFJLENBQUMsS0FBSyxPQUFPL0ksRUFBRWtxRCxTQUFTLENBQUMsR0FBRyxPQUFPbHFELEVBQUVzakQsUUFBUSt1QixHQUFHcnlFLEVBQUVzakQsUUFBUSxDQUFDdGpELEVBQUUsS0FBSyxNQUFNK0ksRUFBRS9JLEVBQUVBLEVBQUVzakQsT0FBaUMsSUFBMUJ0akQsRUFBRWtxRCxRQUFRNUcsT0FBT3RqRCxFQUFFc2pELE9BQVd0akQsRUFBRUEsRUFBRWtxRCxRQUFRLElBQUlscUQsRUFBRWlqRCxLQUFLLElBQUlqakQsRUFBRWlqRCxLQUFLLEtBQUtqakQsRUFBRWlqRCxLQUFLLENBQUMsR0FBZSxFQUFaampELEVBQUUycEQsVUFBWSxTQUFTM2dELEVBQ3ZmLEdBQUcsT0FBT2hKLEVBQUVpcUQsT0FBTyxJQUFJanFELEVBQUVpakQsSUFBSSxTQUFTajZDLEVBQU9oSixFQUFFaXFELE1BQU0zRyxPQUFPdGpELEVBQUVBLEVBQUVBLEVBQUVpcUQsTUFBTSxLQUFpQixFQUFaanFELEVBQUUycEQsV0FBYSxDQUFDM3BELEVBQUVBLEVBQUU0aEQsVUFBVSxNQUFNNzRDLEdBQUcsSUFBSSxJQUFJaEMsRUFBRWdDLElBQUksQ0FBQyxJQUFJeUksRUFBRSxJQUFJekssRUFBRWs4QyxLQUFLLElBQUlsOEMsRUFBRWs4QyxJQUFJLEdBQUd6eEMsRUFBRSxDQUFDLElBQUlzWixFQUFFdFosRUFBRXpLLEVBQUU2NkMsVUFBVTc2QyxFQUFFNjZDLFVBQVU5L0MsU0FBUyxHQUFHOUIsRUFBRSxHQUFHQyxFQUFFLENBQUssSUFBSXM1QyxFQUFFenVCLEVBQUVBLEVBQUU5cUIsRUFBRSxLQUFoQndSLEVBQUV4SSxHQUFvQncvQyxTQUFTaDNDLEVBQUVSLFdBQVdQLGFBQWE4b0MsRUFBRXp1QixHQUFHdFosRUFBRWYsYUFBYThvQyxFQUFFenVCLFFBQVE5aEIsRUFBRXlILGFBQWFxYSxFQUFFOXFCLFFBQVFDLEdBQU8sS0FBSnM1QyxFQUFFdndDLEdBQVF3L0MsVUFBVWgzQyxFQUFFK25DLEVBQUV2b0MsWUFBYVAsYUFBYXFhLEVBQUV5dUIsSUFBSy9uQyxFQUFFK25DLEdBQUkxcEMsWUFBWWliLEdBQTRCLE9BQXhCeXVCLEVBQUVBLEVBQUVnNUIsc0JBQTBDLE9BQU8vZ0UsRUFBRTgvRCxVQUFVOS9ELEVBQUU4L0QsUUFBUTlWLEtBQUt4eUQsRUFBRTZHLFlBQVlpYixRQUFRLEdBQUcsSUFDbmdCL2pCLEVBQUVrOEMsS0FBSyxPQUFPbDhDLEVBQUVrakQsTUFBTSxDQUFDbGpELEVBQUVrakQsTUFBTTNHLE9BQU92OEMsRUFBRUEsRUFBRUEsRUFBRWtqRCxNQUFNLFNBQVMsR0FBR2xqRCxJQUFJZ0MsRUFBRSxNQUFNLEtBQUssT0FBT2hDLEVBQUVtakQsU0FBUyxDQUFDLEdBQUcsT0FBT25qRCxFQUFFdThDLFFBQVF2OEMsRUFBRXU4QyxTQUFTdjZDLEVBQUUsT0FBT2hDLEVBQUVBLEVBQUV1OEMsT0FBT3Y4QyxFQUFFbWpELFFBQVE1RyxPQUFPdjhDLEVBQUV1OEMsT0FBT3Y4QyxFQUFFQSxFQUFFbWpELFNBQ25MLFNBQVNpb0IsR0FBR3BwRSxFQUFFQyxFQUFFaEosR0FBRyxJQUFJLElBQWF3UixFQUFFc1osRUFBWDdxQixFQUFFK0ksRUFBRWpDLEdBQUUsSUFBUyxDQUFDLElBQUlBLEVBQUUsQ0FBQ0EsRUFBRTlHLEVBQUVxakQsT0FBT3Y2QyxFQUFFLE9BQU8sQ0FBQyxHQUFHLE9BQU9oQyxFQUFFLE1BQU0xQyxNQUFNcTFDLEVBQUUsTUFBb0IsT0FBZGxvQyxFQUFFekssRUFBRTY2QyxVQUFpQjc2QyxFQUFFazhDLEtBQUssS0FBSyxFQUFFbjRCLEdBQUUsRUFBRyxNQUFNL2hCLEVBQUUsS0FBSyxFQUFpQyxLQUFLLEVBQUV5SSxFQUFFQSxFQUFFdzZDLGNBQWNsaEMsR0FBRSxFQUFHLE1BQU0vaEIsRUFBRWhDLEVBQUVBLEVBQUV1OEMsT0FBT3Y4QyxHQUFFLEVBQUcsR0FBRyxJQUFJOUcsRUFBRWdqRCxLQUFLLElBQUloakQsRUFBRWdqRCxJQUFJLENBQUNsNkMsRUFBRSxJQUFJLElBQUl3d0MsRUFBRXh3QyxFQUFFa3VDLEVBQUVoM0MsRUFBRUwsRUFBRUksRUFBRUQsRUFBRWszQyxJQUFJLEdBQUc4NkIsR0FBR3g0QixFQUFFeDVDLEVBQUVILEdBQUcsT0FBT0csRUFBRWtxRCxPQUFPLElBQUlscUQsRUFBRWtqRCxJQUFJbGpELEVBQUVrcUQsTUFBTTNHLE9BQU92akQsRUFBRUEsRUFBRUEsRUFBRWtxRCxVQUFVLENBQUMsR0FBR2xxRCxJQUFJazNDLEVBQUUsTUFBTSxLQUFLLE9BQU9sM0MsRUFBRW1xRCxTQUFTLENBQUMsR0FBRyxPQUFPbnFELEVBQUV1akQsUUFBUXZqRCxFQUFFdWpELFNBQVNyTSxFQUFFLE1BQU1sdUMsRUFBRWhKLEVBQUVBLEVBQUV1akQsT0FBT3ZqRCxFQUFFbXFELFFBQVE1RyxPQUFPdmpELEVBQUV1akQsT0FBT3ZqRCxFQUFFQSxFQUFFbXFELFFBQVFwL0IsR0FBR3l1QixFQUNuZi9uQyxFQUFFeWxDLEVBQUVoM0MsRUFBRTJoRCxVQUFVLElBQUlySSxFQUFFaVAsU0FBU2pQLEVBQUV2b0MsV0FBV1IsWUFBWXltQyxHQUFHc0MsRUFBRS9vQyxZQUFZeW1DLElBQUl6bEMsRUFBRWhCLFlBQVl2USxFQUFFMmhELGdCQUFnQixHQUFHLElBQUkzaEQsRUFBRWdqRCxLQUFLLEdBQUcsT0FBT2hqRCxFQUFFZ3FELE1BQU0sQ0FBQ3o0QyxFQUFFdlIsRUFBRTJoRCxVQUFVb0ssY0FBY2xoQyxHQUFFLEVBQUc3cUIsRUFBRWdxRCxNQUFNM0csT0FBT3JqRCxFQUFFQSxFQUFFQSxFQUFFZ3FELE1BQU0sZUFBZSxHQUFHOG5CLEdBQUdocEUsRUFBRTlJLEVBQUVELEdBQUcsT0FBT0MsRUFBRWdxRCxNQUFNLENBQUNocUQsRUFBRWdxRCxNQUFNM0csT0FBT3JqRCxFQUFFQSxFQUFFQSxFQUFFZ3FELE1BQU0sU0FBUyxHQUFHaHFELElBQUkrSSxFQUFFLE1BQU0sS0FBSyxPQUFPL0ksRUFBRWlxRCxTQUFTLENBQUMsR0FBRyxPQUFPanFELEVBQUVxakQsUUFBUXJqRCxFQUFFcWpELFNBQVN0NkMsRUFBRSxPQUFrQixLQUFYL0ksRUFBRUEsRUFBRXFqRCxRQUFhTCxNQUFNbDhDLEdBQUUsR0FBSTlHLEVBQUVpcUQsUUFBUTVHLE9BQU9yakQsRUFBRXFqRCxPQUFPcmpELEVBQUVBLEVBQUVpcUQsU0FDcGEsU0FBU3NvQixHQUFHenBFLEVBQUVDLEdBQUcsT0FBT0EsRUFBRWk2QyxLQUFLLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRzR1QixHQUFHLEVBQUUsRUFBRTdvRSxHQUFHLE1BQU0sS0FBSyxFQUFFLE1BQU0sS0FBSyxFQUFFLElBQUloSixFQUFFZ0osRUFBRTQ0QyxVQUFVLEdBQUcsTUFBTTVoRCxFQUFFLENBQUMsSUFBSUMsRUFBRStJLEVBQUV1aUUsY0FBY3hrRSxFQUFFLE9BQU9nQyxFQUFFQSxFQUFFd2lFLGNBQWN0ckUsRUFBRThJLEVBQUVDLEVBQUV4RCxLQUFLLElBQUlnTSxFQUFFeEksRUFBRWsvRCxZQUErQixHQUFuQmwvRCxFQUFFay9ELFlBQVksS0FBUSxPQUFPMTJELEVBQUUsQ0FBZ0YsSUFBL0V4UixFQUFFZzlELElBQUkvOEQsRUFBRSxVQUFVOEksR0FBRyxVQUFVOUksRUFBRXVGLE1BQU0sTUFBTXZGLEVBQUVDLE1BQU1zbUQsR0FBR3htRCxFQUFFQyxHQUFHbzdELEdBQUd0eUQsRUFBRWhDLEdBQUdpQyxFQUFFcXlELEdBQUd0eUQsRUFBRTlJLEdBQU84RyxFQUFFLEVBQUVBLEVBQUV5SyxFQUFFcFAsT0FBTzJFLEdBQUcsRUFBRSxDQUFDLElBQUkrakIsRUFBRXRaLEVBQUV6SyxHQUFHd3lDLEVBQUUvbkMsRUFBRXpLLEVBQUUsR0FBRyxVQUFVK2pCLEVBQUVrd0MsR0FBR2g3RCxFQUFFdTVDLEdBQUcsNEJBQTRCenVCLEVBQUVrOUIsR0FBR2hvRCxFQUFFdTVDLEdBQUcsYUFBYXp1QixFQUFFdzlCLEdBQUd0b0QsRUFBRXU1QyxHQUFHMEwsR0FBR2psRCxFQUFFOHFCLEVBQUV5dUIsRUFBRXZ3QyxHQUFHLE9BQU9ELEdBQUcsSUFBSyxRQUFRMDlDLEdBQUd6bUQsRUFBRUMsR0FBRyxNQUFNLElBQUssV0FBV3FuRCxHQUFHdG5ELEVBQ2pnQkMsR0FBRyxNQUFNLElBQUssU0FBUytJLEVBQUVoSixFQUFFbW1ELGNBQWNzc0IsWUFBWXp5RSxFQUFFbW1ELGNBQWNzc0IsY0FBY3h5RSxFQUFFKzJDLFNBQW1CLE9BQVZqdUMsRUFBRTlJLEVBQUVXLE9BQWNvbUQsR0FBR2huRCxJQUFJQyxFQUFFKzJDLFNBQVNqdUMsR0FBRSxHQUFJQyxNQUFNL0ksRUFBRSsyQyxXQUFXLE1BQU0vMkMsRUFBRWltRCxhQUFhYyxHQUFHaG5ELElBQUlDLEVBQUUrMkMsU0FBUy8yQyxFQUFFaW1ELGNBQWEsR0FBSWMsR0FBR2huRCxJQUFJQyxFQUFFKzJDLFNBQVMvMkMsRUFBRSsyQyxTQUFTLEdBQUcsSUFBRyxNQUFPLE1BQU0sS0FBSyxFQUFFLEdBQUcsT0FBT2h1QyxFQUFFNDRDLFVBQVUsTUFBTXY5QyxNQUFNcTFDLEVBQUUsTUFBTTF3QyxFQUFFNDRDLFVBQVV6TSxVQUFVbnNDLEVBQUV1aUUsY0FBYyxNQUFNLEtBQUssR0FBRXZpRSxFQUFFQSxFQUFFNDRDLFdBQVltSyxVQUFVL2lELEVBQUUraUQsU0FBUSxFQUFHUyxHQUFHeGpELEVBQUVnakQsZ0JBQWdCLE1BQU0sS0FBSyxHQUFHLE1BQU0sS0FBSyxHQUM5YixHQURpY2hzRCxFQUFFZ0osRUFBRSxPQUFPQSxFQUFFNmdELGNBQWM1cEQsR0FBRSxHQUFJQSxHQUFFLEVBQUdELEVBQUVnSixFQUFFaWhELE1BQU15b0IsR0FBR3BOLE1BQ2pmLE9BQU90bEUsRUFBRStJLEVBQUUsSUFBSUEsRUFBRS9JLElBQUksQ0FBQyxHQUFHLElBQUkrSSxFQUFFazZDLElBQUl6eEMsRUFBRXpJLEVBQUU2NEMsVUFBVTNoRCxFQUFhLG1CQUFWdVIsRUFBRUEsRUFBRWpDLE9BQTRCMHJELFlBQVl6cEQsRUFBRXlwRCxZQUFZLFVBQVUsT0FBTyxhQUFhenBELEVBQUVtaEUsUUFBUSxRQUFTbmhFLEVBQUV6SSxFQUFFNjRDLFVBQWtDNzZDLEVBQUUsT0FBMUJBLEVBQUVnQyxFQUFFd2lFLGNBQWNoOEQsUUFBOEJ4SSxFQUFFdkYsZUFBZSxXQUFXdUYsRUFBRTRyRSxRQUFRLEtBQUtuaEUsRUFBRWpDLE1BQU1vakUsUUFBUTVYLEdBQUcsVUFBVWgwRCxTQUFTLEdBQUcsSUFBSWdDLEVBQUVrNkMsSUFBSWw2QyxFQUFFNjRDLFVBQVV6TSxVQUFVbDFDLEVBQUUsR0FBRzhJLEVBQUV3aUUsa0JBQW1CLElBQUcsS0FBS3hpRSxFQUFFazZDLEtBQUssT0FBT2w2QyxFQUFFOGdELGVBQWUsT0FBTzlnRCxFQUFFOGdELGNBQWNDLFdBQVcsRUFBQ3Q0QyxFQUFFekksRUFBRWtoRCxNQUFNQyxTQUFVNUcsT0FBT3Y2QyxFQUFFQSxFQUFFeUksRUFBRSxTQUFjLEdBQUcsT0FBT3pJLEVBQUVraEQsTUFBTSxDQUFDbGhELEVBQUVraEQsTUFBTTNHLE9BQ2xnQnY2QyxFQUFFQSxFQUFFQSxFQUFFa2hELE1BQU0sVUFBUyxHQUFHbGhELElBQUkvSSxFQUFFLE1BQU0rSSxFQUFFLEtBQUssT0FBT0EsRUFBRW1oRCxTQUFTLENBQUMsR0FBRyxPQUFPbmhELEVBQUV1NkMsUUFBUXY2QyxFQUFFdTZDLFNBQVN0akQsRUFBRSxNQUFNK0ksRUFBRUEsRUFBRUEsRUFBRXU2QyxPQUFPdjZDLEVBQUVtaEQsUUFBUTVHLE9BQU92NkMsRUFBRXU2QyxPQUFPdjZDLEVBQUVBLEVBQUVtaEQsUUFBUTBvQixHQUFHNXBFLEdBQUcsTUFBTSxLQUFLLEdBQUc0cEUsR0FBRzVwRSxHQUFHLE1BQU0sS0FBSyxHQUFTLEtBQUssR0FBUyxLQUFLLEdBQUcsTUFBTSxRQUFRLE1BQU0zRSxNQUFNcTFDLEVBQUUsT0FBUSxTQUFTazVCLEdBQUc3cEUsR0FBRyxJQUFJQyxFQUFFRCxFQUFFbS9ELFlBQVksR0FBRyxPQUFPbC9ELEVBQUUsQ0FBQ0QsRUFBRW0vRCxZQUFZLEtBQUssSUFBSWxvRSxFQUFFK0ksRUFBRTY0QyxVQUFVLE9BQU81aEQsSUFBSUEsRUFBRStJLEVBQUU2NEMsVUFBVSxJQUFJMnZCLElBQUl2b0UsRUFBRW5DLFNBQVEsU0FBU21DLEdBQUcsSUFBSS9JLEVBQUU0eUUsR0FBRzF4RSxLQUFLLEtBQUs0SCxFQUFFQyxHQUFHaEosRUFBRTg3QixJQUFJOXlCLEtBQUtoSixFQUFFa3dCLElBQUlsbkIsR0FBR0EsRUFBRXNKLEtBQUtyUyxFQUFFQSxRQUFPLElBQUk2eUUsR0FBRyxtQkFBb0IvYSxRQUFRQSxRQUFRNVQsSUFDbmYsU0FBUzR1QixHQUFHaHFFLEVBQUVDLEVBQUVoSixJQUFHQSxFQUFFNm5FLEdBQUc3bkUsRUFBRSxPQUFRaWpELElBQUksRUFBRWpqRCxFQUFFc3ZCLFFBQVEsQ0FBQytrQixRQUFRLE1BQU0sSUFBSXAwQyxFQUFFK0ksRUFBRXBJLE1BQXNELE9BQWhEWixFQUFFMFUsU0FBUyxXQUFXcytELEtBQUtBLElBQUcsRUFBR0MsR0FBR2h6RSxHQUFHd3hFLEdBQUcxb0UsRUFBRUMsSUFBV2hKLEVBQ3RJLFNBQVNrekUsR0FBR25xRSxFQUFFQyxFQUFFaEosSUFBR0EsRUFBRTZuRSxHQUFHN25FLEVBQUUsT0FBUWlqRCxJQUFJLEVBQUUsSUFBSWhqRCxFQUFFOEksRUFBRXZELEtBQUt3akIseUJBQXlCLEdBQUcsbUJBQW9CL29CLEVBQUUsQ0FBQyxJQUFJOEcsRUFBRWlDLEVBQUVwSSxNQUFNWixFQUFFc3ZCLFFBQVEsV0FBbUIsT0FBUm1pRCxHQUFHMW9FLEVBQUVDLEdBQVUvSSxFQUFFOEcsSUFBSSxJQUFJeUssRUFBRXpJLEVBQUU2NEMsVUFBOE8sT0FBcE8sT0FBT3B3QyxHQUFHLG1CQUFvQkEsRUFBRTJoRSxvQkFBb0JuekUsRUFBRTBVLFNBQVMsV0FBVyxtQkFBb0J6VSxJQUFJLE9BQU9tekUsR0FBR0EsR0FBRyxJQUFJbmIsSUFBSSxDQUFDL3hELE9BQU9rdEUsR0FBR2xqRCxJQUFJaHFCLE1BQU11ckUsR0FBRzFvRSxFQUFFQyxJQUFJLElBQUloSixFQUFFZ0osRUFBRW9vRSxNQUFNbHJFLEtBQUtpdEUsa0JBQWtCbnFFLEVBQUVwSSxNQUFNLENBQUN5eUUsZUFBZSxPQUFPcnpFLEVBQUVBLEVBQUUsT0FBY0EsRUFDN1osSUE2QzhZc3pFLEdBN0MxWUMsR0FBR3B3RSxLQUFLcXdFLEtBQUtDLEdBQUczeEIsRUFBRzlDLHVCQUF1QjAwQixHQUFHNXhCLEVBQUczQyxrQkFBa0I5QyxHQUFFLEVBQUVzM0IsR0FBRyxFQUFFQyxHQUFHLEdBQUdDLEdBQUcsR0FBR0MsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRTczQixHQUFFRCxHQUFFRCxHQUFFLEtBQUtJLEdBQUUsS0FBS0UsR0FBRSxFQUFFQyxHQUFFbTNCLEdBQUdNLEdBQUcsS0FBS0MsR0FBRyxXQUFXQyxHQUFHLFdBQVdDLEdBQUcsS0FBS0MsR0FBRyxFQUFFQyxJQUFHLEVBQUcvQixHQUFHLEVBQUVnQyxHQUFHLElBQUlyMUIsR0FBRSxLQUFLMnpCLElBQUcsRUFBR0MsR0FBRyxLQUFLRyxHQUFHLEtBQUt1QixJQUFHLEVBQUdDLEdBQUcsS0FBS0MsR0FBRyxHQUFHQyxHQUFHLEtBQUtDLEdBQUcsRUFBRUMsR0FBRyxLQUFLQyxHQUFHLEVBQUUsU0FBU2pNLEtBQUssT0FBTzFzQixJQUFHczNCLEdBQUdDLE9BQU94M0IsR0FBRSxZQUFZaXBCLEtBQUssR0FBRyxHQUFHLElBQUkyUCxHQUFHQSxHQUFHQSxHQUFHLFlBQVkzUCxLQUFLLEdBQUcsR0FDOVgsU0FBUzJELEdBQUdsZ0UsRUFBRUMsRUFBRWhKLEdBQVksR0FBRyxJQUFPLEdBQW5CZ0osRUFBRUEsRUFBRWxJLE9BQWtCLE9BQU8sV0FBVyxJQUFJYixFQUFFc2xFLEtBQUssR0FBRyxJQUFPLEVBQUZ2OEQsR0FBSyxPQUFPLEtBQUsvSSxFQUFFLFdBQVcsV0FBVyxJQUFJcThDLEdBQUVzM0IsTUFBTXYzQixHQUFFLE9BQU9LLEdBQUUsR0FBRyxPQUFPMThDLEVBQUUrSSxFQUFFZzlELEdBQUdoOUQsRUFBYyxFQUFaL0ksRUFBRWsxRSxXQUFhLElBQUksVUFBVSxPQUFPajFFLEdBQUcsS0FBSyxHQUFHOEksRUFBRSxXQUFXLE1BQU0sS0FBSyxHQUFHQSxFQUFFZzlELEdBQUdoOUQsRUFBRSxJQUFJLEtBQUssTUFBTSxLQUFLLEdBQUcsS0FBSyxHQUFHQSxFQUFFZzlELEdBQUdoOUQsRUFBRSxJQUFJLEtBQUssTUFBTSxLQUFLLEdBQUdBLEVBQUUsRUFBRSxNQUFNLFFBQVEsTUFBTTFFLE1BQU1xMUMsRUFBRSxNQUE0QixPQUFyQixPQUFPMEMsSUFBR3J6QyxJQUFJMnpDLE1BQUszekMsRUFBU0EsRUFDbFgsU0FBU21nRSxHQUFHbmdFLEVBQUVDLEdBQUcsR0FBRyxHQUFHK3JFLEdBQUcsTUFBTUEsR0FBRyxFQUFFQyxHQUFHLEtBQUszd0UsTUFBTXExQyxFQUFFLE1BQWdCLEdBQUcsUUFBYjN3QyxFQUFFb3NFLEdBQUdwc0UsRUFBRUMsSUFBZSxDQUFDLElBQUloSixFQUFFdWxFLEtBQUssYUFBYXY4RCxHQUFHc3pDLEdBQUVxM0IsTUFBTXQzQixLQUFJQyxJQUFHczNCLEdBQUdDLE9BQU94M0IsR0FBRSs0QixHQUFHcnNFLElBQUl1MkMsR0FBRXYyQyxHQUFHdXpDLEtBQUlELElBQUd3cEIsTUFBTXZtQixHQUFFdjJDLElBQU0sRUFBRnV6QyxNQUFPRCxJQUFHLEtBQUtyOEMsR0FBRyxLQUFLQSxJQUFJLE9BQU84MEUsR0FBR0EsR0FBRyxJQUFJM3dCLElBQUksQ0FBQyxDQUFDcDdDLEVBQUVDLFdBQW1CLEtBQWJoSixFQUFFODBFLEdBQUd0MEUsSUFBSXVJLEtBQWdCL0ksRUFBRWdKLElBQUk4ckUsR0FBRzF0RCxJQUFJcmUsRUFBRUMsS0FDelEsU0FBU21zRSxHQUFHcHNFLEVBQUVDLEdBQUdELEVBQUU2OUQsZUFBZTU5RCxJQUFJRCxFQUFFNjlELGVBQWU1OUQsR0FBRyxJQUFJaEosRUFBRStJLEVBQUUyZ0QsVUFBVSxPQUFPMXBELEdBQUdBLEVBQUU0bUUsZUFBZTU5RCxJQUFJaEosRUFBRTRtRSxlQUFlNTlELEdBQUcsSUFBSS9JLEVBQUU4SSxFQUFFdTZDLE9BQU92OEMsRUFBRSxLQUFLLEdBQUcsT0FBTzlHLEdBQUcsSUFBSThJLEVBQUVrNkMsSUFBSWw4QyxFQUFFZ0MsRUFBRTY0QyxlQUFlLEtBQUssT0FBTzNoRCxHQUFHLENBQStILEdBQTlIRCxFQUFFQyxFQUFFeXBELFVBQVV6cEQsRUFBRXdtRSxvQkFBb0J6OUQsSUFBSS9JLEVBQUV3bUUsb0JBQW9CejlELEdBQUcsT0FBT2hKLEdBQUdBLEVBQUV5bUUsb0JBQW9CejlELElBQUloSixFQUFFeW1FLG9CQUFvQno5RCxHQUFNLE9BQU8vSSxFQUFFcWpELFFBQVEsSUFBSXJqRCxFQUFFZ2pELElBQUksQ0FBQ2w4QyxFQUFFOUcsRUFBRTJoRCxVQUFVLE1BQU0zaEQsRUFBRUEsRUFBRXFqRCxPQUEwRCxPQUFuRCxPQUFPdjhDLElBQUlxMUMsS0FBSXIxQyxJQUFJeWhFLEdBQUd4L0QsR0FBRzJ6QyxLQUFJdTNCLElBQUltQixHQUFHdHVFLEVBQUUyMUMsS0FBSTQ0QixHQUFHdnVFLEVBQUVpQyxJQUFXakMsRUFDcmMsU0FBU3d1RSxHQUFHeHNFLEdBQUcsSUFBSUMsRUFBRUQsRUFBRXlzRSxnQkFBZ0IsT0FBRyxJQUFJeHNFLEVBQVNBLEVBQTJCeXNFLEdBQUcxc0UsRUFBNUJDLEVBQUVELEVBQUUyc0UsbUJBQXNDMXNFLEVBQUVELEVBQUU0c0UsaUJBQWU1c0UsRUFBRUEsRUFBRTZzRSx1QkFBaUM1c0UsRUFBRUQsRUFBNURDLEVBQ2pHLFNBQVNzMkMsR0FBRXYyQyxHQUFHLEdBQUcsSUFBSUEsRUFBRXlzRSxnQkFBZ0J6c0UsRUFBRThzRSx1QkFBdUIsV0FBVzlzRSxFQUFFK3NFLGlCQUFpQixHQUFHL3NFLEVBQUVndEUsYUFBYXBRLEdBQUd5UCxHQUFHajBFLEtBQUssS0FBSzRILFFBQVEsQ0FBQyxJQUFJQyxFQUFFdXNFLEdBQUd4c0UsR0FBRy9JLEVBQUUrSSxFQUFFZ3RFLGFBQWEsR0FBRyxJQUFJL3NFLEVBQUUsT0FBT2hKLElBQUkrSSxFQUFFZ3RFLGFBQWEsS0FBS2h0RSxFQUFFOHNFLHVCQUF1QixFQUFFOXNFLEVBQUUrc0UsaUJBQWlCLFFBQVEsQ0FBQyxJQUFJNzFFLEVBQUUrb0UsS0FBcUgsR0FBaEgsYUFBYWhnRSxFQUFFL0ksRUFBRSxHQUFHLElBQUkrSSxHQUFHLElBQUlBLEVBQUUvSSxFQUFFLEdBQTBDQSxFQUFFLElBQXhDQSxFQUFFLElBQUksV0FBVytJLEdBQUcsSUFBSSxXQUFXL0ksSUFBVSxHQUFHLEtBQUtBLEVBQUUsR0FBRyxNQUFNQSxFQUFFLEdBQUcsR0FBTyxPQUFPRCxFQUFFLENBQUMsSUFBSStHLEVBQUVnQyxFQUFFK3NFLGlCQUFpQixHQUFHL3NFLEVBQUU4c0UseUJBQXlCN3NFLEdBQUdqQyxHQUFHOUcsRUFBRSxPQUFPRCxJQUFJZ2xFLElBQUlsQixHQUFHOWpFLEdBQUcrSSxFQUFFOHNFLHVCQUNuZTdzRSxFQUFFRCxFQUFFK3NFLGlCQUFpQjcxRSxFQUFFK0ksRUFBRSxhQUFhQSxFQUFFMjhELEdBQUd5UCxHQUFHajBFLEtBQUssS0FBSzRILElBQUkyOEQsR0FBR3psRSxFQUFFKzFFLEdBQUc3MEUsS0FBSyxLQUFLNEgsR0FBRyxDQUFDbVMsUUFBUSxJQUFJLFdBQVdsUyxHQUFHczhELE9BQU92OEQsRUFBRWd0RSxhQUFhL3NFLElBQ2xJLFNBQVNndEUsR0FBR2p0RSxFQUFFQyxHQUFRLEdBQUxpc0UsR0FBRyxFQUFLanNFLEVBQUUsT0FBY2l0RSxHQUFHbHRFLEVBQVZDLEVBQUVnZ0UsTUFBYTFwQixHQUFFdjJDLEdBQUcsS0FBSyxJQUFJL0ksRUFBRXUxRSxHQUFHeHNFLEdBQUcsR0FBRyxJQUFJL0ksRUFBRSxDQUFrQixHQUFqQmdKLEVBQUVELEVBQUVndEUsY0FBaUJ6NUIsSUFBR3MzQixHQUFHQyxPQUFPeDNCLEdBQUUsTUFBTWg0QyxNQUFNcTFDLEVBQUUsTUFBaUMsR0FBM0J3OEIsS0FBS250RSxJQUFJcXpDLElBQUdwOEMsSUFBSTA4QyxJQUFHeTVCLEdBQUdwdEUsRUFBRS9JLEdBQU0sT0FBT3c4QyxHQUFFLENBQUMsSUFBSXY4QyxFQUFFcThDLEdBQUVBLElBQUdzM0IsR0FBZSxJQUFaLElBQUk3c0UsRUFBRXF2RSxPQUFTLElBQUlDLEtBQUssTUFBTSxNQUFNOThCLEdBQUcrOEIsR0FBR3Z0RSxFQUFFd3dDLEdBQWtDLEdBQXRCOHNCLEtBQUsvcEIsR0FBRXI4QyxFQUFFd3pFLEdBQUd2NEIsUUFBUW4wQyxFQUFLNDFDLEtBQUlvM0IsR0FBRyxNQUFNL3FFLEVBQUVvckUsR0FBRytCLEdBQUdwdEUsRUFBRS9JLEdBQUdxMUUsR0FBR3RzRSxFQUFFL0ksR0FBR3MvQyxHQUFFdjJDLEdBQUdDLEVBQUUsR0FBRyxPQUFPd3pDLEdBQUUsT0FBT3oxQyxFQUFFZ0MsRUFBRXd0RSxhQUFheHRFLEVBQUVteUMsUUFBUXdPLFVBQVUzZ0QsRUFBRXl0RSx1QkFBdUJ4MkUsRUFBRUMsRUFBRTA4QyxHQUFFUCxHQUFFLEtBQUtuOEMsR0FBRyxLQUFLNnpFLEdBQUcsS0FBS0MsR0FBRyxNQUFNMXZFLE1BQU1xMUMsRUFBRSxNQUFNLEtBQUtzNkIsR0FBR2lDLEdBQUdsdEUsRUFBRSxFQUFFL0ksRUFBRSxFQUFFQSxHQUFHLE1BQU0sS0FBS2kwRSxHQUN4YixHQUQyYm9CLEdBQUd0c0UsRUFBRS9JLEdBQ3ZlQSxLQUQwZUMsRUFBRThJLEVBQUUwdEUscUJBQ3RlMXRFLEVBQUU2c0Usc0JBQXNCYyxHQUFHM3ZFLElBQU8sYUFBYXN0RSxJQUFrQixJQUFidHRFLEVBQUUyckUsR0FBR2dDLEdBQUdwUCxNQUFXLENBQUMsR0FBR21QLEdBQUcsQ0FBQyxJQUFJampFLEVBQUV6SSxFQUFFNHNFLGVBQWUsR0FBRyxJQUFJbmtFLEdBQUdBLEdBQUd4UixFQUFFLENBQUMrSSxFQUFFNHNFLGVBQWUzMUUsRUFBRW0yRSxHQUFHcHRFLEVBQUUvSSxHQUFHLE9BQWUsR0FBRyxLQUFYd1IsRUFBRStqRSxHQUFHeHNFLEtBQWF5SSxJQUFJeFIsRUFBRSxNQUFNLEdBQUcsSUFBSUMsR0FBR0EsSUFBSUQsRUFBRSxDQUFDK0ksRUFBRTRzRSxlQUFlMTFFLEVBQUUsTUFBTThJLEVBQUU0dEUsY0FBY2hhLEdBQUdpYSxHQUFHejFFLEtBQUssS0FBSzRILEdBQUdoQyxHQUFHLE1BQU02dkUsR0FBRzd0RSxHQUFHLE1BQU0sS0FBS21yRSxHQUF3RSxHQUFyRW1CLEdBQUd0c0UsRUFBRS9JLEdBQXlCQSxLQUF0QkMsRUFBRThJLEVBQUUwdEUscUJBQTBCMXRFLEVBQUU2c0Usc0JBQXNCYyxHQUFHM3ZFLElBQU8wdEUsS0FBd0IsS0FBbkIxdEUsRUFBRWdDLEVBQUU0c0UsaUJBQXNCNXVFLEdBQUcvRyxHQUFHLENBQUMrSSxFQUFFNHNFLGVBQWUzMUUsRUFBRW0yRSxHQUFHcHRFLEVBQUUvSSxHQUFHLE1BQWMsR0FBRyxLQUFYK0csRUFBRXd1RSxHQUFHeHNFLEtBQWFoQyxJQUFJL0csRUFBRSxNQUFNLEdBQUcsSUFBSUMsR0FBR0EsSUFBSUQsRUFBRSxDQUFDK0ksRUFBRTRzRSxlQUN4ZTExRSxFQUFFLE1BQWdQLEdBQTFPLGFBQWFxMEUsR0FBR3IwRSxFQUFFLElBQUksV0FBV3EwRSxJQUFJaFAsS0FBSyxhQUFhK08sR0FBR3AwRSxFQUFFLEdBQUdBLEVBQUUsSUFBSSxXQUFXbzBFLElBQUksSUFBdUMsR0FBTnAwRSxHQUE3QjhHLEVBQUV1K0QsTUFBK0JybEUsS0FBUUEsRUFBRSxJQUFwQ0QsRUFBRSxJQUFJLFdBQVdBLEdBQUcrRyxJQUFtQjlHLEdBQUcsSUFBSUEsRUFBRSxJQUFJLElBQUlBLEVBQUUsSUFBSSxLQUFLQSxFQUFFLEtBQUssS0FBS0EsRUFBRSxLQUFLLElBQUlBLEVBQUUsSUFBSSxLQUFLQSxFQUFFLEtBQUssS0FBS3N6RSxHQUFHdHpFLEVBQUUsT0FBT0EsS0FBUUEsRUFBRUQsSUFBTyxHQUFHQyxFQUFFLENBQUM4SSxFQUFFNHRFLGNBQWNoYSxHQUFHaWEsR0FBR3oxRSxLQUFLLEtBQUs0SCxHQUFHOUksR0FBRyxNQUFNMjJFLEdBQUc3dEUsR0FBRyxNQUFNLEtBQUtvckUsR0FBRyxHQUFHLGFBQWFFLElBQUksT0FBT0UsR0FBRyxDQUFDL2lFLEVBQUU2aUUsR0FBRyxJQUFJdnBELEVBQUV5cEQsR0FBdUgsR0FBNUYsSUFBeEJ0MEUsRUFBc0IsRUFBcEI2cUIsRUFBRStyRCxtQkFBeUI1MkUsRUFBRSxHQUFHOEcsRUFBZ0IsRUFBZCtqQixFQUFFZ3NELFlBQThENzJFLEdBQWhEdVIsRUFBRTh6RCxNQUFNLElBQUksV0FBVzl6RCxJQUFnQixFQUFac1osRUFBRW9xRCxXQUFhLFFBQVdudUUsRUFBRSxFQUFFQSxFQUFFOUcsRUFBRXVSLEdBQU0sR0FBR3ZSLEVBQUUsQ0FBQ28xRSxHQUFHdHNFLEVBQUUvSSxHQUFHK0ksRUFBRTR0RSxjQUMvZWhhLEdBQUdpYSxHQUFHejFFLEtBQUssS0FBSzRILEdBQUc5SSxHQUFHLE9BQU8yMkUsR0FBRzd0RSxHQUFHLE1BQU0sUUFBUSxNQUFNMUUsTUFBTXExQyxFQUFFLE1BQVksR0FBTDRGLEdBQUV2MkMsR0FBTUEsRUFBRWd0RSxlQUFlL3NFLEVBQUUsT0FBT2d0RSxHQUFHNzBFLEtBQUssS0FBSzRILElBQUksT0FBTyxLQUNoSSxTQUFTcXNFLEdBQUdyc0UsR0FBRyxJQUFJQyxFQUFFRCxFQUFFeXNFLGdCQUFxQyxHQUFyQnhzRSxFQUFFLElBQUlBLEVBQUVBLEVBQUUsV0FBY0QsRUFBRXl0RSx5QkFBeUJ4dEUsRUFBRTR0RSxHQUFHN3RFLE9BQU8sQ0FBQyxJQUFJdXpDLElBQUdzM0IsR0FBR0MsT0FBT3gzQixHQUFFLE1BQU1oNEMsTUFBTXExQyxFQUFFLE1BQWlDLEdBQTNCdzhCLEtBQUtudEUsSUFBSXF6QyxJQUFHcHpDLElBQUkwekMsSUFBR3k1QixHQUFHcHRFLEVBQUVDLEdBQU0sT0FBT3d6QyxHQUFFLENBQUMsSUFBSXg4QyxFQUFFczhDLEdBQUVBLElBQUdzM0IsR0FBZSxJQUFaLElBQUkzekUsRUFBRW0yRSxPQUFTLElBQUlXLEtBQUssTUFBTSxNQUFNaHdFLEdBQUd1dkUsR0FBR3Z0RSxFQUFFaEMsR0FBa0MsR0FBdEJzL0QsS0FBSy9wQixHQUFFdDhDLEVBQUV5ekUsR0FBR3Y0QixRQUFRajdDLEVBQUswOEMsS0FBSW8zQixHQUFHLE1BQU0vekUsRUFBRW8wRSxHQUFHK0IsR0FBR3B0RSxFQUFFQyxHQUFHcXNFLEdBQUd0c0UsRUFBRUMsR0FBR3MyQyxHQUFFdjJDLEdBQUcvSSxFQUFFLEdBQUcsT0FBT3c4QyxHQUFFLE1BQU1uNEMsTUFBTXExQyxFQUFFLE1BQU0zd0MsRUFBRXd0RSxhQUFheHRFLEVBQUVteUMsUUFBUXdPLFVBQVUzZ0QsRUFBRXl0RSx1QkFBdUJ4dEUsRUFBRW96QyxHQUFFLEtBQUt3NkIsR0FBRzd0RSxHQUFHdTJDLEdBQUV2MkMsSUFBSSxPQUFPLEtBQzVWLFNBQVNpdUUsR0FBR2p1RSxFQUFFQyxHQUFHLElBQUloSixFQUFFczhDLEdBQUVBLElBQUcsRUFBRSxJQUFJLE9BQU92ekMsRUFBRUMsR0FBRyxTQUFRc3pDLEdBQUV0OEMsS0FBTXE4QyxJQUFHd3BCLE1BQU0sU0FBU29SLEdBQUdsdUUsRUFBRUMsR0FBRyxJQUFJaEosRUFBRXM4QyxHQUFFQSxLQUFJLEVBQUVBLElBQUdxM0IsR0FBRyxJQUFJLE9BQU81cUUsRUFBRUMsR0FBRyxTQUFRc3pDLEdBQUV0OEMsS0FBTXE4QyxJQUFHd3BCLE1BQ3pPLFNBQVNzUSxHQUFHcHRFLEVBQUVDLEdBQUdELEVBQUV3dEUsYUFBYSxLQUFLeHRFLEVBQUV5dEUsdUJBQXVCLEVBQUUsSUFBSXgyRSxFQUFFK0ksRUFBRTR0RSxjQUFpRCxJQUFsQyxJQUFJMzJFLElBQUkrSSxFQUFFNHRFLGVBQWUsRUFBRS9aLEdBQUc1OEQsSUFBTyxPQUFPdzhDLEdBQUUsSUFBSXg4QyxFQUFFdzhDLEdBQUU4RyxPQUFPLE9BQU90akQsR0FBRyxDQUFDLElBQUlDLEVBQUVELEVBQUUsT0FBT0MsRUFBRWdqRCxLQUFLLEtBQUssRUFBRSxJQUFJbDhDLEVBQUU5RyxFQUFFdUYsS0FBS2tqQixrQkFBa0IsTUFBTzNoQixHQUFlcThELEtBQU0sTUFBTSxLQUFLLEVBQUUrSCxLQUFNOUgsS0FBTSxNQUFNLEtBQUssRUFBRWdJLEdBQUdwckUsR0FBRyxNQUFNLEtBQUssRUFBRWtyRSxLQUFNLE1BQU0sS0FBSyxHQUFnQixLQUFLLEdBQUd4d0IsR0FBRWMsSUFBSyxNQUFNLEtBQUssR0FBRzhxQixHQUFHdG1FLEdBQUdELEVBQUVBLEVBQUVzakQsT0FBT2xILEdBQUVyekMsRUFBRXl6QyxHQUFFMnRCLEdBQUdwaEUsRUFBRW15QyxRQUFRLE1BQVF3QixHQUFFMXpDLEVBQUUyekMsR0FBRW0zQixHQUFHTSxHQUFHLEtBQUtFLEdBQUdELEdBQUcsV0FBV0UsR0FBRyxLQUFLQyxHQUFHLEVBQUVDLElBQUcsRUFDNWMsU0FBUzZCLEdBQUd2dEUsRUFBRUMsR0FBRyxPQUFFLENBQUMsSUFBYyxHQUFWcTlELEtBQUtzRyxLQUFRLE9BQU9ud0IsSUFBRyxPQUFPQSxHQUFFOEcsT0FBTyxPQUFPM0csR0FBRW8zQixHQUFHSyxHQUFHcHJFLEVBQUUsS0FBS0QsRUFBRSxDQUFDLElBQUkvSSxFQUFFK0ksRUFBRTlJLEVBQUV1OEMsR0FBRThHLE9BQU92OEMsRUFBRXkxQyxHQUFFaHJDLEVBQUV4SSxFQUF3RCxHQUF0REEsRUFBRTB6QyxHQUFFMzFDLEVBQUU0aUQsV0FBVyxLQUFLNWlELEVBQUV5Z0UsWUFBWXpnRSxFQUFFMGdFLFdBQVcsS0FBUSxPQUFPajJELEdBQUcsaUJBQWtCQSxHQUFHLG1CQUFvQkEsRUFBRWMsS0FBSyxDQUFDLElBQUl3WSxFQUFFdFosRUFBRStuQyxFQUFFLElBQWUsRUFBVmtDLEdBQUVQLFNBQVdqRSxFQUFFaDNDLEVBQUUsRUFBRSxDQUFDLElBQUlMLEVBQUUsR0FBR0EsRUFBRSxLQUFLcTNDLEVBQUVnTSxJQUFJLENBQUMsSUFBSWxqRCxFQUFFazNDLEVBQUU0UyxjQUFjLEdBQUcsT0FBTzlwRCxFQUFFSCxFQUFFLE9BQU9HLEVBQUUrcEQsZUFBcUIsQ0FBQyxJQUFJN1AsRUFBRWhELEVBQUVzMEIsY0FBYzNyRSxPQUFFLElBQVNxNkMsRUFBRXEyQixZQUFZLElBQUtyMkIsRUFBRXMyQiw2QkFBOEJoM0IsSUFBUyxHQUFHMzVDLEVBQUUsQ0FBQyxJQUFJOGlCLEVBQUV1MEIsRUFBRWl4QixZQUFZLEdBQUcsT0FBT3hsRCxFQUFFLENBQUMsSUFBSXE0QixFQUFFLElBQUlrZCxJQUNsZmxkLEVBQUU3cUIsSUFBSXBGLEdBQUdtc0IsRUFBRWl4QixZQUFZbnRCLE9BQU9yNEIsRUFBRXdOLElBQUlwRixHQUFHLEdBQUcsSUFBWSxFQUFQbXNCLEVBQUVuMkMsTUFBUSxDQUFvQyxHQUFuQ20yQyxFQUFFMFMsV0FBVyxHQUFHNWlELEVBQUU0aUQsWUFBWSxLQUFRLElBQUk1aUQsRUFBRWs4QyxJQUFJLEdBQUcsT0FBT2w4QyxFQUFFMmlELFVBQVUzaUQsRUFBRWs4QyxJQUFJLE9BQU8sQ0FBQyxJQUFJckosRUFBRWl1QixHQUFHLFdBQVcsTUFBTWp1QixFQUFFcUosSUFBSSxFQUFFZ2xCLEdBQUdsaEUsRUFBRTZ5QyxHQUFHN3lDLEVBQUU2L0QsZUFBZSxXQUFXLE1BQU03OUQsRUFBRXlJLE9BQUUsRUFBT3pLLEVBQUVpQyxFQUFFLElBQUkwaEUsRUFBRzFxRSxFQUFFazNFLFVBQW9ILEdBQTFHLE9BQU94TSxHQUFJQSxFQUFHMXFFLEVBQUVrM0UsVUFBVSxJQUFJcEUsR0FBR3RoRSxFQUFFLElBQUl5bUQsSUFBSXlTLEVBQUd0akQsSUFBSTBELEVBQUV0WixTQUFpQixLQUFaQSxFQUFFazVELEVBQUdscUUsSUFBSXNxQixNQUFnQnRaLEVBQUUsSUFBSXltRCxJQUFJeVMsRUFBR3RqRCxJQUFJMEQsRUFBRXRaLEtBQVNBLEVBQUVzcUIsSUFBSS8wQixHQUFHLENBQUN5SyxFQUFFMGUsSUFBSW5wQixHQUFHLElBQUl0RyxFQUFFMDJFLEdBQUdoMkUsS0FBSyxLQUFLbkIsRUFBRThxQixFQUFFL2pCLEdBQUcrakIsRUFBRXhZLEtBQUs3UixFQUFFQSxHQUFHdzJDLEVBQUUwUyxXQUFXLEtBQUsxUyxFQUFFMnZCLGVBQWU1OUQsRUFBRSxNQUFNRCxFQUFFa3VDLEVBQUVBLEVBQUVxTSxhQUFhLE9BQU9yTSxHQUFHemxDLEVBQUVuTixPQUFPMCtDLEVBQUdoOEMsRUFBRXZCLE9BQ3pmLHFCQUFxQix3TEFBd0x3OUMsRUFBR2o4QyxJQUFJNDFDLEtBQUl3M0IsS0FBS3gzQixHQUFFcTNCLElBQUl4aUUsRUFBRTIvRCxHQUFHMy9ELEVBQUV6SyxHQUFHa3dDLEVBQUVoM0MsRUFBRSxFQUFFLENBQUMsT0FBT2czQyxFQUFFZ00sS0FBSyxLQUFLLEVBQUVuNEIsRUFBRXRaLEVBQUV5bEMsRUFBRTBTLFdBQVcsS0FBSzFTLEVBQUUydkIsZUFBZTU5RCxFQUFrQm0vRCxHQUFHbHhCLEVBQWI4N0IsR0FBRzk3QixFQUFFbnNCLEVBQUU5aEIsSUFBVyxNQUFNRCxFQUFFLEtBQUssRUFBRStoQixFQUFFdFosRUFBRSxJQUFJc29DLEVBQUU3QyxFQUFFenhDLEtBQUsvRCxFQUFFdzFDLEVBQUUySyxVQUFVLEdBQUcsSUFBaUIsR0FBWjNLLEVBQUUwUyxhQUFnQixtQkFBb0I3UCxFQUFFOXdCLDBCQUEwQixPQUFPdm5CLEdBQUcsbUJBQW9CQSxFQUFFMHhFLG9CQUNqZSxPQUFPQyxLQUFLQSxHQUFHdDNDLElBQUlyNkIsS0FBSyxDQUFDdzFDLEVBQUUwUyxXQUFXLEtBQUsxUyxFQUFFMnZCLGVBQWU1OUQsRUFBa0JtL0QsR0FBR2x4QixFQUFiaThCLEdBQUdqOEIsRUFBRW5zQixFQUFFOWhCLElBQVcsTUFBTUQsR0FBR2t1QyxFQUFFQSxFQUFFcU0sYUFBYSxPQUFPck0sR0FBR3VGLEdBQUU0NkIsR0FBRzU2QixJQUFHLE1BQU01dkIsR0FBRzVqQixFQUFFNGpCLEVBQUUsU0FBUyxPQUFlLFNBQVN3cEQsS0FBSyxJQUFJcnRFLEVBQUUwcUUsR0FBR3Y0QixRQUFzQixPQUFkdTRCLEdBQUd2NEIsUUFBUXd4QixHQUFVLE9BQU8zakUsRUFBRTJqRSxHQUFHM2pFLEVBQUUsU0FBU3cvRCxHQUFHeC9ELEVBQUVDLEdBQUdELEVBQUVzckUsSUFBSSxFQUFFdHJFLElBQUlzckUsR0FBR3RyRSxHQUFHLE9BQU9DLEdBQUdELEVBQUV1ckUsSUFBSSxFQUFFdnJFLElBQUl1ckUsR0FBR3ZyRSxFQUFFd3JFLEdBQUd2ckUsR0FBRyxTQUFTdy9ELEdBQUd6L0QsR0FBR0EsRUFBRXlyRSxLQUFLQSxHQUFHenJFLEdBQUcsU0FBU2d1RSxLQUFLLEtBQUssT0FBT3Y2QixJQUFHQSxHQUFFNjZCLEdBQUc3NkIsSUFBRyxTQUFTNjVCLEtBQUssS0FBSyxPQUFPNzVCLEtBQUl3bkIsTUFBTXhuQixHQUFFNjZCLEdBQUc3NkIsSUFDeFosU0FBUzY2QixHQUFHdHVFLEdBQUcsSUFBSUMsRUFBRXNxRSxHQUFHdnFFLEVBQUUyZ0QsVUFBVTNnRCxFQUFFMnpDLElBQXNFLE9BQW5FM3pDLEVBQUV3aUUsY0FBY3hpRSxFQUFFOGxFLGFBQWEsT0FBTzdsRSxJQUFJQSxFQUFFb3VFLEdBQUdydUUsSUFBSTJxRSxHQUFHeDRCLFFBQVEsS0FBWWx5QyxFQUNuSCxTQUFTb3VFLEdBQUdydUUsR0FBR3l6QyxHQUFFenpDLEVBQUUsRUFBRSxDQUFDLElBQUlDLEVBQUV3ekMsR0FBRWtOLFVBQXFCLEdBQVgzZ0QsRUFBRXl6QyxHQUFFOEcsT0FBVSxJQUFpQixLQUFaOUcsR0FBRW1OLFdBQWdCLENBQUM1Z0QsRUFBRSxDQUFDLElBQUkvSSxFQUFFZ0osRUFBVS9JLEVBQUV5OEMsR0FBTTMxQyxHQUFoQmlDLEVBQUV3ekMsSUFBa0JxeUIsYUFBYSxPQUFPN2xFLEVBQUVpNkMsS0FBSyxLQUFLLEVBQVEsS0FBSyxHQUFHLE1BQU0sS0FBSyxHQUFHLEtBQUssRUFBRSxNQUFNLEtBQUssRUFBRTVILEdBQUVyeUMsRUFBRXhELE9BQU80OUQsS0FBTSxNQUFNLEtBQUssRUFBRStILEtBQU05SCxNQUFNdDhELEVBQUVpQyxFQUFFNDRDLFdBQVlrdUIsaUJBQWlCL29FLEVBQUV5ekMsUUFBUXp6QyxFQUFFK29FLGVBQWUvb0UsRUFBRStvRSxlQUFlLE9BQU8sT0FBTzl2RSxHQUFHLE9BQU9BLEVBQUVpcUQsUUFBUStrQixHQUFHaG1FLElBQUlnb0UsR0FBR2hvRSxHQUFHZ25FLEdBQUdobkUsR0FBRyxNQUFNLEtBQUssRUFBRXFpRSxHQUFHcmlFLEdBQUcvSSxFQUFFZ3JFLEdBQUdELEdBQUc5dkIsU0FBUyxJQUFJMXBDLEVBQUV4SSxFQUFFeEQsS0FBSyxHQUFHLE9BQU94RixHQUFHLE1BQU1nSixFQUFFNDRDLFVBQVVxdUIsR0FBR2p3RSxFQUFFZ0osRUFBRXdJLEVBQUV6SyxFQUFFOUcsR0FBR0QsRUFBRXM3QyxNQUFNdHlDLEVBQUVzeUMsTUFBTXR5QyxFQUFFMmdELFdBQVcsVUFBVSxHQUFHNWlELEVBQUUsQ0FBQyxJQUFJK2pCLEVBQzFmbWdELEdBQUdILEdBQUc1dkIsU0FBUyxHQUFHOHpCLEdBQUdobUUsR0FBRyxDQUFLLElBQUl1d0MsR0FBUnh5QyxFQUFFaUMsR0FBVTQ0QyxVQUFVNWhELEVBQUUrRyxFQUFFdkIsS0FBSyxJQUFJeXhDLEVBQUVsd0MsRUFBRXdrRSxjQUFjM3JFLEVBQUVLLEVBQStCLE9BQTdCczVDLEVBQUV3akIsSUFBSWgyRCxFQUFFd3lDLEVBQUV5akIsSUFBSS9sQixFQUFFemxDLE9BQUUsRUFBT3ZSLEVBQUVzNUMsRUFBU3Y1QyxHQUFHLElBQUssU0FBUyxJQUFLLFNBQVMsSUFBSyxRQUFRMDZDLEdBQUUsT0FBT3o2QyxHQUFHLE1BQU0sSUFBSyxRQUFRLElBQUssUUFBUSxJQUFJczVDLEVBQUUsRUFBRUEsRUFBRWlRLEdBQUdwbkQsT0FBT20zQyxJQUFJbUIsR0FBRThPLEdBQUdqUSxHQUFHdDVDLEdBQUcsTUFBTSxJQUFLLFNBQVN5NkMsR0FBRSxRQUFRejZDLEdBQUcsTUFBTSxJQUFLLE1BQU0sSUFBSyxRQUFRLElBQUssT0FBT3k2QyxHQUFFLFFBQVF6NkMsR0FBR3k2QyxHQUFFLE9BQU96NkMsR0FBRyxNQUFNLElBQUssT0FBT3k2QyxHQUFFLFFBQVF6NkMsR0FBR3k2QyxHQUFFLFNBQVN6NkMsR0FBRyxNQUFNLElBQUssVUFBVXk2QyxHQUFFLFNBQVN6NkMsR0FBRyxNQUFNLElBQUssUUFBUW9tRCxHQUFHcG1ELEVBQUVnM0MsR0FBR3lELEdBQUUsVUFBVXo2QyxHQUFHczdELEdBQUczN0QsRUFBRSxZQUFZLE1BQU0sSUFBSyxTQUFTSyxFQUFFa21ELGNBQ3RmLENBQUNzc0IsY0FBY3g3QixFQUFFRCxVQUFVMEQsR0FBRSxVQUFVejZDLEdBQUdzN0QsR0FBRzM3RCxFQUFFLFlBQVksTUFBTSxJQUFLLFdBQVd5bkQsR0FBR3BuRCxFQUFFZzNDLEdBQUd5RCxHQUFFLFVBQVV6NkMsR0FBR3M3RCxHQUFHMzdELEVBQUUsWUFBMkIsSUFBSTRSLEtBQW5CNHBELEdBQUdwN0QsRUFBRWkzQyxHQUFHc0MsRUFBRSxLQUFjdEMsRUFBRUEsRUFBRXoxQyxlQUFlZ1EsS0FBS3NaLEVBQUVtc0IsRUFBRXpsQyxHQUFHLGFBQWFBLEVBQUUsaUJBQWtCc1osRUFBRTdxQixFQUFFdW5ELGNBQWMxOEIsSUFBSXl1QixFQUFFLENBQUMsV0FBV3p1QixJQUFJLGlCQUFrQkEsR0FBRzdxQixFQUFFdW5ELGNBQWMsR0FBRzE4QixJQUFJeXVCLEVBQUUsQ0FBQyxXQUFXLEdBQUd6dUIsSUFBSWcxQixFQUFHdCtDLGVBQWVnUSxJQUFJLE1BQU1zWixHQUFHeXdDLEdBQUczN0QsRUFBRTRSLElBQUksT0FBT3hSLEdBQUcsSUFBSyxRQUFReWxELEdBQUd4bEQsR0FBRzBtRCxHQUFHMW1ELEVBQUVnM0MsR0FBRSxHQUFJLE1BQU0sSUFBSyxXQUFXd08sR0FBR3hsRCxHQUFHc25ELEdBQUd0bkQsR0FBSyxNQUFNLElBQUssU0FBUyxJQUFLLFNBQVMsTUFBTSxRQUFRLG1CQUFvQmczQyxFQUFFbzZCLFVBQ25mcHhFLEVBQUVxeEUsUUFBUTlWLElBQUlocUQsRUFBRStuQyxFQUFFeHlDLEVBQUVtaEUsWUFBWTEyRCxHQUFFekssRUFBRSxPQUFPeUssSUFBV3cvRCxHQUFHaG9FLE9BQU8sQ0FBQ2hKLEVBQUVnSixFQUFFcEosRUFBRTRSLEVBQUV5bEMsRUFBRWx3QyxFQUFFd3lDLEVBQUUsSUFBSXQ1QyxFQUFFdW9ELFNBQVN2b0QsRUFBRUEsRUFBRTJtRCxjQUFjOTdCLElBQUk0OEIsR0FBR0MsT0FBTzc4QixFQUFFKzhCLEdBQUdqb0QsSUFBSWtyQixJQUFJNDhCLEdBQUdDLEtBQUssV0FBVy9uRCxJQUFHcTNDLEVBQUVzQyxFQUFFL3BDLGNBQWMsUUFBUzQ0QyxVQUFVLHFCQUF1QjdPLEVBQUV0QyxFQUFFem1DLFlBQVl5bUMsRUFBRXRtQyxhQUFhLGlCQUFrQnNtQyxFQUFFcWtCLEdBQUcvaEIsRUFBRUEsRUFBRS9wQyxjQUFjNVAsRUFBRSxDQUFDMDdELEdBQUdya0IsRUFBRXFrQixNQUFNL2hCLEVBQUVBLEVBQUUvcEMsY0FBYzVQLEdBQUcsV0FBV0EsSUFBSUEsRUFBRTI1QyxFQUFFdEMsRUFBRUQsU0FBU3AzQyxFQUFFbzNDLFVBQVMsRUFBR0MsRUFBRS8rQixPQUFPdFksRUFBRXNZLEtBQUsrK0IsRUFBRS8rQixRQUFRcWhDLEVBQUVBLEVBQUUrOUIsZ0JBQWdCeHNELEVBQUVsckIsSUFBR3EzQyxFQUFFc0MsR0FBSXdqQixJQUFJLzhELEVBQUVpM0MsRUFBRStsQixJQUFJajJELEVBQUVncEUsR0FBRzk0QixFQUFFanVDLEdBQUUsR0FBRyxHQUFJQSxFQUFFNDRDLFVBQVUzSyxFQUFVLElBQUlsM0MsRUFBRUUsRUFBRWc2QyxFQUFFb2hCLEdBQWxCejdELEVBQUU0UixFQUFFeFIsRUFBRStHLEdBQW9CLE9BQU9uSCxHQUFHLElBQUssU0FBUyxJQUFLLFNBQVMsSUFBSyxRQUFRODZDLEdBQUUsT0FDdmlCekQsR0FBR2gzQyxFQUFFRCxFQUFFLE1BQU0sSUFBSyxRQUFRLElBQUssUUFBUSxJQUFJQyxFQUFFLEVBQUVBLEVBQUV1cEQsR0FBR3BuRCxPQUFPbkMsSUFBSXk2QyxHQUFFOE8sR0FBR3ZwRCxHQUFHZzNDLEdBQUdoM0MsRUFBRUQsRUFBRSxNQUFNLElBQUssU0FBUzA2QyxHQUFFLFFBQVF6RCxHQUFHaDNDLEVBQUVELEVBQUUsTUFBTSxJQUFLLE1BQU0sSUFBSyxRQUFRLElBQUssT0FBTzA2QyxHQUFFLFFBQVF6RCxHQUFHeUQsR0FBRSxPQUFPekQsR0FBR2gzQyxFQUFFRCxFQUFFLE1BQU0sSUFBSyxPQUFPMDZDLEdBQUUsUUFBUXpELEdBQUd5RCxHQUFFLFNBQVN6RCxHQUFHaDNDLEVBQUVELEVBQUUsTUFBTSxJQUFLLFVBQVUwNkMsR0FBRSxTQUFTekQsR0FBR2gzQyxFQUFFRCxFQUFFLE1BQU0sSUFBSyxRQUFRcW1ELEdBQUdwUCxFQUFFajNDLEdBQUdDLEVBQUUrbEQsR0FBRy9PLEVBQUVqM0MsR0FBRzA2QyxHQUFFLFVBQVV6RCxHQUFHc2tCLEdBQUd4N0QsRUFBRSxZQUFZLE1BQU0sSUFBSyxTQUFTRSxFQUFFNm1ELEdBQUc3UCxFQUFFajNDLEdBQUcsTUFBTSxJQUFLLFNBQVNpM0MsRUFBRWtQLGNBQWMsQ0FBQ3NzQixjQUFjenlFLEVBQUVnM0MsVUFBVS8yQyxFQUFFbUIsRUFBRSxHQUFHcEIsRUFBRSxDQUFDWSxXQUFNLElBQVM4NUMsR0FBRSxVQUFVekQsR0FBR3NrQixHQUFHeDdELEVBQUUsWUFBWSxNQUFNLElBQUssV0FBV3NuRCxHQUFHcFEsRUFDdGdCajNDLEdBQUdDLEVBQUVrbkQsR0FBR2xRLEVBQUVqM0MsR0FBRzA2QyxHQUFFLFVBQVV6RCxHQUFHc2tCLEdBQUd4N0QsRUFBRSxZQUFZLE1BQU0sUUFBUUUsRUFBRUQsRUFBRW83RCxHQUFHeDdELEVBQUVLLEdBQUdzNUMsT0FBRSxFQUFPenVCLEVBQUVsckIsRUFBRSxJQUFJOGlCLEVBQUV1MEIsRUFBRThELEVBQUU5NkMsRUFBRSxJQUFJczVDLEtBQUt3QixFQUFFLEdBQUdBLEVBQUV2NUMsZUFBZSszQyxHQUFHLENBQUMsSUFBSUssRUFBRW1CLEVBQUV4QixHQUFHLFVBQVVBLEVBQUV5aEIsR0FBR3Q0QyxFQUFFazNCLEdBQUcsNEJBQTRCTCxFQUF1QixPQUFwQkssRUFBRUEsRUFBRUEsRUFBRThpQixZQUFPLElBQWdCMVUsR0FBR3RsQyxFQUFFazNCLEdBQUksYUFBYUwsRUFBRSxpQkFBa0JLLEdBQUcsYUFBYTl1QixHQUFHLEtBQUs4dUIsSUFBSTBPLEdBQUc1bEMsRUFBRWszQixHQUFHLGlCQUFrQkEsR0FBRzBPLEdBQUc1bEMsRUFBRSxHQUFHazNCLEdBQUcsbUNBQW1DTCxHQUFHLDZCQUE2QkEsR0FBRyxjQUFjQSxJQUFJdUcsRUFBR3QrQyxlQUFlKzNDLEdBQUcsTUFBTUssR0FBRzJoQixHQUFHeDdELEVBQUV3NUMsR0FBRyxNQUFNSyxHQUFHcUwsR0FBR3ZpQyxFQUFFNjJCLEVBQUVLLEVBQUVLLElBQUksT0FBT3I2QyxHQUFHLElBQUssUUFBUTZsRCxHQUFHeE8sR0FDMWYwUCxHQUFHMVAsRUFBRWozQyxHQUFFLEdBQUksTUFBTSxJQUFLLFdBQVd5bEQsR0FBR3hPLEdBQUdzUSxHQUFHdFEsR0FBSyxNQUFNLElBQUssU0FBUyxNQUFNajNDLEVBQUVZLE9BQU9xMkMsRUFBRXRuQyxhQUFhLFFBQVEsR0FBR3ExQyxHQUFHaGxELEVBQUVZLFFBQVEsTUFBTSxJQUFLLFVBQVNYLEVBQUVnM0MsR0FBSUQsV0FBV2gzQyxFQUFFZzNDLFNBQW1CLE9BQVZDLEVBQUVqM0MsRUFBRVksT0FBY29tRCxHQUFHL21ELElBQUlELEVBQUVnM0MsU0FBU0MsR0FBRSxHQUFJLE1BQU1qM0MsRUFBRWttRCxjQUFjYyxHQUFHL21ELElBQUlELEVBQUVnM0MsU0FBU2gzQyxFQUFFa21ELGNBQWEsR0FBSSxNQUFNLFFBQVEsbUJBQW9Cam1ELEVBQUVveEUsVUFBVXA2QixFQUFFcTZCLFFBQVE5VixLQUFLejBELEVBQUV3MUQsR0FBRy9xRCxFQUFFekssS0FBS2lxRSxHQUFHaG9FLEdBQUcsT0FBT0EsRUFBRXN5QyxNQUFNdHlDLEVBQUUyZ0QsV0FBVyxVQUFVLEdBQUcsT0FBTzNnRCxFQUFFNDRDLFVBQVUsTUFBTXY5QyxNQUFNcTFDLEVBQUUsTUFBTSxNQUFNLEtBQUssRUFBRSxHQUFHMTVDLEdBQUcsTUFBTWdKLEVBQUU0NEMsVUFBVXN1QixHQUFHbHdFLEVBQUVnSixFQUFFaEosRUFBRXVyRSxjQUFjeGtFLE9BQU8sQ0FBQyxHQUFHLGlCQUM3ZUEsR0FBRyxPQUFPaUMsRUFBRTQ0QyxVQUFVLE1BQU12OUMsTUFBTXExQyxFQUFFLE1BQU16NUMsRUFBRWdyRSxHQUFHRCxHQUFHOXZCLFNBQVMrdkIsR0FBR0gsR0FBRzV2QixTQUFTOHpCLEdBQUdobUUsSUFBUXdJLEdBQUp6SyxFQUFFaUMsR0FBTTQ0QyxVQUFVM2hELEVBQUU4RyxFQUFFd2tFLGNBQWMvNUQsRUFBRXVyRCxJQUFJaDJELEdBQUdBLEVBQUV5SyxFQUFFMmpDLFlBQVlsMUMsSUFBSSt3RSxHQUFHaG9FLEtBQUt3SSxFQUFFeEksR0FBRWpDLEdBQUcsSUFBSTlHLEVBQUV1b0QsU0FBU3ZvRCxFQUFFQSxFQUFFMm1ELGVBQWV0MkMsZUFBZXZKLElBQUtnMkQsSUFBSXZyRCxFQUFFeEksRUFBRTQ0QyxVQUFVNzZDLEdBQUcsTUFBTSxLQUFLLEdBQUcsTUFBTSxLQUFLLEdBQTRCLEdBQXpCNHpDLEdBQUVjLElBQUsxMEMsRUFBRWlDLEVBQUU2Z0QsY0FBaUIsSUFBaUIsR0FBWjdnRCxFQUFFMmdELFdBQWMsQ0FBQzNnRCxFQUFFNDlELGVBQWUzbUUsRUFBRSxNQUFNOEksRUFBRWhDLEVBQUUsT0FBT0EsRUFBRXlLLEdBQUUsRUFBRyxPQUFPeFIsT0FBRSxJQUFTZ0osRUFBRXVpRSxjQUFjK0UsVUFBVXRCLEdBQUdobUUsSUFBc0J3SSxFQUFFLFFBQXBCdlIsRUFBRUQsRUFBRTZwRCxlQUF5QjlpRCxHQUFHLE9BQU85RyxHQUFzQixRQUFsQkEsRUFBRUQsRUFBRWlxRCxNQUFNQyxXQUNwZCxRQUR1ZWpULEVBQUVqdUMsRUFBRXcrRCxjQUNqZXgrRCxFQUFFdytELFlBQVl2bkUsRUFBRUEsRUFBRThuRSxXQUFXOXdCLElBQUlqdUMsRUFBRXcrRCxZQUFZeCtELEVBQUV5K0QsV0FBV3huRSxFQUFFQSxFQUFFOG5FLFdBQVcsTUFBTTluRSxFQUFFMHBELFVBQVUsSUFBUTVpRCxJQUFJeUssR0FBRyxJQUFZLEVBQVB4SSxFQUFFbEksUUFBVyxPQUFPZCxJQUFHLElBQUtnSixFQUFFdWlFLGNBQWNnRiw0QkFBNEIsSUFBZSxFQUFWOTBCLEdBQUVQLFNBQVd5QixLQUFJbTNCLEtBQUtuM0IsR0FBRXMzQixLQUFZdDNCLEtBQUltM0IsSUFBSW4zQixLQUFJczNCLEtBQUd0M0IsR0FBRXUzQixJQUFHLElBQUlNLElBQUksT0FBT3A0QixLQUFJaTVCLEdBQUdqNUIsR0FBRU0sSUFBRzQ0QixHQUFHbDVCLEdBQUVvNEIsUUFBUXp0RSxHQUFHeUssS0FBRXhJLEVBQUUyZ0QsV0FBVyxHQUFFLE1BQU0sS0FBSyxFQUFRLEtBQUssRUFBUSxLQUFLLEdBQUcsTUFBTSxLQUFLLEVBQUV3aEIsS0FBTTZFLEdBQUdobkUsR0FBRyxNQUFNLEtBQUssR0FBR3U5RCxHQUFHdjlELEdBQUcsTUFBTSxLQUFLLEVBQVEsS0FBSyxHQUFHLE1BQU0sS0FBSyxHQUFHcXlDLEdBQUVyeUMsRUFBRXhELE9BQU80OUQsS0FBTSxNQUFNLEtBQUssR0FBNEIsR0FBekJ6b0IsR0FBRWMsSUFBMEIsUUFBckIxMEMsRUFBRWlDLEVBQUU2Z0QsZUFDbGUsTUFBMkMsR0FBckNyNEMsRUFBRSxJQUFpQixHQUFaeEksRUFBRTJnRCxXQUErQixRQUFqQjFTLEVBQUVsd0MsRUFBRTRwRSxZQUFzQixHQUFHbi9ELEVBQUV5L0QsR0FBR2xxRSxHQUFFLFFBQVMsR0FBRzQxQyxLQUFJbTNCLElBQUksT0FBTzl6RSxHQUFHLElBQWlCLEdBQVpBLEVBQUUycEQsV0FBYyxJQUFJM3BELEVBQUVnSixFQUFFaWhELE1BQU0sT0FBT2pxRCxHQUFHLENBQVMsR0FBRyxRQUFYaTNDLEVBQUVxMEIsR0FBR3RyRSxJQUFlLENBQTZKLElBQTVKZ0osRUFBRTJnRCxXQUFXLEdBQUdzbkIsR0FBR2xxRSxHQUFFLEdBQW9CLFFBQWhCeUssRUFBRXlsQyxFQUFFaXhCLGVBQXVCbC9ELEVBQUVrL0QsWUFBWTEyRCxFQUFFeEksRUFBRTJnRCxXQUFXLEdBQUcsT0FBTzVpRCxFQUFFMGdFLGFBQWF6K0QsRUFBRXcrRCxZQUFZLE1BQU14K0QsRUFBRXkrRCxXQUFXMWdFLEVBQUUwZ0UsV0FBVzFnRSxFQUFFOUcsRUFBTXVSLEVBQUV4SSxFQUFFaWhELE1BQU0sT0FBT3o0QyxHQUFPeFIsRUFBRStHLEdBQU45RyxFQUFFdVIsR0FBUW00QyxXQUFXLEVBQUUxcEQsRUFBRThuRSxXQUFXLEtBQUs5bkUsRUFBRXVuRSxZQUFZLEtBQUt2bkUsRUFBRXduRSxXQUFXLEtBQW1CLFFBQWR4d0IsRUFBRWgzQyxFQUFFeXBELFlBQW9CenBELEVBQUV3bUUsb0JBQW9CLEVBQUV4bUUsRUFBRTJtRSxlQUFlNW1FLEVBQUVDLEVBQUVncUQsTUFBTSxLQUNqZmhxRCxFQUFFc3JFLGNBQWMsS0FBS3RyRSxFQUFFNHBELGNBQWMsS0FBSzVwRCxFQUFFaW9FLFlBQVksS0FBS2pvRSxFQUFFKy9DLGFBQWEsT0FBTy8vQyxFQUFFd21FLG9CQUFvQnh2QixFQUFFd3ZCLG9CQUFvQnhtRSxFQUFFMm1FLGVBQWUzdkIsRUFBRTJ2QixlQUFlM21FLEVBQUVncUQsTUFBTWhULEVBQUVnVCxNQUFNaHFELEVBQUVzckUsY0FBY3QwQixFQUFFczBCLGNBQWN0ckUsRUFBRTRwRCxjQUFjNVMsRUFBRTRTLGNBQWM1cEQsRUFBRWlvRSxZQUFZanhCLEVBQUVpeEIsWUFBWWxvRSxFQUFFaTNDLEVBQUUrSSxhQUFhLy9DLEVBQUUrL0MsYUFBYSxPQUFPaGdELEVBQUUsS0FBSyxDQUFDNG1FLGVBQWU1bUUsRUFBRTRtRSxlQUFlRCxhQUFhM21FLEVBQUUybUUsYUFBYUssV0FBV2huRSxFQUFFZ25FLGFBQWF4MUQsRUFBRUEsRUFBRTA0QyxRQUFRalAsR0FBRVEsR0FBWSxFQUFWQSxHQUFFUCxRQUFVLEdBQUtseUMsRUFBRUEsRUFBRWloRCxNQUFNLE1BQU1saEQsRUFBRS9JLEVBQUVBLEVBQUVrcUQsYUFBYSxDQUFDLElBQUkxNEMsRUFBRSxHQUFXLFFBQVJ4UixFQUFFc3JFLEdBQUdyMEIsS0FBYSxHQUFHanVDLEVBQUUyZ0QsV0FDdmYsR0FBR240QyxHQUFFLEVBQW1CLFFBQWhCdlIsRUFBRUQsRUFBRWtvRSxlQUF1QmwvRCxFQUFFay9ELFlBQVlqb0UsRUFBRStJLEVBQUUyZ0QsV0FBVyxHQUFHc25CLEdBQUdscUUsR0FBRSxHQUFJLE9BQU9BLEVBQUU2cEUsTUFBTSxXQUFXN3BFLEVBQUUrcEUsV0FBVzc1QixFQUFFeVMsVUFBVSxDQUE2QixRQUE1QjFnRCxFQUFFQSxFQUFFeStELFdBQVcxZ0UsRUFBRTBnRSxjQUFzQnorRCxFQUFFKytELFdBQVcsTUFBTSxZQUFZekMsS0FBS3YrRCxFQUFFOHBFLGdCQUFnQixFQUFFNXdFLElBQUkrSSxFQUFFMmdELFdBQVcsR0FBR240QyxHQUFFLEVBQUd5L0QsR0FBR2xxRSxHQUFFLEdBQUlpQyxFQUFFNDlELGVBQWU1OUQsRUFBRXk5RCxvQkFBb0J4bUUsRUFBRSxHQUFHOEcsRUFBRTJwRSxhQUFhejVCLEVBQUVpVCxRQUFRbGhELEVBQUVpaEQsTUFBTWpoRCxFQUFFaWhELE1BQU1oVCxJQUFhLFFBQVRoM0MsRUFBRThHLEVBQUVtbUUsTUFBY2p0RSxFQUFFaXFELFFBQVFqVCxFQUFFanVDLEVBQUVpaEQsTUFBTWhULEVBQUVsd0MsRUFBRW1tRSxLQUFLajJCLEdBQUcsR0FBRyxPQUFPbHdDLEVBQUU2cEUsS0FBSyxDQUFDLElBQUk3cEUsRUFBRThwRSxpQkFBaUI5cEUsRUFBRThwRSxlQUFldkwsS0FBSyxLQUFLcmxFLEVBQUU4RyxFQUFFNnBFLEtBQUs3cEUsRUFBRTRwRSxVQUFVMXdFLEVBQUU4RyxFQUFFNnBFLEtBQUszd0UsRUFBRWlxRCxRQUNoZm5qRCxFQUFFMGdFLFdBQVd6K0QsRUFBRXkrRCxXQUFXeG5FLEVBQUVpcUQsUUFBUSxLQUFLbmpELEVBQUUwMEMsR0FBRVAsUUFBc0JELEdBQUVRLEdBQWhCMTBDLEVBQUV5SyxFQUFJLEVBQUZ6SyxFQUFJLEVBQUksRUFBRkEsR0FBYWlDLEVBQUUvSSxFQUFFLE1BQU04SSxFQUFFLE1BQU0sS0FBSyxHQUFTLEtBQUssR0FBRyxNQUFNLFFBQVEsTUFBTTFFLE1BQU1xMUMsRUFBRSxJQUFJMXdDLEVBQUVpNkMsTUFBT2o2QyxFQUFFLEtBQVMsR0FBSmpDLEVBQUV5MUMsR0FBSyxJQUFJRSxJQUFHLElBQUkzMUMsRUFBRTAvRCxvQkFBb0IsQ0FBSyxJQUFKajFELEVBQUUsRUFBTXZSLEVBQUU4RyxFQUFFa2pELE1BQU0sT0FBT2hxRCxJQUFHRCxFQUFFQyxFQUFFMm1FLGdCQUF5Q3AxRCxJQUFJQSxFQUFFeFIsSUFBaENpM0MsRUFBRWgzQyxFQUFFd21FLHFCQUFpQ2oxRCxJQUFJQSxFQUFFeWxDLEdBQUdoM0MsRUFBRUEsRUFBRWlxRCxRQUFRbmpELEVBQUUwL0Qsb0JBQW9CajFELEVBQUUsR0FBRyxPQUFPeEksRUFBRSxPQUFPQSxFQUFFLE9BQU9ELEdBQUcsSUFBaUIsS0FBWkEsRUFBRTRnRCxhQUFrQixPQUFPNWdELEVBQUV5K0QsY0FBY3orRCxFQUFFeStELFlBQVlockIsR0FBRWdyQixhQUFhLE9BQU9ockIsR0FBRWlyQixhQUFhLE9BQU8xK0QsRUFBRTArRCxhQUFhMStELEVBQUUwK0QsV0FBV00sV0FDbmZ2ckIsR0FBRWdyQixhQUFheitELEVBQUUwK0QsV0FBV2pyQixHQUFFaXJCLFlBQVksRUFBRWpyQixHQUFFbU4sWUFBWSxPQUFPNWdELEVBQUUwK0QsV0FBVzErRCxFQUFFMCtELFdBQVdNLFdBQVd2ckIsR0FBRXp6QyxFQUFFeStELFlBQVlockIsR0FBRXp6QyxFQUFFMCtELFdBQVdqckIsU0FBUSxDQUFXLEdBQUcsUUFBYnh6QyxFQUFFa29FLEdBQUcxMEIsS0FBaUIsT0FBT3h6QyxFQUFFMmdELFdBQVcsS0FBSzNnRCxFQUFFLE9BQU9ELElBQUlBLEVBQUV5K0QsWUFBWXorRCxFQUFFMCtELFdBQVcsS0FBSzErRCxFQUFFNGdELFdBQVcsTUFBa0IsR0FBRyxRQUFmM2dELEVBQUV3ekMsR0FBRTBOLFNBQW9CLE9BQU9saEQsRUFBRXd6QyxHQUFFenpDLFFBQVEsT0FBT3l6QyxJQUFrQixPQUFmRyxLQUFJbTNCLEtBQUtuM0IsR0FBRXczQixJQUFXLEtBQUssU0FBU3VDLEdBQUczdEUsR0FBRyxJQUFJQyxFQUFFRCxFQUFFNjlELGVBQXVDLE9BQU81OUQsR0FBL0JELEVBQUVBLEVBQUUwOUQscUJBQStCejlELEVBQUVELEVBQUUsU0FBUzZ0RSxHQUFHN3RFLEdBQUcsSUFBSUMsRUFBRXU4RCxLQUE4QixPQUF6QkUsR0FBRyxHQUFHOFIsR0FBR3AyRSxLQUFLLEtBQUs0SCxFQUFFQyxJQUFXLEtBQ3BkLFNBQVN1dUUsR0FBR3h1RSxFQUFFQyxHQUFHLEdBQUdrdEUsV0FBVyxPQUFPdEIsSUFBSSxJQUFJdDRCLElBQUdzM0IsR0FBR0MsT0FBT3gzQixHQUFFLE1BQU1oNEMsTUFBTXExQyxFQUFFLE1BQU0sSUFBSTE1QyxFQUFFK0ksRUFBRXd0RSxhQUFhdDJFLEVBQUU4SSxFQUFFeXRFLHVCQUF1QixHQUFHLE9BQU94MkUsRUFBRSxPQUFPLEtBQW9ELEdBQS9DK0ksRUFBRXd0RSxhQUFhLEtBQUt4dEUsRUFBRXl0RSx1QkFBdUIsRUFBS3gyRSxJQUFJK0ksRUFBRW15QyxRQUFRLE1BQU03MkMsTUFBTXExQyxFQUFFLE1BQU0zd0MsRUFBRWd0RSxhQUFhLEtBQUtodEUsRUFBRThzRSx1QkFBdUIsRUFBRTlzRSxFQUFFK3NFLGlCQUFpQixHQUFHL3NFLEVBQUU2c0Usc0JBQXNCLEVBQUUsSUFBSTd1RSxFQUFFMnZFLEdBQUcxMkUsR0FDbEksR0FEcUkrSSxFQUFFMnNFLGlCQUFpQjN1RSxFQUFFOUcsR0FBRzhJLEVBQUUwdEUsa0JBQWtCMXRFLEVBQUV5dUUsbUJBQW1CenVFLEVBQUUwdEUsa0JBQWtCMXRFLEVBQUU2c0Usc0JBQXNCLEVBQUUzMUUsR0FBRzhJLEVBQUV5dUUscUJBQXFCenVFLEVBQUV5dUUsbUJBQ25ldjNFLEVBQUUsR0FBR0EsR0FBRzhJLEVBQUU0c0UsaUJBQWlCNXNFLEVBQUU0c0UsZUFBZSxHQUFHMTFFLEdBQUc4SSxFQUFFeXNFLGtCQUFrQnpzRSxFQUFFeXNFLGdCQUFnQixHQUFHenNFLElBQUlxekMsS0FBSUksR0FBRUosR0FBRSxLQUFLTSxHQUFFLEdBQUcsRUFBRTE4QyxFQUFFMnBELFVBQVUsT0FBTzNwRCxFQUFFeW5FLFlBQVl6bkUsRUFBRXluRSxXQUFXTSxXQUFXL25FLEVBQUUrRyxFQUFFL0csRUFBRXduRSxhQUFhemdFLEVBQUUvRyxFQUFFK0csRUFBRS9HLEVBQUV3bkUsWUFBZSxPQUFPemdFLEVBQUUsQ0FBQyxJQUFJeUssRUFBRThxQyxHQUFFQSxJQUFHdTNCLEdBQUdILEdBQUd4NEIsUUFBUSxLQUFLbWhCLEdBQUcvRSxHQUFHLElBQUl4c0MsRUFBRTh3QyxLQUFLLEdBQUdHLEdBQUdqeEMsR0FBRyxDQUFDLEdBQUcsbUJBQW1CQSxFQUFFLElBQUl5dUIsRUFBRSxDQUFDOTZCLE1BQU1xTSxFQUFFaTNDLGVBQWU3b0QsSUFBSTRSLEVBQUVrM0MsbUJBQW1CajVELEVBQUUsQ0FBOEMsSUFBSWt1QyxHQUFqRHNDLEdBQUdBLEVBQUV6dUIsRUFBRTg3QixnQkFBZ0JyTixFQUFFNG5CLGFBQWEzMUQsUUFBZTAyRCxjQUFjM29CLEVBQUUyb0IsZUFBZSxHQUFHanJCLEdBQUcsSUFBSUEsRUFBRXdnQyxXQUFXLENBQUNsK0IsRUFBRXRDLEVBQUVnckIsV0FBVyxJQUFJcmlFLEVBQUVxM0MsRUFBRWtyQixhQUM5ZXBpRSxFQUFFazNDLEVBQUVtckIsVUFBVW5yQixFQUFFQSxFQUFFb3JCLFlBQVksSUFBSTlvQixFQUFFaVAsU0FBU3pvRCxFQUFFeW9ELFNBQVMsTUFBTWt2QixHQUFJbitCLEVBQUUsS0FBSyxNQUFNeHdDLEVBQUUsSUFBSWt4QyxFQUFFLEVBQUV2M0IsR0FBRyxFQUFFcTRCLEdBQUcsRUFBRW5CLEVBQUUsRUFBRTh3QixFQUFHLEVBQUVqcUUsRUFBRXFxQixFQUFFckksRUFBRSxLQUFLelosRUFBRSxPQUFPLENBQUMsSUFBSSxJQUFJOHdDLEVBQUtyNUMsSUFBSTg0QyxHQUFHLElBQUkzNUMsR0FBRyxJQUFJYSxFQUFFK25ELFdBQVc5bEMsRUFBRXUzQixFQUFFcjZDLEdBQUdhLElBQUlWLEdBQUcsSUFBSWszQyxHQUFHLElBQUl4MkMsRUFBRStuRCxXQUFXek4sRUFBRWQsRUFBRWhELEdBQUcsSUFBSXgyQyxFQUFFK25ELFdBQVd2TyxHQUFHeDVDLEVBQUUwMEMsVUFBVS95QyxRQUFXLFFBQVEwM0MsRUFBRXI1QyxFQUFFa1EsYUFBa0I4UixFQUFFaGlCLEVBQUVBLEVBQUVxNUMsRUFBRSxPQUFPLENBQUMsR0FBR3I1QyxJQUFJcXFCLEVBQUUsTUFBTTloQixFQUErQyxHQUE3Q3laLElBQUk4MkIsS0FBS0ssSUFBSWg2QyxJQUFJOGlCLEVBQUV1M0IsR0FBR3gzQixJQUFJMWlCLEtBQUsycUUsSUFBS3p6QixJQUFJOEQsRUFBRWQsR0FBTSxRQUFRSCxFQUFFcjVDLEVBQUV5MEMsYUFBYSxNQUFVenlCLEdBQUpoaUIsRUFBRWdpQixHQUFNelIsV0FBV3ZRLEVBQUVxNUMsRUFBRVAsR0FBRyxJQUFJNzJCLElBQUksSUFBSXE0QixFQUFFLEtBQUssQ0FBQ3Q4QixNQUFNaUUsRUFBRXhKLElBQUk2aEMsUUFBUXhCLEVBQUUsS0FBS0EsRUFBRUEsR0FBRyxDQUFDOTZCLE1BQU0sRUFBRXZGLElBQUksUUFBUXFnQyxFQUN0ZixLQUFLK2lCLEdBQUcsQ0FBQ3FiLFlBQVk3c0QsRUFBRThzRCxlQUFlcitCLEdBQUcrZCxJQUFHLEVBQUdqWSxHQUFFdDRDLEVBQUUsR0FBRyxJQUFJOHdFLEtBQUssTUFBTUgsR0FBSSxHQUFHLE9BQU9yNEIsR0FBRSxNQUFNaDdDLE1BQU1xMUMsRUFBRSxNQUFNaTRCLEdBQUd0eUIsR0FBRXE0QixHQUFJcjRCLEdBQUVBLEdBQUUwb0Isa0JBQWlCLE9BQU8xb0IsSUFBR0EsR0FBRXQ0QyxFQUFFLEdBQUcsSUFBSSxJQUFJK2pCLEVBQUUvaEIsRUFBRXd3QyxFQUFFdndDLEVBQUUsT0FBT3EyQyxJQUFHLENBQUMsSUFBSTU5QyxFQUFFNDlDLEdBQUVzSyxVQUFtQyxHQUF2QixHQUFGbG9ELEdBQU02bUQsR0FBR2pKLEdBQUV1QyxVQUFVLElBQVMsSUFBRm5nRCxFQUFNLENBQUMsSUFBSVosRUFBRXcrQyxHQUFFcUssVUFBVSxHQUFHLE9BQU83b0QsRUFBRSxDQUFDLElBQUkrckIsRUFBRS9yQixFQUFFeTZDLElBQUksT0FBTzF1QixJQUFJLG1CQUFvQkEsRUFBRUEsRUFBRSxNQUFNQSxFQUFFc3VCLFFBQVEsT0FBTyxPQUFTLEtBQUZ6NUMsR0FBUSxLQUFLLEVBQUU2d0UsR0FBR2p6QixJQUFHQSxHQUFFc0ssWUFBWSxFQUFFLE1BQU0sS0FBSyxFQUFFMm9CLEdBQUdqekIsSUFBR0EsR0FBRXNLLFlBQVksRUFBRTZvQixHQUFHbnpCLEdBQUVxSyxVQUFVckssSUFBRyxNQUFNLEtBQUssS0FBS0EsR0FBRXNLLFlBQVksS0FBSyxNQUFNLEtBQUssS0FBS3RLLEdBQUVzSyxZQUFZLEtBQUs2b0IsR0FBR256QixHQUFFcUssVUFDemZySyxJQUFHLE1BQU0sS0FBSyxFQUFFbXpCLEdBQUduekIsR0FBRXFLLFVBQVVySyxJQUFHLE1BQU0sS0FBSyxFQUFNOHlCLEdBQUdybkQsRUFBUGxyQixFQUFFeS9DLEdBQVM5RixHQUFHNjRCLEdBQUd4eUUsR0FBR3kvQyxHQUFFQSxHQUFFMG9CLFlBQVksTUFBTTJQLEdBQUksR0FBRyxPQUFPcjRCLEdBQUUsTUFBTWg3QyxNQUFNcTFDLEVBQUUsTUFBTWk0QixHQUFHdHlCLEdBQUVxNEIsR0FBSXI0QixHQUFFQSxHQUFFMG9CLGtCQUFpQixPQUFPMW9CLElBQWtELEdBQS9DenlCLEVBQUUwdkMsR0FBR3o3RCxFQUFFKzZELEtBQUtuNkQsRUFBRW1yQixFQUFFK3FELFlBQVlwK0IsRUFBRTNzQixFQUFFZ3JELGVBQWtCLzJFLElBQUlZLEdBQUdBLEdBQUdBLEVBQUVtbEQsZUE1Sm5PLFNBQVNreEIsRUFBRy91RSxFQUFFQyxHQUFHLFNBQU9ELElBQUdDLEtBQUVELElBQUlDLEtBQUtELEdBQUcsSUFBSUEsRUFBRXkvQyxZQUFZeC9DLEdBQUcsSUFBSUEsRUFBRXcvQyxTQUFTc3ZCLEVBQUcvdUUsRUFBRUMsRUFBRWdJLFlBQVksYUFBYWpJLEVBQUVBLEVBQUVndkUsU0FBUy91RSxLQUFHRCxFQUFFaXZFLDRCQUF3RCxHQUE3Qmp2RSxFQUFFaXZFLHdCQUF3Qmh2RSxNQTRKOEQ4dUUsQ0FBR3IyRSxFQUFFbWxELGNBQWMzNkIsZ0JBQWdCeHFCLEdBQUcsQ0FBQyxPQUFPODNDLEdBQUd3aUIsR0FBR3Q2RCxLQUFLWixFQUFFMDRDLEVBQUU5NkIsV0FBYyxLQUFSbU8sRUFBRTJzQixFQUFFcmdDLE9BQWlCMFQsRUFBRS9yQixHQUFHLG1CQUFtQlksR0FBR0EsRUFBRXNnRSxlQUFlbGhFLEVBQUVZLEVBQUV1Z0UsYUFBYTcrRCxLQUFLNGQsSUFBSTZMLEVBQUVuckIsRUFBRWIsTUFBTXdCLFVBQVV3cUIsR0FBRy9yQixFQUFFWSxFQUFFbWxELGVBQWVuN0MsV0FBVzVLLEVBQUVzZ0UsYUFBYTMxRCxRQUFTMDJELGVBQWV0MUMsRUFBRUEsRUFBRXMxQyxlQUNoZnRpRSxFQUFFNkIsRUFBRStsRCxZQUFZcGxELE9BQU8wb0IsRUFBRTNuQixLQUFLNGQsSUFBSXc0QixFQUFFOTZCLE1BQU03ZSxHQUFHMjVDLE9BQUUsSUFBU0EsRUFBRXJnQyxJQUFJNFIsRUFBRTNuQixLQUFLNGQsSUFBSXc0QixFQUFFcmdDLElBQUl0WixJQUFJZ3RCLEVBQUU5Z0IsUUFBUWdmLEVBQUV5dUIsSUFBSTM1QyxFQUFFMjVDLEVBQUVBLEVBQUV6dUIsRUFBRUEsRUFBRWxyQixHQUFHQSxFQUFFKzdELEdBQUdsNkQsRUFBRXFwQixHQUFHL3FCLEVBQUU0N0QsR0FBR2w2RCxFQUFFODNDLEdBQUczNUMsR0FBR0csSUFBSSxJQUFJNnNCLEVBQUU2cUQsWUFBWTdxRCxFQUFFcTFDLGFBQWFyaUUsRUFBRWcwQixNQUFNaEgsRUFBRXUxQyxlQUFldmlFLEVBQUVrZ0IsUUFBUThNLEVBQUV3MUMsWUFBWXJpRSxFQUFFNnpCLE1BQU1oSCxFQUFFeTFDLGNBQWN0aUUsRUFBRStmLFdBQVVqZixFQUFFQSxFQUFFbzNFLGVBQWdCQyxTQUFTdDRFLEVBQUVnMEIsS0FBS2gwQixFQUFFa2dCLFFBQVE4TSxFQUFFdXJELGtCQUFrQnJ0RCxFQUFFeXVCLEdBQUczc0IsRUFBRXdyRCxTQUFTdjNFLEdBQUcrckIsRUFBRTlnQixPQUFPL0wsRUFBRTZ6QixLQUFLN3pCLEVBQUUrZixVQUFVamYsRUFBRXczRSxPQUFPdDRFLEVBQUU2ekIsS0FBSzd6QixFQUFFK2YsUUFBUThNLEVBQUV3ckQsU0FBU3YzRSxPQUFRQSxFQUFFLEdBQUcsSUFBSStyQixFQUFFbnJCLEVBQUVtckIsRUFBRUEsRUFBRTViLFlBQVksSUFBSTRiLEVBQUU0N0IsVUFBVTNuRCxFQUFFcUUsS0FBSyxDQUFDbXZDLFFBQVF6bkIsRUFBRTByRCxLQUFLMXJELEVBQUUyckQsV0FBV0MsSUFBSTVyRCxFQUFFNnJELFlBQy9jLElBQXZDLG1CQUFvQmgzRSxFQUFFaTNFLE9BQU9qM0UsRUFBRWkzRSxRQUFZajNFLEVBQUUsRUFBRUEsRUFBRVosRUFBRXVCLE9BQU9YLEtBQUltckIsRUFBRS9yQixFQUFFWSxJQUFLNHlDLFFBQVFra0MsV0FBVzNyRCxFQUFFMHJELEtBQUsxckQsRUFBRXluQixRQUFRb2tDLFVBQVU3ckQsRUFBRTRyRCxJQUFJbGMsR0FBRyxLQUFLaEYsS0FBSytFLEdBQUdBLEdBQUcsS0FBS3R6RCxFQUFFbXlDLFFBQVFsN0MsRUFBRXEvQyxHQUFFdDRDLEVBQUUsR0FBRyxJQUFJLElBQUl0RixFQUFFeEIsRUFBRSxPQUFPby9DLElBQUcsQ0FBQyxJQUFJczVCLEVBQUd0NUIsR0FBRXNLLFVBQVUsR0FBTSxHQUFIZ3ZCLEVBQU0sQ0FBQyxJQUFJQyxFQUFHdjVCLEdBQUVxSyxVQUFrQixPQUFKOThCLEVBQUVuckIsR0FBTlosRUFBRXcrQyxJQUFlNEQsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRzR1QixHQUFHLEdBQUcsR0FBR2h4RSxHQUFHLE1BQU0sS0FBSyxFQUFFLElBQUlnNEUsRUFBR2g0RSxFQUFFK2dELFVBQVUsR0FBZSxFQUFaL2dELEVBQUU4b0QsVUFBWSxHQUFHLE9BQU9pdkIsRUFBR0MsRUFBR2hQLHdCQUF3QixDQUFDLElBQUlpUCxFQUFHajRFLEVBQUV3cEUsY0FBY3hwRSxFQUFFMkUsS0FBS296RSxFQUFHck4sY0FBY3ZGLEdBQUdubEUsRUFBRTJFLEtBQUtvekUsRUFBR3JOLGVBQWVzTixFQUFHbEosbUJBQW1CbUosRUFBR0YsRUFBRy91QixjQUN2ZWd2QixFQUFHL0cscUNBQXFDLElBQUlpSCxFQUFHbDRFLEVBQUVxbkUsWUFBWSxPQUFPNlEsR0FBSXRRLEdBQUc1bkUsRUFBRWs0RSxFQUFHRixHQUFNLE1BQU0sS0FBSyxFQUFFLElBQUlHLEVBQUduNEUsRUFBRXFuRSxZQUFZLEdBQUcsT0FBTzhRLEVBQUcsQ0FBUSxHQUFQbHVELEVBQUUsS0FBUSxPQUFPanFCLEVBQUVvcEQsTUFBTSxPQUFPcHBELEVBQUVvcEQsTUFBTWhILEtBQUssS0FBSyxFQUFFbjRCLEVBQUVqcUIsRUFBRW9wRCxNQUFNckksVUFBVSxNQUFNLEtBQUssRUFBRTkyQixFQUFFanFCLEVBQUVvcEQsTUFBTXJJLFVBQVU2bUIsR0FBRzVuRSxFQUFFbTRFLEVBQUdsdUQsR0FBSyxNQUFNLEtBQUssRUFBRSxJQUFJbXVELEVBQUdwNEUsRUFBRStnRCxVQUFVLE9BQU9nM0IsR0FBZ0IsRUFBWi8zRSxFQUFFOG9ELFdBQWE0UyxHQUFHMTdELEVBQUUyRSxLQUFLM0UsRUFBRTBxRSxnQkFBZ0IwTixFQUFHUCxRQUFRLE1BQU0sS0FBSyxFQUFRLEtBQUssRUFBUSxLQUFLLEdBQUcsTUFBTSxLQUFLLEdBQUcsR0FBRyxPQUFPNzNFLEVBQUVncEQsY0FBYyxDQUFDLElBQUlxdkIsRUFBR3I0RSxFQUFFNm9ELFVBQVUsR0FBRyxPQUFPd3ZCLEVBQUcsQ0FBQyxJQUFJQyxFQUFHRCxFQUFHcnZCLGNBQWMsR0FBRyxPQUFPc3ZCLEVBQUcsQ0FBQyxJQUFJQyxFQUN6ZkQsRUFBR3J2QixXQUFXLE9BQU9zdkIsR0FBSTVzQixHQUFHNHNCLEtBQU0sTUFBTSxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsTUFBTSxRQUFRLE1BQU0vMEUsTUFBTXExQyxFQUFFLE9BQVEsR0FBTSxJQUFIaS9CLEVBQU8sQ0FBQzkzRSxPQUFFLEVBQU8sSUFBSWcvQixFQUFHd2YsR0FBRS9ELElBQUksR0FBRyxPQUFPemIsRUFBRyxDQUFDLElBQUl3NUMsRUFBR2g2QixHQUFFdUMsVUFBVSxPQUFPdkMsR0FBRTRELEtBQUssS0FBSyxFQUFFcGlELEVBQUV3NEUsRUFBRyxNQUFNLFFBQVF4NEUsRUFBRXc0RSxFQUFHLG1CQUFvQng1QyxFQUFHQSxFQUFHaC9CLEdBQUdnL0IsRUFBR3FiLFFBQVFyNkMsR0FBR3crQyxHQUFFQSxHQUFFMG9CLFlBQVksTUFBTTJQLEdBQUksR0FBRyxPQUFPcjRCLEdBQUUsTUFBTWg3QyxNQUFNcTFDLEVBQUUsTUFBTWk0QixHQUFHdHlCLEdBQUVxNEIsR0FBSXI0QixHQUFFQSxHQUFFMG9CLGtCQUFpQixPQUFPMW9CLElBQUdBLEdBQUUsS0FBSzRsQixLQUFLM29CLEdBQUU5cUMsT0FBT3pJLEVBQUVteUMsUUFBUWw3QyxFQUFFLEdBQUcyMEUsR0FBR0EsSUFBRyxFQUFHQyxHQUFHN3JFLEVBQUU4ckUsR0FBRzdyRSxPQUFPLElBQUlxMkMsR0FBRXQ0QyxFQUFFLE9BQU9zNEMsSUFBR3IyQyxFQUFFcTJDLEdBQUUwb0IsV0FBVzFvQixHQUFFMG9CLFdBQVcsS0FBSzFvQixHQUFFcjJDLEVBQ3BYLEdBRDJZLEtBQXJCQSxFQUFFRCxFQUFFMnNFLG9CQUM5ZHRDLEdBQUcsTUFBTSxhQUFhcHFFLEVBQUVELElBQUlpc0UsR0FBR0QsTUFBTUEsR0FBRyxFQUFFQyxHQUFHanNFLEdBQUdnc0UsR0FBRyxFQUFFLG1CQUFvQnVFLElBQUlBLEdBQUd0NUUsRUFBRTRoRCxVQUFVM2hELEdBQUdxL0MsR0FBRXYyQyxHQUFNaXFFLEdBQUcsTUFBTUEsSUFBRyxFQUFHanFFLEVBQUVrcUUsR0FBR0EsR0FBRyxLQUFLbHFFLEVBQUUsT0FBSXV6QyxHQUFFcTNCLE1BQU10M0IsR0FBUyxNQUFLd3BCLEtBQVksTUFBSyxTQUFTZ1MsS0FBSyxLQUFLLE9BQU94NEIsSUFBRyxDQUFDLElBQUl0MkMsRUFBRXMyQyxHQUFFc0ssVUFBVSxJQUFPLElBQUY1Z0QsSUFBUTZvRSxHQUFHdnlCLEdBQUVxSyxVQUFVckssSUFBRyxJQUFPLElBQUZ0MkMsSUFBUTRyRSxLQUFLQSxJQUFHLEVBQUdqUCxHQUFHLElBQUcsV0FBZ0IsT0FBTHdRLEtBQVksU0FBUTcyQixHQUFFQSxHQUFFMG9CLFlBQVksU0FBU21PLEtBQUssR0FBRyxLQUFLckIsR0FBRyxDQUFDLElBQUk5ckUsRUFBRSxHQUFHOHJFLEdBQUcsR0FBR0EsR0FBUyxPQUFOQSxHQUFHLEdBQVVwUCxHQUFHMThELEVBQUV3d0UsS0FDM1ksU0FBU0EsS0FBSyxHQUFHLE9BQU8zRSxHQUFHLE9BQU0sRUFBRyxJQUFJN3JFLEVBQUU2ckUsR0FBVyxHQUFSQSxHQUFHLE1BQVN0NEIsSUFBR3MzQixHQUFHQyxPQUFPeDNCLEdBQUUsTUFBTWg0QyxNQUFNcTFDLEVBQUUsTUFBTSxJQUFJMXdDLEVBQUVzekMsR0FBUSxJQUFOQSxJQUFHdTNCLEdBQU85cUUsRUFBRUEsRUFBRW15QyxRQUFRc3NCLFlBQVksT0FBT3orRCxHQUFHLENBQUMsSUFBSSxJQUFJL0ksRUFBRStJLEVBQUUsR0FBRyxJQUFpQixJQUFaL0ksRUFBRTJwRCxXQUFlLE9BQU8zcEQsRUFBRWlqRCxLQUFLLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHNHVCLEdBQUcsSUFBSSxFQUFFN3hFLEdBQUc2eEUsR0FBRyxFQUFFLEdBQUc3eEUsSUFBSSxNQUFNQyxHQUFHLEdBQUcsT0FBTzhJLEVBQUUsTUFBTTFFLE1BQU1xMUMsRUFBRSxNQUFNaTRCLEdBQUc1b0UsRUFBRTlJLEdBQUdELEVBQUUrSSxFQUFFZy9ELFdBQVdoL0QsRUFBRWcvRCxXQUFXLEtBQUtoL0QsRUFBRS9JLEVBQVcsT0FBVHM4QyxHQUFFdHpDLEVBQUU2OEQsTUFBVyxFQUFHLFNBQVMyVCxHQUFHendFLEVBQUVDLEVBQUVoSixHQUFrQ2lvRSxHQUFHbC9ELEVBQXhCQyxFQUFFK3BFLEdBQUdocUUsRUFBZkMsRUFBRW1vRSxHQUFHbnhFLEVBQUVnSixHQUFZLGFBQXVDLFFBQW5CRCxFQUFFb3NFLEdBQUdwc0UsRUFBRSxjQUFzQnUyQyxHQUFFdjJDLEdBQ3BiLFNBQVM0b0UsR0FBRzVvRSxFQUFFQyxHQUFHLEdBQUcsSUFBSUQsRUFBRWs2QyxJQUFJdTJCLEdBQUd6d0UsRUFBRUEsRUFBRUMsUUFBUSxJQUFJLElBQUloSixFQUFFK0ksRUFBRXU2QyxPQUFPLE9BQU90akQsR0FBRyxDQUFDLEdBQUcsSUFBSUEsRUFBRWlqRCxJQUFJLENBQUN1MkIsR0FBR3g1RSxFQUFFK0ksRUFBRUMsR0FBRyxNQUFXLEdBQUcsSUFBSWhKLEVBQUVpakQsSUFBSSxDQUFDLElBQUloakQsRUFBRUQsRUFBRTRoRCxVQUFVLEdBQUcsbUJBQW9CNWhELEVBQUV3RixLQUFLd2pCLDBCQUEwQixtQkFBb0Ivb0IsRUFBRWt6RSxvQkFBb0IsT0FBT0MsS0FBS0EsR0FBR3QzQyxJQUFJNzdCLElBQUksQ0FBZ0Nnb0UsR0FBR2pvRSxFQUF4QitJLEVBQUVtcUUsR0FBR2x6RSxFQUFmK0ksRUFBRW9vRSxHQUFHbm9FLEVBQUVELEdBQVksYUFBdUMsUUFBbkIvSSxFQUFFbTFFLEdBQUduMUUsRUFBRSxjQUFzQnMvQyxHQUFFdC9DLEdBQUcsT0FBT0EsRUFBRUEsRUFBRXNqRCxRQUM1VixTQUFTNnpCLEdBQUdwdUUsRUFBRUMsRUFBRWhKLEdBQUcsSUFBSUMsRUFBRThJLEVBQUVtdUUsVUFBVSxPQUFPajNFLEdBQUdBLEVBQUVzckQsT0FBT3ZpRCxHQUFHb3pDLEtBQUlyekMsR0FBRzJ6QyxLQUFJMThDLEVBQUUyOEMsS0FBSXUzQixJQUFJdjNCLEtBQUlzM0IsSUFBSSxhQUFhSSxJQUFJL08sS0FBS29OLEdBQUdnQyxHQUFHeUIsR0FBR3B0RSxFQUFFMnpDLElBQUcrM0IsSUFBRyxFQUFHZ0IsR0FBRzFzRSxFQUFFL0ksS0FBd0IsS0FBbkJnSixFQUFFRCxFQUFFNHNFLGlCQUFzQjNzRSxFQUFFaEosSUFBSStJLEVBQUU0c0UsZUFBZTMxRSxFQUFFK0ksRUFBRXl0RSx5QkFBeUJ4MkUsSUFBSStJLEVBQUV5dEUsdUJBQXVCLEVBQUV6dEUsRUFBRXd0RSxhQUFhLE1BQU1qM0IsR0FBRXYyQyxLQUFLLFNBQVM4cEUsR0FBRzlwRSxFQUFFQyxHQUFHLElBQUloSixFQUFFK0ksRUFBRTY0QyxVQUFVLE9BQU81aEQsR0FBR0EsRUFBRXVyRCxPQUFPdmlELEdBQU8sS0FBSkEsRUFBRSxLQUFpQkEsRUFBRWlnRSxHQUFUamdFLEVBQUVnZ0UsS0FBWWpnRSxFQUFFLE9BQWlCLFFBQVZBLEVBQUVvc0UsR0FBR3BzRSxFQUFFQyxLQUFhczJDLEdBQUV2MkMsR0FDdll1cUUsR0FBRyxTQUFTdnFFLEVBQUVDLEVBQUVoSixHQUFHLElBQUlDLEVBQUUrSSxFQUFFNDlELGVBQWUsR0FBRyxPQUFPNzlELEVBQUUsQ0FBQyxJQUFJaEMsRUFBRWlDLEVBQUU2bEUsYUFBYSxHQUFHOWxFLEVBQUV3aUUsZ0JBQWdCeGtFLEdBQUdxMEMsR0FBRUYsUUFBUTJyQixJQUFHLE1BQU8sQ0FBQyxHQUFHNW1FLEVBQUVELEVBQUUsQ0FBTyxPQUFONm1FLElBQUcsRUFBVTc5RCxFQUFFaTZDLEtBQUssS0FBSyxFQUFFNHNCLEdBQUc3bUUsR0FBRzA3QixLQUFLLE1BQU0sS0FBSyxFQUFRLEdBQU4wbUMsR0FBR3BpRSxHQUFhLEVBQVBBLEVBQUVsSSxNQUFRLElBQUlkLEdBQUcrRyxFQUFFMHlFLE9BQU8sT0FBT3p3RSxFQUFFNDlELGVBQWU1OUQsRUFBRXk5RCxvQkFBb0IsRUFBRSxLQUFLLE1BQU0sS0FBSyxFQUFFcHJCLEdBQUVyeUMsRUFBRXhELE9BQU9pK0QsR0FBR3o2RCxHQUFHLE1BQU0sS0FBSyxFQUFFa2lFLEdBQUdsaUUsRUFBRUEsRUFBRTQ0QyxVQUFVb0ssZUFBZSxNQUFNLEtBQUssR0FBR3NhLEdBQUd0OUQsRUFBRUEsRUFBRXVpRSxjQUFjM3FFLE9BQU8sTUFBTSxLQUFLLEdBQUcsR0FBRyxPQUFPb0ksRUFBRTZnRCxjQUE2QyxPQUFHLEtBQWpDNXBELEVBQUUrSSxFQUFFaWhELE1BQU13YyxzQkFBOEJ4bUUsR0FBR0QsRUFBU3F3RSxHQUFHdG5FLEVBQUVDLEVBQUVoSixJQUFHaTdDLEdBQUVRLEdBQzFlLEVBRDRlQSxHQUFFUCxTQUN0ZCxRQUFuQmx5QyxFQUFFa21FLEdBQUdubUUsRUFBRUMsRUFBRWhKLElBQW1CZ0osRUFBRWtoRCxRQUFRLE1BQUtqUCxHQUFFUSxHQUFZLEVBQVZBLEdBQUVQLFNBQWEsTUFBTSxLQUFLLEdBQThCLEdBQTNCajdDLEVBQUUrSSxFQUFFeTlELHFCQUFxQnptRSxFQUFLLElBQWlCLEdBQVorSSxFQUFFNGdELFdBQWMsQ0FBQyxHQUFHMXBELEVBQUUsT0FBTzh3RSxHQUFHaG9FLEVBQUVDLEVBQUVoSixHQUFHZ0osRUFBRTJnRCxXQUFXLEdBQStFLEdBQTFELFFBQWxCNWlELEVBQUVpQyxFQUFFNmdELGlCQUF5QjlpRCxFQUFFNHBFLFVBQVUsS0FBSzVwRSxFQUFFNnBFLEtBQUssTUFBTTMxQixHQUFFUSxHQUFFQSxHQUFFUCxVQUFlajdDLEVBQUUsT0FBTyxLQUFLLE9BQU9pdkUsR0FBR25tRSxFQUFFQyxFQUFFaEosR0FBRzZtRSxJQUFHLFFBQVNBLElBQUcsRUFBc0IsT0FBbkI3OUQsRUFBRTQ5RCxlQUFlLEVBQVM1OUQsRUFBRWk2QyxLQUFLLEtBQUssRUFBdUosR0FBckpoakQsRUFBRStJLEVBQUV4RCxLQUFLLE9BQU91RCxJQUFJQSxFQUFFMmdELFVBQVUsS0FBSzFnRCxFQUFFMGdELFVBQVUsS0FBSzFnRCxFQUFFMmdELFdBQVcsR0FBRzVnRCxFQUFFQyxFQUFFNmxFLGFBQWE5bkUsRUFBRWs4RCxHQUFHajZELEVBQUVteUMsR0FBRUQsU0FBU3dyQixHQUFHMTlELEVBQUVoSixHQUFHK0csRUFBRXdsRSxHQUFHLEtBQUt2akUsRUFBRS9JLEVBQUU4SSxFQUFFaEMsRUFBRS9HLEdBQUdnSixFQUFFMmdELFdBQVcsRUFBSyxpQkFDcmU1aUQsR0FBRyxPQUFPQSxHQUFHLG1CQUFvQkEsRUFBRStpQixhQUFRLElBQVMvaUIsRUFBRTIwQyxTQUFTLENBQWMsR0FBYjF5QyxFQUFFaTZDLElBQUksRUFBRTBwQixLQUFRdHhCLEdBQUVwN0MsR0FBRyxDQUFDLElBQUl1UixHQUFFLEVBQUdpeUQsR0FBR3o2RCxRQUFRd0ksR0FBRSxFQUFHeEksRUFBRTZnRCxjQUFjLE9BQU85aUQsRUFBRUMsWUFBTyxJQUFTRCxFQUFFQyxNQUFNRCxFQUFFQyxNQUFNLEtBQUssSUFBSThqQixFQUFFN3FCLEVBQUVncEIseUJBQXlCLG1CQUFvQjZCLEdBQUcrOUMsR0FBRzcvRCxFQUFFL0ksRUFBRTZxQixFQUFFL2hCLEdBQUdoQyxFQUFFMHpDLFFBQVFxdUIsR0FBRzkvRCxFQUFFNDRDLFVBQVU3NkMsRUFBRUEsRUFBRWdpRSxvQkFBb0IvL0QsRUFBRXlnRSxHQUFHemdFLEVBQUUvSSxFQUFFOEksRUFBRS9JLEdBQUdnSixFQUFFNG1FLEdBQUcsS0FBSzVtRSxFQUFFL0ksR0FBRSxFQUFHdVIsRUFBRXhSLFFBQVFnSixFQUFFaTZDLElBQUksRUFBRTlHLEdBQUUsS0FBS256QyxFQUFFakMsRUFBRS9HLEdBQUdnSixFQUFFQSxFQUFFaWhELE1BQU0sT0FBT2poRCxFQUFFLEtBQUssR0FBdUcsR0FBcEdqQyxFQUFFaUMsRUFBRXFoRSxZQUFZLE9BQU90aEUsSUFBSUEsRUFBRTJnRCxVQUFVLEtBQUsxZ0QsRUFBRTBnRCxVQUFVLEtBQUsxZ0QsRUFBRTJnRCxXQUFXLEdBQUc1Z0QsRUFBRUMsRUFBRTZsRSxhQTdPcGQsU0FBWTlsRSxHQUFHLElBQUksSUFBSUEsRUFBRTYwQyxRQUFRLENBQUM3MEMsRUFBRTYwQyxRQUFRLEVBQUUsSUFBSTUwQyxFQUFFRCxFQUFFNDBDLE1BQU0zMEMsRUFBRUEsSUFBSUQsRUFBRTgwQyxRQUFRNzBDLEVBQUVBLEVBQUVzSixNQUFLLFNBQVN0SixHQUFHLElBQUlELEVBQUU2MEMsVUFBVTUwQyxFQUFFQSxFQUFFNmhCLFFBQVE5aEIsRUFBRTYwQyxRQUFRLEVBQUU3MEMsRUFBRTgwQyxRQUFRNzBDLE1BQUksU0FBU0EsR0FBRyxJQUFJRCxFQUFFNjBDLFVBQVU3MEMsRUFBRTYwQyxRQUFRLEVBQUU3MEMsRUFBRTgwQyxRQUFRNzBDLE9BNk93UjB3RSxDQUFHM3lFLEdBQU0sSUFBSUEsRUFBRTYyQyxRQUFRLE1BQU03MkMsRUFBRTgyQyxRQUNuZCxPQUE3QzkyQyxFQUFFQSxFQUFFODJDLFFBQVE3MEMsRUFBRXhELEtBQUt1QixFQUFFeUssRUFBRXhJLEVBQUVpNkMsSUFRcUMsU0FBWWw2QyxHQUFHLEdBQUcsbUJBQW9CQSxFQUFFLE9BQU9xbUUsR0FBR3JtRSxHQUFHLEVBQUUsRUFBRSxHQUFHLE1BQVNBLEVBQVksQ0FBYyxJQUFiQSxFQUFFQSxFQUFFMnlDLFlBQWdCOEcsRUFBRyxPQUFPLEdBQUcsR0FBR3o1QyxJQUFJNDVDLEVBQUcsT0FBTyxHQUFHLE9BQU8sRUFSL0tnM0IsQ0FBRzV5RSxHQUFHZ0MsRUFBRWk5RCxHQUFHai9ELEVBQUVnQyxHQUFVeUksR0FBRyxLQUFLLEVBQUV4SSxFQUFFc21FLEdBQUcsS0FBS3RtRSxFQUFFakMsRUFBRWdDLEVBQUUvSSxHQUFHLE1BQU0sS0FBSyxFQUFFZ0osRUFBRXdtRSxHQUFHLEtBQUt4bUUsRUFBRWpDLEVBQUVnQyxFQUFFL0ksR0FBRyxNQUFNLEtBQUssR0FBR2dKLEVBQUVpbUUsR0FBRyxLQUFLam1FLEVBQUVqQyxFQUFFZ0MsRUFBRS9JLEdBQUcsTUFBTSxLQUFLLEdBQUdnSixFQUFFbW1FLEdBQUcsS0FBS25tRSxFQUFFakMsRUFBRWkvRCxHQUFHai9ELEVBQUV2QixLQUFLdUQsR0FBRzlJLEVBQUVELEdBQUcsTUFBTSxRQUFRLE1BQU1xRSxNQUFNcTFDLEVBQUUsSUFBSTN5QyxFQUFFLEtBQU0sT0FBT2lDLEVBQUUsS0FBSyxFQUFFLE9BQU8vSSxFQUFFK0ksRUFBRXhELEtBQUt1QixFQUFFaUMsRUFBRTZsRSxhQUEyQ1MsR0FBR3ZtRSxFQUFFQyxFQUFFL0ksRUFBckM4RyxFQUFFaUMsRUFBRXFoRSxjQUFjcHFFLEVBQUU4RyxFQUFFaS9ELEdBQUcvbEUsRUFBRThHLEdBQWMvRyxHQUFHLEtBQUssRUFBRSxPQUFPQyxFQUFFK0ksRUFBRXhELEtBQUt1QixFQUFFaUMsRUFBRTZsRSxhQUEyQ1csR0FBR3ptRSxFQUFFQyxFQUFFL0ksRUFBckM4RyxFQUFFaUMsRUFBRXFoRSxjQUFjcHFFLEVBQUU4RyxFQUFFaS9ELEdBQUcvbEUsRUFBRThHLEdBQWMvRyxHQUFHLEtBQUssRUFBd0IsR0FBdEI2dkUsR0FBRzdtRSxHQUFzQixRQUFuQi9JLEVBQUUrSSxFQUFFay9ELGFBQXdCLE1BQU03akUsTUFBTXExQyxFQUFFLE1BQ25aLEdBRDJhM3lDLEVBQUUsUUFBcEJBLEVBQUVpQyxFQUFFNmdELGVBQXlCOWlELEVBQUVzdEMsUUFDcmYsS0FBS2kwQixHQUFHdC9ELEVBQUUvSSxFQUFFK0ksRUFBRTZsRSxhQUFhLEtBQUs3dUUsSUFBR0MsRUFBRStJLEVBQUU2Z0QsY0FBY3hWLFdBQWV0dEMsRUFBRTI5QixLQUFLMTdCLEVBQUVrbUUsR0FBR25tRSxFQUFFQyxFQUFFaEosT0FBTyxDQUFtRixJQUEvRStHLEVBQUVpQyxFQUFFNDRDLFVBQVVtSyxXQUFRMGlCLEdBQUcxNEMsR0FBRy9zQixFQUFFNDRDLFVBQVVvSyxjQUFjcjdDLFlBQVk2OUQsR0FBR3hsRSxFQUFFakMsRUFBRTJuRSxJQUFHLEdBQU0zbkUsRUFBRSxJQUFJL0csRUFBRTRxRSxHQUFHNWhFLEVBQUUsS0FBSy9JLEVBQUVELEdBQUdnSixFQUFFaWhELE1BQU1qcUQsRUFBRUEsR0FBR0EsRUFBRTJwRCxXQUF1QixFQUFiM3BELEVBQUUycEQsVUFBYSxLQUFLM3BELEVBQUVBLEVBQUVrcUQsYUFBYS9OLEdBQUVwekMsRUFBRUMsRUFBRS9JLEVBQUVELEdBQUcwa0MsS0FBSzE3QixFQUFFQSxFQUFFaWhELE1BQU0sT0FBT2poRCxFQUFFLEtBQUssRUFBRSxPQUFPb2lFLEdBQUdwaUUsR0FBRyxPQUFPRCxHQUFHK2xFLEdBQUc5bEUsR0FBRy9JLEVBQUUrSSxFQUFFeEQsS0FBS3VCLEVBQUVpQyxFQUFFNmxFLGFBQWFyOUQsRUFBRSxPQUFPekksRUFBRUEsRUFBRXdpRSxjQUFjLEtBQUt6Z0QsRUFBRS9qQixFQUFFMHRDLFNBQVNnb0IsR0FBR3g4RCxFQUFFOEcsR0FBRytqQixFQUFFLEtBQUssT0FBT3RaLEdBQUdpckQsR0FBR3g4RCxFQUFFdVIsS0FBS3hJLEVBQUUyZ0QsV0FBVyxJQUFJNGxCLEdBQUd4bUUsRUFBRUMsR0FBVSxFQUFQQSxFQUFFbEksTUFBUSxJQUFJZCxHQUFHK0csRUFBRTB5RSxRQUFRendFLEVBQUU0OUQsZUFDN2U1OUQsRUFBRXk5RCxvQkFBb0IsRUFBRXo5RCxFQUFFLE9BQU9tekMsR0FBRXB6QyxFQUFFQyxFQUFFOGhCLEVBQUU5cUIsR0FBR2dKLEVBQUVBLEVBQUVpaEQsT0FBT2poRCxFQUFFLEtBQUssRUFBRSxPQUFPLE9BQU9ELEdBQUcrbEUsR0FBRzlsRSxHQUFHLEtBQUssS0FBSyxHQUFHLE9BQU9xbkUsR0FBR3RuRSxFQUFFQyxFQUFFaEosR0FBRyxLQUFLLEVBQUUsT0FBT2tyRSxHQUFHbGlFLEVBQUVBLEVBQUU0NEMsVUFBVW9LLGVBQWUvckQsRUFBRStJLEVBQUU2bEUsYUFBYSxPQUFPOWxFLEVBQUVDLEVBQUVpaEQsTUFBTTBnQixHQUFHM2hFLEVBQUUsS0FBSy9JLEVBQUVELEdBQUdtOEMsR0FBRXB6QyxFQUFFQyxFQUFFL0ksRUFBRUQsR0FBR2dKLEVBQUVpaEQsTUFBTSxLQUFLLEdBQUcsT0FBT2hxRCxFQUFFK0ksRUFBRXhELEtBQUt1QixFQUFFaUMsRUFBRTZsRSxhQUEyQ0ksR0FBR2xtRSxFQUFFQyxFQUFFL0ksRUFBckM4RyxFQUFFaUMsRUFBRXFoRSxjQUFjcHFFLEVBQUU4RyxFQUFFaS9ELEdBQUcvbEUsRUFBRThHLEdBQWMvRyxHQUFHLEtBQUssRUFBRSxPQUFPbThDLEdBQUVwekMsRUFBRUMsRUFBRUEsRUFBRTZsRSxhQUFhN3VFLEdBQUdnSixFQUFFaWhELE1BQU0sS0FBSyxFQUFrRCxLQUFLLEdBQUcsT0FBTzlOLEdBQUVwekMsRUFBRUMsRUFBRUEsRUFBRTZsRSxhQUFhcDZCLFNBQVN6MEMsR0FBR2dKLEVBQUVpaEQsTUFBTSxLQUFLLEdBQUdsaEQsRUFBRSxDQUM5YSxHQUQrYTlJLEVBQUUrSSxFQUFFeEQsS0FBS2c0QyxTQUM3ZXoyQyxFQUFFaUMsRUFBRTZsRSxhQUFhL2pELEVBQUU5aEIsRUFBRXVpRSxjQUF3QmpGLEdBQUd0OUQsRUFBYndJLEVBQUV6SyxFQUFFbkcsT0FBaUIsT0FBT2txQixFQUFFLENBQUMsSUFBSXl1QixFQUFFenVCLEVBQUVscUIsTUFBMEcsR0FBRyxLQUF2RzRRLEVBQUU2dkQsR0FBRzluQixFQUFFL25DLEdBQUcsRUFBd0YsR0FBckYsbUJBQW9CdlIsRUFBRWk5QyxzQkFBc0JqOUMsRUFBRWk5QyxzQkFBc0IzRCxFQUFFL25DLEdBQUcsY0FBd0IsR0FBR3NaLEVBQUUycEIsV0FBVzF0QyxFQUFFMHRDLFdBQVcyRyxHQUFFRixRQUFRLENBQUNseUMsRUFBRWttRSxHQUFHbm1FLEVBQUVDLEVBQUVoSixHQUFHLE1BQU0rSSxRQUFRLElBQWMsUUFBVnd3QyxFQUFFdndDLEVBQUVpaEQsU0FBaUIxUSxFQUFFK0osT0FBT3Q2QyxHQUFHLE9BQU91d0MsR0FBRyxDQUFDLElBQUl0QyxFQUFFc0MsRUFBRXlHLGFBQWEsR0FBRyxPQUFPL0ksRUFBRSxDQUFDbnNCLEVBQUV5dUIsRUFBRTBRLE1BQU0sSUFBSSxJQUFJcnFELEVBQUVxM0MsRUFBRTB2QixhQUFhLE9BQU8vbUUsR0FBRyxDQUFDLEdBQUdBLEVBQUU0NkMsVUFBVXY2QyxHQUFHLElBQUtMLEVBQUVtbkUsYUFBYXYxRCxHQUFHLENBQUMsSUFBSStuQyxFQUFFMEosT0FBTXJqRCxFQUFFaW9FLEdBQUc3bkUsRUFBRSxPQUFRaWpELElBQUksRUFBRWdsQixHQUFHMXVCLEVBQUUzNUMsSUFBSTI1QyxFQUFFcXRCLGVBQWU1bUUsSUFBSXU1QyxFQUFFcXRCLGVBQzNlNW1FLEdBQWlCLFFBQWRKLEVBQUUyNUMsRUFBRW1RLFlBQW9COXBELEVBQUVnbkUsZUFBZTVtRSxJQUFJSixFQUFFZ25FLGVBQWU1bUUsR0FBR3dtRSxHQUFHanRCLEVBQUUrSixPQUFPdGpELEdBQUdpM0MsRUFBRTJ2QixlQUFlNW1FLElBQUlpM0MsRUFBRTJ2QixlQUFlNW1FLEdBQUcsTUFBTUosRUFBRUEsRUFBRW9HLFdBQVc4a0IsRUFBRSxLQUFLeXVCLEVBQUUwSixLQUFJMUosRUFBRS96QyxPQUFPd0QsRUFBRXhELEtBQUssS0FBYSt6QyxFQUFFMFEsTUFBTSxHQUFHLE9BQU9uL0IsRUFBRUEsRUFBRXc0QixPQUFPL0osT0FBTyxJQUFJenVCLEVBQUV5dUIsRUFBRSxPQUFPenVCLEdBQUcsQ0FBQyxHQUFHQSxJQUFJOWhCLEVBQUUsQ0FBQzhoQixFQUFFLEtBQUssTUFBa0IsR0FBRyxRQUFmeXVCLEVBQUV6dUIsRUFBRW8vQixTQUFvQixDQUFDM1EsRUFBRStKLE9BQU94NEIsRUFBRXc0QixPQUFPeDRCLEVBQUV5dUIsRUFBRSxNQUFNenVCLEVBQUVBLEVBQUV3NEIsT0FBTy9KLEVBQUV6dUIsR0FBR3F4QixHQUFFcHpDLEVBQUVDLEVBQUVqQyxFQUFFMHRDLFNBQVN6MEMsR0FBR2dKLEVBQUVBLEVBQUVpaEQsTUFBTSxPQUFPamhELEVBQUUsS0FBSyxFQUFFLE9BQU9qQyxFQUFFaUMsRUFBRXhELEtBQXNCdkYsR0FBakJ1UixFQUFFeEksRUFBRTZsRSxjQUFpQnA2QixTQUFTaXlCLEdBQUcxOUQsRUFBRWhKLEdBQW1DQyxFQUFFQSxFQUFsQzhHLEVBQUUrL0QsR0FBRy8vRCxFQUFFeUssRUFBRW9vRSx3QkFBOEI1d0UsRUFBRTJnRCxXQUFXLEVBQUV4TixHQUFFcHpDLEVBQUVDLEVBQUUvSSxFQUFFRCxHQUFHZ0osRUFBRWloRCxNQUNyZixLQUFLLEdBQUcsT0FBZ0J6NEMsRUFBRXcwRCxHQUFYai9ELEVBQUVpQyxFQUFFeEQsS0FBWXdELEVBQUU2bEUsY0FBNkJNLEdBQUdwbUUsRUFBRUMsRUFBRWpDLEVBQXRCeUssRUFBRXcwRCxHQUFHai9ELEVBQUV2QixLQUFLZ00sR0FBY3ZSLEVBQUVELEdBQUcsS0FBSyxHQUFHLE9BQU9xdkUsR0FBR3RtRSxFQUFFQyxFQUFFQSxFQUFFeEQsS0FBS3dELEVBQUU2bEUsYUFBYTV1RSxFQUFFRCxHQUFHLEtBQUssR0FBRyxPQUFPQyxFQUFFK0ksRUFBRXhELEtBQUt1QixFQUFFaUMsRUFBRTZsRSxhQUFhOW5FLEVBQUVpQyxFQUFFcWhFLGNBQWNwcUUsRUFBRThHLEVBQUVpL0QsR0FBRy9sRSxFQUFFOEcsR0FBRyxPQUFPZ0MsSUFBSUEsRUFBRTJnRCxVQUFVLEtBQUsxZ0QsRUFBRTBnRCxVQUFVLEtBQUsxZ0QsRUFBRTJnRCxXQUFXLEdBQUczZ0QsRUFBRWk2QyxJQUFJLEVBQUU1SCxHQUFFcDdDLElBQUk4SSxHQUFFLEVBQUcwNkQsR0FBR3o2RCxJQUFJRCxHQUFFLEVBQUcyOUQsR0FBRzE5RCxFQUFFaEosR0FBR3FwRSxHQUFHcmdFLEVBQUUvSSxFQUFFOEcsR0FBSzBpRSxHQUFHemdFLEVBQUUvSSxFQUFFOEcsRUFBRS9HLEdBQUc0dkUsR0FBRyxLQUFLNW1FLEVBQUUvSSxHQUFFLEVBQUc4SSxFQUFFL0ksR0FBRyxLQUFLLEdBQUcsT0FBTyt3RSxHQUFHaG9FLEVBQUVDLEVBQUVoSixHQUFHLE1BQU1xRSxNQUFNcTFDLEVBQUUsSUFBSTF3QyxFQUFFaTZDLE9BQVEsSUFBSXEyQixHQUFHLEtBQUt0SCxHQUFHLEtBRTFaLFNBQVM2SCxHQUFHOXdFLEVBQUVDLEVBQUVoSixFQUFFQyxHQUFHaUcsS0FBSys4QyxJQUFJbDZDLEVBQUU3QyxLQUFLaEYsSUFBSWxCLEVBQUVrRyxLQUFLZ2tELFFBQVFoa0QsS0FBSytqRCxNQUFNL2pELEtBQUtvOUMsT0FBT3A5QyxLQUFLMDdDLFVBQVUxN0MsS0FBS1YsS0FBS1UsS0FBS21rRSxZQUFZLEtBQUtua0UsS0FBS2YsTUFBTSxFQUFFZSxLQUFLbzFDLElBQUksS0FBS3AxQyxLQUFLMm9FLGFBQWE3bEUsRUFBRTlDLEtBQUs4NUMsYUFBYTk1QyxLQUFLMmpELGNBQWMzakQsS0FBS2dpRSxZQUFZaGlFLEtBQUtxbEUsY0FBYyxLQUFLcmxFLEtBQUtwRixLQUFLYixFQUFFaUcsS0FBS3lqRCxVQUFVLEVBQUV6akQsS0FBS3VoRSxXQUFXdmhFLEtBQUtzaEUsWUFBWXRoRSxLQUFLNmhFLFdBQVcsS0FBSzdoRSxLQUFLdWdFLG9CQUFvQnZnRSxLQUFLMGdFLGVBQWUsRUFBRTFnRSxLQUFLd2pELFVBQVUsS0FBSyxTQUFTa2xCLEdBQUc3bEUsRUFBRUMsRUFBRWhKLEVBQUVDLEdBQUcsT0FBTyxJQUFJNDVFLEdBQUc5d0UsRUFBRUMsRUFBRWhKLEVBQUVDLEdBQzFiLFNBQVNtdkUsR0FBR3JtRSxHQUFpQixVQUFkQSxFQUFFQSxFQUFFeEgsYUFBdUJ3SCxFQUFFNnhDLGtCQUM1QyxTQUFTdXZCLEdBQUdwaEUsRUFBRUMsR0FBRyxJQUFJaEosRUFBRStJLEVBQUUyZ0QsVUFDNEUsT0FEbEUsT0FBTzFwRCxJQUFHQSxFQUFFNHVFLEdBQUc3bEUsRUFBRWs2QyxJQUFJajZDLEVBQUVELEVBQUU3SCxJQUFJNkgsRUFBRWpJLE9BQVF1cEUsWUFBWXRoRSxFQUFFc2hFLFlBQVlycUUsRUFBRXdGLEtBQUt1RCxFQUFFdkQsS0FBS3hGLEVBQUU0aEQsVUFBVTc0QyxFQUFFNjRDLFVBQVU1aEQsRUFBRTBwRCxVQUFVM2dELEVBQUVBLEVBQUUyZ0QsVUFBVTFwRCxJQUFJQSxFQUFFNnVFLGFBQWE3bEUsRUFBRWhKLEVBQUUycEQsVUFBVSxFQUFFM3BELEVBQUUrbkUsV0FBVyxLQUFLL25FLEVBQUV3bkUsWUFBWSxLQUFLeG5FLEVBQUV5bkUsV0FBVyxNQUFNem5FLEVBQUV5bUUsb0JBQW9CMTlELEVBQUUwOUQsb0JBQW9Cem1FLEVBQUU0bUUsZUFBZTc5RCxFQUFFNjlELGVBQWU1bUUsRUFBRWlxRCxNQUFNbGhELEVBQUVraEQsTUFBTWpxRCxFQUFFdXJFLGNBQWN4aUUsRUFBRXdpRSxjQUFjdnJFLEVBQUU2cEQsY0FBYzlnRCxFQUFFOGdELGNBQWM3cEQsRUFBRWtvRSxZQUFZbi9ELEVBQUVtL0QsWUFBWWwvRCxFQUFFRCxFQUFFaTNDLGFBQWFoZ0QsRUFBRWdnRCxhQUFhLE9BQU9oM0MsRUFBRSxLQUFLLENBQUM0OUQsZUFBZTU5RCxFQUFFNDlELGVBQ3pmRCxhQUFhMzlELEVBQUUyOUQsYUFBYUssV0FBV2grRCxFQUFFZytELFlBQVlobkUsRUFBRWtxRCxRQUFRbmhELEVBQUVtaEQsUUFBUWxxRCxFQUFFbUYsTUFBTTRELEVBQUU1RCxNQUFNbkYsRUFBRXM3QyxJQUFJdnlDLEVBQUV1eUMsSUFBV3Q3QyxFQUM1RyxTQUFTc3FFLEdBQUd2aEUsRUFBRUMsRUFBRWhKLEVBQUVDLEVBQUU4RyxFQUFFeUssR0FBRyxJQUFJc1osRUFBRSxFQUFNLEdBQUo3cUIsRUFBRThJLEVBQUssbUJBQW9CQSxFQUFFcW1FLEdBQUdybUUsS0FBSytoQixFQUFFLFFBQVEsR0FBRyxpQkFBa0IvaEIsRUFBRStoQixFQUFFLE9BQU8vaEIsRUFBRSxPQUFPQSxHQUFHLEtBQUttNUMsRUFBRyxPQUFPdW9CLEdBQUd6cUUsRUFBRXkwQyxTQUFTMXRDLEVBQUV5SyxFQUFFeEksR0FBRyxLQUFLdTVDLEVBQUd6M0IsRUFBRSxFQUFFL2pCLEdBQUcsRUFBRSxNQUFNLEtBQUtvN0MsRUFBR3IzQixFQUFFLEVBQUUvakIsR0FBRyxFQUFFLE1BQU0sS0FBS3E3QyxFQUFHLE9BQU9yNUMsRUFBRTZsRSxHQUFHLEdBQUc1dUUsRUFBRWdKLEVBQUksRUFBRmpDLElBQU9zakUsWUFBWWpvQixFQUFHcjVDLEVBQUV2RCxLQUFLNDhDLEVBQUdyNUMsRUFBRTY5RCxlQUFlcDFELEVBQUV6SSxFQUFFLEtBQUswNUMsRUFBRyxPQUFPMTVDLEVBQUU2bEUsR0FBRyxHQUFHNXVFLEVBQUVnSixFQUFFakMsSUFBS3ZCLEtBQUtpOUMsRUFBRzE1QyxFQUFFc2hFLFlBQVk1bkIsRUFBRzE1QyxFQUFFNjlELGVBQWVwMUQsRUFBRXpJLEVBQUUsS0FBSzI1QyxFQUFHLE9BQU8zNUMsRUFBRTZsRSxHQUFHLEdBQUc1dUUsRUFBRWdKLEVBQUVqQyxJQUFLc2pFLFlBQVkzbkIsRUFBRzM1QyxFQUFFNjlELGVBQWVwMUQsRUFBRXpJLEVBQUUsUUFBUSxHQUFHLGlCQUFrQkEsR0FBRyxPQUFPQSxFQUFFLE9BQU9BLEVBQUUyeUMsVUFBVSxLQUFLMkcsRUFBR3YzQixFQUNwZixHQUFHLE1BQU0vaEIsRUFBRSxLQUFLdTVDLEVBQUd4M0IsRUFBRSxFQUFFLE1BQU0vaEIsRUFBRSxLQUFLeTVDLEVBQUcxM0IsRUFBRSxHQUFHLE1BQU0vaEIsRUFBRSxLQUFLNDVDLEVBQUc3M0IsRUFBRSxHQUFHLE1BQU0vaEIsRUFBRSxLQUFLNjVDLEVBQUc5M0IsRUFBRSxHQUFHN3FCLEVBQUUsS0FBSyxNQUFNOEksRUFBRSxNQUFNMUUsTUFBTXExQyxFQUFFLElBQUksTUFBTTN3QyxFQUFFQSxTQUFTQSxFQUFFLEtBQWdFLE9BQTFEQyxFQUFFNGxFLEdBQUc5akQsRUFBRTlxQixFQUFFZ0osRUFBRWpDLElBQUtzakUsWUFBWXRoRSxFQUFFQyxFQUFFeEQsS0FBS3ZGLEVBQUUrSSxFQUFFNDlELGVBQWVwMUQsRUFBU3hJLEVBQUUsU0FBU3loRSxHQUFHMWhFLEVBQUVDLEVBQUVoSixFQUFFQyxHQUFvQyxPQUFqQzhJLEVBQUU2bEUsR0FBRyxFQUFFN2xFLEVBQUU5SSxFQUFFK0ksSUFBSzQ5RCxlQUFlNW1FLEVBQVMrSSxFQUFFLFNBQVNxaEUsR0FBR3JoRSxFQUFFQyxFQUFFaEosR0FBdUMsT0FBcEMrSSxFQUFFNmxFLEdBQUcsRUFBRTdsRSxFQUFFLEtBQUtDLElBQUs0OUQsZUFBZTVtRSxFQUFTK0ksRUFDaFYsU0FBU3loRSxHQUFHemhFLEVBQUVDLEVBQUVoSixHQUF1SyxPQUFwS2dKLEVBQUU0bEUsR0FBRyxFQUFFLE9BQU83bEUsRUFBRTByQyxTQUFTMXJDLEVBQUUwckMsU0FBUyxHQUFHMXJDLEVBQUU3SCxJQUFJOEgsSUFBSzQ5RCxlQUFlNW1FLEVBQUVnSixFQUFFNDRDLFVBQVUsQ0FBQ29LLGNBQWNqakQsRUFBRWlqRCxjQUFjOHRCLGdCQUFnQixLQUFLdlAsZUFBZXhoRSxFQUFFd2hFLGdCQUF1QnZoRSxFQUM5TCxTQUFTK3dFLEdBQUdoeEUsRUFBRUMsRUFBRWhKLEdBQUdrRyxLQUFLKzhDLElBQUlqNkMsRUFBRTlDLEtBQUtnMUMsUUFBUSxLQUFLaDFDLEtBQUs4bEQsY0FBY2pqRCxFQUFFN0MsS0FBS2d4RSxVQUFVaHhFLEtBQUs0ekUsZ0JBQWdCLEtBQUs1ekUsS0FBS3N3RSx1QkFBdUIsRUFBRXR3RSxLQUFLcXdFLGFBQWEsS0FBS3J3RSxLQUFLeXdFLGVBQWUsRUFBRXp3RSxLQUFLNHBFLGVBQWU1cEUsS0FBS3MwQyxRQUFRLEtBQUt0MEMsS0FBSzZsRCxRQUFRL3JELEVBQUVrRyxLQUFLNnZFLGFBQWEsS0FBSzd2RSxLQUFLNHZFLGlCQUFpQixHQUFHNXZFLEtBQUtzdkUsZ0JBQWdCdHZFLEtBQUt5dkUsZUFBZXp2RSxLQUFLMHZFLHNCQUFzQjF2RSxLQUFLdXdFLGtCQUFrQnZ3RSxLQUFLc3hFLG1CQUFtQnR4RSxLQUFLd3ZFLGlCQUFpQixFQUN2YSxTQUFTRCxHQUFHMXNFLEVBQUVDLEdBQUcsSUFBSWhKLEVBQUUrSSxFQUFFeXVFLG1CQUF5QyxPQUF0Qnp1RSxFQUFFQSxFQUFFMHRFLGtCQUF5QixJQUFJejJFLEdBQUdBLEdBQUdnSixHQUFHRCxHQUFHQyxFQUFFLFNBQVNxc0UsR0FBR3RzRSxFQUFFQyxHQUFHLElBQUloSixFQUFFK0ksRUFBRXl1RSxtQkFBbUJ2M0UsRUFBRThJLEVBQUUwdEUsa0JBQWtCejJFLEVBQUVnSixJQUFJRCxFQUFFeXVFLG1CQUFtQnh1RSxJQUFNL0ksRUFBRStJLEdBQUcsSUFBSWhKLEtBQUUrSSxFQUFFMHRFLGtCQUFrQnp0RSxHQUFFQSxHQUFHRCxFQUFFNHNFLGlCQUFpQjVzRSxFQUFFNHNFLGVBQWUsR0FBRzNzRSxHQUFHRCxFQUFFeXNFLGtCQUFrQnpzRSxFQUFFeXNFLGdCQUFnQixHQUNsVCxTQUFTRixHQUFHdnNFLEVBQUVDLEdBQUdBLEVBQUVELEVBQUUyc0UsbUJBQW1CM3NFLEVBQUUyc0UsaUJBQWlCMXNFLEdBQUcsSUFBSWhKLEVBQUUrSSxFQUFFeXVFLG1CQUFtQixJQUFJeDNFLElBQUlnSixHQUFHaEosRUFBRStJLEVBQUV5dUUsbUJBQW1CenVFLEVBQUUwdEUsa0JBQWtCMXRFLEVBQUU2c0Usc0JBQXNCLEVBQUU1c0UsR0FBR0QsRUFBRTB0RSxvQkFBb0IxdEUsRUFBRTB0RSxrQkFBa0J6dEUsRUFBRSxHQUFHQSxFQUFFRCxFQUFFNnNFLHdCQUF3QjdzRSxFQUFFNnNFLHNCQUFzQjVzRSxJQUFJLFNBQVNpdEUsR0FBR2x0RSxFQUFFQyxHQUFHLElBQUloSixFQUFFK0ksRUFBRXlzRSxpQkFBbUIsSUFBSXgxRSxHQUFHQSxFQUFFZ0osS0FBRUQsRUFBRXlzRSxnQkFBZ0J4c0UsR0FDNVYsU0FBU2d4RSxHQUFHanhFLEVBQUVDLEVBQUVoSixFQUFFQyxHQUFHLElBQUk4RyxFQUFFaUMsRUFBRWt5QyxRQUFRMXBDLEVBQUV3M0QsS0FBS2wrQyxFQUFFNjlDLEdBQUd6cEIsU0FBUzF0QyxFQUFFeTNELEdBQUd6M0QsRUFBRXpLLEVBQUUrakIsR0FBRy9oQixFQUFFLEdBQUcvSSxFQUFFLENBQXlCZ0osRUFBRSxDQUFDLEdBQUd5Z0QsR0FBOUJ6cEQsRUFBRUEsRUFBRStvRSx1QkFBa0Mvb0UsR0FBRyxJQUFJQSxFQUFFaWpELElBQUksTUFBTTUrQyxNQUFNcTFDLEVBQUUsTUFBTSxJQUFJSCxFQUFFdjVDLEVBQUUsRUFBRSxDQUFDLE9BQU91NUMsRUFBRTBKLEtBQUssS0FBSyxFQUFFMUosRUFBRUEsRUFBRXFJLFVBQVVwSCxRQUFRLE1BQU14eEMsRUFBRSxLQUFLLEVBQUUsR0FBR3F5QyxHQUFFOUIsRUFBRS96QyxNQUFNLENBQUMrekMsRUFBRUEsRUFBRXFJLFVBQVU4aEIsMENBQTBDLE1BQU0xNkQsR0FBR3V3QyxFQUFFQSxFQUFFK0osYUFBYSxPQUFPL0osR0FBRyxNQUFNbDFDLE1BQU1xMUMsRUFBRSxNQUFPLEdBQUcsSUFBSTE1QyxFQUFFaWpELElBQUksQ0FBQyxJQUFJaE0sRUFBRWozQyxFQUFFd0YsS0FBSyxHQUFHNjFDLEdBQUVwRSxHQUFHLENBQUNqM0MsRUFBRXVqRSxHQUFHdmpFLEVBQUVpM0MsRUFBRXNDLEdBQUcsTUFBTXh3QyxHQUFHL0ksRUFBRXU1QyxPQUFPdjVDLEVBQUUraUUsR0FDM1csT0FEOFcsT0FBTy81RCxFQUFFd3hDLFFBQVF4eEMsRUFBRXd4QyxRQUFReDZDLEVBQUVnSixFQUFFOG1FLGVBQWU5dkUsR0FBRWdKLEVBQUU2K0QsR0FBR3IyRCxFQUFFc1osSUFBS3dFLFFBQVEsQ0FBQytrQixRQUFRdHJDLEdBQ3BlLFFBRHVlOUksT0FBRSxJQUNsZkEsRUFBRSxLQUFLQSxLQUFhK0ksRUFBRTBMLFNBQVN6VSxHQUFHZ29FLEdBQUdsaEUsRUFBRWlDLEdBQUdrZ0UsR0FBR25pRSxFQUFFeUssR0FBVUEsRUFBRSxTQUFTeW9FLEdBQUdseEUsR0FBZSxLQUFaQSxFQUFFQSxFQUFFbXlDLFNBQWMrTyxNQUFNLE9BQU8sS0FBSyxPQUFPbGhELEVBQUVraEQsTUFBTWhILEtBQUssS0FBSyxFQUEyQixRQUFRLE9BQU9sNkMsRUFBRWtoRCxNQUFNckksV0FBVyxTQUFTczRCLEdBQUdueEUsRUFBRUMsR0FBcUIsUUFBbEJELEVBQUVBLEVBQUU4Z0QsZ0JBQXdCLE9BQU85Z0QsRUFBRStnRCxZQUFZL2dELEVBQUVxbkUsVUFBVXBuRSxJQUFJRCxFQUFFcW5FLFVBQVVwbkUsR0FBRyxTQUFTbXhFLEdBQUdweEUsRUFBRUMsR0FBR2t4RSxHQUFHbnhFLEVBQUVDLElBQUlELEVBQUVBLEVBQUUyZ0QsWUFBWXd3QixHQUFHbnhFLEVBQUVDLEdBQ3BWLFNBQVNveEUsR0FBR3J4RSxFQUFFQyxFQUFFaEosR0FBNkIsSUFBSUMsRUFBRSxJQUFJODVFLEdBQUdoeEUsRUFBRUMsRUFBekNoSixFQUFFLE1BQU1BLElBQUcsSUFBS0EsRUFBRStyRCxTQUE0QmhsRCxFQUFFNm5FLEdBQUcsRUFBRSxLQUFLLEtBQUssSUFBSTVsRSxFQUFFLEVBQUUsSUFBSUEsRUFBRSxFQUFFLEdBQUcvSSxFQUFFaTdDLFFBQVFuMEMsRUFBRUEsRUFBRTY2QyxVQUFVM2hELEVBQUU4SSxFQUFFazBELElBQUloOUQsRUFBRWk3QyxRQUFRbDdDLEdBQUcsSUFBSWdKLEdBak90SixTQUFZRCxHQUFHLElBQUlDLEVBQUVndkQsR0FBR2p2RCxHQUFHZ2lELEdBQUdsa0QsU0FBUSxTQUFTN0csR0FBR2s0RCxHQUFHbDRELEVBQUUrSSxFQUFFQyxNQUFLZ2lELEdBQUdua0QsU0FBUSxTQUFTN0csR0FBR2s0RCxHQUFHbDRELEVBQUUrSSxFQUFFQyxNQWlPNkRxeEUsQ0FBRyxJQUFJdHhFLEVBQUV5L0MsU0FBU3ovQyxFQUFFQSxFQUFFNjlDLGVBQWUxZ0QsS0FBS28wRSxjQUFjcjZFLEVBQ2pOLFNBQVNzNkUsR0FBR3h4RSxHQUFHLFNBQVNBLEdBQUcsSUFBSUEsRUFBRXkvQyxVQUFVLElBQUl6L0MsRUFBRXkvQyxVQUFVLEtBQUt6L0MsRUFBRXkvQyxXQUFXLElBQUl6L0MsRUFBRXkvQyxVQUFVLGlDQUFpQ3ovQyxFQUFFb3NDLFlBQ2hJLFNBQVNxbEMsR0FBR3p4RSxFQUFFQyxFQUFFaEosRUFBRUMsRUFBRThHLEdBQUcsSUFBSXlLLEVBQUV4UixFQUFFdXlFLG9CQUFvQixHQUFHL2dFLEVBQUUsQ0FBQyxJQUFJc1osRUFBRXRaLEVBQUU4b0UsY0FBYyxHQUFHLG1CQUFvQnZ6RSxFQUFFLENBQUMsSUFBSXd5QyxFQUFFeHlDLEVBQUVBLEVBQUUsV0FBVyxJQUFJZ0MsRUFBRWt4RSxHQUFHbnZELEdBQUd5dUIsRUFBRXo1QyxLQUFLaUosSUFBSWl4RSxHQUFHaHhFLEVBQUU4aEIsRUFBRS9oQixFQUFFaEMsT0FBTyxDQUFtRCxHQUFsRHlLLEVBQUV4UixFQUFFdXlFLG9CQUQ5QixTQUFZeHBFLEVBQUVDLEdBQTBILEdBQXZIQSxJQUEyREEsTUFBdkRBLEVBQUVELEVBQUUsSUFBSUEsRUFBRXkvQyxTQUFTei9DLEVBQUVrakIsZ0JBQWdCbGpCLEVBQUU0SCxXQUFXLE9BQWEsSUFBSTNILEVBQUV3L0MsV0FBV3gvQyxFQUFFeXhFLGFBQWEscUJBQXdCenhFLEVBQUUsSUFBSSxJQUFJaEosRUFBRUEsRUFBRStJLEVBQUV3L0MsV0FBV3gvQyxFQUFFeUgsWUFBWXhRLEdBQUcsT0FBTyxJQUFJbzZFLEdBQUdyeEUsRUFBRSxFQUFFQyxFQUFFLENBQUMraUQsU0FBUSxRQUFJLEdBQ3ZLMnVCLENBQUcxNkUsRUFBRUMsR0FBRzZxQixFQUFFdFosRUFBRThvRSxjQUFpQixtQkFBb0J2ekUsRUFBRSxDQUFDLElBQUlrd0MsRUFBRWx3QyxFQUFFQSxFQUFFLFdBQVcsSUFBSWdDLEVBQUVreEUsR0FBR252RCxHQUFHbXNCLEVBQUVuM0MsS0FBS2lKLElBQUlrdUUsSUFBRyxXQUFXK0MsR0FBR2h4RSxFQUFFOGhCLEVBQUUvaEIsRUFBRWhDLE1BQUssT0FBT2t6RSxHQUFHbnZELEdBRzdHLFNBQVM2dkQsR0FBRzV4RSxFQUFFQyxHQUFHLElBQUloSixFQUFFLEVBQUVvRSxVQUFVaEMsYUFBUSxJQUFTZ0MsVUFBVSxHQUFHQSxVQUFVLEdBQUcsS0FBSyxJQUFJbTJFLEdBQUd2eEUsR0FBRyxNQUFNM0UsTUFBTXExQyxFQUFFLE1BQU0sT0FIRCxTQUFZM3dDLEVBQUVDLEVBQUVoSixHQUFHLElBQUlDLEVBQUUsRUFBRW1FLFVBQVVoQyxhQUFRLElBQVNnQyxVQUFVLEdBQUdBLFVBQVUsR0FBRyxLQUFLLE1BQU0sQ0FBQ3MzQyxTQUFTdUcsRUFBRy9nRCxJQUFJLE1BQU1qQixFQUFFLEtBQUssR0FBR0EsRUFBRXcwQyxTQUFTMXJDLEVBQUVpakQsY0FBY2hqRCxFQUFFdWhFLGVBQWV2cUUsR0FHaEs0NkUsQ0FBRzd4RSxFQUFFQyxFQUFFLEtBQUtoSixHQUx4SW82RSxHQUFHNzRFLFVBQVV1b0IsT0FBTyxTQUFTL2dCLEVBQUVDLEdBQUdneEUsR0FBR2p4RSxFQUFFN0MsS0FBS28wRSxjQUFjLFVBQUssSUFBU3R4RSxFQUFFLEtBQUtBLElBQUlveEUsR0FBRzc0RSxVQUFVczVFLFFBQVEsU0FBUzl4RSxHQUFHLElBQUlDLEVBQUU5QyxLQUFLbzBFLGNBQWN0NkUsT0FBRSxJQUFTK0ksRUFBRSxLQUFLQSxFQUFFOUksRUFBRStJLEVBQUVnakQsY0FBY2d1QixHQUFHLEtBQUtoeEUsRUFBRSxNQUFLLFdBQVcvSSxFQUFFZzlELElBQUksS0FBSyxPQUFPajlELEdBQUdBLFFBR3Jib3FELEdBQUcsU0FBU3JoRCxHQUFHLEdBQUcsS0FBS0EsRUFBRWs2QyxJQUFJLENBQUMsSUFBSWo2QyxFQUFFKzhELEdBQUdpRCxLQUFLLElBQUksS0FBS0UsR0FBR25nRSxFQUFFQyxHQUFHbXhFLEdBQUdweEUsRUFBRUMsS0FBS3FoRCxHQUFHLFNBQVN0aEQsR0FBRyxHQUFHLEtBQUtBLEVBQUVrNkMsSUFBSSxDQUFDK2xCLEtBQUssSUFBSWhnRSxFQUFFODhELEtBQUtvRCxHQUFHbmdFLEVBQUVDLEdBQUdteEUsR0FBR3B4RSxFQUFFQyxLQUFLc2hELEdBQUcsU0FBU3ZoRCxHQUFHLEdBQUcsS0FBS0EsRUFBRWs2QyxJQUFJLENBQUMsSUFBSWo2QyxFQUFFZ2dFLEtBQW9CRSxHQUFHbmdFLEVBQWxCQyxFQUFFaWdFLEdBQUdqZ0UsRUFBRUQsRUFBRSxPQUFjb3hFLEdBQUdweEUsRUFBRUMsS0FDNU13NkMsR0FBRyxTQUFTejZDLEVBQUVDLEVBQUVoSixHQUFHLE9BQU9nSixHQUFHLElBQUssUUFBeUIsR0FBakJ5OUMsR0FBRzE5QyxFQUFFL0ksR0FBR2dKLEVBQUVoSixFQUFFRSxLQUFRLFVBQVVGLEVBQUV3RixNQUFNLE1BQU13RCxFQUFFLENBQUMsSUFBSWhKLEVBQUUrSSxFQUFFL0ksRUFBRWdSLFlBQVloUixFQUFFQSxFQUFFZ1IsV0FBc0YsSUFBM0VoUixFQUFFQSxFQUFFODZFLGlCQUFpQixjQUFjNXRFLEtBQUtDLFVBQVUsR0FBR25FLEdBQUcsbUJBQXVCQSxFQUFFLEVBQUVBLEVBQUVoSixFQUFFb0MsT0FBTzRHLElBQUksQ0FBQyxJQUFJL0ksRUFBRUQsRUFBRWdKLEdBQUcsR0FBRy9JLElBQUk4SSxHQUFHOUksRUFBRTg2RSxPQUFPaHlFLEVBQUVneUUsS0FBSyxDQUFDLElBQUloMEUsRUFBRW8yRCxHQUFHbDlELEdBQUcsSUFBSThHLEVBQUUsTUFBTTFDLE1BQU1xMUMsRUFBRSxLQUFLcU0sR0FBRzlsRCxHQUFHd21ELEdBQUd4bUQsRUFBRThHLEtBQUssTUFBTSxJQUFLLFdBQVd1Z0QsR0FBR3YrQyxFQUFFL0ksR0FBRyxNQUFNLElBQUssU0FBbUIsT0FBVmdKLEVBQUVoSixFQUFFWSxRQUFlb21ELEdBQUdqK0MsSUFBSS9JLEVBQUVnM0MsU0FBU2h1QyxHQUFFLEtBQU00NkMsR0FBR296QixHQUM5Wm56QixHQUFHLFNBQVM5NkMsRUFBRUMsRUFBRWhKLEVBQUVDLEdBQUcsSUFBSThHLEVBQUV1MUMsR0FBRUEsSUFBRyxFQUFFLElBQUksT0FBT21wQixHQUFHLEdBQUcxOEQsRUFBRTVILEtBQUssS0FBSzZILEVBQUVoSixFQUFFQyxJQUFJLFNBQVFxOEMsR0FBRXYxQyxLQUFNczFDLElBQUd3cEIsT0FBTy9oQixHQUFHLFlBQVl4SCxJQUFHLEVBQUVzM0IsR0FBR0MsT0FBT3gzQixLQTdEL0gsV0FBYyxHQUFHLE9BQU95NEIsR0FBRyxDQUFDLElBQUkvckUsRUFBRStyRSxHQUFHQSxHQUFHLEtBQUsvckUsRUFBRWxDLFNBQVEsU0FBU2tDLEVBQUUvSSxHQUFHaTJFLEdBQUdqMkUsRUFBRStJLEdBQUd1MkMsR0FBRXQvQyxNQUFLNmxFLE1BNkQrQ21WLEdBQUs5RSxPQUFPbnlCLEdBQUcsU0FBU2g3QyxFQUFFQyxHQUFHLElBQUloSixFQUFFczhDLEdBQUVBLElBQUcsRUFBRSxJQUFJLE9BQU92ekMsRUFBRUMsR0FBRyxTQUFRc3pDLEdBQUV0OEMsS0FBTXE4QyxJQUFHd3BCLE9BQ2hOLElBR1U5OEQsR0FBT0MsR0FIYml5RSxHQUFHLENBQUNDLGFBQWFQLEdBQUdRLFlBQVksU0FBU3B5RSxHQUFHLEdBQUcsTUFBTUEsRUFBRSxPQUFPLEtBQUssR0FBRyxJQUFJQSxFQUFFeS9DLFNBQVMsT0FBT3ovQyxFQUFFLElBQUlDLEVBQUVELEVBQUVnZ0Usb0JBQW9CLFFBQUcsSUFBUy8vRCxFQUFFLENBQUMsR0FBRyxtQkFBb0JELEVBQUUrZ0IsT0FBTyxNQUFNemxCLE1BQU1xMUMsRUFBRSxNQUFNLE1BQU1yMUMsTUFBTXExQyxFQUFFLElBQUlyNUMsT0FBT29HLEtBQUtzQyxLQUEwQyxPQUE1QkEsRUFBRSxRQUFWQSxFQUFFaWhELEdBQUdoaEQsSUFBYyxLQUFLRCxFQUFFNjRDLFdBQW9CbUssUUFBUSxTQUFTaGpELEVBQUVDLEVBQUVoSixHQUFHLElBQUl1NkUsR0FBR3Z4RSxHQUFHLE1BQU0zRSxNQUFNcTFDLEVBQUUsTUFBTSxPQUFPOGdDLEdBQUcsS0FBS3p4RSxFQUFFQyxHQUFFLEVBQUdoSixJQUFJOHBCLE9BQU8sU0FBUy9nQixFQUFFQyxFQUFFaEosR0FBRyxJQUFJdTZFLEdBQUd2eEUsR0FBRyxNQUFNM0UsTUFBTXExQyxFQUFFLE1BQU0sT0FBTzhnQyxHQUFHLEtBQUt6eEUsRUFBRUMsR0FBRSxFQUFHaEosSUFBSW83RSxvQ0FBb0MsU0FBU3J5RSxFQUFFQyxFQUFFaEosRUFBRUMsR0FBRyxJQUFJczZFLEdBQUd2NkUsR0FBRyxNQUFNcUUsTUFBTXExQyxFQUFFLE1BQ2hnQixHQUFHLE1BQU0zd0MsUUFBRyxJQUFTQSxFQUFFZ2dFLG9CQUFvQixNQUFNMWtFLE1BQU1xMUMsRUFBRSxLQUFLLE9BQU84Z0MsR0FBR3p4RSxFQUFFQyxFQUFFaEosR0FBRSxFQUFHQyxJQUFJbzdFLHVCQUF1QixTQUFTdHlFLEdBQUcsSUFBSXd4RSxHQUFHeHhFLEdBQUcsTUFBTTFFLE1BQU1xMUMsRUFBRSxLQUFLLFFBQU8zd0MsRUFBRXdwRSxzQkFBcUIwRSxJQUFHLFdBQVd1RCxHQUFHLEtBQUssS0FBS3p4RSxHQUFFLEdBQUcsV0FBV0EsRUFBRXdwRSxvQkFBb0IsS0FBS3hwRSxFQUFFazBELElBQUksWUFBUyxJQUFRcWUsc0JBQXNCLFdBQVcsT0FBT1gsR0FBR2p6RSxXQUFNLEVBQU90RCxZQUFZbTNFLHdCQUF3QnZFLEdBQUd3RSxVQUFVLFNBQVN6eUUsRUFBRUMsR0FBRyxJQUFJc3pDLElBQUdzM0IsR0FBR0MsT0FBT3gzQixHQUFFLE1BQU1oNEMsTUFBTXExQyxFQUFFLE1BQU0sSUFBSTE1QyxFQUFFczhDLEdBQUVBLElBQUcsRUFBRSxJQUFJLE9BQU9tcEIsR0FBRyxHQUFHMThELEVBQUU1SCxLQUFLLEtBQUs2SCxJQUFJLFFBQVFzekMsR0FBRXQ4QyxFQUFFNmxFLE9BQU85bUIsbURBQW1ELENBQUMwOEIsT0FBTyxDQUFDL3ZCLEdBQzNpQndSLEdBQUdDLEdBQUczYixFQUFHRSx5QkFBeUJoQyxFQUFHeU4sR0FBRyxTQUFTcGtELEdBQUdnNEMsRUFBR2g0QyxFQUFFbWtELEtBQUs5NEMsR0FBR3V2QyxHQUFHK1QsR0FBR25XLEVBQUcyMEIsR0FBRyxDQUFDaDdCLFNBQVEsTUFDckVseUMsSUFBUEQsR0FBeWIsQ0FBQzJ5RSx3QkFBd0I5dkIsR0FBRyt2QixXQUFXLEVBQUU5L0QsUUFBUSxVQUNwZisvRCxvQkFBb0IsY0FEQ0Ysd0JBdEJyQixTQUFZM3lFLEdBQUcsR0FBRyxvQkFBcUIwSiwrQkFBK0IsT0FBTSxFQUFHLElBQUl6SixFQUFFeUosK0JBQStCLEdBQUd6SixFQUFFNnlFLGFBQWE3eUUsRUFBRTh5RSxjQUFjLE9BQU0sRUFBRyxJQUFJLElBQUk5N0UsRUFBRWdKLEVBQUUreUUsT0FBT2h6RSxHQUFHdXdFLEdBQUcsU0FBU3Z3RSxHQUFHLElBQUlDLEVBQUVnekUsa0JBQWtCaDhFLEVBQUUrSSxPQUFFLEVBQU8sS0FBMEIsR0FBcEJBLEVBQUVteUMsUUFBUXlPLFlBQWUsTUFBTTVpRCxNQUFNaXJFLEdBQUcsU0FBU2pwRSxHQUFHLElBQUlDLEVBQUVpekUscUJBQXFCajhFLEVBQUUrSSxHQUFHLE1BQU1oQyxNQUFNLE1BQU05RyxLQXNCL1JpOEUsQ0FBRzk2RSxFQUFFLEdBQUcySCxHQUFFLENBQUNvekUsa0JBQWtCLEtBQUtDLGNBQWMsS0FBS0MsbUJBQW1CLEtBQUtDLGVBQWUsS0FBS0MscUJBQXFCejZCLEVBQUc5Qyx1QkFBdUJ3OUIsd0JBQXdCLFNBQVN6ekUsR0FBVyxPQUFPLFFBQWZBLEVBQUVpaEQsR0FBR2poRCxJQUFtQixLQUFLQSxFQUFFNjRDLFdBQVc4NUIsd0JBQXdCLFNBQVMzeUUsR0FBRyxPQUFPQyxHQUFFQSxHQUFFRCxHQUFHLE1BQU0wekUsNEJBQTRCLEtBQUtDLGdCQUFnQixLQUFLQyxhQUFhLEtBQUtDLGtCQUFrQixLQUFLQyxnQkFBZ0IsUUFDdlosSUFBSUMsR0FBRyxDQUFDanlELFFBQVFvd0QsSUFBSThCLEdBQUdELElBQUk3QixJQUFJNkIsR0FBR3A5RSxFQUFPRCxRQUFRczlFLEdBQUdseUQsU0FBU2t5RCxJLDZCQzlSN0ZyOUUsRUFBT0QsUUFBVSxFQUFRLEs7Ozs7Ozs7O0dDTXlDLElBQUkrUixFQUFFc1osRUFBRXl1QixFQUFFdEMsRUFBRXIzQyxFQUNoRixHQURhUyxPQUFPQyxlQUFlYixFQUFRLGFBQWEsQ0FBQ21CLE9BQU0sSUFDNUQsb0JBQXFCNEssUUFBUSxtQkFBb0J3eEUsZUFBZSxDQUFDLElBQUl2N0UsRUFBRSxLQUFLZzRDLEVBQUUsS0FBSzU0QyxFQUFFLFdBQVcsR0FBRyxPQUFPWSxFQUFFLElBQUksSUFBSXNILEVBQUV0SixFQUFRNGtFLGVBQWU1aUUsR0FBRSxFQUFHc0gsR0FBR3RILEVBQUUsS0FBSyxNQUFNdUgsR0FBRyxNQUFNMFIsV0FBVzdaLEVBQUUsR0FBR21JLElBQUswd0MsRUFBRWpiLEtBQUsrQyxNQUFNL2hDLEVBQVE0a0UsYUFBYSxXQUFXLE9BQU81bEMsS0FBSytDLE1BQU1rWSxHQUFHbG9DLEVBQUUsU0FBU3pJLEdBQUcsT0FBT3RILEVBQUVpWixXQUFXbEosRUFBRSxFQUFFekksSUFBSXRILEVBQUVzSCxFQUFFMlIsV0FBVzdaLEVBQUUsS0FBS2lxQixFQUFFLFNBQVMvaEIsRUFBRUMsR0FBR3l3QyxFQUFFLytCLFdBQVczUixFQUFFQyxJQUFJdXdDLEVBQUUsV0FBVzUrQixhQUFhOCtCLElBQUl4QyxFQUFFLFdBQVcsT0FBTSxHQUFJcjNDLEVBQUVILEVBQVF3OUUsd0JBQXdCLGlCQUFpQixDQUFDLElBQUl0akMsRUFBRW51QyxPQUFPMHhFLFlBQVl6NkQsRUFBRWpYLE9BQU9pekIsS0FDbmYvYixFQUFFbFgsT0FBT2tQLFdBQVdrL0IsRUFBRXB1QyxPQUFPbVAsYUFBYSxHQUFHLG9CQUFxQmpJLFFBQVEsQ0FBQyxJQUFJb25DLEVBQUV0dUMsT0FBTzJ4RSxxQkFBcUIsbUJBQW9CM3hFLE9BQU80eEUsdUJBQXVCMXFFLFFBQVFqQixNQUFNLDJJQUEySSxtQkFBb0Jxb0MsR0FBR3BuQyxRQUFRakIsTUFBTSwwSUFBMEksR0FBRyxpQkFDbmVrb0MsR0FBRyxtQkFBb0JBLEVBQUVuWSxJQUFJL2hDLEVBQVE0a0UsYUFBYSxXQUFXLE9BQU8xcUIsRUFBRW5ZLFdBQVcsQ0FBQyxJQUFJd1ksRUFBRXYzQixFQUFFK2UsTUFBTS9oQyxFQUFRNGtFLGFBQWEsV0FBVyxPQUFPNWhELEVBQUUrZSxNQUFNd1ksR0FBRyxJQUFJQyxHQUFFLEVBQUdLLEVBQUUsS0FBS0MsR0FBRyxFQUFFRyxFQUFFLEVBQUVDLEVBQUUsRUFBRTFELEVBQUUsV0FBVyxPQUFPeDNDLEVBQVE0a0UsZ0JBQWdCMXBCLEdBQUcvNkMsRUFBRSxhQUFhSCxFQUFRdzlFLHdCQUF3QixTQUFTbDBFLEdBQUcsRUFBRUEsR0FBRyxJQUFJQSxFQUFFMkosUUFBUWpCLE1BQU0sb0hBQW9IaXBDLEVBQUUsRUFBRTN4QyxFQUFFNUYsS0FBSzhpQixNQUFNLElBQUlsZCxHQUFHLEdBQUcsSUFBSWd5QyxFQUFFLElBQUlpaUMsZUFBZS9oQyxFQUFFRixFQUFFc2lDLE1BQU10aUMsRUFBRXVpQyxNQUFNQyxVQUNuZixXQUFXLEdBQUcsT0FBT2pqQyxFQUFFLENBQUMsSUFBSXZ4QyxFQUFFdEosRUFBUTRrRSxlQUFlMXBCLEVBQUU1eEMsRUFBRTJ4QyxFQUFFLElBQUlKLEdBQUUsRUFBR3Z4QyxHQUFHa3lDLEVBQUV1aUMsWUFBWSxPQUFPdmpDLEdBQUUsRUFBR0ssRUFBRSxNQUFNLE1BQU10eEMsR0FBRyxNQUFNaXlDLEVBQUV1aUMsWUFBWSxNQUFNeDBFLFFBQVNpeEMsR0FBRSxHQUFJem9DLEVBQUUsU0FBU3pJLEdBQUd1eEMsRUFBRXZ4QyxFQUFFa3hDLElBQUlBLEdBQUUsRUFBR2dCLEVBQUV1aUMsWUFBWSxRQUFRMXlELEVBQUUsU0FBUy9oQixFQUFFQyxHQUFHdXhDLEVBQUU3M0IsR0FBRSxXQUFXM1osRUFBRXRKLEVBQVE0a0Usa0JBQWlCcjdELElBQUl1d0MsRUFBRSxXQUFXSyxFQUFFVyxHQUFHQSxHQUFHLEdBQUcsU0FBU1ksRUFBRXB5QyxFQUFFQyxHQUFHLElBQUloSixFQUFFK0ksRUFBRTNHLE9BQU8yRyxFQUFFN0QsS0FBSzhELEdBQUdELEVBQUUsT0FBTyxDQUFDLElBQUk5SSxFQUFFa0QsS0FBSzhpQixPQUFPam1CLEVBQUUsR0FBRyxHQUFHK0csRUFBRWdDLEVBQUU5SSxHQUFHLFVBQUcsSUFBUzhHLEdBQUcsRUFBRXEwQyxFQUFFcjBDLEVBQUVpQyxJQUEwQixNQUFNRCxFQUE3QkEsRUFBRTlJLEdBQUcrSSxFQUFFRCxFQUFFL0ksR0FBRytHLEVBQUUvRyxFQUFFQyxHQUFnQixTQUFTbzdDLEVBQUV0eUMsR0FBVSxZQUFPLEtBQWRBLEVBQUVBLEVBQUUsSUFBcUIsS0FBS0EsRUFDMWQsU0FBUzB5QyxFQUFFMXlDLEdBQUcsSUFBSUMsRUFBRUQsRUFBRSxHQUFHLFFBQUcsSUFBU0MsRUFBRSxDQUFDLElBQUloSixFQUFFK0ksRUFBRTg1QixNQUFNLEdBQUc3aUMsSUFBSWdKLEVBQUUsQ0FBQ0QsRUFBRSxHQUFHL0ksRUFBRStJLEVBQUUsSUFBSSxJQUFJOUksRUFBRSxFQUFFOEcsRUFBRWdDLEVBQUUzRyxPQUFPbkMsRUFBRThHLEdBQUcsQ0FBQyxJQUFJaEgsRUFBRSxHQUFHRSxFQUFFLEdBQUcsRUFBRW1CLEVBQUUySCxFQUFFaEosR0FBRzZzQixFQUFFN3NCLEVBQUUsRUFBRVUsRUFBRXNJLEVBQUU2akIsR0FBRyxRQUFHLElBQVN4ckIsR0FBRyxFQUFFZzZDLEVBQUVoNkMsRUFBRXBCLFFBQUcsSUFBU1MsR0FBRyxFQUFFMjZDLEVBQUUzNkMsRUFBRVcsSUFBSTJILEVBQUU5SSxHQUFHUSxFQUFFc0ksRUFBRTZqQixHQUFHNXNCLEVBQUVDLEVBQUUyc0IsSUFBSTdqQixFQUFFOUksR0FBR21CLEVBQUUySCxFQUFFaEosR0FBR0MsRUFBRUMsRUFBRUYsT0FBUSxXQUFHLElBQVNVLEdBQUcsRUFBRTI2QyxFQUFFMzZDLEVBQUVULElBQTBCLE1BQU0rSSxFQUE3QkEsRUFBRTlJLEdBQUdRLEVBQUVzSSxFQUFFNmpCLEdBQUc1c0IsRUFBRUMsRUFBRTJzQixJQUFnQixPQUFPNWpCLEVBQUUsT0FBTyxLQUFLLFNBQVNveUMsRUFBRXJ5QyxFQUFFQyxHQUFHLElBQUloSixFQUFFK0ksRUFBRTAwRSxVQUFVejBFLEVBQUV5MEUsVUFBVSxPQUFPLElBQUl6OUUsRUFBRUEsRUFBRStJLEVBQUU0RixHQUFHM0YsRUFBRTJGLEdBQUcsSUFBSWl0QyxFQUFFLEdBQUdDLEVBQUUsR0FBR0MsRUFBRSxFQUFFQyxFQUFFLEtBQUtJLEVBQUUsRUFBRUUsR0FBRSxFQUFHQyxHQUFFLEVBQUdGLEdBQUUsRUFDamEsU0FBU0ksRUFBRXp6QyxHQUFHLElBQUksSUFBSUMsRUFBRXF5QyxFQUFFUSxHQUFHLE9BQU83eUMsR0FBRyxDQUFDLEdBQUcsT0FBT0EsRUFBRTBMLFNBQVMrbUMsRUFBRUksT0FBUSxNQUFHN3lDLEVBQUUwMEUsV0FBVzMwRSxHQUFnRCxNQUE5QzB5QyxFQUFFSSxHQUFHN3lDLEVBQUV5MEUsVUFBVXowRSxFQUFFNDlELGVBQWV6ckIsRUFBRVMsRUFBRTV5QyxHQUFjQSxFQUFFcXlDLEVBQUVRLElBQUksU0FBU2EsRUFBRTN6QyxHQUFhLEdBQVZxekMsR0FBRSxFQUFHSSxFQUFFenpDLElBQU91ekMsRUFBRSxHQUFHLE9BQU9qQixFQUFFTyxHQUFHVSxHQUFFLEVBQUc5cUMsRUFBRW1yQyxPQUFPLENBQUMsSUFBSTN6QyxFQUFFcXlDLEVBQUVRLEdBQUcsT0FBTzd5QyxHQUFHOGhCLEVBQUU0eEIsRUFBRTF6QyxFQUFFMDBFLFVBQVUzMEUsSUFDdFAsU0FBUzR6QyxFQUFFNXpDLEVBQUVDLEdBQUdzekMsR0FBRSxFQUFHRixJQUFJQSxHQUFFLEVBQUc3QyxLQUFLOEMsR0FBRSxFQUFHLElBQUlyOEMsRUFBRW04QyxFQUFFLElBQVMsSUFBTEssRUFBRXh6QyxHQUFPK3lDLEVBQUVWLEVBQUVPLEdBQUcsT0FBT0csTUFBTUEsRUFBRTZxQixlQUFlNTlELElBQUlELElBQUlrdUMsTUFBTSxDQUFDLElBQUloM0MsRUFBRTg3QyxFQUFFcm5DLFNBQVMsR0FBRyxPQUFPelUsRUFBRSxDQUFDODdDLEVBQUVybkMsU0FBUyxLQUFLeW5DLEVBQUVKLEVBQUU0aEMsY0FBYyxJQUFJNTJFLEVBQUU5RyxFQUFFODdDLEVBQUU2cUIsZ0JBQWdCNTlELEdBQUdBLEVBQUV2SixFQUFRNGtFLGVBQWUsbUJBQW9CdDlELEVBQUVnMUMsRUFBRXJuQyxTQUFTM04sRUFBRWcxQyxJQUFJVixFQUFFTyxJQUFJSCxFQUFFRyxHQUFHWSxFQUFFeHpDLFFBQVF5eUMsRUFBRUcsR0FBR0csRUFBRVYsRUFBRU8sR0FBRyxHQUFHLE9BQU9HLEVBQUUsSUFBSWg4QyxHQUFFLE1BQU8sQ0FBQyxJQUFJcUIsRUFBRWk2QyxFQUFFUSxHQUFHLE9BQU96NkMsR0FBRzBwQixFQUFFNHhCLEVBQUV0N0MsRUFBRXM4RSxVQUFVMTBFLEdBQUdqSixHQUFFLEVBQUcsT0FBT0EsRUFBRSxRQUFRZzhDLEVBQUUsS0FBS0ksRUFBRW44QyxFQUFFcThDLEdBQUUsR0FDcFosU0FBU2dELEVBQUV0MkMsR0FBRyxPQUFPQSxHQUFHLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sSUFBSSxLQUFLLEVBQUUsT0FBTyxXQUFXLEtBQUssRUFBRSxPQUFPLElBQUksUUFBUSxPQUFPLEtBQUssSUFBSXUyQyxFQUFFMS9DLEVBQUVILEVBQVFnbEUsMkJBQTJCLEVBQUVobEUsRUFBUXEzRCw4QkFBOEIsRUFBRXIzRCxFQUFROHNELHdCQUF3QixFQUFFOXNELEVBQVFzbEUsc0JBQXNCLEVBQUV0bEUsRUFBUW9sRSxxQkFBcUIsRUFBRXBsRSxFQUFRb3NELHlCQUF5QixTQUFTOWlELEVBQUVDLEdBQUcsT0FBT0QsR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sUUFBUUEsRUFBRSxFQUFFLElBQUkvSSxFQUFFbThDLEVBQUVBLEVBQUVwekMsRUFBRSxJQUFJLE9BQU9DLElBQUksUUFBUW16QyxFQUFFbjhDLElBQ2xjUCxFQUFROHVFLGNBQWMsU0FBU3hsRSxHQUFHLE9BQU9vekMsR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJbnpDLEVBQUUsRUFBRSxNQUFNLFFBQVFBLEVBQUVtekMsRUFBRSxJQUFJbjhDLEVBQUVtOEMsRUFBRUEsRUFBRW56QyxFQUFFLElBQUksT0FBT0QsSUFBSSxRQUFRb3pDLEVBQUVuOEMsSUFDaElQLEVBQVE2c0QsMEJBQTBCLFNBQVN2akQsRUFBRUMsRUFBRWhKLEdBQUcsSUFBSUMsRUFBRVIsRUFBUTRrRSxlQUFlLEdBQUcsaUJBQWtCcmtFLEdBQUcsT0FBT0EsRUFBRSxDQUFDLElBQUkrRyxFQUFFL0csRUFBRXEvQixNQUFNdDRCLEVBQUUsaUJBQWtCQSxHQUFHLEVBQUVBLEVBQUU5RyxFQUFFOEcsRUFBRTlHLEVBQUVELEVBQUUsaUJBQWtCQSxFQUFFa2IsUUFBUWxiLEVBQUVrYixRQUFRbWtDLEVBQUV0MkMsUUFBUS9JLEVBQUVxL0MsRUFBRXQyQyxHQUFHaEMsRUFBRTlHLEVBQXlNLE9BQWpNOEksRUFBRSxDQUFDNEYsR0FBR210QyxJQUFJcG5DLFNBQVMxTCxFQUFFMjBFLGNBQWM1MEUsRUFBRTIwRSxVQUFVMzJFLEVBQUU2L0QsZUFBdkQ1bUUsRUFBRStHLEVBQUUvRyxFQUFvRXk5RSxXQUFXLEdBQUcxMkUsRUFBRTlHLEdBQUc4SSxFQUFFMDBFLFVBQVUxMkUsRUFBRW8wQyxFQUFFVSxFQUFFOXlDLEdBQUcsT0FBT3N5QyxFQUFFTyxJQUFJN3lDLElBQUlzeUMsRUFBRVEsS0FBS08sRUFBRTdDLElBQUk2QyxHQUFFLEVBQUd0eEIsRUFBRTR4QixFQUFFMzFDLEVBQUU5RyxNQUFNOEksRUFBRTAwRSxVQUFVejlFLEVBQUVtN0MsRUFBRVMsRUFBRTd5QyxHQUFHdXpDLEdBQUdELElBQUlDLEdBQUUsRUFBRzlxQyxFQUFFbXJDLEtBQVk1ekMsR0FBR3RKLEVBQVFza0Usd0JBQXdCLFNBQVNoN0QsR0FBR0EsRUFBRTJMLFNBQVMsTUFDcmVqVixFQUFRbStFLHNCQUFzQixTQUFTNzBFLEdBQUcsSUFBSUMsRUFBRW16QyxFQUFFLE9BQU8sV0FBVyxJQUFJbjhDLEVBQUVtOEMsRUFBRUEsRUFBRW56QyxFQUFFLElBQUksT0FBT0QsRUFBRXJCLE1BQU14QixLQUFLOUIsV0FBVyxRQUFRKzNDLEVBQUVuOEMsS0FBS1AsRUFBUThrRSxpQ0FBaUMsV0FBVyxPQUFPcG9CLEdBQUcxOEMsRUFBUXdrRSxxQkFBcUIsV0FBVyxJQUFJbDdELEVBQUV0SixFQUFRNGtFLGVBQWU3bkIsRUFBRXp6QyxHQUFHLElBQUlDLEVBQUVxeUMsRUFBRU8sR0FBRyxPQUFPNXlDLElBQUkreUMsR0FBRyxPQUFPQSxHQUFHLE9BQU8veUMsR0FBRyxPQUFPQSxFQUFFMEwsVUFBVTFMLEVBQUUwMEUsV0FBVzMwRSxHQUFHQyxFQUFFNDlELGVBQWU3cUIsRUFBRTZxQixnQkFBZ0IzdkIsS0FBS3gzQyxFQUFRMGtFLHNCQUFzQjdrQixFQUFFNy9DLEVBQVFvK0UsMkJBQTJCLFdBQVd2aEMsR0FBR0QsSUFBSUMsR0FBRSxFQUFHOXFDLEVBQUVtckMsS0FDOWRsOUMsRUFBUXErRSx3QkFBd0IsYUFBYXIrRSxFQUFRcytFLDhCQUE4QixXQUFXLE9BQU8xaUMsRUFBRU8sSUFBSW44QyxFQUFRdStFLG1CQUFtQixNLGNDckJ0SSxTQUFTeDdFLEVBQVFiLEdBV2YsTUFWc0IsbUJBQVhqQixRQUFvRCxpQkFBcEJBLE9BQU9xNUMsU0FDaERyNkMsRUFBT0QsUUFBVStDLEVBQVUsU0FBaUJiLEdBQzFDLGNBQWNBLEdBR2hCakMsRUFBT0QsUUFBVStDLEVBQVUsU0FBaUJiLEdBQzFDLE9BQU9BLEdBQXlCLG1CQUFYakIsUUFBeUJpQixFQUFJc0IsY0FBZ0J2QyxRQUFVaUIsSUFBUWpCLE9BQU9hLFVBQVksZ0JBQWtCSSxHQUl0SGEsRUFBUWIsR0FHakJqQyxFQUFPRCxRQUFVK0MsRyxjQ2RqQixTQUFTeTdFLEVBQWdCNzlFLEVBQUdxQixHQU0xQixPQUxBL0IsRUFBT0QsUUFBVXcrRSxFQUFrQjU5RSxPQUFPdUMsZ0JBQWtCLFNBQXlCeEMsRUFBR3FCLEdBRXRGLE9BREFyQixFQUFFMEMsVUFBWXJCLEVBQ1ByQixHQUdGNjlFLEVBQWdCNzlFLEVBQUdxQixHQUc1Qi9CLEVBQU9ELFFBQVV3K0UsRyw2QkNBakIsSUFBSUMsRUFBdUIsRUFBUSxJQUVuQyxTQUFTQyxLQUNULFNBQVNDLEtBQ1RBLEVBQXVCQyxrQkFBb0JGLEVBRTNDeitFLEVBQU9ELFFBQVUsV0FDZixTQUFTNitFLEVBQUtuOEUsRUFBT284RSxFQUFVQyxFQUFleCtDLEVBQVV5K0MsRUFBY0MsR0FDcEUsR0FBSUEsSUFBV1IsRUFBZixDQUlBLElBQUkzckUsRUFBTSxJQUFJbE8sTUFDWixtTEFLRixNQURBa08sRUFBSXJTLEtBQU8sc0JBQ0xxUyxHQUdSLFNBQVNvc0UsSUFDUCxPQUFPTCxFQUZUQSxFQUFLTSxXQUFhTixFQU1sQixJQUFJTyxFQUFpQixDQUNuQnRqRSxNQUFPK2lFLEVBQ1BRLEtBQU1SLEVBQ05yaUMsS0FBTXFpQyxFQUNObmYsT0FBUW1mLEVBQ1JqOUUsT0FBUWk5RSxFQUNSNWdFLE9BQVE0Z0UsRUFDUlMsT0FBUVQsRUFFUlUsSUFBS1YsRUFDTFcsUUFBU04sRUFDVHRxQyxRQUFTaXFDLEVBQ1RqVSxZQUFhaVUsRUFDYlksV0FBWVAsRUFDWi9xRCxLQUFNMHFELEVBQ05hLFNBQVVSLEVBQ1ZTLE1BQU9ULEVBQ1BVLFVBQVdWLEVBQ1hXLE1BQU9YLEVBQ1BZLE1BQU9aLEVBRVBhLGVBQWdCcEIsRUFDaEJDLGtCQUFtQkYsR0FLckIsT0FGQVUsRUFBZVksVUFBWVosRUFFcEJBLEksNkJDbkRUbi9FLEVBQU9ELFFBRm9CLGdEOzs7Ozs7OztHQ0FkWSxPQUFPQyxlQUFlYixFQUFRLGFBQWEsQ0FBQ21CLE9BQU0sSUFDL0QsSUFBSW9JLEVBQUUsbUJBQW9CdEksUUFBUUEsT0FBTzg0QyxJQUFJeDVDLEVBQUVnSixFQUFFdEksT0FBTzg0QyxJQUFJLGlCQUFpQixNQUFNdjVDLEVBQUUrSSxFQUFFdEksT0FBTzg0QyxJQUFJLGdCQUFnQixNQUFNenlDLEVBQUVpQyxFQUFFdEksT0FBTzg0QyxJQUFJLGtCQUFrQixNQUFNaG9DLEVBQUV4SSxFQUFFdEksT0FBTzg0QyxJQUFJLHFCQUFxQixNQUFNMXVCLEVBQUU5aEIsRUFBRXRJLE9BQU84NEMsSUFBSSxrQkFBa0IsTUFBTUQsRUFBRXZ3QyxFQUFFdEksT0FBTzg0QyxJQUFJLGtCQUFrQixNQUFNdkMsRUFBRWp1QyxFQUFFdEksT0FBTzg0QyxJQUFJLGlCQUFpQixNQUFNNTVDLEVBQUVvSixFQUFFdEksT0FBTzg0QyxJQUFJLG9CQUFvQixNQUFNejVDLEVBQUVpSixFQUFFdEksT0FBTzg0QyxJQUFJLHlCQUF5QixNQUFNcDRDLEVBQUU0SCxFQUFFdEksT0FBTzg0QyxJQUFJLHFCQUFxQixNQUFNLzNDLEVBQUV1SCxFQUFFdEksT0FBTzg0QyxJQUFJLGtCQUFrQixNQUFNQyxFQUFFendDLEVBQUV0SSxPQUFPODRDLElBQUksdUJBQ3BmLE1BQU0vNEMsRUFBRXVJLEVBQUV0SSxPQUFPODRDLElBQUksY0FBYyxNQUFNMzRDLEVBQUVtSSxFQUFFdEksT0FBTzg0QyxJQUFJLGNBQWMsTUFBTTVzQixFQUFFNWpCLEVBQUV0SSxPQUFPODRDLElBQUkscUJBQXFCLE1BQU1HLEVBQUUzd0MsRUFBRXRJLE9BQU84NEMsSUFBSSxtQkFBbUIsTUFBTS8yQixFQUFFelosRUFBRXRJLE9BQU84NEMsSUFBSSxlQUFlLE1BQU0sU0FBUzkyQixFQUFFM1osR0FBRyxHQUFHLGlCQUFrQkEsR0FBRyxPQUFPQSxFQUFFLENBQUMsSUFBSTJ3QyxFQUFFM3dDLEVBQUUyeUMsU0FBUyxPQUFPaEMsR0FBRyxLQUFLMTVDLEVBQUUsT0FBTytJLEVBQUVBLEVBQUV2RCxNQUFRLEtBQUs1RixFQUFFLEtBQUtHLEVBQUUsS0FBS2dILEVBQUUsS0FBSytqQixFQUFFLEtBQUt0WixFQUFFLEtBQUsvUCxFQUFFLE9BQU9zSCxFQUFFLFFBQVEsT0FBT0EsRUFBRUEsR0FBR0EsRUFBRTJ5QyxVQUFZLEtBQUt6RSxFQUFFLEtBQUs3MUMsRUFBRSxLQUFLbTRDLEVBQUUsT0FBT3h3QyxFQUFFLFFBQVEsT0FBTzJ3QyxHQUFHLEtBQUs3NEMsRUFBRSxLQUFLSixFQUFFLEtBQUtSLEVBQUUsT0FBT3k1QyxJQUFJLFNBQVNFLEVBQUU3d0MsR0FBRyxPQUFPMlosRUFBRTNaLEtBQUtoSixFQUN4ZU4sRUFBUWlnRixPQUFPaDlELEVBQUVqakIsRUFBUWtnRixVQUFVLy9FLEVBQUVILEVBQVFtZ0YsZUFBZTcvRSxFQUFFTixFQUFRb2dGLGdCQUFnQjVvQyxFQUFFeDNDLEVBQVFxZ0YsZ0JBQWdCdm1DLEVBQUU5NUMsRUFBUXNnRixRQUFRLy9FLEVBQUVQLEVBQVFvcUIsV0FBV3pvQixFQUFFM0IsRUFBUSsrQyxTQUFTejNDLEVBQUV0SCxFQUFRdWdGLEtBQUtuL0UsRUFBRXBCLEVBQVF3Z0YsS0FBS3gvRSxFQUFFaEIsRUFBUXlnRixPQUFPamdGLEVBQUVSLEVBQVFnL0MsU0FBUzN6QixFQUFFcnJCLEVBQVFpL0MsV0FBV2x0QyxFQUFFL1IsRUFBUWsvQyxTQUFTbDlDLEVBQ3BSaEMsRUFBUTBnRixtQkFBbUIsU0FBU3AzRSxHQUFHLE1BQU0saUJBQWtCQSxHQUFHLG1CQUFvQkEsR0FBR0EsSUFBSWhDLEdBQUdnQyxJQUFJaEosR0FBR2dKLElBQUkraEIsR0FBRy9oQixJQUFJeUksR0FBR3pJLElBQUl0SCxHQUFHc0gsSUFBSTB3QyxHQUFHLGlCQUFrQjF3QyxHQUFHLE9BQU9BLElBQUlBLEVBQUUyeUMsV0FBVzc2QyxHQUFHa0ksRUFBRTJ5QyxXQUFXajdDLEdBQUdzSSxFQUFFMnlDLFdBQVduQyxHQUFHeHdDLEVBQUUyeUMsV0FBV3pFLEdBQUdsdUMsRUFBRTJ5QyxXQUFXdDZDLEdBQUcySCxFQUFFMnlDLFdBQVc5dUIsR0FBRzdqQixFQUFFMnlDLFdBQVcvQixHQUFHNXdDLEVBQUUyeUMsV0FBV2o1QixJQUFJaGpCLEVBQVEyZ0YsWUFBWSxTQUFTcjNFLEdBQUcsT0FBTzZ3QyxFQUFFN3dDLElBQUkyWixFQUFFM1osS0FBS25KLEdBQUdILEVBQVE0Z0YsaUJBQWlCem1DLEVBQUVuNkMsRUFBUTZnRixrQkFBa0IsU0FBU3YzRSxHQUFHLE9BQU8yWixFQUFFM1osS0FBS2t1QyxHQUFHeDNDLEVBQVE4Z0Ysa0JBQWtCLFNBQVN4M0UsR0FBRyxPQUFPMlosRUFBRTNaLEtBQUt3d0MsR0FDamU5NUMsRUFBUStnRixVQUFVLFNBQVN6M0UsR0FBRyxNQUFNLGlCQUFrQkEsR0FBRyxPQUFPQSxHQUFHQSxFQUFFMnlDLFdBQVcxN0MsR0FBR1AsRUFBUWdoRixhQUFhLFNBQVMxM0UsR0FBRyxPQUFPMlosRUFBRTNaLEtBQUszSCxHQUFHM0IsRUFBUWloRixXQUFXLFNBQVMzM0UsR0FBRyxPQUFPMlosRUFBRTNaLEtBQUtoQyxHQUFHdEgsRUFBUWtoRixPQUFPLFNBQVM1M0UsR0FBRyxPQUFPMlosRUFBRTNaLEtBQUtsSSxHQUFHcEIsRUFBUW1xQixPQUFPLFNBQVM3Z0IsR0FBRyxPQUFPMlosRUFBRTNaLEtBQUt0SSxHQUFHaEIsRUFBUW1oRixTQUFTLFNBQVM3M0UsR0FBRyxPQUFPMlosRUFBRTNaLEtBQUs5SSxHQUFHUixFQUFRb2hGLFdBQVcsU0FBUzkzRSxHQUFHLE9BQU8yWixFQUFFM1osS0FBSytoQixHQUFHcnJCLEVBQVFxaEYsYUFBYSxTQUFTLzNFLEdBQUcsT0FBTzJaLEVBQUUzWixLQUFLeUksR0FBRy9SLEVBQVFzaEYsV0FBVyxTQUFTaDRFLEdBQUcsT0FBTzJaLEVBQUUzWixLQUFLdEgsSSxjQ2QxYy9CLEVBQU9ELFFBQVUsU0FBU3VoRixHQUN6QixJQUFLQSxFQUFlQyxnQkFBaUIsQ0FDcEMsSUFBSXZoRixFQUFTVyxPQUFPWSxPQUFPKy9FLEdBRXRCdGhGLEVBQU8rMEMsV0FBVS8wQyxFQUFPKzBDLFNBQVcsSUFDeENwMEMsT0FBT0MsZUFBZVosRUFBUSxTQUFVLENBQ3ZDYSxZQUFZLEVBQ1pDLElBQUssV0FDSixPQUFPZCxFQUFPRSxLQUdoQlMsT0FBT0MsZUFBZVosRUFBUSxLQUFNLENBQ25DYSxZQUFZLEVBQ1pDLElBQUssV0FDSixPQUFPZCxFQUFPQyxLQUdoQlUsT0FBT0MsZUFBZVosRUFBUSxVQUFXLENBQ3hDYSxZQUFZLElBRWJiLEVBQU91aEYsZ0JBQWtCLEVBRTFCLE9BQU92aEYsSSxnQkN0QlIsSUFBSWdOLEVBQVUsRUFBUSxJQUdDLGlCQUZ2QkEsRUFBVUEsRUFBUTNMLFdBQWEyTCxFQUFRbWUsUUFBVW5lLEtBRy9DQSxFQUFVLENBQUMsQ0FBQ2hOLEVBQU9DLEVBQUkrTSxFQUFTLE1BR2xDLElBQUk4QixFQUFVLENBRWQsT0FBaUIsT0FDakIsV0FBb0IsR0FFUCxFQUFRLEdBQVIsQ0FBa0Y5QixFQUFTOEIsR0FFcEc5QixFQUFRdzBFLFNBQ1Z4aEYsRUFBT0QsUUFBVWlOLEVBQVF3MEUsUyxnQkNkM0IsSUFBSUMsRUFBOEIsRUFBUSxJQUN0Q0MsRUFBa0MsRUFBUSxJQUMxQ0MsRUFBZ0MsRUFBUSxJQUN4Q0MsRUFBZ0MsRUFBUSxJQUM1QzdoRixFQUFVMGhGLEdBQTRCLEdBQ3RDLElBQUlJLEVBQXFDSCxFQUFnQ0MsR0FDckVHLEVBQXFDSixFQUFnQ0UsR0FFekU3aEYsRUFBUXlGLEtBQUssQ0FBQ3hGLEVBQU9DLEVBQUksZ0RBQW9ENGhGLEVBQXFDLHFNQUF1TUMsRUFBcUMsaVdBQWtXLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLDZEQUE2RCxNQUFRLEdBQUcsU0FBVyxzUEFBc1AsS0FBTyxXQUFXLGVBQWlCLENBQUMsMmhDQUV4a0M5aEYsRUFBT0QsUUFBVUEsRyw2QkNUakJDLEVBQU9ELFFBQVUsU0FBVTIzQixFQUFLNW9CLEdBUzlCLE9BUktBLElBRUhBLEVBQVUsSUFNTyxpQkFGbkI0b0IsRUFBTUEsR0FBT0EsRUFBSXIyQixXQUFhcTJCLEVBQUl2TSxRQUFVdU0sR0FHbkNBLEdBSUwsZUFBZW5rQixLQUFLbWtCLEtBRXRCQSxFQUFNQSxFQUFJdnlCLE1BQU0sR0FBSSxJQUdsQjJKLEVBQVFpekUsT0FFVnJxRCxHQUFPNW9CLEVBQVFpekUsTUFLYixjQUFjeHVFLEtBQUtta0IsSUFBUTVvQixFQUFRa3pFLFdBQzlCLElBQUtyMEUsT0FBTytwQixFQUFJbHJCLFFBQVEsS0FBTSxPQUFPQSxRQUFRLE1BQU8sT0FBUSxLQUc5RGtyQixLLDZCQ2hDVCxPQUFlLGNBQTBCLHdDLDZCQ0F6QyxPQUFlLGNBQTBCLFMsZ0JDQXpDLElBQUkxcUIsRUFBVSxFQUFRLEtBR0MsaUJBRnZCQSxFQUFVQSxFQUFRM0wsV0FBYTJMLEVBQVFtZSxRQUFVbmUsS0FHL0NBLEVBQVUsQ0FBQyxDQUFDaE4sRUFBT0MsRUFBSStNLEVBQVMsTUFHbEMsSUFBSThCLEVBQVUsQ0FFZCxPQUFpQixPQUNqQixXQUFvQixHQUVQLEVBQVEsR0FBUixDQUEyRjlCLEVBQVM4QixHQUU3RzlCLEVBQVF3MEUsU0FDVnhoRixFQUFPRCxRQUFVaU4sRUFBUXcwRSxTLGlCQ2IzQnpoRixFQURrQyxFQUFRLEdBQ2hDMGhGLEVBQTRCLElBRTlCajhFLEtBQUssQ0FBQ3hGLEVBQU9DLEVBQUksNnZEQUE4dkQsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMseUZBQXlGLE1BQVEsR0FBRyxTQUFXLGk2QkFBaTZCLEtBQU8sY0FBYyxlQUFpQixDQUFDLGswREFFejJGRCxFQUFPRCxRQUFVQSxHLGdCQ05qQixJQUFJaU4sRUFBVSxFQUFRLEtBR0MsaUJBRnZCQSxFQUFVQSxFQUFRM0wsV0FBYTJMLEVBQVFtZSxRQUFVbmUsS0FHL0NBLEVBQVUsQ0FBQyxDQUFDaE4sRUFBT0MsRUFBSStNLEVBQVMsTUFHbEMsSUFBSThCLEVBQVUsQ0FFZCxPQUFpQixPQUNqQixXQUFvQixHQUVQLEVBQVEsR0FBUixDQUF3RTlCLEVBQVM4QixHQUUxRjlCLEVBQVF3MEUsU0FDVnhoRixFQUFPRCxRQUFVaU4sRUFBUXcwRSxTLGlCQ2IzQnpoRixFQURrQyxFQUFRLEdBQ2hDMGhGLEVBQTRCLElBRTlCajhFLEtBQUssQ0FBQ3hGLEVBQU9DLEVBQUksNjhrQkFBODhrQixHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyxtR0FBbUcsTUFBUSxHQUFHLFNBQVcsK3FOQUErcU4sS0FBTyxvQkFBb0IsZUFBaUIsQ0FBQyxtcFVBRXYxeUJELEVBQU9ELFFBQVVBLEcsY0NOakJDLEVBQU9ELFFBQVVtSixNQUFNbUIsU0FBVyxTQUFVdUMsR0FDMUMsTUFBOEMsa0JBQXZDak0sT0FBT2tCLFVBQVU4QixTQUFTdkQsS0FBS3dNLEssZ0JDRHhDLElBQUlJLEVBQVUsRUFBUSxLQUdDLGlCQUZ2QkEsRUFBVUEsRUFBUTNMLFdBQWEyTCxFQUFRbWUsUUFBVW5lLEtBRy9DQSxFQUFVLENBQUMsQ0FBQ2hOLEVBQU9DLEVBQUkrTSxFQUFTLE1BR2xDLElBQUk4QixFQUFVLENBRWQsT0FBaUIsT0FDakIsV0FBb0IsR0FFUCxFQUFRLEdBQVIsQ0FBd0Y5QixFQUFTOEIsR0FFMUc5QixFQUFRdzBFLFNBQ1Z4aEYsRUFBT0QsUUFBVWlOLEVBQVF3MEUsUyxpQkNiM0J6aEYsRUFEa0MsRUFBUSxHQUNoQzBoRixFQUE0QixJQUU5Qmo4RSxLQUFLLENBQUN4RixFQUFPQyxFQUFJLDhmQUErZixHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyw4RUFBOEUsTUFBUSxHQUFHLFNBQVcsb1FBQW9RLEtBQU8sWUFBWSxlQUFpQixDQUFDLGlnQkFFaDhCRCxFQUFPRCxRQUFVQSxHLGdCQ0NqQixJQUFJa2lGLEVBQVcsU0FBVWxpRixHQUN2QixhQUVBLElBRUk2RSxFQUZBczlFLEVBQUt2aEYsT0FBT2tCLFVBQ1ppcEIsRUFBU28zRCxFQUFHcGdGLGVBRVpxZ0YsRUFBNEIsbUJBQVhuaEYsT0FBd0JBLE9BQVMsR0FDbERvaEYsRUFBaUJELEVBQVE5bkMsVUFBWSxhQUNyQ2dvQyxFQUFzQkYsRUFBUUcsZUFBaUIsa0JBQy9DQyxFQUFvQkosRUFBUWxoRixhQUFlLGdCQUUvQyxTQUFTdWhGLEVBQUtDLEVBQVNDLEVBQVMxL0UsRUFBTTIvRSxHQUVwQyxJQUFJQyxFQUFpQkYsR0FBV0EsRUFBUTdnRixxQkFBcUJnaEYsRUFBWUgsRUFBVUcsRUFDL0VDLEVBQVluaUYsT0FBT1ksT0FBT3FoRixFQUFlL2dGLFdBQ3pDaTVDLEVBQVUsSUFBSWlvQyxFQUFRSixHQUFlLElBTXpDLE9BRkFHLEVBQVVFLFFBa01aLFNBQTBCUCxFQUFTei9FLEVBQU04M0MsR0FDdkMsSUFBSXh6QyxFQUFRMjdFLEVBRVosT0FBTyxTQUFnQmxxRCxFQUFRNXZCLEdBQzdCLEdBQUk3QixJQUFVNDdFLEVBQ1osTUFBTSxJQUFJditFLE1BQU0sZ0NBR2xCLEdBQUkyQyxJQUFVNjdFLEVBQW1CLENBQy9CLEdBQWUsVUFBWHBxRCxFQUNGLE1BQU01dkIsRUFLUixPQUFPaTZFLElBTVQsSUFIQXRvQyxFQUFRL2hCLE9BQVNBLEVBQ2pCK2hCLEVBQVEzeEMsSUFBTUEsSUFFRCxDQUNYLElBQUlrNkUsRUFBV3ZvQyxFQUFRdW9DLFNBQ3ZCLEdBQUlBLEVBQVUsQ0FDWixJQUFJQyxFQUFpQkMsRUFBb0JGLEVBQVV2b0MsR0FDbkQsR0FBSXdvQyxFQUFnQixDQUNsQixHQUFJQSxJQUFtQkUsRUFBa0IsU0FDekMsT0FBT0YsR0FJWCxHQUF1QixTQUFuQnhvQyxFQUFRL2hCLE9BR1YraEIsRUFBUWxYLEtBQU9rWCxFQUFRMm9DLE1BQVEzb0MsRUFBUTN4QyxTQUVsQyxHQUF1QixVQUFuQjJ4QyxFQUFRL2hCLE9BQW9CLENBQ3JDLEdBQUl6eEIsSUFBVTI3RSxFQUVaLE1BREEzN0UsRUFBUTY3RSxFQUNGcm9DLEVBQVEzeEMsSUFHaEIyeEMsRUFBUTRvQyxrQkFBa0I1b0MsRUFBUTN4QyxTQUVOLFdBQW5CMnhDLEVBQVEvaEIsUUFDakIraEIsRUFBUTZvQyxPQUFPLFNBQVU3b0MsRUFBUTN4QyxLQUduQzdCLEVBQVE0N0UsRUFFUixJQUFJVSxFQUFTQyxFQUFTcEIsRUFBU3ovRSxFQUFNODNDLEdBQ3JDLEdBQW9CLFdBQWhCOG9DLEVBQU85OUUsS0FBbUIsQ0FPNUIsR0FKQXdCLEVBQVF3ekMsRUFBUXBvQyxLQUNaeXdFLEVBQ0FXLEVBRUFGLEVBQU96NkUsTUFBUXE2RSxFQUNqQixTQUdGLE1BQU8sQ0FDTHRpRixNQUFPMGlGLEVBQU96NkUsSUFDZHVKLEtBQU1vb0MsRUFBUXBvQyxNQUdTLFVBQWhCa3hFLEVBQU85OUUsT0FDaEJ3QixFQUFRNjdFLEVBR1Jyb0MsRUFBUS9oQixPQUFTLFFBQ2pCK2hCLEVBQVEzeEMsSUFBTXk2RSxFQUFPejZFLE9BMVFQNDZFLENBQWlCdEIsRUFBU3ovRSxFQUFNODNDLEdBRTdDZ29DLEVBY1QsU0FBU2UsRUFBU3A1RSxFQUFJeEksRUFBS2tILEdBQ3pCLElBQ0UsTUFBTyxDQUFFckQsS0FBTSxTQUFVcUQsSUFBS3NCLEVBQUdySyxLQUFLNkIsRUFBS2tILElBQzNDLE1BQU8wSixHQUNQLE1BQU8sQ0FBRS9NLEtBQU0sUUFBU3FELElBQUswSixJQWhCakM5UyxFQUFReWlGLEtBQU9BLEVBb0JmLElBQUlTLEVBQXlCLGlCQUN6QmEsRUFBeUIsaUJBQ3pCWixFQUFvQixZQUNwQkMsRUFBb0IsWUFJcEJLLEVBQW1CLEdBTXZCLFNBQVNYLEtBQ1QsU0FBU21CLEtBQ1QsU0FBU0MsS0FJVCxJQUFJQyxFQUFvQixHQUN4QkEsRUFBa0I5QixHQUFrQixXQUNsQyxPQUFPNTdFLE1BR1QsSUFBSTI5RSxFQUFXeGpGLE9BQU93QyxlQUNsQmloRixFQUEwQkQsR0FBWUEsRUFBU0EsRUFBU0UsRUFBTyxNQUMvREQsR0FDQUEsSUFBNEJsQyxHQUM1QnAzRCxFQUFPMXFCLEtBQUtna0YsRUFBeUJoQyxLQUd2QzhCLEVBQW9CRSxHQUd0QixJQUFJRSxFQUFLTCxFQUEyQnBpRixVQUNsQ2doRixFQUFVaGhGLFVBQVlsQixPQUFPWSxPQUFPMmlGLEdBUXRDLFNBQVNLLEVBQXNCMWlGLEdBQzdCLENBQUMsT0FBUSxRQUFTLFVBQVVzRixTQUFRLFNBQVM0eEIsR0FDM0NsM0IsRUFBVWszQixHQUFVLFNBQVM1dkIsR0FDM0IsT0FBTzNDLEtBQUt3OEUsUUFBUWpxRCxFQUFRNXZCLE9Bb0NsQyxTQUFTcTdFLEVBQWMxQixHQWdDckIsSUFBSTJCLEVBZ0NKaitFLEtBQUt3OEUsUUE5QkwsU0FBaUJqcUQsRUFBUTV2QixHQUN2QixTQUFTdTdFLElBQ1AsT0FBTyxJQUFJL3hFLFNBQVEsU0FBU04sRUFBU0MsSUFuQ3pDLFNBQVNxeUUsRUFBTzVyRCxFQUFRNXZCLEVBQUtrSixFQUFTQyxHQUNwQyxJQUFJc3hFLEVBQVNDLEVBQVNmLEVBQVUvcEQsR0FBUytwRCxFQUFXMzVFLEdBQ3BELEdBQW9CLFVBQWhCeTZFLEVBQU85OUUsS0FFSixDQUNMLElBQUltRyxFQUFTMjNFLEVBQU96NkUsSUFDaEJqSSxFQUFRK0ssRUFBTy9LLE1BQ25CLE9BQUlBLEdBQ2lCLGlCQUFWQSxHQUNQNHBCLEVBQU8xcUIsS0FBS2MsRUFBTyxXQUNkeVIsUUFBUU4sUUFBUW5SLEVBQU0wakYsU0FBU2h5RSxNQUFLLFNBQVMxUixHQUNsRHlqRixFQUFPLE9BQVF6akYsRUFBT21SLEVBQVNDLE1BQzlCLFNBQVNPLEdBQ1Y4eEUsRUFBTyxRQUFTOXhFLEVBQUtSLEVBQVNDLE1BSTNCSyxRQUFRTixRQUFRblIsR0FBTzBSLE1BQUssU0FBU2l5RSxHQUkxQzU0RSxFQUFPL0ssTUFBUTJqRixFQUNmeHlFLEVBQVFwRyxNQUNQLFNBQVM4RixHQUdWLE9BQU80eUUsRUFBTyxRQUFTNXlFLEVBQU9NLEVBQVNDLE1BdkJ6Q0EsRUFBT3N4RSxFQUFPejZFLEtBaUNadzdFLENBQU81ckQsRUFBUTV2QixFQUFLa0osRUFBU0MsTUFJakMsT0FBT215RSxFQWFMQSxFQUFrQkEsRUFBZ0I3eEUsS0FDaEM4eEUsRUFHQUEsR0FDRUEsS0ErR1YsU0FBU25CLEVBQW9CRixFQUFVdm9DLEdBQ3JDLElBQUkvaEIsRUFBU3NxRCxFQUFTaHBDLFNBQVNTLEVBQVEvaEIsUUFDdkMsR0FBSUEsSUFBV24wQixFQUFXLENBS3hCLEdBRkFrMkMsRUFBUXVvQyxTQUFXLEtBRUksVUFBbkJ2b0MsRUFBUS9oQixPQUFvQixDQUU5QixHQUFJc3FELEVBQVNocEMsU0FBaUIsU0FHNUJTLEVBQVEvaEIsT0FBUyxTQUNqQitoQixFQUFRM3hDLElBQU12RSxFQUNkMitFLEVBQW9CRixFQUFVdm9DLEdBRVAsVUFBbkJBLEVBQVEvaEIsUUFHVixPQUFPeXFELEVBSVgxb0MsRUFBUS9oQixPQUFTLFFBQ2pCK2hCLEVBQVEzeEMsSUFBTSxJQUFJN0csVUFDaEIsa0RBR0osT0FBT2toRixFQUdULElBQUlJLEVBQVNDLEVBQVM5cUQsRUFBUXNxRCxFQUFTaHBDLFNBQVVTLEVBQVEzeEMsS0FFekQsR0FBb0IsVUFBaEJ5NkUsRUFBTzk5RSxLQUlULE9BSEFnMUMsRUFBUS9oQixPQUFTLFFBQ2pCK2hCLEVBQVEzeEMsSUFBTXk2RSxFQUFPejZFLElBQ3JCMnhDLEVBQVF1b0MsU0FBVyxLQUNaRyxFQUdULElBQUkvd0UsRUFBT214RSxFQUFPejZFLElBRWxCLE9BQU1zSixFQU9GQSxFQUFLQyxNQUdQb29DLEVBQVF1b0MsRUFBU3lCLFlBQWNyeUUsRUFBS3ZSLE1BR3BDNDVDLEVBQVF4MEMsS0FBTys4RSxFQUFTMEIsUUFRRCxXQUFuQmpxQyxFQUFRL2hCLFNBQ1YraEIsRUFBUS9oQixPQUFTLE9BQ2pCK2hCLEVBQVEzeEMsSUFBTXZFLEdBVWxCazJDLEVBQVF1b0MsU0FBVyxLQUNaRyxHQU5FL3dFLEdBM0JQcW9DLEVBQVEvaEIsT0FBUyxRQUNqQitoQixFQUFRM3hDLElBQU0sSUFBSTdHLFVBQVUsb0NBQzVCdzRDLEVBQVF1b0MsU0FBVyxLQUNaRyxHQW9EWCxTQUFTd0IsRUFBYUMsR0FDcEIsSUFBSUMsRUFBUSxDQUFFQyxPQUFRRixFQUFLLElBRXZCLEtBQUtBLElBQ1BDLEVBQU1FLFNBQVdILEVBQUssSUFHcEIsS0FBS0EsSUFDUEMsRUFBTUcsV0FBYUosRUFBSyxHQUN4QkMsRUFBTUksU0FBV0wsRUFBSyxJQUd4QnorRSxLQUFLKytFLFdBQVcvL0UsS0FBSzAvRSxHQUd2QixTQUFTTSxFQUFjTixHQUNyQixJQUFJdEIsRUFBU3NCLEVBQU1PLFlBQWMsR0FDakM3QixFQUFPOTlFLEtBQU8sZ0JBQ1A4OUUsRUFBT3o2RSxJQUNkKzdFLEVBQU1PLFdBQWE3QixFQUdyQixTQUFTYixFQUFRSixHQUlmbjhFLEtBQUsrK0UsV0FBYSxDQUFDLENBQUVKLE9BQVEsU0FDN0J4QyxFQUFZeDdFLFFBQVE2OUUsRUFBY3grRSxNQUNsQ0EsS0FBS2c1QixPQUFNLEdBOEJiLFNBQVM2a0QsRUFBT3FCLEdBQ2QsR0FBSUEsRUFBVSxDQUNaLElBQUlDLEVBQWlCRCxFQUFTdEQsR0FDOUIsR0FBSXVELEVBQ0YsT0FBT0EsRUFBZXZsRixLQUFLc2xGLEdBRzdCLEdBQTZCLG1CQUFsQkEsRUFBU3AvRSxLQUNsQixPQUFPby9FLEVBR1QsSUFBS2xtRSxNQUFNa21FLEVBQVNoakYsUUFBUyxDQUMzQixJQUFJekMsR0FBSyxFQUFHcUcsRUFBTyxTQUFTQSxJQUMxQixPQUFTckcsRUFBSXlsRixFQUFTaGpGLFFBQ3BCLEdBQUlvb0IsRUFBTzFxQixLQUFLc2xGLEVBQVV6bEYsR0FHeEIsT0FGQXFHLEVBQUtwRixNQUFRd2tGLEVBQVN6bEYsR0FDdEJxRyxFQUFLb00sTUFBTyxFQUNMcE0sRUFPWCxPQUhBQSxFQUFLcEYsTUFBUTBELEVBQ2IwQixFQUFLb00sTUFBTyxFQUVMcE0sR0FHVCxPQUFPQSxFQUFLQSxLQUFPQSxHQUt2QixNQUFPLENBQUVBLEtBQU04OEUsR0FJakIsU0FBU0EsSUFDUCxNQUFPLENBQUVsaUYsTUFBTzBELEVBQVc4TixNQUFNLEdBK01uQyxPQXhtQkFzeEUsRUFBa0JuaUYsVUFBWXlpRixFQUFHL2dGLFlBQWMwZ0YsRUFDL0NBLEVBQTJCMWdGLFlBQWN5Z0YsRUFDekNDLEVBQTJCMUIsR0FDekJ5QixFQUFrQjU2RCxZQUFjLG9CQVlsQ3JwQixFQUFRNmxGLG9CQUFzQixTQUFTQyxHQUNyQyxJQUFJcjRELEVBQXlCLG1CQUFYcTRELEdBQXlCQSxFQUFPdGlGLFlBQ2xELFFBQU9pcUIsSUFDSEEsSUFBU3cyRCxHQUcyQix1QkFBbkN4MkQsRUFBS3BFLGFBQWVvRSxFQUFLaHRCLFFBSWhDVCxFQUFRK2xGLEtBQU8sU0FBU0QsR0FVdEIsT0FUSWxsRixPQUFPdUMsZUFDVHZDLE9BQU91QyxlQUFlMmlGLEVBQVE1QixJQUU5QjRCLEVBQU96aUYsVUFBWTZnRixFQUNiMUIsS0FBcUJzRCxJQUN6QkEsRUFBT3RELEdBQXFCLHNCQUdoQ3NELEVBQU9oa0YsVUFBWWxCLE9BQU9ZLE9BQU8raUYsR0FDMUJ1QixHQU9UOWxGLEVBQVFnbUYsTUFBUSxTQUFTNThFLEdBQ3ZCLE1BQU8sQ0FBRXk3RSxRQUFTejdFLElBc0VwQm83RSxFQUFzQkMsRUFBYzNpRixXQUNwQzJpRixFQUFjM2lGLFVBQVV3Z0YsR0FBdUIsV0FDN0MsT0FBTzc3RSxNQUVUekcsRUFBUXlrRixjQUFnQkEsRUFLeEJ6a0YsRUFBUWltRixNQUFRLFNBQVN2RCxFQUFTQyxFQUFTMS9FLEVBQU0yL0UsR0FDL0MsSUFBSXNELEVBQU8sSUFBSXpCLEVBQ2JoQyxFQUFLQyxFQUFTQyxFQUFTMS9FLEVBQU0yL0UsSUFHL0IsT0FBTzVpRixFQUFRNmxGLG9CQUFvQmxELEdBQy9CdUQsRUFDQUEsRUFBSzMvRSxPQUFPc00sTUFBSyxTQUFTM0csR0FDeEIsT0FBT0EsRUFBT3lHLEtBQU96RyxFQUFPL0ssTUFBUStrRixFQUFLMy9FLFdBdUtqRGkrRSxFQUFzQkQsR0FFdEJBLEVBQUcvQixHQUFxQixZQU94QitCLEVBQUdsQyxHQUFrQixXQUNuQixPQUFPNTdFLE1BR1Q4OUUsRUFBRzNnRixTQUFXLFdBQ1osTUFBTyxzQkFrQ1Q1RCxFQUFRZ0gsS0FBTyxTQUFTcEYsR0FDdEIsSUFBSW9GLEVBQU8sR0FDWCxJQUFLLElBQUl2RixLQUFPRyxFQUNkb0YsRUFBS3ZCLEtBQUtoRSxHQU1aLE9BSkF1RixFQUFLbS9FLFVBSUUsU0FBUzUvRSxJQUNkLEtBQU9TLEVBQUtyRSxRQUFRLENBQ2xCLElBQUlsQixFQUFNdUYsRUFBS284QixNQUNmLEdBQUkzaEMsS0FBT0csRUFHVCxPQUZBMkUsRUFBS3BGLE1BQVFNLEVBQ2I4RSxFQUFLb00sTUFBTyxFQUNMcE0sRUFRWCxPQURBQSxFQUFLb00sTUFBTyxFQUNMcE0sSUFzQ1h2RyxFQUFRc2tGLE9BQVNBLEVBTWpCdEIsRUFBUWxoRixVQUFZLENBQ2xCMEIsWUFBYXcvRSxFQUVidmpELE1BQU8sU0FBUzJtRCxHQWNkLEdBYkEzL0UsS0FBS2s3QixLQUFPLEVBQ1psN0IsS0FBS0YsS0FBTyxFQUdaRSxLQUFLbzlCLEtBQU9wOUIsS0FBS2k5RSxNQUFRNytFLEVBQ3pCNEIsS0FBS2tNLE1BQU8sRUFDWmxNLEtBQUs2OEUsU0FBVyxLQUVoQjc4RSxLQUFLdXlCLE9BQVMsT0FDZHZ5QixLQUFLMkMsSUFBTXZFLEVBRVg0QixLQUFLKytFLFdBQVdwK0UsUUFBUXErRSxJQUVuQlcsRUFDSCxJQUFLLElBQUkzbEYsS0FBUWdHLEtBRVEsTUFBbkJoRyxFQUFLbVcsT0FBTyxJQUNabVUsRUFBTzFxQixLQUFLb0csS0FBTWhHLEtBQ2pCZ2YsT0FBT2hmLEVBQUsyRSxNQUFNLE1BQ3JCcUIsS0FBS2hHLEdBQVFvRSxJQU1yQndoRixLQUFNLFdBQ0o1L0UsS0FBS2tNLE1BQU8sRUFFWixJQUNJMnpFLEVBRFk3L0UsS0FBSysrRSxXQUFXLEdBQ0xFLFdBQzNCLEdBQXdCLFVBQXBCWSxFQUFXdmdGLEtBQ2IsTUFBTXVnRixFQUFXbDlFLElBR25CLE9BQU8zQyxLQUFLOC9FLE1BR2Q1QyxrQkFBbUIsU0FBU2gzRCxHQUMxQixHQUFJbG1CLEtBQUtrTSxLQUNQLE1BQU1nYSxFQUdSLElBQUlvdUIsRUFBVXQwQyxLQUNkLFNBQVMrL0UsRUFBT0MsRUFBS0MsR0FZbkIsT0FYQTdDLEVBQU85OUUsS0FBTyxRQUNkODlFLEVBQU96NkUsSUFBTXVqQixFQUNib3VCLEVBQVF4MEMsS0FBT2tnRixFQUVYQyxJQUdGM3JDLEVBQVEvaEIsT0FBUyxPQUNqQitoQixFQUFRM3hDLElBQU12RSxLQUdONmhGLEVBR1osSUFBSyxJQUFJeG1GLEVBQUl1RyxLQUFLKytFLFdBQVc3aUYsT0FBUyxFQUFHekMsR0FBSyxJQUFLQSxFQUFHLENBQ3BELElBQUlpbEYsRUFBUTErRSxLQUFLKytFLFdBQVd0bEYsR0FDeEIyakYsRUFBU3NCLEVBQU1PLFdBRW5CLEdBQXFCLFNBQWpCUCxFQUFNQyxPQUlSLE9BQU9vQixFQUFPLE9BR2hCLEdBQUlyQixFQUFNQyxRQUFVMytFLEtBQUtrN0IsS0FBTSxDQUM3QixJQUFJZ2xELEVBQVc1N0QsRUFBTzFxQixLQUFLOGtGLEVBQU8sWUFDOUJ5QixFQUFhNzdELEVBQU8xcUIsS0FBSzhrRixFQUFPLGNBRXBDLEdBQUl3QixHQUFZQyxFQUFZLENBQzFCLEdBQUluZ0YsS0FBS2s3QixLQUFPd2pELEVBQU1FLFNBQ3BCLE9BQU9tQixFQUFPckIsRUFBTUUsVUFBVSxHQUN6QixHQUFJNStFLEtBQUtrN0IsS0FBT3dqRCxFQUFNRyxXQUMzQixPQUFPa0IsRUFBT3JCLEVBQU1HLGlCQUdqQixHQUFJcUIsR0FDVCxHQUFJbGdGLEtBQUtrN0IsS0FBT3dqRCxFQUFNRSxTQUNwQixPQUFPbUIsRUFBT3JCLEVBQU1FLFVBQVUsT0FHM0IsS0FBSXVCLEVBTVQsTUFBTSxJQUFJaGlGLE1BQU0sMENBTGhCLEdBQUk2QixLQUFLazdCLEtBQU93akQsRUFBTUcsV0FDcEIsT0FBT2tCLEVBQU9yQixFQUFNRyxnQkFVOUIxQixPQUFRLFNBQVM3OUUsRUFBTXFELEdBQ3JCLElBQUssSUFBSWxKLEVBQUl1RyxLQUFLKytFLFdBQVc3aUYsT0FBUyxFQUFHekMsR0FBSyxJQUFLQSxFQUFHLENBQ3BELElBQUlpbEYsRUFBUTErRSxLQUFLKytFLFdBQVd0bEYsR0FDNUIsR0FBSWlsRixFQUFNQyxRQUFVMytFLEtBQUtrN0IsTUFDckI1VyxFQUFPMXFCLEtBQUs4a0YsRUFBTyxlQUNuQjErRSxLQUFLazdCLEtBQU93akQsRUFBTUcsV0FBWSxDQUNoQyxJQUFJdUIsRUFBZTFCLEVBQ25CLE9BSUEwQixJQUNVLFVBQVQ5Z0YsR0FDUyxhQUFUQSxJQUNEOGdGLEVBQWF6QixRQUFVaDhFLEdBQ3ZCQSxHQUFPeTlFLEVBQWF2QixhQUd0QnVCLEVBQWUsTUFHakIsSUFBSWhELEVBQVNnRCxFQUFlQSxFQUFhbkIsV0FBYSxHQUl0RCxPQUhBN0IsRUFBTzk5RSxLQUFPQSxFQUNkODlFLEVBQU96NkUsSUFBTUEsRUFFVHk5RSxHQUNGcGdGLEtBQUt1eUIsT0FBUyxPQUNkdnlCLEtBQUtGLEtBQU9zZ0YsRUFBYXZCLFdBQ2xCN0IsR0FHRmg5RSxLQUFLcWdGLFNBQVNqRCxJQUd2QmlELFNBQVUsU0FBU2pELEVBQVEwQixHQUN6QixHQUFvQixVQUFoQjFCLEVBQU85OUUsS0FDVCxNQUFNODlFLEVBQU96NkUsSUFjZixNQVhvQixVQUFoQnk2RSxFQUFPOTlFLE1BQ1MsYUFBaEI4OUUsRUFBTzk5RSxLQUNUVSxLQUFLRixLQUFPczlFLEVBQU96NkUsSUFDTSxXQUFoQnk2RSxFQUFPOTlFLE1BQ2hCVSxLQUFLOC9FLEtBQU85L0UsS0FBSzJDLElBQU15NkUsRUFBT3o2RSxJQUM5QjNDLEtBQUt1eUIsT0FBUyxTQUNkdnlCLEtBQUtGLEtBQU8sT0FDYSxXQUFoQnM5RSxFQUFPOTlFLE1BQXFCdy9FLElBQ3JDOStFLEtBQUtGLEtBQU9nL0UsR0FHUDlCLEdBR1RzRCxPQUFRLFNBQVN6QixHQUNmLElBQUssSUFBSXBsRixFQUFJdUcsS0FBSysrRSxXQUFXN2lGLE9BQVMsRUFBR3pDLEdBQUssSUFBS0EsRUFBRyxDQUNwRCxJQUFJaWxGLEVBQVExK0UsS0FBSysrRSxXQUFXdGxGLEdBQzVCLEdBQUlpbEYsRUFBTUcsYUFBZUEsRUFHdkIsT0FGQTcrRSxLQUFLcWdGLFNBQVMzQixFQUFNTyxXQUFZUCxFQUFNSSxVQUN0Q0UsRUFBY04sR0FDUDFCLElBS2IsTUFBUyxTQUFTMkIsR0FDaEIsSUFBSyxJQUFJbGxGLEVBQUl1RyxLQUFLKytFLFdBQVc3aUYsT0FBUyxFQUFHekMsR0FBSyxJQUFLQSxFQUFHLENBQ3BELElBQUlpbEYsRUFBUTErRSxLQUFLKytFLFdBQVd0bEYsR0FDNUIsR0FBSWlsRixFQUFNQyxTQUFXQSxFQUFRLENBQzNCLElBQUl2QixFQUFTc0IsRUFBTU8sV0FDbkIsR0FBb0IsVUFBaEI3QixFQUFPOTlFLEtBQWtCLENBQzNCLElBQUlpaEYsRUFBU25ELEVBQU96NkUsSUFDcEJxOEUsRUFBY04sR0FFaEIsT0FBTzZCLEdBTVgsTUFBTSxJQUFJcGlGLE1BQU0sMEJBR2xCcWlGLGNBQWUsU0FBU3RCLEVBQVVaLEVBQVlDLEdBYTVDLE9BWkF2K0UsS0FBSzY4RSxTQUFXLENBQ2RocEMsU0FBVWdxQyxFQUFPcUIsR0FDakJaLFdBQVlBLEVBQ1pDLFFBQVNBLEdBR1MsU0FBaEJ2K0UsS0FBS3V5QixTQUdQdnlCLEtBQUsyQyxJQUFNdkUsR0FHTjQrRSxJQVFKempGLEVBdnJCSyxDQThyQmlCQyxFQUFPRCxTQUd0QyxJQUNFa25GLG1CQUFxQmhGLEVBQ3JCLE1BQU9pRixHQVVQNzdELFNBQVMsSUFBSyx5QkFBZEEsQ0FBd0M0MkQsSyxnQkNwdEIxQ2ppRixFQUFPRCxRQUFVLEVBQVEsTSw2QkNFekIsSUFBSTAzQixFQUFRLEVBQVEsSUFDaEJoMkIsRUFBTyxFQUFRLElBQ2YwbEYsRUFBUSxFQUFRLEtBQ2hCQyxFQUFjLEVBQVEsSUFTMUIsU0FBU0MsRUFBZUMsR0FDdEIsSUFBSXhzQyxFQUFVLElBQUlxc0MsRUFBTUcsR0FDcEJsbEYsRUFBV1gsRUFBSzBsRixFQUFNdGxGLFVBQVUyM0IsUUFBU3NoQixHQVE3QyxPQUxBcmpCLEVBQU1yckIsT0FBT2hLLEVBQVUra0YsRUFBTXRsRixVQUFXaTVDLEdBR3hDcmpCLEVBQU1yckIsT0FBT2hLLEVBQVUwNEMsR0FFaEIxNEMsRUFJVCxJQUFJbWxGLEVBQVFGLEVBdEJHLEVBQVEsS0F5QnZCRSxFQUFNSixNQUFRQSxFQUdkSSxFQUFNaG1GLE9BQVMsU0FBZ0JpbUYsR0FDN0IsT0FBT0gsRUFBZUQsRUFBWUcsRUFBTWp2RCxTQUFVa3ZELEtBSXBERCxFQUFNanNELE9BQVMsRUFBUSxJQUN2QmlzRCxFQUFNRSxZQUFjLEVBQVEsS0FDNUJGLEVBQU1HLFNBQVcsRUFBUSxJQUd6QkgsRUFBTWw1RSxJQUFNLFNBQWFzNUUsR0FDdkIsT0FBT2gxRSxRQUFRdEUsSUFBSXM1RSxJQUVyQkosRUFBTUssT0FBUyxFQUFRLEtBRXZCNW5GLEVBQU9ELFFBQVV3bkYsRUFHakJ2bkYsRUFBT0QsUUFBUW9yQixRQUFVbzhELEc7Ozs7Ozs7QUM3Q3pCdm5GLEVBQU9ELFFBQVUsU0FBbUJrQyxHQUNsQyxPQUFjLE1BQVBBLEdBQWtDLE1BQW5CQSxFQUFJc0IsYUFDWSxtQkFBN0J0QixFQUFJc0IsWUFBWTZHLFVBQTJCbkksRUFBSXNCLFlBQVk2RyxTQUFTbkksSyw2QkNQL0UsSUFBSXcxQixFQUFRLEVBQVEsSUFDaEJ3QixFQUFXLEVBQVEsSUFDbkI0dUQsRUFBcUIsRUFBUSxLQUM3QkMsRUFBa0IsRUFBUSxLQUMxQlYsRUFBYyxFQUFRLElBTzFCLFNBQVNELEVBQU1LLEdBQ2JoaEYsS0FBSzh4QixTQUFXa3ZELEVBQ2hCaGhGLEtBQUt1aEYsYUFBZSxDQUNsQnZ1RCxRQUFTLElBQUlxdUQsRUFDYjV0RCxTQUFVLElBQUk0dEQsR0FTbEJWLEVBQU10bEYsVUFBVTIzQixRQUFVLFNBQWlCSCxHQUduQixpQkFBWEEsR0FDVEEsRUFBUzMwQixVQUFVLElBQU0sSUFDbEJnekIsSUFBTWh6QixVQUFVLEdBRXZCMjBCLEVBQVNBLEdBQVUsSUFHckJBLEVBQVMrdEQsRUFBWTVnRixLQUFLOHhCLFNBQVVlLElBQzdCTixPQUFTTSxFQUFPTixPQUFTTSxFQUFPTixPQUFPbGEsY0FBZ0IsTUFHOUQsSUFBSWpWLEVBQVEsQ0FBQ2srRSxPQUFpQmxqRixHQUMxQm0yQixFQUFVcG9CLFFBQVFOLFFBQVFnbkIsR0FVOUIsSUFSQTd5QixLQUFLdWhGLGFBQWF2dUQsUUFBUXJ5QixTQUFRLFNBQW9DNmdGLEdBQ3BFcCtFLEVBQU0wbUIsUUFBUTAzRCxFQUFZQyxVQUFXRCxFQUFZRSxhQUduRDFoRixLQUFLdWhGLGFBQWE5dEQsU0FBUzl5QixTQUFRLFNBQWtDNmdGLEdBQ25FcCtFLEVBQU1wRSxLQUFLd2lGLEVBQVlDLFVBQVdELEVBQVlFLGFBR3pDdCtFLEVBQU1sSCxRQUNYcTRCLEVBQVVBLEVBQVFub0IsS0FBS2hKLEVBQU15MUIsUUFBU3oxQixFQUFNeTFCLFNBRzlDLE9BQU90RSxHQUdUb3NELEVBQU10bEYsVUFBVXNtRixPQUFTLFNBQWdCOXVELEdBRXZDLE9BREFBLEVBQVMrdEQsRUFBWTVnRixLQUFLOHhCLFNBQVVlLEdBQzdCSixFQUFTSSxFQUFPM0IsSUFBSzJCLEVBQU8xQixPQUFRMEIsRUFBT3pCLGtCQUFrQnByQixRQUFRLE1BQU8sS0FJckZpckIsRUFBTXR3QixRQUFRLENBQUMsU0FBVSxNQUFPLE9BQVEsWUFBWSxTQUE2QjR4QixHQUUvRW91RCxFQUFNdGxGLFVBQVVrM0IsR0FBVSxTQUFTckIsRUFBSzJCLEdBQ3RDLE9BQU83eUIsS0FBS2d6QixRQUFRL0IsRUFBTXpyQixNQUFNcXRCLEdBQVUsR0FBSSxDQUM1Q04sT0FBUUEsRUFDUnJCLElBQUtBLFNBS1hELEVBQU10d0IsUUFBUSxDQUFDLE9BQVEsTUFBTyxVQUFVLFNBQStCNHhCLEdBRXJFb3VELEVBQU10bEYsVUFBVWszQixHQUFVLFNBQVNyQixFQUFLaHFCLEVBQU0yckIsR0FDNUMsT0FBTzd5QixLQUFLZ3pCLFFBQVEvQixFQUFNenJCLE1BQU1xdEIsR0FBVSxHQUFJLENBQzVDTixPQUFRQSxFQUNSckIsSUFBS0EsRUFDTGhxQixLQUFNQSxTQUtaMU4sRUFBT0QsUUFBVW9uRixHLDZCQ25GakIsSUFBSTF2RCxFQUFRLEVBQVEsSUFFcEIsU0FBU293RCxJQUNQcmhGLEtBQUs0aEYsU0FBVyxHQVdsQlAsRUFBbUJobUYsVUFBVXdtRixJQUFNLFNBQWFKLEVBQVdDLEdBS3pELE9BSkExaEYsS0FBSzRoRixTQUFTNWlGLEtBQUssQ0FDakJ5aUYsVUFBV0EsRUFDWEMsU0FBVUEsSUFFTDFoRixLQUFLNGhGLFNBQVMxbEYsT0FBUyxHQVFoQ21sRixFQUFtQmhtRixVQUFVeW1GLE1BQVEsU0FBZXI1RSxHQUM5Q3pJLEtBQUs0aEYsU0FBU241RSxLQUNoQnpJLEtBQUs0aEYsU0FBU241RSxHQUFNLE9BWXhCNDRFLEVBQW1CaG1GLFVBQVVzRixRQUFVLFNBQWlCc0QsR0FDdERndEIsRUFBTXR3QixRQUFRWCxLQUFLNGhGLFVBQVUsU0FBd0J2dUMsR0FDekMsT0FBTkEsR0FDRnB2QyxFQUFHb3ZDLE9BS1Q3NUMsRUFBT0QsUUFBVThuRixHLDZCQ2pEakIsSUFBSXB3RCxFQUFRLEVBQVEsSUFDaEI4d0QsRUFBZ0IsRUFBUSxLQUN4QmIsRUFBVyxFQUFRLElBQ25CcHZELEVBQVcsRUFBUSxJQUNuQmt3RCxFQUFnQixFQUFRLEtBQ3hCQyxFQUFjLEVBQVEsS0FLMUIsU0FBU0MsRUFBNkJydkQsR0FDaENBLEVBQU95QixhQUNUekIsRUFBT3lCLFlBQVk2dEQsbUJBVXZCM29GLEVBQU9ELFFBQVUsU0FBeUJzNUIsR0FrQ3hDLE9BakNBcXZELEVBQTZCcnZELEdBR3pCQSxFQUFPdXZELFVBQVlKLEVBQWNudkQsRUFBTzNCLE9BQzFDMkIsRUFBTzNCLElBQU0rd0QsRUFBWXB2RCxFQUFPdXZELFFBQVN2dkQsRUFBTzNCLE1BSWxEMkIsRUFBT2pCLFFBQVVpQixFQUFPakIsU0FBVyxHQUduQ2lCLEVBQU8zckIsS0FBTzY2RSxFQUNabHZELEVBQU8zckIsS0FDUDJyQixFQUFPakIsUUFDUGlCLEVBQU9kLGtCQUlUYyxFQUFPakIsUUFBVVgsRUFBTXpyQixNQUNyQnF0QixFQUFPakIsUUFBUVUsUUFBVSxHQUN6Qk8sRUFBT2pCLFFBQVFpQixFQUFPTixTQUFXLEdBQ2pDTSxFQUFPakIsU0FBVyxJQUdwQlgsRUFBTXR3QixRQUNKLENBQUMsU0FBVSxNQUFPLE9BQVEsT0FBUSxNQUFPLFFBQVMsV0FDbEQsU0FBMkI0eEIsVUFDbEJNLEVBQU9qQixRQUFRVyxPQUlaTSxFQUFPaEIsU0FBV0MsRUFBU0QsU0FFMUJnQixHQUFRem1CLE1BQUssU0FBNkJxbkIsR0FVdkQsT0FUQXl1RCxFQUE2QnJ2RCxHQUc3QlksRUFBU3ZzQixLQUFPNjZFLEVBQ2R0dUQsRUFBU3ZzQixLQUNUdXNCLEVBQVM3QixRQUNUaUIsRUFBT2IsbUJBR0Z5QixLQUNOLFNBQTRCeUYsR0FjN0IsT0FiS2dvRCxFQUFTaG9ELEtBQ1pncEQsRUFBNkJydkQsR0FHekJxRyxHQUFVQSxFQUFPekYsV0FDbkJ5RixFQUFPekYsU0FBU3ZzQixLQUFPNjZFLEVBQ3JCN29ELEVBQU96RixTQUFTdnNCLEtBQ2hCZ3lCLEVBQU96RixTQUFTN0IsUUFDaEJpQixFQUFPYixxQkFLTjdsQixRQUFRTCxPQUFPb3RCLFEsNkJDakYxQixJQUFJakksRUFBUSxFQUFRLElBVXBCejNCLEVBQU9ELFFBQVUsU0FBdUIyTixFQUFNMHFCLEVBQVN5d0QsR0FNckQsT0FKQXB4RCxFQUFNdHdCLFFBQVEwaEYsR0FBSyxTQUFtQnArRSxHQUNwQ2lELEVBQU9qRCxFQUFHaUQsRUFBTTBxQixNQUdYMXFCLEksNkJDaEJULElBQUkrcEIsRUFBUSxFQUFRLElBRXBCejNCLEVBQU9ELFFBQVUsU0FBNkJxNEIsRUFBUzB3RCxHQUNyRHJ4RCxFQUFNdHdCLFFBQVFpeEIsR0FBUyxTQUF1QmwzQixFQUFPVixHQUMvQ0EsSUFBU3NvRixHQUFrQnRvRixFQUFLdTFCLGdCQUFrQit5RCxFQUFlL3lELGdCQUNuRXFDLEVBQVEwd0QsR0FBa0I1bkYsU0FDbkJrM0IsRUFBUTUzQixTLDZCQ05yQixJQUFJNDRCLEVBQWMsRUFBUSxJQVMxQnA1QixFQUFPRCxRQUFVLFNBQWdCc1MsRUFBU0MsRUFBUTJuQixHQUNoRCxJQUFJckIsRUFBaUJxQixFQUFTWixPQUFPVCxnQkFDaENBLEdBQWtCQSxFQUFlcUIsRUFBU3BCLFFBQzdDeG1CLEVBQVE0bkIsR0FFUjNuQixFQUFPOG1CLEVBQ0wsbUNBQXFDYSxFQUFTcEIsT0FDOUNvQixFQUFTWixPQUNULEtBQ0FZLEVBQVNULFFBQ1RTLE0sNkJDVE5qNkIsRUFBT0QsUUFBVSxTQUFzQmdTLEVBQU9zbkIsRUFBUTFSLEVBQU02UixFQUFTUyxHQTRCbkUsT0EzQkFsb0IsRUFBTXNuQixPQUFTQSxFQUNYMVIsSUFDRjVWLEVBQU00VixLQUFPQSxHQUdmNVYsRUFBTXluQixRQUFVQSxFQUNoQnpuQixFQUFNa29CLFNBQVdBLEVBQ2pCbG9CLEVBQU1nM0UsY0FBZSxFQUVyQmgzRSxFQUFNZ1MsT0FBUyxXQUNiLE1BQU8sQ0FFTDlQLFFBQVN6TixLQUFLeU4sUUFDZHpULEtBQU1nRyxLQUFLaEcsS0FFWHl5QixZQUFhenNCLEtBQUt5c0IsWUFDbEJ3c0MsT0FBUWo1RCxLQUFLaTVELE9BRWIvYixTQUFVbDlDLEtBQUtrOUMsU0FDZkMsV0FBWW45QyxLQUFLbTlDLFdBQ2pCcWxDLGFBQWN4aUYsS0FBS3dpRixhQUNuQnRYLE1BQU9sckUsS0FBS2tyRSxNQUVacjRDLE9BQVE3eUIsS0FBSzZ5QixPQUNiMVIsS0FBTW5oQixLQUFLbWhCLE9BR1I1VixJLDZCQ3RDVCxJQUFJMGxCLEVBQVEsRUFBUSxJQUloQnd4RCxFQUFvQixDQUN0QixNQUFPLGdCQUFpQixpQkFBa0IsZUFBZ0IsT0FDMUQsVUFBVyxPQUFRLE9BQVEsb0JBQXFCLHNCQUNoRCxnQkFBaUIsV0FBWSxlQUFnQixzQkFDN0MsVUFBVyxjQUFlLGNBZ0I1QmpwRixFQUFPRCxRQUFVLFNBQXNCcTRCLEdBQ3JDLElBQ0k1MkIsRUFDQThJLEVBQ0FySyxFQUhBc2dCLEVBQVMsR0FLYixPQUFLNlgsR0FFTFgsRUFBTXR3QixRQUFRaXhCLEVBQVF2MEIsTUFBTSxPQUFPLFNBQWdCcWxGLEdBS2pELEdBSkFqcEYsRUFBSWlwRixFQUFLeGpGLFFBQVEsS0FDakJsRSxFQUFNaTJCLEVBQU1uckIsS0FBSzQ4RSxFQUFLcnlFLE9BQU8sRUFBRzVXLElBQUk0ZSxjQUNwQ3ZVLEVBQU1tdEIsRUFBTW5yQixLQUFLNDhFLEVBQUtyeUUsT0FBTzVXLEVBQUksSUFFN0J1QixFQUFLLENBQ1AsR0FBSStlLEVBQU8vZSxJQUFReW5GLEVBQWtCdmpGLFFBQVFsRSxJQUFRLEVBQ25ELE9BR0ErZSxFQUFPL2UsR0FERyxlQUFSQSxHQUNhK2UsRUFBTy9lLEdBQU8rZSxFQUFPL2UsR0FBTyxJQUFJbU0sT0FBTyxDQUFDckQsSUFFekNpVyxFQUFPL2UsR0FBTytlLEVBQU8vZSxHQUFPLEtBQU84SSxFQUFNQSxNQUt0RGlXLEdBbkJnQkEsSSw2QkM5QnpCLElBQUlrWCxFQUFRLEVBQVEsSUFFcEJ6M0IsRUFBT0QsUUFDTDAzQixFQUFNOXJCLHVCQUlKLFdBQ0UsSUFFSXc5RSxFQUZBQyxFQUFPLGtCQUFrQjcxRSxLQUFLM0gsVUFBVTRILFdBQ3hDNjFFLEVBQWlCdDlFLFNBQVMrRCxjQUFjLEtBUzVDLFNBQVN3NUUsRUFBVzV4RCxHQUNsQixJQUFJMGtDLEVBQU8xa0MsRUFXWCxPQVRJMHhELElBRUZDLEVBQWVwNUUsYUFBYSxPQUFRbXNELEdBQ3BDQSxFQUFPaXRCLEVBQWVqdEIsTUFHeEJpdEIsRUFBZXA1RSxhQUFhLE9BQVFtc0QsR0FHN0IsQ0FDTEEsS0FBTWl0QixFQUFlanRCLEtBQ3JCem9ELFNBQVUwMUUsRUFBZTExRSxTQUFXMDFFLEVBQWUxMUUsU0FBU25ILFFBQVEsS0FBTSxJQUFNLEdBQ2hGb3ZCLEtBQU15dEQsRUFBZXp0RCxLQUNyQjROLE9BQVE2L0MsRUFBZTcvQyxPQUFTNi9DLEVBQWU3L0MsT0FBT2g5QixRQUFRLE1BQU8sSUFBTSxHQUMzRXUxRSxLQUFNc0gsRUFBZXRILEtBQU9zSCxFQUFldEgsS0FBS3YxRSxRQUFRLEtBQU0sSUFBTSxHQUNwRW1sQixTQUFVMDNELEVBQWUxM0QsU0FDekJDLEtBQU15M0QsRUFBZXozRCxLQUNyQjIzRCxTQUFpRCxNQUF0Q0YsRUFBZUUsU0FBUzV5RSxPQUFPLEdBQ3hDMHlFLEVBQWVFLFNBQ2YsSUFBTUYsRUFBZUUsVUFZM0IsT0FSQUosRUFBWUcsRUFBV3g5RSxPQUFPdzBCLFNBQVM4N0IsTUFRaEMsU0FBeUJvdEIsR0FDOUIsSUFBSWpwRSxFQUFVa1gsRUFBTXhzQixTQUFTdStFLEdBQWVGLEVBQVdFLEdBQWNBLEVBQ3JFLE9BQVFqcEUsRUFBTzVNLFdBQWF3MUUsRUFBVXgxRSxVQUNsQzRNLEVBQU9xYixPQUFTdXRELEVBQVV2dEQsTUFoRGxDLEdBc0RTLFdBQ0wsT0FBTyxJLDZCQzlEZixJQUFJbkUsRUFBUSxFQUFRLElBRXBCejNCLEVBQU9ELFFBQ0wwM0IsRUFBTTlyQix1QkFJSyxDQUNMeVMsTUFBTyxTQUFlNWQsRUFBTVUsRUFBT3VvRixFQUFTLzNELEVBQU1nNEQsRUFBUTczRCxHQUN4RCxJQUFJODNELEVBQVMsR0FDYkEsRUFBT25rRixLQUFLaEYsRUFBTyxJQUFNK00sbUJBQW1Cck0sSUFFeEN1MkIsRUFBTXZzQixTQUFTdStFLElBQ2pCRSxFQUFPbmtGLEtBQUssV0FBYSxJQUFJdTVCLEtBQUswcUQsR0FBU0csZUFHekNueUQsRUFBTXhzQixTQUFTeW1CLElBQ2pCaTRELEVBQU9ua0YsS0FBSyxRQUFVa3NCLEdBR3BCK0YsRUFBTXhzQixTQUFTeStFLElBQ2pCQyxFQUFPbmtGLEtBQUssVUFBWWtrRixJQUdYLElBQVg3M0QsR0FDRjgzRCxFQUFPbmtGLEtBQUssVUFHZHVHLFNBQVM0OUUsT0FBU0EsRUFBTzdsRixLQUFLLE9BR2hDZ2MsS0FBTSxTQUFjdGYsR0FDbEIsSUFBSWdqQixFQUFRelgsU0FBUzQ5RSxPQUFPbm1FLE1BQU0sSUFBSW9KLE9BQU8sYUFBZXBzQixFQUFPLGNBQ25FLE9BQVFnakIsRUFBUStKLG1CQUFtQi9KLEVBQU0sSUFBTSxNQUdqRGhULE9BQVEsU0FBZ0JoUSxHQUN0QmdHLEtBQUs0WCxNQUFNNWQsRUFBTSxHQUFJdStCLEtBQUsrQyxNQUFRLFNBTy9CLENBQ0wxakIsTUFBTyxhQUNQMEIsS0FBTSxXQUFrQixPQUFPLE1BQy9CdFAsT0FBUSxlLDZCQ3pDaEJ4USxFQUFPRCxRQUFVLFNBQXVCMjNCLEdBSXRDLE1BQU8sZ0NBQWdDbmtCLEtBQUtta0IsSyw2QkNIOUMxM0IsRUFBT0QsUUFBVSxTQUFxQjZvRixFQUFTaUIsR0FDN0MsT0FBT0EsRUFDSGpCLEVBQVFwOEUsUUFBUSxPQUFRLElBQU0sSUFBTXE5RSxFQUFZcjlFLFFBQVEsT0FBUSxJQUNoRW84RSxJLDZCQ1ZOLElBQUl0dEQsRUFBUyxFQUFRLElBUXJCLFNBQVNtc0QsRUFBWXFDLEdBQ25CLEdBQXdCLG1CQUFiQSxFQUNULE1BQU0sSUFBSXhuRixVQUFVLGdDQUd0QixJQUFJeW5GLEVBQ0p2akYsS0FBS3UwQixRQUFVLElBQUlwb0IsU0FBUSxTQUF5Qk4sR0FDbEQwM0UsRUFBaUIxM0UsS0FHbkIsSUFBSTZqQixFQUFRMXZCLEtBQ1pzakYsR0FBUyxTQUFnQjcxRSxHQUNuQmlpQixFQUFNd0osU0FLVnhKLEVBQU13SixPQUFTLElBQUlwRSxFQUFPcm5CLEdBQzFCODFFLEVBQWU3ekQsRUFBTXdKLFlBT3pCK25ELEVBQVk1bEYsVUFBVThtRixpQkFBbUIsV0FDdkMsR0FBSW5pRixLQUFLazVCLE9BQ1AsTUFBTWw1QixLQUFLazVCLFFBUWYrbkQsRUFBWTcrRSxPQUFTLFdBQ25CLElBQUlveUIsRUFJSixNQUFPLENBQ0w5RSxNQUpVLElBQUl1eEQsR0FBWSxTQUFrQm5uRixHQUM1QzA2QixFQUFTMTZCLEtBSVQwNkIsT0FBUUEsSUFJWmg3QixFQUFPRCxRQUFVMG5GLEcsNkJDbENqQnpuRixFQUFPRCxRQUFVLFNBQWdCaVYsR0FDL0IsT0FBTyxTQUFjcEksR0FDbkIsT0FBT29JLEVBQVNoTixNQUFNLEtBQU00RSxNLDZCQ3RCaENqTSxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FDM0NtQixPQUFPLElBR1QsSUFBSXE2QixFQUFXNTZCLE9BQU9zMkIsUUFBVSxTQUFVejBCLEdBQVUsSUFBSyxJQUFJdkMsRUFBSSxFQUFHQSxFQUFJeUUsVUFBVWhDLE9BQVF6QyxJQUFLLENBQUUsSUFBSTJJLEVBQVNsRSxVQUFVekUsR0FBSSxJQUFLLElBQUl1QixLQUFPb0gsRUFBY2pJLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBS3dJLEVBQVFwSCxLQUFRZ0IsRUFBT2hCLEdBQU9vSCxFQUFPcEgsSUFBWSxPQUFPZ0IsR0FFdlB6QyxFQUFpQixRQW9CakIsU0FBOEJpcUYsRUFBU3ZnRixHQUNyQyxJQUFJdkQsRUFBT3hCLFVBQVVoQyxPQUFTLFFBQXNCa0MsSUFBakJGLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxHQUMzRXVsRixFQUF3Qi9qRixFQUFLZ2tGLG9CQUM3QkEsT0FBZ0R0bEYsSUFBMUJxbEYsRUFBc0NFLEVBQTZCRixFQUN6RkcsRUFBd0Jsa0YsRUFBS21rRixrQkFDN0JBLE9BQThDemxGLElBQTFCd2xGLEdBQTZDQSxFQUdyRSxRQUFxRCxJQUExQ0YsRUFBb0J6Z0YsRUFBTXJFLFlBQ25DLE1BQU0sSUFBSVQsTUFBTSxvVUFHbEIsSUFBSTJsRixPQUFrQixFQUNsQkMsT0FBa0IsRUFDbEJDLE9BQXVCLEVBQ3ZCQyxPQUF5QixFQUN6QkMsT0FBa0IsRUFHbEJDLEVBQXFCLFNBQTRCQyxHQUVuRCxPQURvQlYsRUFBb0J6Z0YsRUFBTXJFLFlBQ3pCcTJCLDRCQUE4Qm12RCxFQUFvQk4sT0FBa0IxbEYsSUFPM0YsR0FIQTBsRixFQUFrQkssSUFHZE4sRUFBbUIsQ0FDckIsSUFBSVEsRUFBb0IsV0FDdEIsSUFBSUMsRUFBa0JILEdBQW1CLEdBQ3JDRCxJQUFvQkksR0FBbUJSLElBQW9CUSxJQUsvRFAsR0FBa0IsRUFDbEJHLEVBQWtCSSxFQUNsQmQsRUFBUWUsYUFBYXh2RCxFQUFTLEdBQUl1dkQsRUFBaUIsQ0FDakRqbEYsT0FBUSxVQUVWMGtGLEdBQWtCLElBR3BCQyxFQUF1Qi9nRixFQUFNcEUsVUFBVXdsRixHQUN2Q0EsSUFJRixJQUFJRyxFQUF1QixTQUE4QjFxRCxHQUVuRGlxRCxJQUtKRyxFQUFrQnBxRCxHQUdiZ3FELElBRUhBLEVBQWtCaHFELEVBR2RxcUQsTUFNTmxoRixFQUFNN0QsU0FBUyxDQUNiRSxLQUFNdW9CLEVBQVNGLGdCQUNmeUIsUUFBUzBRLE1BR2JtcUQsRUFBeUJULEVBQVFpQixPQUFPRCxHQUdwQ2hCLEVBQVFrQixvQkFDVkYsRUFBcUJoQixFQUFRa0Isc0JBSS9CLE9BQU8zdkQsRUFBUyxHQUFJeXVELEVBQVMsQ0FFM0JpQixPQUFRLFNBQWdCM2xGLEdBRXRCLElBQUk2bEYsRUFBd0JSLEdBQW1CLEdBSTNDUyxHQUFlLEVBQ2ZaLEVBQXVCL2dGLEVBQU1wRSxXQUFVLFdBQ3pDLElBQUlxbEYsRUFBa0JDLEdBQW1CLEdBQ3JDRCxJQUFvQlMsSUFHeEJBLEVBQXdCVCxFQUNuQlUsR0FDSDlsRixFQUFTNmxGLE9BWWIsT0FMS25CLEVBQVFrQixvQkFDWDVsRixFQUFTNmxGLEdBSUosV0FDTEMsR0FBZSxFQUNmWixNQU1KamtGLFlBQWEsV0FDUDhqRixHQUNGRyxJQUVGQyxRQTdJTixJQUFJcDhELEVBQVcsRUFBUSxJQUVuQjg3RCxFQUE2QixTQUFvQzdpRixHQUNuRSxPQUFPQSxFQUFNK2pGLFUsNkJDWGYxcUYsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQzNDbUIsT0FBTyxJQUVUbkIsRUFBaUIsUUFXakIsU0FBMEJpcUYsR0FDeEIsT0FBTyxXQUNMLE9BQU8sU0FBVTFqRixHQUNmLE9BQU8sU0FBVVQsR0FDZixHQUFJQSxFQUFPQyxPQUFTd29CLEVBQVNMLG9CQUMzQixPQUFPM25CLEVBQUtULEdBR2QsSUFBSXlsRixFQUFrQnpsRixFQUFPK3BCLFFBQ3pCbUosRUFBU3V5RCxFQUFnQnZ5RCxPQUN6Qi9tQixFQUFPczVFLEVBQWdCdDVFLEtBRTNCZzRFLEVBQVFqeEQsR0FBUS93QixNQUFNZ2lGLEVBbkI5QixTQUE0QnA5RSxHQUFPLEdBQUkxRCxNQUFNbUIsUUFBUXVDLEdBQU0sQ0FBRSxJQUFLLElBQUkzTSxFQUFJLEVBQUdzckYsRUFBT3JpRixNQUFNMEQsRUFBSWxLLFFBQVN6QyxFQUFJMk0sRUFBSWxLLE9BQVF6QyxJQUFPc3JGLEVBQUt0ckYsR0FBSzJNLEVBQUkzTSxHQUFNLE9BQU9zckYsRUFBZSxPQUFPcmlGLE1BQU0wVSxLQUFLaFIsR0FtQm5KNCtFLENBQW1CeDVFLFFBckIxRCxJQUFJc2MsRUFBVyxFQUFRLEssZ0JDUHZCLElBQUl0aEIsRUFBVSxFQUFRLEtBR0MsaUJBRnZCQSxFQUFVQSxFQUFRM0wsV0FBYTJMLEVBQVFtZSxRQUFVbmUsS0FHL0NBLEVBQVUsQ0FBQyxDQUFDaE4sRUFBT0MsRUFBSStNLEVBQVMsTUFHbEMsSUFBSThCLEVBQVUsQ0FFZCxPQUFpQixPQUNqQixXQUFvQixHQUVQLEVBQVEsR0FBUixDQUEyRjlCLEVBQVM4QixHQUU3RzlCLEVBQVF3MEUsU0FDVnhoRixFQUFPRCxRQUFVaU4sRUFBUXcwRSxTLGlCQ2IzQnpoRixFQURrQyxFQUFRLEdBQ2hDMGhGLEVBQTRCLElBRTlCajhFLEtBQUssQ0FBQ3hGLEVBQU9DLEVBQUksd2JBQXliLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLHVGQUF1RixNQUFRLEdBQUcsU0FBVyxzTUFBc00sS0FBTyxjQUFjLGVBQWlCLENBQUMsaW9CQUV2MEJELEVBQU9ELFFBQVVBLEcsZ0JDRGpCLElBQUkwckYsRUFBVyxFQUFRLElBQ25CLzhELEVBQVEsRUFBUSxHQUFSLENBQWlCLHdCQU03QjF1QixFQUFPRCxRQVdQLFNBQWM0N0IsRUFBSzZxRCxHQUNqQixJQUFJdmtGLEVBQU0wNUIsRUFHVjZxRCxFQUFNQSxHQUE0QixvQkFBYmxtRCxVQUE0QkEsU0FDN0MsTUFBUTNFLElBQUtBLEVBQU02cUQsRUFBSTd5RSxTQUFXLEtBQU82eUUsRUFBSTVxRCxNQUc3QyxpQkFBb0JELElBQ2xCLE1BQVFBLEVBQUlobEIsT0FBTyxLQUVuQmdsQixFQURFLE1BQVFBLEVBQUlobEIsT0FBTyxHQUNmNnZFLEVBQUk3eUUsU0FBV2dvQixFQUVmNnFELEVBQUk1cUQsS0FBT0QsR0FJaEIsc0JBQXNCcG9CLEtBQUtvb0IsS0FDOUJqTixFQUFNLHVCQUF3QmlOLEdBRTVCQSxPQURFLElBQXVCNnFELEVBQ25CQSxFQUFJN3lFLFNBQVcsS0FBT2dvQixFQUV0QixXQUFhQSxHQUt2QmpOLEVBQU0sV0FBWWlOLEdBQ2xCMTVCLEVBQU13cEYsRUFBUzl2RCxJQUlaMTVCLEVBQUkydkIsT0FDSCxjQUFjcmUsS0FBS3RSLEVBQUkwUixVQUN6QjFSLEVBQUkydkIsS0FBTyxLQUNGLGVBQWVyZSxLQUFLdFIsRUFBSTBSLFlBQ2pDMVIsRUFBSTJ2QixLQUFPLFFBSWYzdkIsRUFBSXl2QixLQUFPenZCLEVBQUl5dkIsTUFBUSxJQUV2QixJQUNJa0ssR0FEa0MsSUFBM0IzNUIsRUFBSTI1QixLQUFLbDJCLFFBQVEsS0FDVixJQUFNekQsRUFBSTI1QixLQUFPLElBQU0zNUIsRUFBSTI1QixLQU83QyxPQUpBMzVCLEVBQUlnTixHQUFLaE4sRUFBSTBSLFNBQVcsTUFBUWlvQixFQUFPLElBQU0zNUIsRUFBSTJ2QixLQUVqRDN2QixFQUFJbTZELEtBQU9uNkQsRUFBSTBSLFNBQVcsTUFBUWlvQixHQUFRNHFELEdBQU9BLEVBQUk1MEQsT0FBUzN2QixFQUFJMnZCLEtBQU8sR0FBTSxJQUFNM3ZCLEVBQUkydkIsTUFFbEYzdkIsSSxnQkNnTVRqQyxFQUFPRCxRQW5RUCxTQUFla2MsR0FzQ2QsU0FBU3l2RSxFQUFZamdFLEdBQ3BCLElBQUlzMkQsRUFBTyxFQUVYLElBQUssSUFBSTloRixFQUFJLEVBQUdBLEVBQUl3ckIsRUFBVS9vQixPQUFRekMsSUFDckM4aEYsR0FBU0EsR0FBUSxHQUFLQSxFQUFRdDJELEVBQVVyVCxXQUFXblksR0FDbkQ4aEYsR0FBUSxFQUdULE9BQU80SixFQUFZMytELE9BQU92cEIsS0FBS21vRixJQUFJN0osR0FBUTRKLEVBQVkzK0QsT0FBT3RxQixRQVcvRCxTQUFTaXBGLEVBQVlsZ0UsR0FDcEIsSUFBSW9nRSxFQUVKLFNBQVNuOUQsS0FBUzFjLEdBRWpCLElBQUswYyxFQUFNbzlELFFBQ1YsT0FHRCxNQUFNOW9GLEVBQU8wckIsRUFHUHE5RCxFQUFPLzBFLE9BQU8sSUFBSStuQixNQUNsQmdJLEVBQUtnbEQsR0FBUUYsR0FBWUUsR0FDL0Ivb0YsRUFBSzJvQixLQUFPb2IsRUFDWi9qQyxFQUFLMCtCLEtBQU9tcUQsRUFDWjdvRixFQUFLK29GLEtBQU9BLEVBQ1pGLEVBQVdFLEVBRVgvNUUsRUFBSyxHQUFLMjVFLEVBQVlLLE9BQU9oNkUsRUFBSyxJQUVYLGlCQUFaQSxFQUFLLElBRWZBLEVBQUtzZSxRQUFRLE1BSWQsSUFBSTdxQixFQUFRLEVBQ1p1TSxFQUFLLEdBQUtBLEVBQUssR0FBR3hGLFFBQVEsZ0JBQWlCLENBQUNnWCxFQUFPM1IsS0FFbEQsR0FBYyxPQUFWMlIsRUFDSCxPQUFPQSxFQUVSL2QsSUFDQSxNQUFNd21GLEVBQVlOLEVBQVkxK0QsV0FBV3BiLEdBQ3pDLEdBQXlCLG1CQUFkbzZFLEVBQTBCLENBQ3BDLE1BQU0zaEYsRUFBTTBILEVBQUt2TSxHQUNqQitkLEVBQVF5b0UsRUFBVTdyRixLQUFLNEMsRUFBTXNILEdBRzdCMEgsRUFBS3JNLE9BQU9GLEVBQU8sR0FDbkJBLElBRUQsT0FBTytkLElBSVJtb0UsRUFBWXBnRSxXQUFXbnJCLEtBQUs0QyxFQUFNZ1AsSUFFcEJoUCxFQUFLc29CLEtBQU9xZ0UsRUFBWXJnRSxLQUNoQ3RqQixNQUFNaEYsRUFBTWdQLEdBbUJuQixPQWhCQTBjLEVBQU1qRCxVQUFZQSxFQUNsQmlELEVBQU1vOUQsUUFBVUgsRUFBWUcsUUFBUXJnRSxHQUNwQ2lELEVBQU1sRCxVQUFZbWdFLEVBQVluZ0UsWUFDOUJrRCxFQUFNOUMsTUFBUTgvRCxFQUFZamdFLEdBQzFCaUQsRUFBTW1DLFFBQVVBLEVBQ2hCbkMsRUFBTXRpQixPQUFTQSxFQUtpQixtQkFBckJ1L0UsRUFBWU8sTUFDdEJQLEVBQVlPLEtBQUt4OUQsR0FHbEJpOUQsRUFBWVEsVUFBVTNtRixLQUFLa3BCLEdBRXBCQSxFQUdSLFNBQVNtQyxJQUNSLE1BQU1wckIsRUFBUWttRixFQUFZUSxVQUFVem1GLFFBQVFjLE1BQzVDLE9BQWUsSUFBWGYsSUFDSGttRixFQUFZUSxVQUFVeG1GLE9BQU9GLEVBQU8sSUFDN0IsR0FLVCxTQUFTMkcsRUFBT3FmLEVBQVdzSixHQUMxQixNQUFNcTNELEVBQVdULEVBQVlubEYsS0FBS2lsQixnQkFBa0MsSUFBZHNKLEVBQTRCLElBQU1BLEdBQWF0SixHQUVyRyxPQURBMmdFLEVBQVM5Z0UsSUFBTTlrQixLQUFLOGtCLElBQ2I4Z0UsRUE2RlIsU0FBU0MsRUFBWUMsR0FDcEIsT0FBT0EsRUFBTzNvRixXQUNaQyxVQUFVLEVBQUcwb0YsRUFBTzNvRixXQUFXakIsT0FBUyxHQUN4QzhKLFFBQVEsVUFBVyxLQW1CdEIsT0EvUEFtL0UsRUFBWWo5RCxNQUFRaTlELEVBQ3BCQSxFQUFZeGdFLFFBQVV3Z0UsRUFDdEJBLEVBQVlLLE9Bb1BaLFNBQWdCMWhGLEdBQ2YsR0FBSUEsYUFBZTNGLE1BQ2xCLE9BQU8yRixFQUFJb25FLE9BQVNwbkUsRUFBSTJKLFFBRXpCLE9BQU8zSixHQXZQUnFoRixFQUFZWSxRQXdMWixXQUNDLE1BQU14Z0UsRUFBYSxJQUNmNC9ELEVBQVlhLE1BQU0zaUYsSUFBSXdpRixNQUN0QlYsRUFBWWMsTUFBTTVpRixJQUFJd2lGLEdBQWF4aUYsSUFBSTRoQixHQUFhLElBQU1BLElBQzVEM25CLEtBQUssS0FFUCxPQURBNm5GLEVBQVllLE9BQU8sSUFDWjNnRSxHQTdMUjQvRCxFQUFZZSxPQWtKWixTQUFnQjNnRSxHQU1mLElBQUk5ckIsRUFMSjByRixFQUFZNy9ELEtBQUtDLEdBRWpCNC9ELEVBQVlhLE1BQVEsR0FDcEJiLEVBQVljLE1BQVEsR0FHcEIsTUFBTTVvRixHQUErQixpQkFBZmtvQixFQUEwQkEsRUFBYSxJQUFJbG9CLE1BQU0sVUFDakVrVSxFQUFNbFUsRUFBTW5CLE9BRWxCLElBQUt6QyxFQUFJLEVBQUdBLEVBQUk4WCxFQUFLOVgsSUFDZjRELEVBQU01RCxLQU9XLE9BRnRCOHJCLEVBQWFsb0IsRUFBTTVELEdBQUd1TSxRQUFRLE1BQU8sUUFFdEIsR0FDZG0vRSxFQUFZYyxNQUFNam5GLEtBQUssSUFBSW9uQixPQUFPLElBQU1iLEVBQVdsVixPQUFPLEdBQUssTUFFL0Q4MEUsRUFBWWEsTUFBTWhuRixLQUFLLElBQUlvbkIsT0FBTyxJQUFNYixFQUFhLE9BSXZELElBQUs5ckIsRUFBSSxFQUFHQSxFQUFJMHJGLEVBQVlRLFVBQVV6cEYsT0FBUXpDLElBQUssQ0FDbEQsTUFBTW1DLEVBQVd1cEYsRUFBWVEsVUFBVWxzRixHQUN2Q21DLEVBQVMwcEYsUUFBVUgsRUFBWUcsUUFBUTFwRixFQUFTcXBCLGFBNUtsRGtnRSxFQUFZRyxRQXNNWixTQUFpQnRyRixHQUNoQixHQUE4QixNQUExQkEsRUFBS0EsRUFBS2tDLE9BQVMsR0FDdEIsT0FBTyxFQUdSLElBQUl6QyxFQUNBOFgsRUFFSixJQUFLOVgsRUFBSSxFQUFHOFgsRUFBTTR6RSxFQUFZYyxNQUFNL3BGLE9BQVF6QyxFQUFJOFgsRUFBSzlYLElBQ3BELEdBQUkwckYsRUFBWWMsTUFBTXhzRixHQUFHc1QsS0FBSy9TLEdBQzdCLE9BQU8sRUFJVCxJQUFLUCxFQUFJLEVBQUc4WCxFQUFNNHpFLEVBQVlhLE1BQU05cEYsT0FBUXpDLEVBQUk4WCxFQUFLOVgsSUFDcEQsR0FBSTByRixFQUFZYSxNQUFNdnNGLEdBQUdzVCxLQUFLL1MsR0FDN0IsT0FBTyxFQUlULE9BQU8sR0F6TlJtckYsRUFBWWpnRSxTQUFXLEVBQVEsS0FFL0IvcUIsT0FBT29HLEtBQUtrVixHQUFLOVUsUUFBUTNGLElBQ3hCbXFGLEVBQVlucUYsR0FBT3lhLEVBQUl6YSxLQU14Qm1xRixFQUFZUSxVQUFZLEdBTXhCUixFQUFZYSxNQUFRLEdBQ3BCYixFQUFZYyxNQUFRLEdBT3BCZCxFQUFZMStELFdBQWEsR0FrQnpCMCtELEVBQVlELFlBQWNBLEVBOE0xQkMsRUFBWWUsT0FBT2YsRUFBWXgvRCxRQUV4QncvRCxJLGNDbFFSLElBQUkzcEYsRUFBSSxJQUNKM0IsRUFBUSxHQUFKMkIsRUFDSjYzQyxFQUFRLEdBQUp4NUMsRUFDSkUsRUFBUSxHQUFKczVDLEVBQ0pJLEVBQVEsRUFBSjE1QyxFQUNKeWlCLEVBQVEsT0FBSnppQixFQXFKUixTQUFTb3NGLEVBQU81bEQsRUFBSTZsRCxFQUFPbHJGLEVBQUdsQixHQUM1QixJQUFJcXNGLEVBQVdELEdBQWEsSUFBSmxyRixFQUN4QixPQUFPK0IsS0FBS3FwRixNQUFNL2xELEVBQUtybEMsR0FBSyxJQUFNbEIsR0FBUXFzRixFQUFXLElBQU0sSUF2STdEN3NGLEVBQU9ELFFBQVUsU0FBU3VLLEVBQUt3RSxHQUM3QkEsRUFBVUEsR0FBVyxHQUNyQixJQUFJaEosU0FBY3dFLEVBQ2xCLEdBQWEsV0FBVHhFLEdBQXFCd0UsRUFBSTVILE9BQVMsRUFDcEMsT0FrQkosU0FBZTZKLEdBRWIsSUFEQUEsRUFBTTVGLE9BQU80RixJQUNMN0osT0FBUyxJQUNmLE9BRUYsSUFBSThnQixFQUFRLG1JQUFtSXdSLEtBQzdJem9CLEdBRUYsSUFBS2lYLEVBQ0gsT0FFRixJQUFJOWhCLEVBQUlxckYsV0FBV3ZwRSxFQUFNLElBRXpCLFFBRFlBLEVBQU0sSUFBTSxNQUFNM0UsZUFFNUIsSUFBSyxRQUNMLElBQUssT0FDTCxJQUFLLE1BQ0wsSUFBSyxLQUNMLElBQUssSUFDSCxPQUFPbmQsRUFBSXNoQixFQUNiLElBQUssUUFDTCxJQUFLLE9BQ0wsSUFBSyxJQUNILE9BQU90aEIsRUFBSXU0QyxFQUNiLElBQUssT0FDTCxJQUFLLE1BQ0wsSUFBSyxJQUNILE9BQU92NEMsRUFBSW5CLEVBQ2IsSUFBSyxRQUNMLElBQUssT0FDTCxJQUFLLE1BQ0wsSUFBSyxLQUNMLElBQUssSUFDSCxPQUFPbUIsRUFBSW00QyxFQUNiLElBQUssVUFDTCxJQUFLLFNBQ0wsSUFBSyxPQUNMLElBQUssTUFDTCxJQUFLLElBQ0gsT0FBT240QyxFQUFJckIsRUFDYixJQUFLLFVBQ0wsSUFBSyxTQUNMLElBQUssT0FDTCxJQUFLLE1BQ0wsSUFBSyxJQUNILE9BQU9xQixFQUFJTSxFQUNiLElBQUssZUFDTCxJQUFLLGNBQ0wsSUFBSyxRQUNMLElBQUssT0FDTCxJQUFLLEtBQ0gsT0FBT04sRUFDVCxRQUNFLFFBdkVLK3VCLENBQU1ubUIsR0FDUixHQUFhLFdBQVR4RSxHQUFxQmdlLFNBQVN4WixHQUN2QyxPQUFPd0UsRUFBUWsrRSxLQTBHbkIsU0FBaUJqbUQsR0FDZixJQUFJNmxELEVBQVFucEYsS0FBS21vRixJQUFJN2tELEdBQ3JCLEdBQUk2bEQsR0FBU3JzRixFQUNYLE9BQU9vc0YsRUFBTzVsRCxFQUFJNmxELEVBQU9yc0YsRUFBRyxPQUU5QixHQUFJcXNGLEdBQVMveUMsRUFDWCxPQUFPOHlDLEVBQU81bEQsRUFBSTZsRCxFQUFPL3lDLEVBQUcsUUFFOUIsR0FBSSt5QyxHQUFTdnNGLEVBQ1gsT0FBT3NzRixFQUFPNWxELEVBQUk2bEQsRUFBT3ZzRixFQUFHLFVBRTlCLEdBQUl1c0YsR0FBUzVxRixFQUNYLE9BQU8ycUYsRUFBTzVsRCxFQUFJNmxELEVBQU81cUYsRUFBRyxVQUU5QixPQUFPK2tDLEVBQUssTUF4SFlrbUQsQ0FBUTNpRixHQWlGbEMsU0FBa0J5OEIsR0FDaEIsSUFBSTZsRCxFQUFRbnBGLEtBQUttb0YsSUFBSTdrRCxHQUNyQixHQUFJNmxELEdBQVNyc0YsRUFDWCxPQUFPa0QsS0FBS3FwRixNQUFNL2xELEVBQUt4bUMsR0FBSyxJQUU5QixHQUFJcXNGLEdBQVMveUMsRUFDWCxPQUFPcDJDLEtBQUtxcEYsTUFBTS9sRCxFQUFLOFMsR0FBSyxJQUU5QixHQUFJK3lDLEdBQVN2c0YsRUFDWCxPQUFPb0QsS0FBS3FwRixNQUFNL2xELEVBQUsxbUMsR0FBSyxJQUU5QixHQUFJdXNGLEdBQVM1cUYsRUFDWCxPQUFPeUIsS0FBS3FwRixNQUFNL2xELEVBQUsva0MsR0FBSyxJQUU5QixPQUFPK2tDLEVBQUssS0EvRjJCbW1ELENBQVM1aUYsR0FFaEQsTUFBTSxJQUFJM0YsTUFDUix3REFDRTZJLEtBQUtDLFVBQVVuRCxNLGlCQ25DckIsWUErSkEsU0FBUzZoQixJQUNQLElBQUlwckIsRUFDSixJQUNFQSxFQUFJaEIsRUFBUWlzQixRQUFRMEMsTUFDcEIsTUFBTXJuQixJQU9SLE9BSkt0RyxRQUF3QixJQUFaNFosR0FBMkIsUUFBU0EsSUFDbkQ1WixFQUFJNFosRUFBUXNCLElBQUlvUSxPQUdYdHJCLEdBcEtUaEIsRUFBVUMsRUFBT0QsUUFBVSxFQUFRLE1BQzNCdXJCLElBd0hSLFdBR0UsTUFBTyxpQkFBb0J0WSxTQUN0QkEsUUFBUXNZLEtBQ1JELFNBQVN4cEIsVUFBVW1HLE1BQU01SCxLQUFLNFMsUUFBUXNZLElBQUt0WSxRQUFTdE8sWUE1SDNEM0UsRUFBUXdyQixXQStFUixTQUFvQnZaLEdBQ2xCLElBQUl3WixFQUFZaGxCLEtBQUtnbEIsVUFTckIsR0FQQXhaLEVBQUssSUFBTXdaLEVBQVksS0FBTyxJQUMxQmhsQixLQUFLaWxCLFdBQ0pELEVBQVksTUFBUSxLQUNyQnhaLEVBQUssSUFDSndaLEVBQVksTUFBUSxLQUNyQixJQUFNenJCLEVBQVEyckIsU0FBU2xsQixLQUFLbWxCLE9BRTNCSCxFQUFXLE9BRWhCLElBQUlsckIsRUFBSSxVQUFZa0csS0FBS29sQixNQUN6QjVaLEVBQUtyTSxPQUFPLEVBQUcsRUFBR3JGLEVBQUcsa0JBS3JCLElBQUltRixFQUFRLEVBQ1JvbUIsRUFBUSxFQUNaN1osRUFBSyxHQUFHeEYsUUFBUSxlQUFlLFNBQVNnWCxHQUNsQyxPQUFTQSxJQUNiL2QsSUFDSSxPQUFTK2QsSUFHWHFJLEVBQVFwbUIsT0FJWnVNLEVBQUtyTSxPQUFPa21CLEVBQU8sRUFBR3ZyQixJQTVHeEJQLEVBQVErckIsS0FxSVIsU0FBY0MsR0FDWixJQUNNLE1BQVFBLEVBQ1Zoc0IsRUFBUWlzQixRQUFRRSxXQUFXLFNBRTNCbnNCLEVBQVFpc0IsUUFBUTBDLE1BQVEzQyxFQUUxQixNQUFNMWtCLE1BM0lWdEgsRUFBUW9zQixLQUFPQSxFQUNmcHNCLEVBQVF5ckIsVUFnQ1IsV0FJRSxHQUFzQixvQkFBWDFmLFFBQTBCQSxPQUFPNk8sU0FBbUMsYUFBeEI3TyxPQUFPNk8sUUFBUTdVLEtBQ3BFLE9BQU8sRUFJVCxHQUF5QixvQkFBZDhGLFdBQTZCQSxVQUFVNEgsV0FBYTVILFVBQVU0SCxVQUFVcUwsY0FBYzJFLE1BQU0seUJBQ3JHLE9BQU8sRUFLVCxNQUE0QixvQkFBYnpYLFVBQTRCQSxTQUFTd2dCLGlCQUFtQnhnQixTQUFTd2dCLGdCQUFnQjFjLE9BQVM5RCxTQUFTd2dCLGdCQUFnQjFjLE1BQU0yYyxrQkFFbkgsb0JBQVgxZ0IsUUFBMEJBLE9BQU9rSCxVQUFZbEgsT0FBT2tILFFBQVF5WixTQUFZM2dCLE9BQU9rSCxRQUFRMFosV0FBYTVnQixPQUFPa0gsUUFBUTJaLFFBR3JHLG9CQUFkL2dCLFdBQTZCQSxVQUFVNEgsV0FBYTVILFVBQVU0SCxVQUFVcUwsY0FBYzJFLE1BQU0sbUJBQXFCbEwsU0FBU3NVLE9BQU9DLEdBQUksS0FBTyxJQUU5SCxvQkFBZGpoQixXQUE2QkEsVUFBVTRILFdBQWE1SCxVQUFVNEgsVUFBVXFMLGNBQWMyRSxNQUFNLHVCQXJEeEd6akIsRUFBUWlzQixRQUFVLG9CQUFzQm1oRSxhQUN0QixJQUFzQkEsT0FBT25oRSxRQUMzQm1oRSxPQUFPbmhFLFFBQVFvaEUsTUFnTG5DLFdBQ0UsSUFDRSxPQUFPdGhGLE9BQU9naEIsYUFDZCxNQUFPemxCLEtBbExTMGxCLEdBTXBCaHRCLEVBQVFpdEIsT0FBUyxDQUNmLFVBQVcsVUFBVyxVQUFXLFVBQVcsVUFBVyxVQUFXLFVBQ2xFLFVBQVcsVUFBVyxVQUFXLFVBQVcsVUFBVyxVQUFXLFVBQ2xFLFVBQVcsVUFBVyxVQUFXLFVBQVcsVUFBVyxVQUFXLFVBQ2xFLFVBQVcsVUFBVyxVQUFXLFVBQVcsVUFBVyxVQUFXLFVBQ2xFLFVBQVcsVUFBVyxVQUFXLFVBQVcsVUFBVyxVQUFXLFVBQ2xFLFVBQVcsVUFBVyxVQUFXLFVBQVcsVUFBVyxVQUFXLFVBQ2xFLFVBQVcsVUFBVyxVQUFXLFVBQVcsVUFBVyxVQUFXLFVBQ2xFLFVBQVcsVUFBVyxVQUFXLFVBQVcsVUFBVyxVQUFXLFVBQ2xFLFVBQVcsVUFBVyxVQUFXLFVBQVcsVUFBVyxVQUFXLFVBQ2xFLFVBQVcsVUFBVyxVQUFXLFVBQVcsVUFBVyxVQUFXLFVBQ2xFLFVBQVcsVUFBVyxVQUFXLFVBQVcsVUFBVyxXQXdDekRqdEIsRUFBUWt0QixXQUFXeGQsRUFBSSxTQUFTeWQsR0FDOUIsSUFDRSxPQUFPMWYsS0FBS0MsVUFBVXlmLEdBQ3RCLE1BQU9yYSxHQUNQLE1BQU8sK0JBQWlDQSxFQUFJb0IsVUFxR2hEbFUsRUFBUTJzRixPQUFPdmdFLE8sa0NDcEhmLFNBQVN3L0QsRUFBWWxnRSxHQUVuQixJQUFJb2dFLEVBRUosU0FBU245RCxJQUVQLEdBQUtBLEVBQU1vOUQsUUFBWCxDQUVBLElBQUk5b0YsRUFBTzByQixFQUdQcTlELEdBQVEsSUFBSWh0RCxLQUNaZ0ksRUFBS2dsRCxHQUFRRixHQUFZRSxHQUM3Qi9vRixFQUFLMm9CLEtBQU9vYixFQUNaL2pDLEVBQUswK0IsS0FBT21xRCxFQUNaN29GLEVBQUsrb0YsS0FBT0EsRUFDWkYsRUFBV0UsRUFJWCxJQURBLElBQUkvNUUsRUFBTyxJQUFJOUksTUFBTXhFLFVBQVVoQyxRQUN0QnpDLEVBQUksRUFBR0EsRUFBSStSLEVBQUt0UCxPQUFRekMsSUFDL0IrUixFQUFLL1IsR0FBS3lFLFVBQVV6RSxHQUd0QitSLEVBQUssR0FBS2pTLEVBQVFpc0YsT0FBT2g2RSxFQUFLLElBRTFCLGlCQUFvQkEsRUFBSyxJQUUzQkEsRUFBS3NlLFFBQVEsTUFJZixJQUFJN3FCLEVBQVEsRUFDWnVNLEVBQUssR0FBS0EsRUFBSyxHQUFHeEYsUUFBUSxpQkFBaUIsU0FBU2dYLEVBQU8zUixHQUV6RCxHQUFjLE9BQVYyUixFQUFnQixPQUFPQSxFQUMzQi9kLElBQ0EsSUFBSXdtRixFQUFZbHNGLEVBQVFrdEIsV0FBV3BiLEdBQ25DLEdBQUksbUJBQXNCbzZFLEVBQVcsQ0FDbkMsSUFBSTNoRixFQUFNMEgsRUFBS3ZNLEdBQ2YrZCxFQUFReW9FLEVBQVU3ckYsS0FBSzRDLEVBQU1zSCxHQUc3QjBILEVBQUtyTSxPQUFPRixFQUFPLEdBQ25CQSxJQUVGLE9BQU8rZCxLQUlUempCLEVBQVF3ckIsV0FBV25yQixLQUFLNEMsRUFBTWdQLElBRWxCMGMsRUFBTXBELEtBQU92ckIsRUFBUXVyQixLQUFPdFksUUFBUXNZLElBQUk3cEIsS0FBS3VSLFVBQ25EaEwsTUFBTWhGLEVBQU1nUCxJQWdCcEIsT0FiQTBjLEVBQU1qRCxVQUFZQSxFQUNsQmlELEVBQU1vOUQsUUFBVS9yRixFQUFRK3JGLFFBQVFyZ0UsR0FDaENpRCxFQUFNbEQsVUFBWXpyQixFQUFReXJCLFlBQzFCa0QsRUFBTTlDLE1BOUVSLFNBQXFCSCxHQUNuQixJQUFjeHJCLEVBQVY4aEYsRUFBTyxFQUVYLElBQUs5aEYsS0FBS3dyQixFQUNSczJELEdBQVVBLEdBQVEsR0FBS0EsRUFBUXQyRCxFQUFVclQsV0FBV25ZLEdBQ3BEOGhGLEdBQVEsRUFHVixPQUFPaGlGLEVBQVFpdEIsT0FBT3ZwQixLQUFLbW9GLElBQUk3SixHQUFRaGlGLEVBQVFpdEIsT0FBT3RxQixRQXNFeENncEYsQ0FBWWpnRSxHQUMxQmlELEVBQU1tQyxRQUFVQSxFQUdaLG1CQUFzQjl3QixFQUFRbXNGLE1BQ2hDbnNGLEVBQVFtc0YsS0FBS3g5RCxHQUdmM3VCLEVBQVFvc0YsVUFBVTNtRixLQUFLa3BCLEdBRWhCQSxFQUdULFNBQVNtQyxJQUNQLElBQUlwckIsRUFBUTFGLEVBQVFvc0YsVUFBVXptRixRQUFRYyxNQUN0QyxPQUFlLElBQVhmLElBQ0YxRixFQUFRb3NGLFVBQVV4bUYsT0FBT0YsRUFBTyxJQUN6QixJQWpJWDFGLEVBQVVDLEVBQU9ELFFBQVU0ckYsRUFBWWo5RCxNQUFRaTlELEVBQXFCLFFBQUlBLEdBQ2hFSyxPQW9OUixTQUFnQjFoRixHQUNkLE9BQUlBLGFBQWUzRixNQUFjMkYsRUFBSW9uRSxPQUFTcG5FLEVBQUkySixRQUMzQzNKLEdBck5UdkssRUFBUXdzRixRQTZLUixXQUNFeHNGLEVBQVEyc0YsT0FBTyxLQTdLakIzc0YsRUFBUTJzRixPQTRJUixTQUFnQjNnRSxHQU1kLElBQUk5ckIsRUFMSkYsRUFBUStyQixLQUFLQyxHQUViaHNCLEVBQVF5c0YsTUFBUSxHQUNoQnpzRixFQUFRMHNGLE1BQVEsR0FHaEIsSUFBSTVvRixHQUErQixpQkFBZmtvQixFQUEwQkEsRUFBYSxJQUFJbG9CLE1BQU0sVUFDakVrVSxFQUFNbFUsRUFBTW5CLE9BRWhCLElBQUt6QyxFQUFJLEVBQUdBLEVBQUk4WCxFQUFLOVgsSUFDZDRELEVBQU01RCxLQUVXLE9BRHRCOHJCLEVBQWFsb0IsRUFBTTVELEdBQUd1TSxRQUFRLE1BQU8sUUFDdEIsR0FDYnpNLEVBQVEwc0YsTUFBTWpuRixLQUFLLElBQUlvbkIsT0FBTyxJQUFNYixFQUFXbFYsT0FBTyxHQUFLLE1BRTNEOVcsRUFBUXlzRixNQUFNaG5GLEtBQUssSUFBSW9uQixPQUFPLElBQU1iLEVBQWEsT0FJckQsSUFBSzlyQixFQUFJLEVBQUdBLEVBQUlGLEVBQVFvc0YsVUFBVXpwRixPQUFRekMsSUFBSyxDQUM3QyxJQUFJbUMsRUFBV3JDLEVBQVFvc0YsVUFBVWxzRixHQUNqQ21DLEVBQVMwcEYsUUFBVS9yRixFQUFRK3JGLFFBQVExcEYsRUFBU3FwQixhQWpLaEQxckIsRUFBUStyRixRQXVMUixTQUFpQnRyRixHQUNmLEdBQThCLE1BQTFCQSxFQUFLQSxFQUFLa0MsT0FBUyxHQUNyQixPQUFPLEVBRVQsSUFBSXpDLEVBQUc4WCxFQUNQLElBQUs5WCxFQUFJLEVBQUc4WCxFQUFNaFksRUFBUTBzRixNQUFNL3BGLE9BQVF6QyxFQUFJOFgsRUFBSzlYLElBQy9DLEdBQUlGLEVBQVEwc0YsTUFBTXhzRixHQUFHc1QsS0FBSy9TLEdBQ3hCLE9BQU8sRUFHWCxJQUFLUCxFQUFJLEVBQUc4WCxFQUFNaFksRUFBUXlzRixNQUFNOXBGLE9BQVF6QyxFQUFJOFgsRUFBSzlYLElBQy9DLEdBQUlGLEVBQVF5c0YsTUFBTXZzRixHQUFHc1QsS0FBSy9TLEdBQ3hCLE9BQU8sRUFHWCxPQUFPLEdBck1UVCxFQUFRMnJCLFNBQVcsRUFBUSxLQUszQjNyQixFQUFRb3NGLFVBQVksR0FNcEJwc0YsRUFBUXlzRixNQUFRLEdBQ2hCenNGLEVBQVEwc0YsTUFBUSxHQVFoQjFzRixFQUFRa3RCLFdBQWEsSSxjQzdCckIsSUFBSWpyQixFQUFJLElBQ0ozQixFQUFRLEdBQUoyQixFQUNKNjNDLEVBQVEsR0FBSng1QyxFQUNKRSxFQUFRLEdBQUpzNUMsRUFDSjcyQixFQUFRLE9BQUp6aUIsRUF1SVIsU0FBU29zRixFQUFPNWxELEVBQUlybEMsRUFBR2xCLEdBQ3JCLEtBQUl1bUMsRUFBS3JsQyxHQUdULE9BQUlxbEMsRUFBUyxJQUFKcmxDLEVBQ0ErQixLQUFLOGlCLE1BQU13Z0IsRUFBS3JsQyxHQUFLLElBQU1sQixFQUU3QmlELEtBQUtxd0UsS0FBSy9zQyxFQUFLcmxDLEdBQUssSUFBTWxCLEVBQU8sSUE5SDFDUixFQUFPRCxRQUFVLFNBQVN1SyxFQUFLd0UsR0FDN0JBLEVBQVVBLEdBQVcsR0FDckIsSUF5R2VpNEIsRUF6R1hqaEMsU0FBY3dFLEVBQ2xCLEdBQWEsV0FBVHhFLEdBQXFCd0UsRUFBSTVILE9BQVMsRUFDcEMsT0FrQkosU0FBZTZKLEdBRWIsSUFEQUEsRUFBTTVGLE9BQU80RixJQUNMN0osT0FBUyxJQUNmLE9BRUYsSUFBSThnQixFQUFRLHdIQUF3SHdSLEtBQ2xJem9CLEdBRUYsSUFBS2lYLEVBQ0gsT0FFRixJQUFJOWhCLEVBQUlxckYsV0FBV3ZwRSxFQUFNLElBRXpCLFFBRFlBLEVBQU0sSUFBTSxNQUFNM0UsZUFFNUIsSUFBSyxRQUNMLElBQUssT0FDTCxJQUFLLE1BQ0wsSUFBSyxLQUNMLElBQUssSUFDSCxPQUFPbmQsRUFBSXNoQixFQUNiLElBQUssT0FDTCxJQUFLLE1BQ0wsSUFBSyxJQUNILE9BQU90aEIsRUFBSW5CLEVBQ2IsSUFBSyxRQUNMLElBQUssT0FDTCxJQUFLLE1BQ0wsSUFBSyxLQUNMLElBQUssSUFDSCxPQUFPbUIsRUFBSW00QyxFQUNiLElBQUssVUFDTCxJQUFLLFNBQ0wsSUFBSyxPQUNMLElBQUssTUFDTCxJQUFLLElBQ0gsT0FBT240QyxFQUFJckIsRUFDYixJQUFLLFVBQ0wsSUFBSyxTQUNMLElBQUssT0FDTCxJQUFLLE1BQ0wsSUFBSyxJQUNILE9BQU9xQixFQUFJTSxFQUNiLElBQUssZUFDTCxJQUFLLGNBQ0wsSUFBSyxRQUNMLElBQUssT0FDTCxJQUFLLEtBQ0gsT0FBT04sRUFDVCxRQUNFLFFBbkVLK3VCLENBQU1ubUIsR0FDUixHQUFhLFdBQVR4RSxJQUFvQyxJQUFmMFosTUFBTWxWLEdBQ3BDLE9BQU93RSxFQUFRaytFLEtBc0dWTCxFQURRNWxELEVBckdpQno4QixFQXNHZC9KLEVBQUcsUUFDbkJvc0YsRUFBTzVsRCxFQUFJOFMsRUFBRyxTQUNkOHlDLEVBQU81bEQsRUFBSTFtQyxFQUFHLFdBQ2Rzc0YsRUFBTzVsRCxFQUFJL2tDLEVBQUcsV0FDZCtrQyxFQUFLLE1BN0JULFNBQWtCQSxHQUNoQixHQUFJQSxHQUFNeG1DLEVBQ1IsT0FBT2tELEtBQUtxcEYsTUFBTS9sRCxFQUFLeG1DLEdBQUssSUFFOUIsR0FBSXdtQyxHQUFNOFMsRUFDUixPQUFPcDJDLEtBQUtxcEYsTUFBTS9sRCxFQUFLOFMsR0FBSyxJQUU5QixHQUFJOVMsR0FBTTFtQyxFQUNSLE9BQU9vRCxLQUFLcXBGLE1BQU0vbEQsRUFBSzFtQyxHQUFLLElBRTlCLEdBQUkwbUMsR0FBTS9rQyxFQUNSLE9BQU95QixLQUFLcXBGLE1BQU0vbEQsRUFBSy9rQyxHQUFLLElBRTlCLE9BQU8ra0MsRUFBSyxLQTFGMkJtbUQsQ0FBUzVpRixHQUVoRCxNQUFNLElBQUkzRixNQUNSLHdEQUNFNkksS0FBS0MsVUFBVW5ELE0sZ0JDbkJyQixTQUFTcWtCLEVBQVExc0IsR0FDZixHQUFJQSxFQUFLLE9BV1gsU0FBZUEsR0FDYixJQUFLLElBQUlULEtBQU9tdEIsRUFBUTlzQixVQUN0QkksRUFBSVQsR0FBT210QixFQUFROXNCLFVBQVVMLEdBRS9CLE9BQU9TLEVBZlN3eEIsQ0FBTXh4QixHQVZ0QmpDLEVBQU9ELFFBQVU0dUIsRUFxQ25CQSxFQUFROXNCLFVBQVV3YSxHQUNsQnNTLEVBQVE5c0IsVUFBVTZ4QixpQkFBbUIsU0FBU0MsRUFBT2xwQixHQUluRCxPQUhBakUsS0FBS290QixXQUFhcHRCLEtBQUtvdEIsWUFBYyxJQUNwQ3B0QixLQUFLb3RCLFdBQVcsSUFBTUQsR0FBU250QixLQUFLb3RCLFdBQVcsSUFBTUQsSUFBVSxJQUM3RG51QixLQUFLaUYsR0FDRGpFLE1BYVRtb0IsRUFBUTlzQixVQUFVMGEsS0FBTyxTQUFTb1gsRUFBT2xwQixHQUN2QyxTQUFTNFIsSUFDUDdWLEtBQUtnVyxJQUFJbVgsRUFBT3RYLEdBQ2hCNVIsRUFBR3pDLE1BQU14QixLQUFNOUIsV0FLakIsT0FGQTJYLEVBQUc1UixHQUFLQSxFQUNSakUsS0FBSzZWLEdBQUdzWCxFQUFPdFgsR0FDUjdWLE1BYVRtb0IsRUFBUTlzQixVQUFVMmEsSUFDbEJtUyxFQUFROXNCLFVBQVU0YSxlQUNsQmtTLEVBQVE5c0IsVUFBVTZhLG1CQUNsQmlTLEVBQVE5c0IsVUFBVWd5QixvQkFBc0IsU0FBU0YsRUFBT2xwQixHQUl0RCxHQUhBakUsS0FBS290QixXQUFhcHRCLEtBQUtvdEIsWUFBYyxHQUdqQyxHQUFLbHZCLFVBQVVoQyxPQUVqQixPQURBOEQsS0FBS290QixXQUFhLEdBQ1hwdEIsS0FJVCxJQVVJa08sRUFWQW9mLEVBQVl0dEIsS0FBS290QixXQUFXLElBQU1ELEdBQ3RDLElBQUtHLEVBQVcsT0FBT3R0QixLQUd2QixHQUFJLEdBQUs5QixVQUFVaEMsT0FFakIsY0FETzhELEtBQUtvdEIsV0FBVyxJQUFNRCxHQUN0Qm50QixLQUtULElBQUssSUFBSXZHLEVBQUksRUFBR0EsRUFBSTZ6QixFQUFVcHhCLE9BQVF6QyxJQUVwQyxJQURBeVUsRUFBS29mLEVBQVU3ekIsTUFDSndLLEdBQU1pSyxFQUFHakssS0FBT0EsRUFBSSxDQUM3QnFwQixFQUFVbnVCLE9BQU8xRixFQUFHLEdBQ3BCLE1BR0osT0FBT3VHLE1BV1Rtb0IsRUFBUTlzQixVQUFVOGEsS0FBTyxTQUFTZ1gsR0FDaENudEIsS0FBS290QixXQUFhcHRCLEtBQUtvdEIsWUFBYyxHQUNyQyxJQUFJNWhCLEVBQU8sR0FBRzdNLE1BQU0vRSxLQUFLc0UsVUFBVyxHQUNoQ292QixFQUFZdHRCLEtBQUtvdEIsV0FBVyxJQUFNRCxHQUV0QyxHQUFJRyxFQUVGLElBQUssSUFBSTd6QixFQUFJLEVBQUc4WCxHQURoQitiLEVBQVlBLEVBQVUzdUIsTUFBTSxJQUNJekMsT0FBUXpDLEVBQUk4WCxJQUFPOVgsRUFDakQ2ekIsRUFBVTd6QixHQUFHK0gsTUFBTXhCLEtBQU13TCxHQUk3QixPQUFPeEwsTUFXVG1vQixFQUFROXNCLFVBQVVrRSxVQUFZLFNBQVM0dEIsR0FFckMsT0FEQW50QixLQUFLb3RCLFdBQWFwdEIsS0FBS290QixZQUFjLEdBQzlCcHRCLEtBQUtvdEIsV0FBVyxJQUFNRCxJQUFVLElBV3pDaEYsRUFBUTlzQixVQUFVa3lCLGFBQWUsU0FBU0osR0FDeEMsUUFBVW50QixLQUFLVCxVQUFVNHRCLEdBQU9qeEIsUyxnQkMzSmxDLElBQUkySCxFQUFVLEVBQVEsSUFDbEJ3a0IsRUFBUSxFQUFRLElBQ2hCbHJCLEVBQVdoRCxPQUFPa0IsVUFBVThCLFNBQzVCNDlCLEVBQWlDLG1CQUFUbHRCLE1BQXdDLG9CQUFUQSxNQUFnRCw2QkFBeEIxUSxFQUFTdkQsS0FBS2lVLE1BQzdGbXRCLEVBQWlDLG1CQUFUQyxNQUF3QyxvQkFBVEEsTUFBZ0QsNkJBQXhCOTlCLEVBQVN2RCxLQUFLcWhDLE1BWWpHMWhDLEVBQVFxd0Isa0JBQW9CLFNBQVN2YixHQUNuQyxJQUFJOEQsRUFBVSxHQUNWMDBFLEVBQWF4NEUsRUFBT25ILEtBQ3BCMmlCLEVBQU94YixFQUdYLE9BRkF3YixFQUFLM2lCLEtBS1AsU0FBUzQvRSxFQUFtQjUvRSxFQUFNaUwsR0FDaEMsSUFBS2pMLEVBQU0sT0FBT0EsRUFFbEIsR0FBSW1oQixFQUFNbmhCLEdBQU8sQ0FDZixJQUFJNi9FLEVBQWMsQ0FBRUMsY0FBYyxFQUFNM3JELElBQUtscEIsRUFBUWpXLFFBRXJELE9BREFpVyxFQUFRblQsS0FBS2tJLEdBQ042L0UsRUFDRixHQUFJbGpGLEVBQVFxRCxHQUFPLENBRXhCLElBREEsSUFBSSsvRSxFQUFVLElBQUl2a0YsTUFBTXdFLEVBQUtoTCxRQUNwQnpDLEVBQUksRUFBR0EsRUFBSXlOLEVBQUtoTCxPQUFRekMsSUFDL0J3dEYsRUFBUXh0RixHQUFLcXRGLEVBQW1CNS9FLEVBQUt6TixHQUFJMFksR0FFM0MsT0FBTzgwRSxFQUNGLEdBQW9CLGlCQUFULy9FLEtBQXVCQSxhQUFnQnF4QixNQUFPLENBQzFEMHVELEVBQVUsR0FDZCxJQUFLLElBQUlqc0YsS0FBT2tNLEVBQ2QrL0UsRUFBUWpzRixHQUFPOHJGLEVBQW1CNS9FLEVBQUtsTSxHQUFNbVgsR0FFL0MsT0FBTzgwRSxFQUVULE9BQU8vL0UsRUF6Qks0L0UsQ0FBbUJELEVBQVkxMEUsR0FDM0MwWCxFQUFLWCxZQUFjL1csRUFBUWpXLE9BQ3BCLENBQUNtUyxPQUFRd2IsRUFBTTFYLFFBQVNBLElBbUNqQzVZLEVBQVFpeEIsa0JBQW9CLFNBQVNuYyxFQUFROEQsR0FHM0MsT0FGQTlELEVBQU9uSCxLQUtULFNBQVNnZ0YsRUFBbUJoZ0YsRUFBTWlMLEdBQ2hDLElBQUtqTCxFQUFNLE9BQU9BLEVBRWxCLEdBQUlBLEdBQVFBLEVBQUs4L0UsYUFDZixPQUFPNzBFLEVBQVFqTCxFQUFLbTBCLEtBQ2YsR0FBSXgzQixFQUFRcUQsR0FDakIsSUFBSyxJQUFJek4sRUFBSSxFQUFHQSxFQUFJeU4sRUFBS2hMLE9BQVF6QyxJQUMvQnlOLEVBQUt6TixHQUFLeXRGLEVBQW1CaGdGLEVBQUt6TixHQUFJMFksUUFFbkMsR0FBb0IsaUJBQVRqTCxFQUNoQixJQUFLLElBQUlsTSxLQUFPa00sRUFDZEEsRUFBS2xNLEdBQU9rc0YsRUFBbUJoZ0YsRUFBS2xNLEdBQU1tWCxHQUk5QyxPQUFPakwsRUFwQk9nZ0YsQ0FBbUI3NEUsRUFBT25ILEtBQU1pTCxHQUM5QzlELEVBQU82YSxpQkFBYzlxQixFQUNkaVEsR0ErQlQ5VSxFQUFRa3dCLFlBQWMsU0FBU3ZpQixFQUFNc0gsR0FxQ25DLElBQUkyNEUsRUFBZSxFQUNmejlELEVBQWV4aUIsR0FyQ25CLFNBQVNrZ0YsRUFBYTNyRixFQUFLNHJGLEVBQVFDLEdBQ2pDLElBQUs3ckYsRUFBSyxPQUFPQSxFQUdqQixHQUFLcy9CLEdBQWtCdC9CLGFBQWVvUyxNQUNqQ210QixHQUFrQnYvQixhQUFldy9CLEtBQU8sQ0FDM0Nrc0QsSUFHQSxJQUFJSSxFQUFhLElBQUl2NEUsV0FDckJ1NEUsRUFBV3Q0RSxPQUFTLFdBQ2RxNEUsRUFDRkEsRUFBaUJELEdBQVVybkYsS0FBS3lGLE9BR2hDaWtCLEVBQWUxcEIsS0FBS3lGLFNBSWYwaEYsR0FDTDM0RSxFQUFTa2IsSUFJYjY5RCxFQUFXcjRFLGtCQUFrQnpULFFBQ3hCLEdBQUlvSSxFQUFRcEksR0FDakIsSUFBSyxJQUFJaEMsRUFBSSxFQUFHQSxFQUFJZ0MsRUFBSVMsT0FBUXpDLElBQzlCMnRGLEVBQWEzckYsRUFBSWhDLEdBQUlBLEVBQUdnQyxRQUVyQixHQUFtQixpQkFBUkEsSUFBcUI0c0IsRUFBTTVzQixHQUMzQyxJQUFLLElBQUlULEtBQU9TLEVBQ2QyckYsRUFBYTNyRixFQUFJVCxHQUFNQSxFQUFLUyxHQU9sQzJyRixDQUFhMTlELEdBQ1J5OUQsR0FDSDM0RSxFQUFTa2IsSyw2QkN4SWJud0IsRUFBUXNWLFdBdUNSLFNBQXFCYyxHQUNuQixJQUFJNjNFLEVBQU9DLEVBQVE5M0UsR0FDZiszRSxFQUFXRixFQUFLLEdBQ2hCRyxFQUFrQkgsRUFBSyxHQUMzQixPQUF1QyxHQUE5QkUsRUFBV0MsR0FBdUIsRUFBS0EsR0ExQ2xEcHVGLEVBQVFnb0IsWUFpRFIsU0FBc0I1UixHQUNwQixJQUFJaTRFLEVBY0FudUYsRUFiQSt0RixFQUFPQyxFQUFROTNFLEdBQ2YrM0UsRUFBV0YsRUFBSyxHQUNoQkcsRUFBa0JILEVBQUssR0FFdkJwaEYsRUFBTSxJQUFJeWhGLEVBVmhCLFNBQXNCbDRFLEVBQUsrM0UsRUFBVUMsR0FDbkMsT0FBdUMsR0FBOUJELEVBQVdDLEdBQXVCLEVBQUtBLEVBUzlCRyxDQUFZbjRFLEVBQUsrM0UsRUFBVUMsSUFFekNJLEVBQVUsRUFHVngyRSxFQUFNbzJFLEVBQWtCLEVBQ3hCRCxFQUFXLEVBQ1hBLEVBR0osSUFBS2p1RixFQUFJLEVBQUdBLEVBQUk4WCxFQUFLOVgsR0FBSyxFQUN4Qm11RixFQUNHSSxFQUFVcjRFLEVBQUlpQyxXQUFXblksS0FBTyxHQUNoQ3V1RixFQUFVcjRFLEVBQUlpQyxXQUFXblksRUFBSSxLQUFPLEdBQ3BDdXVGLEVBQVVyNEUsRUFBSWlDLFdBQVduWSxFQUFJLEtBQU8sRUFDckN1dUYsRUFBVXI0RSxFQUFJaUMsV0FBV25ZLEVBQUksSUFDL0IyTSxFQUFJMmhGLEtBQWNILEdBQU8sR0FBTSxJQUMvQnhoRixFQUFJMmhGLEtBQWNILEdBQU8sRUFBSyxJQUM5QnhoRixFQUFJMmhGLEtBQW1CLElBQU5ILEVBR0ssSUFBcEJELElBQ0ZDLEVBQ0dJLEVBQVVyNEUsRUFBSWlDLFdBQVduWSxLQUFPLEVBQ2hDdXVGLEVBQVVyNEUsRUFBSWlDLFdBQVduWSxFQUFJLEtBQU8sRUFDdkMyTSxFQUFJMmhGLEtBQW1CLElBQU5ILEdBR0ssSUFBcEJELElBQ0ZDLEVBQ0dJLEVBQVVyNEUsRUFBSWlDLFdBQVduWSxLQUFPLEdBQ2hDdXVGLEVBQVVyNEUsRUFBSWlDLFdBQVduWSxFQUFJLEtBQU8sRUFDcEN1dUYsRUFBVXI0RSxFQUFJaUMsV0FBV25ZLEVBQUksS0FBTyxFQUN2QzJNLEVBQUkyaEYsS0FBY0gsR0FBTyxFQUFLLElBQzlCeGhGLEVBQUkyaEYsS0FBbUIsSUFBTkgsR0FHbkIsT0FBT3hoRixHQTNGVDdNLEVBQVFxaEIsY0FrSFIsU0FBd0JxdEUsR0FRdEIsSUFQQSxJQUFJTCxFQUNBcjJFLEVBQU0wMkUsRUFBTS9yRixPQUNaZ3NGLEVBQWEzMkUsRUFBTSxFQUNuQnpJLEVBQVEsR0FJSHJQLEVBQUksRUFBRzB1RixFQUFPNTJFLEVBQU0yMkUsRUFBWXp1RixFQUFJMHVGLEVBQU0xdUYsR0FIOUIsTUFJbkJxUCxFQUFNOUosS0FBS29wRixFQUNUSCxFQUFPeHVGLEVBQUlBLEVBTE0sTUFLZ0IwdUYsRUFBT0EsRUFBUTF1RixFQUwvQixRQVVGLElBQWZ5dUYsR0FDRk4sRUFBTUssRUFBTTEyRSxFQUFNLEdBQ2xCekksRUFBTTlKLEtBQ0pxekMsRUFBT3UxQyxHQUFPLEdBQ2R2MUMsRUFBUXUxQyxHQUFPLEVBQUssSUFDcEIsT0FFc0IsSUFBZk0sSUFDVE4sR0FBT0ssRUFBTTEyRSxFQUFNLElBQU0sR0FBSzAyRSxFQUFNMTJFLEVBQU0sR0FDMUN6SSxFQUFNOUosS0FDSnF6QyxFQUFPdTFDLEdBQU8sSUFDZHYxQyxFQUFRdTFDLEdBQU8sRUFBSyxJQUNwQnYxQyxFQUFRdTFDLEdBQU8sRUFBSyxJQUNwQixNQUlKLE9BQU85K0UsRUFBTXhMLEtBQUssS0EzSXBCLElBTEEsSUFBSSswQyxFQUFTLEdBQ1QyMUMsRUFBWSxHQUNaSCxFQUE0QixvQkFBZmw1RSxXQUE2QkEsV0FBYWpNLE1BRXZEeWUsRUFBTyxtRUFDRjFuQixFQUFJLEVBQUc4WCxFQUFNNFAsRUFBS2psQixPQUFRekMsRUFBSThYLElBQU85WCxFQUM1QzQ0QyxFQUFPNTRDLEdBQUswbkIsRUFBSzFuQixHQUNqQnV1RixFQUFVN21FLEVBQUt2UCxXQUFXblksSUFBTUEsRUFRbEMsU0FBU2d1RixFQUFTOTNFLEdBQ2hCLElBQUk0QixFQUFNNUIsRUFBSXpULE9BRWQsR0FBSXFWLEVBQU0sRUFBSSxFQUNaLE1BQU0sSUFBSXBULE1BQU0sa0RBS2xCLElBQUl1cEYsRUFBVy8zRSxFQUFJelEsUUFBUSxLQU8zQixPQU5rQixJQUFkd29GLElBQWlCQSxFQUFXbjJFLEdBTXpCLENBQUNtMkUsRUFKY0EsSUFBYW4yRSxFQUMvQixFQUNBLEVBQUttMkUsRUFBVyxHQXNFdEIsU0FBU1UsRUFBYUgsRUFBTzF2RSxFQUFPdkYsR0FHbEMsSUFGQSxJQUFJNDBFLEVBUm9CdnNELEVBU3BCMEQsRUFBUyxHQUNKdGxDLEVBQUk4ZSxFQUFPOWUsRUFBSXVaLEVBQUt2WixHQUFLLEVBQ2hDbXVGLEdBQ0lLLEVBQU14dUYsSUFBTSxHQUFNLFdBQ2xCd3VGLEVBQU14dUYsRUFBSSxJQUFNLEVBQUssUUFDUCxJQUFmd3VGLEVBQU14dUYsRUFBSSxJQUNic2xDLEVBQU8vL0IsS0FkRnF6QyxHQURpQmhYLEVBZU11c0QsSUFkVCxHQUFLLElBQ3hCdjFDLEVBQU9oWCxHQUFPLEdBQUssSUFDbkJnWCxFQUFPaFgsR0FBTyxFQUFJLElBQ2xCZ1gsRUFBYSxHQUFOaFgsSUFhVCxPQUFPMEQsRUFBT3poQyxLQUFLLElBakdyQjBxRixFQUFVLElBQUlwMkUsV0FBVyxJQUFNLEdBQy9CbzJFLEVBQVUsSUFBSXAyRSxXQUFXLElBQU0sSSxjQ25CL0JyWSxFQUFRK2YsS0FBTyxTQUFVOVUsRUFBUW9WLEVBQVF5dUUsRUFBTUMsRUFBTUMsR0FDbkQsSUFBSTFuRixFQUFHaEgsRUFDSDJ1RixFQUFpQixFQUFURCxFQUFjRCxFQUFPLEVBQzdCRyxHQUFRLEdBQUtELEdBQVEsRUFDckJFLEVBQVFELEdBQVEsRUFDaEJFLEdBQVMsRUFDVGx2RixFQUFJNHVGLEVBQVFFLEVBQVMsRUFBSyxFQUMxQnh1RixFQUFJc3VGLEdBQVEsRUFBSSxFQUNoQjdzRixFQUFJZ0osRUFBT29WLEVBQVNuZ0IsR0FPeEIsSUFMQUEsR0FBS00sRUFFTDhHLEVBQUlyRixHQUFNLElBQU9tdEYsR0FBVSxFQUMzQm50RixLQUFRbXRGLEVBQ1JBLEdBQVNILEVBQ0ZHLEVBQVEsRUFBRzluRixFQUFTLElBQUpBLEVBQVcyRCxFQUFPb1YsRUFBU25nQixHQUFJQSxHQUFLTSxFQUFHNHVGLEdBQVMsR0FLdkUsSUFIQTl1RixFQUFJZ0gsR0FBTSxJQUFPOG5GLEdBQVUsRUFDM0I5bkYsS0FBUThuRixFQUNSQSxHQUFTTCxFQUNGSyxFQUFRLEVBQUc5dUYsRUFBUyxJQUFKQSxFQUFXMkssRUFBT29WLEVBQVNuZ0IsR0FBSUEsR0FBS00sRUFBRzR1RixHQUFTLEdBRXZFLEdBQVUsSUFBTjluRixFQUNGQSxFQUFJLEVBQUk2bkYsTUFDSCxJQUFJN25GLElBQU00bkYsRUFDZixPQUFPNXVGLEVBQUkrdUYsSUFBc0J2bkUsS0FBZDdsQixHQUFLLEVBQUksR0FFNUIzQixHQUFRb0QsS0FBS2dpQixJQUFJLEVBQUdxcEUsR0FDcEJ6bkYsR0FBUTZuRixFQUVWLE9BQVFsdEYsR0FBSyxFQUFJLEdBQUszQixFQUFJb0QsS0FBS2dpQixJQUFJLEVBQUdwZSxFQUFJeW5GLElBRzVDL3VGLEVBQVFxZSxNQUFRLFNBQVVwVCxFQUFROUosRUFBT2tmLEVBQVF5dUUsRUFBTUMsRUFBTUMsR0FDM0QsSUFBSTFuRixFQUFHaEgsRUFBR0MsRUFDTjB1RixFQUFpQixFQUFURCxFQUFjRCxFQUFPLEVBQzdCRyxHQUFRLEdBQUtELEdBQVEsRUFDckJFLEVBQVFELEdBQVEsRUFDaEJJLEVBQWUsS0FBVFAsRUFBY3JyRixLQUFLZ2lCLElBQUksR0FBSSxJQUFNaGlCLEtBQUtnaUIsSUFBSSxHQUFJLElBQU0sRUFDMUR4bEIsRUFBSTR1RixFQUFPLEVBQUtFLEVBQVMsRUFDekJ4dUYsRUFBSXN1RixFQUFPLEdBQUssRUFDaEI3c0YsRUFBSWQsRUFBUSxHQUFnQixJQUFWQSxHQUFlLEVBQUlBLEVBQVEsRUFBSyxFQUFJLEVBbUMxRCxJQWpDQUEsRUFBUXVDLEtBQUttb0YsSUFBSTFxRixHQUVic2UsTUFBTXRlLElBQVVBLElBQVUybUIsS0FDNUJ4bkIsRUFBSW1mLE1BQU10ZSxHQUFTLEVBQUksRUFDdkJtRyxFQUFJNG5GLElBRUo1bkYsRUFBSTVELEtBQUs4aUIsTUFBTTlpQixLQUFLNm5CLElBQUlwcUIsR0FBU3VDLEtBQUs2ckYsS0FDbENwdUYsR0FBU1osRUFBSW1ELEtBQUtnaUIsSUFBSSxHQUFJcGUsSUFBTSxJQUNsQ0EsSUFDQS9HLEdBQUssSUFHTFksR0FERW1HLEVBQUk2bkYsR0FBUyxFQUNORyxFQUFLL3VGLEVBRUwrdUYsRUFBSzVyRixLQUFLZ2lCLElBQUksRUFBRyxFQUFJeXBFLElBRXBCNXVGLEdBQUssSUFDZitHLElBQ0EvRyxHQUFLLEdBR0grRyxFQUFJNm5GLEdBQVNELEdBQ2Y1dUYsRUFBSSxFQUNKZ0gsRUFBSTRuRixHQUNLNW5GLEVBQUk2bkYsR0FBUyxHQUN0Qjd1RixHQUFNYSxFQUFRWixFQUFLLEdBQUttRCxLQUFLZ2lCLElBQUksRUFBR3FwRSxHQUNwQ3puRixHQUFRNm5GLElBRVI3dUYsRUFBSWEsRUFBUXVDLEtBQUtnaUIsSUFBSSxFQUFHeXBFLEVBQVEsR0FBS3pyRixLQUFLZ2lCLElBQUksRUFBR3FwRSxHQUNqRHpuRixFQUFJLElBSUR5bkYsR0FBUSxFQUFHOWpGLEVBQU9vVixFQUFTbmdCLEdBQVMsSUFBSkksRUFBVUosR0FBS00sRUFBR0YsR0FBSyxJQUFLeXVGLEdBQVEsR0FJM0UsSUFGQXpuRixFQUFLQSxHQUFLeW5GLEVBQVF6dUYsRUFDbEIydUYsR0FBUUYsRUFDREUsRUFBTyxFQUFHaGtGLEVBQU9vVixFQUFTbmdCLEdBQVMsSUFBSm9ILEVBQVVwSCxHQUFLTSxFQUFHOEcsR0FBSyxJQUFLMm5GLEdBQVEsR0FFMUVoa0YsRUFBT29WLEVBQVNuZ0IsRUFBSU0sSUFBVSxJQUFKeUIsSSxjQ2xGNUIsSUFBSTJCLEVBQVcsR0FBR0EsU0FFbEIzRCxFQUFPRCxRQUFVbUosTUFBTW1CLFNBQVcsU0FBVXVDLEdBQzFDLE1BQTZCLGtCQUF0QmpKLEVBQVN2RCxLQUFLd00sSyxnQkNGdkI1TSxFQUFPRCxRQUFVLEVBQVEsS0FRekJDLEVBQU9ELFFBQVF5eEIsT0FBUyxFQUFRLEssZ0JDTGhDLElBQUkrOUQsRUFBYSxFQUFRLElBQ3JCNWdFLEVBQVUsRUFBUSxJQUNsQkQsRUFBUSxFQUFRLEdBQVIsQ0FBaUIsMkJBQ3pCanBCLEVBQVEsRUFBUSxJQUNoQityQixFQUFTLEVBQVEsSUFDakJpNkQsRUFBVyxFQUFRLElBQ25CaHJELEVBQVUsRUFBUSxJQWdCdEIsU0FBU3ZFLEVBQVFQLEVBQUt6SyxHQUNwQixLQUFNMXFCLGdCQUFnQjAxQixHQUFTLE9BQU8sSUFBSUEsRUFBT1AsRUFBS3pLLEdBRXREQSxFQUFPQSxHQUFRLEdBRVh5SyxHQUFPLGlCQUFvQkEsSUFDN0J6SyxFQUFPeUssRUFDUEEsRUFBTSxNQUdKQSxHQUNGQSxFQUFNOHZELEVBQVM5dkQsR0FDZnpLLEVBQUtTLFNBQVdnSyxFQUFJQyxLQUNwQjFLLEVBQUtXLE9BQTBCLFVBQWpCOEosRUFBSWhvQixVQUF5QyxRQUFqQmdvQixFQUFJaG9CLFNBQzlDdWQsRUFBS1UsS0FBTytKLEVBQUkvSixLQUNaK0osRUFBSTdKLFFBQU9aLEVBQUtZLE1BQVE2SixFQUFJN0osUUFDdkJaLEVBQUswSyxPQUNkMUssRUFBS1MsU0FBVzg1RCxFQUFTdjZELEVBQUswSyxNQUFNQSxNQUd0Q3AxQixLQUFLcXJCLE9BQVMsTUFBUVgsRUFBS1csT0FBU1gsRUFBS1csT0FDaEIsb0JBQWJ5TyxVQUE0QixXQUFhQSxTQUFTM3NCLFNBRTFEdWQsRUFBS1MsV0FBYVQsRUFBS1UsT0FFekJWLEVBQUtVLEtBQU9wckIsS0FBS3FyQixPQUFTLE1BQVEsTUFHcENyckIsS0FBSzByQixNQUFRaEIsRUFBS2dCLFFBQVMsRUFDM0IxckIsS0FBS21yQixTQUFXVCxFQUFLUyxXQUNFLG9CQUFiMk8sU0FBMkJBLFNBQVMzTyxTQUFXLGFBQ3pEbnJCLEtBQUtvckIsS0FBT1YsRUFBS1UsT0FBNkIsb0JBQWIwTyxVQUE0QkEsU0FBUzFPLEtBQ2hFME8sU0FBUzFPLEtBQ1JwckIsS0FBS3FyQixPQUFTLElBQU0sSUFDM0JyckIsS0FBS3NyQixNQUFRWixFQUFLWSxPQUFTLEdBQ3ZCLGlCQUFvQnRyQixLQUFLc3JCLFFBQU90ckIsS0FBS3NyQixNQUFRMk8sRUFBUTNwQixPQUFPdFEsS0FBS3NyQixRQUNyRXRyQixLQUFLME4sU0FBVSxJQUFVZ2QsRUFBS2hkLFFBQzlCMU4sS0FBS2tyQixNQUFRUixFQUFLUSxNQUFRLGNBQWNsbEIsUUFBUSxNQUFPLElBQU0sSUFDN0RoRyxLQUFLZzZCLGFBQWV0UCxFQUFLc1AsV0FDekJoNkIsS0FBSzY1QixPQUFRLElBQVVuUCxFQUFLbVAsTUFDNUI3NUIsS0FBS3M2QixjQUFnQjVQLEVBQUs0UCxZQUMxQnQ2QixLQUFLNnFCLGFBQWVILEVBQUtHLFdBQ3pCN3FCLEtBQUs0ckIsaUJBQWtCLElBQVVsQixFQUFLa0IsZ0JBQ3RDNXJCLEtBQUt1ckIsZUFBaUJiLEVBQUthLGdCQUFrQixJQUM3Q3ZyQixLQUFLd3JCLGtCQUFvQmQsRUFBS2Msa0JBQzlCeHJCLEtBQUsrb0YsV0FBYXIrRCxFQUFLcStELFlBQWMsQ0FBQyxVQUFXLGFBQ2pEL29GLEtBQUtncEYsaUJBQW1CdCtELEVBQUtzK0Qsa0JBQW9CLEdBQ2pEaHBGLEtBQUt5ckIsV0FBYSxHQUNsQnpyQixLQUFLaXBGLFlBQWMsR0FDbkJqcEYsS0FBS2twRixjQUFnQixFQUNyQmxwRixLQUFLbXBGLFdBQWF6K0QsRUFBS3krRCxZQUFjLElBQ3JDbnBGLEtBQUtvcEYsZ0JBQWtCMStELEVBQUswK0Qsa0JBQW1CLEVBQy9DcHBGLEtBQUtpUSxXQUFhLEtBQ2xCalEsS0FBS3FwRixtQkFBcUIzK0QsRUFBSzIrRCxtQkFDL0JycEYsS0FBS3NwRixtQkFBb0IsSUFBVTUrRCxFQUFLNCtELG9CQUFxQjUrRCxFQUFLNCtELG1CQUFxQixLQUVuRixJQUFTdHBGLEtBQUtzcEYsb0JBQW1CdHBGLEtBQUtzcEYsa0JBQW9CLElBQzFEdHBGLEtBQUtzcEYsbUJBQXFCLE1BQVF0cEYsS0FBS3NwRixrQkFBa0JDLFlBQzNEdnBGLEtBQUtzcEYsa0JBQWtCQyxVQUFZLE1BSXJDdnBGLEtBQUs2ckIsSUFBTW5CLEVBQUttQixLQUFPLEtBQ3ZCN3JCLEtBQUtoRixJQUFNMHZCLEVBQUsxdkIsS0FBTyxLQUN2QmdGLEtBQUs4ckIsV0FBYXBCLEVBQUtvQixZQUFjLEtBQ3JDOXJCLEtBQUsrckIsS0FBT3JCLEVBQUtxQixNQUFRLEtBQ3pCL3JCLEtBQUtnc0IsR0FBS3RCLEVBQUtzQixJQUFNLEtBQ3JCaHNCLEtBQUtpc0IsUUFBVXZCLEVBQUt1QixTQUFXLEtBQy9CanNCLEtBQUtrc0Isd0JBQWlEOXRCLElBQTVCc3NCLEVBQUt3QixvQkFBMEN4QixFQUFLd0IsbUJBQzlFbHNCLEtBQUttc0IsWUFBY3pCLEVBQUt5QixVQUd4Qm5zQixLQUFLb3NCLGNBQXNDLG9CQUFkaG5CLFdBQTBELGlCQUF0QkEsVUFBVUMsU0FBNEQsZ0JBQXBDRCxVQUFVQyxRQUFRZ1QsZUFHakcsb0JBQVQ3YixNQUF3QndELEtBQUtvc0IsaUJBQ2xDMUIsRUFBSzJCLGNBQWdCbHlCLE9BQU9vRyxLQUFLbXFCLEVBQUsyQixjQUFjbndCLE9BQVMsSUFDL0Q4RCxLQUFLcXNCLGFBQWUzQixFQUFLMkIsY0FHdkIzQixFQUFLNEIsZUFDUHRzQixLQUFLc3NCLGFBQWU1QixFQUFLNEIsZUFLN0J0c0IsS0FBS3lJLEdBQUssS0FDVnpJLEtBQUt3cEYsU0FBVyxLQUNoQnhwRixLQUFLeXBGLGFBQWUsS0FDcEJ6cEYsS0FBSzBwRixZQUFjLEtBR25CMXBGLEtBQUsycEYsa0JBQW9CLEtBQ3pCM3BGLEtBQUs0cEYsaUJBQW1CLEtBRXhCNXBGLEtBQUtxTixPQXpHUDdULEVBQU9ELFFBQVVtOEIsRUE0R2pCQSxFQUFPbTBELHVCQUF3QixFQU0vQjFoRSxFQUFRdU4sRUFBT3I2QixXQVFmcTZCLEVBQU92b0IsU0FBVzZkLEVBQU83ZCxTQU96QnVvQixFQUFPQSxPQUFTQSxFQUNoQkEsRUFBT3pLLFVBQVksRUFBUSxJQUMzQnlLLEVBQU9xekQsV0FBYSxFQUFRLElBQzVCcnpELEVBQU8xSyxPQUFTLEVBQVEsSUFVeEIwSyxFQUFPcjZCLFVBQVV5dUYsZ0JBQWtCLFNBQVU5dkYsR0FDM0NrdUIsRUFBTSwwQkFBMkJsdUIsR0FDakMsSUFBSXN4QixFQWlETixTQUFnQjd2QixHQUNkLElBQUl2QixFQUFJLEdBQ1IsSUFBSyxJQUFJVCxLQUFLZ0MsRUFDUkEsRUFBSUgsZUFBZTdCLEtBQ3JCUyxFQUFFVCxHQUFLZ0MsRUFBSWhDLElBR2YsT0FBT1MsRUF4REs2dkYsQ0FBTS9wRixLQUFLc3JCLE9BR3ZCQSxFQUFNMCtELElBQU1oL0QsRUFBTzdkLFNBR25CbWUsRUFBTTIrRCxVQUFZandGLEVBR2xCLElBQUlzTyxFQUFVdEksS0FBS2dwRixpQkFBaUJodkYsSUFBUyxHQXFDN0MsT0FsQ0lnRyxLQUFLeUksS0FBSTZpQixFQUFNd1AsSUFBTTk2QixLQUFLeUksSUFFZCxJQUFJc2dGLEVBQVcvdUYsR0FBTSxDQUNuQ3N4QixNQUFPQSxFQUNQSyxPQUFRM3JCLEtBQ1IwckIsTUFBT3BqQixFQUFRb2pCLE9BQVMxckIsS0FBSzByQixNQUM3QlAsU0FBVTdpQixFQUFRNmlCLFVBQVluckIsS0FBS21yQixTQUNuQ0MsS0FBTTlpQixFQUFROGlCLE1BQVFwckIsS0FBS29yQixLQUMzQkMsT0FBUS9pQixFQUFRK2lCLFFBQVVyckIsS0FBS3FyQixPQUMvQkgsS0FBTTVpQixFQUFRNGlCLE1BQVFsckIsS0FBS2tyQixLQUMzQjhPLFdBQVkxeEIsRUFBUTB4QixZQUFjaDZCLEtBQUtnNkIsV0FDdkNILE1BQU92eEIsRUFBUXV4QixPQUFTNzVCLEtBQUs2NUIsTUFDN0JTLFlBQWFoeUIsRUFBUWd5QixhQUFldDZCLEtBQUtzNkIsWUFDekN6UCxXQUFZdmlCLEVBQVF1aUIsWUFBYzdxQixLQUFLNnFCLFdBQ3ZDZSxnQkFBaUJ0akIsRUFBUXNqQixpQkFBbUI1ckIsS0FBSzRyQixnQkFDakRKLGtCQUFtQmxqQixFQUFRa2pCLG1CQUFxQnhyQixLQUFLd3JCLGtCQUNyREQsZUFBZ0JqakIsRUFBUWlqQixnQkFBa0J2ckIsS0FBS3VyQixlQUMvQzQ5RCxXQUFZN2dGLEVBQVE2Z0YsWUFBY25wRixLQUFLbXBGLFdBQ3ZDdDlELElBQUt2akIsRUFBUXVqQixLQUFPN3JCLEtBQUs2ckIsSUFDekI3d0IsSUFBS3NOLEVBQVF0TixLQUFPZ0YsS0FBS2hGLElBQ3pCOHdCLFdBQVl4akIsRUFBUXdqQixZQUFjOXJCLEtBQUs4ckIsV0FDdkNDLEtBQU16akIsRUFBUXlqQixNQUFRL3JCLEtBQUsrckIsS0FDM0JDLEdBQUkxakIsRUFBUTBqQixJQUFNaHNCLEtBQUtnc0IsR0FDdkJDLFFBQVMzakIsRUFBUTJqQixTQUFXanNCLEtBQUtpc0IsUUFDakNDLG1CQUFvQjVqQixFQUFRNGpCLG9CQUFzQmxzQixLQUFLa3NCLG1CQUN2RG85RCxrQkFBbUJoaEYsRUFBUWdoRixtQkFBcUJ0cEYsS0FBS3NwRixrQkFDckRqOUQsYUFBYy9qQixFQUFRK2pCLGNBQWdCcnNCLEtBQUtxc0IsYUFDM0NGLFVBQVc3akIsRUFBUTZqQixXQUFhbnNCLEtBQUttc0IsVUFDckNHLGFBQWNoa0IsRUFBUWdrQixjQUFnQnRzQixLQUFLc3NCLGFBQzNDNDlELGVBQWdCNWhGLEVBQVE0aEYsZ0JBQWtCbHFGLEtBQUtrcUYsZUFDL0NDLFVBQVc3aEYsRUFBUTZoRixnQkFBYSxFQUNoQy85RCxjQUFlcHNCLEtBQUtvc0IsaUJBcUJ4QnNKLEVBQU9yNkIsVUFBVWdTLEtBQU8sV0FDdEIsSUFBSTQ4RSxFQUNKLEdBQUlqcUYsS0FBS29wRixpQkFBbUIxekQsRUFBT20wRCx3QkFBbUUsSUFBMUM3cEYsS0FBSytvRixXQUFXN3BGLFFBQVEsYUFDbEYrcUYsRUFBWSxnQkFDUCxJQUFJLElBQU1qcUYsS0FBSytvRixXQUFXN3NGLE9BQVEsQ0FFdkMsSUFBSU0sRUFBT3dELEtBSVgsWUFIQXdVLFlBQVcsV0FDVGhZLEVBQUsyWixLQUFLLFFBQVMsNkJBQ2xCLEdBR0g4ekUsRUFBWWpxRixLQUFLK29GLFdBQVcsR0FFOUIvb0YsS0FBS3lyQixXQUFhLFVBR2xCLElBQ0V3K0QsRUFBWWpxRixLQUFLOHBGLGdCQUFnQkcsR0FDakMsTUFBT3BwRixHQUdQLE9BRkFiLEtBQUsrb0YsV0FBV2x3RCxhQUNoQjc0QixLQUFLcU4sT0FJUDQ4RSxFQUFVNThFLE9BQ1ZyTixLQUFLb3FGLGFBQWFILElBU3BCdjBELEVBQU9yNkIsVUFBVSt1RixhQUFlLFNBQVVILEdBQ3hDL2hFLEVBQU0sdUJBQXdCK2hFLEVBQVVqd0YsTUFDeEMsSUFBSXdDLEVBQU93RCxLQUVQQSxLQUFLaXFGLFlBQ1AvaEUsRUFBTSxpQ0FBa0Nsb0IsS0FBS2lxRixVQUFVandGLE1BQ3ZEZ0csS0FBS2lxRixVQUFVL3pFLHNCQUlqQmxXLEtBQUtpcUYsVUFBWUEsRUFHakJBLEVBQ0NwMEUsR0FBRyxTQUFTLFdBQ1hyWixFQUFLNnRGLGFBRU54MEUsR0FBRyxVQUFVLFNBQVV4SCxHQUN0QjdSLEVBQUt3d0IsU0FBUzNlLE1BRWZ3SCxHQUFHLFNBQVMsU0FBVWhWLEdBQ3JCckUsRUFBSyt2QixRQUFRMXJCLE1BRWRnVixHQUFHLFNBQVMsV0FDWHJaLEVBQUtvd0IsUUFBUSx1QkFXakI4SSxFQUFPcjZCLFVBQVVpdkYsTUFBUSxTQUFVdHdGLEdBQ2pDa3VCLEVBQU0seUJBQTBCbHVCLEdBQ2hDLElBQUlpd0YsRUFBWWpxRixLQUFLOHBGLGdCQUFnQjl2RixFQUFNLENBQUVzd0YsTUFBTyxJQUNoREMsR0FBUyxFQUNUL3RGLEVBQU93RCxLQUlYLFNBQVN3cUYsSUFDUCxHQUFJaHVGLEVBQUs2c0YsbUJBQW9CLENBQzNCLElBQUlvQixHQUFzQnpxRixLQUFLc08sZ0JBQWtCOVIsRUFBS3l0RixVQUFVMzdFLGVBQ2hFaThFLEVBQVNBLEdBQVVFLEVBRWpCRixJQUVKcmlFLEVBQU0sOEJBQStCbHVCLEdBQ3JDaXdGLEVBQVVwOUQsS0FBSyxDQUFDLENBQUV2dEIsS0FBTSxPQUFRNEgsS0FBTSxXQUN0QytpRixFQUFVbDBFLEtBQUssVUFBVSxTQUFVNUgsR0FDakMsSUFBSW84RSxFQUNKLEdBQUksU0FBV3A4RSxFQUFJN08sTUFBUSxVQUFZNk8sRUFBSWpILEtBQU0sQ0FJL0MsR0FIQWdoQixFQUFNLDRCQUE2Qmx1QixHQUNuQ3dDLEVBQUtrdUYsV0FBWSxFQUNqQmx1RixFQUFLMlosS0FBSyxZQUFhOHpFLElBQ2xCQSxFQUFXLE9BQ2hCdjBELEVBQU9tMEQsc0JBQXdCLGNBQWdCSSxFQUFVandGLEtBRXpEa3VCLEVBQU0saUNBQWtDMXJCLEVBQUt5dEYsVUFBVWp3RixNQUN2RHdDLEVBQUt5dEYsVUFBVXp2RCxPQUFNLFdBQ2YrdkQsR0FDQSxXQUFhL3RGLEVBQUtpdkIsYUFDdEJ2RCxFQUFNLGlEQUVOa1EsSUFFQTU3QixFQUFLNHRGLGFBQWFILEdBQ2xCQSxFQUFVcDlELEtBQUssQ0FBQyxDQUFFdnRCLEtBQU0sYUFDeEI5QyxFQUFLMlosS0FBSyxVQUFXOHpFLEdBQ3JCQSxFQUFZLEtBQ1p6dEYsRUFBS2t1RixXQUFZLEVBQ2pCbHVGLEVBQUttdUYsZ0JBRUYsQ0FDTHppRSxFQUFNLDhCQUErQmx1QixHQUNyQyxJQUFJcVMsRUFBTSxJQUFJbE8sTUFBTSxlQUNwQmtPLEVBQUk0OUUsVUFBWUEsRUFBVWp3RixLQUMxQndDLEVBQUsyWixLQUFLLGVBQWdCOUosUUFLaEMsU0FBU3UrRSxJQUNITCxJQUdKQSxHQUFTLEVBRVRueUQsSUFFQTZ4RCxFQUFVMzhFLFFBQ1YyOEUsRUFBWSxNQUlkLFNBQVNuMkQsRUFBU3puQixHQUNoQixJQUFJZCxFQUFRLElBQUlwTixNQUFNLGdCQUFrQmtPLEdBQ3hDZCxFQUFNMCtFLFVBQVlBLEVBQVVqd0YsS0FFNUI0d0YsSUFFQTFpRSxFQUFNLG1EQUFvRGx1QixFQUFNcVMsR0FFaEU3UCxFQUFLMlosS0FBSyxlQUFnQjVLLEdBRzVCLFNBQVNzL0UsSUFDUC8yRCxFQUFRLG9CQUlWLFNBQVNtRixJQUNQbkYsRUFBUSxpQkFJVixTQUFTZzNELEVBQVc5NUQsR0FDZGk1RCxHQUFhajVELEVBQUdoM0IsT0FBU2l3RixFQUFVandGLE9BQ3JDa3VCLEVBQU0sNkJBQThCOEksRUFBR2gzQixLQUFNaXdGLEVBQVVqd0YsTUFDdkQ0d0YsS0FLSixTQUFTeHlELElBQ1A2eEQsRUFBVWgwRSxlQUFlLE9BQVF1MEUsR0FDakNQLEVBQVVoMEUsZUFBZSxRQUFTNmQsR0FDbENtMkQsRUFBVWgwRSxlQUFlLFFBQVM0MEUsR0FDbENydUYsRUFBS3laLGVBQWUsUUFBU2dqQixHQUM3Qno4QixFQUFLeVosZUFBZSxZQUFhNjBFLEdBM0ZuQ3AxRCxFQUFPbTBELHVCQUF3QixFQThGL0JJLEVBQVVsMEUsS0FBSyxPQUFReTBFLEdBQ3ZCUCxFQUFVbDBFLEtBQUssUUFBUytkLEdBQ3hCbTJELEVBQVVsMEUsS0FBSyxRQUFTODBFLEdBRXhCN3FGLEtBQUsrVixLQUFLLFFBQVNrakIsR0FDbkJqNUIsS0FBSytWLEtBQUssWUFBYSswRSxHQUV2QmIsRUFBVTU4RSxRQVNacW9CLEVBQU9yNkIsVUFBVXl4QixPQUFTLFdBU3hCLEdBUkE1RSxFQUFNLGVBQ05sb0IsS0FBS3lyQixXQUFhLE9BQ2xCaUssRUFBT20wRCxzQkFBd0IsY0FBZ0I3cEYsS0FBS2lxRixVQUFVandGLEtBQzlEZ0csS0FBS21XLEtBQUssUUFDVm5XLEtBQUsycUYsUUFJRCxTQUFXM3FGLEtBQUt5ckIsWUFBY3pyQixLQUFLME4sU0FBVzFOLEtBQUtpcUYsVUFBVXp2RCxNQUFPLENBQ3RFdFMsRUFBTSwyQkFDTixJQUFLLElBQUl6dUIsRUFBSSxFQUFHQyxFQUFJc0csS0FBS3dwRixTQUFTdHRGLE9BQVF6QyxFQUFJQyxFQUFHRCxJQUMvQ3VHLEtBQUtzcUYsTUFBTXRxRixLQUFLd3BGLFNBQVMvdkYsTUFXL0JpOEIsRUFBT3I2QixVQUFVMnhCLFNBQVcsU0FBVTNlLEdBQ3BDLEdBQUksWUFBY3JPLEtBQUt5ckIsWUFBYyxTQUFXenJCLEtBQUt5ckIsWUFDakQsWUFBY3pyQixLQUFLeXJCLFdBUXJCLE9BUEF2RCxFQUFNLHVDQUF3QzdaLEVBQU8vTyxLQUFNK08sRUFBT25ILE1BRWxFbEgsS0FBS21XLEtBQUssU0FBVTlILEdBR3BCck8sS0FBS21XLEtBQUssYUFFRjlILEVBQU8vTyxNQUNiLElBQUssT0FDSFUsS0FBSytxRixZQUFZL2pGLEtBQUtpakIsTUFBTTViLEVBQU9uSCxPQUNuQyxNQUVGLElBQUssT0FDSGxILEtBQUtnckYsVUFDTGhyRixLQUFLbVcsS0FBSyxRQUNWLE1BRUYsSUFBSyxRQUNILElBQUk5SixFQUFNLElBQUlsTyxNQUFNLGdCQUNwQmtPLEVBQUk4VSxLQUFPOVMsRUFBT25ILEtBQ2xCbEgsS0FBS3VzQixRQUFRbGdCLEdBQ2IsTUFFRixJQUFLLFVBQ0hyTSxLQUFLbVcsS0FBSyxPQUFROUgsRUFBT25ILE1BQ3pCbEgsS0FBS21XLEtBQUssVUFBVzlILEVBQU9uSCxXQUloQ2doQixFQUFNLDhDQUErQ2xvQixLQUFLeXJCLGFBVzlEaUssRUFBT3I2QixVQUFVMHZGLFlBQWMsU0FBVTdqRixHQUN2Q2xILEtBQUttVyxLQUFLLFlBQWFqUCxHQUN2QmxILEtBQUt5SSxHQUFLdkIsRUFBSzR6QixJQUNmOTZCLEtBQUtpcUYsVUFBVTMrRCxNQUFNd1AsSUFBTTV6QixFQUFLNHpCLElBQ2hDOTZCLEtBQUt3cEYsU0FBV3hwRixLQUFLaXJGLGVBQWUvakYsRUFBS3NpRixVQUN6Q3hwRixLQUFLeXBGLGFBQWV2aUYsRUFBS3VpRixhQUN6QnpwRixLQUFLMHBGLFlBQWN4aUYsRUFBS3dpRixZQUN4QjFwRixLQUFLOHNCLFNBRUQsV0FBYTlzQixLQUFLeXJCLGFBQ3RCenJCLEtBQUtnckYsVUFHTGhyRixLQUFLaVcsZUFBZSxZQUFhalcsS0FBS2tyRixhQUN0Q2xyRixLQUFLNlYsR0FBRyxZQUFhN1YsS0FBS2tyRixlQVM1QngxRCxFQUFPcjZCLFVBQVU2dkYsWUFBYyxTQUFVbDJFLEdBQ3ZDUCxhQUFhelUsS0FBSzRwRixrQkFDbEIsSUFBSXB0RixFQUFPd0QsS0FDWHhELEVBQUtvdEYsaUJBQW1CcDFFLFlBQVcsV0FDN0IsV0FBYWhZLEVBQUtpdkIsWUFDdEJqdkIsRUFBS293QixRQUFRLGtCQUNaNVgsR0FBWXhZLEVBQUtpdEYsYUFBZWp0RixFQUFLa3RGLGNBVTFDaDBELEVBQU9yNkIsVUFBVTJ2RixRQUFVLFdBQ3pCLElBQUl4dUYsRUFBT3dELEtBQ1h5VSxhQUFhalksRUFBS210RixtQkFDbEJudEYsRUFBS210RixrQkFBb0JuMUUsWUFBVyxXQUNsQzBULEVBQU0sbURBQW9EMXJCLEVBQUtrdEYsYUFDL0RsdEYsRUFBSytRLE9BQ0wvUSxFQUFLMHVGLFlBQVkxdUYsRUFBS2t0RixlQUNyQmx0RixFQUFLaXRGLGVBU1YvekQsRUFBT3I2QixVQUFVa1MsS0FBTyxXQUN0QixJQUFJL1EsRUFBT3dELEtBQ1hBLEtBQUttckYsV0FBVyxRQUFRLFdBQ3RCM3VGLEVBQUsyWixLQUFLLFlBVWR1ZixFQUFPcjZCLFVBQVVndkYsUUFBVSxXQUN6QnJxRixLQUFLaXBGLFlBQVk5cEYsT0FBTyxFQUFHYSxLQUFLa3BGLGVBS2hDbHBGLEtBQUtrcEYsY0FBZ0IsRUFFakIsSUFBTWxwRixLQUFLaXBGLFlBQVkvc0YsT0FDekI4RCxLQUFLbVcsS0FBSyxTQUVWblcsS0FBSzJxRixTQVVUajFELEVBQU9yNkIsVUFBVXN2RixNQUFRLFdBQ25CLFdBQWEzcUYsS0FBS3lyQixZQUFjenJCLEtBQUtpcUYsVUFBVXR1RixXQUNoRHFFLEtBQUswcUYsV0FBYTFxRixLQUFLaXBGLFlBQVkvc0YsU0FDcENnc0IsRUFBTSxnQ0FBaUNsb0IsS0FBS2lwRixZQUFZL3NGLFFBQ3hEOEQsS0FBS2lxRixVQUFVcDlELEtBQUs3c0IsS0FBS2lwRixhQUd6QmpwRixLQUFLa3BGLGNBQWdCbHBGLEtBQUtpcEYsWUFBWS9zRixPQUN0QzhELEtBQUttVyxLQUFLLFdBY2R1ZixFQUFPcjZCLFVBQVV1YyxNQUNqQjhkLEVBQU9yNkIsVUFBVXd4QixLQUFPLFNBQVUxZSxFQUFLN0YsRUFBU3JFLEdBRTlDLE9BREFqRSxLQUFLbXJGLFdBQVcsVUFBV2g5RSxFQUFLN0YsRUFBU3JFLEdBQ2xDakUsTUFhVDAxQixFQUFPcjZCLFVBQVU4dkYsV0FBYSxTQUFVN3JGLEVBQU00SCxFQUFNb0IsRUFBU3JFLEdBVzNELEdBVkksbUJBQXNCaUQsSUFDeEJqRCxFQUFLaUQsRUFDTEEsT0FBTzlJLEdBR0wsbUJBQXNCa0ssSUFDeEJyRSxFQUFLcUUsRUFDTEEsRUFBVSxNQUdSLFlBQWN0SSxLQUFLeXJCLFlBQWMsV0FBYXpyQixLQUFLeXJCLFdBQXZELEVBSUFuakIsRUFBVUEsR0FBVyxJQUNibzBCLFVBQVcsSUFBVXAwQixFQUFRbzBCLFNBRXJDLElBQUlydUIsRUFBUyxDQUNYL08sS0FBTUEsRUFDTjRILEtBQU1BLEVBQ05vQixRQUFTQSxHQUVYdEksS0FBS21XLEtBQUssZUFBZ0I5SCxHQUMxQnJPLEtBQUtpcEYsWUFBWWpxRixLQUFLcVAsR0FDbEJwSyxHQUFJakUsS0FBSytWLEtBQUssUUFBUzlSLEdBQzNCakUsS0FBSzJxRixVQVNQajFELEVBQU9yNkIsVUFBVWlTLE1BQVEsV0FDdkIsR0FBSSxZQUFjdE4sS0FBS3lyQixZQUFjLFNBQVd6ckIsS0FBS3lyQixXQUFZLENBQy9EenJCLEtBQUt5ckIsV0FBYSxVQUVsQixJQUFJanZCLEVBQU93RCxLQUVQQSxLQUFLaXBGLFlBQVkvc0YsT0FDbkI4RCxLQUFLK1YsS0FBSyxTQUFTLFdBQ2IvVixLQUFLMHFGLFVBQ1BVLElBRUE5OUUsT0FHS3ROLEtBQUswcUYsVUFDZFUsSUFFQTk5RSxJQUlKLFNBQVNBLElBQ1A5USxFQUFLb3dCLFFBQVEsZ0JBQ2IxRSxFQUFNLCtDQUNOMXJCLEVBQUt5dEYsVUFBVTM4RSxRQUdqQixTQUFTKzlFLElBQ1A3dUYsRUFBS3laLGVBQWUsVUFBV28xRSxHQUMvQjd1RixFQUFLeVosZUFBZSxlQUFnQm8xRSxHQUNwQy85RSxJQUdGLFNBQVM4OUUsSUFFUDV1RixFQUFLdVosS0FBSyxVQUFXczFFLEdBQ3JCN3VGLEVBQUt1WixLQUFLLGVBQWdCczFFLEdBRzVCLE9BQU9yckYsTUFTVDAxQixFQUFPcjZCLFVBQVVreEIsUUFBVSxTQUFVbGdCLEdBQ25DNmIsRUFBTSxrQkFBbUI3YixHQUN6QnFwQixFQUFPbTBELHVCQUF3QixFQUMvQjdwRixLQUFLbVcsS0FBSyxRQUFTOUosR0FDbkJyTSxLQUFLNHNCLFFBQVEsa0JBQW1CdmdCLElBU2xDcXBCLEVBQU9yNkIsVUFBVXV4QixRQUFVLFNBQVVzTSxFQUFRMU0sR0FDM0MsR0FBSSxZQUFjeHNCLEtBQUt5ckIsWUFBYyxTQUFXenJCLEtBQUt5ckIsWUFBYyxZQUFjenJCLEtBQUt5ckIsV0FBWSxDQUNoR3ZELEVBQU0saUNBQWtDZ1IsR0FJeEN6a0IsYUFBYXpVLEtBQUsycEYsbUJBQ2xCbDFFLGFBQWF6VSxLQUFLNHBGLGtCQUdsQjVwRixLQUFLaXFGLFVBQVUvekUsbUJBQW1CLFNBR2xDbFcsS0FBS2lxRixVQUFVMzhFLFFBR2Z0TixLQUFLaXFGLFVBQVUvekUscUJBR2ZsVyxLQUFLeXJCLFdBQWEsU0FHbEJ6ckIsS0FBS3lJLEdBQUssS0FHVnpJLEtBQUttVyxLQUFLLFFBQVMraUIsRUFBUTFNLEdBdEJoQnhzQixLQTBCTmlwRixZQUFjLEdBMUJSanBGLEtBMkJOa3BGLGNBQWdCLElBWXpCeHpELEVBQU9yNkIsVUFBVTR2RixlQUFpQixTQUFVekIsR0FFMUMsSUFEQSxJQUFJOEIsRUFBbUIsR0FDZDd4RixFQUFJLEVBQUd3UCxFQUFJdWdGLEVBQVN0dEYsT0FBUXpDLEVBQUl3UCxFQUFHeFAsS0FDckN3RixFQUFNZSxLQUFLK29GLFdBQVlTLEVBQVMvdkYsS0FBSzZ4RixFQUFpQnRzRixLQUFLd3FGLEVBQVMvdkYsSUFFM0UsT0FBTzZ4RixJLGNDanVCVCxJQUNFOXhGLEVBQU9ELFFBQW9DLG9CQUFuQnV4QixnQkFDdEIsb0JBQXFCLElBQUlBLGVBQzNCLE1BQU96ZSxHQUdQN1MsRUFBT0QsU0FBVSxJLGdCQ1RuQixJQUFJdXhCLEVBQWlCLEVBQVEsSUFDekJzUCxFQUFVLEVBQVEsSUFDbEJqUyxFQUFVLEVBQVEsSUFDbEIrUixFQUFVLEVBQVEsSUFDbEJoUyxFQUFRLEVBQVEsR0FBUixDQUFpQixnQ0FhN0IsU0FBU3FqRSxLQVNULFNBQVNoeUQsRUFBSzdPLEdBS1osR0FKQTBQLEVBQVF4Z0MsS0FBS29HLEtBQU0wcUIsR0FDbkIxcUIsS0FBS2txRixlQUFpQngvRCxFQUFLdy9ELGVBQzNCbHFGLEtBQUtxc0IsYUFBZTNCLEVBQUsyQixhQUVELG9CQUFieU4sU0FBMEIsQ0FDbkMsSUFBSUMsRUFBUSxXQUFhRCxTQUFTM3NCLFNBQzlCaWUsRUFBTzBPLFNBQVMxTyxLQUdmQSxJQUNIQSxFQUFPMk8sRUFBUSxJQUFNLElBR3ZCLzVCLEtBQUsyNUIsR0FBMEIsb0JBQWJHLFVBQTRCcFAsRUFBS1MsV0FBYTJPLFNBQVMzTyxVQUN2RUMsSUFBU1YsRUFBS1UsS0FDaEJwckIsS0FBSzQ1QixHQUFLbFAsRUFBS1csU0FBVzBPLEdBOEY5QixTQUFTeXhELEVBQVM5Z0UsR0FDaEIxcUIsS0FBS3V5QixPQUFTN0gsRUFBSzZILFFBQVUsTUFDN0J2eUIsS0FBS20xQixJQUFNekssRUFBS3lLLElBQ2hCbjFCLEtBQUsyNUIsS0FBT2pQLEVBQUtpUCxHQUNqQjM1QixLQUFLNDVCLEtBQU9sUCxFQUFLa1AsR0FDakI1NUIsS0FBS3cvRSxPQUFRLElBQVU5MEQsRUFBSzgwRCxNQUM1QngvRSxLQUFLa0gsVUFBTzlJLElBQWNzc0IsRUFBS3hqQixLQUFPd2pCLEVBQUt4akIsS0FBTyxLQUNsRGxILEtBQUswckIsTUFBUWhCLEVBQUtnQixNQUNsQjFyQixLQUFLMlEsU0FBVytaLEVBQUsvWixTQUNyQjNRLEtBQUtzTyxlQUFpQm9jLEVBQUtwYyxlQUMzQnRPLEtBQUs2cUIsV0FBYUgsRUFBS0csV0FDdkI3cUIsS0FBSzRyQixnQkFBa0JsQixFQUFLa0IsZ0JBQzVCNXJCLEtBQUtrcUYsZUFBaUJ4L0QsRUFBS3cvRCxlQUczQmxxRixLQUFLNnJCLElBQU1uQixFQUFLbUIsSUFDaEI3ckIsS0FBS2hGLElBQU0wdkIsRUFBSzF2QixJQUNoQmdGLEtBQUs4ckIsV0FBYXBCLEVBQUtvQixXQUN2QjlyQixLQUFLK3JCLEtBQU9yQixFQUFLcUIsS0FDakIvckIsS0FBS2dzQixHQUFLdEIsRUFBS3NCLEdBQ2Zoc0IsS0FBS2lzQixRQUFVdkIsRUFBS3VCLFFBQ3BCanNCLEtBQUtrc0IsbUJBQXFCeEIsRUFBS3dCLG1CQUcvQmxzQixLQUFLcXNCLGFBQWUzQixFQUFLMkIsYUFFekJyc0IsS0FBS2pGLFNBeU9QLEdBallBdkIsRUFBT0QsUUFBVWdnQyxFQUNqQi8vQixFQUFPRCxRQUFRaXlGLFFBQVVBLEVBdUN6QnR4RCxFQUFRWCxFQUFLYSxHQU1iYixFQUFJbCtCLFVBQVVpVCxnQkFBaUIsRUFTL0JpckIsRUFBSWwrQixVQUFVMjNCLFFBQVUsU0FBVXRJLEdBdUJoQyxPQXRCQUEsRUFBT0EsR0FBUSxJQUNWeUssSUFBTW4xQixLQUFLbTFCLE1BQ2hCekssRUFBS2lQLEdBQUszNUIsS0FBSzI1QixHQUNmalAsRUFBS2tQLEdBQUs1NUIsS0FBSzQ1QixHQUNmbFAsRUFBS2dCLE1BQVExckIsS0FBSzByQixRQUFTLEVBQzNCaEIsRUFBS3BjLGVBQWlCdE8sS0FBS3NPLGVBQzNCb2MsRUFBS0csV0FBYTdxQixLQUFLNnFCLFdBQ3ZCSCxFQUFLa0IsZ0JBQWtCNXJCLEtBQUs0ckIsZ0JBRzVCbEIsRUFBS21CLElBQU03ckIsS0FBSzZyQixJQUNoQm5CLEVBQUsxdkIsSUFBTWdGLEtBQUtoRixJQUNoQjB2QixFQUFLb0IsV0FBYTlyQixLQUFLOHJCLFdBQ3ZCcEIsRUFBS3FCLEtBQU8vckIsS0FBSytyQixLQUNqQnJCLEVBQUtzQixHQUFLaHNCLEtBQUtnc0IsR0FDZnRCLEVBQUt1QixRQUFVanNCLEtBQUtpc0IsUUFDcEJ2QixFQUFLd0IsbUJBQXFCbHNCLEtBQUtrc0IsbUJBQy9CeEIsRUFBS3cvRCxlQUFpQmxxRixLQUFLa3FGLGVBRzNCeC9ELEVBQUsyQixhQUFlcnNCLEtBQUtxc0IsYUFFbEIsSUFBSW0vRCxFQUFROWdFLElBV3JCNk8sRUFBSWwrQixVQUFVdS9CLFFBQVUsU0FBVTF6QixFQUFNakQsR0FDdEMsSUFBSTBNLEVBQTJCLGlCQUFUekosUUFBOEI5SSxJQUFUOEksRUFDdkN1a0YsRUFBTXpyRixLQUFLZ3pCLFFBQVEsQ0FBRVQsT0FBUSxPQUFRcnJCLEtBQU1BLEVBQU15SixTQUFVQSxJQUMzRG5VLEVBQU93RCxLQUNYeXJGLEVBQUk1MUUsR0FBRyxVQUFXNVIsR0FDbEJ3bkYsRUFBSTUxRSxHQUFHLFNBQVMsU0FBVXhKLEdBQ3hCN1AsRUFBSyt2QixRQUFRLGlCQUFrQmxnQixNQUVqQ3JNLEtBQUswckYsUUFBVUQsR0FTakJseUQsRUFBSWwrQixVQUFVcS9CLE9BQVMsV0FDckJ4UyxFQUFNLFlBQ04sSUFBSXVqRSxFQUFNenJGLEtBQUtnekIsVUFDWHgyQixFQUFPd0QsS0FDWHlyRixFQUFJNTFFLEdBQUcsUUFBUSxTQUFVM08sR0FDdkIxSyxFQUFLdXdCLE9BQU83bEIsTUFFZHVrRixFQUFJNTFFLEdBQUcsU0FBUyxTQUFVeEosR0FDeEI3UCxFQUFLK3ZCLFFBQVEsaUJBQWtCbGdCLE1BRWpDck0sS0FBSzJyRixRQUFVRixHQTJDakJ0akUsRUFBUXFqRSxFQUFRbndGLFdBUWhCbXdGLEVBQVFud0YsVUFBVU4sT0FBUyxXQUN6QixJQUFJMnZCLEVBQU8sQ0FBRWdCLE1BQU8xckIsS0FBSzByQixNQUFPZixRQUFTM3FCLEtBQUsyNUIsR0FBSS9PLFFBQVM1cUIsS0FBSzQ1QixHQUFJL08sV0FBWTdxQixLQUFLNnFCLFlBR3JGSCxFQUFLbUIsSUFBTTdyQixLQUFLNnJCLElBQ2hCbkIsRUFBSzF2QixJQUFNZ0YsS0FBS2hGLElBQ2hCMHZCLEVBQUtvQixXQUFhOXJCLEtBQUs4ckIsV0FDdkJwQixFQUFLcUIsS0FBTy9yQixLQUFLK3JCLEtBQ2pCckIsRUFBS3NCLEdBQUtoc0IsS0FBS2dzQixHQUNmdEIsRUFBS3VCLFFBQVVqc0IsS0FBS2lzQixRQUNwQnZCLEVBQUt3QixtQkFBcUJsc0IsS0FBS2tzQixtQkFFL0IsSUFBSTAvRCxFQUFNNXJGLEtBQUs0ckYsSUFBTSxJQUFJOWdFLEVBQWVKLEdBQ3BDbHVCLEVBQU93RCxLQUVYLElBQ0Vrb0IsRUFBTSxrQkFBbUJsb0IsS0FBS3V5QixPQUFRdnlCLEtBQUttMUIsS0FDM0N5MkQsRUFBSXYrRSxLQUFLck4sS0FBS3V5QixPQUFRdnlCLEtBQUttMUIsSUFBS24xQixLQUFLdy9FLE9BQ3JDLElBQ0UsR0FBSXgvRSxLQUFLcXNCLGFBRVAsSUFBSyxJQUFJNXlCLEtBRFRteUYsRUFBSUMsdUJBQXlCRCxFQUFJQyx1QkFBc0IsR0FDekM3ckYsS0FBS3FzQixhQUNicnNCLEtBQUtxc0IsYUFBYS93QixlQUFlN0IsSUFDbkNteUYsRUFBSTEzRCxpQkFBaUJ6NkIsRUFBR3VHLEtBQUtxc0IsYUFBYTV5QixJQUloRCxNQUFPb0gsSUFFVCxHQUFJLFNBQVdiLEtBQUt1eUIsT0FDbEIsSUFDTXZ5QixLQUFLMlEsU0FDUGk3RSxFQUFJMTNELGlCQUFpQixlQUFnQiw0QkFFckMwM0QsRUFBSTEzRCxpQkFBaUIsZUFBZ0IsNEJBRXZDLE1BQU9yekIsSUFHWCxJQUNFK3FGLEVBQUkxM0QsaUJBQWlCLFNBQVUsT0FDL0IsTUFBT3J6QixJQUdMLG9CQUFxQitxRixJQUN2QkEsRUFBSWhnRSxnQkFBa0I1ckIsS0FBSzRyQixpQkFHekI1ckIsS0FBS2txRixpQkFDUDBCLEVBQUk1MkUsUUFBVWhWLEtBQUtrcUYsZ0JBR2pCbHFGLEtBQUs4ckYsVUFDUEYsRUFBSTM4RSxPQUFTLFdBQ1h6UyxFQUFLdXZGLFVBRVBILEVBQUk5M0QsUUFBVSxXQUNadDNCLEVBQUsrdkIsUUFBUXEvRCxFQUFJajRELGdCQUduQmk0RCxFQUFJdjRELG1CQUFxQixXQUN2QixHQUF1QixJQUFuQnU0RCxFQUFJbmdFLFdBQ04sSUFDRSxJQUFJdWdFLEVBQWNKLEVBQUlLLGtCQUFrQixpQkFDcEN6dkYsRUFBSzhSLGdCQUFrQyw2QkFBaEIwOUUsR0FBOEQsNENBQWhCQSxLQUN2RUosRUFBSWw0RCxhQUFlLGVBRXJCLE1BQU83eUIsSUFFUCxJQUFNK3FGLEVBQUluZ0UsYUFDVixNQUFRbWdFLEVBQUl2NUQsUUFBVSxPQUFTdTVELEVBQUl2NUQsT0FDckM3MUIsRUFBS3V2RixTQUlMdjNFLFlBQVcsV0FDVGhZLEVBQUsrdkIsUUFBOEIsaUJBQWZxL0QsRUFBSXY1RCxPQUFzQnU1RCxFQUFJdjVELE9BQVMsS0FDMUQsS0FLVG5LLEVBQU0sY0FBZWxvQixLQUFLa0gsTUFDMUIwa0YsRUFBSS8rRCxLQUFLN3NCLEtBQUtrSCxNQUNkLE1BQU9yRyxHQU9QLFlBSEEyVCxZQUFXLFdBQ1RoWSxFQUFLK3ZCLFFBQVExckIsS0FDWixHQUltQixvQkFBYjBFLFdBQ1R2RixLQUFLZixNQUFRdXNGLEVBQVFVLGdCQUNyQlYsRUFBUVcsU0FBU25zRixLQUFLZixPQUFTZSxPQVVuQ3dyRixFQUFRbndGLFVBQVUrd0YsVUFBWSxXQUM1QnBzRixLQUFLbVcsS0FBSyxXQUNWblcsS0FBS280QixXQVNQb3pELEVBQVFud0YsVUFBVTB4QixPQUFTLFNBQVU3bEIsR0FDbkNsSCxLQUFLbVcsS0FBSyxPQUFRalAsR0FDbEJsSCxLQUFLb3NGLGFBU1BaLEVBQVFud0YsVUFBVWt4QixRQUFVLFNBQVVsZ0IsR0FDcENyTSxLQUFLbVcsS0FBSyxRQUFTOUosR0FDbkJyTSxLQUFLbzRCLFNBQVEsSUFTZm96RCxFQUFRbndGLFVBQVUrOEIsUUFBVSxTQUFVaTBELEdBQ3BDLFFBQUksSUFBdUJyc0YsS0FBSzRyRixLQUFPLE9BQVM1ckYsS0FBSzRyRixJQUFyRCxDQVVBLEdBTkk1ckYsS0FBSzhyRixTQUNQOXJGLEtBQUs0ckYsSUFBSTM4RSxPQUFTalAsS0FBSzRyRixJQUFJOTNELFFBQVV5M0QsRUFFckN2ckYsS0FBSzRyRixJQUFJdjRELG1CQUFxQms0RCxFQUc1QmMsRUFDRixJQUNFcnNGLEtBQUs0ckYsSUFBSW4zRCxRQUNULE1BQU81ekIsSUFHYSxvQkFBYjBFLGlCQUNGaW1GLEVBQVFXLFNBQVNuc0YsS0FBS2YsT0FHL0JlLEtBQUs0ckYsSUFBTSxPQVNiSixFQUFRbndGLFVBQVUwd0YsT0FBUyxXQUN6QixJQUFJN2tGLEVBQ0osSUFDRSxJQUFJOGtGLEVBQ0osSUFDRUEsRUFBY2hzRixLQUFLNHJGLElBQUlLLGtCQUFrQixnQkFDekMsTUFBT3ByRixJQUVQcUcsR0FEa0IsNkJBQWhCOGtGLEdBQThELDRDQUFoQkEsSUFDekNoc0YsS0FBSzRyRixJQUFJbjRELFVBRVR6ekIsS0FBSzRyRixJQUFJajRELGFBRWxCLE1BQU85eUIsR0FDUGIsS0FBS3VzQixRQUFRMXJCLEdBRVgsTUFBUXFHLEdBQ1ZsSCxLQUFLK3NCLE9BQU83bEIsSUFVaEJza0YsRUFBUW53RixVQUFVeXdGLE9BQVMsV0FDekIsTUFBaUMsb0JBQW5CL2dFLGlCQUFtQy9xQixLQUFLNDVCLElBQU01NUIsS0FBSzZxQixZQVNuRTJnRSxFQUFRbndGLFVBQVVvNUIsTUFBUSxXQUN4QnowQixLQUFLbzRCLFdBU1BvekQsRUFBUVUsY0FBZ0IsRUFDeEJWLEVBQVFXLFNBQVcsR0FFSyxvQkFBYjVtRixTQUNULEdBQTJCLG1CQUFoQjYwRCxZQUNUQSxZQUFZLFdBQVlreUIsUUFDbkIsR0FBZ0MsbUJBQXJCcC9ELGlCQUFpQyxDQUNqRCxJQUFJcS9ELEVBQW1CLGVBQWdCL3ZGLEtBQU8sV0FBYSxTQUMzRDB3QixpQkFBaUJxL0QsRUFBa0JELEdBQWUsR0FJdEQsU0FBU0EsSUFDUCxJQUFLLElBQUk3eUYsS0FBSyt4RixFQUFRVyxTQUNoQlgsRUFBUVcsU0FBUzd3RixlQUFlN0IsSUFDbEMreEYsRUFBUVcsU0FBUzF5RixHQUFHZzdCLFUsY0NyWjFCajdCLEVBQU9ELFFBQVVZLE9BQU9vRyxNQUFRLFNBQWU5RSxHQUM3QyxJQUFJMkssRUFBTSxHQUNOd3ZCLEVBQU16N0IsT0FBT2tCLFVBQVVDLGVBRTNCLElBQUssSUFBSTdCLEtBQUtnQyxFQUNSbTZCLEVBQUloOEIsS0FBSzZCLEVBQUtoQyxJQUNoQjJNLEVBQUlwSCxLQUFLdkYsR0FHYixPQUFPMk0sSSxjQ2pCVCxJQUFJakosRUFBVyxHQUFHQSxTQUVsQjNELEVBQU9ELFFBQVVtSixNQUFNbUIsU0FBVyxTQUFVdUMsR0FDMUMsTUFBNkIsa0JBQXRCakosRUFBU3ZELEtBQUt3TSxLLGNDSXZCNU0sRUFBT0QsUUFBVSxTQUFTaXpGLEVBQWFqMEUsRUFBT3ZGLEdBQzVDLElBQUk0SyxFQUFRNHVFLEVBQVkzOUUsV0FJeEIsR0FIQTBKLEVBQVFBLEdBQVMsRUFDakJ2RixFQUFNQSxHQUFPNEssRUFFVDR1RSxFQUFZN3RGLE1BQVMsT0FBTzZ0RixFQUFZN3RGLE1BQU00WixFQUFPdkYsR0FNekQsR0FKSXVGLEVBQVEsSUFBS0EsR0FBU3FGLEdBQ3RCNUssRUFBTSxJQUFLQSxHQUFPNEssR0FDbEI1SyxFQUFNNEssSUFBUzVLLEVBQU00SyxHQUVyQnJGLEdBQVNxRixHQUFTckYsR0FBU3ZGLEdBQWlCLElBQVY0SyxFQUNwQyxPQUFPLElBQUl0WixZQUFZLEdBS3pCLElBRkEsSUFBSW1vRixFQUFNLElBQUk5OUUsV0FBVzY5RSxHQUNyQi9tRixFQUFTLElBQUlrSixXQUFXcUUsRUFBTXVGLEdBQ3pCOWUsRUFBSThlLEVBQU9xd0QsRUFBSyxFQUFHbnZFLEVBQUl1WixFQUFLdlosSUFBS212RSxJQUN4Q25qRSxFQUFPbWpFLEdBQU02akIsRUFBSWh6RixHQUVuQixPQUFPZ00sRUFBT2pCLFMsY0NBaEIsU0FBU21KLEtBM0JUblUsRUFBT0QsUUFFUCxTQUFleThDLEVBQU94bkMsRUFBVWsrRSxHQUM1QixJQUFJQyxHQUFPLEVBSVgsT0FIQUQsRUFBU0EsR0FBVS8rRSxFQUNuQmkvRSxFQUFNNTJDLE1BQVFBLEVBRUksSUFBVkEsRUFBZXhuQyxJQUFhbytFLEVBRXBDLFNBQVNBLEVBQU12Z0YsRUFBSzVHLEdBQ2hCLEdBQUltbkYsRUFBTTUyQyxPQUFTLEVBQ2YsTUFBTSxJQUFJNzNDLE1BQU0saUNBRWxCeXVGLEVBQU01MkMsTUFHSjNwQyxHQUNBc2dGLEdBQU8sRUFDUG4rRSxFQUFTbkMsR0FFVG1DLEVBQVdrK0UsR0FDWSxJQUFoQkUsRUFBTTUyQyxPQUFnQjIyQyxHQUM3Qm4rRSxFQUFTLEtBQU0vSSxNOztBQ3BCM0IsSUF5TEkwVSxFQUNBMHlFLEVBQ0FDLEVBM0xBQyxFQUFxQjVzRixPQUFPMFAsYUFHaEMsU0FBU205RSxFQUFXeDFFLEdBTW5CLElBTEEsSUFHSTljLEVBQ0F1eUYsRUFKQWx1RCxFQUFTLEdBQ1RtdUQsRUFBVSxFQUNWaHhGLEVBQVNzYixFQUFPdGIsT0FHYmd4RixFQUFVaHhGLElBQ2hCeEIsRUFBUThjLEVBQU81RixXQUFXczdFLE9BQ2IsT0FBVXh5RixHQUFTLE9BQVV3eUYsRUFBVWh4RixFQUczQixRQUFYLE9BRGIrd0YsRUFBUXoxRSxFQUFPNUYsV0FBV3M3RSxPQUV6Qm51RCxFQUFPLy9CLE9BQWUsS0FBUnRFLElBQWtCLEtBQWUsS0FBUnV5RixHQUFpQixRQUl4RGx1RCxFQUFPLy9CLEtBQUt0RSxHQUNad3lGLEtBR0RudUQsRUFBTy8vQixLQUFLdEUsR0FHZCxPQUFPcWtDLEVBcUJSLFNBQVNvdUQsRUFBaUIveEUsRUFBVzNMLEdBQ3BDLEdBQUkyTCxHQUFhLE9BQVVBLEdBQWEsTUFBUSxDQUMvQyxHQUFJM0wsRUFDSCxNQUFNdFIsTUFDTCxvQkFBc0JpZCxFQUFVamUsU0FBUyxJQUFJb3lCLGNBQzdDLDBCQUdGLE9BQU8sRUFFUixPQUFPLEVBSVIsU0FBUzY5RCxFQUFXaHlFLEVBQVd5ZCxHQUM5QixPQUFPazBELEVBQXFCM3hFLEdBQWF5ZCxFQUFTLEdBQVEsS0FHM0QsU0FBU3cwRCxFQUFnQmp5RSxFQUFXM0wsR0FDbkMsR0FBZ0MsSUFBZixXQUFaMkwsR0FDSixPQUFPMnhFLEVBQW1CM3hFLEdBRTNCLElBQUl5OUQsRUFBUyxHQWlCYixPQWhCZ0MsSUFBZixXQUFaejlELEdBQ0p5OUQsRUFBU2tVLEVBQXFCM3hFLEdBQWEsRUFBSyxHQUFRLEtBRXBCLElBQWYsV0FBWkEsSUFDSit4RSxFQUFpQi94RSxFQUFXM0wsS0FDaEMyTCxFQUFZLE9BRWJ5OUQsRUFBU2tVLEVBQXFCM3hFLEdBQWEsR0FBTSxHQUFRLEtBQ3pEeTlELEdBQVV1VSxFQUFXaHlFLEVBQVcsSUFFSSxJQUFmLFdBQVpBLEtBQ1R5OUQsRUFBU2tVLEVBQXFCM3hFLEdBQWEsR0FBTSxFQUFRLEtBQ3pEeTlELEdBQVV1VSxFQUFXaHlFLEVBQVcsSUFDaEN5OUQsR0FBVXVVLEVBQVdoeUUsRUFBVyxJQUVqQ3k5RCxHQUFVa1UsRUFBZ0MsR0FBWjN4RSxFQUFvQixLQXNCbkQsU0FBU2t5RSxJQUNSLEdBQUlSLEdBQWFELEVBQ2hCLE1BQU0xdUYsTUFBTSxzQkFHYixJQUFJb3ZGLEVBQTBDLElBQXZCcHpFLEVBQVUyeUUsR0FHakMsR0FGQUEsSUFFaUMsTUFBVCxJQUFuQlMsR0FDSixPQUEwQixHQUFuQkEsRUFJUixNQUFNcHZGLE1BQU0sNkJBR2IsU0FBU3F2RixFQUFhLzlFLEdBQ3JCLElBQUlnK0UsRUFJQXJ5RSxFQUVKLEdBQUkweEUsRUFBWUQsRUFDZixNQUFNMXVGLE1BQU0sc0JBR2IsR0FBSTJ1RixHQUFhRCxFQUNoQixPQUFPLEVBUVIsR0FKQVksRUFBK0IsSUFBdkJ0ekUsRUFBVTJ5RSxHQUNsQkEsSUFHc0IsSUFBVCxJQUFSVyxHQUNKLE9BQU9BLEVBSVIsR0FBc0IsTUFBVCxJQUFSQSxHQUF1QixDQUczQixJQURBcnlFLEdBQXNCLEdBQVJxeUUsSUFBaUIsRUFEdkJILE1BRVMsSUFDaEIsT0FBT2x5RSxFQUVQLE1BQU1qZCxNQUFNLDZCQUtkLEdBQXNCLE1BQVQsSUFBUnN2RixHQUF1QixDQUkzQixJQURBcnlFLEdBQXNCLEdBQVJxeUUsSUFBaUIsR0FGdkJILEtBRXVDLEVBRHZDQSxNQUVTLEtBQ2hCLE9BQU9ILEVBQWlCL3hFLEVBQVczTCxHQUFVMkwsRUFBWSxNQUV6RCxNQUFNamQsTUFBTSw2QkFLZCxHQUFzQixNQUFULElBQVJzdkYsS0FJSnJ5RSxHQUFzQixFQUFScXlFLElBQWlCLEdBSHZCSCxLQUd5QyxHQUZ6Q0EsS0FHRyxFQUZIQSxNQUdTLE9BQVlseUUsR0FBYSxRQUN6QyxPQUFPQSxFQUlULE1BQU1qZCxNQUFNLDBCQXFCYjNFLEVBQU9ELFFBQVUsQ0FDaEJvYyxRQUFTLFFBQ1RuRyxPQXBIRCxTQUFvQmdJLEVBQVFrVCxHQVMzQixJQVBBLElBQUlqYixHQUFTLEtBRGJpYixFQUFPQSxHQUFRLElBQ2FqYixPQUV4QjZMLEVBQWEweEUsRUFBV3gxRSxHQUN4QnRiLEVBQVNvZixFQUFXcGYsT0FDcEIrQyxHQUFTLEVBRVR5dUYsRUFBYSxLQUNSenVGLEVBQVEvQyxHQUVoQnd4RixHQUFjTCxFQURGL3hFLEVBQVdyYyxHQUNrQndRLEdBRTFDLE9BQU9pK0UsR0F3R1BwOUUsT0FsQkQsU0FBb0JvOUUsRUFBWWhqRSxHQUUvQixJQUFJamIsR0FBUyxLQURiaWIsRUFBT0EsR0FBUSxJQUNhamIsT0FFNUIwSyxFQUFZNnlFLEVBQVdVLEdBQ3ZCYixFQUFZMXlFLEVBQVVqZSxPQUN0QjR3RixFQUFZLEVBR1osSUFGQSxJQUNJbEYsRUFEQXRzRSxFQUFhLElBRXVCLEtBQWhDc3NFLEVBQU00RixFQUFhLzlFLEtBQzFCNkwsRUFBV3RjLEtBQUs0b0YsR0FFakIsT0ExS0QsU0FBb0J2eUUsR0FLbkIsSUFKQSxJQUVJM2EsRUFGQXdCLEVBQVNtWixFQUFNblosT0FDZitDLEdBQVMsRUFFVDgvQixFQUFTLEtBQ0o5L0IsRUFBUS9DLElBQ2hCeEIsRUFBUTJhLEVBQU1wVyxJQUNGLFFBRVg4L0IsR0FBVWd1RCxHQURWcnlGLEdBQVMsU0FDOEIsR0FBSyxLQUFRLE9BQ3BEQSxFQUFRLE1BQWlCLEtBQVJBLEdBRWxCcWtDLEdBQVVndUQsRUFBbUJyeUYsR0FFOUIsT0FBT3FrQyxFQTRKQTR1RCxDQUFXcnlFLE0sZUNuTW5CLFdBQ0UsYUFNQSxJQUpBLElBQUlzeUUsRUFBUSxtRUFHUnY3QyxFQUFTLElBQUkxakMsV0FBVyxLQUNuQmxWLEVBQUksRUFBR0EsRUFBSW0wRixFQUFNMXhGLE9BQVF6QyxJQUNoQzQ0QyxFQUFPdTdDLEVBQU1oOEUsV0FBV25ZLElBQU1BLEVBR2hDRixFQUFRaVcsT0FBUyxTQUFTZzlFLEdBQ3hCLElBQ0EveUYsRUFESW1rQixFQUFRLElBQUlqUCxXQUFXNjlFLEdBQ3hCajdFLEVBQU1xTSxFQUFNMWhCLE9BQVEySyxFQUFTLEdBRWhDLElBQUtwTixFQUFJLEVBQUdBLEVBQUk4WCxFQUFLOVgsR0FBRyxFQUN0Qm9OLEdBQVUrbUYsRUFBTWh3RSxFQUFNbmtCLElBQU0sR0FDNUJvTixHQUFVK21GLEdBQW1CLEVBQVhod0UsRUFBTW5rQixLQUFXLEVBQU1ta0IsRUFBTW5rQixFQUFJLElBQU0sR0FDekRvTixHQUFVK21GLEdBQXVCLEdBQWZod0UsRUFBTW5rQixFQUFJLEtBQVksRUFBTW1rQixFQUFNbmtCLEVBQUksSUFBTSxHQUM5RG9OLEdBQVUrbUYsRUFBcUIsR0FBZmh3RSxFQUFNbmtCLEVBQUksSUFTNUIsT0FOSzhYLEVBQU0sR0FBTyxFQUNoQjFLLEVBQVNBLEVBQU96SixVQUFVLEVBQUd5SixFQUFPM0ssT0FBUyxHQUFLLElBQ3pDcVYsRUFBTSxHQUFNLElBQ3JCMUssRUFBU0EsRUFBT3pKLFVBQVUsRUFBR3lKLEVBQU8zSyxPQUFTLEdBQUssTUFHN0MySyxHQUdUdE4sRUFBUStXLE9BQVUsU0FBU3pKLEdBQ3pCLElBQ3FCcE4sRUFDckJvMEYsRUFBVUMsRUFBVUMsRUFBVUMsRUFGMUJDLEVBQStCLElBQWhCcG5GLEVBQU8zSyxPQUMxQnFWLEVBQU0xSyxFQUFPM0ssT0FBV1gsRUFBSSxFQUdNLE1BQTlCc0wsRUFBT0EsRUFBTzNLLE9BQVMsS0FDekIreEYsSUFDa0MsTUFBOUJwbkYsRUFBT0EsRUFBTzNLLE9BQVMsSUFDekIreEYsS0FJSixJQUFJekIsRUFBYyxJQUFJbG9GLFlBQVkycEYsR0FDbENyd0UsRUFBUSxJQUFJalAsV0FBVzY5RSxHQUV2QixJQUFLL3lGLEVBQUksRUFBR0EsRUFBSThYLEVBQUs5WCxHQUFHLEVBQ3RCbzBGLEVBQVd4N0MsRUFBT3hyQyxFQUFPK0ssV0FBV25ZLElBQ3BDcTBGLEVBQVd6N0MsRUFBT3hyQyxFQUFPK0ssV0FBV25ZLEVBQUUsSUFDdENzMEYsRUFBVzE3QyxFQUFPeHJDLEVBQU8rSyxXQUFXblksRUFBRSxJQUN0Q3UwRixFQUFXMzdDLEVBQU94ckMsRUFBTytLLFdBQVduWSxFQUFFLElBRXRDbWtCLEVBQU1yaUIsS0FBUXN5RixHQUFZLEVBQU1DLEdBQVksRUFDNUNsd0UsRUFBTXJpQixNQUFvQixHQUFYdXlGLElBQWtCLEVBQU1DLEdBQVksRUFDbkRud0UsRUFBTXJpQixNQUFvQixFQUFYd3lGLElBQWlCLEVBQWlCLEdBQVhDLEVBR3hDLE9BQU94QixHQXpEWCxJLGNDSEEsSUFBSTBCLE9BQXFDLElBQWhCQSxFQUE4QkEsRUFDeEIsb0JBQXRCQyxrQkFBb0NBLGtCQUNsQixvQkFBbEJDLGNBQWdDQSxjQUNiLG9CQUFuQkMsZ0JBQWlDQSxlQU90Q0MsRUFBZ0IsV0FDbEIsSUFFRSxPQUFrQixJQURWLElBQUl6Z0YsS0FBSyxDQUFDLE9BQ1RtRSxLQUNULE1BQU1uUixHQUNOLE9BQU8sR0FMUyxHQWNoQjB0RixFQUE4QkQsR0FBaUIsV0FDakQsSUFFRSxPQUFrQixJQURWLElBQUl6Z0YsS0FBSyxDQUFDLElBQUljLFdBQVcsQ0FBQyxFQUFFLE1BQzNCcUQsS0FDVCxNQUFNblIsR0FDTixPQUFPLEdBTHdDLEdBYS9DMnRGLEVBQXVCTixHQUN0QkEsRUFBWTd5RixVQUFVb3pGLFFBQ3RCUCxFQUFZN3lGLFVBQVVxekYsUUFRM0IsU0FBU0MsRUFBb0I3Z0YsR0FDM0IsT0FBT0EsRUFBSXpLLEtBQUksU0FBU3VnQyxHQUN0QixHQUFJQSxFQUFNcC9CLGtCQUFrQkYsWUFBYSxDQUN2QyxJQUFJaVYsRUFBTXFxQixFQUFNcC9CLE9BSWhCLEdBQUlvL0IsRUFBTS8wQixhQUFlMEssRUFBSTFLLFdBQVksQ0FDdkMsSUFBSWtKLEVBQU8sSUFBSXBKLFdBQVdpMUIsRUFBTS8wQixZQUNoQ2tKLEVBQUttSixJQUFJLElBQUl2UyxXQUFXNEssRUFBS3FxQixFQUFNdnNCLFdBQVl1c0IsRUFBTS8wQixhQUNyRDBLLEVBQU14QixFQUFLdlQsT0FHYixPQUFPK1UsRUFHVCxPQUFPcXFCLEtBSVgsU0FBU2dyRCxFQUF1QjlnRixFQUFLeEYsR0FDbkNBLEVBQVVBLEdBQVcsR0FFckIsSUFBSWsxQyxFQUFLLElBQUkwd0MsRUFLYixPQUpBUyxFQUFvQjdnRixHQUFLbk4sU0FBUSxTQUFTZ0ksR0FDeEM2MEMsRUFBR2l4QyxPQUFPOWxGLE1BR0pMLEVBQVksS0FBSWsxQyxFQUFHa3hDLFFBQVFwbUYsRUFBUWhKLE1BQVFrK0MsRUFBR2t4QyxVQUd4RCxTQUFTRyxFQUFnQi9nRixFQUFLeEYsR0FDNUIsT0FBTyxJQUFJdUYsS0FBSzhnRixFQUFvQjdnRixHQUFNeEYsR0FBVyxJQUduQyxvQkFBVHVGLE9BQ1QrZ0YsRUFBdUJ2ekYsVUFBWXdTLEtBQUt4UyxVQUN4Q3d6RixFQUFnQnh6RixVQUFZd1MsS0FBS3hTLFdBR25DN0IsRUFBT0QsUUFDRCswRixFQUNLQyxFQUE4QjFnRixLQUFPZ2hGLEVBQ25DTCxFQUNGSSxPQUVQLEcsZ0JDd0tKcDFGLEVBQU9ELFFBblFQLFNBQWVrYyxHQXNDZCxTQUFTeXZFLEVBQVlqZ0UsR0FDcEIsSUFBSXMyRCxFQUFPLEVBRVgsSUFBSyxJQUFJOWhGLEVBQUksRUFBR0EsRUFBSXdyQixFQUFVL29CLE9BQVF6QyxJQUNyQzhoRixHQUFTQSxHQUFRLEdBQUtBLEVBQVF0MkQsRUFBVXJULFdBQVduWSxHQUNuRDhoRixHQUFRLEVBR1QsT0FBTzRKLEVBQVkzK0QsT0FBT3ZwQixLQUFLbW9GLElBQUk3SixHQUFRNEosRUFBWTMrRCxPQUFPdHFCLFFBVy9ELFNBQVNpcEYsRUFBWWxnRSxHQUNwQixJQUFJb2dFLEVBRUosU0FBU245RCxLQUFTMWMsR0FFakIsSUFBSzBjLEVBQU1vOUQsUUFDVixPQUdELE1BQU05b0YsRUFBTzByQixFQUdQcTlELEVBQU8vMEUsT0FBTyxJQUFJK25CLE1BQ2xCZ0ksRUFBS2dsRCxHQUFRRixHQUFZRSxHQUMvQi9vRixFQUFLMm9CLEtBQU9vYixFQUNaL2pDLEVBQUswK0IsS0FBT21xRCxFQUNaN29GLEVBQUsrb0YsS0FBT0EsRUFDWkYsRUFBV0UsRUFFWC81RSxFQUFLLEdBQUsyNUUsRUFBWUssT0FBT2g2RSxFQUFLLElBRVgsaUJBQVpBLEVBQUssSUFFZkEsRUFBS3NlLFFBQVEsTUFJZCxJQUFJN3FCLEVBQVEsRUFDWnVNLEVBQUssR0FBS0EsRUFBSyxHQUFHeEYsUUFBUSxnQkFBaUIsQ0FBQ2dYLEVBQU8zUixLQUVsRCxHQUFjLE9BQVYyUixFQUNILE9BQU9BLEVBRVIvZCxJQUNBLE1BQU13bUYsRUFBWU4sRUFBWTErRCxXQUFXcGIsR0FDekMsR0FBeUIsbUJBQWRvNkUsRUFBMEIsQ0FDcEMsTUFBTTNoRixFQUFNMEgsRUFBS3ZNLEdBQ2pCK2QsRUFBUXlvRSxFQUFVN3JGLEtBQUs0QyxFQUFNc0gsR0FHN0IwSCxFQUFLck0sT0FBT0YsRUFBTyxHQUNuQkEsSUFFRCxPQUFPK2QsSUFJUm1vRSxFQUFZcGdFLFdBQVduckIsS0FBSzRDLEVBQU1nUCxJQUVwQmhQLEVBQUtzb0IsS0FBT3FnRSxFQUFZcmdFLEtBQ2hDdGpCLE1BQU1oRixFQUFNZ1AsR0FtQm5CLE9BaEJBMGMsRUFBTWpELFVBQVlBLEVBQ2xCaUQsRUFBTW85RCxRQUFVSCxFQUFZRyxRQUFRcmdFLEdBQ3BDaUQsRUFBTWxELFVBQVltZ0UsRUFBWW5nRSxZQUM5QmtELEVBQU05QyxNQUFROC9ELEVBQVlqZ0UsR0FDMUJpRCxFQUFNbUMsUUFBVUEsRUFDaEJuQyxFQUFNdGlCLE9BQVNBLEVBS2lCLG1CQUFyQnUvRSxFQUFZTyxNQUN0QlAsRUFBWU8sS0FBS3g5RCxHQUdsQmk5RCxFQUFZUSxVQUFVM21GLEtBQUtrcEIsR0FFcEJBLEVBR1IsU0FBU21DLElBQ1IsTUFBTXByQixFQUFRa21GLEVBQVlRLFVBQVV6bUYsUUFBUWMsTUFDNUMsT0FBZSxJQUFYZixJQUNIa21GLEVBQVlRLFVBQVV4bUYsT0FBT0YsRUFBTyxJQUM3QixHQUtULFNBQVMyRyxFQUFPcWYsRUFBV3NKLEdBQzFCLE1BQU1xM0QsRUFBV1QsRUFBWW5sRixLQUFLaWxCLGdCQUFrQyxJQUFkc0osRUFBNEIsSUFBTUEsR0FBYXRKLEdBRXJHLE9BREEyZ0UsRUFBUzlnRSxJQUFNOWtCLEtBQUs4a0IsSUFDYjhnRSxFQTZGUixTQUFTQyxFQUFZQyxHQUNwQixPQUFPQSxFQUFPM29GLFdBQ1pDLFVBQVUsRUFBRzBvRixFQUFPM29GLFdBQVdqQixPQUFTLEdBQ3hDOEosUUFBUSxVQUFXLEtBbUJ0QixPQS9QQW0vRSxFQUFZajlELE1BQVFpOUQsRUFDcEJBLEVBQVl4Z0UsUUFBVXdnRSxFQUN0QkEsRUFBWUssT0FvUFosU0FBZ0IxaEYsR0FDZixHQUFJQSxhQUFlM0YsTUFDbEIsT0FBTzJGLEVBQUlvbkUsT0FBU3BuRSxFQUFJMkosUUFFekIsT0FBTzNKLEdBdlBScWhGLEVBQVlZLFFBd0xaLFdBQ0MsTUFBTXhnRSxFQUFhLElBQ2Y0L0QsRUFBWWEsTUFBTTNpRixJQUFJd2lGLE1BQ3RCVixFQUFZYyxNQUFNNWlGLElBQUl3aUYsR0FBYXhpRixJQUFJNGhCLEdBQWEsSUFBTUEsSUFDNUQzbkIsS0FBSyxLQUVQLE9BREE2bkYsRUFBWWUsT0FBTyxJQUNaM2dFLEdBN0xSNC9ELEVBQVllLE9Ba0paLFNBQWdCM2dFLEdBTWYsSUFBSTlyQixFQUxKMHJGLEVBQVk3L0QsS0FBS0MsR0FFakI0L0QsRUFBWWEsTUFBUSxHQUNwQmIsRUFBWWMsTUFBUSxHQUdwQixNQUFNNW9GLEdBQStCLGlCQUFma29CLEVBQTBCQSxFQUFhLElBQUlsb0IsTUFBTSxVQUNqRWtVLEVBQU1sVSxFQUFNbkIsT0FFbEIsSUFBS3pDLEVBQUksRUFBR0EsRUFBSThYLEVBQUs5WCxJQUNmNEQsRUFBTTVELEtBT1csT0FGdEI4ckIsRUFBYWxvQixFQUFNNUQsR0FBR3VNLFFBQVEsTUFBTyxRQUV0QixHQUNkbS9FLEVBQVljLE1BQU1qbkYsS0FBSyxJQUFJb25CLE9BQU8sSUFBTWIsRUFBV2xWLE9BQU8sR0FBSyxNQUUvRDgwRSxFQUFZYSxNQUFNaG5GLEtBQUssSUFBSW9uQixPQUFPLElBQU1iLEVBQWEsT0FJdkQsSUFBSzlyQixFQUFJLEVBQUdBLEVBQUkwckYsRUFBWVEsVUFBVXpwRixPQUFRekMsSUFBSyxDQUNsRCxNQUFNbUMsRUFBV3VwRixFQUFZUSxVQUFVbHNGLEdBQ3ZDbUMsRUFBUzBwRixRQUFVSCxFQUFZRyxRQUFRMXBGLEVBQVNxcEIsYUE1S2xEa2dFLEVBQVlHLFFBc01aLFNBQWlCdHJGLEdBQ2hCLEdBQThCLE1BQTFCQSxFQUFLQSxFQUFLa0MsT0FBUyxHQUN0QixPQUFPLEVBR1IsSUFBSXpDLEVBQ0E4WCxFQUVKLElBQUs5WCxFQUFJLEVBQUc4WCxFQUFNNHpFLEVBQVljLE1BQU0vcEYsT0FBUXpDLEVBQUk4WCxFQUFLOVgsSUFDcEQsR0FBSTByRixFQUFZYyxNQUFNeHNGLEdBQUdzVCxLQUFLL1MsR0FDN0IsT0FBTyxFQUlULElBQUtQLEVBQUksRUFBRzhYLEVBQU00ekUsRUFBWWEsTUFBTTlwRixPQUFRekMsRUFBSThYLEVBQUs5WCxJQUNwRCxHQUFJMHJGLEVBQVlhLE1BQU12c0YsR0FBR3NULEtBQUsvUyxHQUM3QixPQUFPLEVBSVQsT0FBTyxHQXpOUm1yRixFQUFZamdFLFNBQVcsRUFBUSxLQUUvQi9xQixPQUFPb0csS0FBS2tWLEdBQUs5VSxRQUFRM0YsSUFDeEJtcUYsRUFBWW5xRixHQUFPeWEsRUFBSXphLEtBTXhCbXFGLEVBQVlRLFVBQVksR0FNeEJSLEVBQVlhLE1BQVEsR0FDcEJiLEVBQVljLE1BQVEsR0FPcEJkLEVBQVkxK0QsV0FBYSxHQWtCekIwK0QsRUFBWUQsWUFBY0EsRUE4TTFCQyxFQUFZZSxPQUFPZixFQUFZeC9ELFFBRXhCdy9ELEksY0NsUVIsSUFBSTNwRixFQUFJLElBQ0ozQixFQUFRLEdBQUoyQixFQUNKNjNDLEVBQVEsR0FBSng1QyxFQUNKRSxFQUFRLEdBQUpzNUMsRUFDSkksRUFBUSxFQUFKMTVDLEVBQ0p5aUIsRUFBUSxPQUFKemlCLEVBcUpSLFNBQVNvc0YsRUFBTzVsRCxFQUFJNmxELEVBQU9sckYsRUFBR2xCLEdBQzVCLElBQUlxc0YsRUFBV0QsR0FBYSxJQUFKbHJGLEVBQ3hCLE9BQU8rQixLQUFLcXBGLE1BQU0vbEQsRUFBS3JsQyxHQUFLLElBQU1sQixHQUFRcXNGLEVBQVcsSUFBTSxJQXZJN0Q3c0YsRUFBT0QsUUFBVSxTQUFTdUssRUFBS3dFLEdBQzdCQSxFQUFVQSxHQUFXLEdBQ3JCLElBQUloSixTQUFjd0UsRUFDbEIsR0FBYSxXQUFUeEUsR0FBcUJ3RSxFQUFJNUgsT0FBUyxFQUNwQyxPQWtCSixTQUFlNkosR0FFYixJQURBQSxFQUFNNUYsT0FBTzRGLElBQ0w3SixPQUFTLElBQ2YsT0FFRixJQUFJOGdCLEVBQVEsbUlBQW1Jd1IsS0FDN0l6b0IsR0FFRixJQUFLaVgsRUFDSCxPQUVGLElBQUk5aEIsRUFBSXFyRixXQUFXdnBFLEVBQU0sSUFFekIsUUFEWUEsRUFBTSxJQUFNLE1BQU0zRSxlQUU1QixJQUFLLFFBQ0wsSUFBSyxPQUNMLElBQUssTUFDTCxJQUFLLEtBQ0wsSUFBSyxJQUNILE9BQU9uZCxFQUFJc2hCLEVBQ2IsSUFBSyxRQUNMLElBQUssT0FDTCxJQUFLLElBQ0gsT0FBT3RoQixFQUFJdTRDLEVBQ2IsSUFBSyxPQUNMLElBQUssTUFDTCxJQUFLLElBQ0gsT0FBT3Y0QyxFQUFJbkIsRUFDYixJQUFLLFFBQ0wsSUFBSyxPQUNMLElBQUssTUFDTCxJQUFLLEtBQ0wsSUFBSyxJQUNILE9BQU9tQixFQUFJbTRDLEVBQ2IsSUFBSyxVQUNMLElBQUssU0FDTCxJQUFLLE9BQ0wsSUFBSyxNQUNMLElBQUssSUFDSCxPQUFPbjRDLEVBQUlyQixFQUNiLElBQUssVUFDTCxJQUFLLFNBQ0wsSUFBSyxPQUNMLElBQUssTUFDTCxJQUFLLElBQ0gsT0FBT3FCLEVBQUlNLEVBQ2IsSUFBSyxlQUNMLElBQUssY0FDTCxJQUFLLFFBQ0wsSUFBSyxPQUNMLElBQUssS0FDSCxPQUFPTixFQUNULFFBQ0UsUUF2RUsrdUIsQ0FBTW5tQixHQUNSLEdBQWEsV0FBVHhFLEdBQXFCZ2UsU0FBU3haLEdBQ3ZDLE9BQU93RSxFQUFRaytFLEtBMEduQixTQUFpQmptRCxHQUNmLElBQUk2bEQsRUFBUW5wRixLQUFLbW9GLElBQUk3a0QsR0FDckIsR0FBSTZsRCxHQUFTcnNGLEVBQ1gsT0FBT29zRixFQUFPNWxELEVBQUk2bEQsRUFBT3JzRixFQUFHLE9BRTlCLEdBQUlxc0YsR0FBUy95QyxFQUNYLE9BQU84eUMsRUFBTzVsRCxFQUFJNmxELEVBQU8veUMsRUFBRyxRQUU5QixHQUFJK3lDLEdBQVN2c0YsRUFDWCxPQUFPc3NGLEVBQU81bEQsRUFBSTZsRCxFQUFPdnNGLEVBQUcsVUFFOUIsR0FBSXVzRixHQUFTNXFGLEVBQ1gsT0FBTzJxRixFQUFPNWxELEVBQUk2bEQsRUFBTzVxRixFQUFHLFVBRTlCLE9BQU8ra0MsRUFBSyxNQXhIWWttRCxDQUFRM2lGLEdBaUZsQyxTQUFrQnk4QixHQUNoQixJQUFJNmxELEVBQVFucEYsS0FBS21vRixJQUFJN2tELEdBQ3JCLEdBQUk2bEQsR0FBU3JzRixFQUNYLE9BQU9rRCxLQUFLcXBGLE1BQU0vbEQsRUFBS3htQyxHQUFLLElBRTlCLEdBQUlxc0YsR0FBUy95QyxFQUNYLE9BQU9wMkMsS0FBS3FwRixNQUFNL2xELEVBQUs4UyxHQUFLLElBRTlCLEdBQUkreUMsR0FBU3ZzRixFQUNYLE9BQU9vRCxLQUFLcXBGLE1BQU0vbEQsRUFBSzFtQyxHQUFLLElBRTlCLEdBQUl1c0YsR0FBUzVxRixFQUNYLE9BQU95QixLQUFLcXBGLE1BQU0vbEQsRUFBSy9rQyxHQUFLLElBRTlCLE9BQU8ra0MsRUFBSyxLQS9GMkJtbUQsQ0FBUzVpRixHQUVoRCxNQUFNLElBQUkzRixNQUNSLHdEQUNFNkksS0FBS0MsVUFBVW5ELE0saUJDbkNyQixZQUlBLElBQUlzMkIsRUFBVSxFQUFRLElBQ2xCRixFQUFVLEVBQVEsSUFNdEIxZ0MsRUFBT0QsUUFBVXUxRixFQU1qQixJQU9JeGhFLEVBUEF5aEUsRUFBVyxNQUNYQyxFQUFrQixPQVl0QixTQUFTekQsS0FLVCxTQUFTMEQsSUFDUCxNQUF1QixvQkFBVHp5RixLQUF1QkEsS0FDYixvQkFBWDhJLE9BQXlCQSxZQUNkLElBQVhzVyxFQUF5QkEsRUFBUyxHQVVqRCxTQUFTa3pFLEVBQWNwa0UsR0FPckIsR0FOQTBQLEVBQVF4Z0MsS0FBS29HLEtBQU0wcUIsR0FFbkIxcUIsS0FBS3NyQixNQUFRdHJCLEtBQUtzckIsT0FBUyxJQUl0QmdDLEVBQVcsQ0FFZCxJQUFJMVIsRUFBU3F6RSxJQUNiM2hFLEVBQVkxUixFQUFPc3pFLE9BQVV0ekUsRUFBT3N6RSxRQUFVLEdBSWhEbHZGLEtBQUtmLE1BQVFxdUIsRUFBVXB4QixPQUd2QixJQUFJTSxFQUFPd0QsS0FDWHN0QixFQUFVdHVCLE1BQUssU0FBVW1QLEdBQ3ZCM1IsRUFBS3V3QixPQUFPNWUsTUFJZG5PLEtBQUtzckIsTUFBTXJpQixFQUFJakosS0FBS2YsTUFHWSxtQkFBckJpdUIsa0JBQ1RBLGlCQUFpQixnQkFBZ0IsV0FDM0Ixd0IsRUFBSytoQyxTQUFRL2hDLEVBQUsraEMsT0FBT3pLLFFBQVV5M0QsTUFDdEMsR0FRUHJ4RCxFQUFRNDBELEVBQWMxMEQsR0FNdEIwMEQsRUFBYXp6RixVQUFVaVQsZ0JBQWlCLEVBUXhDd2dGLEVBQWF6ekYsVUFBVXN4QixRQUFVLFdBQzNCM3NCLEtBQUt1K0IsU0FDUHYrQixLQUFLdStCLE9BQU96ekIsV0FBV1IsWUFBWXRLLEtBQUt1K0IsUUFDeEN2K0IsS0FBS3UrQixPQUFTLE1BR1p2K0IsS0FBSzYwRSxPQUNQNzBFLEtBQUs2MEUsS0FBSy9wRSxXQUFXUixZQUFZdEssS0FBSzYwRSxNQUN0QzcwRSxLQUFLNjBFLEtBQU8sS0FDWjcwRSxLQUFLbXZGLE9BQVMsTUFHaEIvMEQsRUFBUS8rQixVQUFVc3hCLFFBQVEveUIsS0FBS29HLE9BU2pDOHVGLEVBQWF6ekYsVUFBVXEvQixPQUFTLFdBQzlCLElBQUlsK0IsRUFBT3dELEtBQ1B1K0IsRUFBU2g1QixTQUFTK0QsY0FBYyxVQUVoQ3RKLEtBQUt1K0IsU0FDUHYrQixLQUFLdStCLE9BQU96ekIsV0FBV1IsWUFBWXRLLEtBQUt1K0IsUUFDeEN2K0IsS0FBS3UrQixPQUFTLE1BR2hCQSxFQUFPaWhELE9BQVEsRUFDZmpoRCxFQUFPN2MsSUFBTTFoQixLQUFLbTFCLE1BQ2xCb0osRUFBT3pLLFFBQVUsU0FBVWp6QixHQUN6QnJFLEVBQUsrdkIsUUFBUSxtQkFBb0IxckIsSUFHbkMsSUFBSXV1RixFQUFXN3BGLFNBQVM4cEYscUJBQXFCLFVBQVUsR0FDbkRELEVBQ0ZBLEVBQVN0a0YsV0FBV1AsYUFBYWcwQixFQUFRNndELElBRXhDN3BGLFNBQVM2QyxNQUFRN0MsU0FBUzg0QixNQUFNMTBCLFlBQVk0MEIsR0FFL0N2K0IsS0FBS3UrQixPQUFTQSxFQUVFLG9CQUF1Qm41QixXQUFhLFNBQVMySCxLQUFLM0gsVUFBVTRILFlBRzFFd0gsWUFBVyxXQUNULElBQUkyNkUsRUFBUzVwRixTQUFTK0QsY0FBYyxVQUNwQy9ELFNBQVM4NEIsS0FBSzEwQixZQUFZd2xGLEdBQzFCNXBGLFNBQVM4NEIsS0FBSy96QixZQUFZNmtGLEtBQ3pCLE1BWVBMLEVBQWF6ekYsVUFBVXUvQixRQUFVLFNBQVUxekIsRUFBTWpELEdBQy9DLElBQUl6SCxFQUFPd0QsS0FFWCxJQUFLQSxLQUFLNjBFLEtBQU0sQ0FDZCxJQUdJc2EsRUFIQXRhLEVBQU90dkUsU0FBUytELGNBQWMsUUFDOUIyMUIsRUFBTzE1QixTQUFTK0QsY0FBYyxZQUM5QmIsRUFBS3pJLEtBQUtzdkYsU0FBVyxjQUFnQnR2RixLQUFLZixNQUc5QzQxRSxFQUFLMGEsVUFBWSxXQUNqQjFhLEVBQUt4ckUsTUFBTW1tRixTQUFXLFdBQ3RCM2EsRUFBS3hyRSxNQUFNaXBFLElBQU0sVUFDakJ1QyxFQUFLeHJFLE1BQU0rb0UsS0FBTyxVQUNsQnlDLEVBQUs3NEUsT0FBU3lNLEVBQ2Rvc0UsRUFBS3RpRCxPQUFTLE9BQ2RzaUQsRUFBS3ByRSxhQUFhLGlCQUFrQixTQUNwQ3cxQixFQUFLamxDLEtBQU8sSUFDWjY2RSxFQUFLbHJFLFlBQVlzMUIsR0FDakIxNUIsU0FBUzg0QixLQUFLMTBCLFlBQVlrckUsR0FFMUI3MEUsS0FBSzYwRSxLQUFPQSxFQUNaNzBFLEtBQUtpL0IsS0FBT0EsRUFLZCxTQUFTb2hELElBQ1BvUCxJQUNBeHJGLElBR0YsU0FBU3dyRixJQUNQLEdBQUlqekYsRUFBSzJ5RixPQUNQLElBQ0UzeUYsRUFBS3E0RSxLQUFLdnFFLFlBQVk5TixFQUFLMnlGLFFBQzNCLE1BQU90dUYsR0FDUHJFLEVBQUsrdkIsUUFBUSxxQ0FBc0MxckIsR0FJdkQsSUFFRSxJQUFJNGdELEVBQU8sb0NBQXNDamxELEVBQUs4eUYsU0FBVyxLQUNqRUgsRUFBUzVwRixTQUFTK0QsY0FBY200QyxHQUNoQyxNQUFPNWdELElBQ1BzdUYsRUFBUzVwRixTQUFTK0QsY0FBYyxXQUN6QnRQLEtBQU93QyxFQUFLOHlGLFNBQ25CSCxFQUFPenRFLElBQU0sZUFHZnl0RSxFQUFPMW1GLEdBQUtqTSxFQUFLOHlGLFNBRWpCOXlGLEVBQUtxNEUsS0FBS2xyRSxZQUFZd2xGLEdBQ3RCM3lGLEVBQUsyeUYsT0FBU0EsRUE3QmhCbnZGLEtBQUs2MEUsS0FBS3gxRSxPQUFTVyxLQUFLbTFCLE1BZ0N4QnM2RCxJQUlBdm9GLEVBQU9BLEVBQUtsQixRQUFRZ3BGLEVBQWlCLFFBQ3JDaHZGLEtBQUtpL0IsS0FBS3ZrQyxNQUFRd00sRUFBS2xCLFFBQVErb0YsRUFBVSxPQUV6QyxJQUNFL3VGLEtBQUs2MEUsS0FBSzZhLFNBQ1YsTUFBTzd1RixJQUVMYixLQUFLbXZGLE9BQU8vMEIsWUFDZHA2RCxLQUFLbXZGLE9BQU85N0QsbUJBQXFCLFdBQ0EsYUFBM0I3MkIsRUFBSzJ5RixPQUFPMWpFLFlBQ2Q0MEQsS0FJSnJnRixLQUFLbXZGLE9BQU9sZ0YsT0FBU294RSxLLG1DQzVPekIsWUFJQSxJQU9Jc1AsRUFBa0JDLEVBUGxCM2tFLEVBQVksRUFBUSxJQUNwQkQsRUFBUyxFQUFRLElBQ2pCaVAsRUFBVSxFQUFRLElBQ2xCQyxFQUFVLEVBQVEsSUFDbEJDLEVBQVEsRUFBUSxJQUNoQmpTLEVBQVEsRUFBUSxHQUFSLENBQWlCLDhCQVU3QixHQU55QixvQkFBZDJuRSxVQUNURixFQUFtQkUsVUFDTSxvQkFBVHJ6RixPQUNoQm16RixFQUFtQm56RixLQUFLcXpGLFdBQWFyekYsS0FBS3N6RixjQUd0QixvQkFBWHhxRixPQUNULElBQ0VzcUYsRUFBZ0IsRUFBUSxLQUN4QixNQUFPL3VGLElBU1gsSUFBSWt2RixFQUFnQkosR0FBb0JDLEVBZXhDLFNBQVNJLEVBQUl0bEUsR0FDUUEsR0FBUUEsRUFBSzRQLGNBRTlCdDZCLEtBQUtzTyxnQkFBaUIsR0FFeEJ0TyxLQUFLc3BGLGtCQUFvQjUrRCxFQUFLNCtELGtCQUM5QnRwRixLQUFLaXdGLHNCQUF3Qk4sSUFBcUJqbEUsRUFBS3lCLFVBQ3ZEbnNCLEtBQUttcUYsVUFBWXovRCxFQUFLeS9ELFVBQ2pCbnFGLEtBQUtpd0Ysd0JBQ1JGLEVBQWdCSCxHQUVsQjNrRSxFQUFVcnhCLEtBQUtvRyxLQUFNMHFCLEdBcEJ2Qmx4QixFQUFPRCxRQUFVeTJGLEVBMkJqQjkxRCxFQUFRODFELEVBQUkva0UsR0FRWitrRSxFQUFHMzBGLFVBQVVyQixLQUFPLFlBTXBCZzJGLEVBQUczMEYsVUFBVWlULGdCQUFpQixFQVE5QjBoRixFQUFHMzBGLFVBQVVxeEIsT0FBUyxXQUNwQixHQUFLMXNCLEtBQUtrd0YsUUFBVixDQUtBLElBQUkvNkQsRUFBTW4xQixLQUFLbTFCLE1BQ1hnMUQsRUFBWW5xRixLQUFLbXFGLFVBQ2pCei9ELEVBQU8sQ0FDVGdCLE1BQU8xckIsS0FBSzByQixNQUNaNDlELGtCQUFtQnRwRixLQUFLc3BGLG1CQUkxQjUrRCxFQUFLbUIsSUFBTTdyQixLQUFLNnJCLElBQ2hCbkIsRUFBSzF2QixJQUFNZ0YsS0FBS2hGLElBQ2hCMHZCLEVBQUtvQixXQUFhOXJCLEtBQUs4ckIsV0FDdkJwQixFQUFLcUIsS0FBTy9yQixLQUFLK3JCLEtBQ2pCckIsRUFBS3NCLEdBQUtoc0IsS0FBS2dzQixHQUNmdEIsRUFBS3VCLFFBQVVqc0IsS0FBS2lzQixRQUNwQnZCLEVBQUt3QixtQkFBcUJsc0IsS0FBS2tzQixtQkFDM0Jsc0IsS0FBS3FzQixlQUNQM0IsRUFBS2tILFFBQVU1eEIsS0FBS3FzQixjQUVsQnJzQixLQUFLc3NCLGVBQ1A1QixFQUFLNEIsYUFBZXRzQixLQUFLc3NCLGNBRzNCLElBQ0V0c0IsS0FBS213RixHQUNIbndGLEtBQUtpd0Ysd0JBQTBCandGLEtBQUtvc0IsY0FDaEMrOUQsRUFDRSxJQUFJNEYsRUFBYzU2RCxFQUFLZzFELEdBQ3ZCLElBQUk0RixFQUFjNTZELEdBQ3BCLElBQUk0NkQsRUFBYzU2RCxFQUFLZzFELEVBQVd6L0QsR0FDeEMsTUFBT3JlLEdBQ1AsT0FBT3JNLEtBQUttVyxLQUFLLFFBQVM5SixRQUdEak8sSUFBdkI0QixLQUFLbXdGLEdBQUdsZ0YsYUFDVmpRLEtBQUtzTyxnQkFBaUIsR0FHcEJ0TyxLQUFLbXdGLEdBQUdDLFVBQVlwd0YsS0FBS213RixHQUFHQyxTQUFTaG9FLFFBQ3ZDcG9CLEtBQUtzTyxnQkFBaUIsRUFDdEJ0TyxLQUFLbXdGLEdBQUdsZ0YsV0FBYSxjQUVyQmpRLEtBQUttd0YsR0FBR2xnRixXQUFhLGNBR3ZCalEsS0FBS3F3RixzQkFTUEwsRUFBRzMwRixVQUFVZzFGLGtCQUFvQixXQUMvQixJQUFJN3pGLEVBQU93RCxLQUVYQSxLQUFLbXdGLEdBQUdqNEQsT0FBUyxXQUNmMTdCLEVBQUtzd0IsVUFFUDlzQixLQUFLbXdGLEdBQUdsM0QsUUFBVSxXQUNoQno4QixFQUFLb3dCLFdBRVA1c0IsS0FBS213RixHQUFHOVksVUFBWSxTQUFVNTZDLEdBQzVCamdDLEVBQUt1d0IsT0FBTzBQLEVBQUd2MUIsT0FFakJsSCxLQUFLbXdGLEdBQUdyOEQsUUFBVSxTQUFVanpCLEdBQzFCckUsRUFBSyt2QixRQUFRLGtCQUFtQjFyQixLQVdwQ212RixFQUFHMzBGLFVBQVV1YyxNQUFRLFNBQVV4SyxHQUM3QixJQUFJNVEsRUFBT3dELEtBQ1hBLEtBQUtyRSxVQUFXLEVBS2hCLElBREEsSUFBSTJXLEVBQVFsRixFQUFRbFIsT0FDWHpDLEVBQUksRUFBR0MsRUFBSTRZLEVBQU83WSxFQUFJQyxFQUFHRCxLQUNoQyxTQUFXNFUsR0FDVDJjLEVBQU81YyxhQUFhQyxFQUFRN1IsRUFBSzhSLGdCQUFnQixTQUFVcEgsR0FDekQsSUFBSzFLLEVBQUt5ekYsc0JBQXVCLENBRS9CLElBQUl2bEUsRUFBTyxHQUtYLEdBSklyYyxFQUFPL0YsVUFDVG9pQixFQUFLZ1MsU0FBV3J1QixFQUFPL0YsUUFBUW8wQixVQUc3QmxnQyxFQUFLOHNGLG1CQUNHLGlCQUFvQnBpRixFQUFPMlAsRUFBT2hJLFdBQVczSCxHQUFRQSxFQUFLaEwsUUFDMURNLEVBQUs4c0Ysa0JBQWtCQyxZQUMvQjcrRCxFQUFLZ1MsVUFBVyxHQVF0QixJQUNNbGdDLEVBQUt5ekYsc0JBRVB6ekYsRUFBSzJ6RixHQUFHdGpFLEtBQUszbEIsR0FFYjFLLEVBQUsyekYsR0FBR3RqRSxLQUFLM2xCLEVBQU13akIsR0FFckIsTUFBTzdwQixHQUNQcW5CLEVBQU0sMkNBR041VixHQUFTcEcsT0EvQmYsQ0FpQ0drQixFQUFRM1QsSUFHYixTQUFTeVMsSUFDUDFQLEVBQUsyWixLQUFLLFNBSVYzQixZQUFXLFdBQ1RoWSxFQUFLYixVQUFXLEVBQ2hCYSxFQUFLMlosS0FBSyxXQUNULEtBVVA2NUUsRUFBRzMwRixVQUFVdXhCLFFBQVUsV0FDckIzQixFQUFVNXZCLFVBQVV1eEIsUUFBUWh6QixLQUFLb0csT0FTbkNnd0YsRUFBRzMwRixVQUFVc3hCLFFBQVUsZ0JBQ0UsSUFBWjNzQixLQUFLbXdGLElBQ2Rud0YsS0FBS213RixHQUFHN2lGLFNBVVowaUYsRUFBRzMwRixVQUFVODVCLElBQU0sV0FDakIsSUFBSTdKLEVBQVF0ckIsS0FBS3NyQixPQUFTLEdBQ3RCdVAsRUFBUzc2QixLQUFLcXJCLE9BQVMsTUFBUSxLQUMvQkQsRUFBTyxHQTBCWCxPQXZCSXByQixLQUFLb3JCLE9BQVUsUUFBVXlQLEdBQWdDLE1BQXRCcnFCLE9BQU94USxLQUFLb3JCLE9BQ2hELE9BQVN5UCxHQUFnQyxLQUF0QnJxQixPQUFPeFEsS0FBS29yQixTQUNoQ0EsRUFBTyxJQUFNcHJCLEtBQUtvckIsTUFJaEJwckIsS0FBS3dyQixvQkFDUEYsRUFBTXRyQixLQUFLdXJCLGdCQUFrQjRPLEtBSTFCbjZCLEtBQUtzTyxpQkFDUmdkLEVBQU0zYixJQUFNLElBR2QyYixFQUFRMk8sRUFBUXpxQixPQUFPOGIsSUFHYnB2QixTQUNSb3ZCLEVBQVEsSUFBTUEsR0FJVHVQLEVBQVMsUUFEMkIsSUFBaEM3NkIsS0FBS21yQixTQUFTanNCLFFBQVEsS0FDRCxJQUFNYyxLQUFLbXJCLFNBQVcsSUFBTW5yQixLQUFLbXJCLFVBQVlDLEVBQU9wckIsS0FBS2tyQixLQUFPSSxHQVVsRzBrRSxFQUFHMzBGLFVBQVU2MEYsTUFBUSxXQUNuQixTQUFTSCxHQUFtQixpQkFBa0JBLEdBQWlCL3ZGLEtBQUtoRyxPQUFTZzJGLEVBQUczMEYsVUFBVXJCLFMsdURDclM1RlIsRUFBT0QsUUFFUCxTQUFpQitNLEVBQU1ySCxHQUtuQixJQUpBLElBQUlvVyxFQUFRLEdBSUg1YixHQUZUd0YsRUFBUUEsR0FBUyxJQUVLLEVBQUd4RixFQUFJNk0sRUFBS3BLLE9BQVF6QyxJQUN0QzRiLEVBQU01YixFQUFJd0YsR0FBU3FILEVBQUs3TSxHQUc1QixPQUFPNGIsSSxjQ1FYLFNBQVNzZ0IsRUFBUWpMLEdBQ2ZBLEVBQU9BLEdBQVEsR0FDZjFxQixLQUFLdWdDLEdBQUs3VixFQUFLN1AsS0FBTyxJQUN0QjdhLEtBQUsrYyxJQUFNMk4sRUFBSzNOLEtBQU8sSUFDdkIvYyxLQUFLc3dGLE9BQVM1bEUsRUFBSzRsRSxRQUFVLEVBQzdCdHdGLEtBQUtzMkIsT0FBUzVMLEVBQUs0TCxPQUFTLEdBQUs1TCxFQUFLNEwsUUFBVSxFQUFJNUwsRUFBSzRMLE9BQVMsRUFDbEV0MkIsS0FBSzYzQixTQUFXLEVBcEJsQnIrQixFQUFPRCxRQUFVbzhCLEVBOEJqQkEsRUFBUXQ2QixVQUFVKzlCLFNBQVcsV0FDM0IsSUFBSW1ILEVBQUt2Z0MsS0FBS3VnQyxHQUFLdGpDLEtBQUtnaUIsSUFBSWpmLEtBQUtzd0YsT0FBUXR3RixLQUFLNjNCLFlBQzlDLEdBQUk3M0IsS0FBS3MyQixPQUFRLENBQ2YsSUFBSWk2RCxFQUFRdHpGLEtBQUtDLFNBQ2JzekYsRUFBWXZ6RixLQUFLOGlCLE1BQU13d0UsRUFBT3Z3RixLQUFLczJCLE9BQVNpSyxHQUNoREEsRUFBb0MsSUFBTixFQUF4QnRqQyxLQUFLOGlCLE1BQWEsR0FBUHd3RSxJQUF3Qmh3RCxFQUFLaXdELEVBQVlqd0QsRUFBS2l3RCxFQUVqRSxPQUFnQyxFQUF6QnZ6RixLQUFLNGQsSUFBSTBsQixFQUFJdmdDLEtBQUsrYyxNQVMzQjRZLEVBQVF0NkIsVUFBVTI5QixNQUFRLFdBQ3hCaDVCLEtBQUs2M0IsU0FBVyxHQVNsQmxDLEVBQVF0NkIsVUFBVWc4QixPQUFTLFNBQVN4YyxHQUNsQzdhLEtBQUt1Z0MsR0FBSzFsQixHQVNaOGEsRUFBUXQ2QixVQUFVbzhCLE9BQVMsU0FBUzFhLEdBQ2xDL2MsS0FBSytjLElBQU1BLEdBU2I0WSxFQUFRdDZCLFVBQVVrOEIsVUFBWSxTQUFTakIsR0FDckN0MkIsS0FBS3MyQixPQUFTQSxJLGNDeEVoQjk4QixFQUFPRCxRQVZQLFNBQTRCNk0sR0FDMUIsR0FBSTFELE1BQU1tQixRQUFRdUMsR0FBTSxDQUN0QixJQUFLLElBQUkzTSxFQUFJLEVBQUdzckYsRUFBTyxJQUFJcmlGLE1BQU0wRCxFQUFJbEssUUFBU3pDLEVBQUkyTSxFQUFJbEssT0FBUXpDLElBQzVEc3JGLEVBQUt0ckYsR0FBSzJNLEVBQUkzTSxHQUdoQixPQUFPc3JGLEssY0NGWHZyRixFQUFPRCxRQUpQLFNBQTBCa21GLEdBQ3hCLEdBQUlqbEYsT0FBT3E1QyxZQUFZMTVDLE9BQU9zbEYsSUFBa0QsdUJBQXpDdGxGLE9BQU9rQixVQUFVOEIsU0FBU3ZELEtBQUs2bEYsR0FBZ0MsT0FBTy84RSxNQUFNMFUsS0FBS3FvRSxLLGNDRzFIam1GLEVBQU9ELFFBSlAsV0FDRSxNQUFNLElBQUl1QyxVQUFVLHFELGdCQ0R0QixJQUFJMEssRUFBVSxFQUFRLEtBR0MsaUJBRnZCQSxFQUFVQSxFQUFRM0wsV0FBYTJMLEVBQVFtZSxRQUFVbmUsS0FHL0NBLEVBQVUsQ0FBQyxDQUFDaE4sRUFBT0MsRUFBSStNLEVBQVMsTUFHbEMsSUFBSThCLEVBQVUsQ0FFZCxPQUFpQixPQUNqQixXQUFvQixHQUVQLEVBQVEsR0FBUixDQUF3RjlCLEVBQVM4QixHQUUxRzlCLEVBQVF3MEUsU0FDVnhoRixFQUFPRCxRQUFVaU4sRUFBUXcwRSxTLGlCQ2IzQnpoRixFQURrQyxFQUFRLEdBQ2hDMGhGLEVBQTRCLElBRTlCajhFLEtBQUssQ0FBQ3hGLEVBQU9DLEVBQUksaVhBQWtYLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLDhFQUE4RSxNQUFRLEdBQUcsU0FBVywwTEFBMEwsS0FBTyxZQUFZLGVBQWlCLENBQUMsdVpBRXp1QkQsRUFBT0QsUUFBVUEsRyxnQkNOakIsSUFBSWlOLEVBQVUsRUFBUSxLQUdDLGlCQUZ2QkEsRUFBVUEsRUFBUTNMLFdBQWEyTCxFQUFRbWUsUUFBVW5lLEtBRy9DQSxFQUFVLENBQUMsQ0FBQ2hOLEVBQU9DLEVBQUkrTSxFQUFTLE1BR2xDLElBQUk4QixFQUFVLENBRWQsT0FBaUIsT0FDakIsV0FBb0IsR0FFUCxFQUFRLEdBQVIsQ0FBMkY5QixFQUFTOEIsR0FFN0c5QixFQUFRdzBFLFNBQ1Z4aEYsRUFBT0QsUUFBVWlOLEVBQVF3MEUsUyxpQkNiM0J6aEYsRUFEa0MsRUFBUSxHQUNoQzBoRixFQUE0QixJQUU5Qmo4RSxLQUFLLENBQUN4RixFQUFPQyxFQUFJLHNsSUFBdWxJLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLG1GQUFtRixNQUFRLEdBQUcsU0FBVywybERBQTJsRCxLQUFPLFlBQVksZUFBaUIsQ0FBQyxrbkxBRXAzTEQsRUFBT0QsUUFBVUEsRyw2QkNKakJZLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUMzQ21CLE9BQU8sSUFFVG5CLEVBQVFvckIsUUFRUixTQUF5QitJLEdBQ3ZCLE1BQXFCLFNBQWRBLEVBQUtwdUIsTUFBbUIsUUFBUXlOLEtBQUsyZ0IsRUFBS3htQixPQUE4QixLQUFyQndtQixFQUFLeG1CLEtBQUtwQixTLDZCQ1J0RSxJQUFJMnFGLEVBSkp0MkYsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQzNDbUIsT0FBTyxJQUtULElBQUl5NEMsRUFBYyxFQUFRLElBSXRCdTlDLEVBQW9CMW9FLEVBRkQsRUFBUSxNQU0zQjJvRSxFQUFtQjNvRSxFQUZELEVBQVEsTUFNMUI0b0UsRUFBcUI1b0UsRUFGRCxFQUFRLE1BTTVCNm9FLEVBQTJCN29FLEVBRkQsRUFBUSxNQUl0QyxTQUFTQSxFQUF1QnZzQixHQUFPLE9BQU9BLEdBQU9BLEVBQUlaLFdBQWFZLEVBQU0sQ0FBRWtwQixRQUFTbHBCLEdBRXZGLFNBQVNtRyxFQUFnQm5HLEVBQUtULEVBQUtOLEdBQWlLLE9BQXBKTSxLQUFPUyxFQUFPdEIsT0FBT0MsZUFBZXFCLEVBQUtULEVBQUssQ0FBRU4sTUFBT0EsRUFBT0wsWUFBWSxFQUFNcUIsY0FBYyxFQUFNQyxVQUFVLElBQWtCRixFQUFJVCxHQUFPTixFQUFnQmUsRUFNM01sQyxFQUFRb3JCLFNBQXVDL2lCLEVBQTVCNnVGLEVBQXdCLEdBQTJDdDlDLEVBQVl4Z0MsWUFBWWlQLEtBQU04dUUsRUFBa0IvckUsU0FBVS9pQixFQUFnQjZ1RixFQUF1QnQ5QyxFQUFZeGdDLFlBQVlzUCxJQUFLMHVFLEVBQWlCaHNFLFNBQVUvaUIsRUFBZ0I2dUYsRUFBdUJ0OUMsRUFBWXhnQyxZQUFZcVAsTUFBTzR1RSxFQUFtQmpzRSxTQUFVL2lCLEVBQWdCNnVGLEVBQXVCdDlDLEVBQVl4Z0MsWUFBWWtQLFVBQVdndkUsRUFBeUJsc0UsU0FBVS9pQixFQUFnQjZ1RixFQUF1QnQ5QyxFQUFZeGdDLFlBQVltUCxRQUFTK3VFLEVBQXlCbHNFLFNBQVUvaUIsRUFBZ0I2dUYsRUFBdUJ0OUMsRUFBWXhnQyxZQUFZb1AsT0FBUTh1RSxFQUF5QmxzRSxTQUFVL2lCLEVBQWdCNnVGLEVBQXVCdDlDLEVBQVl4Z0MsWUFBWXVQLE1BQU8ydUUsRUFBeUJsc0UsU0FBVS9pQixFQUFnQjZ1RixFQUF1QnQ5QyxFQUFZeGdDLFlBQVl3UCxRQUFTMHVFLEVBQXlCbHNFLFNBQVU4ckUsSSxnQkNsQ3gyQixJQUFJSyxFQUFZLEVBQVEsS0FFeEJ0M0YsRUFBT0QsUUFHUCxTQUF5QjZoQixHQUNyQixHQUFLQSxHQUFhLE9BQVVBLEdBQWEsT0FBV0EsRUFBWSxRQUM1RCxNQUFPLElBR1BBLEtBQWEwMUUsSUFDYjExRSxFQUFZMDFFLEVBQVUxMUUsSUFHMUIsSUFBSTJqQixFQUFTLEdBRVQzakIsRUFBWSxRQUNaQSxHQUFhLE1BQ2IyakIsR0FBVTUrQixPQUFPMFAsYUFBZXVMLElBQWMsR0FBTSxLQUFTLE9BQzdEQSxFQUFZLE1BQXNCLEtBQVpBLEdBSTFCLE9BREEyakIsR0FBVTUrQixPQUFPMFAsYUFBYXVMLEssOHI4QkNDbEMsSUFPSTIxRSxFQVBBOTZDLEVBQXVCLGlCQUFaKzZDLFFBQXVCQSxRQUFVLEtBQzVDQyxFQUFlaDdDLEdBQXdCLG1CQUFaQSxFQUFFejBDLE1BQzdCeTBDLEVBQUV6MEMsTUFDRixTQUFzQnhGLEVBQVFrMUYsRUFBVTFsRixHQUN4QyxPQUFPcVosU0FBU3hwQixVQUFVbUcsTUFBTTVILEtBQUtvQyxFQUFRazFGLEVBQVUxbEYsSUFLekR1bEYsRUFERTk2QyxHQUEwQixtQkFBZEEsRUFBRXAwQyxRQUNDbzBDLEVBQUVwMEMsUUFDVjFILE9BQU80SCxzQkFDQyxTQUF3Qi9GLEdBQ3ZDLE9BQU83QixPQUFPMHBCLG9CQUFvQjduQixHQUMvQm1MLE9BQU9oTixPQUFPNEgsc0JBQXNCL0YsS0FHeEIsU0FBd0JBLEdBQ3ZDLE9BQU83QixPQUFPMHBCLG9CQUFvQjduQixJQVF0QyxJQUFJbTFGLEVBQWMzZ0YsT0FBT3dJLE9BQVMsU0FBcUJ0ZSxHQUNyRCxPQUFPQSxHQUFVQSxHQUduQixTQUFTbW5DLElBQ1BBLEVBQWE2akQsS0FBSzlyRixLQUFLb0csTUFFekJ4RyxFQUFPRCxRQUFVc29DLEVBR2pCQSxFQUFhQSxhQUFlQSxFQUU1QkEsRUFBYXhtQyxVQUFVKzFGLGFBQVVoekYsRUFDakN5akMsRUFBYXhtQyxVQUFVZzJGLGFBQWUsRUFDdEN4dkQsRUFBYXhtQyxVQUFVaTJGLG1CQUFnQmx6RixFQUl2QyxJQUFJbXpGLEVBQXNCLEdBb0MxQixTQUFTQyxFQUFpQng2RSxHQUN4QixZQUEyQjVZLElBQXZCNFksRUFBS3M2RSxjQUNBenZELEVBQWEwdkQsb0JBQ2Z2NkUsRUFBS3M2RSxjQW1EZCxTQUFTRyxFQUFhejFGLEVBQVFzRCxFQUFNUixFQUFVNHlGLEdBQzVDLElBQUk3M0YsRUFDQTZoQyxFQUNBaTJELEVBbkhzQkMsRUFxSDFCLEdBQXdCLG1CQUFiOXlGLEVBQ1QsTUFBTSxJQUFJaEQsVUFBVSwwRUFBNEVnRCxHQXFCbEcsUUFqQmVWLEtBRGZzOUIsRUFBUzEvQixFQUFPbzFGLFVBRWQxMUQsRUFBUzEvQixFQUFPbzFGLFFBQVVqM0YsT0FBT1ksT0FBTyxNQUN4Q2lCLEVBQU9xMUYsYUFBZSxTQUlLanpGLElBQXZCczlCLEVBQU9tMkQsY0FDVDcxRixFQUFPbWEsS0FBSyxjQUFlN1csRUFDZlIsRUFBU0EsU0FBV0EsRUFBU0EsU0FBV0EsR0FJcEQ0OEIsRUFBUzEvQixFQUFPbzFGLFNBRWxCTyxFQUFXajJELEVBQU9wOEIsU0FHSGxCLElBQWJ1ekYsRUFFRkEsRUFBV2oyRCxFQUFPcDhCLEdBQVFSLElBQ3hCOUMsRUFBT3ExRixrQkFlVCxHQWJ3QixtQkFBYk0sRUFFVEEsRUFBV2oyRCxFQUFPcDhCLEdBQ2hCb3lGLEVBQVUsQ0FBQzV5RixFQUFVNnlGLEdBQVksQ0FBQ0EsRUFBVTd5RixHQUVyQzR5RixFQUNUQyxFQUFTN25FLFFBQVFockIsR0FFakI2eUYsRUFBUzN5RixLQUFLRixJQUloQmpGLEVBQUkyM0YsRUFBaUJ4MUYsSUFDYixHQUFLMjFGLEVBQVN6MUYsT0FBU3JDLElBQU04M0YsRUFBU0csT0FBUSxDQUNwREgsRUFBU0csUUFBUyxFQUdsQixJQUFJcitDLEVBQUksSUFBSXQxQyxNQUFNLCtDQUNFd3pGLEVBQVN6MUYsT0FBUyxJQUFNaUUsT0FBT2IsR0FBUSxxRUFHM0RtMEMsRUFBRXo1QyxLQUFPLDhCQUNUeTVDLEVBQUVzK0MsUUFBVS8xRixFQUNaeTNDLEVBQUVuMEMsS0FBT0EsRUFDVG0wQyxFQUFFdUMsTUFBUTI3QyxFQUFTejFGLE9BeEtHMDFGLEVBeUtIbitDLEVBeEtuQmpuQyxTQUFXQSxRQUFRd2xGLE1BQU14bEYsUUFBUXdsRixLQUFLSixHQTRLMUMsT0FBTzUxRixFQWNULFNBQVNpMkYsSUFFUCxJQURBLElBQUl6bUYsRUFBTyxHQUNGL1IsRUFBSSxFQUFHQSxFQUFJeUUsVUFBVWhDLE9BQVF6QyxJQUFLK1IsRUFBS3hNLEtBQUtkLFVBQVV6RSxJQUMxRHVHLEtBQUtreUYsUUFDUmx5RixLQUFLaEUsT0FBT2lhLGVBQWVqVyxLQUFLVixLQUFNVSxLQUFLbXlGLFFBQzNDbnlGLEtBQUtreUYsT0FBUSxFQUNiakIsRUFBYWp4RixLQUFLbEIsU0FBVWtCLEtBQUtoRSxPQUFRd1AsSUFJN0MsU0FBUzRtRixFQUFVcDJGLEVBQVFzRCxFQUFNUixHQUMvQixJQUFJZ0MsRUFBUSxDQUFFb3hGLE9BQU8sRUFBT0MsWUFBUS96RixFQUFXcEMsT0FBUUEsRUFBUXNELEtBQU1BLEVBQU1SLFNBQVVBLEdBQ2pGdXpGLEVBQVVKLEVBQVloM0YsS0FBSzZGLEdBRy9CLE9BRkF1eEYsRUFBUXZ6RixTQUFXQSxFQUNuQmdDLEVBQU1xeEYsT0FBU0UsRUFDUkEsRUFnSVQsU0FBU0MsRUFBV3QyRixFQUFRc0QsRUFBTWl6RixHQUNoQyxJQUFJNzJELEVBQVMxL0IsRUFBT28xRixRQUVwQixRQUFlaHpGLElBQVhzOUIsRUFDRixNQUFPLEdBRVQsSUFBSTgyRCxFQUFhOTJELEVBQU9wOEIsR0FDeEIsWUFBbUJsQixJQUFmbzBGLEVBQ0ssR0FFaUIsbUJBQWZBLEVBQ0ZELEVBQVMsQ0FBQ0MsRUFBVzF6RixVQUFZMHpGLEdBQWMsQ0FBQ0EsR0FFbERELEVBc0RULFNBQXlCbnNGLEdBRXZCLElBREEsSUFBSXFYLEVBQU0sSUFBSS9hLE1BQU0wRCxFQUFJbEssUUFDZnpDLEVBQUksRUFBR0EsRUFBSWdrQixFQUFJdmhCLFNBQVV6QyxFQUNoQ2drQixFQUFJaGtCLEdBQUsyTSxFQUFJM00sR0FBR3FGLFVBQVlzSCxFQUFJM00sR0FFbEMsT0FBT2drQixFQTFETGcxRSxDQUFnQkQsR0FBY0UsRUFBV0YsRUFBWUEsRUFBV3QyRixRQW9CcEUsU0FBU3kyRixFQUFjcnpGLEdBQ3JCLElBQUlvOEIsRUFBUzE3QixLQUFLb3hGLFFBRWxCLFFBQWVoekYsSUFBWHM5QixFQUFzQixDQUN4QixJQUFJODJELEVBQWE5MkQsRUFBT3A4QixHQUV4QixHQUEwQixtQkFBZmt6RixFQUNULE9BQU8sRUFDRixRQUFtQnAwRixJQUFmbzBGLEVBQ1QsT0FBT0EsRUFBV3QyRixPQUl0QixPQUFPLEVBT1QsU0FBU3cyRixFQUFXdHNGLEVBQUtsTCxHQUV2QixJQURBLElBQUk2YyxFQUFPLElBQUlyVixNQUFNeEgsR0FDWnpCLEVBQUksRUFBR0EsRUFBSXlCLElBQUt6QixFQUN2QnNlLEVBQUt0ZSxHQUFLMk0sRUFBSTNNLEdBQ2hCLE9BQU9zZSxFQTVXVDVkLE9BQU9DLGVBQWV5bkMsRUFBYyxzQkFBdUIsQ0FDekR4bkMsWUFBWSxFQUNaQyxJQUFLLFdBQ0gsT0FBT2kzRixHQUVUcndFLElBQUssU0FBU3ZlLEdBQ1osR0FBbUIsaUJBQVJBLEdBQW9CQSxFQUFNLEdBQUt3dUYsRUFBWXh1RixHQUNwRCxNQUFNLElBQUlzVSxXQUFXLGtHQUFvR3RVLEVBQU0sS0FFakk0dUYsRUFBc0I1dUYsS0FJMUJrL0IsRUFBYTZqRCxLQUFPLGdCQUVHdG5GLElBQWpCNEIsS0FBS294RixTQUNMcHhGLEtBQUtveEYsVUFBWWozRixPQUFPd0MsZUFBZXFELE1BQU1veEYsVUFDL0NweEYsS0FBS294RixRQUFVajNGLE9BQU9ZLE9BQU8sTUFDN0JpRixLQUFLcXhGLGFBQWUsR0FHdEJyeEYsS0FBS3N4RixjQUFnQnR4RixLQUFLc3hGLG9CQUFpQmx6RixHQUs3Q3lqQyxFQUFheG1DLFVBQVV1M0YsZ0JBQWtCLFNBQXlCMTNGLEdBQ2hFLEdBQWlCLGlCQUFOQSxHQUFrQkEsRUFBSSxHQUFLaTJGLEVBQVlqMkYsR0FDaEQsTUFBTSxJQUFJK2IsV0FBVyxnRkFBa0YvYixFQUFJLEtBRzdHLE9BREE4RSxLQUFLc3hGLGNBQWdCcDJGLEVBQ2Q4RSxNQVNUNmhDLEVBQWF4bUMsVUFBVXczRixnQkFBa0IsV0FDdkMsT0FBT3JCLEVBQWlCeHhGLE9BRzFCNmhDLEVBQWF4bUMsVUFBVThhLEtBQU8sU0FBYzdXLEdBRTFDLElBREEsSUFBSWtNLEVBQU8sR0FDRi9SLEVBQUksRUFBR0EsRUFBSXlFLFVBQVVoQyxPQUFRekMsSUFBSytSLEVBQUt4TSxLQUFLZCxVQUFVekUsSUFDL0QsSUFBSXE1RixFQUFvQixVQUFUeHpGLEVBRVhvOEIsRUFBUzE3QixLQUFLb3hGLFFBQ2xCLFFBQWVoekYsSUFBWHM5QixFQUNGbzNELEVBQVdBLFFBQTRCMTBGLElBQWpCczlCLEVBQU9ud0IsV0FDMUIsSUFBS3VuRixFQUNSLE9BQU8sRUFHVCxHQUFJQSxFQUFTLENBQ1gsSUFBSUMsRUFHSixHQUZJdm5GLEVBQUt0UCxPQUFTLElBQ2hCNjJGLEVBQUt2bkYsRUFBSyxJQUNSdW5GLGFBQWM1MEYsTUFHaEIsTUFBTTQwRixFQUdSLElBQUkxbUYsRUFBTSxJQUFJbE8sTUFBTSxvQkFBc0I0MEYsRUFBSyxLQUFPQSxFQUFHdGxGLFFBQVUsSUFBTSxLQUV6RSxNQURBcEIsRUFBSWlvQyxRQUFVeStDLEVBQ1IxbUYsRUFHUixJQUFJMEcsRUFBVTJvQixFQUFPcDhCLEdBRXJCLFFBQWdCbEIsSUFBWjJVLEVBQ0YsT0FBTyxFQUVULEdBQXVCLG1CQUFaQSxFQUNUaytFLEVBQWFsK0UsRUFBUy9TLEtBQU13TCxPQUU1QixLQUFJK0YsRUFBTXdCLEVBQVE3VyxPQUNkcUQsRUFBWW16RixFQUFXMy9FLEVBQVN4QixHQUNwQyxJQUFTOVgsRUFBSSxFQUFHQSxFQUFJOFgsSUFBTzlYLEVBQ3pCdzNGLEVBQWExeEYsRUFBVTlGLEdBQUl1RyxLQUFNd0wsR0FHckMsT0FBTyxHQW1FVHEyQixFQUFheG1DLFVBQVV5YSxZQUFjLFNBQXFCeFcsRUFBTVIsR0FDOUQsT0FBTzJ5RixFQUFhenhGLEtBQU1WLEVBQU1SLEdBQVUsSUFHNUMraUMsRUFBYXhtQyxVQUFVd2EsR0FBS2dzQixFQUFheG1DLFVBQVV5YSxZQUVuRCtyQixFQUFheG1DLFVBQVUrYSxnQkFDbkIsU0FBeUI5VyxFQUFNUixHQUM3QixPQUFPMnlGLEVBQWF6eEYsS0FBTVYsRUFBTVIsR0FBVSxJQXFCaEQraUMsRUFBYXhtQyxVQUFVMGEsS0FBTyxTQUFjelcsRUFBTVIsR0FDaEQsR0FBd0IsbUJBQWJBLEVBQ1QsTUFBTSxJQUFJaEQsVUFBVSwwRUFBNEVnRCxHQUdsRyxPQURBa0IsS0FBSzZWLEdBQUd2VyxFQUFNOHlGLEVBQVVweUYsS0FBTVYsRUFBTVIsSUFDN0JrQixNQUdUNmhDLEVBQWF4bUMsVUFBVWdiLG9CQUNuQixTQUE2Qi9XLEVBQU1SLEdBQ2pDLEdBQXdCLG1CQUFiQSxFQUNULE1BQU0sSUFBSWhELFVBQVUsMEVBQTRFZ0QsR0FHbEcsT0FEQWtCLEtBQUtvVyxnQkFBZ0I5VyxFQUFNOHlGLEVBQVVweUYsS0FBTVYsRUFBTVIsSUFDMUNrQixNQUliNmhDLEVBQWF4bUMsVUFBVTRhLGVBQ25CLFNBQXdCM1csRUFBTVIsR0FDNUIsSUFBSXdILEVBQU1vMUIsRUFBUTh6RCxFQUFVLzFGLEVBQUd1NUYsRUFFL0IsR0FBd0IsbUJBQWJsMEYsRUFDVCxNQUFNLElBQUloRCxVQUFVLDBFQUE0RWdELEdBSWxHLFFBQWVWLEtBRGZzOUIsRUFBUzE3QixLQUFLb3hGLFNBRVosT0FBT3B4RixLQUdULFFBQWE1QixLQURia0ksRUFBT28xQixFQUFPcDhCLElBRVosT0FBT1UsS0FFVCxHQUFJc0csSUFBU3hILEdBQVl3SCxFQUFLeEgsV0FBYUEsRUFDYixLQUF0QmtCLEtBQUtxeEYsYUFDVHJ4RixLQUFLb3hGLFFBQVVqM0YsT0FBT1ksT0FBTyxjQUV0QjJnQyxFQUFPcDhCLEdBQ1ZvOEIsRUFBT3psQixnQkFDVGpXLEtBQUttVyxLQUFLLGlCQUFrQjdXLEVBQU1nSCxFQUFLeEgsVUFBWUEsU0FFbEQsR0FBb0IsbUJBQVR3SCxFQUFxQixDQUdyQyxJQUZBa3BGLEdBQVksRUFFUC8xRixFQUFJNk0sRUFBS3BLLE9BQVMsRUFBR3pDLEdBQUssRUFBR0EsSUFDaEMsR0FBSTZNLEVBQUs3TSxLQUFPcUYsR0FBWXdILEVBQUs3TSxHQUFHcUYsV0FBYUEsRUFBVSxDQUN6RGswRixFQUFtQjFzRixFQUFLN00sR0FBR3FGLFNBQzNCMHdGLEVBQVcvMUYsRUFDWCxNQUlKLEdBQUkrMUYsRUFBVyxFQUNiLE9BQU94dkYsS0FFUSxJQUFid3ZGLEVBQ0ZscEYsRUFBS3V5QixRQWlJZixTQUFtQnZ5QixFQUFNckgsR0FDdkIsS0FBT0EsRUFBUSxFQUFJcUgsRUFBS3BLLE9BQVErQyxJQUM5QnFILEVBQUtySCxHQUFTcUgsRUFBS3JILEVBQVEsR0FDN0JxSCxFQUFLcTJCLE1BbElHczJELENBQVUzc0YsRUFBTWtwRixHQUdFLElBQWhCbHBGLEVBQUtwSyxTQUNQdy9CLEVBQU9wOEIsR0FBUWdILEVBQUssU0FFUWxJLElBQTFCczlCLEVBQU96bEIsZ0JBQ1RqVyxLQUFLbVcsS0FBSyxpQkFBa0I3VyxFQUFNMHpGLEdBQW9CbDBGLEdBRzFELE9BQU9rQixNQUdiNmhDLEVBQWF4bUMsVUFBVTJhLElBQU02ckIsRUFBYXhtQyxVQUFVNGEsZUFFcEQ0ckIsRUFBYXhtQyxVQUFVNmEsbUJBQ25CLFNBQTRCNVcsR0FDMUIsSUFBSUMsRUFBV204QixFQUFRamlDLEVBR3ZCLFFBQWUyRSxLQURmczlCLEVBQVMxN0IsS0FBS294RixTQUVaLE9BQU9weEYsS0FHVCxRQUE4QjVCLElBQTFCczlCLEVBQU96bEIsZUFVVCxPQVR5QixJQUFyQi9YLFVBQVVoQyxRQUNaOEQsS0FBS294RixRQUFVajNGLE9BQU9ZLE9BQU8sTUFDN0JpRixLQUFLcXhGLGFBQWUsUUFDTWp6RixJQUFqQnM5QixFQUFPcDhCLEtBQ1ksS0FBdEJVLEtBQUtxeEYsYUFDVHJ4RixLQUFLb3hGLFFBQVVqM0YsT0FBT1ksT0FBTyxhQUV0QjJnQyxFQUFPcDhCLElBRVhVLEtBSVQsR0FBeUIsSUFBckI5QixVQUFVaEMsT0FBYyxDQUMxQixJQUNJbEIsRUFEQXVGLEVBQU9wRyxPQUFPb0csS0FBS203QixHQUV2QixJQUFLamlDLEVBQUksRUFBR0EsRUFBSThHLEVBQUtyRSxTQUFVekMsRUFFakIsb0JBRFp1QixFQUFNdUYsRUFBSzlHLEtBRVh1RyxLQUFLa1csbUJBQW1CbGIsR0FLMUIsT0FIQWdGLEtBQUtrVyxtQkFBbUIsa0JBQ3hCbFcsS0FBS294RixRQUFVajNGLE9BQU9ZLE9BQU8sTUFDN0JpRixLQUFLcXhGLGFBQWUsRUFDYnJ4RixLQUtULEdBQXlCLG1CQUZ6QlQsRUFBWW04QixFQUFPcDhCLElBR2pCVSxLQUFLaVcsZUFBZTNXLEVBQU1DLFFBQ3JCLFFBQWtCbkIsSUFBZG1CLEVBRVQsSUFBSzlGLEVBQUk4RixFQUFVckQsT0FBUyxFQUFHekMsR0FBSyxFQUFHQSxJQUNyQ3VHLEtBQUtpVyxlQUFlM1csRUFBTUMsRUFBVTlGLElBSXhDLE9BQU91RyxNQW9CYjZoQyxFQUFheG1DLFVBQVVrRSxVQUFZLFNBQW1CRCxHQUNwRCxPQUFPZ3pGLEVBQVd0eUYsS0FBTVYsR0FBTSxJQUdoQ3VpQyxFQUFheG1DLFVBQVU2M0YsYUFBZSxTQUFzQjV6RixHQUMxRCxPQUFPZ3pGLEVBQVd0eUYsS0FBTVYsR0FBTSxJQUdoQ3VpQyxFQUFhOHdELGNBQWdCLFNBQVNaLEVBQVN6eUYsR0FDN0MsTUFBcUMsbUJBQTFCeXlGLEVBQVFZLGNBQ1ZaLEVBQVFZLGNBQWNyekYsR0FFdEJxekYsRUFBYy80RixLQUFLbTRGLEVBQVN6eUYsSUFJdkN1aUMsRUFBYXhtQyxVQUFVczNGLGNBQWdCQSxFQWlCdkM5d0QsRUFBYXhtQyxVQUFVODNGLFdBQWEsV0FDbEMsT0FBT256RixLQUFLcXhGLGFBQWUsRUFBSU4sRUFBZS93RixLQUFLb3hGLFNBQVcsSyxnQkN4YWhFLElBQUloa0QsRUFBZ0IsRUFBUSxJQUN4QkMsRUFBbUI3ekMsRUFBT0QsUUFBVVksT0FBT1ksT0FBT3F5QyxHQUVsRDBCLEVBQVUsQ0FDYkMsUUFBUyxRQUdWNTBDLE9BQU9vRyxLQUFLdXVDLEdBQVNudUMsU0FBUSxTQUFTM0YsR0FDckMsSUFBSW0wQyxFQUFZTCxFQUFROXpDLEdBQ3hCYixPQUFPQyxlQUFlaXpDLEVBQWtCcnlDLEVBQUssQ0FDNUNWLElBQUssV0FDSixPQUFPMEYsS0FBS212QyxJQUFjLE1BRTNCanVCLElBQUssU0FBU3BkLEdBRWIsT0FEQTlELEtBQUttdkMsR0FBYXJyQyxFQUNYQSxTLGdCQ2hCVixJQUFJME8sRUFBYSxFQUFRLElBQ3JCNDhCLEVBQVcsRUFBUSxJQUd2QixTQUFTdjhCLEVBQVlyRSxFQUFVbEcsR0FDM0J0SSxLQUFLMGxGLEtBQUtsM0UsRUFBVWxHLEdBT3hCLFNBQVM4cUYsRUFBWUMsRUFBTUMsR0FDdkIsT0FBT2xrRCxFQUFTaWdELHFCQUFxQmdFLEVBQU1DLEdBQU8sR0FFdEQsU0FBU0MsRUFBY0YsRUFBTUMsR0FDekIsT0FBT2xrRCxFQUFTaWdELHFCQUFxQmdFLEVBQU1DLEdBQU8sRUFBTSxHQUFHLEdBRS9ELFNBQVNFLEVBQU1ILEVBQU1DLEVBQU9HLEdBQ3hCLE9BQU9ya0QsRUFBU3NrRCxRQUNadGtELEVBQVNpZ0QscUJBQXFCZ0UsRUFBTUMsRUFBT0csRUFBUyxJQUN0RDN0RixPQUdOLFNBQVM2dEYsRUFBaUJsNEYsRUFBS281QixFQUFNdytELEVBQU1DLEVBQU9HLEdBQzlDLElBQUk3TCxFQUFNNEwsRUFBTUgsRUFBTUMsRUFBT0csR0FDekI3TCxJQUFLbnNGLEVBQUlvNUIsR0FBUSt5RCxHQWxCekIsRUFBUSxHQUFSLENBQW9CLzBFLEVBQWFMLEdBRWpDSyxFQUFZeFgsVUFBVXFxRixLQUFPbHpFLEVBbUI3QixJQUFJb2hGLEVBQWMsU0FBU2w1RixHQUN2QixNQUFpQixRQUFWQSxHQUE2QixTQUFWQSxHQUE4QixZQUFWQSxHQUdsRG1ZLEVBQVl4WCxVQUFVb29DLE1BQVEsV0FDMUIsSUFFSW1rRCxFQUNBaU0sRUFIQTFnRixFQUFPLEdBQ1AyZ0YsRUFBV1AsRUFBY0ssRUFBYTV6RixLQUFLaVQsS0FJM0M2Z0YsSUFDc0IsU0FBbEJBLEVBQVM5NUYsTUFDVDY1RixFQUFTQyxFQUFTdmxELFNBRWxCcDdCLEVBQUs3VCxLQUFPLE9BQ1pxMEYsRUFBaUJ4Z0YsRUFBTSxLQUFNLEtBQU0wZ0YsR0FDbkNGLEVBQWlCeGdGLEVBQU0sUUFBUyxRQUFTMGdGLElBRXBDak0sRUFBTTJMLEVBQWMsT0FBUU0sTUFDNUJqTSxFQUFNQSxFQUFJbjVDLFdBQ1ZtNUMsRUFBTUEsRUFBSWh5QixRQUVYemlELEVBQUttckIsS0FBT3NwRCxHQUNoQitMLEVBQWlCeGdGLEVBQU0sY0FBZSxXQUFZMGdGLElBQzdDak0sRUFBTTRMLEVBQU0sVUFBV0ssTUFBVTFnRixFQUFLNGdGLFFBQVUsSUFBSXg3RCxLQUFLcXZELElBQzlEK0wsRUFBaUJ4Z0YsRUFBTSxTQUFVLFFBQVMwZ0YsR0FBUSxHQUVsRDFnRixFQUFLNmdGLE1BQVFaLEVBQVksUUFBU1MsR0FBUXh3RixLQUFJLFNBQVNrRCxHQUNuRCxJQUNJcWhGLEVBREFsSixFQUFRLEdBaUJaLE9BWkFpVixFQUFpQmpWLEVBQU8sS0FBTSxLQUY5Qm40RSxFQUFPQSxFQUFLZ29DLFVBR1pvbEQsRUFBaUJqVixFQUFPLFFBQVMsUUFBU240RSxJQUVyQ3FoRixFQUFNMkwsRUFBYyxPQUFRaHRGLE1BQzVCcWhGLEVBQU1BLEVBQUluNUMsV0FDVm01QyxFQUFNQSxFQUFJaHlCLFFBRVg4b0IsRUFBTXBnRCxLQUFPc3BELElBQ1pBLEVBQU00TCxFQUFNLFVBQVdqdEYsSUFBU2l0RixFQUFNLFVBQVdqdEYsTUFDbERtNEUsRUFBTWp5RCxZQUFjbTdELElBQ25CQSxFQUFNNEwsRUFBTSxVQUFXanRGLE1BQ3hCbTRFLEVBQU11VixRQUFVLElBQUkxN0QsS0FBS3F2RCxJQUN0QmxKLE9BR1htVixFQUFTTixFQUFjLFVBQVdPLEVBQVN2bEQsVUFBVUEsU0FFckRwN0IsRUFBSzdULEtBQU93MEYsRUFBUzk1RixLQUFLcVcsT0FBTyxFQUFHLEdBQ3BDOEMsRUFBSzFLLEdBQUssR0FDVmtyRixFQUFpQnhnRixFQUFNLFFBQVMsUUFBUzBnRixHQUN6Q0YsRUFBaUJ4Z0YsRUFBTSxPQUFRLE9BQVEwZ0YsR0FDdkNGLEVBQWlCeGdGLEVBQU0sY0FBZSxjQUFlMGdGLElBQ2hEak0sRUFBTTRMLEVBQU0sZ0JBQWlCSyxNQUM5QjFnRixFQUFLNGdGLFFBQVUsSUFBSXg3RCxLQUFLcXZELElBQzVCK0wsRUFBaUJ4Z0YsRUFBTSxTQUFVLGlCQUFrQjBnRixHQUFRLEdBRTNEMWdGLEVBQUs2Z0YsTUFBUVosRUFBWSxPQUFRVSxFQUFTdmxELFVBQVVsckMsS0FBSSxTQUNwRGtELEdBRUEsSUFDSXFoRixFQURBbEosRUFBUSxHQVdaLE9BTkFpVixFQUFpQmpWLEVBQU8sS0FBTSxPQUY5Qm40RSxFQUFPQSxFQUFLZ29DLFVBR1pvbEQsRUFBaUJqVixFQUFPLFFBQVMsUUFBU240RSxHQUMxQ290RixFQUFpQmpWLEVBQU8sT0FBUSxPQUFRbjRFLEdBQ3hDb3RGLEVBQWlCalYsRUFBTyxjQUFlLGNBQWVuNEUsSUFDakRxaEYsRUFBTTRMLEVBQU0sVUFBV2p0RixNQUN4Qm00RSxFQUFNdVYsUUFBVSxJQUFJMTdELEtBQUtxdkQsSUFDdEJsSixPQUluQjErRSxLQUFLaVQsSUFBTUUsRUFDWFgsRUFBV25YLFVBQVUweUMsZ0JBQWdCbjBDLEtBQ2pDb0csS0FDQTh6RixFQUFXLEtBQU8zMUYsTUFBTSxnQ0FJaEMzRSxFQUFPRCxRQUFVc1osRyxnQkNqSGpCLElBQUlGLEVBQWMsRUFBUSxJQUN0QnVoRixFQUFlLEVBQVEsS0FDdkI5eEUsRUFBUXpQLEVBQVl5UCxNQUV4QjVvQixFQUFPRCxRQUFVLENBQ2hCNDZGLGFBS0QsU0FBc0I5eEUsRUFBTXFJLEdBQzNCLE9BQU9ySSxFQUFLa3NCLFNBQVdsc0IsRUFBS2tzQixTQUFTbHJDLEtBQUksU0FBU2dmLEdBQ2pELE9BQU82eEUsRUFBYTd4RSxFQUFNcUksTUFDeEJwdEIsS0FBSyxJQUFNLElBUGQ0MkYsYUFBY0EsRUFDZFIsUUFTRCxTQUFTQSxFQUFRcnhFLEdBQ2hCLE9BQUczZixNQUFNbUIsUUFBUXdlLEdBQWNBLEVBQUtoZixJQUFJcXdGLEdBQVNwMkYsS0FBSyxJQUNuRDhrQixFQUFNQyxJQUFTQSxFQUFLL2lCLE9BQVNxVCxFQUFZdVAsTUFBY3d4RSxFQUFRcnhFLEVBQUtrc0IsVUFDcEVsc0IsRUFBSy9pQixPQUFTcVQsRUFBWWlQLEtBQWFTLEVBQUtuYixLQUN4QyxNLGdCQ2pCUixJQUFJeUwsRUFBYyxFQUFRLEtBQ3RCeWhGLEVBQVcsRUFBUSxLQU1uQkMsRUFBZSxFQUFRLEtBQzNCQSxFQUFhQyxhQUFhMTNGLFVBQVksS0FDdEN5M0YsRUFBYUUsZUFBZTMzRixVQUFZLEtBRXhDLElBQUk0M0YsRUFBb0IsQ0FDdEI1M0YsVUFBVyxLQUNYeU0sT0FBTyxFQUNQazFCLFFBQVEsRUFDUmsyRCxLQUFLLEVBQ0x0RixRQUFRLEVBQ1J1RixTQUFTLEVBQ1RDLFVBQVUsRUFDVkMsV0FBVyxFQUNYQyxVQUFVLEdBd0NaLElBQUlDLEVBQVksQ0FDZGw0RixVQUFXLEtBQ1hxaUMsTUFBTSxFQUNOdjJCLE1BQU0sRUFDTncyQixVQUFVLEVBQ1ZDLElBQUksRUFDSkMsS0FBSyxFQUNMQyxTQUFTLEVBQ1RDLE9BQU8sRUFDUEMsT0FBTyxFQUNQQyxJQUFJLEVBQ0pDLEtBQUssRUFDTGhDLE9BQU8sRUFDUGlDLFNBQVMsRUFDVEMsUUFBUSxFQUNSckIsTUFBTSxFQUNOc0IsTUFBTSxFQUNOQyxPQUFPLEVBQ1B6OUIsUUFBUSxFQUNSMDlCLE9BQU8sRUFDUEMsS0FBSyxHQUdIbmMsRUFBVXBxQixFQUFPRCxRQUFVLFNBQVMwWixFQUFLeVgsR0FDdENob0IsTUFBTW1CLFFBQVFvUCxJQUFTQSxFQUFJOGhGLFVBQVM5aEYsRUFBTSxDQUFDQSxJQUNoRHlYLEVBQU9BLEdBQVEsR0FJZixJQUZBLElBQUlxVSxFQUFTLEdBRUp0bEMsRUFBSSxFQUFHQSxFQUFJd1osRUFBSS9XLE9BQVF6QyxJQUFLLENBQ25DLElBQUk0b0IsRUFBT3BQLEVBQUl4WixHQUVHLFNBQWQ0b0IsRUFBSy9pQixLQUFpQnkvQixHQUFVbmIsRUFBT3ZCLEVBQUtrc0IsU0FBVTdqQixHQUNqRC9YLEVBQVl5UCxNQUFNQyxHQUFPMGMsR0FBVWkyRCxFQUFVM3lFLEVBQU1xSSxHQUNuRHJJLEVBQUsvaUIsT0FBU3FULEVBQVlrUCxVQUNqQ2tkLEdBQVVrMkQsRUFBZ0I1eUUsR0FDbkJBLEVBQUsvaUIsT0FBU3FULEVBQVltUCxRQUFTaWQsR0FBVW0yRCxFQUFjN3lFLEdBQzNEQSxFQUFLL2lCLE9BQVNxVCxFQUFZdVAsTUFBTzZjLEdBQVVvMkQsRUFBWTl5RSxHQUMzRDBjLEdBQVVxMkQsRUFBVy95RSxFQUFNcUksR0FHbEMsT0FBT3FVLEdBR1QsTUFBTXMyRCxFQUErQixDQUNuQyxLQUNBLEtBQ0EsS0FDQSxLQUNBLFFBQ0EsaUJBQ0EsZ0JBQ0EsT0FDQSxTQUdGLFNBQVNMLEVBQVUzeUUsRUFBTXFJLEdBRUYsWUFBakJBLEVBQUs4VyxVQUVQbmYsRUFBS3JvQixLQUFPcTZGLEVBQWFDLGFBQWFqeUUsRUFBS3JvQixPQUFTcW9CLEVBQUtyb0IsS0FHdkRxb0IsRUFBS2dzQixRQUNMZ25ELEVBQTZCbjJGLFFBQVFtakIsRUFBS2dzQixPQUFPcjBDLE9BQVMsSUFFMUQwd0IsRUFBT3Z3QixPQUFPczJCLE9BQU8sR0FBSS9GLEVBQU0sQ0FBRThXLFNBQVMsT0FFekM5VyxFQUFLOFcsU0FBVyxDQUFDLE1BQU8sUUFBUXRpQyxRQUFRbWpCLEVBQUtyb0IsT0FBUyxJQUN6RDB3QixFQUFPdndCLE9BQU9zMkIsT0FBTyxHQUFJL0YsRUFBTSxDQUFFOFcsUUFBUyxhQUc1QyxJQUFJdWIsRUFBTSxJQUFNMTZCLEVBQUtyb0IsS0FDakJ5MEMsRUEzR04sU0FBcUJsbEMsRUFBWW1oQixHQUMvQixHQUFLbmhCLEVBQUwsQ0FFQSxJQUNJN08sRUFEQXFrQyxFQUFTLEdBSWIsSUFBSyxJQUFJL2pDLEtBQU91TyxFQUNkN08sRUFBUTZPLEVBQVd2TyxHQUNmK2pDLElBQ0ZBLEdBQVUsS0FHUyxZQUFqQnJVLEVBQUs4VyxVQUVQeG1DLEVBQU1xNUYsRUFBYUUsZUFBZXY1RixJQUFRQSxHQUU1QytqQyxHQUFVL2pDLEdBQ0ssT0FBVk4sR0FBNEIsS0FBVkEsR0FBaUJnd0IsRUFBSzhXLFdBQzNDekMsR0FDRSxNQUNDclUsRUFBS3FlLGVBQ0ZxckQsRUFBUzVqRCxVQUFVOTFDLEdBQ25CQSxFQUFNc0wsUUFBUSxNQUFPLFdBQ3pCLEtBSU4sT0FBTys0QixHQStFT3UyRCxDQUFZanpFLEVBQUtvc0IsUUFBUy9qQixHQW1CeEMsT0FqQkkrakIsSUFDRnNPLEdBQU8sSUFBTXRPLElBR1gvakIsRUFBSzhXLFNBQWFuZixFQUFLa3NCLFVBQXFDLElBQXpCbHNCLEVBQUtrc0IsU0FBU3J5QyxRQUduRDZnRCxHQUFPLElBQ0gxNkIsRUFBS2tzQixXQUNQd08sR0FBT241QixFQUFPdkIsRUFBS2tzQixTQUFVN2pCLElBRzFCb3FFLEVBQVV6eUUsRUFBS3JvQixRQUFTMHdCLEVBQUs4VyxVQUNoQ3ViLEdBQU8sS0FBTzE2QixFQUFLcm9CLEtBQU8sTUFSNUIraUQsR0FBTyxLQVlGQSxFQUdULFNBQVNrNEMsRUFBZ0I1eUUsR0FDdkIsTUFBTyxJQUFNQSxFQUFLbmIsS0FBTyxJQUczQixTQUFTa3VGLEVBQVcveUUsRUFBTXFJLEdBQ3hCLElBQUl4akIsRUFBT21iLEVBQUtuYixNQUFRLEdBVXhCLE9BTkV3akIsRUFBS3FlLGdCQUNIMW1CLEVBQUtnc0IsUUFBVWhzQixFQUFLZ3NCLE9BQU9yMEMsUUFBUXc2RixJQUVyQ3R0RixFQUFPa3RGLEVBQVM1akQsVUFBVXRwQyxJQUdyQkEsRUFHVCxTQUFTaXVGLEVBQVk5eUUsR0FDbkIsTUFBTyxZQUFjQSxFQUFLa3NCLFNBQVMsR0FBR3JuQyxLQUFPLE1BRy9DLFNBQVNndUYsRUFBYzd5RSxHQUNyQixNQUFPLFVBQVNBLEVBQUtuYixLQUFPLFcsNkJDcEw5Qi9NLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxJQVd0RG5CLEVBQVE2b0IsTUFMUixTQUFlQyxHQUNYLE1BQXNCLFFBQWRBLEVBQUsvaUIsTUFDSyxXQUFkK2lCLEVBQUsvaUIsTUFDUyxVQUFkK2lCLEVBQUsvaUIsTUFJYi9GLEVBQVFxb0IsS0FBTyxPQUNmcm9CLEVBQVFzb0IsVUFBWSxZQUNwQnRvQixFQUFRdW9CLFFBQVUsVUFDbEJ2b0IsRUFBUXdvQixPQUFTLFNBQ2pCeG9CLEVBQVF5b0IsTUFBUSxRQUNoQnpvQixFQUFRMG9CLElBQU0sTUFDZDFvQixFQUFRMm9CLE1BQVEsUUFDaEIzb0IsRUFBUTRvQixRQUFVLFcsNkJDcEJsQmhvQixPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sSUFDdEQsSUFBSTY2RixFQUFXLEVBQVEsSUFDbkJDLEVBQVcsRUFBUSxJQUl2Qmo4RixFQUFRK1csT0FIUixTQUFnQnBKLEVBQU11dUYsR0FDbEIsUUFBU0EsR0FBU0EsR0FBUyxFQUFJRixFQUFTMWxELFVBQVkwbEQsRUFBU3ZsRCxZQUFZOW9DLElBTTdFM04sRUFBUW04RixhQUhSLFNBQXNCeHVGLEVBQU11dUYsR0FDeEIsUUFBU0EsR0FBU0EsR0FBUyxFQUFJRixFQUFTMWxELFVBQVkwbEQsRUFBU3psRCxrQkFBa0I1b0MsSUFNbkYzTixFQUFRaVcsT0FIUixTQUFnQnRJLEVBQU11dUYsR0FDbEIsUUFBU0EsR0FBU0EsR0FBUyxFQUFJRCxFQUFTaGxELFVBQVlnbEQsRUFBU3hrRCxZQUFZOXBDLElBRzdFLElBQUl5dUYsRUFBVyxFQUFRLElBQ3ZCcDhGLEVBQVFpM0MsVUFBWW1sRCxFQUFTbmxELFVBQzdCajNDLEVBQVF5M0MsV0FBYTJrRCxFQUFTM2tELFdBQzlCejNDLEVBQVFnNEMsT0FBU29rRCxFQUFTcGtELE9BRTFCaDRDLEVBQVFxOEYsWUFBY0QsRUFBUzNrRCxXQUMvQnozQyxFQUFRczhGLFlBQWNGLEVBQVMza0QsV0FDL0IsSUFBSThrRCxFQUFXLEVBQVEsSUFDdkJ2OEYsRUFBUXMyQyxVQUFZaW1ELEVBQVNqbUQsVUFDN0J0MkMsRUFBUXkyQyxXQUFhOGxELEVBQVM5bEQsV0FDOUJ6MkMsRUFBUXUyQyxpQkFBbUJnbUQsRUFBU2htRCxpQkFFcEN2MkMsRUFBUXc4RixZQUFjRCxFQUFTOWxELFdBQy9CejJDLEVBQVF5OEYsWUFBY0YsRUFBUzlsRCxXQUMvQnoyQyxFQUFRMDhGLGtCQUFvQkgsRUFBU2htRCxpQkFDckN2MkMsRUFBUTI4RixrQkFBb0JKLEVBQVNobUQsaUJBQ3JDdjJDLEVBQVE0OEYsZ0JBQWtCTCxFQUFTam1ELFcsOHlDQy9CbkMsSUFBSVIsRUFBbUJydkMsTUFBUUEsS0FBS3F2QyxpQkFBb0IsU0FBVUMsR0FDOUQsT0FBUUEsR0FBT0EsRUFBSXowQyxXQUFjeTBDLEVBQU0sQ0FBRSxRQUFXQSxJQUV4RG4xQyxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sSUFDdEQsSUFBSTA3RixFQUFnQi9tRCxFQUFnQixFQUFRLE1BbUI1QzkxQyxFQUFRb3JCLFFBakJSLFNBQXlCdkosR0FDckIsR0FBS0EsR0FBYSxPQUFVQSxHQUFhLE9BQVdBLEVBQVksUUFDNUQsTUFBTyxJQUVQQSxLQUFhZzdFLEVBQWN6eEUsVUFFM0J2SixFQUFZZzdFLEVBQWN6eEUsUUFBUXZKLElBRXRDLElBQUkyakIsRUFBUyxHQU9iLE9BTkkzakIsRUFBWSxRQUNaQSxHQUFhLE1BQ2IyakIsR0FBVTUrQixPQUFPMFAsYUFBZXVMLElBQWMsR0FBTSxLQUFTLE9BQzdEQSxFQUFZLE1BQXNCLEtBQVpBLEdBRTFCMmpCLEdBQVU1K0IsT0FBTzBQLGFBQWF1TCxLLCtwR0NyQmxDLElBQUlpN0UsRUFBYzk4RixFQUFRODhGLFlBQWMsU0FBU2gwRSxHQUNoRCxPQUFPQSxFQUFLa3NCLFVBR1QrbkQsRUFBWS84RixFQUFRKzhGLFVBQVksU0FBU2owRSxHQUM1QyxPQUFPQSxFQUFLZ3NCLFFBR2I5MEMsRUFBUWc5RixZQUFjLFNBQVNsMEUsR0FDOUIsSUFBSWdzQixFQUFTaW9ELEVBQVVqMEUsR0FDdkIsT0FBT2dzQixFQUFTZ29ELEVBQVlob0QsR0FBVSxDQUFDaHNCLElBR3hDOW9CLEVBQVFpOUYsa0JBQW9CLFNBQVNuMEUsRUFBTXJvQixHQUMxQyxPQUFPcW9CLEVBQUtvc0IsU0FBV3BzQixFQUFLb3NCLFFBQVF6MEMsSUFHckNULEVBQVFrOUYsVUFBWSxTQUFTcDBFLEVBQU1yb0IsR0FDbEMsUUFBU3FvQixFQUFLb3NCLFNBQVduekMsZUFBZTFCLEtBQUt5b0IsRUFBS29zQixRQUFTejBDLElBRzVEVCxFQUFRbTlGLFFBQVUsU0FBU3IwRSxHQUMxQixPQUFPQSxFQUFLcm9CLE8sY0N0QmJULEVBQVFvOUYsY0FBZ0IsU0FBU3QwRSxHQUloQyxHQUhHQSxFQUFLNlksT0FBTTdZLEVBQUs2WSxLQUFLcDdCLEtBQU91aUIsRUFBS3ZpQixNQUNqQ3VpQixFQUFLdmlCLE9BQU11aUIsRUFBS3ZpQixLQUFLbzdCLEtBQU83WSxFQUFLNlksTUFFakM3WSxFQUFLZ3NCLE9BQU8sQ0FDZCxJQUFJd2xELEVBQVN4eEUsRUFBS2dzQixPQUFPRSxTQUN6QnNsRCxFQUFPMTBGLE9BQU8wMEYsRUFBTzM2RSxZQUFZbUosR0FBTyxLQUkxQzlvQixFQUFRcTlGLGVBQWlCLFNBQVN2MEUsRUFBTXZZLEdBQ3ZDLElBQUlveEIsRUFBT3B4QixFQUFZb3hCLEtBQU83WSxFQUFLNlksS0FDaENBLElBQ0ZBLEVBQUtwN0IsS0FBT2dLLEdBR2IsSUFBSWhLLEVBQU9nSyxFQUFZaEssS0FBT3VpQixFQUFLdmlCLEtBQ2hDQSxJQUNGQSxFQUFLbzdCLEtBQU9weEIsR0FHYixJQUFJdWtDLEVBQVN2a0MsRUFBWXVrQyxPQUFTaHNCLEVBQUtnc0IsT0FDdkMsR0FBR0EsRUFBTyxDQUNULElBQUl3bEQsRUFBU3hsRCxFQUFPRSxTQUNwQnNsRCxFQUFPQSxFQUFPMzZFLFlBQVltSixJQUFTdlksSUFJckN2USxFQUFRb1EsWUFBYyxTQUFTMFksRUFBTTBoQyxHQUdwQyxHQUZBQSxFQUFNMVYsT0FBU2hzQixFQUVrQixJQUE5QkEsRUFBS2tzQixTQUFTdnZDLEtBQUsra0QsR0FBYSxDQUNsQyxJQUFJQyxFQUFVM2hDLEVBQUtrc0IsU0FBU2xzQixFQUFLa3NCLFNBQVNyeUMsT0FBUyxHQUNuRDhuRCxFQUFRbGtELEtBQU9pa0QsRUFDZkEsRUFBTTdvQixLQUFPOG9CLEVBQ2JELEVBQU1qa0QsS0FBTyxPQUlmdkcsRUFBUWsxRixPQUFTLFNBQVNwc0UsRUFBTXZpQixHQUMvQixJQUFJdXVDLEVBQVNoc0IsRUFBS2dzQixPQUNqQndvRCxFQUFXeDBFLEVBQUt2aUIsS0FPakIsR0FMQUEsRUFBS0EsS0FBTysyRixFQUNaLzJGLEVBQUtvN0IsS0FBTzdZLEVBQ1pBLEVBQUt2aUIsS0FBT0EsRUFDWkEsRUFBS3V1QyxPQUFTQSxFQUVYd29ELEdBRUYsR0FEQUEsRUFBUzM3RCxLQUFPcDdCLEVBQ2J1dUMsRUFBTyxDQUNULElBQUl3bEQsRUFBU3hsRCxFQUFPRSxTQUNwQnNsRCxFQUFPMTBGLE9BQU8wMEYsRUFBTzM2RSxZQUFZMjlFLEdBQVcsRUFBRy8yRixTQUV2Q3V1QyxHQUNUQSxFQUFPRSxTQUFTdnZDLEtBQUtjLElBSXZCdkcsRUFBUW00RixRQUFVLFNBQVNydkUsRUFBTTZZLEdBQ2hDLElBQUltVCxFQUFTaHNCLEVBQUtnc0IsT0FDbEIsR0FBR0EsRUFBTyxDQUNULElBQUl3bEQsRUFBU3hsRCxFQUFPRSxTQUNwQnNsRCxFQUFPMTBGLE9BQU8wMEYsRUFBTzM2RSxZQUFZbUosR0FBTyxFQUFHNlksR0FHekM3WSxFQUFLNlksT0FDUDdZLEVBQUs2WSxLQUFLcDdCLEtBQU9vN0IsR0FHbEJBLEVBQUttVCxPQUFTQSxFQUNkblQsRUFBS0EsS0FBTzdZLEVBQUs2WSxLQUNqQkEsRUFBS3A3QixLQUFPdWlCLEVBQ1pBLEVBQUs2WSxLQUFPQSxJLGdCQ3pFYixJQUFJOVksRUFBUSxFQUFRLElBQWtCQSxNQW9CdEMsU0FBUzAwRSxFQUFLL3BGLEVBQU1ncUYsRUFBT3RELEVBQVNwekUsR0FHbkMsSUFGQSxJQUFpQnd6RSxFQUFicHVGLEVBQVMsR0FFTGhNLEVBQUksRUFBR3dQLEVBQUk4dEYsRUFBTTc2RixPQUFRekMsRUFBSXdQLEtBQ2pDOEQsRUFBS2dxRixFQUFNdDlGLE1BQ2JnTSxFQUFPekcsS0FBSyszRixFQUFNdDlGLE1BQ2I0bUIsR0FBUyxNQUdmd3pFLEVBQVNrRCxFQUFNdDlGLEdBQUc4MEMsV0FDZmtsRCxHQUFXSSxHQUFVQSxFQUFPMzNGLE9BQVMsSUFDdkMyM0YsRUFBU2lELEVBQUsvcEYsRUFBTThtRixFQUFRSixFQUFTcHpFLEdBQ3JDNWEsRUFBU0EsRUFBTzBCLE9BQU8wc0YsSUFDdkJ4ekUsR0FBU3d6RSxFQUFPMzNGLFNBQ0osS0FYMEJ6QyxLQWV4QyxPQUFPZ00sRUFwQ1JqTSxFQUFPRCxRQUFVLENBQ2hCeUksT0FRRCxTQUFnQitLLEVBQU1vaEMsRUFBU3NsRCxFQUFTcHpFLEdBQ25DM2QsTUFBTW1CLFFBQVFzcUMsS0FBVUEsRUFBVSxDQUFDQSxJQUVuQixpQkFBVjl0QixHQUF1Qi9DLFNBQVMrQyxLQUN6Q0EsRUFBUWdCLEtBRVQsT0FBT3kxRSxFQUFLL3BGLEVBQU1vaEMsR0FBcUIsSUFBWnNsRCxFQUFtQnB6RSxJQWI5Q3kyRSxLQUFNQSxFQUNORSxhQW9DRCxTQUFzQmpxRixFQUFNZ3FGLEdBQzNCLElBQUksSUFBSXQ5RixFQUFJLEVBQUdDLEVBQUlxOUYsRUFBTTc2RixPQUFRekMsRUFBSUMsRUFBR0QsSUFDdkMsR0FBR3NULEVBQUtncUYsRUFBTXQ5RixJQUFLLE9BQU9zOUYsRUFBTXQ5RixHQUdqQyxPQUFPLE1BeENQdzlGLFFBMkNELFNBQVNBLEVBQVFscUYsRUFBTWdxRixHQUd0QixJQUZBLElBQUkxMEUsRUFBTyxLQUVINW9CLEVBQUksRUFBR0MsRUFBSXE5RixFQUFNNzZGLE9BQVF6QyxFQUFJQyxJQUFNMm9CLEVBQU01b0IsSUFDNUMyb0IsRUFBTTIwRSxFQUFNdDlGLE1BRU5zVCxFQUFLZ3FGLEVBQU10OUYsSUFDcEI0b0IsRUFBTzAwRSxFQUFNdDlGLEdBQ0pzOUYsRUFBTXQ5RixHQUFHODBDLFNBQVNyeUMsT0FBUyxJQUNwQ21tQixFQUFPNDBFLEVBQVFscUYsRUFBTWdxRixFQUFNdDlGLEdBQUc4MEMsWUFJaEMsT0FBT2xzQixHQXZEUDYwRSxVQTBERCxTQUFTQSxFQUFVbnFGLEVBQU1ncUYsR0FDeEIsSUFBSSxJQUFJdDlGLEVBQUksRUFBR0MsRUFBSXE5RixFQUFNNzZGLE9BQVF6QyxFQUFJQyxFQUFHRCxJQUN2QyxHQUNDMm9CLEVBQU0yMEUsRUFBTXQ5RixNQUNYc1QsRUFBS2dxRixFQUFNdDlGLEtBQ1ZzOUYsRUFBTXQ5RixHQUFHODBDLFNBQVNyeUMsT0FBUyxHQUMzQmc3RixFQUFVbnFGLEVBQU1ncUYsRUFBTXQ5RixHQUFHODBDLFdBSTNCLE9BQU8sRUFJVCxPQUFPLEdBdkVQNG9ELFFBMEVELFNBQVNBLEVBQVFwcUYsRUFBTWdxRixHQUV0QixJQURBLElBQUl0eEYsRUFBUyxHQUNMaE0sRUFBSSxFQUFHd1AsRUFBSTh0RixFQUFNNzZGLE9BQVF6QyxFQUFJd1AsRUFBR3hQLElBQ25DMm9CLEVBQU0yMEUsRUFBTXQ5RixNQUNic1QsRUFBS2dxRixFQUFNdDlGLEtBQUtnTSxFQUFPekcsS0FBSyszRixFQUFNdDlGLElBRWxDczlGLEVBQU10OUYsR0FBRzgwQyxTQUFTcnlDLE9BQVMsSUFDN0J1SixFQUFTQSxFQUFPMEIsT0FBT2d3RixFQUFRcHFGLEVBQU1ncUYsRUFBTXQ5RixHQUFHODBDLGFBR2hELE9BQU85b0MsSyxnQkM1RlIsSUFBSWtOLEVBQWMsRUFBUSxJQUN0QnlQLEVBQVE3b0IsRUFBUTZvQixNQUFRelAsRUFBWXlQLE1BRXhDN29CLEVBQVE2OUYsWUFBYyxTQUFTOXVGLEVBQVM2bEMsR0FDdkMsSUFBSSxJQUFJbnpDLEtBQU9zTixFQUNkLEdBQUlBLEVBQVFoTixlQUFlTixJQUN0QixHQUFXLGFBQVJBLEdBQ1AsSUFBSW9uQixFQUFNK3JCLEtBQWE3bEMsRUFBUSt1RixTQUFTbHBELEVBQVFuMEMsTUFDL0MsT0FBTyxPQUVGLEdBQVcsYUFBUmdCLEdBQ1QsSUFBSXNOLEVBQVFndkYsU0FBU25wRCxFQUFRN3VDLE1BQU8sT0FBTyxPQUNyQyxHQUFXLGlCQUFSdEUsR0FDVCxHQUFHb25CLEVBQU0rckIsS0FBYTdsQyxFQUFRaXZGLGFBQWFwcEQsRUFBUWpuQyxNQUNsRCxPQUFPLE9BRUYsSUFBSWluQyxFQUFRTSxVQUFZbm1DLEVBQVF0TixHQUFLbXpDLEVBQVFNLFFBQVF6ekMsSUFDM0QsT0FBTyxPQUdULE9BQU8sR0FHUixJQUFJdzhGLEVBQVMsQ0FDWkgsU0FBVSxTQUFTcjlGLEdBQ2xCLE1BQW1CLG1CQUFUQSxFQUNGLFNBQVNxb0IsR0FBTyxPQUFPRCxFQUFNQyxJQUFTcm9CLEVBQUtxb0IsRUFBS3JvQixPQUNyQyxNQUFUQSxFQUNGb29CLEVBRUEsU0FBU0MsR0FBTyxPQUFPRCxFQUFNQyxJQUFTQSxFQUFLcm9CLE9BQVNBLElBRzdEczlGLFNBQVUsU0FBU2g0RixHQUNsQixNQUFtQixtQkFBVEEsRUFDRixTQUFTK2lCLEdBQU8sT0FBTy9pQixFQUFLK2lCLEVBQUsvaUIsT0FFakMsU0FBUytpQixHQUFPLE9BQU9BLEVBQUsvaUIsT0FBU0EsSUFHOUNpNEYsYUFBYyxTQUFTcndGLEdBQ3RCLE1BQW1CLG1CQUFUQSxFQUNGLFNBQVNtYixHQUFPLE9BQVFELEVBQU1DLElBQVNuYixFQUFLbWIsRUFBS25iLE9BRWpELFNBQVNtYixHQUFPLE9BQVFELEVBQU1DLElBQVNBLEVBQUtuYixPQUFTQSxLQUsvRCxTQUFTdXdGLEVBQWVDLEVBQVFoOUYsR0FDL0IsTUFBb0IsbUJBQVZBLEVBQ0YsU0FBUzJuQixHQUFPLE9BQU9BLEVBQUtvc0IsU0FBVy96QyxFQUFNMm5CLEVBQUtvc0IsUUFBUWlwRCxLQUUxRCxTQUFTcjFFLEdBQU8sT0FBT0EsRUFBS29zQixTQUFXcHNCLEVBQUtvc0IsUUFBUWlwRCxLQUFZaDlGLEdBSXpFLFNBQVNpOUYsRUFBYTkwRixFQUFHQyxHQUN4QixPQUFPLFNBQVN1ZixHQUNmLE9BQU94ZixFQUFFd2YsSUFBU3ZmLEVBQUV1ZixJQUl0QjlvQixFQUFRNjVGLFlBQWMsU0FBUzlxRixFQUFTNmxDLEVBQVNzbEQsRUFBU3B6RSxHQUN6RCxJQUFJNWQsRUFBUXRJLE9BQU9vRyxLQUFLK0gsR0FBU2pGLEtBQUksU0FBU3JJLEdBQzdDLElBQUlOLEVBQVE0TixFQUFRdE4sR0FDcEIsT0FBT0EsS0FBT3c4RixFQUFTQSxFQUFPeDhGLEdBQUtOLEdBQVMrOEYsRUFBZXo4RixFQUFLTixNQUdqRSxPQUF3QixJQUFqQitILEVBQU12RyxPQUFlLEdBQUs4RCxLQUFLZ0MsT0FDckNTLEVBQU1HLE9BQU8rMEYsR0FDYnhwRCxFQUFTc2xELEVBQVNwekUsSUFJcEI5bUIsRUFBUXErRixlQUFpQixTQUFTbnZGLEVBQUkwbEMsRUFBU3NsRCxHQUU5QyxPQURJL3dGLE1BQU1tQixRQUFRc3FDLEtBQVVBLEVBQVUsQ0FBQ0EsSUFDaENudUMsS0FBS2kzRixRQUFRUSxFQUFlLEtBQU1odkYsR0FBSzBsQyxHQUFxQixJQUFac2xELElBR3hEbDZGLEVBQVE4MUYscUJBQXVCLFNBQVNyMUYsRUFBTW0wQyxFQUFTc2xELEVBQVNwekUsR0FDL0QsT0FBT3JnQixLQUFLZ0MsT0FBT3cxRixFQUFPSCxTQUFTcjlGLEdBQU9tMEMsRUFBU3NsRCxFQUFTcHpFLElBRzdEOW1CLEVBQVFzK0YscUJBQXVCLFNBQVN2NEYsRUFBTTZ1QyxFQUFTc2xELEVBQVNwekUsR0FDL0QsT0FBT3JnQixLQUFLZ0MsT0FBT3cxRixFQUFPRixTQUFTaDRGLEdBQU82dUMsRUFBU3NsRCxFQUFTcHpFLEssY0NuRjdEOW1CLEVBQVF1K0YsY0FBZ0IsU0FBU3RxRSxHQUtoQyxJQUpBLElBQXdCRSxFQUFNcXFFLEVBQVUveEYsRUFBcEMrOEIsRUFBTXZWLEVBQU10eEIsU0FJUDZtQyxHQUFPLEdBQUcsQ0FPbEIsSUFOQXJWLEVBQU9xcUUsRUFBV3ZxRSxFQUFNdVYsR0FHeEJ2VixFQUFNdVYsR0FBTyxLQUNiLzhCLEdBQVUsRUFFSCt4RixHQUFVLENBQ2hCLEdBQUl2cUUsRUFBTXR1QixRQUFRNjRGLElBQWEsRUFBRyxDQUNqQy94RixHQUFVLEVBQ1Z3bkIsRUFBTXJ1QixPQUFPNGpDLEVBQUssR0FDbEIsTUFFRGcxRCxFQUFXQSxFQUFTMXBELE9BSWpCcm9DLElBQ0h3bkIsRUFBTXVWLEdBQU9yVixHQUlmLE9BQU9GLEdBSVIsSUFBSXdxRSxFQUNXLEVBRFhBLEVBRVEsRUFGUkEsRUFHUSxFQUhSQSxFQUlPLEVBSlBBLEVBS1csR0F5QlhDLEVBQWExK0YsRUFBUXU0RSx3QkFBMEIsU0FBU29tQixFQUFPQyxHQUNsRSxJQUVJbmpELEVBQVNvakQsRUFBYzlwRCxFQUFVK3BELEVBQVVDLEVBQVV2MUQsRUFGckR3MUQsRUFBVyxHQUNYQyxFQUFXLEdBR2YsR0FBSU4sSUFBVUMsRUFDYixPQUFPLEVBSVIsSUFEQW5qRCxFQUFVa2pELEVBQ0hsakQsR0FDTnVqRCxFQUFTenVFLFFBQVFrckIsR0FDakJBLEVBQVVBLEVBQVEzRyxPQUduQixJQURBMkcsRUFBVW1qRCxFQUNIbmpELEdBQ053akQsRUFBUzF1RSxRQUFRa3JCLEdBQ2pCQSxFQUFVQSxFQUFRM0csT0FJbkIsSUFEQXRMLEVBQU0sRUFDQ3cxRCxFQUFTeDFELEtBQVN5MUQsRUFBU3oxRCxJQUNqQ0EsSUFHRCxPQUFZLElBQVJBLEVBQ0lpMUQsR0FJUjFwRCxHQURBOHBELEVBQWVHLEVBQVN4MUQsRUFBTSxJQUNOd0wsU0FDeEI4cEQsRUFBV0UsRUFBU3gxRCxHQUNwQnUxRCxFQUFXRSxFQUFTejFELEdBRWhCdUwsRUFBU3B2QyxRQUFRbTVGLEdBQVkvcEQsRUFBU3B2QyxRQUFRbzVGLEdBQzdDRixJQUFpQkQsRUFDYkgsRUFBcUJBLEVBRXRCQSxFQUVISSxJQUFpQkYsRUFDYkYsRUFBcUJBLEVBRXRCQSxJQVdUeitGLEVBQVFrL0YsV0FBYSxTQUFTanJFLEdBQzdCLElBQXdCRSxFQUFNOGhFLEVBQTFCenNELEVBQU12VixFQUFNdHhCLE9BSWhCLElBRkFzeEIsRUFBUUEsRUFBTTd1QixVQUVMb2tDLEdBQU8sR0FDZnJWLEVBQU9GLEVBQU11VixJQUNieXNELEVBQVdoaUUsRUFBTXR1QixRQUFRd3VCLEtBQ1QsR0FBSzhoRSxFQUFXenNELEdBQy9CdlYsRUFBTXJ1QixPQUFPNGpDLEVBQUssR0FhcEIsT0FWQXZWLEVBQU0waUIsTUFBSyxTQUFTcnRDLEVBQUdDLEdBQ3RCLElBQUk0MUYsRUFBV1QsRUFBV3AxRixFQUFHQyxHQUM3QixPQUFJNDFGLEVBQVdWLEdBQ04sRUFDRVUsRUFBV1YsRUFDZCxFQUVELEtBR0R4cUUsSSxnQkMzSVJoMEIsRUFBT0QsUUFBVWk0QyxFQUVqQixJQUFJai9CLEVBQVMsRUFBUSxJQUVyQixTQUFTaS9CLEVBQU9scEMsR0FDWmlLLEVBQU8zWSxLQUFLb0csS0FBTSxJQUFJMjRGLEVBQUkzNEYsTUFBT3NJLEdBT3JDLFNBQVNxd0YsRUFBSUMsR0FDVDU0RixLQUFLNDRGLE1BQVFBLEVBTGpCLEVBQVEsR0FBUixDQUFvQnBuRCxFQUFRai9CLEdBRTVCaS9CLEVBQU9uMkMsVUFBVXc5RixVQUFXLEVBTTVCLElBQUl2bEYsRUFBUyxFQUFRLElBQU9BLE9BRTVCblosT0FBT29HLEtBQUsrUyxHQUFRM1MsU0FBUSxTQUFTM0csR0FDakMsR0FBcUIsSUFBakJzWixFQUFPdFosR0FDUDIrRixFQUFJdDlGLFVBQVUsS0FBT3JCLEdBQVEsV0FDekJnRyxLQUFLNDRGLE1BQU16aUYsS0FBS25jLFNBRWpCLEdBQXFCLElBQWpCc1osRUFBT3RaLEdBQ2QyK0YsRUFBSXQ5RixVQUFVLEtBQU9yQixHQUFRLFNBQVM2SSxHQUNsQzdDLEtBQUs0NEYsTUFBTXppRixLQUFLbmMsRUFBTTZJLFFBRXZCLElBQXFCLElBQWpCeVEsRUFBT3RaLEdBS2QsTUFBTW1FLE1BQU0sOEJBSlp3NkYsRUFBSXQ5RixVQUFVLEtBQU9yQixHQUFRLFNBQVM2SSxFQUFHQyxHQUNyQzlDLEtBQUs0NEYsTUFBTXppRixLQUFLbmMsRUFBTTZJLEVBQUdDLFMsNkNDSnJDLElBQUkrVCxFQUFTLEVBQVEsS0FBZUEsT0FHaENhLEVBQWFiLEVBQU9hLFlBQWMsU0FBVUQsR0FFOUMsUUFEQUEsRUFBVyxHQUFLQSxJQUNJQSxFQUFTWSxlQUMzQixJQUFLLE1BQU0sSUFBSyxPQUFPLElBQUssUUFBUSxJQUFLLFFBQVEsSUFBSyxTQUFTLElBQUssU0FBUyxJQUFLLE9BQU8sSUFBSyxRQUFRLElBQUssVUFBVSxJQUFLLFdBQVcsSUFBSyxNQUN4SSxPQUFPLEVBQ1QsUUFDRSxPQUFPLElBNENiLFNBQVNzNUIsRUFBY2w2QixHQUVyQixJQUFJMm1DLEVBQ0osT0FGQXArQyxLQUFLeVgsU0FYUCxTQUEyQnFoRixHQUN6QixJQUFJQyxFQS9CTixTQUE0QkQsR0FDMUIsSUFBS0EsRUFBSyxNQUFPLE9BRWpCLElBREEsSUFBSUUsSUFFRixPQUFRRixHQUNOLElBQUssT0FDTCxJQUFLLFFBQ0gsTUFBTyxPQUNULElBQUssT0FDTCxJQUFLLFFBQ0wsSUFBSyxVQUNMLElBQUssV0FDSCxNQUFPLFVBQ1QsSUFBSyxTQUNMLElBQUssU0FDSCxNQUFPLFNBQ1QsSUFBSyxTQUNMLElBQUssUUFDTCxJQUFLLE1BQ0gsT0FBT0EsRUFDVCxRQUNFLEdBQUlFLEVBQVMsT0FDYkYsR0FBTyxHQUFLQSxHQUFLemdGLGNBQ2pCMmdGLEdBQVUsR0FRTEMsQ0FBbUJILEdBQzlCLEdBQW9CLGlCQUFUQyxJQUFzQmxpRixFQUFPYSxhQUFlQSxJQUFlQSxFQUFXb2hGLElBQU8sTUFBTSxJQUFJMzZGLE1BQU0scUJBQXVCMjZGLEdBQy9ILE9BQU9DLEdBQVFELEVBUUNJLENBQWtCemhGLEdBRTFCelgsS0FBS3lYLFVBQ1gsSUFBSyxVQUNIelgsS0FBSzBULEtBQU95bEYsRUFDWm41RixLQUFLZ1QsSUFBTW9tRixFQUNYaDdDLEVBQUssRUFDTCxNQUNGLElBQUssT0FDSHArQyxLQUFLcTVGLFNBQVdDLEVBQ2hCbDdDLEVBQUssRUFDTCxNQUNGLElBQUssU0FDSHArQyxLQUFLMFQsS0FBTzZsRixFQUNadjVGLEtBQUtnVCxJQUFNd21GLEVBQ1hwN0MsRUFBSyxFQUNMLE1BQ0YsUUFHRSxPQUZBcCtDLEtBQUs0WCxNQUFRNmhGLE9BQ2J6NUYsS0FBS2dULElBQU0wbUYsR0FHZjE1RixLQUFLMjVGLFNBQVcsRUFDaEIzNUYsS0FBSzQ1RixVQUFZLEVBQ2pCNTVGLEtBQUs2NUYsU0FBV2hqRixFQUFPTSxZQUFZaW5DLEdBb0NyQyxTQUFTMDdDLEVBQWNDLEdBQ3JCLE9BQUlBLEdBQVEsSUFBYSxFQUFXQSxHQUFRLEdBQU0sRUFBYSxFQUFXQSxHQUFRLEdBQU0sR0FBYSxFQUFXQSxHQUFRLEdBQU0sR0FBYSxFQUNwSUEsR0FBUSxHQUFNLEdBQVEsR0FBSyxFQTJEcEMsU0FBU1QsRUFBYS8vRSxHQUNwQixJQUFJaGUsRUFBSXlFLEtBQUs0NUYsVUFBWTU1RixLQUFLMjVGLFNBQzFCcC9GLEVBdEJOLFNBQTZCaUMsRUFBTStjLEVBQUtoZSxHQUN0QyxHQUF3QixNQUFWLElBQVRnZSxFQUFJLElBRVAsT0FEQS9jLEVBQUttOUYsU0FBVyxFQUNULElBRVQsR0FBSW45RixFQUFLbTlGLFNBQVcsR0FBS3BnRixFQUFJcmQsT0FBUyxFQUFHLENBQ3ZDLEdBQXdCLE1BQVYsSUFBVHFkLEVBQUksSUFFUCxPQURBL2MsRUFBS205RixTQUFXLEVBQ1QsSUFFVCxHQUFJbjlGLEVBQUttOUYsU0FBVyxHQUFLcGdGLEVBQUlyZCxPQUFTLEdBQ1osTUFBVixJQUFUcWQsRUFBSSxJQUVQLE9BREEvYyxFQUFLbTlGLFNBQVcsRUFDVCxLQVNMSyxDQUFvQmg2RixLQUFNdVosR0FDbEMsWUFBVW5iLElBQU43RCxFQUF3QkEsRUFDeEJ5RixLQUFLMjVGLFVBQVlwZ0YsRUFBSXJkLFFBQ3ZCcWQsRUFBSXhCLEtBQUsvWCxLQUFLNjVGLFNBQVV0K0YsRUFBRyxFQUFHeUUsS0FBSzI1RixVQUM1QjM1RixLQUFLNjVGLFNBQVMxOEYsU0FBUzZDLEtBQUt5WCxTQUFVLEVBQUd6WCxLQUFLNDVGLGFBRXZEcmdGLEVBQUl4QixLQUFLL1gsS0FBSzY1RixTQUFVdCtGLEVBQUcsRUFBR2dlLEVBQUlyZCxhQUNsQzhELEtBQUsyNUYsVUFBWXBnRixFQUFJcmQsU0EyQnZCLFNBQVNpOUYsRUFBVTUvRSxFQUFLOWYsR0FDdEIsSUFBSzhmLEVBQUlyZCxPQUFTekMsR0FBSyxHQUFNLEVBQUcsQ0FDOUIsSUFBSWMsRUFBSWdmLEVBQUlwYyxTQUFTLFVBQVcxRCxHQUNoQyxHQUFJYyxFQUFHLENBQ0wsSUFBSVQsRUFBSVMsRUFBRXFYLFdBQVdyWCxFQUFFMkIsT0FBUyxHQUNoQyxHQUFJcEMsR0FBSyxPQUFVQSxHQUFLLE1BS3RCLE9BSkFrRyxLQUFLMjVGLFNBQVcsRUFDaEIzNUYsS0FBSzQ1RixVQUFZLEVBQ2pCNTVGLEtBQUs2NUYsU0FBUyxHQUFLdGdGLEVBQUlBLEVBQUlyZCxPQUFTLEdBQ3BDOEQsS0FBSzY1RixTQUFTLEdBQUt0Z0YsRUFBSUEsRUFBSXJkLE9BQVMsR0FDN0IzQixFQUFFb0UsTUFBTSxHQUFJLEdBR3ZCLE9BQU9wRSxFQUtULE9BSEF5RixLQUFLMjVGLFNBQVcsRUFDaEIzNUYsS0FBSzQ1RixVQUFZLEVBQ2pCNTVGLEtBQUs2NUYsU0FBUyxHQUFLdGdGLEVBQUlBLEVBQUlyZCxPQUFTLEdBQzdCcWQsRUFBSXBjLFNBQVMsVUFBVzFELEVBQUc4ZixFQUFJcmQsT0FBUyxHQUtqRCxTQUFTazlGLEVBQVM3L0UsR0FDaEIsSUFBSWhmLEVBQUlnZixHQUFPQSxFQUFJcmQsT0FBUzhELEtBQUs0WCxNQUFNMkIsR0FBTyxHQUM5QyxHQUFJdlosS0FBSzI1RixTQUFVLENBQ2pCLElBQUkzbUYsRUFBTWhULEtBQUs0NUYsVUFBWTU1RixLQUFLMjVGLFNBQ2hDLE9BQU9wL0YsRUFBSXlGLEtBQUs2NUYsU0FBUzE4RixTQUFTLFVBQVcsRUFBRzZWLEdBRWxELE9BQU96WSxFQUdULFNBQVNnL0YsRUFBV2hnRixFQUFLOWYsR0FDdkIsSUFBSXlCLEdBQUtxZSxFQUFJcmQsT0FBU3pDLEdBQUssRUFDM0IsT0FBVSxJQUFOeUIsRUFBZ0JxZSxFQUFJcGMsU0FBUyxTQUFVMUQsSUFDM0N1RyxLQUFLMjVGLFNBQVcsRUFBSXorRixFQUNwQjhFLEtBQUs0NUYsVUFBWSxFQUNQLElBQU4xK0YsRUFDRjhFLEtBQUs2NUYsU0FBUyxHQUFLdGdGLEVBQUlBLEVBQUlyZCxPQUFTLElBRXBDOEQsS0FBSzY1RixTQUFTLEdBQUt0Z0YsRUFBSUEsRUFBSXJkLE9BQVMsR0FDcEM4RCxLQUFLNjVGLFNBQVMsR0FBS3RnRixFQUFJQSxFQUFJcmQsT0FBUyxJQUUvQnFkLEVBQUlwYyxTQUFTLFNBQVUxRCxFQUFHOGYsRUFBSXJkLE9BQVNoQixJQUdoRCxTQUFTcytGLEVBQVVqZ0YsR0FDakIsSUFBSWhmLEVBQUlnZixHQUFPQSxFQUFJcmQsT0FBUzhELEtBQUs0WCxNQUFNMkIsR0FBTyxHQUM5QyxPQUFJdlosS0FBSzI1RixTQUFpQnAvRixFQUFJeUYsS0FBSzY1RixTQUFTMThGLFNBQVMsU0FBVSxFQUFHLEVBQUk2QyxLQUFLMjVGLFVBQ3BFcC9GLEVBSVQsU0FBU2svRixFQUFZbGdGLEdBQ25CLE9BQU9BLEVBQUlwYyxTQUFTNkMsS0FBS3lYLFVBRzNCLFNBQVNpaUYsRUFBVW5nRixHQUNqQixPQUFPQSxHQUFPQSxFQUFJcmQsT0FBUzhELEtBQUs0WCxNQUFNMkIsR0FBTyxHQXpOL0NoZ0IsRUFBUW80QyxjQUFnQkEsRUE2QnhCQSxFQUFjdDJDLFVBQVV1YyxNQUFRLFNBQVUyQixHQUN4QyxHQUFtQixJQUFmQSxFQUFJcmQsT0FBYyxNQUFPLEdBQzdCLElBQUkzQixFQUNBZCxFQUNKLEdBQUl1RyxLQUFLMjVGLFNBQVUsQ0FFakIsUUFBVXY3RixLQURWN0QsRUFBSXlGLEtBQUtxNUYsU0FBUzkvRSxJQUNHLE1BQU8sR0FDNUI5ZixFQUFJdUcsS0FBSzI1RixTQUNUMzVGLEtBQUsyNUYsU0FBVyxPQUVoQmxnRyxFQUFJLEVBRU4sT0FBSUEsRUFBSThmLEVBQUlyZCxPQUFlM0IsRUFBSUEsRUFBSXlGLEtBQUswVCxLQUFLNkYsRUFBSzlmLEdBQUt1RyxLQUFLMFQsS0FBSzZGLEVBQUs5ZixHQUMvRGMsR0FBSyxJQUdkbzNDLEVBQWN0MkMsVUFBVTJYLElBd0d4QixTQUFpQnVHLEdBQ2YsSUFBSWhmLEVBQUlnZixHQUFPQSxFQUFJcmQsT0FBUzhELEtBQUs0WCxNQUFNMkIsR0FBTyxHQUM5QyxPQUFJdlosS0FBSzI1RixTQUFpQnAvRixFQUFJLElBQ3ZCQSxHQXhHVG8zQyxFQUFjdDJDLFVBQVVxWSxLQTBGeEIsU0FBa0I2RixFQUFLOWYsR0FDckIsSUFBSTZZLEVBckVOLFNBQTZCOVYsRUFBTStjLEVBQUs5ZixHQUN0QyxJQUFJd1AsRUFBSXNRLEVBQUlyZCxPQUFTLEVBQ3JCLEdBQUkrTSxFQUFJeFAsRUFBRyxPQUFPLEVBQ2xCLElBQUkya0QsRUFBSzA3QyxFQUFjdmdGLEVBQUl0USxJQUMzQixHQUFJbTFDLEdBQU0sRUFFUixPQURJQSxFQUFLLElBQUc1aEQsRUFBS205RixTQUFXdjdDLEVBQUssR0FDMUJBLEVBRVQsS0FBTW4xQyxFQUFJeFAsSUFBYSxJQUFSMmtELEVBQVcsT0FBTyxFQUVqQyxJQURBQSxFQUFLMDdDLEVBQWN2Z0YsRUFBSXRRLE1BQ2IsRUFFUixPQURJbTFDLEVBQUssSUFBRzVoRCxFQUFLbTlGLFNBQVd2N0MsRUFBSyxHQUMxQkEsRUFFVCxLQUFNbjFDLEVBQUl4UCxJQUFhLElBQVIya0QsRUFBVyxPQUFPLEVBRWpDLElBREFBLEVBQUswN0MsRUFBY3ZnRixFQUFJdFEsTUFDYixFQUlSLE9BSEltMUMsRUFBSyxJQUNJLElBQVBBLEVBQVVBLEVBQUssRUFBTzVoRCxFQUFLbTlGLFNBQVd2N0MsRUFBSyxHQUUxQ0EsRUFFVCxPQUFPLEVBK0NLNjdDLENBQW9CajZGLEtBQU11WixFQUFLOWYsR0FDM0MsSUFBS3VHLEtBQUsyNUYsU0FBVSxPQUFPcGdGLEVBQUlwYyxTQUFTLE9BQVExRCxHQUNoRHVHLEtBQUs0NUYsVUFBWXRuRixFQUNqQixJQUFJVSxFQUFNdUcsRUFBSXJkLFFBQVVvVyxFQUFRdFMsS0FBSzI1RixVQUVyQyxPQURBcGdGLEVBQUl4QixLQUFLL1gsS0FBSzY1RixTQUFVLEVBQUc3bUYsR0FDcEJ1RyxFQUFJcGMsU0FBUyxPQUFRMUQsRUFBR3VaLElBN0ZqQzIrQixFQUFjdDJDLFVBQVVnK0YsU0FBVyxTQUFVOS9FLEdBQzNDLEdBQUl2WixLQUFLMjVGLFVBQVlwZ0YsRUFBSXJkLE9BRXZCLE9BREFxZCxFQUFJeEIsS0FBSy9YLEtBQUs2NUYsU0FBVTc1RixLQUFLNDVGLFVBQVk1NUYsS0FBSzI1RixTQUFVLEVBQUczNUYsS0FBSzI1RixVQUN6RDM1RixLQUFLNjVGLFNBQVMxOEYsU0FBUzZDLEtBQUt5WCxTQUFVLEVBQUd6WCxLQUFLNDVGLFdBRXZEcmdGLEVBQUl4QixLQUFLL1gsS0FBSzY1RixTQUFVNzVGLEtBQUs0NUYsVUFBWTU1RixLQUFLMjVGLFNBQVUsRUFBR3BnRixFQUFJcmQsUUFDL0Q4RCxLQUFLMjVGLFVBQVlwZ0YsRUFBSXJkLFMsZ0JDckl2QixJQUFJc0ksRUFBUyxFQUFRLElBQ2pCcVMsRUFBU3JTLEVBQU9xUyxPQUdwQixTQUFTcWpGLEVBQVd4NEUsRUFBS0MsR0FDdkIsSUFBSyxJQUFJM21CLEtBQU8wbUIsRUFDZEMsRUFBSTNtQixHQUFPMG1CLEVBQUkxbUIsR0FXbkIsU0FBU20vRixFQUFZeDNGLEVBQUt1VSxFQUFrQmhiLEdBQzFDLE9BQU8yYSxFQUFPbFUsRUFBS3VVLEVBQWtCaGIsR0FUbkMyYSxFQUFPTyxNQUFRUCxFQUFPNkUsT0FBUzdFLEVBQU9NLGFBQWVOLEVBQU91RixnQkFDOUQ1aUIsRUFBT0QsUUFBVWlMLEdBR2pCMDFGLEVBQVUxMUYsRUFBUWpMLEdBQ2xCQSxFQUFRc2QsT0FBU3NqRixHQVFuQkQsRUFBVXJqRixFQUFRc2pGLEdBRWxCQSxFQUFXL2lGLEtBQU8sU0FBVXpVLEVBQUt1VSxFQUFrQmhiLEdBQ2pELEdBQW1CLGlCQUFSeUcsRUFDVCxNQUFNLElBQUk3RyxVQUFVLGlDQUV0QixPQUFPK2EsRUFBT2xVLEVBQUt1VSxFQUFrQmhiLElBR3ZDaStGLEVBQVd6K0UsTUFBUSxTQUFVMUosRUFBTW1LLEVBQU0xRSxHQUN2QyxHQUFvQixpQkFBVHpGLEVBQ1QsTUFBTSxJQUFJbFcsVUFBVSw2QkFFdEIsSUFBSXlkLEVBQU0xQyxFQUFPN0UsR0FVakIsWUFUYTVULElBQVQrZCxFQUNzQixpQkFBYjFFLEVBQ1Q4QixFQUFJNEMsS0FBS0EsRUFBTTFFLEdBRWY4QixFQUFJNEMsS0FBS0EsR0FHWDVDLEVBQUk0QyxLQUFLLEdBRUo1QyxHQUdUNGdGLEVBQVdoakYsWUFBYyxTQUFVbkYsR0FDakMsR0FBb0IsaUJBQVRBLEVBQ1QsTUFBTSxJQUFJbFcsVUFBVSw2QkFFdEIsT0FBTythLEVBQU83RSxJQUdoQm1vRixFQUFXLzlFLGdCQUFrQixTQUFVcEssR0FDckMsR0FBb0IsaUJBQVRBLEVBQ1QsTUFBTSxJQUFJbFcsVUFBVSw2QkFFdEIsT0FBTzBJLEVBQU9pWCxXQUFXekosSyxnQkMxRDNCLFNBQVNvb0YsRUFBYXo1RCxHQUNsQjNnQyxLQUFLNmdDLEtBQU9GLEdBQU8sR0FIdkJubkMsRUFBT0QsUUFBVTZnRyxFQU1qQixJQUFJOW1GLEVBQVMsRUFBUSxJQUFNQSxPQUMzQm5aLE9BQU9vRyxLQUFLK1MsR0FBUTNTLFNBQVEsU0FBUzNHLEdBQ2pDLEdBQXFCLElBQWpCc1osRUFBT3RaLEdBQ1BBLEVBQU8sS0FBT0EsRUFDZG9nRyxFQUFhLytGLFVBQVVyQixHQUFRLFdBQ3ZCZ0csS0FBSzZnQyxLQUFLN21DLElBQU9nRyxLQUFLNmdDLEtBQUs3bUMsV0FFaEMsR0FBcUIsSUFBakJzWixFQUFPdFosR0FDZEEsRUFBTyxLQUFPQSxFQUNkb2dHLEVBQWEvK0YsVUFBVXJCLEdBQVEsU0FBUzZJLEdBQ2hDN0MsS0FBSzZnQyxLQUFLN21DLElBQU9nRyxLQUFLNmdDLEtBQUs3bUMsR0FBTTZJLFFBRXRDLElBQXFCLElBQWpCeVEsRUFBT3RaLEdBTWQsTUFBTW1FLE1BQU0sNkJBTFpuRSxFQUFPLEtBQU9BLEVBQ2RvZ0csRUFBYS8rRixVQUFVckIsR0FBUSxTQUFTNkksRUFBR0MsR0FDbkM5QyxLQUFLNmdDLEtBQUs3bUMsSUFBT2dHLEtBQUs2Z0MsS0FBSzdtQyxHQUFNNkksRUFBR0MsUyxnQkNuQnBELFNBQVN1M0YsRUFBa0IxNUQsR0FDdkIzZ0MsS0FBSzZnQyxLQUFPRixHQUFPLEdBQ25CM2dDLEtBQUswN0IsT0FBUyxHQUpsQmxpQyxFQUFPRCxRQUFVOGdHLEVBT2pCLElBQUkvbUYsRUFBUyxFQUFRLElBQU1BLE9BQzNCblosT0FBT29HLEtBQUsrUyxHQUFRM1MsU0FBUSxTQUFTM0csR0FDakMsR0FBcUIsSUFBakJzWixFQUFPdFosR0FDUEEsRUFBTyxLQUFPQSxFQUNkcWdHLEVBQWtCaC9GLFVBQVVyQixHQUFRLFdBQ2hDZ0csS0FBSzA3QixPQUFPMThCLEtBQUssQ0FBQ2hGLElBQ2RnRyxLQUFLNmdDLEtBQUs3bUMsSUFBT2dHLEtBQUs2Z0MsS0FBSzdtQyxXQUVoQyxHQUFxQixJQUFqQnNaLEVBQU90WixHQUNkQSxFQUFPLEtBQU9BLEVBQ2RxZ0csRUFBa0JoL0YsVUFBVXJCLEdBQVEsU0FBUzZJLEdBQ3pDN0MsS0FBSzA3QixPQUFPMThCLEtBQUssQ0FBQ2hGLEVBQU02SSxJQUNwQjdDLEtBQUs2Z0MsS0FBSzdtQyxJQUFPZ0csS0FBSzZnQyxLQUFLN21DLEdBQU02SSxRQUV0QyxJQUFxQixJQUFqQnlRLEVBQU90WixHQU9kLE1BQU1tRSxNQUFNLDZCQU5abkUsRUFBTyxLQUFPQSxFQUNkcWdHLEVBQWtCaC9GLFVBQVVyQixHQUFRLFNBQVM2SSxFQUFHQyxHQUM1QzlDLEtBQUswN0IsT0FBTzE4QixLQUFLLENBQUNoRixFQUFNNkksRUFBR0MsSUFDdkI5QyxLQUFLNmdDLEtBQUs3bUMsSUFBT2dHLEtBQUs2Z0MsS0FBSzdtQyxHQUFNNkksRUFBR0MsUUFPcER1M0YsRUFBa0JoL0YsVUFBVXFvQyxRQUFVLFdBQ2xDMWpDLEtBQUswN0IsT0FBUyxHQUNWMTdCLEtBQUs2Z0MsS0FBSzZDLFNBQVMxakMsS0FBSzZnQyxLQUFLNkMsV0FHckMyMkQsRUFBa0JoL0YsVUFBVWkvRixRQUFVLFdBQzlCdDZGLEtBQUs2Z0MsS0FBSzZDLFNBQVMxakMsS0FBSzZnQyxLQUFLNkMsVUFFakMsSUFBSyxJQUFJanFDLEVBQUksRUFBRzhYLEVBQU12UixLQUFLMDdCLE9BQU94L0IsT0FBUXpDLEVBQUk4WCxFQUFLOVgsSUFDL0MsR0FBSXVHLEtBQUs2Z0MsS0FBSzdnQyxLQUFLMDdCLE9BQU9qaUMsR0FBRyxJQUFLLENBQzlCLElBQUk0aEMsRUFBTXI3QixLQUFLMDdCLE9BQU9qaUMsR0FBR3lDLE9BRWIsSUFBUm0vQixFQUNBcjdCLEtBQUs2Z0MsS0FBSzdnQyxLQUFLMDdCLE9BQU9qaUMsR0FBRyxNQUNWLElBQVI0aEMsRUFDUHI3QixLQUFLNmdDLEtBQUs3Z0MsS0FBSzA3QixPQUFPamlDLEdBQUcsSUFBSXVHLEtBQUswN0IsT0FBT2ppQyxHQUFHLElBRTVDdUcsS0FBSzZnQyxLQUFLN2dDLEtBQUswN0IsT0FBT2ppQyxHQUFHLElBQ3JCdUcsS0FBSzA3QixPQUFPamlDLEdBQUcsR0FDZnVHLEtBQUswN0IsT0FBT2ppQyxHQUFHLE8sNkJDakRuQ1UsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQzNDbUIsT0FBTyxJQUVUbkIsRUFBUW9yQixRQU9SLFNBQXlCK0ksR0FHdkIsT0FBT0EsRUFBS3htQixPLDZCQ2JkL00sT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQzNDbUIsT0FBTyxJQUVUbkIsRUFBUW9yQixRQWdDUixTQUF3QitJLEVBQU16dUIsRUFBT3d1QixHQUVuQyxJQUFJc2hCLEVBQVVyaEIsRUFBSzF6QixLQUduQixLQUFLLEVBQUl1Z0csRUFBNEI1MUUsU0FBU29xQixHQUM1QyxPQUFPLEtBSVQsSUFBSTl5QyxHQUFRLEVBQUl1K0YsRUFBOEI3MUUsU0FBUytJLEVBQUsrZ0IsUUFBU3h2QyxHQUdqRXN2QyxFQUFXLE1BQ2tDLElBQTdDa3NELEVBQWU5MUUsUUFBUXpsQixRQUFRNnZDLEtBQ2pDUixHQUFXLEVBQUltc0QsRUFBZS8xRSxTQUFTK0ksRUFBSzZnQixTQUFVOWdCLElBSXhELE9BQU9rdEUsRUFBUWgyRSxRQUFRcmIsY0FBY3lsQyxFQUFTOXlDLEVBQU9zeUMsSUFqRHZELElBRUlvc0QsRUFBVTN5RSxFQUZELEVBQVEsSUFNakIweUUsRUFBaUIxeUUsRUFGRCxFQUFRLEtBTXhCd3lFLEVBQWdDeHlFLEVBRkQsRUFBUSxLQU12Q3l5RSxFQUFpQnp5RSxFQUZELEVBQVEsTUFNeEJ1eUUsRUFBOEJ2eUUsRUFGRCxFQUFRLEtBSXpDLFNBQVNBLEVBQXVCdnNCLEdBQU8sT0FBT0EsR0FBT0EsRUFBSVosV0FBYVksRUFBTSxDQUFFa3BCLFFBQVNscEIsSyw2QkN6QnZGdEIsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQzNDbUIsT0FBTyxJQUVUbkIsRUFBUW9yQixRQTRDUixTQUErQnBiLEdBRTdCLE9BQU9wUCxPQUFPb0csS0FBS2dKLEdBQVl2SCxRQUFPLFNBQVU0NEYsR0FDOUMsT0FBTyxFQUFJTCxFQUE0QjUxRSxTQUFTaTJFLE1BQy9DaDRGLFFBQU8sU0FBVWk0RixFQUFrQnRuRixHQUdwQyxJQUFJdW5GLEVBQXFCdm5GLEVBQVU4RSxjQUcvQnJlLEVBQU8rZ0csRUFBa0JwMkUsUUFBUW0yRSxJQUF1QkEsRUFLNUQsT0FGQUQsRUFBaUI3Z0csR0FBUWdoRyxFQUF3QmhoRyxFQUFNdVAsRUFBV2dLLElBRTNEc25GLElBQ04sS0ExREwsSUFFSUksRUFBc0JqekUsRUFGRCxFQUFRLE1BTTdCK3lFLEVBQW9CL3lFLEVBRkQsRUFBUSxNQU0zQnV5RSxFQUE4QnZ5RSxFQUZELEVBQVEsS0FJekMsU0FBU0EsRUFBdUJ2c0IsR0FBTyxPQUFPQSxHQUFPQSxFQUFJWixXQUFhWSxFQUFNLENBQUVrcEIsUUFBU2xwQixHQVN2RixJQUFJdS9GLEVBQTBCLFNBQWlDem5GLEVBQVc3WSxHQVd4RSxPQVA2QnVnRyxFQUFvQnQyRSxRQUFRdGhCLEtBQUksU0FBVXUzRixHQUNyRSxPQUFPQSxFQUFLdmlGLGlCQUVhblosUUFBUXFVLEVBQVU4RSxnQkFBa0IsSUFDN0QzZCxFQUFRNlksR0FHSDdZLEksNkJDckNUUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FDM0NtQixPQUFPLElBVVRuQixFQUFRb3JCLFFBQVUsQ0FBQyxrQkFBbUIsUUFBUyxXQUFZLFVBQVcsVUFBVyxXQUFZLFVBQVcsUUFBUyxXQUFZLGlCQUFrQixTQUFVLE9BQVEsV0FBWSxRQUFTLGFBQWMsT0FBUSxjQUFlLFdBQVksV0FBWSxXQUFZLFNBQVUsV0FBWSxXQUFZLGMsNkJDWGpTeHFCLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUMzQ21CLE9BQU8sSUFRVG5CLEVBQVFvckIsUUFBVSxDQUloQnUyRSxPQUFRLFNBQ1IsaUJBQWtCLGdCQUNsQkMsVUFBVyxZQUNYOTdGLE9BQVEsU0FDUis3RixnQkFBaUIsa0JBQ2pCQyxrQkFBbUIsb0JBQ25CQyxJQUFLLE1BQ0xDLEdBQUksS0FDSi9iLE1BQU8sUUFDUGdjLGFBQWMsZUFDZEMsU0FBVSxXQUNWOXNFLFFBQVMsVUFDVCtzRSxZQUFhLGNBQ2JDLFlBQWEsY0FDYkMsUUFBUyxVQUNUQyxVQUFXLFlBQ1gvakYsUUFBUyxVQUNUZ2tGLEtBQU0sT0FDTkMsUUFBUyxVQUNUQyxNQUFPLFlBQ1BDLEtBQU0sT0FDTkMsUUFBUyxVQUNUMTFGLFFBQVMsVUFDVDIxRixnQkFBaUIsa0JBQ2pCQyxZQUFhLGNBQ2JDLFNBQVUsV0FDVkMsYUFBYyxlQUNkQyxPQUFRLFNBQ1JDLFlBQWEsY0FDYnQxRixLQUFNLE9BQ040eEQsU0FBVSxXQUNWbjBDLFFBQVMsVUFDVDgzRSxNQUFPLFFBQ1BobUYsSUFBSyxNQUNMa2xDLFNBQVUsV0FDVitnRCxTQUFVLFdBQ1ZDLFVBQVcsWUFDWEMsUUFBUyxVQUNUL25CLEtBQU0sT0FDTmdvQixXQUFZLGFBQ1pDLFlBQWEsY0FDYkMsV0FBWSxhQUNaQyxlQUFnQixpQkFDaEJDLFdBQVksYUFDWkMsWUFBYSxjQUNidHJFLFFBQVMsVUFDVDA4QixPQUFRLFNBQ1JpbEIsT0FBUSxTQUNSNHBCLEtBQU0sT0FDTnZuQyxLQUFNLE9BQ053bkMsU0FBVSxXQUNWOXBELElBQUssVUFDTCxhQUFjLFlBQ2QrcEQsS0FBTSxPQUNONTBGLEdBQUksS0FDSjYwRixVQUFXLFlBQ1hDLFVBQVcsWUFDWG5vQyxHQUFJLEtBQ0pvb0MsVUFBVyxZQUNYQyxRQUFTLFVBQ1RDLEtBQU0sT0FDTkMsTUFBTyxRQUNQQyxLQUFNLE9BQ050M0YsS0FBTSxPQUNOdTNGLEtBQU0sT0FDTkMsSUFBSyxNQUNMQyxTQUFVLFdBQ1ZDLGFBQWMsZUFDZEMsWUFBYSxjQUNibGhGLElBQUssTUFDTG1oRixVQUFXLFlBQ1hyMUYsTUFBTyxRQUNQczFGLFdBQVksYUFDWjVyRSxPQUFRLFNBQ1IxWCxJQUFLLE1BQ0x1akYsVUFBVyxZQUNYdHRELFNBQVUsV0FDVnV0RCxNQUFPLFFBQ1Bya0csS0FBTSxPQUNOd1AsTUFBTyxRQUNQODBGLFdBQVksYUFDWmp4RixLQUFNLE9BQ05reEYsUUFBUyxVQUNUcnZFLFFBQVMsVUFDVDYzRCxZQUFhLGNBQ2J5WCxZQUFhLGNBQ2JDLE9BQVEsU0FDUkMsUUFBUyxVQUNUQyxRQUFTLFVBQ1RDLFdBQVksYUFDWkMsU0FBVSxXQUNWQyxlQUFnQixpQkFDaEJDLElBQUssTUFDTEMsU0FBVSxXQUNWQyxTQUFVLFdBQ1ZDLEtBQU0sT0FDTkMsS0FBTSxPQUNOQyxRQUFTLFVBQ1RDLFFBQVMsVUFDVHpHLE1BQU8sUUFDUDBHLE9BQVEsU0FDUkMsVUFBVyxZQUNYQyxTQUFVLFdBQ1Z6K0MsU0FBVSxXQUNWcTRCLE1BQU8sUUFDUHBuRSxLQUFNLE9BQ055dEYsTUFBTyxRQUNQQyxLQUFNLE9BQ05DLEtBQU0sT0FDTkMsV0FBWSxhQUNabCtFLElBQUssTUFDTG0rRSxPQUFRLFNBQ1JDLFFBQVMsVUFDVEMsT0FBUSxTQUNSeG5GLE1BQU8sUUFDUHluRixLQUFNLE9BQ04zMkYsTUFBTyxRQUNQNDJGLFFBQVMsVUFDVEMsU0FBVSxXQUNWbGtHLE9BQVEsU0FDUnVaLE1BQU8sUUFDUGpXLEtBQU0sT0FDTjZnRyxPQUFRLFNBQ1J6bEcsTUFBTyxRQUNQMnpELE1BQU8sUUFDUCt4QyxNQUFPLFFBQ1Bwa0IsS0FBTSxPQUlOcWtCLE1BQU8sUUFDUEMsU0FBVSxXQUNWQyxPQUFRLFNBQ1I3eEUsT0FBUSxTQUNSdHpCLFNBQVUsV0FDVm9sRyxTQUFVLFdBQ1ZDLE9BQVEsU0FDUkMsTUFBTyxRQUlQQyxlQUFnQixpQkFDaEJDLFlBQWEsY0FDYkMsU0FBVSxXQUNWejdFLE1BQU8sUUFDUDA3RSxTQUFVLFdBQ1ZDLFVBQVcsWUFDWEMsU0FBVSxXQUNWQyxPQUFRLFNBQ1JDLFFBQVMsVUFDVGx3RixRQUFTLFVBQ1Rtd0YsU0FBVSxXQUNWQyxhQUFjLGlCLDZCQ3JLaEJqbkcsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQzNDbUIsT0FBTyxJQUdULElBQUkybUcsRUFBZ2IsU0FBVWo3RixFQUFLM00sR0FBSyxHQUFJaUosTUFBTW1CLFFBQVF1QyxHQUFRLE9BQU9BLEVBQVksR0FBSTVMLE9BQU9xNUMsWUFBWTE1QyxPQUFPaU0sR0FBUSxPQUF4ZixTQUF1QkEsRUFBSzNNLEdBQUssSUFBSStqQixFQUFPLEdBQVE4akYsR0FBSyxFQUFVQyxHQUFLLEVBQVdDLE9BQUtwakcsRUFBVyxJQUFNLElBQUssSUFBaUNxakcsRUFBN0J4Z0csRUFBS21GLEVBQUk1TCxPQUFPcTVDLGNBQW1CeXRELEdBQU1HLEVBQUt4Z0csRUFBR25CLFFBQVFvTSxRQUFvQnNSLEVBQUt4ZSxLQUFLeWlHLEVBQUcvbUcsUUFBWWpCLEdBQUsrakIsRUFBS3RoQixTQUFXekMsR0FBM0Q2bkcsR0FBSyxJQUFvRSxNQUFPajFGLEdBQU9rMUYsR0FBSyxFQUFNQyxFQUFLbjFGLEVBQU8sUUFBVSxLQUFXaTFGLEdBQU1yZ0csRUFBVyxRQUFHQSxFQUFXLFNBQU8sUUFBVSxHQUFJc2dHLEVBQUksTUFBTUMsR0FBUSxPQUFPaGtGLEVBQTZIa2tGLENBQWN0N0YsRUFBSzNNLEdBQWEsTUFBTSxJQUFJcUMsVUFBVSx5REFFdGxCdkMsRUFBUW9yQixRQU9SLFdBQ0UsSUFBSWc5RSxFQUFjempHLFVBQVVoQyxPQUFTLFFBQXNCa0MsSUFBakJGLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxHQUl0RixHQUFvQixLQUFoQnlqRyxFQUNGLE1BQU8sR0FHVCxPQUFPQSxFQUFZdGtHLE1BQU0sS0FBS3VGLFFBQU8sU0FBVWcvRixFQUFhQyxHQUcxRCxJQUFJQyxFQUF3QkQsRUFBbUJ4a0csTUFBTSxhQUFhMkUsUUFBTyxTQUFVOEIsRUFBS3JLLEdBQ3RGLE9BQU9BLEVBQUksS0FDVjRKLEtBQUksU0FBVWtELEdBQ2YsT0FBT0EsRUFBS1QsT0FBT3VTLGlCQUVqQjBwRixFQUF5QlYsRUFBZVMsRUFBdUIsR0FDL0QxbUcsRUFBVzJtRyxFQUF1QixHQUNsQ3JuRyxFQUFRcW5HLEVBQXVCLEdBS25DLFlBQWMzakcsSUFBVjFELEVBQ0trbkcsR0FhVEEsRUFMQXhtRyxFQUFXQSxFQUFTNEssUUFBUSxRQUFTLE9BQU9BLFFBQVEsU0FBUyxTQUFVcXJDLEVBQUcyd0QsR0FDeEUsT0FBT0EsRUFBVXp5RSxrQkFJSzcwQixFQUVqQmtuRyxLQUNOLE0sNkJDdERMem5HLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUMzQ21CLE9BQU8sSUFPVG5CLEVBQVFvckIsUUFBVSxDQUFDLE9BQVEsT0FBUSxLQUFNLE1BQU8sVUFBVyxRQUFTLEtBQU0sTUFBTyxRQUFTLFNBQVUsT0FBUSxPQUFRLFFBQVMsU0FBVSxRQUFTLFEsNkJDUmhKeHFCLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUMzQ21CLE9BQU8sSUFFVG5CLEVBQVFvckIsUUFtQlIsU0FBMEIrSSxFQUFNenVCLEdBSTlCLElBQUlzSixPQUFTLEVBQ1RtbEIsRUFBSzZnQixTQUFTcnlDLE9BQVMsSUFDekJxTSxFQUFTbWxCLEVBQUs2Z0IsU0FBUyxHQUFHcm5DLE1BSTVCLElBQUlqTCxHQUFRLEVBQUl1K0YsRUFBOEI3MUUsU0FBUytJLEVBQUsrZ0IsUUFBU3h2QyxHQUdyRSxPQUFPMDdGLEVBQVFoMkUsUUFBUXJiLGNBQWMsUUFBU3JOLEVBQU9zTSxJQTlCdkQsSUFFSW95RixFQUFVM3lFLEVBRkQsRUFBUSxJQU1qQnd5RSxFQUFnQ3h5RSxFQUZELEVBQVEsS0FJM0MsU0FBU0EsRUFBdUJ2c0IsR0FBTyxPQUFPQSxHQUFPQSxFQUFJWixXQUFhWSxFQUFNLENBQUVrcEIsUUFBU2xwQixLLDZCQ2J2RnRCLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUMzQ21CLE9BQU8sSUFFVG5CLEVBQVFvckIsUUFLUixXQUlFLE9BQU8sTyw2QkNaVHhxQixPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FDM0NtQixPQUFPLElBRVRuQixFQUFRb3JCLFFBbUJSLFNBQW9CODhCLEdBQ2xCLElBQUkvaEQsRUFBT3hCLFVBQVVoQyxPQUFTLFFBQXNCa0MsSUFBakJGLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxHQUMzRStqRyxFQUFzQnZpRyxFQUFLcXBDLGVBQzNCQSxPQUF5QzNxQyxJQUF4QjZqRyxHQUEyQ0EsRUFDNUR4MEUsRUFBWS90QixFQUFLK3RCLFVBQ2pCeTBFLEVBQXVCeGlHLEVBQUt5aUcsZ0JBSzVCMzBFLFFBSjJDcHZCLElBQXpCOGpHLEVBQXFDLFNBQVUxMEUsR0FDbkUsT0FBT0EsR0FDTDAwRSxHQUV3QkUsRUFBYXo5RSxRQUFRN1IsU0FBUzJ1QyxFQUFNLENBQUUxWSxlQUFnQkEsS0FDbEYsT0FBTyxFQUFJMnhELEVBQWUvMUUsU0FBUzZJLEVBQU9DLElBNUI1QyxJQUVJMjBFLEVBQWVwNkUsRUFGRCxFQUFRLEtBTXRCMHlFLEVBQWlCMXlFLEVBRkQsRUFBUSxLQUk1QixTQUFTQSxFQUF1QnZzQixHQUFPLE9BQU9BLEdBQU9BLEVBQUlaLFdBQWFZLEVBQU0sQ0FBRWtwQixRQUFTbHBCLEssZ0JDZnZGLElBQUkrSyxFQUFVLEVBQVEsS0FHQyxpQkFGdkJBLEVBQVVBLEVBQVEzTCxXQUFhMkwsRUFBUW1lLFFBQVVuZSxLQUcvQ0EsRUFBVSxDQUFDLENBQUNoTixFQUFPQyxFQUFJK00sRUFBUyxNQUdsQyxJQUFJOEIsRUFBVSxDQUVkLE9BQWlCLE9BQ2pCLFdBQW9CLEdBRVAsRUFBUSxHQUFSLENBQXdGOUIsRUFBUzhCLEdBRTFHOUIsRUFBUXcwRSxTQUNWeGhGLEVBQU9ELFFBQVVpTixFQUFRdzBFLFMsaUJDYjNCemhGLEVBRGtDLEVBQVEsR0FDaEMwaEYsRUFBNEIsSUFFOUJqOEUsS0FBSyxDQUFDeEYsRUFBT0MsRUFBSSxta0RBQW9rRCxHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyxrRkFBa0YsTUFBUSxHQUFHLFNBQVcsK3VCQUErdUIsS0FBTyxjQUFjLGVBQWlCLENBQUMsMjlDQUV0L0VELEVBQU9ELFFBQVVBLEcsZ0JDTmpCLElBQUlpTixFQUFVLEVBQVEsS0FHQyxpQkFGdkJBLEVBQVVBLEVBQVEzTCxXQUFhMkwsRUFBUW1lLFFBQVVuZSxLQUcvQ0EsRUFBVSxDQUFDLENBQUNoTixFQUFPQyxFQUFJK00sRUFBUyxNQUdsQyxJQUFJOEIsRUFBVSxDQUVkLE9BQWlCLE9BQ2pCLFdBQW9CLEdBRVAsRUFBUSxHQUFSLENBQXdGOUIsRUFBUzhCLEdBRTFHOUIsRUFBUXcwRSxTQUNWeGhGLEVBQU9ELFFBQVVpTixFQUFRdzBFLFMsaUJDYjNCemhGLEVBRGtDLEVBQVEsR0FDaEMwaEYsRUFBNEIsSUFFOUJqOEUsS0FBSyxDQUFDeEYsRUFBT0MsRUFBSSwwa0JBQTJrQixHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyw4RUFBOEUsTUFBUSxHQUFHLFNBQVcscVBBQXFQLEtBQU8sWUFBWSxlQUFpQixDQUFDLHF5QkFFNy9CRCxFQUFPRCxRQUFVQSxHLDhCQ05qQixZQVVvQnFPLFFBQ1csY0FBN0J0QyxPQUFPdzBCLFNBQVMzTyxVQUVlLFVBQTdCN2xCLE9BQU93MEIsU0FBUzNPLFVBRWhCN2xCLE9BQU93MEIsU0FBUzNPLFNBQVNuTyxNQUN2Qiw2RCx3dkNDZktxbEYsRUFBb0IsSUFBTXRyRCxjQUFjLE1DSW5ELElBQUksRUFKSixTQUEwQnZvQyxHQUN4QkEsS0FTUzh6RixFQUFXLFdBQ3BCLE9BQU8sR0NSTEMsRUFBVSxLQUNWQyxFQUFnQixDQUNsQkMsT0FBUSxjQXVDVixJQUFJQyxFQUVKLFdBQ0UsU0FBU0EsRUFBYXovRixFQUFPMC9GLEdBQzNCM2lHLEtBQUtpRCxNQUFRQSxFQUNiakQsS0FBSzJpRyxVQUFZQSxFQUNqQjNpRyxLQUFLRCxZQUFjLEtBQ25CQyxLQUFLVCxVQUFZaWpHLEVBQ2pCeGlHLEtBQUs0aUcsb0JBQXNCNWlHLEtBQUs0aUcsb0JBQW9CM25HLEtBQUsrRSxNQUczRCxJQUFJNmlHLEVBQVNILEVBQWFybkcsVUFxQzFCLE9BbkNBd25HLEVBQU9DLGFBQWUsU0FBc0Joa0csR0FFMUMsT0FEQWtCLEtBQUsraUcsZUFDRS9pRyxLQUFLVCxVQUFVVixVQUFVQyxJQUdsQytqRyxFQUFPRyxpQkFBbUIsV0FDeEJoakcsS0FBS1QsVUFBVWtqRyxVQUdqQkksRUFBT0Qsb0JBQXNCLFdBQ3ZCNWlHLEtBQUtpakcsZUFDUGpqRyxLQUFLaWpHLGlCQUlUSixFQUFPOWpHLGFBQWUsV0FDcEIsT0FBTzZJLFFBQVE1SCxLQUFLRCxjQUd0QjhpRyxFQUFPRSxhQUFlLFdBcEV4QixJQUNNRyxFQUdBbHVELEVBQ0FsMUMsRUFnRUdFLEtBQUtELGNBQ1JDLEtBQUtELFlBQWNDLEtBQUsyaUcsVUFBWTNpRyxLQUFLMmlHLFVBQVVHLGFBQWE5aUcsS0FBSzRpRyxxQkFBdUI1aUcsS0FBS2lELE1BQU1wRSxVQUFVbUIsS0FBSzRpRyxxQkFDdEg1aUcsS0FBS1QsV0F0RUwyakcsRUFBUVosSUFHUnR0RCxFQUFVLEdBQ1ZsMUMsRUFBTyxHQUNKLENBQ0xxakcsTUFBTyxXQUNMcmpHLEVBQU95aUcsRUFDUHZ0RCxFQUFVdXRELEdBRVpFLE9BQVEsV0FDTixJQUFJbGpHLEVBQVl5MUMsRUFBVWwxQyxFQUMxQm9qRyxHQUFNLFdBQ0osSUFBSyxJQUFJenBHLEVBQUksRUFBR0EsRUFBSThGLEVBQVVyRCxPQUFRekMsSUFDcEM4RixFQUFVOUYsU0FJaEJhLElBQUssV0FDSCxPQUFPd0YsR0FFVGpCLFVBQVcsU0FBbUJDLEdBQzVCLElBQUlDLEdBQWUsRUFHbkIsT0FGSWUsSUFBU2sxQyxJQUFTbDFDLEVBQU9rMUMsRUFBUXIyQyxTQUNyQ21CLEVBQUtkLEtBQUtGLEdBQ0gsV0FDQUMsR0FBZ0JpMkMsSUFBWXV0RCxJQUNqQ3hqRyxHQUFlLEVBQ1hlLElBQVNrMUMsSUFBU2wxQyxFQUFPazFDLEVBQVFyMkMsU0FDckNtQixFQUFLWCxPQUFPVyxFQUFLWixRQUFRSixHQUFXLFVBNkMxQytqRyxFQUFPTyxlQUFpQixXQUNsQnBqRyxLQUFLRCxjQUNQQyxLQUFLRCxjQUNMQyxLQUFLRCxZQUFjLEtBQ25CQyxLQUFLVCxVQUFVNGpHLFFBQ2ZuakcsS0FBS1QsVUFBWWlqRyxJQUlkRSxFQTlDVCxHQzFDQSxTQUFTLEVBQVNoakcsR0FDaEIsSUFBSXVELEVBQVF2RCxFQUFLdUQsTUFDYnF4QyxFQUFVNTBDLEVBQUs0MEMsUUFDZi9GLEVBQVc3dUMsRUFBSzZ1QyxTQUNoQjgwRCxFQUFlLG1CQUFRLFdBQ3pCLElBQUlDLEVBQWUsSUFBSVosRUFBYXovRixHQUVwQyxPQURBcWdHLEVBQWFMLGNBQWdCSyxFQUFhTixpQkFDbkMsQ0FDTC8vRixNQUFPQSxFQUNQcWdHLGFBQWNBLEtBRWYsQ0FBQ3JnRyxJQUNBc2dHLEVBQWdCLG1CQUFRLFdBQzFCLE9BQU90Z0csRUFBTXJFLGFBQ1osQ0FBQ3FFLElBQ0oscUJBQVUsV0FDUixJQUFJcWdHLEVBQWVELEVBQWFDLGFBT2hDLE9BTkFBLEVBQWFQLGVBRVRRLElBQWtCdGdHLEVBQU1yRSxZQUMxQjBrRyxFQUFhTixtQkFHUixXQUNMTSxFQUFhRixpQkFDYkUsRUFBYUwsY0FBZ0IsUUFFOUIsQ0FBQ0ksRUFBY0UsSUFDbEIsSUFBSWhuQixFQUFVam9DLEdBQVcrdEQsRUFDekIsT0FBTyxJQUFNLzRGLGNBQWNpekUsRUFBUW5sQyxTQUFVLENBQzNDMThDLE1BQU8yb0csR0FDTjkwRCxHQUdMLEVBQVN0ckIsVUFBWSxDQUNuQmhnQixNQUFPLElBQVVtMkUsTUFBTSxDQUNyQnY2RSxVQUFXLElBQVVrM0MsS0FBSzJpQyxXQUMxQnQ1RSxTQUFVLElBQVUyMkMsS0FBSzJpQyxXQUN6Qjk1RSxTQUFVLElBQVVtM0MsS0FBSzJpQyxhQUUzQnBrQyxRQUFTLElBQVVuNUMsT0FDbkJvekMsU0FBVSxJQUFVdXFDLEtBRVAsUUNoREEsU0FBUy9qRCxJQWV0QixPQWRBQSxFQUFXNTZCLE9BQU9zMkIsUUFBVSxTQUFVejBCLEdBQ3BDLElBQUssSUFBSXZDLEVBQUksRUFBR0EsRUFBSXlFLFVBQVVoQyxPQUFRekMsSUFBSyxDQUN6QyxJQUFJMkksRUFBU2xFLFVBQVV6RSxHQUV2QixJQUFLLElBQUl1QixLQUFPb0gsRUFDVmpJLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBS3dJLEVBQVFwSCxLQUMvQ2dCLEVBQU9oQixHQUFPb0gsRUFBT3BILElBSzNCLE9BQU9nQixJQUdPd0YsTUFBTXhCLEtBQU05QixXQ2ZmLFNBQVNzbEcsRUFBOEJwaEcsRUFBUXFoRyxHQUM1RCxHQUFjLE1BQVZyaEcsRUFBZ0IsTUFBTyxHQUMzQixJQUVJcEgsRUFBS3ZCLEVBRkx1QyxFQUFTLEdBQ1QwbkcsRUFBYXZwRyxPQUFPb0csS0FBSzZCLEdBRzdCLElBQUszSSxFQUFJLEVBQUdBLEVBQUlpcUcsRUFBV3huRyxPQUFRekMsSUFDakN1QixFQUFNMG9HLEVBQVdqcUcsR0FDYmdxRyxFQUFTdmtHLFFBQVFsRSxJQUFRLElBQzdCZ0IsRUFBT2hCLEdBQU9vSCxFQUFPcEgsSUFHdkIsT0FBT2dCLEUsOENDRkUybkcsRUFEdUMsb0JBQVhyK0YsYUFBcUQsSUFBcEJBLE9BQU9DLGVBQXFFLElBQWxDRCxPQUFPQyxTQUFTK0QsY0FDL0Qsa0JBQWtCLFlDQWpGczZGLEVBQWMsR0FDZEMsRUFBd0IsQ0FBQyxLQUFNLE1BVW5DLFNBQVNDLEVBQXlCaGpHLEVBQU96QixHQUN2QyxJQUFJMGtHLEVBQWNqakcsRUFBTSxHQUN4QixNQUFPLENBQUN6QixFQUFPK3BCLFFBQVMyNkUsRUFBYyxHQUd4QyxJQUFJQyxFQUFtQixXQUNyQixNQUFPLENBQUMsS0FBTSxJQUdELFNBQVNDLEVBZXhCQyxFQUNBeGtHLFFBQ2UsSUFBVEEsSUFDRkEsRUFBTyxJQUdULElBQUl6QixFQUFReUIsRUFDUnlrRyxFQUF1QmxtRyxFQUFNbW1HLGVBQzdCQSxPQUEwQyxJQUF6QkQsRUFBa0MsU0FBVW5xRyxHQUMvRCxNQUFPLG1CQUFxQkEsRUFBTyxLQUNqQ21xRyxFQUNBRSxFQUFtQnBtRyxFQUFNcW1HLFdBQ3pCQSxPQUFrQyxJQUFyQkQsRUFBOEIsa0JBQW9CQSxFQUMvREUsRUFBd0J0bUcsRUFBTXVtRyxnQkFDOUJBLE9BQTRDLElBQTFCRCxPQUFtQ25tRyxFQUFZbW1HLEVBQ2pFRSxFQUF3QnhtRyxFQUFNeW1HLHlCQUM5QkEsT0FBcUQsSUFBMUJELEdBQTBDQSxFQUNyRUUsRUFBaUIxbUcsRUFBTTJtRyxTQUN2QkEsT0FBOEIsSUFBbkJELEVBQTRCLFFBQVVBLEVBQ2pERSxFQUFnQjVtRyxFQUFNNm1HLFFBQ3RCQSxPQUE0QixJQUFsQkQsR0FBbUNBLEVBQzdDRSxFQUFtQjltRyxFQUFNczVDLFdBQ3pCQSxPQUFrQyxJQUFyQnd0RCxHQUFzQ0EsRUFDbkRDLEVBQWdCL21HLEVBQU1xMkMsUUFDdEJBLE9BQTRCLElBQWxCMHdELEVBQTJCM0MsRUFBb0IyQyxFQUN6REMsRUFBaUJ6QixFQUE4QnZsRyxFQUFPLENBQUMsaUJBQWtCLGFBQWMsa0JBQW1CLDJCQUE0QixXQUFZLFVBQVcsYUFBYyxZQUUvSyxTQUE4QkcsSUFBcEJvbUcsRUFBK0IsNEdBQ3pDLEtBQVdNLEVBQVMsNEZBRXBCLElBQXVCLFVBQWJGLEVBQXNCLDJZQUNoQyxJQUFJcm9CLEVBQVVqb0MsRUFDZCxPQUFPLFNBQXlCNHdELEdBSzlCLElBQUlDLEVBQXVCRCxFQUFpQnRpRixhQUFlc2lGLEVBQWlCbHJHLE1BQVEsWUFDaEY0b0IsRUFBY3doRixFQUFlZSxHQUU3QkMsRUFBeUJyd0UsRUFBUyxHQUFJa3dFLEVBQWdCLENBQ3hEYixlQUFnQkEsRUFDaEJFLFdBQVlBLEVBQ1pFLGdCQUFpQkEsRUFDakJFLHlCQUEwQkEsRUFDMUJFLFNBQVVBLEVBQ1ZoaUYsWUFBYUEsRUFDYnVpRixxQkFBc0JBLEVBQ3RCRCxpQkFBa0JBLElBR2hCRyxFQUFPSixFQUFlSSxLQVMxQixJQUFJQyxFQUFrQkQsRUFBTyxVQUFVLFNBQVU3MkYsR0FDL0MsT0FBT0EsS0FHVCxTQUFTKzJGLEVBQWdCdHBHLEdBQ3ZCLElBQUl1cEcsRUFBVyxtQkFBUSxXQUlyQixJQUFJQyxFQUFleHBHLEVBQU13cEcsYUFDckJDLEVBQWVsQyxFQUE4QnZuRyxFQUFPLENBQUMsaUJBRXpELE1BQU8sQ0FBQ0EsRUFBTXE0QyxRQUFTbXhELEVBQWNDLEtBQ3BDLENBQUN6cEcsSUFDQTBwRyxFQUFlSCxFQUFTLEdBQ3hCQyxFQUFlRCxFQUFTLEdBQ3hCRSxFQUFlRixFQUFTLEdBRXhCSSxFQUFlLG1CQUFRLFdBR3pCLE9BQU9ELEdBQWdCQSxFQUFhdHVELFVBQVksNEJBQWtCLElBQU0vdEMsY0FBY3E4RixFQUFhdHVELFNBQVUsT0FBU3N1RCxFQUFlcHBCLElBQ3BJLENBQUNvcEIsRUFBY3BwQixJQUVkOG1CLEVBQWUscUJBQVd1QyxHQUkxQkMsRUFBd0JqK0YsUUFBUTNMLEVBQU1nSCxRQUFVMkUsUUFBUTNMLEVBQU1nSCxNQUFNckUsV0FBYWdKLFFBQVEzTCxFQUFNZ0gsTUFBTTdELFVBQ3JHMG1HLEVBQTBCbCtGLFFBQVF5N0YsSUFBaUJ6N0YsUUFBUXk3RixFQUFhcGdHLE9BQzVFLElBQVU0aUcsR0FBeUJDLEVBQXlCLDZDQUF3RGxqRixFQUFjLDRKQUEyS0EsRUFBYyx3QkFFM1QsSUFBSTNmLEVBQVE0aUcsRUFBd0I1cEcsRUFBTWdILE1BQVFvZ0csRUFBYXBnRyxNQUMzRDhpRyxFQUFxQixtQkFBUSxXQUcvQixPQTNDSixTQUE2QjlpRyxHQUMzQixPQUFPaWhHLEVBQWdCamhHLEVBQU03RCxTQUFVZ21HLEdBMEM5QlksQ0FBb0IvaUcsS0FDMUIsQ0FBQ0EsSUFFQWdqRyxFQUFZLG1CQUFRLFdBQ3RCLElBQUt2QixFQUEwQixPQUFPYixFQUd0QyxJQUFJUCxFQUFlLElBQUlaLEVBQWF6L0YsRUFBTzRpRyxFQUF3QixLQUFPeEMsRUFBYUMsY0FLbkZOLEVBQW1CTSxFQUFhTixpQkFBaUIvbkcsS0FBS3FvRyxHQUMxRCxNQUFPLENBQUNBLEVBQWNOLEtBQ3JCLENBQUMvL0YsRUFBTzRpRyxFQUF1QnhDLElBQzlCQyxFQUFlMkMsRUFBVSxHQUN6QmpELEVBQW1CaUQsRUFBVSxHQUk3QkMsRUFBeUIsbUJBQVEsV0FDbkMsT0FBSUwsRUFJS3hDLEVBS0Z0dUUsRUFBUyxHQUFJc3VFLEVBQWMsQ0FDaENDLGFBQWNBLE1BRWYsQ0FBQ3VDLEVBQXVCeEMsRUFBY0MsSUFHckM2QyxFQUFjLHFCQUFXckMsRUFBMEJGLEVBQWFJLEdBRWhFb0MsRUFEZUQsRUFBWSxHQUNjLEdBQ3pDRSxFQUErQkYsRUFBWSxHQUcvQyxHQUFJQyxHQUE2QkEsRUFBMEI3NkYsTUFDekQsTUFBTTY2RixFQUEwQjc2RixNQUlsQyxJQUFJKzZGLEVBQWlCLG1CQUNqQkMsRUFBbUIsaUJBQU9iLEdBQzFCYyxFQUE0QixtQkFDNUJDLEVBQW9CLGtCQUFPLEdBQzNCQyxFQUFtQnBCLEdBQWdCLFdBT3JDLE9BQUlrQixFQUEwQnh4RCxTQUFXMHdELElBQWlCYSxFQUFpQnZ4RCxRQUNsRXd4RCxFQUEwQnh4RCxRQU81Qit3RCxFQUFtQjlpRyxFQUFNckUsV0FBWThtRyxLQUMzQyxDQUFDemlHLEVBQU9takcsRUFBMkJWLElBSXRDL0IsR0FBMEIsV0FFeEI0QyxFQUFpQnZ4RCxRQUFVMHdELEVBQzNCWSxFQUFldHhELFFBQVUweEQsRUFDekJELEVBQWtCenhELFNBQVUsRUFFeEJ3eEQsRUFBMEJ4eEQsVUFDNUJ3eEQsRUFBMEJ4eEQsUUFBVSxLQUNwQ2d1RCxRQUlKVyxHQUEwQixXQUV4QixHQUFLZSxFQUFMLENBRUEsSUFBSWlDLEdBQWlCLEVBQ2pCQyxFQUFrQixLQUVsQkMsRUFBa0IsV0FDcEIsSUFBSUYsRUFBSixDQU1BLElBQ0lHLEVBQWV2N0YsRUFEZnc3RixFQUFtQjlqRyxFQUFNckUsV0FHN0IsSUFHRWtvRyxFQUFnQmYsRUFBbUJnQixFQUFrQlIsRUFBaUJ2eEQsU0FDdEUsTUFBT24wQyxHQUNQMEssRUFBUTFLLEVBQ1IrbEcsRUFBa0IvbEcsRUFHZjBLLElBQ0hxN0YsRUFBa0IsTUFJaEJFLElBQWtCUixFQUFldHhELFFBQzlCeXhELEVBQWtCenhELFNBQ3JCZ3VELEtBT0ZzRCxFQUFldHhELFFBQVU4eEQsRUFDekJOLEVBQTBCeHhELFFBQVU4eEQsRUFDcENMLEVBQWtCenhELFNBQVUsRUFFNUJxeEQsRUFBNkIsQ0FDM0IvbUcsS0FBTSxnQkFDTjhwQixRQUFTLENBQ1A3ZCxNQUFPQSxRQU9mKzNGLEVBQWFMLGNBQWdCNEQsRUFDN0J2RCxFQUFhUCxlQUdiOEQsSUFpQkEsT0FmeUIsV0FLdkIsR0FKQUYsR0FBaUIsRUFDakJyRCxFQUFhRixpQkFDYkUsRUFBYUwsY0FBZ0IsS0FFekIyRCxFQU1GLE1BQU1BLE1BS1QsQ0FBQzNqRyxFQUFPcWdHLEVBQWN5QyxJQUd6QixJQUFJaUIsRUFBMkIsbUJBQVEsV0FDckMsT0FBTyxJQUFNMTlGLGNBQWM0N0YsRUFBa0Jud0UsRUFBUyxHQUFJMnhFLEVBQWtCLENBQzFFdHhELElBQUtxd0QsT0FFTixDQUFDQSxFQUFjUCxFQUFrQndCLElBZXBDLE9BWm9CLG1CQUFRLFdBQzFCLE9BQUloQyxFQUlLLElBQU1wN0YsY0FBY3M4RixFQUFheHVELFNBQVUsQ0FDaEQxOEMsTUFBT3dyRyxHQUNOYyxHQUdFQSxJQUNOLENBQUNwQixFQUFjb0IsRUFBMEJkLElBSzlDLElBQUllLEVBQVU1QixFQUFPLElBQU01OUYsS0FBSzg5RixHQUFtQkEsRUFJbkQsR0FIQTBCLEVBQVEvQixpQkFBbUJBLEVBQzNCK0IsRUFBUXJrRixZQUFjQSxFQUVsQjIwQixFQUFZLENBQ2QsSUFBSTJ2RCxFQUFZLElBQU0zdkQsWUFBVyxTQUEyQnQ3QyxFQUFPbTVDLEdBQ2pFLE9BQU8sSUFBTTlyQyxjQUFjMjlGLEVBQVNseUUsRUFBUyxHQUFJOTRCLEVBQU8sQ0FDdER3cEcsYUFBY3J3RCxRQUtsQixPQUZBOHhELEVBQVV0a0YsWUFBY0EsRUFDeEJza0YsRUFBVWhDLGlCQUFtQkEsRUFDdEIsSUFBYWdDLEVBQVdoQyxHQUdqQyxPQUFPLElBQWErQixFQUFTL0IsSUNyVmpDLElBQUk1Z0YsRUFBU25xQixPQUFPa0IsVUFBVUMsZUFFOUIsU0FBUzg1RCxFQUFHNzRDLEVBQUdDLEdBQ2IsT0FBSUQsSUFBTUMsRUFDSyxJQUFORCxHQUFpQixJQUFOQyxHQUFXLEVBQUlELEdBQU0sRUFBSUMsRUFFcENELEdBQU1BLEdBQUtDLEdBQU1BLEVBSWIsU0FBUzJxRixFQUFhQyxFQUFNQyxHQUN6QyxHQUFJanlDLEVBQUdneUMsRUFBTUMsR0FBTyxPQUFPLEVBRTNCLEdBQW9CLGlCQUFURCxHQUE4QixPQUFUQSxHQUFpQyxpQkFBVEMsR0FBOEIsT0FBVEEsRUFDM0UsT0FBTyxFQUdULElBQUlDLEVBQVFudEcsT0FBT29HLEtBQUs2bUcsR0FDcEJHLEVBQVFwdEcsT0FBT29HLEtBQUs4bUcsR0FDeEIsR0FBSUMsRUFBTXByRyxTQUFXcXJHLEVBQU1yckcsT0FBUSxPQUFPLEVBRTFDLElBQUssSUFBSXpDLEVBQUksRUFBR0EsRUFBSTZ0RyxFQUFNcHJHLE9BQVF6QyxJQUNoQyxJQUFLNnFCLEVBQU8xcUIsS0FBS3l0RyxFQUFNQyxFQUFNN3RHLE1BQVEyN0QsRUFBR2d5QyxFQUFLRSxFQUFNN3RHLElBQUs0dEcsRUFBS0MsRUFBTTd0RyxLQUNqRSxPQUFPLEVBSVgsT0FBTyxFLFdDMUJGLFNBQVMrdEcsRUFBdUJDLEdBQ3JDLE9BQU8sU0FBOEJyb0csRUFBVWtKLEdBQzdDLElBQUlvL0YsRUFBV0QsRUFBWXJvRyxFQUFVa0osR0FFckMsU0FBU3EvRixJQUNQLE9BQU9ELEVBSVQsT0FEQUMsRUFBaUJDLG1CQUFvQixFQUM5QkQsR0FVSixTQUFTRSxFQUFxQkMsR0FDbkMsT0FBd0MsT0FBakNBLEVBQVdGLHdCQUErRHhwRyxJQUFqQzBwRyxFQUFXRixrQkFBa0NoZ0csUUFBUWtnRyxFQUFXRixtQkFBMkMsSUFBdEJFLEVBQVc1ckcsT0FjM0ksU0FBUzZyRyxFQUFtQkQsRUFBWXhELEdBQzdDLE9BQU8sU0FBMkJsbEcsRUFBVU0sR0FDeEJBLEVBQUtrakIsWUFBdkIsSUFFSWdxRSxFQUFRLFNBQXlCb2IsRUFBaUJDLEdBQ3BELE9BQU9yYixFQUFNZ2Isa0JBQW9CaGIsRUFBTWtiLFdBQVdFLEVBQWlCQyxHQUFZcmIsRUFBTWtiLFdBQVdFLElBcUJsRyxPQWpCQXBiLEVBQU1nYixtQkFBb0IsRUFFMUJoYixFQUFNa2IsV0FBYSxTQUFnQ0UsRUFBaUJDLEdBQ2xFcmIsRUFBTWtiLFdBQWFBLEVBQ25CbGIsRUFBTWdiLGtCQUFvQkMsRUFBcUJDLEdBQy9DLElBQUk3ckcsRUFBUTJ3RixFQUFNb2IsRUFBaUJDLEdBU25DLE1BUHFCLG1CQUFWaHNHLElBQ1Qyd0YsRUFBTWtiLFdBQWE3ckcsRUFDbkIyd0YsRUFBTWdiLGtCQUFvQkMsRUFBcUI1ckcsR0FDL0NBLEVBQVEyd0YsRUFBTW9iLEVBQWlCQyxJQUkxQmhzRyxHQUdGMndGLEdDNUNJLE9BZlIsU0FBMENzYixHQUMvQyxNQUFxQyxtQkFBdkJBLEVBQW9DSCxFQUFtQkcsUUFBNEM5cEcsR0FFNUcsU0FBeUM4cEcsR0FDOUMsT0FBUUEsT0FJSDlwRyxFQUp3Qm9wRyxHQUF1QixTQUFVcG9HLEdBQzVELE1BQU8sQ0FDTEEsU0FBVUEsT0FJVCxTQUF3QzhvRyxHQUM3QyxPQUFPQSxHQUFvRCxpQkFBdkJBLEVBQWtDVixHQUF1QixTQUFVcG9HLEdBQ3JHLE9BQU8sNkJBQW1COG9HLEVBQW9COW9HLFdBQzNDaEIsSUNOUSxPQVJSLFNBQXVDK3BHLEdBQzVDLE1BQWtDLG1CQUFwQkEsRUFBaUNKLEVBQW1CSSxRQUFzQy9wRyxHQUVuRyxTQUFzQytwRyxHQUMzQyxPQUFRQSxPQUVIL3BHLEVBRnFCb3BHLEdBQXVCLFdBQy9DLE1BQU8sUUNKSixTQUFTWSxFQUFrQkMsRUFBWUMsRUFBZUwsR0FDM0QsT0FBT2x6RSxFQUFTLEdBQUlrekUsRUFBVSxHQUFJSSxFQUFZLEdBQUlDLEdBZ0NyQyxPQVJSLFNBQWtDQyxHQUN2QyxNQUE2QixtQkFBZkEsRUF2QlQsU0FBNEJBLEdBQ2pDLE9BQU8sU0FBNkJucEcsRUFBVU0sR0FDMUJBLEVBQUtrakIsWUFBdkIsSUFJSTRsRixFQUhBbkQsRUFBTzNsRyxFQUFLMmxHLEtBQ1pvRCxFQUFzQi9vRyxFQUFLK29HLG9CQUMzQkMsR0FBYSxFQUVqQixPQUFPLFNBQXlCTCxFQUFZQyxFQUFlTCxHQUN6RCxJQUFJVSxFQUFrQkosRUFBV0YsRUFBWUMsRUFBZUwsR0FVNUQsT0FSSVMsRUFDR3JELEdBQVNvRCxFQUFvQkUsRUFBaUJILEtBQWNBLEVBQWNHLElBRS9FRCxHQUFhLEVBQ2JGLEVBQWNHLEdBSVRILElBSytCSSxDQUFtQkwsUUFBY25xRyxHQUV0RSxTQUFpQ21xRyxHQUN0QyxPQUFRQSxPQUVKbnFHLEVBRmlCLFdBQ25CLE9BQU9ncUcsS0M5QkosU0FBU1MsRUFBZ0NWLEVBQWlCRCxFQUFvQkssRUFBWW5wRyxHQUMvRixPQUFPLFNBQWtDMEIsRUFBT21uRyxHQUM5QyxPQUFPTSxFQUFXSixFQUFnQnJuRyxFQUFPbW5HLEdBQVdDLEVBQW1COW9HLEVBQVU2b0csR0FBV0EsSUFHekYsU0FBU2EsR0FBOEJYLEVBQWlCRCxFQUFvQkssRUFBWW5wRyxFQUFVTSxHQUN2RyxJQUlJb0IsRUFDQW1uRyxFQUNBSSxFQUNBQyxFQUNBRSxFQVJBTyxFQUFpQnJwRyxFQUFLcXBHLGVBQ3RCQyxFQUFtQnRwRyxFQUFLc3BHLGlCQUN4QkMsRUFBcUJ2cEcsRUFBS3VwRyxtQkFDMUJDLEdBQW9CLEVBdUN4QixTQUFTQyxFQUFzQm5vRyxFQUFXb29HLEdBQ3hDLElBUklDLEVBQ0FDLEVBT0FDLEdBQWdCUCxFQUFpQkksRUFBY25CLEdBQy9DdUIsR0FBZ0JULEVBQWUvbkcsRUFBV0YsR0FHOUMsT0FGQUEsRUFBUUUsRUFDUmluRyxFQUFXbUIsRUFDUEcsR0FBZ0JDLEdBMUJwQm5CLEVBQWFGLEVBQWdCcm5HLEVBQU9tbkcsR0FDaENDLEVBQW1CTixvQkFBbUJVLEVBQWdCSixFQUFtQjlvRyxFQUFVNm9HLElBQ3ZGTyxFQUFjRCxFQUFXRixFQUFZQyxFQUFlTCxJQXlCaERzQixHQXBCQXBCLEVBQWdCUCxvQkFBbUJTLEVBQWFGLEVBQWdCcm5HLEVBQU9tbkcsSUFDdkVDLEVBQW1CTixvQkFBbUJVLEVBQWdCSixFQUFtQjlvRyxFQUFVNm9HLElBQ3ZGTyxFQUFjRCxFQUFXRixFQUFZQyxFQUFlTCxJQW1CaER1QixHQWRBSCxFQUFpQmxCLEVBQWdCcm5HLEVBQU9tbkcsR0FDeENxQixHQUFxQkwsRUFBbUJJLEVBQWdCaEIsR0FDNURBLEVBQWFnQixFQUNUQyxJQUFtQmQsRUFBY0QsRUFBV0YsRUFBWUMsRUFBZUwsSUFDcEVPLEdBV0FBLEVBR1QsT0FBTyxTQUFnQ3huRyxFQUFXb29HLEdBQ2hELE9BQU9GLEVBQW9CQyxFQUFzQm5vRyxFQUFXb29HLElBekM1RGYsRUFBYUYsRUFGYnJuRyxFQTJDNEZFLEVBMUM1RmluRyxFQTBDdUdtQixHQXhDdkdkLEVBQWdCSixFQUFtQjlvRyxFQUFVNm9HLEdBQzdDTyxFQUFjRCxFQUFXRixFQUFZQyxFQUFlTCxHQUNwRGlCLEdBQW9CLEVBQ2JWLElBNkNJLFNBQVNpQixHQUEwQnJxRyxFQUFVbkIsR0FDMUQsSUFBSXlyRyxFQUFzQnpyRyxFQUFNeXJHLG9CQUM1QkMsRUFBeUIxckcsRUFBTTByRyx1QkFDL0JDLEVBQWlCM3JHLEVBQU0yckcsZUFDdkJ0aEcsRUFBVWs3RixFQUE4QnZsRyxFQUFPLENBQUMsc0JBQXVCLHlCQUEwQixtQkFFakdrcUcsRUFBa0J1QixFQUFvQnRxRyxFQUFVa0osR0FDaEQ0L0YsRUFBcUJ5QixFQUF1QnZxRyxFQUFVa0osR0FDdERpZ0csRUFBYXFCLEVBQWV4cUcsRUFBVWtKLEdBTzFDLE9BRHNCQSxFQUFRKzhGLEtBQU95RCxHQUFnQ0QsR0FDOUNWLEVBQWlCRCxFQUFvQkssRUFBWW5wRyxFQUFVa0osR0M1RHBGLFNBQVMsR0FBTTNGLEVBQUtrbkcsRUFBVzd2RyxHQUM3QixJQUFLLElBQUlQLEVBQUlvd0csRUFBVTN0RyxPQUFTLEVBQUd6QyxHQUFLLEVBQUdBLElBQUssQ0FDOUMsSUFBSWdNLEVBQVNva0csRUFBVXB3RyxHQUFHa0osR0FDMUIsR0FBSThDLEVBQVEsT0FBT0EsRUFHckIsT0FBTyxTQUFVckcsRUFBVWtKLEdBQ3pCLE1BQU0sSUFBSW5LLE1BQU0sZ0NBQWtDd0UsRUFBTSxRQUFVM0ksRUFBTyx1Q0FBeUNzTyxFQUFRNjhGLHFCQUF1QixNQUlySixTQUFTMkUsR0FBWWpuRyxFQUFHQyxHQUN0QixPQUFPRCxJQUFNQyxFQTREQSxJQXZEZWluRyxHQUN4QnJxRyxHQUNBc3FHLEdBQ0FDLEdBQ0FDLEdBQ0FDLEdBQ0FDLEdBQ0FDLEdBQ0FDLEdBQ0FDLEdBQ0FDLEdBQ0F0RyxHQTRDUyxJQXJEVDhGLElBREF0cUcsUUFBaUIsSUFBVnFxRyxHQUFtQixHQUFLQSxJQUNSRSxXQUN2QkEsUUFBaUMsSUFBcEJELEdBQTZCL0YsRUFBa0IrRixHQUM1REUsR0FBd0J4cUcsR0FBS3lxRyx5QkFDN0JBLFFBQXFELElBQTFCRCxHQUFtQyxFQUFrQ0EsR0FDaEdFLEdBQXdCMXFHLEdBQUsycUcsNEJBQzdCQSxRQUF3RCxJQUExQkQsR0FBbUMsRUFBcUNBLEdBQ3RHRSxHQUF3QjVxRyxHQUFLNnFHLG9CQUM3QkEsUUFBZ0QsSUFBMUJELEdBQW1DLEVBQTZCQSxHQUN0RkUsR0FBdUI5cUcsR0FBS3drRyxnQkFDNUJBLFFBQTJDLElBQXpCc0csR0FBa0MsR0FBeUJBLEdBRTFFLFNBQWlCckMsRUFBaUJELEVBQW9CSyxFQUFZdHFHLFFBQ3pELElBQVZBLElBQ0ZBLEVBQVEsSUFHVixJQUFJd3NHLEVBQVF4c0csRUFDUnlzRyxFQUFhRCxFQUFNcEYsS0FDbkJBLE9BQXNCLElBQWZxRixHQUErQkEsRUFDdENDLEVBQXVCRixFQUFNMUIsZUFDN0JBLE9BQTBDLElBQXpCNEIsRUFBa0NiLEdBQWNhLEVBQ2pFQyxFQUF3QkgsRUFBTXpCLGlCQUM5QkEsT0FBNkMsSUFBMUI0QixFQUFtQ3pELEVBQWV5RCxFQUNyRUMsRUFBd0JKLEVBQU14QixtQkFDOUJBLE9BQStDLElBQTFCNEIsRUFBbUMxRCxFQUFlMEQsRUFDdkVDLEVBQXdCTCxFQUFNaEMsb0JBQzlCQSxPQUFnRCxJQUExQnFDLEVBQW1DM0QsRUFBZTJELEVBQ3hFQyxFQUFldkgsRUFBOEJpSCxFQUFPLENBQUMsT0FBUSxpQkFBa0IsbUJBQW9CLHFCQUFzQix3QkFFekhmLEVBQXNCLEdBQU12QixFQUFpQmdDLEdBQTBCLG1CQUN2RVIsRUFBeUIsR0FBTXpCLEVBQW9CbUMsR0FBNkIsc0JBQ2hGVCxFQUFpQixHQUFNckIsRUFBWWdDLEdBQXFCLGNBQzVELE9BQU9OLEdBQVcvRixHQUFpQm52RSxFQUFTLENBRTFDdXZFLFdBQVksVUFFWkYsZUFBZ0IsU0FBd0JwcUcsR0FDdEMsTUFBTyxXQUFhQSxFQUFPLEtBRzdCMHFHLHlCQUEwQjk4RixRQUFRdWdHLEdBRWxDdUIsb0JBQXFCQSxFQUNyQkMsdUJBQXdCQSxFQUN4QkMsZUFBZ0JBLEVBQ2hCdkUsS0FBTUEsRUFDTjBELGVBQWdCQSxFQUNoQkMsaUJBQWtCQSxFQUNsQkMsbUJBQW9CQSxFQUNwQlIsb0JBQXFCQSxHQUNwQnNDLE1DMUVBLFNBQVMsS0FDZCxJQUFJMUgsRUFBZSxxQkFBV2hCLEdBRTlCLE9BREEsSUFBVWdCLEVBQWMsb0dBQ2pCQSxFQ2JGLFNBQVMySCxHQUFnQjEyRCxRQUNkLElBQVpBLElBQ0ZBLEVBQVUrdEQsR0FHWixJQUFJNEksRUFBa0IzMkQsSUFBWSt0RCxFQUFvQixHQUF5QixXQUM3RSxPQUFPLHFCQUFXL3RELElBRXBCLE9BQU8sV0FJTCxPQUh1QjIyRCxJQUNNaG9HLE9BcUIxQixJQUFJLEdBQVcrbkcsTUNoQ2YsU0FBNEIxMkQsUUFDakIsSUFBWkEsSUFDRkEsRUFBVSt0RCxHQUdaLElBQUk2SSxFQUFXNTJELElBQVkrdEQsRUFBb0IsR0FBa0IySSxHQUFnQjEyRCxHQTRCMUQ2MkQsR0FBbEIsSUNuQ0hDLEdBQWMsU0FBcUJ2b0csRUFBR0MsR0FDeEMsT0FBT0QsSUFBTUMsR0EwSFIsSWpCM0hpQ3VvRyxJaUI2RWpDLFNBQTRCLzJELFFBQ2pCLElBQVpBLElBQ0ZBLEVBQVUrdEQsR0FHWixJQUFJNEksRUFBa0IzMkQsSUFBWSt0RCxFQUFvQixHQUF5QixXQUM3RSxPQUFPLHFCQUFXL3RELElBd0NHZzNELEdDbElWLFNBQVNDLEdBQWUxdUcsRUFBVUMsR0FDL0NELEVBQVN4QixVQUFZbEIsT0FBT1ksT0FBTytCLEVBQVd6QixXQUM5Q3dCLEVBQVN4QixVQUFVMEIsWUFBY0YsRUFDakNBLEVBQVNELFVBQVlFLEVDSHZCLFNBQVMwdUcsR0FBV3pvQixHQUNsQixNQUE4QixNQUF2QkEsRUFBUzV5RSxPQUFPLEdBSXpCLFNBQVM4aUYsR0FBVTNzRixFQUFNckgsR0FDdkIsSUFBSyxJQUFJeEYsRUFBSXdGLEVBQU84eEMsRUFBSXQzQyxFQUFJLEVBQUd5QixFQUFJb0wsRUFBS3BLLE9BQVE2MEMsRUFBSTcxQyxFQUFHekIsR0FBSyxFQUFHczNDLEdBQUssRUFDbEV6cUMsRUFBSzdNLEdBQUs2TSxFQUFLeXFDLEdBR2pCenFDLEVBQUtxMkIsTW5CSGlDMHVFLEdvQkcvQiwwQnBCRkEsRUFBUUEsR21Ca0VGLE9BNURmLFNBQXlCcjZFLEVBQUk1WixRQUNkaFosSUFBVGdaLElBQW9CQSxFQUFPLElBRS9CLElBa0JJcTBGLEVBbEJBQyxFQUFXMTZFLEdBQU1BLEVBQUczekIsTUFBTSxNQUFTLEdBQ25Dc3VHLEVBQWF2MEYsR0FBUUEsRUFBSy9aLE1BQU0sTUFBUyxHQUV6Q3V1RyxFQUFVNTZFLEdBQU13NkUsR0FBV3g2RSxHQUMzQjY2RSxFQUFZejBGLEdBQVFvMEYsR0FBV3AwRixHQUMvQjAwRixFQUFhRixHQUFXQyxFQVc1QixHQVRJNzZFLEdBQU13NkUsR0FBV3g2RSxHQUVuQjI2RSxFQUFZRCxFQUNIQSxFQUFReHZHLFNBRWpCeXZHLEVBQVVodkUsTUFDVmd2RSxFQUFZQSxFQUFVeGtHLE9BQU91a0csS0FHMUJDLEVBQVV6dkcsT0FBUSxNQUFPLElBRzlCLEdBQUl5dkcsRUFBVXp2RyxPQUFRLENBQ3BCLElBQUk4cUUsRUFBTzJrQyxFQUFVQSxFQUFVenZHLE9BQVMsR0FDeEN1dkcsRUFBNEIsTUFBVHprQyxHQUF5QixPQUFUQSxHQUEwQixLQUFUQSxPQUVwRHlrQyxHQUFtQixFQUlyQixJQURBLElBQUlNLEVBQUssRUFDQXR5RyxFQUFJa3lHLEVBQVV6dkcsT0FBUXpDLEdBQUssRUFBR0EsSUFBSyxDQUMxQyxJQUFJa1AsRUFBT2dqRyxFQUFVbHlHLEdBRVIsTUFBVGtQLEVBQ0ZzcUYsR0FBVTBZLEVBQVdseUcsR0FDSCxPQUFUa1AsR0FDVHNxRixHQUFVMFksRUFBV2x5RyxHQUNyQnN5RyxLQUNTQSxJQUNUOVksR0FBVTBZLEVBQVdseUcsR0FDckJzeUcsS0FJSixJQUFLRCxFQUFZLEtBQU9DLElBQU1BLEVBQUlKLEVBQVU3aEYsUUFBUSxPQUdsRGdpRixHQUNpQixLQUFqQkgsRUFBVSxJQUNSQSxFQUFVLElBQU9ILEdBQVdHLEVBQVUsS0FFeENBLEVBQVU3aEYsUUFBUSxJQUVwQixJQUFJcmtCLEVBQVNrbUcsRUFBVXJ1RyxLQUFLLEtBSTVCLE9BRkltdUcsR0FBMEMsTUFBdEJobUcsRUFBTzRLLFFBQVEsS0FBWTVLLEdBQVUsS0FFdERBLEdFcENNLElDbkNYdW1HLElBQWUsRUFDZnQ5RSxHQUFTLG1CQWFFLE9BWmYsU0FBbUJ0akIsRUFBV3FDLEdBQzVCLElBQUlyQyxFQUlKLE1BQUk0Z0csR0FDSSxJQUFJN3RHLE1BQU11d0IsSUFFVixJQUFJdndCLE1BQU11d0IsR0FBUyxNQUFRamhCLEdBQVcsTUNKaEQsU0FBU3crRixHQUFnQi9nRixHQUN2QixNQUEwQixNQUFuQkEsRUFBSy9hLE9BQU8sR0FBYSthLEVBQU8sSUFBTUEsRUFFL0MsU0FBU2doRixHQUFrQmhoRixHQUN6QixNQUEwQixNQUFuQkEsRUFBSy9hLE9BQU8sR0FBYSthLEVBQUs3YSxPQUFPLEdBQUs2YSxFQUtuRCxTQUFTaWhGLEdBQWNqaEYsRUFBTXdELEdBQzNCLE9BSkYsU0FBcUJ4RCxFQUFNd0QsR0FDekIsT0FBNEQsSUFBckR4RCxFQUFLN1MsY0FBY25aLFFBQVF3dkIsRUFBT3JXLGlCQUF1RSxJQUEvQyxNQUFNblosUUFBUWdzQixFQUFLL2EsT0FBT3VlLEVBQU94eUIsU0FHM0Zrd0csQ0FBWWxoRixFQUFNd0QsR0FBVXhELEVBQUs3YSxPQUFPcWUsRUFBT3h5QixRQUFVZ3ZCLEVBRWxFLFNBQVNtaEYsR0FBbUJuaEYsR0FDMUIsTUFBd0MsTUFBakNBLEVBQUsvYSxPQUFPK2EsRUFBS2h2QixPQUFTLEdBQWFndkIsRUFBS3ZzQixNQUFNLEdBQUksR0FBS3VzQixFQTBCcEUsU0FBU29oRixHQUFXeHlFLEdBQ2xCLElBQUlpcEQsRUFBV2pwRCxFQUFTaXBELFNBQ3BCLy9DLEVBQVNsSixFQUFTa0osT0FDbEJ1NEMsRUFBT3poRCxFQUFTeWhELEtBQ2hCcndELEVBQU82M0QsR0FBWSxJQUd2QixPQUZJLy9DLEdBQXFCLE1BQVhBLElBQWdCOVgsR0FBNkIsTUFBckI4WCxFQUFPN3lCLE9BQU8sR0FBYTZ5QixFQUFTLElBQU1BLEdBQzVFdTRDLEdBQWlCLE1BQVRBLElBQWNyd0QsR0FBMkIsTUFBbkJxd0QsRUFBS3ByRSxPQUFPLEdBQWFvckUsRUFBTyxJQUFNQSxHQUNqRXJ3RCxFQUdULFNBQVNxaEYsR0FBZXJoRixFQUFNcHFCLEVBQU85RixFQUFLa3BGLEdBQ3hDLElBQUlwcUQsRUFFZ0IsaUJBQVQ1TyxHQUVUNE8sRUF2Q0osU0FBbUI1TyxHQUNqQixJQUFJNjNELEVBQVc3M0QsR0FBUSxJQUNuQjhYLEVBQVMsR0FDVHU0QyxFQUFPLEdBQ1BpeEIsRUFBWXpwQixFQUFTN2pGLFFBQVEsTUFFZCxJQUFmc3RHLElBQ0ZqeEIsRUFBT3dILEVBQVMxeUUsT0FBT204RixHQUN2QnpwQixFQUFXQSxFQUFTMXlFLE9BQU8sRUFBR204RixJQUdoQyxJQUFJQyxFQUFjMXBCLEVBQVM3akYsUUFBUSxLQU9uQyxPQUxxQixJQUFqQnV0RyxJQUNGenBFLEVBQVMrL0MsRUFBUzF5RSxPQUFPbzhGLEdBQ3pCMXBCLEVBQVdBLEVBQVMxeUUsT0FBTyxFQUFHbzhGLElBR3pCLENBQ0wxcEIsU0FBVUEsRUFDVi8vQyxPQUFtQixNQUFYQSxFQUFpQixHQUFLQSxFQUM5QnU0QyxLQUFlLE1BQVRBLEVBQWUsR0FBS0EsR0FrQmZteEIsQ0FBVXhoRixJQUNacHFCLE1BQVFBLFFBSVMxQyxLQUQxQjA3QixFQUFXL0UsRUFBUyxHQUFJN0osSUFDWDYzRCxXQUF3QmpwRCxFQUFTaXBELFNBQVcsSUFFckRqcEQsRUFBU2tKLE9BQ3VCLE1BQTlCbEosRUFBU2tKLE9BQU83eUIsT0FBTyxLQUFZMnBCLEVBQVNrSixPQUFTLElBQU1sSixFQUFTa0osUUFFeEVsSixFQUFTa0osT0FBUyxHQUdoQmxKLEVBQVN5aEQsS0FDcUIsTUFBNUJ6aEQsRUFBU3loRCxLQUFLcHJFLE9BQU8sS0FBWTJwQixFQUFTeWhELEtBQU8sSUFBTXpoRCxFQUFTeWhELE1BRXBFemhELEVBQVN5aEQsS0FBTyxRQUdKbjlFLElBQVYwQyxRQUEwQzFDLElBQW5CMDdCLEVBQVNoNUIsUUFBcUJnNUIsRUFBU2g1QixNQUFRQSxJQUc1RSxJQUNFZzVCLEVBQVNpcEQsU0FBVzRwQixVQUFVN3lFLEVBQVNpcEQsVUFDdkMsTUFBT2xpRixHQUNQLE1BQUlBLGFBQWErckcsU0FDVCxJQUFJQSxTQUFTLGFBQWU5eUUsRUFBU2lwRCxTQUFXLGlGQUVoRGxpRixFQW9CVixPQWhCSTdGLElBQUs4K0IsRUFBUzkrQixJQUFNQSxHQUVwQmtwRixFQUVHcHFELEVBQVNpcEQsU0FFNkIsTUFBaENqcEQsRUFBU2lwRCxTQUFTNXlFLE9BQU8sS0FDbEMycEIsRUFBU2lwRCxTQUFXLEdBQWdCanBELEVBQVNpcEQsU0FBVW1CLEVBQWdCbkIsV0FGdkVqcEQsRUFBU2lwRCxTQUFXbUIsRUFBZ0JuQixTQU1qQ2pwRCxFQUFTaXBELFdBQ1pqcEQsRUFBU2lwRCxTQUFXLEtBSWpCanBELEVBTVQsU0FBUyt5RSxLQUNQLElBQUlDLEVBQVMsS0FpQ2IsSUFBSXZ0RyxFQUFZLEdBNEJoQixNQUFPLENBQ0x3dEcsVUE1REYsU0FBbUJDLEdBR2pCLE9BREFGLEVBQVNFLEVBQ0YsV0FDREYsSUFBV0UsSUFBWUYsRUFBUyxRQXlEdENHLG9CQXJERixTQUE2Qm56RSxFQUFVejZCLEVBQVE2dEcsRUFBcUIxK0YsR0FJbEUsR0FBYyxNQUFWcytGLEVBQWdCLENBQ2xCLElBQUlybkcsRUFBMkIsbUJBQVhxbkcsRUFBd0JBLEVBQU9oekUsRUFBVXo2QixHQUFVeXRHLEVBRWpELGlCQUFYcm5HLEVBQzBCLG1CQUF4QnluRyxFQUNUQSxFQUFvQnpuRyxFQUFRK0ksR0FHNUJBLEdBQVMsR0FJWEEsR0FBb0IsSUFBWC9JLFFBR1grSSxHQUFTLElBbUNYMitGLGVBN0JGLFNBQXdCbHBHLEdBQ3RCLElBQUltcEcsR0FBVyxFQUVmLFNBQVN0dUcsSUFDSHN1RyxHQUFVbnBHLEVBQUd6QyxXQUFNLEVBQVF0RCxXQUlqQyxPQURBcUIsRUFBVVAsS0FBS0YsR0FDUixXQUNMc3VHLEdBQVcsRUFDWDd0RyxFQUFZQSxFQUFVeUMsUUFBTyxTQUFVdUUsR0FDckMsT0FBT0EsSUFBU3pILE9BbUJwQnV1RyxnQkFkRixXQUNFLElBQUssSUFBSTdxRyxFQUFPdEUsVUFBVWhDLE9BQVFzUCxFQUFPLElBQUk5SSxNQUFNRixHQUFPdEIsRUFBTyxFQUFHQSxFQUFPc0IsRUFBTXRCLElBQy9Fc0ssRUFBS3RLLEdBQVFoRCxVQUFVZ0QsR0FHekIzQixFQUFVb0IsU0FBUSxTQUFVN0IsR0FDMUIsT0FBT0EsRUFBUzBDLFdBQU0sRUFBUWdLLFFBWXBDLElBQUk4aEcsS0FBaUMsb0JBQVhob0csU0FBMEJBLE9BQU9DLFdBQVlELE9BQU9DLFNBQVMrRCxlQUN2RixTQUFTaWtHLEdBQWdCOS9GLEVBQVNlLEdBQ2hDQSxFQUFTbEosT0FBT2tvRyxRQUFRLy9GLElBd0MxQixJQUFJZ2dHLEdBQWdCLFdBQ2hCQyxHQUFrQixhQUV0QixTQUFTQyxLQUNQLElBQ0UsT0FBT3JvRyxPQUFPaytFLFFBQVExaUYsT0FBUyxHQUMvQixNQUFPRCxHQUdQLE1BQU8sSUFTWCxTQUFTK3NHLEdBQXFCM3hHLFFBQ2QsSUFBVkEsSUFDRkEsRUFBUSxJQUdUcXhHLElBQXNHLElBQVUsR0FDakgsSUFyREkveUQsRUFxREFzekQsRUFBZ0J2b0csT0FBT2srRSxRQUN2QnNxQixJQXJEK0IsS0FEL0J2ekQsRUFBS2oxQyxPQUFPRixVQUFVNEgsV0FDbEI5TixRQUFRLGdCQUF1RCxJQUEvQnE3QyxFQUFHcjdDLFFBQVEsaUJBQTJELElBQWpDcTdDLEVBQUdyN0MsUUFBUSxtQkFBcUQsSUFBMUJxN0MsRUFBR3I3QyxRQUFRLFlBQXFELElBQWpDcTdDLEVBQUdyN0MsUUFBUSxtQkFDdEpvRyxPQUFPaytFLFNBQVcsY0FBZWwrRSxPQUFPaytFLFFBcUQzQ3VxQixLQTdDc0QsSUFBbkR6b0csT0FBT0YsVUFBVTRILFVBQVU5TixRQUFRLFlBOEN0Qzh1RyxFQUFTL3hHLEVBQ1RneUcsRUFBc0JELEVBQU9FLGFBQzdCQSxPQUF1QyxJQUF4QkQsR0FBeUNBLEVBQ3hERSxFQUF3QkgsRUFBT2Qsb0JBQy9CQSxPQUFnRCxJQUExQmlCLEVBQW1DWixHQUFrQlksRUFDM0VDLEVBQW1CSixFQUFPSyxVQUMxQkEsT0FBaUMsSUFBckJELEVBQThCLEVBQUlBLEVBQzlDRSxFQUFXcnlHLEVBQU1xeUcsU0FBV2pDLEdBQW1CSixHQUFnQmh3RyxFQUFNcXlHLFdBQWEsR0FFdEYsU0FBU0MsRUFBZUMsR0FDdEIsSUFBSTl1RyxFQUFPOHVHLEdBQWdCLEdBQ3ZCeHpHLEVBQU0wRSxFQUFLMUUsSUFDWDhGLEVBQVFwQixFQUFLb0IsTUFFYjJ0RyxFQUFtQm5wRyxPQUFPdzBCLFNBSTFCNU8sRUFIV3VqRixFQUFpQjFyQixTQUNuQjByQixFQUFpQnpyRSxPQUNuQnlyRSxFQUFpQmx6QixLQUk1QixPQURJK3lCLElBQVVwakYsRUFBT2loRixHQUFjamhGLEVBQU1vakYsSUFDbEMvQixHQUFlcmhGLEVBQU1wcUIsRUFBTzlGLEdBR3JDLFNBQVMwekcsSUFDUCxPQUFPenhHLEtBQUtDLFNBQVNDLFNBQVMsSUFBSWtULE9BQU8sRUFBR2crRixHQUc5QyxJQUFJTSxFQUFvQjlCLEtBRXhCLFNBQVNsNEQsRUFBUzN6QyxHQUNoQit6QixFQUFTeXVELEVBQVN4aUYsR0FFbEJ3aUYsRUFBUXRuRixPQUFTMnhHLEVBQWMzeEcsT0FDL0J5eUcsRUFBa0J0QixnQkFBZ0I3cEIsRUFBUTFwRCxTQUFVMHBELEVBQVFua0YsUUFHOUQsU0FBU3V2RyxFQUFlemhGLElBcEUxQixTQUFtQ0EsR0FDakMsWUFBdUIvdUIsSUFBaEIrdUIsRUFBTXJzQixRQUFpRSxJQUExQ3NFLFVBQVU0SCxVQUFVOU4sUUFBUSxVQXFFMUQydkcsQ0FBMEIxaEYsSUFDOUIyaEYsRUFBVVAsRUFBZXBoRixFQUFNcnNCLFFBR2pDLFNBQVNpdUcsSUFDUEQsRUFBVVAsRUFBZVosT0FHM0IsSUFBSXFCLEdBQWUsRUFFbkIsU0FBU0YsRUFBVWgxRSxHQUNqQixHQUFJazFFLEVBQ0ZBLEdBQWUsRUFDZnI2RCxRQUNLLENBRUxnNkQsRUFBa0IxQixvQkFBb0JuekUsRUFEekIsTUFDMkNvekUsR0FBcUIsU0FBVWwzQixHQUNqRkEsRUFDRnJoQyxFQUFTLENBQ1B0MUMsT0FKTyxNQUtQeTZCLFNBQVVBLElBU3BCLFNBQW1CbTFFLEdBQ2pCLElBQUlDLEVBQWExckIsRUFBUTFwRCxTQUlyQnExRSxFQUFVQyxFQUFRbHdHLFFBQVFnd0csRUFBV2wwRyxNQUN4QixJQUFibTBHLElBQWdCQSxFQUFVLEdBQzlCLElBQUlFLEVBQVlELEVBQVFsd0csUUFBUSt2RyxFQUFhajBHLE1BQzFCLElBQWZxMEcsSUFBa0JBLEVBQVksR0FDbEMsSUFBSUMsRUFBUUgsRUFBVUUsRUFFbEJDLElBQ0ZOLEdBQWUsRUFDZnhuRixFQUFHOG5GLElBbkJDQyxDQUFVejFFLE9BdUJsQixJQUFJZ3FELEVBQWtCeXFCLEVBQWVaLE1BQ2pDeUIsRUFBVSxDQUFDdHJCLEVBQWdCOW9GLEtBRS9CLFNBQVN3MEcsRUFBVzExRSxHQUNsQixPQUFPdzBFLEVBQVdoQyxHQUFXeHlFLEdBdUUvQixTQUFTdFMsRUFBR3RzQixHQUNWMnlHLEVBQWNybUYsR0FBR3RzQixHQVduQixJQUFJeTNGLEVBQWdCLEVBRXBCLFNBQVM4YyxFQUFrQkgsR0FHSCxLQUZ0QjNjLEdBQWlCMmMsSUFFb0IsSUFBVkEsR0FDekJocUcsT0FBTzRuQixpQkFBaUJ1Z0YsR0FBZW1CLEdBQ25DYixHQUF5QnpvRyxPQUFPNG5CLGlCQUFpQndnRixHQUFpQnFCLElBQzNDLElBQWxCcGMsSUFDVHJ0RixPQUFPK25CLG9CQUFvQm9nRixHQUFlbUIsR0FDdENiLEdBQXlCem9HLE9BQU8rbkIsb0JBQW9CcWdGLEdBQWlCcUIsSUFJN0UsSUFBSVcsR0FBWSxFQWlDaEIsSUFBSWxzQixFQUFVLENBQ1p0bkYsT0FBUTJ4RyxFQUFjM3hHLE9BQ3RCbUQsT0FBUSxNQUNSeTZCLFNBQVVncUQsRUFDVjByQixXQUFZQSxFQUNaeHdHLEtBcElGLFNBQWNrc0IsRUFBTXBxQixHQUVsQixJQUNJZzVCLEVBQVd5eUUsR0FBZXJoRixFQUFNcHFCLEVBQU80dEcsSUFBYWxyQixFQUFRMXBELFVBQ2hFNjBFLEVBQWtCMUIsb0JBQW9CbnpFLEVBRnpCLE9BRTJDb3pFLEdBQXFCLFNBQVVsM0IsR0FDckYsR0FBS0EsRUFBTCxDQUNBLElBQUlwZ0IsRUFBTzQ1QyxFQUFXMTFFLEdBQ2xCOStCLEVBQU04K0IsRUFBUzkrQixJQUNmOEYsRUFBUWc1QixFQUFTaDVCLE1BRXJCLEdBQUlndEcsRUFNRixHQUxBRCxFQUFjOEIsVUFBVSxDQUN0QjMwRyxJQUFLQSxFQUNMOEYsTUFBT0EsR0FDTixLQUFNODBELEdBRUxzNEMsRUFDRjVvRyxPQUFPdzBCLFNBQVM4N0IsS0FBT0EsTUFDbEIsQ0FDTCxJQUFJZzZDLEVBQVlSLEVBQVFsd0csUUFBUXNrRixFQUFRMXBELFNBQVM5K0IsS0FDN0M2MEcsRUFBV1QsRUFBUXp3RyxNQUFNLEVBQUdpeEcsRUFBWSxHQUM1Q0MsRUFBUzd3RyxLQUFLODZCLEVBQVM5K0IsS0FDdkJvMEcsRUFBVVMsRUFDVmw3RCxFQUFTLENBQ1B0MUMsT0F0QkssT0F1Qkx5NkIsU0FBVUEsU0FLZHgwQixPQUFPdzBCLFNBQVM4N0IsS0FBT0EsT0F1RzNCNXZELFFBbEdGLFNBQWlCa2xCLEVBQU1wcUIsR0FFckIsSUFDSWc1QixFQUFXeXlFLEdBQWVyaEYsRUFBTXBxQixFQUFPNHRHLElBQWFsckIsRUFBUTFwRCxVQUNoRTYwRSxFQUFrQjFCLG9CQUFvQm56RSxFQUZ6QixVQUUyQ296RSxHQUFxQixTQUFVbDNCLEdBQ3JGLEdBQUtBLEVBQUwsQ0FDQSxJQUFJcGdCLEVBQU80NUMsRUFBVzExRSxHQUNsQjkrQixFQUFNOCtCLEVBQVM5K0IsSUFDZjhGLEVBQVFnNUIsRUFBU2g1QixNQUVyQixHQUFJZ3RHLEVBTUYsR0FMQUQsRUFBY2lDLGFBQWEsQ0FDekI5MEcsSUFBS0EsRUFDTDhGLE1BQU9BLEdBQ04sS0FBTTgwRCxHQUVMczRDLEVBQ0Y1b0csT0FBT3cwQixTQUFTOXpCLFFBQVE0dkQsT0FDbkIsQ0FDTCxJQUFJZzZDLEVBQVlSLEVBQVFsd0csUUFBUXNrRixFQUFRMXBELFNBQVM5K0IsTUFDOUIsSUFBZjQwRyxJQUFrQlIsRUFBUVEsR0FBYTkxRSxFQUFTOStCLEtBQ3BEMjVDLEVBQVMsQ0FDUHQxQyxPQXBCSyxVQXFCTHk2QixTQUFVQSxTQUtkeDBCLE9BQU93MEIsU0FBUzl6QixRQUFRNHZELFFBdUU1QnB1QyxHQUFJQSxFQUNKRCxPQS9ERixXQUNFQyxHQUFJLElBK0RKRixVQTVERixXQUNFRSxFQUFHLElBNERIdW9GLE1BekNGLFNBQWVqRCxRQUNFLElBQVhBLElBQ0ZBLEdBQVMsR0FHWCxJQUFJa0QsRUFBVXJCLEVBQWtCNUIsVUFBVUQsR0FPMUMsT0FMSzRDLElBQ0hELEVBQWtCLEdBQ2xCQyxHQUFZLEdBR1AsV0FNTCxPQUxJQSxJQUNGQSxHQUFZLEVBQ1pELEdBQW1CLElBR2RPLE1Bd0JUdnJCLE9BcEJGLFNBQWdCM2xGLEdBQ2QsSUFBSW14RyxFQUFXdEIsRUFBa0J4QixlQUFlcnVHLEdBRWhELE9BREEyd0csRUFBa0IsR0FDWCxXQUNMQSxHQUFtQixHQUNuQlEsT0FpQkosT0FBT3pzQixFQUdULElBQUkwc0IsR0FBb0IsYUFDcEJDLEdBQWlCLENBQ25CQyxTQUFVLENBQ1JDLFdBQVksU0FBb0JubEYsR0FDOUIsTUFBMEIsTUFBbkJBLEVBQUsvYSxPQUFPLEdBQWErYSxFQUFPLEtBQU9naEYsR0FBa0JoaEYsSUFFbEVvbEYsV0FBWSxTQUFvQnBsRixHQUM5QixNQUEwQixNQUFuQkEsRUFBSy9hLE9BQU8sR0FBYSthLEVBQUs3YSxPQUFPLEdBQUs2YSxJQUdyRHFsRixRQUFTLENBQ1BGLFdBQVluRSxHQUNab0UsV0FBWXJFLElBRWR1RSxNQUFPLENBQ0xILFdBQVlwRSxHQUNacUUsV0FBWXJFLEtBSWhCLFNBQVN3RSxHQUFVdi9FLEdBQ2pCLElBQUlzN0UsRUFBWXQ3RSxFQUFJaHlCLFFBQVEsS0FDNUIsT0FBc0IsSUFBZnN0RyxFQUFtQnQ3RSxFQUFNQSxFQUFJdnlCLE1BQU0sRUFBRzZ0RyxHQUcvQyxTQUFTa0UsS0FHUCxJQUFJOTZDLEVBQU90d0QsT0FBT3cwQixTQUFTODdCLEtBQ3ZCNDJDLEVBQVk1MkMsRUFBSzEyRCxRQUFRLEtBQzdCLE9BQXNCLElBQWZzdEcsRUFBbUIsR0FBSzUyQyxFQUFLeDRELFVBQVVvdkcsRUFBWSxHQU81RCxTQUFTbUUsR0FBZ0J6bEYsR0FDdkI1bEIsT0FBT3cwQixTQUFTOXpCLFFBQVF5cUcsR0FBVW5yRyxPQUFPdzBCLFNBQVM4N0IsTUFBUSxJQUFNMXFDLEdBR2xFLFNBQVMwbEYsR0FBa0IzMEcsUUFDWCxJQUFWQSxJQUNGQSxFQUFRLElBR1RxeEcsSUFBbUcsSUFBVSxHQUM5RyxJQUFJTyxFQUFnQnZvRyxPQUFPaytFLFFBRXZCd3FCLEdBblVHMW9HLE9BQU9GLFVBQVU0SCxVQUFVOU4sUUFBUSxXQW1VN0JqRCxHQUNUa3lHLEVBQXdCSCxFQUFPZCxvQkFDL0JBLE9BQWdELElBQTFCaUIsRUFBbUNaLEdBQWtCWSxFQUMzRTBDLEVBQWtCN0MsRUFBTzhDLFNBQ3pCQSxPQUErQixJQUFwQkQsRUFBNkIsUUFBVUEsRUFDbER2QyxFQUFXcnlHLEVBQU1xeUcsU0FBV2pDLEdBQW1CSixHQUFnQmh3RyxFQUFNcXlHLFdBQWEsR0FDbEZ5QyxFQUF3QlosR0FBZVcsR0FDdkNULEVBQWFVLEVBQXNCVixXQUNuQ0MsRUFBYVMsRUFBc0JULFdBRXZDLFNBQVMvQixJQUNQLElBQUlyakYsRUFBT29sRixFQUFXSSxNQUd0QixPQURJcEMsSUFBVXBqRixFQUFPaWhGLEdBQWNqaEYsRUFBTW9qRixJQUNsQy9CLEdBQWVyaEYsR0FHeEIsSUFBSXlqRixFQUFvQjlCLEtBRXhCLFNBQVNsNEQsRUFBUzN6QyxHQUNoQit6QixFQUFTeXVELEVBQVN4aUYsR0FFbEJ3aUYsRUFBUXRuRixPQUFTMnhHLEVBQWMzeEcsT0FDL0J5eUcsRUFBa0J0QixnQkFBZ0I3cEIsRUFBUTFwRCxTQUFVMHBELEVBQVFua0YsUUFHOUQsSUFBSTJ2RyxHQUFlLEVBQ2ZnQyxFQUFhLEtBTWpCLFNBQVNqQyxJQUNQLElBTDRCbHNHLEVBQUdDLEVBSzNCb29CLEVBQU93bEYsS0FDUE8sRUFBY1osRUFBV25sRixHQUU3QixHQUFJQSxJQUFTK2xGLEVBRVhOLEdBQWdCTSxPQUNYLENBQ0wsSUFBSW4zRSxFQUFXeTBFLElBQ1gyQyxFQUFlMXRCLEVBQVExcEQsU0FDM0IsSUFBS2sxRSxJQWR3QmxzRyxFQWMyQmczQixHQWQ5QmozQixFQWNnQnF1RyxHQWJuQ251QixXQUFhamdGLEVBQUVpZ0YsVUFBWWxnRixFQUFFbWdDLFNBQVdsZ0MsRUFBRWtnQyxRQUFVbmdDLEVBQUUwNEUsT0FBU3o0RSxFQUFFeTRFLE1BYUwsT0FFbkUsR0FBSXkxQixJQUFlMUUsR0FBV3h5RSxHQUFXLE9BRXpDazNFLEVBQWEsS0FLakIsU0FBbUJsM0UsR0FDakIsR0FBSWsxRSxFQUNGQSxHQUFlLEVBQ2ZyNkQsUUFDSyxDQUVMZzZELEVBQWtCMUIsb0JBQW9CbnpFLEVBRHpCLE1BQzJDb3pFLEdBQXFCLFNBQVVsM0IsR0FDakZBLEVBQ0ZyaEMsRUFBUyxDQUNQdDFDLE9BSk8sTUFLUHk2QixTQUFVQSxJQVNwQixTQUFtQm0xRSxHQUNqQixJQUFJQyxFQUFhMXJCLEVBQVExcEQsU0FJckJxMUUsRUFBVWdDLEVBQVNqNEYsWUFBWW96RixHQUFXNEMsS0FDN0IsSUFBYkMsSUFBZ0JBLEVBQVUsR0FDOUIsSUFBSUUsRUFBWThCLEVBQVNqNEYsWUFBWW96RixHQUFXMkMsS0FDN0IsSUFBZkksSUFBa0JBLEVBQVksR0FDbEMsSUFBSUMsRUFBUUgsRUFBVUUsRUFFbEJDLElBQ0ZOLEdBQWUsRUFDZnhuRixFQUFHOG5GLElBbkJDQyxDQUFVejFFLE9BakJkZzFFLENBQVVoMUUsSUF5Q2QsSUFBSTVPLEVBQU93bEYsS0FDUE8sRUFBY1osRUFBV25sRixHQUN6QkEsSUFBUytsRixHQUFhTixHQUFnQk0sR0FDMUMsSUFBSW50QixFQUFrQnlxQixJQUNsQjRDLEVBQVcsQ0FBQzdFLEdBQVd4b0IsSUF1RTNCLFNBQVN0OEQsRUFBR3RzQixHQUVWMnlHLEVBQWNybUYsR0FBR3RzQixHQVduQixJQUFJeTNGLEVBQWdCLEVBRXBCLFNBQVM4YyxFQUFrQkgsR0FHSCxLQUZ0QjNjLEdBQWlCMmMsSUFFb0IsSUFBVkEsRUFDekJocUcsT0FBTzRuQixpQkFBaUJnakYsR0FBbUJuQixHQUNoQixJQUFsQnBjLEdBQ1RydEYsT0FBTytuQixvQkFBb0I2aUYsR0FBbUJuQixHQUlsRCxJQUFJVyxHQUFZLEVBaUNoQixJQUFJbHNCLEVBQVUsQ0FDWnRuRixPQUFRMnhHLEVBQWMzeEcsT0FDdEJtRCxPQUFRLE1BQ1J5NkIsU0FBVWdxRCxFQUNWMHJCLFdBbklGLFNBQW9CMTFFLEdBQ2xCLElBQUlzM0UsRUFBVTdyRyxTQUFTMEMsY0FBYyxRQUNqQzJ0RCxFQUFPLEdBTVgsT0FKSXc3QyxHQUFXQSxFQUFRQyxhQUFhLFVBQ2xDejdDLEVBQU82NkMsR0FBVW5yRyxPQUFPdzBCLFNBQVM4N0IsT0FHNUJBLEVBQU8sSUFBTXk2QyxFQUFXL0IsRUFBV2hDLEdBQVd4eUUsS0E0SHJEOTZCLEtBekhGLFNBQWNrc0IsRUFBTXBxQixHQUVsQixJQUNJZzVCLEVBQVd5eUUsR0FBZXJoRixPQUFNOXNCLE9BQVdBLEVBQVdvbEYsRUFBUTFwRCxVQUNsRTYwRSxFQUFrQjFCLG9CQUFvQm56RSxFQUZ6QixPQUUyQ296RSxHQUFxQixTQUFVbDNCLEdBQ3JGLEdBQUtBLEVBQUwsQ0FDQSxJQUFJOXFELEVBQU9vaEYsR0FBV3h5RSxHQUNsQm0zRSxFQUFjWixFQUFXL0IsRUFBV3BqRixHQUd4QyxHQUZrQndsRixPQUFrQk8sRUFFbkIsQ0FJZkQsRUFBYTlsRixFQXhJckIsU0FBc0JBLEdBQ3BCNWxCLE9BQU93MEIsU0FBU3loRCxLQUFPcndELEVBd0lqQm9tRixDQUFhTCxHQUNiLElBQUlyQixFQUFZdUIsRUFBU2o0RixZQUFZb3pGLEdBQVc5b0IsRUFBUTFwRCxXQUNwRHkzRSxFQUFZSixFQUFTeHlHLE1BQU0sRUFBR2l4RyxFQUFZLEdBQzlDMkIsRUFBVXZ5RyxLQUFLa3NCLEdBQ2ZpbUYsRUFBV0ksRUFDWDU4RCxFQUFTLENBQ1B0MUMsT0FuQk8sT0FvQlB5NkIsU0FBVUEsU0FJWjZhLFNBZ0dKM3VDLFFBM0ZGLFNBQWlCa2xCLEVBQU1wcUIsR0FFckIsSUFDSWc1QixFQUFXeXlFLEdBQWVyaEYsT0FBTTlzQixPQUFXQSxFQUFXb2xGLEVBQVExcEQsVUFDbEU2MEUsRUFBa0IxQixvQkFBb0JuekUsRUFGekIsVUFFMkNvekUsR0FBcUIsU0FBVWwzQixHQUNyRixHQUFLQSxFQUFMLENBQ0EsSUFBSTlxRCxFQUFPb2hGLEdBQVd4eUUsR0FDbEJtM0UsRUFBY1osRUFBVy9CLEVBQVdwakYsR0FDdEJ3bEYsT0FBa0JPLElBTWxDRCxFQUFhOWxGLEVBQ2J5bEYsR0FBZ0JNLElBR2xCLElBQUlyQixFQUFZdUIsRUFBU2p5RyxRQUFRb3RHLEdBQVc5b0IsRUFBUTFwRCxZQUNqQyxJQUFmODFFLElBQWtCdUIsRUFBU3ZCLEdBQWExa0YsR0FDNUN5cEIsRUFBUyxDQUNQdDFDLE9BbkJTLFVBb0JUeTZCLFNBQVVBLFNBc0VkdFMsR0FBSUEsRUFDSkQsT0E3REYsV0FDRUMsR0FBSSxJQTZESkYsVUExREYsV0FDRUUsRUFBRyxJQTBESHVvRixNQXpDRixTQUFlakQsUUFDRSxJQUFYQSxJQUNGQSxHQUFTLEdBR1gsSUFBSWtELEVBQVVyQixFQUFrQjVCLFVBQVVELEdBTzFDLE9BTEs0QyxJQUNIRCxFQUFrQixHQUNsQkMsR0FBWSxHQUdQLFdBTUwsT0FMSUEsSUFDRkEsR0FBWSxFQUNaRCxHQUFtQixJQUdkTyxNQXdCVHZyQixPQXBCRixTQUFnQjNsRixHQUNkLElBQUlteEcsRUFBV3RCLEVBQWtCeEIsZUFBZXJ1RyxHQUVoRCxPQURBMndHLEVBQWtCLEdBQ1gsV0FDTEEsR0FBbUIsR0FDbkJRLE9BaUJKLE9BQU96c0IsRUFHVCxTQUFTZ3VCLEdBQU10MkcsRUFBR3UyRyxFQUFZQyxHQUM1QixPQUFPejBHLEtBQUs0ZCxJQUFJNWQsS0FBSzhmLElBQUk3aEIsRUFBR3UyRyxHQUFhQyxHLDRDQ2x3QnZDQyxHQUF3QixXQXNLNUIsSUFFZSxHQUZILElBQU01NkQsZUFqSWxCLFNBQTRCaUosRUFBYzR4RCxHQUN4QyxJQUFJQyxFQUF1QkMsRUFFdkJDLEVBQWMsMEJBQTRCLE9BQVEsS0FFbEQzNkQsRUFFSixTQUFVNDZELEdBR1IsU0FBUzU2RCxJQUNQLElBQUk2NkQsRUF0Q2tCdjNHLEVBQ3RCa25GLEVBeUNBLE9BRkFxd0IsRUFBUUQsRUFBV3h3RyxNQUFNeEIsS0FBTTlCLFlBQWM4QixNQUN2Qyt4RixTQXpDZ0JyM0YsRUF5Q2F1M0csRUFBTWgyRyxNQUFNdkIsTUF4Qy9Da25GLEVBQVcsR0FDUixDQUNML3JFLEdBQUksU0FBWTlDLEdBQ2Q2dUUsRUFBUzVpRixLQUFLK1QsSUFFaEJpRCxJQUFLLFNBQWFqRCxHQUNoQjZ1RSxFQUFXQSxFQUFTNS9FLFFBQU8sU0FBVXF4QyxHQUNuQyxPQUFPQSxJQUFNdGdDLE1BR2pCelksSUFBSyxXQUNILE9BQU9JLEdBRVR3bUIsSUFBSyxTQUFhZ3hGLEVBQVVDLEdBQzFCejNHLEVBQVF3M0csRUFDUnR3QixFQUFTamhGLFNBQVEsU0FBVW9TLEdBQ3pCLE9BQU9BLEVBQVFyWSxFQUFPeTNHLFNBeUJqQkYsRUFQVCxLQUFlNzZELEVBQVU0NkQsR0FVekIsSUFBSW5QLEVBQVN6ckQsRUFBUy83QyxVQW9DdEIsT0FsQ0F3bkcsRUFBT3ZsQyxnQkFBa0IsV0FDdkIsSUFBSTU5RCxFQUVKLE9BQU9BLEVBQU8sSUFBU3F5RyxHQUFlL3hHLEtBQUsreEYsUUFBU3J5RixHQUd0RG1qRyxFQUFPeC9CLDBCQUE0QixTQUFtQyt1QyxHQUNwRSxHQUFJcHlHLEtBQUsvRCxNQUFNdkIsUUFBVTAzRyxFQUFVMTNHLE1BQU8sQ0FDeEMsSUFFSXkzRyxFQUZBRSxFQUFXcnlHLEtBQUsvRCxNQUFNdkIsTUFDdEJ3M0csRUFBV0UsRUFBVTEzRyxRQWhFZjZoQixFQW1FRzgxRixNQW5FQTcxRixFQW1FVTAxRixHQWpFZCxJQUFOMzFGLEdBQVcsRUFBSUEsR0FBTSxFQUFJQyxFQUV6QkQsR0FBTUEsR0FBS0MsR0FBTUEsR0FnRWxCMjFGLEVBQWMsR0FFZEEsRUFBOEMsbUJBQXpCUCxFQUFzQ0EsRUFBcUJTLEVBQVVILEdBQVlQLEdBUWxGLEtBRnBCUSxHQUFlLElBR2JueUcsS0FBSyt4RixRQUFRN3dFLElBQUlreEYsRUFBVTEzRyxNQUFPeTNHLElBL0U5QyxJQUFrQjUxRixFQUFHQyxHQXFGakJxbUYsRUFBT2ovRSxPQUFTLFdBQ2QsT0FBTzVqQixLQUFLL0QsTUFBTXN5QyxVQUdiNkksRUEvQ1QsQ0FnREUsYUFFRkEsRUFBUzUwQixvQkFBcUJxdkYsRUFBd0IsSUFBMEJFLEdBQWUsSUFBVTUyRyxPQUFPdTlFLFdBQVltNUIsR0FFNUgsSUFBSXg2RCxFQUVKLFNBQVVpN0QsR0FHUixTQUFTajdELElBQ1AsSUFBSWs3RCxFQWlCSixPQWZBQSxFQUFTRCxFQUFZOXdHLE1BQU14QixLQUFNOUIsWUFBYzhCLE1BQ3hDYyxNQUFRLENBQ2JwRyxNQUFPNjNHLEVBQU85eUQsWUFHaEI4eUQsRUFBT0MsU0FBVyxTQUFVTixFQUFVQyxHQUdDLEtBRkksRUFBdEJJLEVBQU8xeEMsY0FFTnN4QyxJQUNsQkksRUFBTzU5RCxTQUFTLENBQ2RqNkMsTUFBTzYzRyxFQUFPOXlELGNBS2I4eUQsRUFwQlQsS0FBZWw3RCxFQUFVaTdELEdBdUJ6QixJQUFJRyxFQUFVcDdELEVBQVNoOEMsVUFrQ3ZCLE9BaENBbzNHLEVBQVFwdkMsMEJBQTRCLFNBQW1DK3VDLEdBQ3JFLElBQUl2eEMsRUFBZXV4QyxFQUFVdnhDLGFBQzdCN2dFLEtBQUs2Z0UsYUFBZUEsUUFBc0Q4d0MsR0FBd0I5d0MsR0FHcEc0eEMsRUFBUTl1QyxrQkFBb0IsV0FDdEIzakUsS0FBS3MwQyxRQUFReTlELElBQ2YveEcsS0FBS3MwQyxRQUFReTlELEdBQWFsOEYsR0FBRzdWLEtBQUt3eUcsVUFHcEMsSUFBSTN4QyxFQUFlN2dFLEtBQUsvRCxNQUFNNGtFLGFBQzlCN2dFLEtBQUs2Z0UsYUFBZUEsUUFBc0Q4d0MsR0FBd0I5d0MsR0FHcEc0eEMsRUFBUTFtQyxxQkFBdUIsV0FDekIvckUsS0FBS3MwQyxRQUFReTlELElBQ2YveEcsS0FBS3MwQyxRQUFReTlELEdBQWEvN0YsSUFBSWhXLEtBQUt3eUcsV0FJdkNDLEVBQVFoekQsU0FBVyxXQUNqQixPQUFJei9DLEtBQUtzMEMsUUFBUXk5RCxHQUNSL3hHLEtBQUtzMEMsUUFBUXk5RCxHQUFhejNHLE1BRTFCMGxELEdBSVh5eUQsRUFBUTd1RixPQUFTLFdBQ2YsT0F4SGEycUIsRUF3SEl2dUMsS0FBSy9ELE1BQU1zeUMsU0F2SHpCN3JDLE1BQU1tQixRQUFRMHFDLEdBQVlBLEVBQVMsR0FBS0EsR0F1SEx2dUMsS0FBS2MsTUFBTXBHLE9BeEh2RCxJQUFtQjZ6QyxHQTJIUjhJLEVBMURULENBMkRFLGFBR0YsT0FEQUEsRUFBUzMwQixlQUFnQm92RixFQUF3QixJQUEwQkMsR0FBZSxJQUFVNTJHLE9BQVEyMkcsR0FDckcsQ0FDTDE2RCxTQUFVQSxFQUNWQyxTQUFVQSxJLG9CQ25KVixHQU5xQixTQUE0QnI5QyxHQUNuRCxJQUFJczZDLEVBQVUsS0FFZCxPQURBQSxFQUFRMXhCLFlBQWM1b0IsRUFDZnM2QyxFQUtULENBQW1CLFVBTWYsR0FFSixTQUFVbytELEdBWVIsU0FBU0MsRUFBTzEyRyxHQUNkLElBQUlnMkcsRUEwQkosT0F4QkFBLEVBQVFTLEVBQWlCOTRHLEtBQUtvRyxLQUFNL0QsSUFBVStELE1BQ3hDYyxNQUFRLENBQ1pnNUIsU0FBVTc5QixFQUFNdW5GLFFBQVExcEQsVUFPMUJtNEUsRUFBTVcsWUFBYSxFQUNuQlgsRUFBTVksaUJBQW1CLEtBRXBCNTJHLEVBQU02MkcsZ0JBQ1RiLEVBQU1oQyxTQUFXaDBHLEVBQU11bkYsUUFBUWlCLFFBQU8sU0FBVTNxRCxHQUMxQ200RSxFQUFNVyxXQUNSWCxFQUFNdDlELFNBQVMsQ0FDYjdhLFNBQVVBLElBR1ptNEUsRUFBTVksaUJBQW1CLzRFLE1BS3hCbTRFLEVBdENUMUcsR0FBZW9ILEVBQVFELEdBRXZCQyxFQUFPSSxpQkFBbUIsU0FBMEJod0IsR0FDbEQsTUFBTyxDQUNMNzNELEtBQU0sSUFDTmdHLElBQUssSUFDTEMsT0FBUSxHQUNSNmhGLFFBQXNCLE1BQWJqd0IsSUFrQ2IsSUFBSThmLEVBQVM4UCxFQUFPdDNHLFVBNEJwQixPQTFCQXduRyxFQUFPbC9CLGtCQUFvQixXQUN6QjNqRSxLQUFLNHlHLFlBQWEsRUFFZDV5RyxLQUFLNnlHLGtCQUNQN3lHLEtBQUsyMEMsU0FBUyxDQUNaN2EsU0FBVTk1QixLQUFLNnlHLG9CQUtyQmhRLEVBQU85MkIscUJBQXVCLFdBQ3hCL3JFLEtBQUtpd0csVUFBVWp3RyxLQUFLaXdHLFlBRzFCcE4sRUFBT2ovRSxPQUFTLFdBQ2QsT0FBTyxJQUFNdGEsY0FBYyxHQUFROHRDLFNBQVUsQ0FDM0M3SSxTQUFVdnVDLEtBQUsvRCxNQUFNc3lDLFVBQVksS0FDakM3ekMsTUFBTyxDQUNMOG9GLFFBQVN4akYsS0FBSy9ELE1BQU11bkYsUUFDcEIxcEQsU0FBVTk1QixLQUFLYyxNQUFNZzVCLFNBQ3JCOWMsTUFBTzIxRixFQUFPSSxpQkFBaUIveUcsS0FBS2MsTUFBTWc1QixTQUFTaXBELFVBQ25EK3ZCLGNBQWU5eUcsS0FBSy9ELE1BQU02Mkcsa0JBS3pCSCxFQXRFVCxDQXVFRSxJQUFNOTdELFdBNkNOLElBQU1BLFVBNENOLElBQU1BLFVBNEhSLElBQUlvOEQsR0FBVSxHQUNWQyxHQUFlLElBQ2ZDLEdBQWUsRUF5Qm5CLFNBQVNDLEdBQVVyd0IsRUFBVXo2RSxRQUNYLElBQVpBLElBQ0ZBLEVBQVUsS0FHVyxpQkFBWkEsR0FBd0I1RixNQUFNbUIsUUFBUXlFLE1BQy9DQSxFQUFVLENBQ1I0aUIsS0FBTTVpQixJQUlWLElBQUlzNEIsRUFBV3Q0QixFQUNYNGlCLEVBQU8wVixFQUFTMVYsS0FDaEJtb0YsRUFBaUJ6eUUsRUFBU3k0QyxNQUMxQkEsT0FBMkIsSUFBbkJnNkIsR0FBb0NBLEVBQzVDQyxFQUFrQjF5RSxFQUFTbnhCLE9BQzNCQSxPQUE2QixJQUFwQjZqRyxHQUFxQ0EsRUFDOUNDLEVBQXFCM3lFLEVBQVM3USxVQUM5QkEsT0FBbUMsSUFBdkJ3akYsR0FBd0NBLEVBRXhELE1BRFksR0FBR3BzRyxPQUFPK2pCLEdBQ1R0b0IsUUFBTyxTQUFVNHdHLEVBQVN0b0YsR0FDckMsSUFBS0EsR0FBaUIsS0FBVEEsRUFBYSxPQUFPLEtBQ2pDLEdBQUlzb0YsRUFBUyxPQUFPQSxFQUVwQixJQUFJQyxFQS9DUixTQUF1QnZvRixFQUFNNWlCLEdBQzNCLElBQUlvckcsRUFBVyxHQUFLcHJHLEVBQVEwSyxJQUFNMUssRUFBUW1ILE9BQVNuSCxFQUFReW5CLFVBQ3ZENGpGLEVBQVlWLEdBQVFTLEtBQWNULEdBQVFTLEdBQVksSUFDMUQsR0FBSUMsRUFBVXpvRixHQUFPLE9BQU95b0YsRUFBVXpvRixHQUN0QyxJQUFJM3FCLEVBQU8sR0FFUGtGLEVBQVMsQ0FDWHFnRixPQUZXLEtBQWE1NkQsRUFBTTNxQixFQUFNK0gsR0FHcEMvSCxLQUFNQSxHQVFSLE9BTEk0eUcsR0FBZUQsS0FDakJTLEVBQVV6b0YsR0FBUXpsQixFQUNsQjB0RyxNQUdLMXRHLEVBK0JjbXVHLENBQWMxb0YsRUFBTSxDQUNyQ2xZLElBQUtxbUUsRUFDTDVwRSxPQUFRQSxFQUNSc2dCLFVBQVdBLElBRVQrMUQsRUFBUzJ0QixFQUFhM3RCLE9BQ3RCdmxGLEVBQU9rekcsRUFBYWx6RyxLQUVwQnljLEVBQVE4b0UsRUFBT3QzRCxLQUFLdTBELEdBQ3hCLElBQUsvbEUsRUFBTyxPQUFPLEtBQ25CLElBQUlrVSxFQUFNbFUsRUFBTSxHQUNaNmdFLEVBQVM3Z0UsRUFBTXJlLE1BQU0sR0FDckJxMEcsRUFBVWp3QixJQUFhN3hELEVBQzNCLE9BQUltb0QsSUFBVTI1QixFQUFnQixLQUN2QixDQUNMOW5GLEtBQU1BLEVBRU5nRyxJQUFjLE1BQVRoRyxHQUF3QixLQUFSZ0csRUFBYSxJQUFNQSxFQUV4QzhoRixRQUFTQSxFQUVUN2hGLE9BQVE1d0IsRUFBS3FDLFFBQU8sU0FBVTZFLEVBQU16TSxFQUFLaUUsR0FFdkMsT0FEQXdJLEVBQUt6TSxFQUFJaEIsTUFBUTZqRixFQUFPNStFLEdBQ2pCd0ksSUFDTixPQUVKLE1BaUJMLElBQUksR0FFSixTQUFVaXJHLEdBR1IsU0FBU21CLElBQ1AsT0FBT25CLEVBQWlCbHhHLE1BQU14QixLQUFNOUIsWUFBYzhCLEtBbUNwRCxPQXRDQXVyRyxHQUFlc0ksRUFBT25CLEdBTVRtQixFQUFNeDRHLFVBRVp1b0IsT0FBUyxXQUNkLElBQUlxdUYsRUFBUWp5RyxLQUVaLE9BQU8sSUFBTXNKLGNBQWMsR0FBUSt0QyxTQUFVLE1BQU0sU0FBVXk4RCxHQUMxREEsR0FBd0gsSUFBVSxHQUNuSSxJQUFJaDZFLEVBQVdtNEUsRUFBTWgyRyxNQUFNNjlCLFVBQVlnNkUsRUFBVWg2RSxTQUk3Qzc5QixFQUFRODRCLEVBQVMsR0FBSSsrRSxFQUFXLENBQ2xDaDZFLFNBQVVBLEVBQ1Y5YyxNQUxVaTFGLEVBQU1oMkcsTUFBTTgzRyxjQUFnQjlCLEVBQU1oMkcsTUFBTTgzRyxjQUNsRDlCLEVBQU1oMkcsTUFBTWl2QixLQUFPa29GLEdBQVV0NUUsRUFBU2lwRCxTQUFVa3ZCLEVBQU1oMkcsT0FBUzYzRyxFQUFVOTJGLFFBT3ZFZzNGLEVBQWMvQixFQUFNaDJHLE1BQ3BCc3lDLEVBQVd5bEUsRUFBWXpsRSxTQUN2QjlxQixFQUFZdXdGLEVBQVl2d0YsVUFDeEJHLEVBQVNvd0YsRUFBWXB3RixPQU96QixPQUpJbGhCLE1BQU1tQixRQUFRMHFDLElBQWlDLElBQXBCQSxFQUFTcnlDLFNBQ3RDcXlDLEVBQVcsTUFHTixJQUFNamxDLGNBQWMsR0FBUTh0QyxTQUFVLENBQzNDMThDLE1BQU91QixHQUNOQSxFQUFNK2dCLE1BQVF1eEIsRUFBK0IsbUJBQWJBLEVBQXVIQSxFQUFTdHlDLEdBQVNzeUMsRUFBVzlxQixFQUFZLElBQU1uYSxjQUFjbWEsRUFBV3huQixHQUFTMm5CLEVBQVNBLEVBQU8zbkIsR0FBUyxLQUEyQixtQkFBYnN5QyxFQUF1SEEsRUFBU3R5QyxHQUFTLFVBSXhaNDNHLEVBdkNULENBd0NFLElBQU1oOUQsV0E4QlIsU0FBUyxHQUFnQjNyQixHQUN2QixNQUEwQixNQUFuQkEsRUFBSy9hLE9BQU8sR0FBYSthLEVBQU8sSUFBTUEsRUFVL0MsU0FBUyxHQUFjb2pGLEVBQVV4MEUsR0FDL0IsSUFBS3cwRSxFQUFVLE9BQU94MEUsRUFDdEIsSUFBSXB4QixFQUFPLEdBQWdCNGxHLEdBQzNCLE9BQXdDLElBQXBDeDBFLEVBQVNpcEQsU0FBUzdqRixRQUFRd0osR0FBb0JveEIsRUFDM0MvRSxFQUFTLEdBQUkrRSxFQUFVLENBQzVCaXBELFNBQVVqcEQsRUFBU2lwRCxTQUFTMXlFLE9BQU8zSCxFQUFLeE0sVUFJNUMsU0FBUyszRyxHQUFVbjZFLEdBQ2pCLE1BQTJCLGlCQUFiQSxFQUF3QkEsRUFBV3d5RSxHQUFXeHlFLEdBRzlELFNBQVNvNkUsR0FBYzVQLEdBQ3JCLE9BQU8sV0FDd0csSUFBVSxJQUkzSCxTQUFTMzJGLE1Bc0ZQLElBQU1rcEMsVUFrQlIsSUFBSSxHQUVKLFNBQVU2N0QsR0FHUixTQUFTeUIsSUFDUCxPQUFPekIsRUFBaUJseEcsTUFBTXhCLEtBQU05QixZQUFjOEIsS0FnQ3BELE9BbkNBdXJHLEdBQWU0SSxFQUFRekIsR0FNVnlCLEVBQU85NEcsVUFFYnVvQixPQUFTLFdBQ2QsSUFBSXF1RixFQUFRanlHLEtBRVosT0FBTyxJQUFNc0osY0FBYyxHQUFRK3RDLFNBQVUsTUFBTSxTQUFVL0MsR0FDMURBLEdBQXVILElBQVUsR0FDbEksSUFDSW5HLEVBQVNueEIsRUFEVDhjLEVBQVdtNEUsRUFBTWgyRyxNQUFNNjlCLFVBQVl3YSxFQUFReGEsU0FlL0MsT0FUQSxJQUFNNGMsU0FBUy8xQyxRQUFRc3hHLEVBQU1oMkcsTUFBTXN5QyxVQUFVLFNBQVV3VixHQUNyRCxHQUFhLE1BQVQvbUMsR0FBaUIsSUFBTTQ3QixlQUFlbUwsR0FBUSxDQUNoRDVWLEVBQVU0VixFQUNWLElBQUk3NEIsRUFBTzY0QixFQUFNOW5ELE1BQU1pdkIsTUFBUTY0QixFQUFNOW5ELE1BQU1tYixLQUMzQzRGLEVBQVFrTyxFQUFPa29GLEdBQVV0NUUsRUFBU2lwRCxTQUFVaHVELEVBQVMsR0FBSWd2QixFQUFNOW5ELE1BQU8sQ0FDcEVpdkIsS0FBTUEsS0FDRm9wQixFQUFRdDNCLFVBR1hBLEVBQVEsSUFBTTA3QixhQUFhdkssRUFBUyxDQUN6Q3JVLFNBQVVBLEVBQ1ZpNkUsY0FBZS8yRixJQUNaLFNBSUZtM0YsRUFwQ1QsQ0FxQ0UsSUFBTXQ5RCxXQWtCUixTQUFTdTlELEdBQVd2OUQsR0FDbEIsSUFBSWowQixFQUFjLGVBQWlCaTBCLEVBQVVqMEIsYUFBZWkwQixFQUFVNzhDLE1BQVEsSUFFMUUrNUMsRUFBSSxTQUFXOTNDLEdBQ2pCLElBQUlvNEcsRUFBc0JwNEcsRUFBTW80RyxvQkFDNUJDLEVBQWlCOVEsRUFBOEJ2bkcsRUFBTyxDQUFDLHdCQUUzRCxPQUFPLElBQU1xTixjQUFjLEdBQVErdEMsU0FBVSxNQUFNLFNBQVUvQyxHQUUzRCxPQURDQSxHQUFzSSxJQUFVLEdBQzFJLElBQU1ockMsY0FBY3V0QyxFQUFXOWhCLEVBQVMsR0FBSXUvRSxFQUFnQmhnRSxFQUFTLENBQzFFYyxJQUFLaS9ELFNBY1gsT0FUQXRnRSxFQUFFbnhCLFlBQWNBLEVBQ2hCbXhCLEVBQUVteEQsaUJBQW1CcnVELEVBUWQsSUFBYTlDLEVBQUc4QyxHQUdSLElBQU1nQixXQ3ZyQmhCLElBQUlsd0IsR0FBa0IsMkJBb0J6QnVOLEdBQWlCLFNBQXdCM0MsR0FDM0MsT0FBTyxXQUNMLElBQUssSUFBSS92QixFQUFPdEUsVUFBVWhDLE9BQVFzUCxFQUFPLElBQUk5SSxNQUFNRixHQUFPdEIsRUFBTyxFQUFHQSxFQUFPc0IsRUFBTXRCLElBQy9Fc0ssRUFBS3RLLEdBQVFoRCxVQUFVZ0QsR0FHekIsTUFBTyxDQUNMNUIsS0FUMkIsK0JBVTNCOHBCLFFBQVMsQ0FDUG1KLE9BQVFBLEVBQ1IvbUIsS0FBTUEsTUFhSCxJQURPMHBCLEdBQWUsUUFDWkEsR0FBZSxZQUNwQkEsR0FBZSxNQUNYQSxHQUFlLFVBQ1pBLEdBQWUsYUNsRHRDLFNBQVM1NEIsR0FBUWIsR0FBd1QsT0FBdE9hLEdBQXJELG1CQUFYOUIsUUFBb0QsaUJBQXBCQSxPQUFPcTVDLFNBQW1DLFNBQWlCcDRDLEdBQU8sY0FBY0EsR0FBMkIsU0FBaUJBLEdBQU8sT0FBT0EsR0FBeUIsbUJBQVhqQixRQUF5QmlCLEVBQUlzQixjQUFnQnZDLFFBQVVpQixJQUFRakIsT0FBT2EsVUFBWSxnQkFBa0JJLElBQXlCQSxHQUl4VixJQXFFZSxHQXJFTyxTQUF5Qjg0RyxHQUM3QyxJQUFJQyxFQUFRRCxFQUFVQyxNQUNsQkMsRUFBT0YsRUFBVUUsS0FNakJDLEVBQVksU0FBbUI1ekcsR0FDakMsSUFMK0JwRyxFQUszQmk2RyxFQUFTRixFQUFLRCxFQUFNMXpHLEVBQU8sQ0FBQyxZQUVoQyxHQU5nQixPQURlcEcsRUFPakJpNkcsSUFONkIsV0FBbkJyNEcsR0FBUTVCLEtBQXVCODVHLEVBQU05NUcsRUFBTyxDQUFDLGVBQWdCODVHLEVBQU05NUcsRUFBTyxDQUFDLFdBT2pHLEtBQU0saUZBR1IsT0FBT2k2RyxHQUdMQyxFQUFjLFNBQXFCOXpHLEdBQ3JDLE9BQU8yekcsRUFBS0QsRUFBTUUsRUFBVTV6RyxHQUFRLENBQUMsZUF3Q3ZDLE1BQU8sQ0FDTDh6RyxZQUFhQSxFQUNiQyxVQXZDYyxTQUFtQi96RyxHQUNqQyxPQUFPMnpHLEVBQUtELEVBQU1FLEVBQVU1ekcsR0FBUSxDQUFDLGFBdUNyQzR6RyxVQUFXQSxFQUNYSSxVQXJDYyxTQUFtQmgwRyxHQUNqQyxPQUFPMnpHLEVBQUtELEVBQU1FLEVBQVU1ekcsR0FBUSxDQUFDLFdBQVksYUFxQ2pEaTBHLFFBbENZLFNBQWlCajBHLEdBQzdCLE9BQU8yekcsRUFBS0QsRUFBTUUsRUFBVTV6RyxHQUFRLENBQUMsV0FBWSxXQWtDakRrMEcsb0JBNUJ3QixTQUE2QjlwRixHQUNyRCxJQUFJK3BGLEVBQWUsS0FDZkMsRUFBWSxLQUNoQixPQUFPLFNBQVVwMEcsR0FDZixJQUNJaWlGLEdBRE82eEIsRUFBWTl6RyxJQUFVLElBQ2JpaUYsU0FFcEIsR0FBSUEsSUFBYWt5QixFQUNmLE9BQU9DLEVBR1RELEVBQWVseUIsRUFDZixJQUFJL2xFLEVBQVFvMkYsR0FBVXJ3QixFQUFVNzNELEdBTWhDLE9BSktsTyxHQUFVazRGLEdBQWFsNEYsRUFBTWtVLE1BQVFna0YsRUFBVWhrRixNQUNsRGdrRixFQUFZbDRGLEdBR1BrNEYsTUMzRGIsU0FBUyxHQUFRejVHLEdBQXdULE9BQXRPLEdBQXJELG1CQUFYakIsUUFBb0QsaUJBQXBCQSxPQUFPcTVDLFNBQW1DLFNBQWlCcDRDLEdBQU8sY0FBY0EsR0FBMkIsU0FBaUJBLEdBQU8sT0FBT0EsR0FBeUIsbUJBQVhqQixRQUF5QmlCLEVBQUlzQixjQUFnQnZDLFFBQVVpQixJQUFRakIsT0FBT2EsVUFBWSxnQkFBa0JJLElBQXlCQSxHQUV4VixTQUFTLEtBQTJRLE9BQTlQLEdBQVd0QixPQUFPczJCLFFBQVUsU0FBVXowQixHQUFVLElBQUssSUFBSXZDLEVBQUksRUFBR0EsRUFBSXlFLFVBQVVoQyxPQUFRekMsSUFBSyxDQUFFLElBQUkySSxFQUFTbEUsVUFBVXpFLEdBQUksSUFBSyxJQUFJdUIsS0FBT29ILEVBQWNqSSxPQUFPa0IsVUFBVUMsZUFBZTFCLEtBQUt3SSxFQUFRcEgsS0FBUWdCLEVBQU9oQixHQUFPb0gsRUFBT3BILElBQVksT0FBT2dCLElBQTJCd0YsTUFBTXhCLEtBQU05QixXQUloVCxTQUFTbkMsR0FBa0JDLEVBQVFDLEdBQVMsSUFBSyxJQUFJeEMsRUFBSSxFQUFHQSxFQUFJd0MsRUFBTUMsT0FBUXpDLElBQUssQ0FBRSxJQUFJMEMsRUFBYUYsRUFBTXhDLEdBQUkwQyxFQUFXOUIsV0FBYThCLEVBQVc5QixhQUFjLEVBQU84QixFQUFXVCxjQUFlLEVBQVUsVUFBV1MsSUFBWUEsRUFBV1IsVUFBVyxHQUFNeEIsT0FBT0MsZUFBZTRCLEVBQVFHLEVBQVduQixJQUFLbUIsSUFJN1MsU0FBU2c1RyxHQUEyQjM0RyxFQUFNNUMsR0FBUSxPQUFJQSxHQUEyQixXQUFsQixHQUFRQSxJQUFzQyxtQkFBVEEsRUFFcEcsU0FBZ0M0QyxHQUFRLFFBQWEsSUFBVEEsRUFBbUIsTUFBTSxJQUFJK0csZUFBZSw2REFBZ0UsT0FBTy9HLEVBRmI0NEcsQ0FBdUI1NEcsR0FBdEM1QyxFQUluSSxTQUFTNkMsR0FBZ0J2QyxHQUF3SixPQUFuSnVDLEdBQWtCdEMsT0FBT3VDLGVBQWlCdkMsT0FBT3dDLGVBQWlCLFNBQXlCekMsR0FBSyxPQUFPQSxFQUFFMEMsV0FBYXpDLE9BQU93QyxlQUFlekMsS0FBOEJBLEdBSXhNLFNBQVM2OUUsR0FBZ0I3OUUsRUFBR3FCLEdBQStHLE9BQTFHdzhFLEdBQWtCNTlFLE9BQU91QyxnQkFBa0IsU0FBeUJ4QyxFQUFHcUIsR0FBc0IsT0FBakJyQixFQUFFMEMsVUFBWXJCLEVBQVVyQixJQUE2QkEsRUFBR3FCLEdDbEJySyxTQUFTOGxHLEdBQWVqN0YsRUFBSzNNLEdBQUssT0FNbEMsU0FBeUIyTSxHQUFPLEdBQUkxRCxNQUFNbUIsUUFBUXVDLEdBQU0sT0FBT0EsRUFOdEJpdkcsQ0FBZ0JqdkcsSUFJekQsU0FBK0JBLEVBQUszTSxHQUFLLElBQUkrakIsRUFBTyxHQUFROGpGLEdBQUssRUFBVUMsR0FBSyxFQUFXQyxPQUFLcGpHLEVBQVcsSUFBTSxJQUFLLElBQWlDcWpHLEVBQTdCeGdHLEVBQUttRixFQUFJNUwsT0FBT3E1QyxjQUFtQnl0RCxHQUFNRyxFQUFLeGdHLEVBQUduQixRQUFRb00sUUFBb0JzUixFQUFLeGUsS0FBS3lpRyxFQUFHL21HLFFBQVlqQixHQUFLK2pCLEVBQUt0aEIsU0FBV3pDLEdBQTNENm5HLEdBQUssSUFBb0UsTUFBT2oxRixHQUFPazFGLEdBQUssRUFBTUMsRUFBS24xRixFQUFPLFFBQVUsSUFBV2kxRixHQUFzQixNQUFoQnJnRyxFQUFXLFFBQVdBLEVBQVcsU0FBTyxRQUFVLEdBQUlzZ0csRUFBSSxNQUFNQyxHQUFRLE9BQU9oa0YsRUFKalY4M0YsQ0FBc0JsdkcsRUFBSzNNLElBRTVGLFdBQThCLE1BQU0sSUFBSXFDLFVBQVUsd0RBRmdEeTVHLEdBUWxHLFNBQVNDLEdBQWN4NUcsR0FBVSxJQUFLLElBQUl2QyxFQUFJLEVBQUdBLEVBQUl5RSxVQUFVaEMsT0FBUXpDLElBQUssQ0FBRSxJQUFJMkksRUFBeUIsTUFBaEJsRSxVQUFVekUsR0FBYXlFLFVBQVV6RSxHQUFLLEdBQVFvSSxFQUFVMUgsT0FBT29HLEtBQUs2QixHQUFxRCxtQkFBakNqSSxPQUFPNEgsd0JBQXdDRixFQUFVQSxFQUFRc0YsT0FBT2hOLE9BQU80SCxzQkFBc0JLLEdBQVFKLFFBQU8sU0FBVUMsR0FBTyxPQUFPOUgsT0FBTytILHlCQUF5QkUsRUFBUUgsR0FBSzVILGdCQUFtQndILEVBQVFsQixTQUFRLFNBQVUzRixHQUFPNEcsR0FBZ0I1RixFQUFRaEIsRUFBS29ILEVBQU9wSCxPQUFhLE9BQU9nQixFQUV4ZCxTQUFTNEYsR0FBZ0JuRyxFQUFLVCxFQUFLTixHQUFpSyxPQUFwSk0sS0FBT1MsRUFBT3RCLE9BQU9DLGVBQWVxQixFQUFLVCxFQUFLLENBQUVOLE1BQU9BLEVBQU9MLFlBQVksRUFBTXFCLGNBQWMsRUFBTUMsVUFBVSxJQUFrQkYsRUFBSVQsR0FBT04sRUFBZ0JlLEVBUTNNLElBQUlnNkcsR0FBYyxTQUFxQjM3RSxHQUNyQyxJQUFJNDdFLEVBQWM1N0UsR0FBWUEsRUFBU2tKLE9BRXZDLEdBQTJCLGlCQUFoQjB5RSxHQUFtRCxJQUF2QkEsRUFBWXg1RyxPQUNqRCxPQUFPczVHLEdBQWMsR0FBSTE3RSxFQUFVLENBQ2pDeE8sTUFBTyxLQUtYLElBSUlBLEVBSlNvcUYsRUFBWXQ0RyxVQUFVLEdBRWRDLE1BQU0sS0FFUHVGLFFBQU8sU0FBVTBPLEVBQUtxa0csR0FFeEMsSUFDSUMsRUFBdUJ2VSxHQUREc1UsRUFBYXQ0RyxNQUFNLEtBQ2tCLEdBSS9ELE9BQU9tNEcsR0FBYyxHQUFJbGtHLEVBQUsxUCxHQUFnQixHQUgvQmcwRyxFQUFxQixHQUNuQkEsRUFBcUIsT0FHckMsSUFDSCxPQUFPSixHQUFjLEdBQUkxN0UsRUFBVSxDQUNqQ3hPLE1BQU9BLEtBNENJLEdBeENXLFNBQTZCaXBGLEdBQ3JELElBQUlzQixFQUFTdEIsRUFBVXNCLE9BQ25CcndHLEVBQVErdUcsRUFBVS91RyxNQW1DdEIsT0FqQzBCLFNBQTZCZytFLEdBQ3JELElBQUlzeUIsRUFBcUJELEVBQU8sQ0FDOUIvN0UsU0FBVTI3RSxHQUFZanlCLEVBQVExcEQsVUFDOUJ6NkIsT0FBUW1rRixFQUFRbmtGLFNBT2xCLE9BQU8sV0FDTCxJQUFJeUIsRUFBUTVDLFVBQVVoQyxPQUFTLFFBQXNCa0MsSUFBakJGLFVBQVUsR0FBbUJBLFVBQVUsR0FBSzQzRyxFQUU1RXAyRyxFQUFPeEIsVUFBVWhDLE9BQVMsUUFBc0JrQyxJQUFqQkYsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEdBQzNFb0IsRUFBT0ksRUFBS0osS0FDWjhwQixFQUFVMXBCLEVBQUswcEIsUUFFbkIsR0FBSTlwQixJQUFTcW9CLEdBQWlCLENBQzVCLElBQUltUyxFQUFXMVEsRUFBUTBRLFNBQ25CejZCLEVBQVMrcEIsRUFBUS9wQixPQUNqQjAyRyxFQUFtQjNzRixFQUFRMnNGLGlCQUcvQixPQUFPQSxFQUFtQmoxRyxFQUFRMEUsRUFBTTFFLEVBQU8sQ0FDN0NnNUIsU0FBVSs3RSxFQUFPSixHQUFZMzdFLElBQzdCejZCLE9BQVFBLElBSVosT0FBT3lCLEtDN0ViLFNBQVMsR0FBZ0JyRixFQUFLVCxFQUFLTixHQUFpSyxPQUFwSk0sS0FBT1MsRUFBT3RCLE9BQU9DLGVBQWVxQixFQUFLVCxFQUFLLENBQUVOLE1BQU9BLEVBQU9MLFlBQVksRUFBTXFCLGNBQWMsRUFBTUMsVUFBVSxJQUFrQkYsRUFBSVQsR0FBT04sRUFBZ0JlLEVBRzNNLElBWWUsR0FaQyxDQUNkbzZHLE9BQVEsU0FBZ0JuN0csR0FDdEIsT0FBT0EsR0FFVDg1RyxNQ1JVLFNBQWUxekcsRUFBT29xQixHQUNoQyxJQUFLcHFCLEVBQ0gsT0FBT0EsRUFHVCxJQUFJNUUsRUFBU2d2QixFQUFLaHZCLE9BRWxCLEdBQUtBLEVBQUwsQ0FNQSxJQUZBLElBQUl1SixFQUFTM0UsRUFFSnJILEVBQUksRUFBR0EsRUFBSXlDLEdBQVl1SixJQUFVaE0sRUFDeENnTSxFQUFTQSxFQUFPeWxCLEVBQUt6eEIsSUFHdkIsT0FBT2dNLElEUlBELE1BQU8sU0FBZTFFLEVBQU9zb0IsR0FDM0IsT0FYSixTQUF1QnB0QixHQUFVLElBQUssSUFBSXZDLEVBQUksRUFBR0EsRUFBSXlFLFVBQVVoQyxPQUFRekMsSUFBSyxDQUFFLElBQUkySSxFQUF5QixNQUFoQmxFLFVBQVV6RSxHQUFheUUsVUFBVXpFLEdBQUssR0FBUW9JLEVBQVUxSCxPQUFPb0csS0FBSzZCLEdBQXFELG1CQUFqQ2pJLE9BQU80SCx3QkFBd0NGLEVBQVVBLEVBQVFzRixPQUFPaE4sT0FBTzRILHNCQUFzQkssR0FBUUosUUFBTyxTQUFVQyxHQUFPLE9BQU85SCxPQUFPK0gseUJBQXlCRSxFQUFRSCxHQUFLNUgsZ0JBQW1Cd0gsRUFBUWxCLFNBQVEsU0FBVTNGLEdBQU8sR0FBZ0JnQixFQUFRaEIsRUFBS29ILEVBQU9wSCxPQUFhLE9BQU9nQixFQVc3YyxDQUFjLEdBQUk4RSxFQUFPc29CLElBRWxDcXJGLEtBQU0sU0FBYy81RyxHQUNsQixPQUFPQSxJRVJBLEdKcUJpQixTQUErQjY1RyxHQUN6RCxJQUNJSyxFQURtQixHQUFnQkwsR0FDSkssWUFTL0JvQixFQUVKLFNBQVVDLEdBR1IsU0FBU0QsRUFBZ0IvNUcsR0FDdkIsSUFBSWcyRyxHQXhDVixTQUF5QnIyRyxFQUFVQyxHQUFlLEtBQU1ELGFBQW9CQyxHQUFnQixNQUFNLElBQUlDLFVBQVUscUNBMEMxR282RyxDQUFnQmwyRyxLQUFNZzJHLEdBRXRCL0QsRUFBUWtELEdBQTJCbjFHLEtBQU12RCxHQUFnQnU1RyxHQUFpQnA4RyxLQUFLb0csS0FBTS9ELElBQ3JGLElBQUlnSCxFQUFRaEgsRUFBTWdILE1BQ2R1Z0YsRUFBVXZuRixFQUFNdW5GLFFBQ2hCMnlCLEVBQW9CbDZHLEVBQU1rNkcsa0JBQzlCbEUsRUFBTW1FLGtCQUFtQixFQUV6Qm5FLEVBQU1seUcsWUFBY2tELEVBQU1wRSxXQUFVLFdBRWxDLElBQUl3M0csRUFBZXpCLEVBQVkzeEcsRUFBTXJFLFlBQ2pDMDNHLEVBQWtCRCxFQUFhdHpCLFNBQy9Cd3pCLEVBQWdCRixFQUFhcnpFLE9BQzdCd3pFLEVBQWNILEVBQWE5NkIsS0FHM0JrN0IsRUFBb0JqekIsRUFBUTFwRCxTQUM1QjQ4RSxFQUFvQkQsRUFBa0IxekIsU0FDdEM0ekIsRUFBa0JGLEVBQWtCenpFLE9BQ3BDNHpFLEVBQWdCSCxFQUFrQmw3QixLQUVULFNBQXpCdC9FLEVBQU11bkYsUUFBUW5rRixRQUFzQnEzRyxJQUFzQkosR0FBbUJLLElBQW9CSixHQUFpQkssSUFBa0JKLElBQ3RJdkUsRUFBTW1FLGtCQUFtQixFQUV6QjV5QixFQUFReGtGLEtBQUssQ0FDWCtqRixTQUFVdXpCLEVBQ1Z0ekUsT0FBUXV6RSxFQUNSaDdCLEtBQU1pN0IsUUFLWixJQUFJaHlCLEVBQXVCLFNBQThCMXFELEVBQVV6NkIsR0FDakUsSUFBSTAyRyxFQUFtQjczRyxVQUFVaEMsT0FBUyxRQUFzQmtDLElBQWpCRixVQUFVLElBQW1CQSxVQUFVLEdBR2pGK3pHLEVBQU1tRSxpQkFHVG5FLEVBQU1tRSxrQkFBbUIsRUFGekJELEVBQWtCcjhFLEVBQVV6NkIsRUFBUTAyRyxJQVl4QyxPQUxBOUQsRUFBTWhDLFNBQVd6c0IsRUFBUWlCLE9BQU9ELEdBSWhDQSxFQUFxQmhCLEVBQVExcEQsU0FBVTBwRCxFQUFRbmtGLFFBQVEsR0FDaEQ0eUcsRUF2RmIsSUFBc0JwMkcsRUFBYU8sRUFBWUMsRUE0RzNDLE9BcEdKLFNBQW1CUSxFQUFVQyxHQUFjLEdBQTBCLG1CQUFmQSxHQUE0QyxPQUFmQSxFQUF1QixNQUFNLElBQUloQixVQUFVLHNEQUF5RGUsRUFBU3hCLFVBQVlsQixPQUFPWSxPQUFPK0IsR0FBY0EsRUFBV3pCLFVBQVcsQ0FBRTBCLFlBQWEsQ0FBRXJDLE1BQU9tQyxFQUFVbEIsVUFBVSxFQUFNRCxjQUFjLEtBQWVvQixHQUFZaTdFLEdBQWdCbDdFLEVBQVVDLEdBeUIvVys1RyxDQUFVYixFQUFpQkMsR0FqQ1RwNkcsRUEwRkxtNkcsR0ExRmtCNTVHLEVBMEZELENBQUMsQ0FDN0JwQixJQUFLLHVCQUNMTixNQUFPLFdBQ0xzRixLQUFLaXdHLFdBQ0xqd0csS0FBS0QsZ0JBRU4sQ0FDRC9FLElBQUssU0FDTE4sTUFBTyxXQUNMLElBQUlzNUcsRUFBY2gwRyxLQUFLL0QsTUFDbkJ1bkYsRUFBVXd3QixFQUFZeHdCLFFBQ3RCajFDLEVBQVd5bEUsRUFBWXpsRSxTQUMzQixPQUFPLElBQU1qbEMsY0FBYyxHQUFRLENBQ2pDazZFLFFBQVNBLEdBQ1JqMUMsUUF4R21FeHlDLEdBQWtCRixFQUFZUixVQUFXZSxHQUFpQkMsR0FBYU4sR0FBa0JGLEVBQWFRLEdBNEd6SzI1RyxFQTVFVCxDQTZFRSxpQkFFRkEsRUFBZ0IveUYsVUFBWSxDQUMxQmhnQixNQUFPLElBQVVtMkUsTUFBTSxDQUNyQng2RSxTQUFVLElBQVVtM0MsS0FBSzJpQyxXQUN6Qjc1RSxVQUFXLElBQVVrM0MsS0FBSzJpQyxhQUN6QkEsV0FDSDhLLFFBQVMsSUFBVXBLLE1BQU0sQ0FDdkIvNUUsT0FBUSxJQUFVbVksT0FBT2toRSxXQUN6QitMLE9BQVEsSUFBVTF1QyxLQUFLMmlDLFdBQ3ZCNStDLFNBQVUsSUFBVTMrQixPQUFPdTlFLFdBQzNCMTVFLEtBQU0sSUFBVSsyQyxLQUFLMmlDLGFBQ3BCQSxXQUNINDFCLFNBQVUsSUFBVTkyRixPQUNwQisyQixTQUFVLElBQVU0cUMsVUFBVSxDQUFDLElBQVVwakMsS0FBTSxJQUFVcm9CLE9BQ3pEeW9GLGtCQUFtQixJQUFVcGdFLEtBQUsyaUMsWUFHcEMsSUFRSW8rQixFQUE2QixTQUFvQzc2RyxHQUNuRSxJQUFJc2dGLEVBQVV0Z0YsRUFBTXE0QyxTQUFXK3RELEVBRS9CLEdBQWUsTUFBWDlsQixFQUNGLEtBQU0sbUNBR1IsT0FBTyxJQUFNanpFLGNBQWNpekUsRUFBUWxsQyxTQUFVLE1BQU0sU0FBVTMzQyxHQUMzRCxJQUFJdUQsRUFBUXZELEVBQUt1RCxNQUNqQixPQUFPLElBQU1xRyxjQUFjMHNHLEVBQWlCLEdBQVMsQ0FDbkQveUcsTUFBT0EsR0FDTmhILFFBT1AsT0FIQTY2RyxFQUEyQjd6RixVQUFZLENBQ3JDcXhCLFFBQVMsSUFBVW41QyxRQUVkLEdBQVEsTUExQlUsU0FBNEJpRSxHQUNuRCxNQUFPLENBQ0wrMkcsa0JBQW1CLFNBQTJCcjhFLEVBQVV6NkIsRUFBUTAyRyxHQUM5RCxPQUFPMzJHLEVGcklnQixTQUEyQjA2QixFQUFVejZCLEdBQ2xFLElBQUkwMkcsRUFBbUI3M0csVUFBVWhDLE9BQVMsUUFBc0JrQyxJQUFqQkYsVUFBVSxJQUFtQkEsVUFBVSxHQUN0RixNQUFPLENBQ0xvQixLQUFNcW9CLEdBQ055QixRQUFTLENBQ1AwUSxTQUFVQSxFQUNWejZCLE9BQVFBLEVBQ1IwMkcsaUJBQWtCQSxJRThIQSxDQUFtQmo4RSxFQUFVejZCLEVBQVEwMkcsUUF1QnBELENBQWtDZSxHSXpKM0MsQ0FBc0JDLElBQ1hDLEdBRVgsR0FBb0JELElBRWhCLEdBRUosR0FBZ0JBLElBQ0UsR0FBaUJuQyxZQUNuQixHQUFpQkMsVUFDbkIsR0FBaUJFLFFBQ2YsR0FBaUJELFVBQ1AsR0FBaUJFLG9CLE1Dc0J6QyxJQUFNbitELFVBK0NOLElBQU1BLFVBZVIsSUFBSW9nRSxHQUFvQixTQUEyQmptRixFQUFJa3pELEdBQ3JELE1BQXFCLG1CQUFQbHpELEVBQW9CQSxFQUFHa3pELEdBQW1CbHpELEdBRXRELEdBQXNCLFNBQTZCQSxFQUFJa3pELEdBQ3pELE1BQXFCLGlCQUFQbHpELEVBQWtCdTdFLEdBQWV2N0UsRUFBSSxLQUFNLEtBQU1rekQsR0FBbUJsekQsR0FHaEZrbUYsR0FBaUIsU0FBd0JuakUsR0FDM0MsT0FBT0EsR0FHTCxHQUFhLElBQU13RCxnQkFFRyxJQUFmLEtBQ1QsR0FBYTIvRCxJQU9mLElBQUlDLEdBQWEsSUFBVyxTQUFVejNHLEVBQU0rbEcsR0FDMUMsSUFBSTJSLEVBQVcxM0csRUFBSzAzRyxTQUNoQkMsRUFBVzMzRyxFQUFLMjNHLFNBQ2hCQyxFQUFXNTNHLEVBQUt5ckUsUUFDaEIxNkQsRUFBTyt5RixFQUE4QjlqRyxFQUFNLENBQUMsV0FBWSxXQUFZLFlBRXBFMUQsRUFBU3lVLEVBQUt6VSxPQUVkQyxFQUFRODRCLEVBQVMsR0FBSXRrQixFQUFNLENBQzdCMDZELFFBQVMsU0FBaUJoK0MsR0FDeEIsSUFDTW1xRixHQUFVQSxFQUFTbnFGLEdBQ3ZCLE1BQU9vcUYsR0FFUCxNQURBcHFGLEVBQU0yNkIsaUJBQ0F5dkQsRUFHSHBxRixFQUFNbTZCLGtCQUNNLElBQWpCbjZCLEVBQU0wUSxRQUNMN2hDLEdBQXFCLFVBQVhBLEdBdkJqQixTQUF5Qm14QixHQUN2QixTQUFVQSxFQUFNOC9CLFNBQVc5L0IsRUFBTTYvQixRQUFVNy9CLEVBQU0yL0IsU0FBVzMvQixFQUFNNC9CLFVBdUI3RHlxRCxDQUFnQnJxRixLQUViQSxFQUFNMjZCLGlCQUNOdXZELFFBWVIsT0FMRXA3RyxFQUFNbTVDLElBREo4aEUsS0FBbUIsSUFDVHpSLEdBRUEyUixFQUdQLElBQU05dEcsY0FBYyxJQUFLck4sTUFXbEMsSUFBSXc3RyxHQUFPLElBQVcsU0FBVXg1RyxFQUFPd25HLEdBQ3JDLElBQUlpUyxFQUFrQno1RyxFQUFNd2xCLFVBQ3hCQSxPQUFnQyxJQUFwQmkwRixFQUE2QlAsR0FBYU8sRUFDdEQxeEcsRUFBVS9ILEVBQU0rSCxRQUNoQmdyQixFQUFLL3lCLEVBQU0reUIsR0FDWG9tRixFQUFXbjVHLEVBQU1tNUcsU0FDakIzbUcsRUFBTyt5RixFQUE4QnZsRyxFQUFPLENBQUMsWUFBYSxVQUFXLEtBQU0sYUFFL0UsT0FBTyxJQUFNcUwsY0FBYyxHQUFnQit0QyxTQUFVLE1BQU0sU0FBVS9DLEdBQ2xFQSxHQUFxSCxJQUFVLEdBQ2hJLElBQUlrdkMsRUFBVWx2QyxFQUFRa3ZDLFFBQ2xCMXBELEVBQVcsR0FBb0JtOUUsR0FBa0JqbUYsRUFBSXNqQixFQUFReGEsVUFBV3dhLEVBQVF4YSxVQUNoRjg3QixFQUFPOTdCLEVBQVcwcEQsRUFBUWdzQixXQUFXMTFFLEdBQVksR0FFakQ3OUIsRUFBUTg0QixFQUFTLEdBQUl0a0IsRUFBTSxDQUM3Qm1sRCxLQUFNQSxFQUNOeWhELFNBQVUsV0FDUixJQUFJdjlFLEVBQVdtOUUsR0FBa0JqbUYsRUFBSXNqQixFQUFReGEsV0FDaEM5ekIsRUFBVXc5RSxFQUFReDlFLFFBQVV3OUUsRUFBUXhrRixNQUMxQzg2QixNQVdYLE9BTklvOUUsS0FBbUIsR0FDckJqN0csRUFBTW01QyxJQUFNcXdELEdBQWdCMlIsRUFFNUJuN0csRUFBTW03RyxTQUFXQSxFQUdaLElBQU05dEcsY0FBY21hLEVBQVd4bkIsU0FtQnRDMDdHLEdBQW1CLFNBQXdCNWpFLEdBQzdDLE9BQU9BLEdBR0w2akUsR0FBZSxJQUFNcmdFLGdCQUVHLElBQWpCcWdFLEtBQ1RBLEdBQWVELElBaUJIQyxJQUFhLFNBQVVsNEcsRUFBTStsRyxHQUN6QyxJQUFJb1MsRUFBbUJuNEcsRUFBSyxnQkFDeEJvNEcsT0FBbUMsSUFBckJELEVBQThCLE9BQVNBLEVBQ3JERSxFQUF1QnI0RyxFQUFLczRHLGdCQUM1QkEsT0FBMkMsSUFBekJELEVBQWtDLFNBQVdBLEVBQy9ERSxFQUFjdjRHLEVBQUt1NEcsWUFDbkJDLEVBQWdCeDRHLEVBQUs2dkYsVUFDckJsVyxFQUFRMzVFLEVBQUsyNUUsTUFDYjgrQixFQUFlejRHLEVBQUswdEcsU0FDcEJnTCxFQUFlMTRHLEVBQUtvNkIsU0FDcEJycUIsRUFBUy9QLEVBQUsrUCxPQUNkNG9HLEVBQVkzNEcsRUFBSzJKLE1BQ2pCMm5CLEVBQUt0eEIsRUFBS3N4QixHQUNWb21GLEVBQVcxM0csRUFBSzAzRyxTQUNoQjNtRyxFQUFPK3lGLEVBQThCOWpHLEVBQU0sQ0FBQyxlQUFnQixrQkFBbUIsY0FBZSxZQUFhLFFBQVMsV0FBWSxXQUFZLFNBQVUsUUFBUyxLQUFNLGFBRXpLLE9BQU8sSUFBTTRKLGNBQWMsR0FBZ0IrdEMsU0FBVSxNQUFNLFNBQVUvQyxHQUNsRUEsR0FBd0gsSUFBVSxHQUNuSSxJQUFJNHZDLEVBQWtCazBCLEdBQWdCOWpFLEVBQVF4YSxTQUMxQ28xRSxFQUFhLEdBQW9CK0gsR0FBa0JqbUYsRUFBSWt6RCxHQUFrQkEsR0FDekVoNUQsRUFBT2drRixFQUFXbnNCLFNBRWxCdTFCLEVBQWNwdEYsR0FBUUEsRUFBS2xsQixRQUFRLDRCQUE2QixRQUNoRWdYLEVBQVFzN0YsRUFBY2xGLEdBQVVsdkIsRUFBZ0JuQixTQUFVLENBQzVENzNELEtBQU1vdEYsRUFDTmovQixNQUFPQSxFQUNQNXBFLE9BQVFBLElBQ0wsS0FDRDI5RixLQUFjK0ssRUFBZUEsRUFBYW43RixFQUFPa25FLEdBQW1CbG5FLEdBQ3BFdXlFLEVBQVk2ZCxFQTNDcEIsV0FDRSxJQUFLLElBQUk1cUcsRUFBT3RFLFVBQVVoQyxPQUFRcThHLEVBQWEsSUFBSTcxRyxNQUFNRixHQUFPdEIsRUFBTyxFQUFHQSxFQUFPc0IsRUFBTXRCLElBQ3JGcTNHLEVBQVdyM0csR0FBUWhELFVBQVVnRCxHQUcvQixPQUFPcTNHLEVBQVd2MkcsUUFBTyxTQUFVdkksR0FDakMsT0FBT0EsS0FDTjZELEtBQUssS0FvQ3FCazdHLENBQWVOLEVBQWVGLEdBQW1CRSxFQUN4RTd1RyxFQUFRK2pHLEVBQVdyNEUsRUFBUyxHQUFJc2pGLEVBQVcsR0FBSUosR0FBZUksRUFFOURwOEcsRUFBUTg0QixFQUFTLENBQ25CLGVBQWdCcTRFLEdBQVkwSyxHQUFlLEtBQzNDdm9CLFVBQVdBLEVBQ1hsbUYsTUFBT0EsRUFDUDJuQixHQUFJaytFLEdBQ0h6K0YsR0FTSCxPQU5Ja25HLEtBQXFCQyxHQUN2QjM3RyxFQUFNbTVDLElBQU1xd0QsR0FBZ0IyUixFQUU1Qm43RyxFQUFNbTdHLFNBQVdBLEVBR1osSUFBTTl0RyxjQUFjbXVHLEdBQU14N0csUyxPQTlDckMsSSxvQkNwUGUsSUFDSCxFQ0FHLE9BQU04NkMsY0FBYyxNQ094QjBoRSxHQUFZLFlBQ1pDLEdBQVMsU0FDVEMsR0FBVyxXQUNYQyxHQUFVLFVBOEZqQixHQUVKLFNBQVVsRyxHQUdSLFNBQVNtRyxFQUFXNThHLEVBQU9xNEMsR0FDekIsSUFBSTI5RCxFQUVKQSxFQUFRUyxFQUFpQjk0RyxLQUFLb0csS0FBTS9ELEVBQU9xNEMsSUFBWXQwQyxLQUN2RCxJQUdJODRHLEVBREFDLEVBRmN6a0UsTUFFdUIwa0UsV0FBYS84RyxFQUFNZzlHLE1BQVFoOUcsRUFBTTg4RyxPQXVCMUUsT0FyQkE5RyxFQUFNaUgsYUFBZSxLQUVqQmo5RyxFQUFNazlHLEdBQ0pKLEdBQ0ZELEVBQWdCSixHQUNoQnpHLEVBQU1pSCxhQUFlUCxJQUVyQkcsRUFBZ0JGLEdBSWhCRSxFQURFNzhHLEVBQU1tOUcsZUFBaUJuOUcsRUFBTW85RyxhQUNmWixHQUVBQyxHQUlwQnpHLEVBQU1ueEcsTUFBUSxDQUNadXhCLE9BQVF5bUYsR0FFVjdHLEVBQU1xSCxhQUFlLEtBQ2RySCxFQS9CVDFHLEdBQWVzTixFQUFZbkcsR0FrQzNCbUcsRUFBVzkxRix5QkFBMkIsU0FBa0NyakIsRUFBTTY1RyxHQUc1RSxPQUZhNzVHLEVBQUt5NUcsSUFFSkksRUFBVWxuRixTQUFXb21GLEdBQzFCLENBQ0xwbUYsT0FBUXFtRixJQUlMLE1BbUJULElBQUk3VixFQUFTZ1csRUFBV3g5RyxVQXVPeEIsT0FyT0F3bkcsRUFBT2wvQixrQkFBb0IsV0FDekIzakUsS0FBS3c1RyxjQUFhLEVBQU14NUcsS0FBS2s1RyxlQUcvQnJXLEVBQU9wNUIsbUJBQXFCLFNBQTRCZ3dDLEdBQ3RELElBQUlDLEVBQWEsS0FFakIsR0FBSUQsSUFBY3o1RyxLQUFLL0QsTUFBTyxDQUM1QixJQUFJbzJCLEVBQVNyeUIsS0FBS2MsTUFBTXV4QixPQUVwQnJ5QixLQUFLL0QsTUFBTWs5RyxHQUNUOW1GLElBQVdzbUYsSUFBWXRtRixJQUFXdW1GLEtBQ3BDYyxFQUFhZixJQUdYdG1GLElBQVdzbUYsSUFBWXRtRixJQUFXdW1GLEtBQ3BDYyxFQWhMVyxXQXFMakIxNUcsS0FBS3c1RyxjQUFhLEVBQU9FLElBRzNCN1csRUFBTzkyQixxQkFBdUIsV0FDNUIvckUsS0FBSzI1RyxzQkFHUDlXLEVBQU8rVyxZQUFjLFdBQ25CLElBQ0lDLEVBQU1aLEVBQU9GLEVBRGIvakcsRUFBVWhWLEtBQUsvRCxNQUFNK1ksUUFXekIsT0FUQTZrRyxFQUFPWixFQUFRRixFQUFTL2pHLEVBRVQsTUFBWEEsR0FBc0MsaUJBQVpBLElBQzVCNmtHLEVBQU83a0csRUFBUTZrRyxLQUNmWixFQUFRamtHLEVBQVFpa0csTUFFaEJGLE9BQTRCMzZHLElBQW5CNFcsRUFBUStqRyxPQUF1Qi9qRyxFQUFRK2pHLE9BQVNFLEdBR3BELENBQ0xZLEtBQU1BLEVBQ05aLE1BQU9BLEVBQ1BGLE9BQVFBLElBSVpsVyxFQUFPMlcsYUFBZSxTQUFzQk0sRUFBVUosR0FLcEQsUUFKaUIsSUFBYkksSUFDRkEsR0FBVyxHQUdNLE9BQWZKLEVBQXFCLENBRXZCMTVHLEtBQUsyNUcscUJBQ0wsSUFBSWpzRixFQUFPLElBQVN1bkQsWUFBWWoxRSxNQUU1QjA1RyxJQUFlZixHQUNqQjM0RyxLQUFLKzVHLGFBQWFyc0YsRUFBTW9zRixHQUV4Qjk1RyxLQUFLZzZHLFlBQVl0c0YsUUFFVjF0QixLQUFLL0QsTUFBTW05RyxlQUFpQnA1RyxLQUFLYyxNQUFNdXhCLFNBQVdxbUYsSUFDM0QxNEcsS0FBSzIwQyxTQUFTLENBQ1p0aUIsT0FBUW9tRixNQUtkNVYsRUFBT2tYLGFBQWUsU0FBc0Jyc0YsRUFBTW9zRixHQUNoRCxJQUFJdkgsRUFBU3Z5RyxLQUVUaTVHLEVBQVFqNUcsS0FBSy9ELE1BQU1nOUcsTUFDbkJnQixFQUFZajZHLEtBQUtzMEMsUUFBVXQwQyxLQUFLczBDLFFBQVEwa0UsV0FBYWMsRUFDckRJLEVBQVdsNkcsS0FBSzQ1RyxjQUNoQk8sRUFBZUYsRUFBWUMsRUFBU25CLE9BQVNtQixFQUFTakIsT0FHckRhLElBQWFiLEdBQVNwbUYsR0FDekI3eUIsS0FBS282RyxhQUFhLENBQ2hCL25GLE9BQVF1bUYsS0FDUCxXQUNEckcsRUFBT3QyRyxNQUFNbytHLFVBQVUzc0YsT0FLM0IxdEIsS0FBSy9ELE1BQU1xK0csUUFBUTVzRixFQUFNdXNGLEdBQ3pCajZHLEtBQUtvNkcsYUFBYSxDQUNoQi9uRixPQUFRc21GLEtBQ1AsV0FDRHBHLEVBQU90MkcsTUFBTXMrRyxXQUFXN3NGLEVBQU11c0YsR0FFOUIxSCxFQUFPaUksZ0JBQWdCOXNGLEVBQU15c0YsR0FBYyxXQUN6QzVILEVBQU82SCxhQUFhLENBQ2xCL25GLE9BQVF1bUYsS0FDUCxXQUNEckcsRUFBT3QyRyxNQUFNbytHLFVBQVUzc0YsRUFBTXVzRixjQU1yQ3BYLEVBQU9tWCxZQUFjLFNBQXFCdHNGLEdBQ3hDLElBQUkrc0YsRUFBU3o2RyxLQUVUNjVHLEVBQU83NUcsS0FBSy9ELE1BQU00OUcsS0FDbEJLLEVBQVdsNkcsS0FBSzQ1RyxjQUVmQyxJQUFRaG5GLElBU2I3eUIsS0FBSy9ELE1BQU15K0csT0FBT2h0RixHQUNsQjF0QixLQUFLbzZHLGFBQWEsQ0FDaEIvbkYsT0F4UmUsWUF5UmQsV0FDRG9vRixFQUFPeCtHLE1BQU0wK0csVUFBVWp0RixHQUV2QitzRixFQUFPRCxnQkFBZ0I5c0YsRUFBTXdzRixFQUFTTCxNQUFNLFdBQzFDWSxFQUFPTCxhQUFhLENBQ2xCL25GLE9BQVFxbUYsS0FDUCxXQUNEK0IsRUFBT3grRyxNQUFNMitHLFNBQVNsdEYsYUFsQjFCMXRCLEtBQUtvNkcsYUFBYSxDQUNoQi9uRixPQUFRcW1GLEtBQ1AsV0FDRCtCLEVBQU94K0csTUFBTTIrRyxTQUFTbHRGLE9BcUI1Qm0xRSxFQUFPOFcsbUJBQXFCLFdBQ0EsT0FBdEIzNUcsS0FBS3M1RyxlQUNQdDVHLEtBQUtzNUcsYUFBYTlrRixTQUNsQngwQixLQUFLczVHLGFBQWUsT0FJeEJ6VyxFQUFPdVgsYUFBZSxTQUFzQnA1RyxFQUFXd04sR0FJckRBLEVBQVd4TyxLQUFLNjZHLGdCQUFnQnJzRyxHQUNoQ3hPLEtBQUsyMEMsU0FBUzN6QyxFQUFXd04sSUFHM0JxMEYsRUFBT2dZLGdCQUFrQixTQUF5QnJzRyxHQUNoRCxJQUFJc3NHLEVBQVM5NkcsS0FFVCs2RyxHQUFTLEVBY2IsT0FaQS82RyxLQUFLczVHLGFBQWUsU0FBVW5zRixHQUN4QjR0RixJQUNGQSxHQUFTLEVBQ1RELEVBQU94QixhQUFlLEtBQ3RCOXFHLEVBQVMyZSxLQUlibnRCLEtBQUtzNUcsYUFBYTlrRixPQUFTLFdBQ3pCdW1GLEdBQVMsR0FHSi82RyxLQUFLczVHLGNBR2R6VyxFQUFPMlgsZ0JBQWtCLFNBQXlCOXNGLEVBQU0xWSxFQUFTakMsR0FDL0QvUyxLQUFLNjZHLGdCQUFnQjluRyxHQUNyQixJQUFJaW9HLEVBQTBDLE1BQVhobUcsSUFBb0JoVixLQUFLL0QsTUFBTWcvRyxlQUU3RHZ0RixJQUFRc3RGLEdBS1RoN0csS0FBSy9ELE1BQU1nL0csZ0JBQ2JqN0csS0FBSy9ELE1BQU1nL0csZUFBZXZ0RixFQUFNMXRCLEtBQUtzNUcsY0FHeEIsTUFBWHRrRyxHQUNGUixXQUFXeFUsS0FBS3M1RyxhQUFjdGtHLElBVDlCUixXQUFXeFUsS0FBS3M1RyxhQUFjLElBYWxDelcsRUFBT2ovRSxPQUFTLFdBQ2QsSUFBSXlPLEVBQVNyeUIsS0FBS2MsTUFBTXV4QixPQUV4QixHQUFJQSxJQUFXb21GLEdBQ2IsT0FBTyxLQUdULElBQUl6RSxFQUFjaDBHLEtBQUsvRCxNQUNuQnN5QyxFQUFXeWxFLEVBQVl6bEUsU0FDdkIyc0UsRUFBYTFYLEVBQThCd1EsRUFBYSxDQUFDLGFBa0I3RCxVQWZPa0gsRUFBVy9CLFVBQ1grQixFQUFXN0Isb0JBQ1g2QixFQUFXOUIscUJBQ1g4QixFQUFXbkMsY0FDWG1DLEVBQVdqQyxhQUNYaUMsRUFBV3JCLFlBQ1hxQixFQUFXbG1HLGVBQ1hrbUcsRUFBV0Qsc0JBQ1hDLEVBQVdaLGVBQ1hZLEVBQVdYLGtCQUNYVyxFQUFXYixpQkFDWGEsRUFBV1IsY0FDWFEsRUFBV1AsaUJBQ1hPLEVBQVdOLFNBRU0sbUJBQWJyc0UsRUFFVCxPQUFPLElBQU1qbEMsY0FBYzZ4RyxHQUF1Qi9qRSxTQUFVLENBQzFEMThDLE1BQU8sTUFDTjZ6QyxFQUFTbGMsRUFBUTZvRixJQUd0QixJQUFJbjNELEVBQVEsSUFBTXJOLFNBQVNDLEtBQUtwSSxHQUNoQyxPQUNFLElBQU1qbEMsY0FBYzZ4RyxHQUF1Qi9qRSxTQUFVLENBQ25EMThDLE1BQU8sTUFDTixJQUFNZytDLGFBQWFxTCxFQUFPbTNELE1BSTFCckMsRUF0U1QsQ0F1U0UsSUFBTWhpRSxXQWlLUixTQUFTLE1BL0pULEdBQVdwMEIsWUFBYzA0RixHQUN6QixHQUFXbDRGLFVBNEpQLEdBSUosR0FBV04sYUFBZSxDQUN4QncyRixJQUFJLEVBQ0pFLGNBQWMsRUFDZEQsZUFBZSxFQUNmTCxRQUFRLEVBQ1JFLE9BQU8sRUFDUFksTUFBTSxFQUNOUyxRQUFTLEdBQ1RDLFdBQVksR0FDWkYsVUFBVyxHQUNYSyxPQUFRLEdBQ1JDLFVBQVcsR0FDWEMsU0FBVSxJQUVaLEdBQVduQyxVQUFZLEVBQ3ZCLEdBQVdDLE9BQVMsRUFDcEIsR0FBV0MsU0FBVyxFQUN0QixHQUFXQyxRQUFVLEVBQ3JCLEdBQVd3QyxRQUFVLEVBQ04sVUN4a0JBLFNBQVMsR0FBdUI1K0csR0FDN0MsUUFBYSxJQUFUQSxFQUNGLE1BQU0sSUFBSStHLGVBQWUsNkRBRzNCLE9BQU8vRyxFQ0dGLFNBQVM2K0csR0FBZ0I5c0UsRUFBVStzRSxHQUN4QyxJQUlJNzFHLEVBQVN0TCxPQUFPWSxPQUFPLE1BTzNCLE9BTkl3ekMsR0FBVSxXQUFTbHJDLElBQUlrckMsR0FBVSxTQUFVejBDLEdBQzdDLE9BQU9BLEtBQ042RyxTQUFRLFNBQVVvakQsR0FFbkJ0K0MsRUFBT3MrQyxFQUFNL29ELEtBVEYsU0FBZ0Irb0QsR0FDM0IsT0FBT3UzRCxHQUFTLHlCQUFldjNELEdBQVN1M0QsRUFBTXYzRCxHQUFTQSxFQVFuQ3czRCxDQUFPeDNELE1BRXRCdCtDLEVBa0VULFNBQVMrMUcsR0FBUXozRCxFQUFPbHZCLEVBQU01NEIsR0FDNUIsT0FBc0IsTUFBZkEsRUFBTTQ0QixHQUFnQjU0QixFQUFNNDRCLEdBQVFrdkIsRUFBTTluRCxNQUFNNDRCLEdBY2xELFNBQVM0bUYsR0FBb0JySixFQUFXc0osRUFBa0JkLEdBQy9ELElBQUllLEVBQW1CTixHQUFnQmpKLEVBQVU3akUsVUFDN0NBLEVBL0RDLFNBQTRCclQsRUFBTXA3QixHQUl2QyxTQUFTODdHLEVBQWU1Z0gsR0FDdEIsT0FBT0EsS0FBTzhFLEVBQU9BLEVBQUs5RSxHQUFPa2dDLEVBQUtsZ0MsR0FKeENrZ0MsRUFBT0EsR0FBUSxHQUNmcDdCLEVBQU9BLEdBQVEsR0FRZixJQWNJckcsRUFkQW9pSCxFQUFrQjFoSCxPQUFPWSxPQUFPLE1BQ2hDK2dILEVBQWMsR0FFbEIsSUFBSyxJQUFJQyxLQUFXN2dGLEVBQ2Q2Z0YsS0FBV2o4RyxFQUNUZzhHLEVBQVk1L0csU0FDZDIvRyxFQUFnQkUsR0FBV0QsRUFDM0JBLEVBQWMsSUFHaEJBLEVBQVk5OEcsS0FBSys4RyxHQUtyQixJQUFJQyxFQUFlLEdBRW5CLElBQUssSUFBSUMsS0FBV244RyxFQUFNLENBQ3hCLEdBQUkrN0csRUFBZ0JJLEdBQ2xCLElBQUt4aUgsRUFBSSxFQUFHQSxFQUFJb2lILEVBQWdCSSxHQUFTLy9HLE9BQVF6QyxJQUFLLENBQ3BELElBQUl5aUgsRUFBaUJMLEVBQWdCSSxHQUFTeGlILEdBQzlDdWlILEVBQWFILEVBQWdCSSxHQUFTeGlILElBQU1taUgsRUFBZU0sR0FJL0RGLEVBQWFDLEdBQVdMLEVBQWVLLEdBSXpDLElBQUt4aUgsRUFBSSxFQUFHQSxFQUFJcWlILEVBQVk1L0csT0FBUXpDLElBQ2xDdWlILEVBQWFGLEVBQVlyaUgsSUFBTW1pSCxFQUFlRSxFQUFZcmlILElBRzVELE9BQU91aUgsRUFvQlFHLENBQW1CVCxFQUFrQkMsR0FtQ3BELE9BbENBeGhILE9BQU9vRyxLQUFLZ3VDLEdBQVU1dEMsU0FBUSxTQUFVM0YsR0FDdEMsSUFBSStvRCxFQUFReFYsRUFBU3Z6QyxHQUNyQixHQUFLLHlCQUFlK29ELEdBQXBCLENBQ0EsSUFBSXE0RCxFQUFVcGhILEtBQU8wZ0gsRUFDakJXLEVBQVVyaEgsS0FBTzJnSCxFQUNqQlcsRUFBWVosRUFBaUIxZ0gsR0FDN0J1aEgsRUFBWSx5QkFBZUQsS0FBZUEsRUFBVXJnSCxNQUFNazlHLElBRTFEa0QsR0FBYUQsSUFBV0csRUFRaEJGLElBQVdELEdBQVlHLEVBTXhCRixHQUFXRCxHQUFXLHlCQUFlRSxLQUk5Qy90RSxFQUFTdnpDLEdBQU8sdUJBQWErb0QsRUFBTyxDQUNsQzYyRCxTQUFVQSxFQUFTMy9HLEtBQUssS0FBTThvRCxHQUM5Qm8xRCxHQUFJbUQsRUFBVXJnSCxNQUFNazlHLEdBQ3BCVSxLQUFNMkIsR0FBUXozRCxFQUFPLE9BQVFxdUQsR0FDN0I2RyxNQUFPdUMsR0FBUXozRCxFQUFPLFFBQVNxdUQsTUFYakM3akUsRUFBU3Z6QyxHQUFPLHVCQUFhK29ELEVBQU8sQ0FDbENvMUQsSUFBSSxJQVZONXFFLEVBQVN2ekMsR0FBTyx1QkFBYStvRCxFQUFPLENBQ2xDNjJELFNBQVVBLEVBQVMzL0csS0FBSyxLQUFNOG9ELEdBQzlCbzFELElBQUksRUFDSlUsS0FBTTJCLEdBQVF6M0QsRUFBTyxPQUFRcXVELEdBQzdCNkcsTUFBT3VDLEdBQVF6M0QsRUFBTyxRQUFTcXVELFNBb0I5QjdqRSxFQ2pJVCxJQUFJc3ZDLEdBQVMxakYsT0FBTzBqRixRQUFVLFNBQVVwaUYsR0FDdEMsT0FBT3RCLE9BQU9vRyxLQUFLOUUsR0FBSzRILEtBQUksU0FBVTB0QyxHQUNwQyxPQUFPdDFDLEVBQUlzMUMsT0EwQlgsR0FFSixTQUFVMmhFLEdBR1IsU0FBUzhKLEVBQWdCdmdILEVBQU9xNEMsR0FDOUIsSUFBSTI5RCxFQUlBd0ssR0FGSnhLLEVBQVFTLEVBQWlCOTRHLEtBQUtvRyxLQUFNL0QsRUFBT3E0QyxJQUFZdDBDLE1BRTlCeThHLGFBQWF4aEgsS0FBSyxHQUF1QixHQUF1QmczRyxLQVV6RixPQVBBQSxFQUFNbnhHLE1BQVEsQ0FDWnVpRyxhQUFjLENBQ1oyVixZQUFZLEdBRWR5RCxhQUFjQSxFQUNkQyxhQUFhLEdBRVJ6SyxFQWpCVDFHLEdBQWVpUixFQUFpQjlKLEdBb0JoQyxJQUFJN1AsRUFBUzJaLEVBQWdCbmhILFVBb0U3QixPQWxFQXduRyxFQUFPbC9CLGtCQUFvQixXQUN6QjNqRSxLQUFLMjhHLFNBQVUsRUFDZjM4RyxLQUFLMjBDLFNBQVMsQ0FDWjB1RCxhQUFjLENBQ1oyVixZQUFZLE1BS2xCblcsRUFBTzkyQixxQkFBdUIsV0FDNUIvckUsS0FBSzI4RyxTQUFVLEdBR2pCSCxFQUFnQno1Rix5QkFBMkIsU0FBa0NxdkYsRUFBVzF5RyxHQUN0RixJRGNtQ3pELEVBQU8yK0csRUNkdENjLEVBQW1CaDhHLEVBQUs2dUMsU0FDeEJrdUUsRUFBZS84RyxFQUFLKzhHLGFBRXhCLE1BQU8sQ0FDTGx1RSxTQUZnQjd1QyxFQUFLZzlHLGFEWVl6Z0gsRUNWY20yRyxFRFVQd0ksRUNWa0I2QixFRFd2RHBCLEdBQWdCcC9HLEVBQU1zeUMsVUFBVSxTQUFVd1YsR0FDL0MsT0FBTyx1QkFBYUEsRUFBTyxDQUN6QjYyRCxTQUFVQSxFQUFTMy9HLEtBQUssS0FBTThvRCxHQUM5Qm8xRCxJQUFJLEVBQ0pKLE9BQVF5QyxHQUFRejNELEVBQU8sU0FBVTluRCxHQUNqQ2c5RyxNQUFPdUMsR0FBUXozRCxFQUFPLFFBQVM5bkQsR0FDL0I0OUcsS0FBTTJCLEdBQVF6M0QsRUFBTyxPQUFROW5ELFNDakI2Q3cvRyxHQUFvQnJKLEVBQVdzSixFQUFrQmUsR0FDM0hDLGFBQWEsSUFJakI3WixFQUFPNFosYUFBZSxTQUFzQjE0RCxFQUFPcjJCLEdBQ2pELElBQUlrdkYsRUFBc0J2QixHQUFnQnI3RyxLQUFLL0QsTUFBTXN5QyxVQUNqRHdWLEVBQU0vb0QsT0FBTzRoSCxJQUViNzRELEVBQU05bkQsTUFBTTIrRyxVQUNkNzJELEVBQU05bkQsTUFBTTIrRyxTQUFTbHRGLEdBR25CMXRCLEtBQUsyOEcsU0FDUDM4RyxLQUFLMjBDLFVBQVMsU0FBVTd6QyxHQUN0QixJQUFJeXRDLEVBQVd4WixFQUFTLEdBQUlqMEIsRUFBTXl0QyxVQUdsQyxjQURPQSxFQUFTd1YsRUFBTS9vRCxLQUNmLENBQ0x1ekMsU0FBVUEsUUFNbEJzMEQsRUFBT2ovRSxPQUFTLFdBQ2QsSUFBSW93RixFQUFjaDBHLEtBQUsvRCxNQUNuQjQ2QyxFQUFZbTlELEVBQVl2d0YsVUFDeEJvNUYsRUFBZTdJLEVBQVk2SSxhQUMzQjVnSCxFQUFRdW5HLEVBQThCd1EsRUFBYSxDQUFDLFlBQWEsaUJBRWpFM1EsRUFBZXJqRyxLQUFLYyxNQUFNdWlHLGFBQzFCOTBELEVBQVdzdkMsR0FBTzc5RSxLQUFLYyxNQUFNeXRDLFVBQVVsckMsSUFBSXc1RyxHQUsvQyxjQUpPNWdILEVBQU04OEcsY0FDTjk4RyxFQUFNZzlHLGFBQ05oOUcsRUFBTTQ5RyxLQUVLLE9BQWRoakUsRUFDSyxJQUFNdnRDLGNBQWM2eEcsR0FBdUIvakUsU0FBVSxDQUMxRDE4QyxNQUFPMm9HLEdBQ045MEQsR0FHRSxJQUFNamxDLGNBQWM2eEcsR0FBdUIvakUsU0FBVSxDQUMxRDE4QyxNQUFPMm9HLEdBQ04sSUFBTS81RixjQUFjdXRDLEVBQVc1NkMsRUFBT3N5QyxLQUdwQ2l1RSxFQXpGVCxDQTBGRSxJQUFNM2xFLFdBRVIsR0FBZ0I1ekIsVUF5RFosR0FDSixHQUFnQk4sYUE5S0csQ0FDakJjLFVBQVcsTUFDWG81RixhQUFjLFNBQXNCOTRELEdBQ2xDLE9BQU9BLElBNEtJLFVDckxYaTBDLEdBQVcsQ0FDYjhrQixTQUFVLFdBQ1ZDLFVBQVcsWUFDWEMsV0FBWSxhQUNaQyxZQUFhLGNBQ2JDLGFBQWMsZUFDZEMsY0FBZSxpQkFFYkMsR0FBTyxDQUNUQyxLQUFNLE9BQ05yMUUsUUFBUyxVQUNUczFFLFFBQVMsVUFDVDEwRixNQUFPLFFBQ1AyMEYsUUFBUyxXQUVQQyxHQUFTLENBQ1hDLEtBQU0sRUFDTkMsTUFBTyxFQUNQQyxVQUFXLEVBQ1hDLGFBQWMsRUFDZEMsVUFBVyxHQUVUQyxHQUFPLGFBQ1BDLEdBQWUsV0FFbkIsU0FBU0MsR0FBYWw2RyxHQUNwQixNQUFzQixpQkFBUkEsSUFBcUJrVixNQUFNbFYsSUFBUUEsRUFBTSxFQUV6RCxTQUFTbTZHLEdBQWF4aUgsR0FDcEIsT0FBT3RCLE9BQU9vRyxLQUFLOUUsR0FBSzRILEtBQUksU0FBVXJJLEdBQ3BDLE9BQU9TLEVBQUlULE1BR2YsSUFBSWtqSCxLQUFpQyxvQkFBWDU0RyxTQUEwQkEsT0FBT0MsV0FBWUQsT0FBT0MsU0FBUytELGVBZ0J2RixJQWRzQnJGLEdBY2xCazZHLEtBZGtCbDZHLEdBY1UsU0FBVWhJLEVBQU9vOEUsRUFBVUMsR0FDekQsSUFBSXpqRCxFQUFPNTRCLEVBQU1vOEUsR0FFakIsT0FBYSxJQUFUeGpELEdBQW1CbXBGLEdBQWFucEYsR0FJN0IsS0FIRSxJQUFJMTJCLE1BQU1tNkUsRUFBZ0IsV0FBYUQsRUFBVyx3REFBMER4akQsRUFBTyxhQWpCekg2akQsV0FBYSxTQUFVejhFLEVBQU9vOEUsRUFBVUMsR0FHekMsUUFBb0IsSUFGVHI4RSxFQUFNbzhFLEdBR2YsT0FBTyxJQUFJbDZFLE1BQU0sWUFBY2s2RSxFQUFXLHFDQUF1Q0MsRUFBZ0IsaUNBR25HcjBFLEdBQUdoSSxFQUFPbzhFLEVBQVVDLElBR2ZyMEUsSUFhTG02RyxHQUFlLENBQ2pCOTNHLEtBQU0sSUFBSTIzQyxJQUNWcG9DLEdBQUksU0FBWXNYLEVBQU8zZSxHQUdyQixPQUZBeE8sS0FBS3NHLEtBQUtzdkIsSUFBSXpJLElBQVVudEIsS0FBS3NHLEtBQUs0YSxJQUFJaU0sRUFBTyxJQUM3Q250QixLQUFLc0csS0FBS2hNLElBQUk2eUIsR0FBT251QixLQUFLd1AsR0FDbkJ4TyxNQUVUZ1csSUFBSyxTQUFhbVgsR0FFaEIsT0FEQW50QixLQUFLc0csS0FBSysrQyxPQUFPbDRCLEdBQ1ZudEIsTUFXVG1XLEtBQU0sU0FBY2dYLEdBQ2xCLElBQUssSUFBSTNxQixFQUFPdEUsVUFBVWhDLE9BQVFzUCxFQUFPLElBQUk5SSxNQUFNRixFQUFPLEVBQUlBLEVBQU8sRUFBSSxHQUFJdEIsRUFBTyxFQUFHQSxFQUFPc0IsRUFBTXRCLElBQ2xHc0ssRUFBS3RLLEVBQU8sR0FBS2hELFVBQVVnRCxHQUc3QmxCLEtBQUtzRyxLQUFLc3ZCLElBQUl6SSxJQUFVbnRCLEtBQUtzRyxLQUFLaE0sSUFBSTZ5QixHQUFPeHNCLFNBQVEsU0FBVTZOLEdBQzdELE9BQU9nRyxZQUFXLFdBQ2hCaEcsRUFBU2hOLFdBQU0sRUFBUWdLLEtBQ3RCLFFBS1QsU0FBUzZ5RyxHQUFjMytHLEdBQ3JCLElBQUl1NUcsRUFBUXY1RyxFQUFLdTVHLE1BQ2JZLEVBQU9uNkcsRUFBS202RyxLQUNaeUUsRUFBZ0I1K0csRUFBSzA1QixTQUNyQkEsT0FBNkIsSUFBbEJrbEYsRUFBMkIsSUFBTUEsRUFDNUNDLEVBQXNCNytHLEVBQUs4K0csZUFDM0JBLE9BQXlDLElBQXhCRCxHQUF5Q0EsRUFDOUQsT0FBTyxTQUFtQnRnSCxHQUN4QixJQU9Jd2dILEVBQWVDLEVBUGZud0UsRUFBV3R3QyxFQUFNc3dDLFNBQ2pCaWhELEVBQVd2eEYsRUFBTXV4RixTQUNqQm12QixFQUF3QjFnSCxFQUFNMGdILHNCQUM5QjFpSCxFQUFRdW5HLEVBQThCdmxHLEVBQU8sQ0FBQyxXQUFZLFdBQVksMEJBRXRFMmdILEVBQWlCSixFQUFpQnZGLEVBQVEsS0FBT3pwQixFQUFXeXBCLEVBQzVENEYsRUFBZ0JMLEVBQWlCM0UsRUFBTyxLQUFPcnFCLEVBQVdxcUIsRUFHMURuM0csTUFBTW1CLFFBQVF1MUIsSUFBaUMsSUFBcEJBLEVBQVNsOUIsUUFDdEN1aUgsRUFBZ0JybEYsRUFBUyxHQUN6QnNsRixFQUFldGxGLEVBQVMsSUFFeEJxbEYsRUFBZ0JDLEVBQWV0bEYsRUFvQmpDLE9BQU8sSUFBTTl2QixjQUFjLEdBQVl5ckIsRUFBUyxHQUFJOTRCLEVBQU8sQ0FDekQrWSxRQUFTMnBHLEVBQXdCLEVBQUksQ0FDbkMxRixNQUFPd0YsRUFDUDVFLEtBQU02RSxHQUVScEUsUUF0QlksU0FBaUI1c0YsR0FDN0JBLEVBQUtveEYsVUFBVTkwRixJQUFJNDBGLEdBQ25CbHhGLEVBQUtya0IsTUFBTTAxRyxrQkFBb0IsV0FDL0JyeEYsRUFBS3JrQixNQUFNMjFHLGtCQUFvQyxLQUFoQlAsRUFBd0IsS0FvQnZEcEUsVUFqQmMsU0FBbUIzc0YsR0FDakNBLEVBQUtveEYsVUFBVTkwRyxPQUFPNDBHLEdBQ3RCbHhGLEVBQUtya0IsTUFBTWEsUUFBVSxJQWdCckJ3d0csT0FBUWlFLEVBQXdCYixHQWJyQixTQUFnQnB3RixHQUMzQkEsRUFBS294RixVQUFVOTBGLElBQUk2MEYsR0FDbkJueEYsRUFBS3JrQixNQUFNMDFHLGtCQUFvQixXQUMvQnJ4RixFQUFLcmtCLE1BQU0yMUcsa0JBQW1DLEtBQWZOLEVBQXVCLE9BV3BEbndFLElBSVIsU0FBUzB3RSxHQUFZdi9HLEdBQ25CLElBQUl3L0csRUFBS0MsRUFFTGhtRixFQUFRejVCLEVBQUt5NUIsTUFDYmltRixFQUFZMS9HLEVBQUswL0csVUFDakJDLEVBQWEzL0csRUFBSzIvRyxXQUNsQi8vRyxFQUFPSSxFQUFLSixLQUNaZ2dILEVBQU81L0csRUFBSzQvRyxLQUNaL3ZCLEVBQVk3dkYsRUFBSzZ2RixVQUNqQmd3QixFQUFZNy9HLEVBQUsySixNQUNqQm0yRyxFQUFxQjkvRyxFQUFLOC9HLG1CQUMxQkMsRUFBVy8vRyxFQUFLKy9HLFNBQ2hCQyxFQUFNaGdILEVBQUtnZ0gsSUFFWHIyRyxFQUFRMHJCLEVBQVMsR0FBSXdxRixFQUFXLENBQ2xDUCxrQkFBbUI3bEYsRUFBUSxLQUMzQndtRixtQkFBb0JQLEVBQVksVUFBWSxTQUM1Q3ZyRCxRQUFTeXJELEVBQU8sRUFBSSxFQUNwQjd4RixVQUFXK3hGLEVBQXFCLFVBQVlDLEVBQVcsSUFBTSxPQUczRGw3RixFQUFhLEtBQUd3NUYsR0FBZSxpQkFBa0J5QixFQUFxQnpCLEdBQWUsNkJBQStCQSxHQUFlLDJCQUE0QkEsR0FBZSxtQkFBcUJ6K0csSUFBTzQvRyxFQUFNLElBQVFuQixHQUFlLHVCQUF5QjJCLEVBQUtSLEdBQU0zdkIsR0FDM1Fxd0IsSUFBa0JULEVBQWtCLElBQW9CSyxHQUFzQkMsR0FBWSxFQUFJLGtCQUFvQixrQkFBb0JELEdBQXNCQyxFQUFXLEVBQUksS0FBT0osRUFBWUYsR0FDbE0sT0FBTyxJQUFNNzFHLGNBQWMsTUFBT3lyQixFQUFTLENBQ3pDdzZELFVBQVdockUsRUFDWGxiLE1BQU9BLEdBQ051MkcsSUFzREwsU0FBU0MsR0FBS2gvRyxHQUNaLE9BQU9BLEVBQUVxdUQsZUFBaUJydUQsRUFBRXF1RCxjQUFjaHpELFFBQVUsRUFBSTJFLEVBQUVxdUQsY0FBYyxHQUFHdkIsUUFBVTlzRCxFQUFFOHNELFFBcER6RnN4RCxHQUFZaDhGLFVBQVksQ0FJdEJrVyxNQUFPZ2xGLEdBQWF6bEMsV0FLcEIwbUMsVUFBVyxJQUFVeG1DLEtBQUtGLFdBSzFCMm1DLFdBQVksSUFBVXRwRSxLQUFLMmlDLFdBSzNCZ25DLElBQUssSUFBVTltQyxLQUFLRixXQUtwQnA1RSxLQUFNLElBQVVrWSxPQUtoQjhuRyxLQUFNLElBQVUxbUMsS0FLaEIyVyxVQUFXLElBQVVwVyxVQUFVLENBQUMsSUFBVTNoRSxPQUFRLElBQVVyYyxTQUs1RHNrSCxTQUFVLElBQVV4bUQsT0FLcEJ1bUQsbUJBQW9CLElBQVU1bUMsTUFFaENxbUMsR0FBWXQ4RixhQUFlLENBQ3pCcmpCLEtBQU04OUcsR0FBS0csUUFDWCtCLE1BQU0sR0FXUixJQUFJUSxHQUF3QjVCLElBQWEsa0JBQWtCbnhHLEtBQUszSCxVQUFVNEgsV0FFdEUsR0FFSixTQUFVZ2xHLEdBR1IsU0FBUytOLElBR1AsSUFGQSxJQUFJOU4sRUFFS3p2RyxFQUFPdEUsVUFBVWhDLE9BQVFzUCxFQUFPLElBQUk5SSxNQUFNRixHQUFPdEIsRUFBTyxFQUFHQSxFQUFPc0IsRUFBTXRCLElBQy9Fc0ssRUFBS3RLLEdBQVFoRCxVQUFVZ0QsR0F5SHpCLE9BdEhBK3dHLEVBQVFELEVBQVdwNEcsS0FBSzRILE1BQU13d0csRUFBWSxDQUFDaHlHLE1BQU1tSCxPQUFPcUUsS0FBVXhMLE1BQzVEYyxNQUFRLENBQ1pzK0csV0FBVyxFQUNYVCx1QkFBdUIsR0FFekIxTSxFQUFNK04sS0FBTyxDQUNYQyxpQkFBaUIsRUFDakJDLFNBQVMsR0FFWGpPLEVBQU1rTyxLQUFPLENBQ1g1bkcsTUFBTyxFQUNQZ0UsRUFBRyxFQUNIQyxFQUFHLEVBQ0g4eUMsT0FBUSxFQUNSOHdELGdCQUFpQixHQUVuQm5PLEVBQU1vTyxhQUFlLEtBQ3JCcE8sRUFBTTc4RCxJQUFNLEtBRVo2OEQsRUFBTXFPLFdBQWEsV0FDYnJPLEVBQU1oMkcsTUFBTXNrSCxXQUNkdE8sRUFBTXQ5RCxTQUFTLENBQ2J5cUUsV0FBVyxLQUtqQm5OLEVBQU11TyxVQUFZLFdBQ1p2TyxFQUFNaDJHLE1BQU1za0gsV0FDZHRPLEVBQU10OUQsU0FBUyxDQUNieXFFLFdBQVcsS0FLakJuTixFQUFNd08sWUFBYyxTQUFVNS9HLEdBQzVCb3hHLEVBQU0rTixLQUFLQyxpQkFBa0IsRUFDN0JoTyxFQUFNK04sS0FBS0UsU0FBVSxFQUNyQmpPLEVBQU1vTyxhQUFlcE8sRUFBTTc4RCxJQUFJc3JFLHdCQUMvQnpPLEVBQU03OEQsSUFBSS9yQyxNQUFNNDVDLFdBQWEsR0FDN0JndkQsRUFBTWtPLEtBQUs1bkcsTUFBUTA1RixFQUFNa08sS0FBSzVqRyxFQUFJc2pHLEdBQUtoL0csRUFBRXNrRCxhQUN6QzhzRCxFQUFNa08sS0FBS0MsZ0JBQWtCbk8sRUFBTTc4RCxJQUFJdXJFLGFBQWUxTyxFQUFNaDJHLE1BQU0ya0gsaUJBQW1CLE1BR3ZGM08sRUFBTTRPLFdBQWEsU0FBVWhnSCxHQUN2Qm94RyxFQUFNK04sS0FBS0UsVUFDVGpPLEVBQU1ueEcsTUFBTXMrRyxXQUNkbk4sRUFBTXFPLGFBR1JyTyxFQUFNa08sS0FBSzVqRyxFQUFJc2pHLEdBQUtoL0csR0FDcEJveEcsRUFBTWtPLEtBQUs3d0QsT0FBUzJpRCxFQUFNa08sS0FBSzVqRyxFQUFJMDFGLEVBQU1rTyxLQUFLNW5HLE1BQzlDMDVGLEVBQU1rTyxLQUFLM2pHLEVBdEVuQixTQUFjM2IsR0FDWixPQUFPQSxFQUFFcXVELGVBQWlCcnVELEVBQUVxdUQsY0FBY2h6RCxRQUFVLEVBQUkyRSxFQUFFcXVELGNBQWMsR0FBR3RCLFFBQVUvc0QsRUFBRStzRCxRQXFFbEVrekQsQ0FBS2pnSCxHQUVwQm94RyxFQUFNa08sS0FBSzVuRyxRQUFVMDVGLEVBQU1rTyxLQUFLNWpHLElBQU0wMUYsRUFBTStOLEtBQUtDLGlCQUFrQixHQUNuRWhPLEVBQU03OEQsSUFBSS9yQyxNQUFNb2tCLFVBQVksY0FBZ0J3a0YsRUFBTWtPLEtBQUs3d0QsT0FBUyxNQUNoRTJpRCxFQUFNNzhELElBQUkvckMsTUFBTXdxRCxRQUFVLEVBQUk1MkQsS0FBS21vRixJQUFJNnNCLEVBQU1rTyxLQUFLN3dELE9BQVMyaUQsRUFBTWtPLEtBQUtDLG1CQUkxRW5PLEVBQU04TyxVQUFZLFNBQVVsZ0gsR0FDMUIsR0FBSW94RyxFQUFNK04sS0FBS0UsUUFBUyxDQUd0QixHQUZBak8sRUFBTStOLEtBQUtFLFNBQVUsRUFFakJqakgsS0FBS21vRixJQUFJNnNCLEVBQU1rTyxLQUFLN3dELFFBQVUyaUQsRUFBTWtPLEtBQUtDLGdCQUszQyxZQUpBbk8sRUFBTXQ5RCxTQUFTLENBQ2JncUUsdUJBQXVCLEdBQ3RCMU0sRUFBTWgyRyxNQUFNb2pILFlBS2pCcE4sRUFBTTc4RCxJQUFJL3JDLE1BQU00NUMsV0FBYSwrQkFDN0JndkQsRUFBTTc4RCxJQUFJL3JDLE1BQU1va0IsVUFBWSxnQkFDNUJ3a0YsRUFBTTc4RCxJQUFJL3JDLE1BQU13cUQsUUFBVSxJQUk5Qm8rQyxFQUFNK08sb0JBQXNCLFdBQzFCLEdBQUkvTyxFQUFNb08sYUFBYyxDQUN0QixJQUFJWSxFQUFxQmhQLEVBQU1vTyxhQUMzQi90QyxFQUFNMnVDLEVBQW1CM3VDLElBQ3pCNHVDLEVBQVNELEVBQW1CQyxPQUM1Qjl1QyxFQUFPNnVDLEVBQW1CN3VDLEtBQzFCK3VDLEVBQVFGLEVBQW1CRSxNQUUzQmxQLEVBQU1oMkcsTUFBTW1sSCxjQUFnQm5QLEVBQU1rTyxLQUFLNWpHLEdBQUs2MUQsR0FBUTYvQixFQUFNa08sS0FBSzVqRyxHQUFLNGtHLEdBQVNsUCxFQUFNa08sS0FBSzNqRyxHQUFLODFELEdBQU8yL0IsRUFBTWtPLEtBQUszakcsR0FBSzBrRyxFQUN0SGpQLEVBQU1xTyxhQUVOck8sRUFBTXVPLGNBS1p2TyxFQUFNb1Asb0JBQXNCLFdBQzFCLEdBQUl2QixHQUNGN04sRUFBTWgyRyxNQUFNMitHLGVBRGQsQ0FNQSxJQUFJdHNELEVBQVMyakQsRUFBTTc4RCxJQUFJa3NFLGFBQ25CajRHLEVBQVE0b0csRUFBTTc4RCxJQUFJL3JDLE1BQ3RCNnRFLHVCQUFzQixXQUNwQjd0RSxFQUFNazRHLFVBQVksVUFDbEJsNEcsRUFBTWlsRCxPQUFTQSxFQUFTLEtBQ3hCamxELEVBQU00NUMsV0FBYSxZQUNuQmkwQix1QkFBc0IsV0FDcEI3dEUsRUFBTWlsRCxPQUFTLEVBQ2ZqbEQsRUFBTW00RyxRQUFVLEVBQ2hCbjRHLEVBQU1vNEcsT0FBUyxLQUVqQmp0RyxZQUFXLFdBQ1QsT0FBT3k5RixFQUFNaDJHLE1BQU0yK0csYUFDbEIsVUFJQTNJLEVBL0hUMUcsR0FBZXdVLEVBQU8vTixHQWtJdEIsSUFBSW5QLEVBQVNrZCxFQUFNMWtILFVBbUpuQixPQWpKQXduRyxFQUFPbC9CLGtCQUFvQixXQUN6QjNqRSxLQUFLL0QsTUFBTTZ3QixPQUFPOXNCLEtBQUsvRCxNQUFNc3lDLFNBQVN0eUMsT0FFbEMrRCxLQUFLL0QsTUFBTTBnRyxXQUNiMzhGLEtBQUswaEgsaUJBSUgxaEgsS0FBSy9ELE1BQU0wbEgsa0JBQ2IzaEgsS0FBSzRoSCxtQkFJVC9lLEVBQU9wNUIsbUJBQXFCLFNBQTRCZ3dDLEdBQ2xEQSxFQUFVOWMsWUFBYzM4RixLQUFLL0QsTUFBTTBnRyxZQUNqQzM4RixLQUFLL0QsTUFBTTBnRyxVQUNiMzhGLEtBQUswaEgsaUJBRUwxaEgsS0FBSzZoSCxvQkFJTHBJLEVBQVVrSSxtQkFBcUIzaEgsS0FBSy9ELE1BQU0wbEgsbUJBQ3hDM2hILEtBQUsvRCxNQUFNMGxILGlCQUNiM2hILEtBQUs0aEgsa0JBRUw1aEgsS0FBSzhoSCxzQkFLWGpmLEVBQU85MkIscUJBQXVCLFdBQzVCL3JFLEtBQUsvRCxNQUFNMndCLFFBQVE1c0IsS0FBSy9ELE1BQU1zeUMsU0FBU3R5QyxPQUVuQytELEtBQUsvRCxNQUFNMGdHLFdBQ2IzOEYsS0FBSzZoSCxtQkFHSDdoSCxLQUFLL0QsTUFBTTBsSCxrQkFDYjNoSCxLQUFLOGhILHFCQUlUamYsRUFBTytlLGdCQUFrQixXQUN2QnQ4RyxPQUFPNG5CLGlCQUFpQixRQUFTbHRCLEtBQUt3Z0gsV0FDdENsN0csT0FBTzRuQixpQkFBaUIsT0FBUWx0QixLQUFLc2dILGFBR3ZDemQsRUFBT2lmLGtCQUFvQixXQUN6Qng4RyxPQUFPK25CLG9CQUFvQixRQUFTcnRCLEtBQUt3Z0gsV0FDekNsN0csT0FBTytuQixvQkFBb0IsT0FBUXJ0QixLQUFLc2dILGFBRzFDemQsRUFBTzZlLGVBQWlCLFdBQ3RCbjhHLFNBQVMybkIsaUJBQWlCLFlBQWFsdEIsS0FBSzZnSCxZQUM1Q3Q3RyxTQUFTMm5CLGlCQUFpQixVQUFXbHRCLEtBQUsrZ0gsV0FDMUN4N0csU0FBUzJuQixpQkFBaUIsWUFBYWx0QixLQUFLNmdILFlBQzVDdDdHLFNBQVMybkIsaUJBQWlCLFdBQVlsdEIsS0FBSytnSCxZQUc3Q2xlLEVBQU9nZixpQkFBbUIsV0FDeEJ0OEcsU0FBUzhuQixvQkFBb0IsWUFBYXJ0QixLQUFLNmdILFlBQy9DdDdHLFNBQVM4bkIsb0JBQW9CLFVBQVdydEIsS0FBSytnSCxXQUM3Q3g3RyxTQUFTOG5CLG9CQUFvQixZQUFhcnRCLEtBQUs2Z0gsWUFDL0N0N0csU0FBUzhuQixvQkFBb0IsV0FBWXJ0QixLQUFLK2dILFlBR2hEbGUsRUFBT2ovRSxPQUFTLFdBQ2QsSUFBSXM3RixFQUNBM00sRUFBU3Z5RyxLQUVUZzBHLEVBQWNoMEcsS0FBSy9ELE1BQ25COGxILEVBQWMvTixFQUFZK04sWUFDMUJ4ekUsRUFBV3lsRSxFQUFZemxFLFNBQ3ZCZ3lFLEVBQVl2TSxFQUFZdU0sVUFDeEJhLEVBQWVwTixFQUFZb04sYUFDM0JqMkMsRUFBVTZvQyxFQUFZN29DLFFBQ3RCNjJDLEVBQWVoTyxFQUFZZ08sYUFDM0IxaUgsRUFBTzAwRyxFQUFZMTBHLEtBQ25CMmlILEVBQWtCak8sRUFBWWlPLGdCQUM5QjVDLEVBQWFyTCxFQUFZcUwsV0FDekJ4RyxFQUFhN0UsRUFBWS93RCxXQUN6QnVzQyxFQUFXd2tCLEVBQVl4a0IsU0FDdkJELEVBQVl5a0IsRUFBWXprQixVQUN4QjJ5QixFQUFnQmxPLEVBQVlrTyxjQUM1QkMsRUFBb0JuTyxFQUFZbU8sa0JBQ2hDQyxFQUFnQnBPLEVBQVlvTyxjQUM1QkMsRUFBV3JPLEVBQVlxTyxTQUN2Qm5qQixFQUFPOFUsRUFBWTlVLEtBQ25CdWdCLEVBQVd6TCxFQUFZeUwsU0FDdkJDLEVBQU0xTCxFQUFZMEwsSUFDbEI0QyxFQUFhLENBQ2YveUIsVUFBVyxLQUFHd3VCLEdBQWUsVUFBV0EsR0FBZSxZQUFjeitHLEdBQU80L0csRUFBTSxHQUFJQSxFQUFJbkIsR0FBZSxnQkFBa0IyQixFQUFLUixHQUFNM3ZCLElBR3BJZ3hCLEdBQWFhLElBQ2ZrQixFQUFXQyxhQUFldmlILEtBQUtzZ0gsV0FDL0JnQyxFQUFXRSxhQUFleGlILEtBQUt3Z0gsV0FJN0J3QixJQUNGTSxFQUFXbjNDLFFBQVUsU0FBVXRxRSxHQUM3QnNxRSxHQUFXQSxFQUFRdHFFLEdBQ25CMHhHLEVBQU95TixLQUFLQyxpQkFBbUJaLE1BSW5DLElBQUlHLEVBQXFCajVCLFdBQVdrNUIsS0FBY0EsRUFDbEQsT0FBTyxJQUFNbjJHLGNBQWN1dkcsRUFBWSxDQUNyQ00sR0FBSW41RyxLQUFLL0QsTUFBTWs5RyxHQUNmSixRQUFRLEVBQ1I2QixTQUFVNTZHLEtBQUtxaEgsb0JBQ2Y3eEIsU0FBVUEsRUFDVm12QixzQkFBdUIzK0csS0FBS2MsTUFBTTY5Ryx1QkFDakMsSUFBTXIxRyxjQUFjLE1BQU95ckIsRUFBUyxDQUNyQ28yQyxRQUFTQSxHQUNSbTNDLEVBQVksQ0FDYmx0RSxJQUFLLFNBQWExMUMsR0FDaEIsT0FBTzZ5RyxFQUFPbjlELElBQU0xMUMsR0FFdEIraUgsWUFBYXppSCxLQUFLeWdILFlBQ2xCaUMsYUFBYzFpSCxLQUFLeWdILFlBQ25Ca0MsVUFBVzNpSCxLQUFLZ2hILG9CQUNoQjRCLFdBQVk1aUgsS0FBS2doSCxzQkFDZixJQUFNMTNHLGNBQWMsTUFBT3lyQixFQUFTLEdBQUkvMEIsS0FBSy9ELE1BQU1rOUcsSUFBTSxDQUMzRGphLEtBQU1BLEdBQ0wsQ0FDRDNQLFVBQVcsS0FBR3d1QixHQUFlLGVBQWdCbUUsS0FDM0MzekUsR0FBV3d6RSxHQUFlQSxHQUFjeEIsR0FBYWYsSUFBdUIsSUFBTWwyRyxjQUFjMjFHLEdBQWFscUYsRUFBUyxHQUFJc3RGLElBQWE3QyxFQUFxQixDQUM5SnhrSCxJQUFLLE1BQVFxbkgsR0FDWCxHQUFJLENBQ04zQyxJQUFLQSxFQUNMdm1GLE1BQU9vbkYsRUFDUG5CLFVBQVdwL0csS0FBS2MsTUFBTXMrRyxVQUN0QkMsV0FBWUEsRUFDWkMsS0FBTTJDLEVBQ04zaUgsS0FBTUEsRUFDTitKLE1BQU8rNEcsRUFDUDd5QixVQUFXNHlCLEVBQ1gzQyxtQkFBb0JBLEVBQ3BCQyxTQUFVQSxRQUlQTSxFQXRSVCxDQXVSRSxhQTBDRixTQUFTOEMsR0FBWW5qSCxHQUNuQixJQUFJMi9HLEVBQWEzL0csRUFBSzIvRyxXQUNsQi8vRyxFQUFPSSxFQUFLSixLQUNad2pILEVBQVlwakgsRUFBS29qSCxVQUNyQixPQUFPLElBQU14NUcsY0FBYyxTQUFVLENBQ25DaW1GLFVBQVd3dUIsR0FBZSxrQkFBb0JBLEdBQWUsbUJBQXFCeitHLEVBQ2xGQSxLQUFNLFNBQ042ckUsUUFBUyxTQUFpQnRxRSxHQUN4QkEsRUFBRWtuRCxrQkFDRnMzRCxFQUFXeCtHLElBRWIsYUFBY2lpSCxHQUNiLEtBcERMLEdBQU03L0YsVUFBWSxDQUNoQjgrRixZQUFhLElBQVU1b0MsVUFBVSxDQUFDLElBQVV6ckQsS0FBTSxJQUFVa3JELE9BQU9GLFdBQ25FNm5DLFVBQVdwQyxHQUFhemxDLFdBQ3hCbnFDLFNBQVUsSUFBVTdnQixLQUFLZ3JELFdBQ3pCMm1DLFdBQVksSUFBVXRwRSxLQUFLMmlDLFdBQzNCOFcsU0FBVSxJQUFVdFcsTUFBTStrQyxHQUFham1CLEtBQVd0ZixXQUNsRDBvQyxhQUFjLElBQVV4b0MsS0FBS0YsV0FDN0JpcEMsaUJBQWtCLElBQVUvb0MsS0FBS0YsV0FDakNzcEMsYUFBYyxJQUFVcHBDLEtBQUtGLFdBQzdCejFCLFdBQVksSUFBVWxOLEtBQUsyaUMsV0FDM0JnbkMsSUFBSyxJQUFVOW1DLEtBQUtGLFdBQ3BCdXBDLGdCQUFpQixJQUFVcnBDLEtBQUtGLFdBQ2hDaWtCLFVBQVcsSUFBVS9qQixLQUFLRixXQUMxQmtvQyxpQkFBa0IsSUFBVTNuRCxPQUFPeWYsV0FDbkN5Z0MsR0FBSSxJQUFVdmdDLEtBQ2RnaUMsU0FBVSxJQUFVN2tFLEtBQ3BCanBCLE9BQVEsSUFBVWlwQixLQUNsQm5wQixRQUFTLElBQVVtcEIsS0FDbkJ6MkMsS0FBTSxJQUFVNDVFLE1BQU0ra0MsR0FBYWIsS0FDbkM3dEIsVUFBVyxJQUFVcFcsVUFBVSxDQUFDLElBQVUzaEUsT0FBUSxJQUFVcmMsU0FDNUQrbUgsY0FBZSxJQUFVL29DLFVBQVUsQ0FBQyxJQUFVM2hFLE9BQVEsSUFBVXJjLFNBQ2hFZ25ILGtCQUFtQixJQUFVaHBDLFVBQVUsQ0FBQyxJQUFVM2hFLE9BQVEsSUFBVXJjLFNBQ3BFaW5ILGNBQWUsSUFBVWpuSCxPQUN6QnNrSCxTQUFVLElBQVV4bUQsT0FDcEJvcEQsU0FBVSxJQUFVbHBDLFVBQVUsQ0FBQyxJQUFVM2hFLE9BQVEsSUFBVXloRCxTQUMzRDZwRCxVQUFXLElBQVV0ckcsT0FDckJ1ckcsWUFBYSxJQUFVNXBDLFVBQVUsQ0FBQyxJQUFVM2hFLE9BQVEsSUFBVXloRCxTQUM5RGltQyxLQUFNLElBQVUxbkYsUUFFbEIsR0FBTW1MLGFBQWUsQ0FDbkJyakIsS0FBTTg5RyxHQUFLRyxRQUNYcEUsSUFBSSxFQUNKcnNGLE9BQVFneEYsR0FDUmx4RixRQUFTa3hGLEdBQ1R2dUIsVUFBVyxLQUNYMnlCLGNBQWUsS0FDZkMsa0JBQW1CLEtBQ25CRSxTQUFVLE1Ba0JaUSxHQUFZNS9GLFVBQVksQ0FDdEJvOEYsV0FBWSxJQUFVdHBFLEtBQ3RCaXRFLFdBQVksSUFBVXhyRyxRQUV4QnFyRyxHQUFZbGdHLGFBQWUsQ0FDekJtZ0csVUFBVyxTQUdiLElBQUlHLEdBQVM1RSxHQUFjLENBQ3pCcEYsTUFBTzhFLEdBQWUsaUJBQ3RCbEUsS0FBTWtFLEdBQWUsZ0JBQ3JCUyxnQkFBZ0IsSUFZZDBFLElBVlE3RSxHQUFjLENBQ3hCcEYsTUFBTzhFLEdBQWUsZ0JBQ3RCbEUsS0FBTWtFLEdBQWUsZUFDckIza0YsU0FBVSxDQUFDLElBQUssS0FDaEJvbEYsZ0JBQWdCLElBRVBILEdBQWMsQ0FDdkJwRixNQUFPOEUsR0FBZSxlQUN0QmxFLEtBQU1rRSxHQUFlLGdCQUVaTSxHQUFjLENBQ3ZCcEYsTUFBTzhFLEdBQWUsZUFDdEJsRSxLQUFNa0UsR0FBZSxpQkFHbkIsR0FFSixTQUFVL0wsR0FHUixTQUFTbVIsSUFHUCxJQUZBLElBQUlsUixFQUVLenZHLEVBQU90RSxVQUFVaEMsT0FBUXNQLEVBQU8sSUFBSTlJLE1BQU1GLEdBQU90QixFQUFPLEVBQUdBLEVBQU9zQixFQUFNdEIsSUFDL0VzSyxFQUFLdEssR0FBUWhELFVBQVVnRCxHQWN6QixPQVhBK3dHLEVBQVFELEVBQVdwNEcsS0FBSzRILE1BQU13d0csRUFBWSxDQUFDaHlHLE1BQU1tSCxPQUFPcUUsS0FBVXhMLE1BQzVEYyxNQUFRLENBQ1pzaUgsTUFBTyxJQUVUblIsRUFBTW9SLFNBQVcsRUFDakJwUixFQUFNcVIsV0FBYSxHQUVuQnJSLEVBQU1zUixjQUFnQixTQUFVOTZHLEdBQzlCLE9BQTBDLElBQW5Dd3BHLEVBQU1ueEcsTUFBTXNpSCxNQUFNbGtILFFBQVF1SixJQUc1QndwRyxFQXBCVDFHLEdBQWU0WCxFQUFnQm5SLEdBdUIvQixJQUFJblAsRUFBU3NnQixFQUFlOW5ILFVBb041QixPQWxOQXduRyxFQUFPbC9CLGtCQUFvQixXQUN6QixJQUFJNHVDLEVBQVN2eUcsS0FFYm8rRyxHQUFhdm9HLEdBQUcybkcsR0FBT0MsTUFBTSxTQUFVajNHLEVBQVM4QixHQUM5QyxPQUFPaXFHLEVBQU9pUixXQUFXaDlHLEVBQVM4QixNQUNqQ3VOLEdBQUcybkcsR0FBT0UsT0FBTyxTQUFVajFHLEdBQzVCLE9BQWEsTUFBTkEsRUFBYThwRyxFQUFPcFAsUUFBVW9QLEVBQU9rUixZQUFZaDdHLE1BQ3ZEME4sS0FBS3FuRyxHQUFPRyxVQUFXMzlHLE9BRzVCNmlHLEVBQU85MkIscUJBQXVCLFdBQzVCcXlDLEdBQWFqb0csS0FBS3FuRyxHQUFPSSxhQUFjNTlHLE9BR3pDNmlHLEVBQU80Z0IsWUFBYyxTQUFxQmg3RyxHQUN4Q3pJLEtBQUsyMEMsU0FBUyxDQUNaeXVFLE1BQU9wakgsS0FBS2MsTUFBTXNpSCxNQUFNcGhILFFBQU8sU0FBVTBrQixHQUN2QyxPQUFPQSxJQUFNamUsTUFFZHpJLEtBQUswakgsaUJBR1Y3Z0IsRUFBTzZnQixlQUFpQixXQUN0QnRGLEdBQWFqb0csS0FBS3FuRyxHQUFPSyxVQUFXNzlHLEtBQUtjLE1BQU1zaUgsTUFBTWxuSCxTQUd2RDJtRyxFQUFPOGdCLGdCQUFrQixTQUF5QkMsRUFBWUMsRUFBU3ZrSCxHQUNyRSxJQUFJbTdHLEVBQVN6NkcsS0FFVCtoSCxFQUFjL2hILEtBQUsvRCxNQUFNOGxILFlBUTdCLE9BTkkseUJBQWU2QixLQUE4QixJQUFmQSxFQUNoQzdCLEVBQWM2QixHQUNVLElBQWZBLElBQ1Q3QixFQUFjL2hILEtBQUsvRCxNQUFNOGxILGFBQWlELGtCQUEzQi9oSCxLQUFLL0QsTUFBTThsSCxZQUE0Qi9oSCxLQUFLL0QsTUFBTThsSCxZQUFjLElBQU16NEcsY0FBY3U1RyxHQUFhLFFBRzNILElBQWhCZCxHQUFnQyx1QkFBYUEsRUFBYSxDQUMvRDFDLFdBQVksV0FDVixPQUFPNUUsRUFBT2dKLFlBQVlJLElBRTVCdmtILEtBQU1BLEtBSVZ1akcsRUFBT2loQixrQkFBb0IsU0FBMkJDLEdBQ3BELE9BQTBCLElBQW5CQSxHQUE0Qi9GLEdBQWErRixHQUFrQkEsRUFBaUIvakgsS0FBSy9ELE1BQU1za0gsV0FHaEcxZCxFQUFPbWhCLGNBQWdCLFNBQXVCeDlHLEdBQzVDLE9BQU8seUJBQWVBLElBQStCLGlCQUFaQSxHQUEyQyxpQkFBWkEsR0FBMkMsbUJBQVpBLEdBR3pHcThGLEVBQU9vaEIsZUFBaUIsU0FBd0JwdkYsR0FDOUMsTUFBb0IsaUJBQVRBLEVBQ0ZBLEVBQ1csT0FBVEEsR0FBaUMsaUJBQVRBLEdBQXFCLGFBQWNBLEVBQzdEQSxFQUFLMTNCLFdBR1AsTUFHVDBsRyxFQUFPcWhCLGtCQUFvQixTQUEyQnhrSCxHQUVwRCxPQURrQkEsRUFBS3FqSCxjQUNBL2lILEtBQUsvRCxNQUFNOG1ILGFBR3BDbGdCLEVBQU8yZ0IsV0FBYSxTQUFvQmg5RyxFQUFTdkksR0FDL0MsSUFBSTY4RyxFQUFTOTZHLEtBRVRtNUIsRUFBUWw3QixFQUFNazdCLE1BQ2Q3d0IsRUFBVWs3RixFQUE4QnZsRyxFQUFPLENBQUMsVUFFcEQsSUFBSytCLEtBQUtna0gsY0FBY3g5RyxHQUN0QixNQUFNLElBQUlySSxNQUFNLHVGQUF5RnFJLEdBRzNHLElBQUlxOUcsRUFBVXY3RyxFQUFRdTdHLFFBQ2xCeEIsRUFBVy81RyxFQUFRKzVHLFNBR3ZCLEtBQUlyaUgsS0FBSy9ELE1BQU1rb0gsdUJBQXlCbmtILEtBQUtra0gsa0JBQWtCNTdHLElBQVl0SSxLQUFLdWpILGNBQWNNLElBQXdCLE1BQVp4QixHQUExRyxDQUlBLElBQUloRCxFQUFhLFdBQ2YsT0FBT3ZFLEVBQU8ySSxZQUFZSSxJQUd4Qk8sRUFBZSxDQUNqQjM3RyxHQUFJbzdHLEVBRUo3b0gsSUFBS3NOLEVBQVF0TixLQUFPZ0YsS0FBS3FqSCxXQUN6Qi9qSCxLQUFNZ0osRUFBUWhKLEtBQ2QrL0csV0FBWUEsRUFDWmdELFNBQVUvNUcsRUFBUSs1RyxTQUNsQjNDLElBQUsxL0csS0FBSy9ELE1BQU15akgsSUFDaEJsd0IsU0FBVWxuRixFQUFRa25GLFVBQVl4dkYsS0FBSy9ELE1BQU11ekYsU0FDekN2c0MsV0FBWTM2QyxFQUFRMjZDLFlBQWNqakQsS0FBSy9ELE1BQU1nbkQsV0FDN0Nzc0MsVUFBV3Z2RixLQUFLaWtILGVBQWUzN0csRUFBUWluRixXQUFhdnZGLEtBQUsvRCxNQUFNb29ILGdCQUMvRG5DLGNBQWVsaUgsS0FBS2lrSCxlQUFlMzdHLEVBQVE0NUcsZUFBaUJsaUgsS0FBSy9ELE1BQU1pbUgsZUFDdkUvMkMsUUFBUzdpRSxFQUFRNmlFLFNBQVduckUsS0FBSy9ELE1BQU1rdkUsUUFDdkM0MkMsWUFBYS9oSCxLQUFLMmpILGdCQUFnQnI3RyxFQUFReTVHLFlBQWE4QixFQUFTdjdHLEVBQVFoSixNQUN4RThoSCxhQUE4QyxrQkFBekI5NEcsRUFBUTg0RyxhQUE2Qjk0RyxFQUFRODRHLGFBQWVwaEgsS0FBSy9ELE1BQU1tbEgsYUFDNUZPLGlCQUFzRCxrQkFBN0JyNUcsRUFBUXE1RyxpQkFBaUNyNUcsRUFBUXE1RyxpQkFBbUIzaEgsS0FBSy9ELE1BQU0wbEgsaUJBQ3hHaGxCLFVBQXdDLGtCQUF0QnIwRixFQUFRcTBGLFVBQTBCcjBGLEVBQVFxMEYsVUFBWTM4RixLQUFLL0QsTUFBTTBnRyxVQUNuRmlrQixpQkFBc0QsaUJBQTdCdDRHLEVBQVFzNEcsa0JBQWtDNW5HLE1BQU0xUSxFQUFRczRHLGtCQUErQzVnSCxLQUFLL0QsTUFBTTJrSCxpQkFBdEN0NEcsRUFBUXM0RyxpQkFDN0dvQixhQUE4QyxrQkFBekIxNUcsRUFBUTA1RyxhQUE2QjE1RyxFQUFRMDVHLGFBQWVoaUgsS0FBSy9ELE1BQU0rbEgsYUFDNUZHLGtCQUFtQm5pSCxLQUFLaWtILGVBQWUzN0csRUFBUTY1RyxtQkFBcUJuaUgsS0FBSy9ELE1BQU1rbUgsbUJBQy9FQyxjQUFlcGlILEtBQUsvRCxNQUFNbW1ILGNBQzFCN0IsVUFBV3ZnSCxLQUFLOGpILGtCQUFrQng3RyxFQUFRaTRHLFdBQzFDMEIsZ0JBQW9ELGtCQUE1QjM1RyxFQUFRMjVHLGdCQUFnQzM1RyxFQUFRMjVHLGdCQUFrQmppSCxLQUFLL0QsTUFBTWdtSCxnQkFDckd4QyxTQUFVbDVCLFdBQVdqK0UsRUFBUW0zRyxVQUM3QnZnQixLQUE4QixpQkFBakI1MkYsRUFBUTQyRixLQUFvQjUyRixFQUFRNDJGLEtBQU9sL0YsS0FBSy9ELE1BQU1pakcsTUFFM0MsbUJBQW5CNTJGLEVBQVF3a0IsU0FBMEJzM0YsRUFBYXQzRixPQUFTeGtCLEVBQVF3a0IsUUFDNUMsbUJBQXBCeGtCLEVBQVFza0IsVUFBMkJ3M0YsRUFBYXgzRixRQUFVdGtCLEVBQVFza0IsU0FFckUseUJBQWVwbUIsSUFBb0MsaUJBQWpCQSxFQUFRbEgsTUFBNkMsaUJBQWpCa0gsRUFBUWxILEtBQ2hGa0gsRUFBVSx1QkFBYUEsRUFBUyxDQUM5QjY0RyxXQUFZQSxJQUVjLG1CQUFaNzRHLElBQ2hCQSxFQUFVQSxFQUFRLENBQ2hCNjRHLFdBQVlBLEtBSVpyQixHQUFhN2tGLEdBQ2Yza0IsWUFBVyxXQUNUc21HLEVBQU93SixZQUFZRixFQUFjNTlHLEVBQVM4QixFQUFRaThHLGdCQUNqRHByRixHQUVIbjVCLEtBQUtza0gsWUFBWUYsRUFBYzU5RyxFQUFTOEIsRUFBUWk4RyxnQkFJcEQxaEIsRUFBT3loQixZQUFjLFNBQXFCaDhHLEVBQVM5QixFQUFTKzlHLEdBQzFELElBQUlDLEVBRUEvN0csRUFBS0gsRUFBUUcsR0FDYjQ1RyxFQUFXLzVHLEVBQVErNUcsU0FDdkJyaUgsS0FBS3NqSCxXQUFhdnVGLEVBQVMsR0FBSS8wQixLQUFLc2pILGFBQWFrQixFQUFZLElBQWMvN0csR0FBTSxDQUMvRUgsUUFBU0EsRUFDVDlCLFFBQVNBLEVBQ1RncEYsU0FBVWxuRixFQUFRa25GLFVBQ2pCZzFCLElBQ0h4a0gsS0FBSzIwQyxTQUFTLENBQ1p5dUUsT0FBUWYsRUFBVyxHQUFHbDdHLE9BQU9uSCxLQUFLYyxNQUFNc2lILE9BQVMsR0FBR2o4RyxPQUFPbkgsS0FBS2MsTUFBTXNpSCxNQUFPLENBQUMzNkcsS0FBTXpHLFFBQU8sU0FBVXlHLEdBQ25HLE9BQU9BLElBQU84N0csTUFFZnZrSCxLQUFLMGpILGlCQUdWN2dCLEVBQU9NLE1BQVEsV0FDYm5qRyxLQUFLMjBDLFNBQVMsQ0FDWnl1RSxNQUFPLE1BSVh2Z0IsRUFBTzRoQixZQUFjLFdBQ25CLElBQUlDLEVBQVMxa0gsS0FFVDJrSCxFQUFnQixHQUNoQjNRLEVBQWNoMEcsS0FBSy9ELE1BQ25Cc3pGLEVBQVl5a0IsRUFBWXprQixVQUN4QmxtRixFQUFRMnFHLEVBQVkzcUcsTUFxQnhCLE9BcEJrQjJxRyxFQUFZNFEsWUFDQ3pxSCxPQUFPb0csS0FBS1AsS0FBS3NqSCxZQUFZNWpDLFVBQVl2bEYsT0FBT29HLEtBQUtQLEtBQUtzakgsYUFFOUUzaUgsU0FBUSxTQUFVa2pILEdBQzNCLElBQUlnQixFQUF3QkgsRUFBT3BCLFdBQVdPLEdBQzFDcjBCLEVBQVdxMUIsRUFBc0JyMUIsU0FDakNsbkYsRUFBVXU4RyxFQUFzQnY4RyxRQUNoQzlCLEVBQVVxK0csRUFBc0JyK0csUUFDcENtK0csRUFBY24xQixLQUFjbTFCLEVBQWNuMUIsR0FBWSxLQUVOLElBQTVDazFCLEVBQU81akgsTUFBTXNpSCxNQUFNbGtILFFBQVFvSixFQUFRRyxJQUNyQ2s4RyxFQUFjbjFCLEdBQVV4d0YsS0FBSyxJQUFNc0ssY0FBYyxHQUFPeXJCLEVBQVMsR0FBSXpzQixFQUFTLENBQzVFdzhHLGlCQUFrQkosRUFBTzVqSCxNQUFNZ2tILGlCQUMvQjlwSCxJQUFLLFNBQVdzTixFQUFRdE4sTUFDdEJ3TCxLQUVKbStHLEVBQWNuMUIsR0FBVXh3RixLQUFLLGFBQ3RCMGxILEVBQU9wQixXQUFXTyxPQUd0QjFwSCxPQUFPb0csS0FBS29rSCxHQUFldGhILEtBQUksU0FBVW1zRixHQUM5QyxJQUFJMHZCLEVBRUE2RixFQUFvRCxJQUFuQ0osRUFBY24xQixHQUFVdHpGLFFBQStDLE9BQS9CeW9ILEVBQWNuMUIsR0FBVSxHQUNqRnZ6RixFQUFRLENBQ1ZzekYsVUFBVyxLQUFHd3VCLEdBQWUsb0JBQXFCQSxHQUFlLHNCQUF3QnZ1QixHQUFXMHZCLEVBQU0sR0FBSUEsRUFBSW5CLEdBQWUsMEJBQTRCMkcsRUFBT3pvSCxNQUFNeWpILElBQUtSLEdBQU13RixFQUFPVCxlQUFlMTBCLElBQzNNbG1GLE1BQU8wN0csRUFBaUJod0YsRUFBUyxHQUFJMXJCLEVBQU8sQ0FDMUMyN0csY0FBZSxTQUNaandGLEVBQVMsR0FBSTFyQixJQUVwQixPQUFPLElBQU1DLGNBQWMsR0FBaUJ5ckIsRUFBUyxHQUFJOTRCLEVBQU8sQ0FDOURqQixJQUFLLGFBQWV3MEYsSUFDbEJtMUIsRUFBY24xQixRQUl0QnFULEVBQU9qL0UsT0FBUyxXQUNkLE9BQU8sSUFBTXRhLGNBQWMsTUFBTyxDQUNoQ2ltRixVQUFXLEdBQUt3dUIsSUFDZi85RyxLQUFLeWtILGdCQUdIdEIsRUE1T1QsQ0E2T0UsYUFFRixHQUFlbGdHLFVBQVksQ0FJekJ1c0UsU0FBVSxJQUFVdFcsTUFBTStrQyxHQUFham1CLEtBS3ZDdW9CLFVBQVdwQyxHQUtYNEQsWUFBYSxJQUFVNW9DLFVBQVUsQ0FBQyxJQUFVenJELEtBQU0sSUFBVWtyRCxPQUs1RHFwQyxnQkFBaUIsSUFBVXJwQyxLQUszQndvQyxhQUFjLElBQVV4b0MsS0FLeEJvcEMsYUFBYyxJQUFVcHBDLEtBS3hCZ3NDLFlBQWEsSUFBVWhzQyxLQUt2QjJXLFVBQVcsSUFBVXBXLFVBQVUsQ0FBQyxJQUFVM2hFLE9BQVEsSUFBVXJjLFNBSzVEa08sTUFBTyxJQUFVbE8sT0FLakJrcEgsZUFBZ0IsSUFBVWxyQyxVQUFVLENBQUMsSUFBVTNoRSxPQUFRLElBQVVyYyxTQUtqRSttSCxjQUFlLElBQVUvb0MsVUFBVSxDQUFDLElBQVUzaEUsT0FBUSxJQUFVcmMsU0FLaEVnbkgsa0JBQW1CLElBQVVocEMsVUFBVSxDQUFDLElBQVUzaEUsT0FBUSxJQUFVcmMsU0FLcEVpbkgsY0FBZSxJQUFVam5ILE9BS3pCOG5ELFdBQVksSUFBVWxOLEtBS3RCMnBFLElBQUssSUFBVTltQyxLQUtmK2pCLFVBQVcsSUFBVS9qQixLQUtyQmdvQyxpQkFBa0IsSUFBVTNuRCxPQUs1QjBvRCxpQkFBa0IsSUFBVS9vQyxLQUs1QnVyQyxxQkFBc0IsSUFBVXZyQyxLQUtoQ21xQyxZQUFhLElBQVU1cEMsVUFBVSxDQUFDLElBQVUzaEUsT0FBUSxJQUFVeWhELFNBSzlEaW1DLEtBQU0sSUFBVTFuRixPQUtoQjJ6RCxRQUFTLElBQVVwMUIsTUFFckIsR0FBZXB6QixhQUFlLENBQzVCNnNFLFNBQVV3SSxHQUFTK2tCLFVBQ25COTVELFdBQVlnZ0UsR0FDWnZELEtBQUssRUFDTGEsVUFBVyxJQUNYMEIsaUJBQWlCLEVBQ2pCRixZQUFhLElBQU16NEcsY0FBY3U1RyxHQUFhLE1BQzlDekIsY0FBYyxFQUNkTyxrQkFBa0IsRUFDbEJLLGNBQWMsRUFDZDRDLGFBQWEsRUFDYmpvQixXQUFXLEVBQ1hpa0IsaUJBQWtCLEdBQ2xCcnhCLFVBQVcsS0FDWGxtRixNQUFPLEtBQ1BnN0csZUFBZ0IsS0FDaEJuQyxjQUFlLEtBQ2ZDLGtCQUFtQixLQUNuQkMsY0FBZSxLQUNmbGpCLEtBQU0sU0FHUixJQUFJK2xCLEdBQWEsSUFBSWhuRSxJQUNqQmluRSxHQUFpQixLQUNqQkMsR0FBbUIsS0FDbkJDLEdBQWtCLEdBQ2xCendHLEdBQVEsR0FDUjZpQyxJQUFPLEVBS1gsU0FBUzZ0RSxLQUNQLE9BQU9KLEdBQVdqekcsS0FBTyxFQWlCM0IsU0FBU3N6RyxHQUFTekIsRUFBU25rSCxHQUN6QixJQUNJNmxILEVBWk4sU0FBc0J4QyxHQUNwQixPQUFLc0MsS0FDQXRDLEVBQ0VrQyxHQUFXM3FILElBQUl5b0gsR0FER2tDLEdBQVczcUgsSUFBSTRxSCxJQURILEtBV3JCTSxDQURFOWxILEVBQUtxakgsYUFFdkIsSUFBS3dDLEVBQVcsT0FBTyxLQUN2QixJQUFJbkMsRUFBUW1DLEVBQVVqQyxXQUFXTyxHQUNqQyxZQUFxQixJQUFWVCxFQUE4QixLQUNsQ0EsRUFPVCxTQUFTcUMsR0FBYW45RyxFQUFTaEosR0FDN0IsT0FBT3kxQixFQUFTLEdBQUl6c0IsRUFBUyxDQUMzQmhKLEtBQU1BLEVBQ051a0gsUUFBUzZCLEdBQVdwOUcsS0FReEIsU0FBU3E5RyxLQUNQLE9BQVExb0gsS0FBS0MsU0FBU0MsU0FBUyxJQUFNbzdCLEtBQUsrQyxNQUFNbitCLFNBQVMsS0FBS2tULE9BQU8sRUFBRyxJQU8xRSxTQUFTcTFHLEdBQVdwOUcsR0FDbEIsT0FBSUEsSUFBdUMsaUJBQXBCQSxFQUFRdTdHLFNBQW1ELGlCQUFwQnY3RyxFQUFRdTdHLFVBQXlCN3FHLE1BQU0xUSxFQUFRdTdHLFVBQ3BHdjdHLEVBQVF1N0csUUFHVjhCLEtBUVQsU0FBU0MsR0FBY3AvRyxFQUFTOEIsR0FrQjlCLE9BakJJKzhHLEtBQ0ZqSCxHQUFham9HLEtBQUtxbkcsR0FBT0MsS0FBTWozRyxFQUFTOEIsSUFFeENxTSxHQUFNM1YsS0FBSyxDQUNUSyxPQUFRbStHLEdBQU9DLEtBQ2ZqM0csUUFBU0EsRUFDVDhCLFFBQVNBLElBR1BrdkMsSUFBUTBtRSxLQUNWMW1FLElBQU8sRUFDUDJ0RSxHQUFtQjUvRyxTQUFTK0QsY0FBYyxPQUMxQy9ELFNBQVM4NEIsS0FBSzEwQixZQUFZdzdHLElBQzFCLGlCQUFPLElBQU03N0csY0FBYyxHQUFnQjg3RyxJQUFrQkQsTUFJMUQ3OEcsRUFBUXU3RyxRQUdqQixJQUFJLEdBQVEsU0FBZXI5RyxFQUFTOEIsR0FDbEMsT0FBT3M5RyxHQUFjcC9HLEVBQVNpL0csR0FBYW45RyxFQUFTQSxHQUFXQSxFQUFRaEosTUFBUTg5RyxHQUFLRyxXQU9sRnNJLEdBQVEsU0FBZWxySCxHQUNyQnlpSCxHQUFLemlILEtBQU95aUgsR0FBS0csVUFDbkIsR0FBTUgsR0FBS3ppSCxHQUFHMGQsZUFBaUIsU0FBVTdSLEVBQVM4QixHQUNoRCxPQUFPczlHLEdBQWNwL0csRUFBU2kvRyxHQUFhbjlHLEVBQVNBLEdBQVdBLEVBQVFoSixNQUFRODlHLEdBQUt6aUgsUUFLMUYsSUFBSyxJQUFJQSxNQUFLeWlILEdBQ1p5SSxHQUFNbHJILElBT1IsR0FBTXEzRixLQUFPLEdBQU1KLFFBS25CLEdBQU1rMEIsUUFBVSxTQUFVcjlHLEdBS3hCLFlBSlcsSUFBUEEsSUFDRkEsRUFBSyxNQUdBNDhHLE1BQTJCakgsR0FBYWpvRyxLQUFLcW5HLEdBQU9FLE1BQU9qMUcsSUFPcEUsR0FBTTJrRyxTQUFXLFNBQVUza0csR0FDekIsSUFBSTg2RyxHQUFnQixFQVVwQixPQVJJMEIsR0FBV2p6RyxLQUFPLEdBQ3BCaXpHLEdBQVd0a0gsU0FBUSxTQUFVNGtILEdBQ3ZCQSxFQUFVaEMsY0FBYzk2RyxLQUMxQjg2RyxHQUFnQixNQUtmQSxHQUdULEdBQU0zNEcsT0FBUyxTQUFVaTVHLEVBQVN2N0csUUFDaEIsSUFBWkEsSUFDRkEsRUFBVSxJQUtaa00sWUFBVyxXQUNULElBQUk0dUcsRUFBUWtDLEdBQVN6QixFQUFTdjdHLEdBRTlCLEdBQUk4NkcsRUFBTyxDQUNULElBQUkyQyxFQUFhM0MsRUFBTTk2RyxRQUNuQjA5RyxFQUFhNUMsRUFBTTU4RyxRQUVuQnkvRyxFQUFjbHhGLEVBQVMsR0FBSWd4RixFQUFZLEdBQUl6OUcsRUFBUyxDQUN0RHU3RyxRQUFTdjdHLEVBQVF1N0csU0FBV0EsSUFHekJ2N0csRUFBUXU3RyxTQUFXdjdHLEVBQVF1N0csVUFBWUEsRUFHMUNvQyxFQUFZMUIsYUFBZVYsRUFGM0JvQyxFQUFZNUQsU0FBV3NELEtBS3pCLElBQUluL0csT0FBd0MsSUFBdkJ5L0csRUFBWXJpRyxPQUF5QnFpRyxFQUFZcmlHLE9BQVNvaUcsU0FDeEVDLEVBQVlyaUcsT0FDbkJnaUcsR0FBY3AvRyxFQUFTeS9HLE1BRXhCLElBT0wsR0FBTS81RyxLQUFPLFNBQVV6RCxHQUNyQixHQUFNbUMsT0FBT25DLEVBQUksQ0FDZmczRyxTQUFVLEtBUWQsR0FBTXlHLFNBQVcsU0FBVTEzRyxHQUNELG1CQUFiQSxHQUNUNHZHLEdBQWF2b0csR0FBRzJuRyxHQUFPSyxVQUFXcnZHLElBUXRDLEdBQU0yM0csVUFBWSxTQUFVdHpGLEdBQzFCMmtCLElBQU8sRUFDUDR0RSxHQUFrQnZ5RixHQUdwQixHQUFNbWxFLFNBQVdBLEdBQ2pCLEdBQU1vbEIsS0FBT0EsR0FNYmdCLEdBQWF2b0csR0FBRzJuRyxHQUFPRyxXQUFXLFNBQVV5SSxHQUMxQ2xCLEdBQWlCa0IsRUFBa0JucUgsTUFBTThtSCxhQUFlcUQsRUFDeERuQixHQUFXL2pHLElBQUlna0csR0FBZ0JrQixHQUMvQnp4RyxHQUFNaFUsU0FBUSxTQUFVNEYsR0FDdEI2M0csR0FBYWpvRyxLQUFLNVAsRUFBS2xILE9BQVFrSCxFQUFLQyxRQUFTRCxFQUFLK0IsWUFFcERxTSxHQUFRLE1BQ1BrQixHQUFHMm5HLEdBQU9JLGNBQWMsU0FBVXdJLEdBQy9CQSxFQUFtQm5CLEdBQVc1L0QsT0FBTytnRSxFQUFrQm5xSCxNQUFNOG1ILGFBQWVxRCxHQUF3Qm5CLEdBQVc5aEIsUUFFM0YsSUFBcEI4aEIsR0FBV2p6RyxNQUNib3NHLEdBQWFwb0csSUFBSXduRyxHQUFPQyxNQUFNem5HLElBQUl3bkcsR0FBT0UsT0FHdkNRLElBQWFpSCxJQUNmNS9HLFNBQVM4NEIsS0FBSy96QixZQUFZNjZHLE8sV0MvckNmLE9BQTBCLGNDQTVCa0IsR0FBUyxTQUFDcnJILEdBRW5CLE9BQU9zckIsYUFBYVYsUUFBUTVxQixJLG9CQ3VGakJzckgsRyxZQS9FWCxXQUFZcnFILEdBQU8sMEJBRWYsNEJBQU1BLEtBQ0Q2RSxNQUFRLENBQ1R5bEgsU0FBVSxJQUpDLEUsaUVBU2Z2bUgsS0FBSzIwQyxTQUFTLENBQ1Y0eEUsU0FBVSxDQUNOLENBQUUsS0FBUSxPQUFRLE1BQVMsU0FDM0IsQ0FBRSxLQUFRLFVBQVcsTUFBUyxXQUM5QixDQUFFLEtBQVEsV0FBWSxNQUFTLGlCLCtCQU12QyxPQUNJLHlCQUFNaDNCLFVBQVUsb0JBQ1osNkJBQ0ksa0JBQUMsR0FBRCxDQUNJQyxTQUFTLGFBQ1Qrd0IsVUFBVyxJQUNYMEIsaUJBQWUsRUFDZjJDLGFBQVcsRUFDWDVDLGNBQVksRUFDWnRDLEtBQUssRUFDTDhHLHlCQUF1QixFQUN2QjdwQixXQUFXLEVBQ1h5a0IsY0FBWSxFQUNabitELFdBQVlpZ0UsTUFHcEIsNkJBQ0ksNkJBQ0ksd0JBQUkzekIsVUFBVSxNQUFNOW1GLEdBQUcsT0FDbkIsd0JBQUk4bUYsVUFBVSxpQkFDVixrQkFBQ2tvQixHQUFELENBQU1sb0IsVUFBVSxXQUFXditELEdBQUcsU0FDMUIseUJBQ0F0UCxJQUFLK2tHLEdBQ0xoK0csR0FBRyxzQkFLWCx3QkFBSThtRixVQUFVLHNCQUNWLGtCQUFDa29CLEdBQUQsQ0FBTWxvQixVQUFVLFdBQVd2K0QsR0FBRyxTQUMxQiwwQkFBTXZvQixHQUFHLGFBQVQsbUJBS0o0OUcsSUFBUXh6RixLQUFPbHZCLE9BQ1Qsd0JBQUk0ckYsVUFBVSxZQUNaLGtCQUFDa29CLEdBQUQsQ0FBTWxvQixVQUFVLFdBQVd2K0QsR0FBRyxXQUE5QixZQUVGLHdCQUFJdStELFVBQVUsWUFDWixrQkFBQ2tvQixHQUFELENBQU1sb0IsVUFBVSxXQUFXditELEdBQUcsWUFDMUIsdUJBQUd1K0QsVUFBVSxpQkFBaUJtM0IsY0FBWSxjQVd0RSw2QkFDSzFtSCxLQUFLL0QsTUFBTXN5QyxlLEdBekVYc0ksYSx1RkNUZmtxQyxHQUFRNGxDLEVBQVEsS0FJaEJDLEdBQWEsR0FBSCxPQUFNL3pGLEtBQU9wdkIsV0FBYixZQUEyQm92QixLQUFPbnZCLGFBRTVDbWpILEdBQU8saUNBQUcsV0FBZXQwRixFQUFRckIsR0FBdkIsZ0NBQUFydUIsRUFBQSw2REFBNkJxRSxFQUE3QiwrQkFBa0MsR0FFeEN3b0IsRUFBUTIyRixHQUFPeHpGLEtBQU9sdkIsUUFHdEJtakgsRUFBWSxJQUNSdjBGLE9BQVNBLEVBQ25CdTBGLEVBQVU1MUYsSUFBTUEsRUFDaEI0MUYsRUFBVTFrQyxRQUFVd2tDLEdBQ3BCRSxFQUFVbDFGLFFBQVYsUUFDR2lCLEtBQU9sdkIsTUFBUytyQixHQUVMLFFBQVg2QyxJQUNEdTBGLEVBQVU1L0csS0FBT0EsR0FiUCxrQkFnQkw2NUUsR0FBTStsQyxJQWhCRCwyQ0FBSCx3REFxQkFDLEdBQVMsU0FBQyxHQUFELElBQUVodUQsRUFBRixFQUFFQSxNQUFPNWxDLEVBQVQsRUFBU0EsU0FBVW41QixFQUFuQixFQUFtQkEsS0FBbkIsT0FBNkI2c0gsR0FBUSxPQUFRLFVBQVcsQ0FBQzl0RCxRQUFPNWxDLFdBQVVuNUIsVUFDbkZndEgsR0FBUyxTQUFDLEdBQUQsSUFBRWp1RCxFQUFGLEVBQUVBLE1BQU81bEMsRUFBVCxFQUFTQSxTQUFULE9BQXVCMHpGLEdBQVEsT0FBUSxVQUFXLENBQUM5dEQsUUFBTzVsQyxjQzFCbkU4ekYsR0FBVyxTQUFVNTBGLEVBQVFsa0IsR0FDdEMsSUFBTSs0RyxFQUFXLENBQ2IxM0IsU0FBVSxZQUNWK3dCLFVBQVcsSUFDWDBCLGlCQUFpQixFQUNqQkQsY0FBYyxFQUNkWixjQUFjLEVBQ2R6a0IsV0FBVyxHQUdmLE1BQWUsWUFBWHRxRSxFQUNPK3dGLEdBQU0rRCxRQUFRaDVHLEVBQUsrNEcsR0FDUixTQUFYNzBGLEVBQ0Erd0YsR0FBTW4zRyxLQUFLa0MsRUFBSys0RyxHQUNMLFlBQVg3MEYsRUFDQSt3RixHQUFNeHhCLFFBQVF6akYsRUFBSys0RyxHQUNSLFVBQVg3MEYsRUFDQSt3RixHQUFNNzNHLE1BQU00QyxFQUFLKzRHLEdBRWpCOUQsR0FBTWoxRyxFQUFLKzRHLEksU0NkYkUsR0FBTyxTQUFDLEdBQVksSUFBWHAzRixFQUFXLEVBQVhBLE1BQ2xCLE9BQU8sU0FBQTV3QixHQUNIQSxFQUFTSixnQkFBS2d4QixNQUlUcTNGLEdBQVMsU0FBQyxHQUFzQixJQUFyQnR1RCxFQUFxQixFQUFyQkEsTUFBTzVsQyxFQUFjLEVBQWRBLFNBQzNCLHdDQUFPLFdBQU0vekIsR0FBTix3QkFBQXlELEVBQUEsK0VBRXdCbWtILEdBQU8sQ0FBQ2p1RCxRQUFPNWxDLGFBRnZDLFVBRU9NLEVBRlAsU0FHNkJBLEVBQVEsS0FBN0J2c0IsRUFIUixFQUdRQSxLQUFNaUgsRUFIZCxFQUdjQSxJQUFLa2tCLEVBSG5CLEVBR21CQSxPQUNsQjdsQixRQUFRc1ksSUFBSSxzQkFBdUI1ZCxHQUMvQm1yQixFQUxMLHNCQUttQmxrQixFQUxuQixPQU9DODRHLEdBQVMsVUFBVzk0RyxHSmhCVG5ULEVJaUJKNjNCLEtBQU9sdkIsTUpqQkVqSixFSWlCS3dNLEVBQUt3b0IsTUpmM0JwSixhQUFhYixRQUFRenFCLEVBQUtOLEdJZ0J6QjBFLEVBQVM0RyxHQUFRLE1BVGxCLGtEQVdDd0csUUFBUXNZLElBQUksa0JBQVosTUFDQW1pRyxHQUFTLFFBQVMsS0FBSTlwSCxZQVp2QixrQ0pUVyxJQUFDbkMsRUFBS04sSUlTakIscUJBQVAsd0RBaUJTNHNILEdBQVMsU0FBQyxHQUE0QixJQUEzQnZ1RCxFQUEyQixFQUEzQkEsTUFBTzVsQyxFQUFvQixFQUFwQkEsU0FBVW41QixFQUFVLEVBQVZBLEtBQ3JDLHdDQUFPLFdBQU1vRixHQUFOLHNCQUFBeUQsRUFBQSwrRUFFd0Jra0gsR0FBTyxDQUFDaHVELFFBQU81bEMsV0FBVW41QixTQUZqRCxVQUVPeTVCLEVBRlAsU0FHNkJBLEVBQVEsS0FBN0J2c0IsRUFIUixFQUdRQSxLQUFNaUgsRUFIZCxFQUdjQSxJQUhkLEVBR21Ca2tCLE9BSG5CLHNCQUttQmxrQixFQUxuQixPQU1DM0IsUUFBUXNZLElBQUksc0JBQXVCNWQsR0FDbkMrL0csR0FBUyxVQUFXOTRHLEdBUHJCLGtEQVVDM0IsUUFBUXNZLElBQUksa0JBQVosTUFDQW1pRyxHQUFTLFFBQVMsS0FBSTlwSCxZQVh2QiwwREFBUCx3REFnQlNvcUgsR0FBVSxXQUNuQix3Q0FBTyxXQUFNbm9ILEdBQU4sVUFBQXlELEVBQUEsc0RBQ0gsSUpwQ0d5akIsYUFBYTY4RSxRSXVDWi9qRyxFQUFTNEcsR0FBUSxZQUNwQixNQUFNcUcsR0FDSEcsUUFBUXNZLElBQUksbUJBQW9CelksR0FDaEM0NkcsR0FBUyxRQUFTNTZHLEVBQUlsUCxZQVB2QiwyQ0FBUCx1REFZU3FxSCxHQUFXLFdBQ3BCLHdDQUFPLFdBQU1wb0gsR0FBTix3QkFBQXlELEVBQUEsK0VGakNzQmdrSCxHQUFRLE1BQU8sYUVpQ3JDLFVBRU9wekYsRUFGUCxTQUc2QkEsRUFBUSxLQUE3QnZzQixFQUhSLEVBR1FBLEtBQU1pSCxFQUhkLEVBR2NBLElBQUtra0IsRUFIbkIsRUFHbUJBLE9BQ2xCN2xCLFFBQVFzWSxJQUFJLHNCQUF1QjVkLEdBRS9CbXJCLEVBTkwsc0JBTW1CbGtCLEVBTm5CLE9BT0M4NEcsR0FBUyxVQUFXOTRHLEdBUHJCLGtEQVVDM0IsUUFBUXNZLElBQUksb0JBQVosTUFDQW1pRyxHQUFTLFFBQVMsS0FBSTlwSCxZQVh2QiwwREFBUCx1REN2REVzcUgsRyxZQUNGLFdBQVl4ckgsR0FBTyx5QkFDZiw0QkFBTUEsSUFEUyx5QkFRUixTQUFBNEUsR0FDUCxFQUFLOHpDLFNBQUwsUUFBaUI5ekMsRUFBRTY1QyxjQUFjMjJELGFBQWEsUUFBVXh3RyxFQUFFN0UsT0FBT3RCLFdBVGxELHlCQVdSLFNBQUFtRyxHQUNQLEVBQUs1RSxNQUFNeXJILFFBQVFMLE9BQU8sQ0FDdEJ0dUQsTUFBTyxFQUFLajRELE1BQU1pNEQsTUFDbEI1bEMsU0FBVSxFQUFLcnlCLE1BQU1xeUIsY0FkVix5QkFpQlIsU0FBQXR5QixHQUNQLEVBQUs1RSxNQUFNeXJILFFBQVFKLE9BQU8sQ0FDdEJ2dUQsTUFBTyxFQUFLajRELE1BQU1pNEQsTUFDbEI1bEMsU0FBVSxFQUFLcnlCLE1BQU1xeUIsU0FDckJuNUIsS0FBTSxFQUFLOEcsTUFBTTlHLFVBbkJyQixFQUFLOEcsTUFBUSxDQUNUaTRELE1BQU8sR0FDUDVsQyxTQUFVLEdBQ1ZuNUIsS0FBTSxXQUxLLEUsc0RBMEJmLE9BQU8seUJBQUt1MUYsVUFBVSxnQkFDbEIseUJBQUtBLFVBQVUsYUFDWCw2QkFDSSx5QkFBS0EsVUFBVSxjQUNYLGdEQUNBLDJCQUNJandGLEtBQUssUUFDTGl3RixVQUFVLGVBQ1Z4SSxZQUFZLGNBQ1ptL0IsU0FBVWxtSCxLQUFLa21ILFdBQ25CLDJCQUFPejlHLEdBQUcsWUFBWThtRixVQUFVLHdCQUFoQyxtREFFSix5QkFBS0EsVUFBVSxjQUNYLDJDQUNBLDJCQUNJandGLEtBQUssV0FDTGl3RixVQUFVLGVBQ1Z4SSxZQUFZLFdBQ1ptL0IsU0FBVWxtSCxLQUFLa21ILFlBRXZCLHlCQUFLMzJCLFVBQVUsZ0JBQ1gsNEJBQVFBLFVBQVUsa0JBQWtCcGtCLFFBQVNuckUsS0FBSzJuSCxVQUFsRCxXQURKLEtBR0ksNEJBQVFwNEIsVUFBVSxrQkFBa0Jwa0IsUUFBU25yRSxLQUFLNG5ILFVBQWxELG1CLEdBbERML3dFLGFBc0VKOWUsT0FSUyxTQUFBajNCLEdBQUssTUFBSyxNQUVQLFNBQUExQixHQUN2QixNQUFPLENBQ0hzb0gsUUFBU2ptSCw2QkFBbUJpbUgsRUFBU3RvSCxNQUk5QjI0QixDQUE2Q3E4RSxHQUFXcVQsS0N2RWpFSSxHLG9KQUVFN25ILEtBQUsvRCxNQUFNeXJILFFBQVFILFksK0JBR25CLE1BQU8sTyxHQUxPMXdFLGFBZ0JQOWUsT0FQUyxTQUFBajNCLEdBQUssTUFBSyxNQUVQLFNBQUExQixHQUN2QixNQUFPLENBQ0hzb0gsUUFBU2ptSCw2QkFBbUJpbUgsRUFBU3RvSCxNQUc5QjI0QixDQUE2Q3E4RSxHQUFXeVQsS0N0QmpFMStGLEksT0FBTSxTQUVDMitGLEdBQWlCLEdBQUgsT0FBTTMrRixHQUFOLGtCQUNkNCtGLEdBQXFCLEdBQUgsT0FBTTUrRixHQUFOLHNCQUNsQjYrRixHQUFrQixHQUFILE9BQU03K0YsR0FBTixtQkFDZjgrRixHQUFlLEdBQUgsT0FBTTkrRixHQUFOLGdCQUNaKytGLEdBQWUsR0FBSCxPQUFNLytGLEdBQU4sZ0JBQ1pnL0YsR0FBd0IsR0FBSCxPQUFNaC9GLEdBQU4seUJBQ3JCaS9GLEdBQW1CLEdBQUgsT0FBTWovRixHQUFOLG9CQUVoQmsvRixHQUFvQixHQUFILE9BQU1sL0YsR0FBTixxQkFFakJtL0YsR0FBZSxHQUFILE9BQU1uL0YsR0FBTixnQkFDWm8vRixHQUFnQixHQUFILE9BQU1wL0YsR0FBTixpQkFDYnEvRixHQUFnQixHQUFILE9BQU1yL0YsR0FBTixpQkFDYnMvRixHQUFpQixHQUFILE9BQU10L0YsR0FBTixrQkFDZHUvRixHQUFvQixHQUFILE9BQU12L0YsR0FBTixxQixTQ2hCOUIsU0FBUzY3RCxHQUFtQjUrRSxHQUFPLE9BTW5DLFNBQTRCQSxHQUFPLEdBQUkxRCxNQUFNbUIsUUFBUXVDLEdBQU0sQ0FBRSxJQUFLLElBQUkzTSxFQUFJLEVBQUdzckYsRUFBTyxJQUFJcmlGLE1BQU0wRCxFQUFJbEssUUFBU3pDLEVBQUkyTSxFQUFJbEssT0FBUXpDLElBQU9zckYsRUFBS3RyRixHQUFLMk0sRUFBSTNNLEdBQU0sT0FBT3NyRixHQU5uSDRqQyxDQUFtQnZpSCxJQUk3RCxTQUEwQnE1RSxHQUFRLEdBQUlqbEYsT0FBT3E1QyxZQUFZMTVDLE9BQU9zbEYsSUFBa0QsdUJBQXpDdGxGLE9BQU9rQixVQUFVOEIsU0FBU3ZELEtBQUs2bEYsR0FBZ0MsT0FBTy84RSxNQUFNMFUsS0FBS3FvRSxHQUpyRm1wQyxDQUFpQnhpSCxJQUV0RixXQUFnQyxNQUFNLElBQUl0SyxVQUFVLG1EQUYwQytzSCxHQWU5RixJQWtCZSxHQWxCUSxTQUEwQnJsQyxHQUMvQyxPQUFPLFNBQVV2Z0YsR0FDZixPQUFPLFNBQVVuRCxHQUNmLE9BQU8sU0FBVVQsR0FFZixHeEJFeUIsaUN3QkZyQkEsRUFBT0MsS0FDVCxPQUFPUSxFQUFLVCxHQUdkLElBQUl5bEYsRUFBa0J6bEYsRUFBTytwQixRQUN6Qm1KLEVBQVN1eUQsRUFBZ0J2eUQsT0FDekIvbUIsRUFBT3M1RSxFQUFnQnQ1RSxLQUMzQmc0RSxFQUFRanhELEdBQVEvd0IsTUFBTWdpRixFQUFTd0IsR0FBbUJ4NUUsUSxTQzNCMUQsU0FBU3M5RyxHQUFzQkMsR0FDN0IsT0FBTyxTQUFVcnBILEdBQ2YsSUFBSU4sRUFBV00sRUFBS04sU0FDaEJSLEVBQVdjLEVBQUtkLFNBQ3BCLE9BQU8sU0FBVWtCLEdBQ2YsT0FBTyxTQUFVVCxHQUNmLE1BQXNCLG1CQUFYQSxFQUNGQSxFQUFPRCxFQUFVUixFQUFVbXFILEdBRzdCanBILEVBQUtULE1BTXBCLElBQUkycEgsR0FBUUYsS0FDWkUsR0FBTUMsa0JBQW9CSCxHQUVYLFUsMGxCQ2pCZixJQUFNbCtHLEdBQVMsU0FBQzJ1RyxFQUFXMlAsR0FBWixhQUErQjNQLEVBQS9CLEdBQTZDMlAsSUFHdERDLEdBQWUsU0FBQyxHQUNsQixJQUQwQyxJQUF2QkMsRUFBdUIsRUFBdkJBLFNBQVUvMkYsRUFBYSxFQUFiQSxPQUNyQjU0QixFQUFFLEVBQUlBLEVBQUcydkgsRUFBU2x0SCxPQUFRekMsSUFDOUIsR0FBRzJ2SCxFQUFTM3ZILEdBQUc0dkgsZUFBaUJoM0YsRUFDNUIsT0FBTzU0QixFQUdmLE9BQU8ydkgsRUFBU2x0SCxRQUlkb3RILEdBQW1CLFNBQUMsR0FDdEIsSUFEMEMsSUFBbkJGLEVBQW1CLEVBQW5CQSxTQUFVM2dILEVBQVMsRUFBVEEsR0FDekJoUCxFQUFFLEVBQUlBLEVBQUcydkgsRUFBU2x0SCxPQUFRekMsSUFDOUIsR0FBRzJ2SCxFQUFTM3ZILEdBQUdnUCxLQUFPQSxFQUNsQixPQUFPaFAsR0E0RWJ1N0IsR0FBZSxDQUNqQnUwRixVQUFXLEdBQ1hDLGVBQWdCLEdBQ2hCSixTQUFVLEdBQ1ZLLFlBQWEsR0FDYnpuSCxPQUFRLENBQ0owbkgsS0FBTSxHQUNOQyxTQUFVLEdBQ1ZDLFNBQVUsR0FDVkMsT0FBUSxHQUNSQyxVQUFXLEdBQ1hDLFdBQVksSUFFaEJDLGtCQUFvQixHQUNwQkMsZUFBZ0IsRUFDaEJDLFVBQVksR0FDWkMsV0FBYSxHQUNiQyxjQUFnQixJQTRFTEMsR0F4RVEsV0FBa0MsSUFBakN2cEgsRUFBaUMsdURBQXpCazBCLEdBQWMzMUIsRUFBVyx1Q0FDckQsT0FBUUEsRUFBT0MsTUFDWCxLQUFLZ3JILEdBQW1CLE9BQU8xL0csR0FBTzlKLEVBQU8sQ0FBRXlvSCxVQUFXbHFILEVBQU82SCxLQUFLeE0sUUFFdEUsS0FBSzR2SCxHQUF1QixPQUFPMS9HLEdBQU85SixFQUFPLENBQUUwb0gsZUFBZ0IsS0FBSW5xSCxFQUFPNkgsUUFFOUUsS0FBS29qSCxHQUFvQixPQUFPMS9HLEdBQU85SixFQUFPLENBQUUyb0gsWUFBYXBxSCxFQUFPNkgsT0FHcEUsS0FBS29qSCxHQUNELElBQU1wQixFQUFXL3VILE9BQU9zMkIsT0FBTyxHQUFJM3ZCLEdBRW5DLE9BQU96QixFQUFPNkgsS0FBS21pSCxjQUNmLElBQUssT0FDRCxJQUFNa0IsRUFBZSxHQUFILFlBQU9yQixFQUFTRSxVQUFoQixPQUErQi9wSCxFQUFPNkgsUUFDeERnaUgsRUFBU0UsU0FBV21CLEVBQ3ZCLE1BQ0QsSUFBSyxVQUNELElBQU10ckgsRUFBUWtxSCxHQUFhLENBQUNDLFNBQVd0b0gsRUFBTXNvSCxTQUFVLzJGLE9BQVMsU0FDMURrNEYsRUFBZSxLQUFJckIsRUFBU0UsVUFDNUJvQixFQUFjLE1BQUluckgsRUFBTzZILE1BQy9CcWpILEVBQWF0ckgsR0FBU3VySCxFQUN0QnRCLEVBQVNFLFNBQVdtQixFQUN2QixNQUNELElBQUssV0FDRCxJQUFNdHJILEVBQVFJLEVBQU82SCxLQUFLakksTUFDcEJzckgsRUFBZSxLQUFJckIsRUFBU0UsVUFDNUJvQixFQUFjRCxFQUFhdHJILEdBQ2pDdXJILEVBQVluQixhQUFlLFdBQzNCa0IsRUFBYXRySCxHQUFTdXJILEVBQ3RCdEIsRUFBU0UsU0FBV21CLEVBQ3ZCLE1BQ0QsSUFBSyxVQUNELElBQU10ckgsRUFBUXFxSCxHQUFpQixDQUFDRixTQUFVdG9ILEVBQU1zb0gsU0FBVTNnSCxHQUFLcEosRUFBTzZILEtBQUs2aUgsYUFDdkVRLEVBQWUsS0FBSXpwSCxFQUFNc29ILFVBQzdCbUIsRUFBYXRySCxHQUFiLE1BQTBCSSxFQUFPNkgsTUFDakNnaUgsRUFBU0UsU0FBV21CLEVBQ3ZCLE1BQ0QsSUFBSyxNQUNELElBQU10ckgsRUFBUXFxSCxHQUFpQixDQUFDRixTQUFXdG9ILEVBQU1zb0gsU0FBVS8yRixPQUFTLGFBQ2hFazRGLEVBQWUsS0FBSXpwSCxFQUFNc29ILFVBQzdCbUIsRUFBYXRySCxHQUFiLE1BQTBCSSxFQUFPNkgsTUFDakNnaUgsRUFBU0UsU0FBV21CLEVBRzVCLE9BQU9yQixFQUdYLEtBQUtvQixHQUFpQixPQUFPMS9HLEdBQU85SixFQUFPLENBQUNzb0gsU0FBUSxLQUFPL3BILEVBQU82SCxRQUVsRSxLQUFLb2pILEdBQ0QsSUFBTXBCLEVBQVcvdUgsT0FBT3MyQixPQUFPLEdBQUkzdkIsR0FDN0IycEgsRUFBWXR3SCxPQUFPczJCLE9BQU8sR0FBSXk0RixFQUFTbG5ILFFBRzdDLE9BRkF5b0gsRUFBVXBySCxFQUFPNkgsS0FBS2xNLEtBQU9xRSxFQUFPNkgsS0FBS3hNLE1BQ3pDd3VILEVBQVNsbkgsT0FBU3lvSCxFQUNYdkIsRUFHWCxLQUFLb0IsR0FBdUIsT0FBTzEvRyxHQUFPOUosRUFBTyxDQUFDbXBILGNBQWdCNXFILEVBQU82SCxPQUV6RSxLQUFLb2pILEdBQTJCLE9BQU8xL0csR0FBTzlKLEVBQU8sQ0FBQ2twSCxrQkFBaUIsS0FBTzNxSCxFQUFPNkgsUUFFckYsS0FBS29qSCxHQUFtQixPQUFPMS9HLEdBQU85SixFQUFPLENBQUNvcEgsVUFBWTdxSCxFQUFPNkgsT0FFakUsS0FBS29qSCxHQUFvQixPQUFPMS9HLEdBQU85SixFQUFPLENBQUNxcEgsV0FBYTlxSCxFQUFPNkgsT0FFbkUsS0FBS29qSCxHQUF1QixPQUFPMS9HLEdBQU85SixFQUFPLENBQUNzcEgsY0FBZ0IvcUgsRUFBTzZILE9BRXpFLFFBQVMsT0FBT3BHLEksK05Dckx4QixJQUFNOEosR0FBUyxTQUFDMnVHLEVBQVcyUCxHQUFaLE8sb1dBQUEsSUFBK0IzUCxFQUEvQixHQUE2QzJQLElBRXREbDBGLEdBQWUsQ0FDakIwMUYsU0FBVyxJQWVBQyxHQVZLLFdBQWtDLElBQWpDN3BILEVBQWlDLHVEQUF6QmswQixHQUFjMzFCLEVBQVcsdUNBQ2xELE9BQVFBLEVBQU9DLE1BQ1gsS0FBS2dySCxHQUFpQixPQUFPMS9HLEdBQU85SixFQUFPLENBQUU0cEgsU0FBVSxLQUFJcnJILEVBQU82SCxRQUVsRSxLQUFLb2pILEdBQWtCLE9BQU8xL0csR0FBTzlKLEVBQU8sQ0FBRTRwSCxTQUFVLEdBQUYsWUFBTTVwSCxFQUFNNHBILFVBQVosQ0FBc0JyckgsRUFBTzZILFNBRW5GLFFBQVMsT0FBT3BHLElDTFQ4cEgsR0FOSyxTQUFDcG5DLEdBQUQsT0FBY3BqRiwwQkFBZ0IsQ0FDOUN1MEcsT0FBUXFDLEdBQWN4ekIsR0FDdEI0bEMsU0FBV2lCLEdBQ1hRLEtBQU9GLE1DQ0VubkMsR0FBVW9xQixLQWVWM3FHLEdBWkpwRixzQkFDTCtzSCxHQUFZcG5DLElBQ1o5d0MsK0JBQ0UzdkMsMEJBQ0Vxa0IsR0FBaUJvOEQsSUFDakJ3bEMsTUNUSzhCLEdBQVksV0FDckIsSUFBTXJFLEVBQU9saEgsU0FBU3F5RixlQUFlLGFBQy9CbXpCLEVBQU14bEgsU0FBU3F5RixlQUFlLE9BQ3BDNnVCLEVBQUtoOUcsYUFBYSxRQUFTLG1CQUMzQnNoSCxFQUFJdGhILGFBQWEsUUFBUyx1QkFDMUIrSyxZQUFXLFdBQ1BpeUcsRUFBS2g5RyxhQUFhLFFBQVMsSUFDM0JzaEgsRUFBSXRoSCxhQUFhLFFBQVMsU0FDM0IsTUNnRVF1aEgsR0ExRU0sU0FBQ3IvRixHQUVsQkEsRUFBTzlWLEdDTDhCLDRCREtHLFNBQUMzTyxHQUNyQ3NGLFFBQVFzWSxJQUFJLCtCQUFnQzVkLEdBREUsSUFFdkMrakgsRUFBZS9qSCxFQUFmK2pILE1BQU9sdUUsRUFBUTcxQyxFQUFSNjFDLElBQ2QrdEUsS0FDc0I3bkgsR0FBTXJFLFdBQVd3cUgsU0FBaENLLGNBRVkxc0UsR0FDZjk1QyxHQUFNN0QsU0FBUzhySCxHQUFzQyxDQUFFRCxjQUkvRHQvRixFQUFPOVYsR0NmMkIseUJEZUcsU0FBQzNPLEdBQ2xDc0YsUUFBUXNZLElBQUksNEJBQTZCNWQsR0FDekMrL0csR0FBUyxRQUFTLDRCQUl0QnQ3RixFQUFPOVYsR0NUeUIsdUJEU0csU0FBQzNPLEdBQ2hDc0YsUUFBUXNZLElBQUksMEJBQTJCNWQsR0FERSxJQUVsQ2lrSCxFQUFnQmprSCxFQUFoQmlrSCxRQUFTcHVFLEVBQU83MUMsRUFBUDYxQyxJQUVoQit0RSxLQUp5QyxJQUtsQ3JCLEVBQWV4bUgsR0FBTXJFLFdBQVd3cUgsU0FBaENLLFlBQ1B4bUgsR0FBTTdELFNBQVM4ckgsTUFDWnpCLElBQWdCMXNFLEdBQ2Y5NUMsR0FBTTdELFNBQVM4ckgsR0FBMkIsQ0FBQ0MsZ0JBSW5EeC9GLEVBQU85VixHQ3BCc0Isb0JEb0JHLFNBQUMzTyxHQUM3QnNGLFFBQVFzWSxJQUFJLHVCQUF3QjVkLEdBQ3BDKy9HLEdBQVMsUUFBUywwQkFFbEJoa0gsR0FBTTdELFNBQVM4ckgsU0FJbkJ2L0YsRUFBTzlWLEdDdEM4Qiw0QkRzQ0csU0FBQzNPLEdBQ3JDc0YsUUFBUXNZLElBQUksZ0NBRGtDLElBRXZDc21HLEVBQWdCbGtILEVBQWhCa2tILGFBQ1BOLEtBQ0E3bkgsR0FBTTdELFNBQVM4ckgsR0FBOEIsQ0FBQ0UscUJBSWxEei9GLEVBQU85VixHQ2hDdUIscUJEZ0NHLFNBQUMzTyxHQUM5QnNGLFFBQVFzWSxJQUFJLHlCQUQyQixJQUVoQ29sRyxFQUF5QmhqSCxFQUF6QmdqSCxVQUFXQyxFQUFjampILEVBQWRpakgsV0FDbEJXLEtBQ0E3bkgsR0FBTTdELFNBQVM4ckgsR0FBMkIsQ0FBQ2hCLGVBQzNDam5ILEdBQU03RCxTQUFTOHJILEdBQTRCLENBQUVmLG1CQUdqRHgrRixFQUFPOVYsR0N2Q29CLGtCRHVDRyxTQUFDM08sR0FDM0JzRixRQUFRc1ksSUFBSSxxQkFBc0I1ZCxHQUNsQysvRyxHQUFTLE1BQU8sZ0NBSXBCdDdGLEVBQU85VixHQ3hEMkIseUJEd0RHLFNBQUMzTyxHQUNsQ3NGLFFBQVFzWSxJQUFJLDZCQUQrQixJQUVwQ3NsRyxFQUFpQmxqSCxFQUFqQmtqSCxjQUNQVSxLQUNBN25ILEdBQU03RCxTQUFTOHJILEdBQStCLENBQUNkLHNCQUduRHorRixFQUFPOVYsR0M5RHdCLHNCRDhERyxTQUFDM08sR0FDL0JzRixRQUFRc1ksSUFBSSx5QkFBMEI1ZCxHQUN0QysvRyxHQUFTLE1BQU8sZ0NFbkVsQnQ3RixHQUFTMC9GLEdBQVN4NEYsS0FBT3B2QixXQUFhLElBQU1vdkIsS0FBT252QixZQUx6QyxDQUNaOHVDLFVBQVcsRUFDWHUyQyxXQUFZLENBQUMsZUFJakJ1aUMsR0FBdUIzL0YsSUFFUkEsVUNTVDQvRixHQUFlLFNBQUMsR0FBRCxJQUFFNUIsRUFBRixFQUFFQSxTQUFGLE1BQWlCLENBQ2xDcnFILEtBQU9nckgsR0FDUHBqSCxLQUFPeWlILElBV0w2QixHQUFnQixTQUFDLEdBQUQsSUFBRUMsRUFBRixFQUFFQSxRQUFGLE1BQWdCLENBQ2xDbnNILEtBQU9nckgsR0FDUHBqSCxLQUFPdWtILElDM0JFQyxHQUFnQixTQUFDLEdBQUQsSUFBR2h4SCxFQUFILEVBQUdBLE1BQUgsTUFBZ0IsQ0FDekM0RSxLQUFNZ3JILEdBQ05wakgsS0FBTSxDQUFFeE0sV0FLQ2l4SCxHQUFhLFNBQUMsR0FBRCxJQUFHdkMsRUFBSCxFQUFHQSxTQUFILE1BQW1CLENBQ3pDOXBILEtBQU1nckgsR0FDTnBqSCxLQUFNa2lILElBS0d3QyxHQUFpQixTQUFDLEdBQVksSUFBVjd1RSxFQUFVLEVBQVZBLElBQzdCLE9BQU8sU0FBQzM5QyxFQUFVUixHQUNkLElBQUltK0MsRUFDQSxPQUFPa3FFLEdBQVMsVUFBVyx1QkFGSixNQUlHcm9ILElBQVd3cUgsU0FBcENBLEVBSnNCLEVBSXRCQSxTQUFVSyxFQUpZLEVBSVpBLFlBR1h6ekUsRUFBUW96RSxFQUFTbHRILE9BREYsR0FFZnV0SCxJQUFnQjFzRSxJQUNoQi9HLEVBSGUsSUFLbkIsSUFBTTYxRSxFQUFRLENBQUM5dUUsTUFBSy9HLFNBQ3BCNjFFLEVBQU1oNUYsS0FBT2x2QixPQUFTMGlILEdBQU94ekYsS0FBT2x2QixPQUNwQ2dvQixHQUFPeFYsS0huQ2tCLG1CR21DUzAxRyxHQUU3QnBDLElBQWdCMXNFLElBRWpCMzlDLEVBQVMwc0gsR0FBYyxDQUFFL3VFLFNBQ3pCMzlDLEVBQVN1c0gsR0FBVyxDQUFFdkMsU0FBVSxNQUNoQ2hxSCxFQUFTMnNILEdBQW9CLENBQUUzQyxTQUFVLE1BQ3pDaHFILEVBQVM0c0gsR0FBZSxDQUFFWixhQUFjLE9BRzVDaHNILEVEckJvQixTQUFDLEdBQWMsSUFBYnFzSCxFQUFhLEVBQWJBLFFBQzFCLE9BQU8sU0FBQ3JzSCxFQUFVUixJQUNxQyxJQUEvQ0EsSUFBV2lzSCxLQUFLSCxTQUFTeHJILFFBQVF1c0gsSUFDakNyc0gsRUFBU29zSCxHQUFjLENBQUVDLGNDa0JwQlEsQ0FBMEIsQ0FBRVIsUUFBUzF1RSxLQUU5QyxJQUFLLElBQUl0akQsRUFBSSxFQUFHQSxFQW5CRyxHQW1CYUEsSUFDNUIyRixFQUFTOHNILEdBQWEsQ0FDbEJmLFFBQVMsQ0FDTDlCLGFBQWMsT0FDZFUsV0FBWSxTQU9uQmlDLEdBQWlCLFNBQUMsR0FBRCxJQUFHWixFQUFILEVBQUdBLGFBQUgsTUFBdUIsQ0FDakQ5ckgsS0FBTWdySCxHQUNOcGpILEtBQU1ra0gsSUFHR2UsR0FBc0IsU0FBQyxHQUFELElBQUdueEgsRUFBSCxFQUFHQSxJQUFLTixFQUFSLEVBQVFBLE1BQVIsTUFBcUIsQ0FDcEQ0RSxLQUFNZ3JILEdBQ05wakgsS0FBTSxDQUFFbE0sTUFBS04sV0FHSjB4SCxHQUFrQixTQUFDLEdBQUQsSUFBRy81RixFQUFILEVBQUdBLE9BQUgsTUFBaUIsQ0FDNUMveUIsS0FBTWdySCxHQUNOcGpILEtBQU1tckIsSUFHRzA1RixHQUFzQixTQUFDLEdBQUQsSUFBRzNDLEVBQUgsRUFBR0EsU0FBSCxNQUFtQixDQUNsRDlwSCxLQUFNZ3JILEdBQ05wakgsS0FBTWtpSCxJQUtHaUQsR0FBaUIsU0FBQyxHQUFXLElBQVQ1akgsRUFBUyxFQUFUQSxHQUM3QixPQUFPLFNBQUFySixHQUNIdXNCLEdBQU94VixLSDFFZSxnQkcwRVMsQ0FBRTFOLFNBSzVCNmpILEdBQWtCLFNBQUMsR0FBRCxJQUFHbEMsRUFBSCxFQUFHQSxjQUFILE1BQXdCLENBQ25EOXFILEtBQU1nckgsR0FDTnBqSCxLQUFNa2pILElBR0cwQixHQUFnQixTQUFDLEdBQUQsSUFBRy91RSxFQUFILEVBQUdBLElBQUgsTUFBYyxDQUN2Q3o5QyxLQUFNZ3JILEdBQ05wakgsS0FBTTYxQyxJQUdHd3ZFLEdBQXlCLFNBQUMsR0FBWSxJQUFYdEIsRUFBVyxFQUFYQSxNQUNwQyxPQUFPLFNBQUM3ckgsRUFBVVIsR0FBYSxJQUNwQndxSCxFQUFheHFILElBQVd3cUgsU0FBeEJBLFNBRVA2QixFQUFRQSxFQUFNanBILFFBQU8sU0FBQXVFLEdBRWpCLElBREEsSUFBSThyQixHQUFTLEVBQ0w1NEIsRUFBRSxFQUFHQSxFQUFHMnZILEVBQVNsdEgsT0FBUXpDLElBQzFCOE0sRUFBS2tDLEtBQU8yZ0gsRUFBUzN2SCxHQUFHc3dILGFBQ3ZCMTNGLEdBQVMsR0FHakIsT0FBT0EsS0FHWCxJQUFJLElBQUk1NEIsRUFBRSxFQUFHQSxFQUFJd3hILEVBQU0vdUgsT0FBU3pDLElBQzVCd3hILEVBQU14eEgsR0FBRzR2SCxhQUFlLFVBQ3hCanFILEVBQVNvdEgsR0FBbUIsQ0FBQ3JCLFFBQVVGLEVBQU14eEgsTUFHakQrYSxZQUFXLFdBQ1BoSSxRQUFRc1ksSUFBSSxpQkFDWjFsQixFQUFVcXRILFFBQ1gsT0FJTEQsR0FBcUIsU0FBQyxHQUFELElBQUVyQixFQUFGLEVBQUVBLFFBQUYsTUFBZ0IsQ0FDdkM3ckgsS0FBT2dySCxHQUNQcGpILEtBQU9pa0gsSUFhRXNCLEdBQWdCLFdBQ3pCLE9BQU8sU0FBQ3J0SCxFQUFVUixHQUFhLE1BQ0tBLElBQVd3cUgsU0FBcENBLEVBRG9CLEVBQ3BCQSxTQUFVSyxFQURVLEVBQ1ZBLFlBQ1h4cUgsRUFiZSxTQUFDbXFILEdBRTFCLElBREEsSUFBSW5xSCxPQUFRYixFQUNKM0UsRUFBRSxFQUFHQSxFQUFHMnZILEVBQVNsdEgsT0FBUXpDLElBQzdCLEdBQWdDLFlBQTdCMnZILEVBQVMzdkgsR0FBRzR2SCxhQUEyQixDQUN0Q3BxSCxFQUFReEYsRUFDUixNQUdSLE9BQU93RixFQUtXeXRILENBQXFCdEQsR0FFbkMsR0FEQTU4RyxRQUFRc1ksSUFBSSxXQUFZN2xCLFFBQ1hiLElBQVZhLEVBQW9CLE9BQ0RtcUgsRUFBU25xSCxHQUFwQml5QixFQURZLEVBQ1pBLElBQUt6b0IsRUFETyxFQUNQQSxHQUNaK0QsUUFBUXNZLElBQUksdUJBQXdCb00sR0FDcEN2RixHQUFPeFYsS0hySVMsY0dxSWEsQ0FBQythLE1BQUl6b0IsS0FBSXMwQyxJQUFNMHNFLElBQzVDcnFILEVBQVN1dEgsR0FBb0IsQ0FDekJ0RCxhQUFlLFdBQ2ZwcUgsY0FNVjB0SCxHQUFzQixTQUFDemxILEdBQUQsTUFBVyxDQUNuQzVILEtBQU9nckgsR0FDUHBqSCxTQUdTMGxILEdBQWMsU0FBQyxHQUFnQixJQUFkekIsRUFBYyxFQUFkQSxRQUMxQixPQUFPLFNBQUEvckgsR0FDSEEsRUFBUzhzSCxHQUFhLENBQUVmLGVBSW5CZSxHQUFlLFNBQUMsR0FBRCxJQUFHZixFQUFILEVBQUdBLFFBQUgsTUFBa0IsQ0FDMUM3ckgsS0FBTWdySCxHQUNOcGpILEtBQU1pa0gsSUFJRzBCLEdBQVksU0FBQyxHQUFXLElBQVYzN0YsRUFBVSxFQUFWQSxJQUN2QixPQUFPLFNBQUE5eEIsR0FDSHVzQixHQUFPeFYsS0g1SlcsWUc0SlMsQ0FBQythLFVBSXZCNDdGLEdBQWMsU0FBQyxHQUFELElBQUU1QyxFQUFGLEVBQUVBLFVBQUYsTUFBa0IsQ0FDekM1cUgsS0FBT2dySCxHQUNQcGpILEtBQU9nakgsSUFFRTZDLEdBQWUsU0FBQyxHQUFELElBQUU1QyxFQUFGLEVBQUVBLFdBQUYsTUFBbUIsQ0FDM0M3cUgsS0FBT2dySCxHQUNQcGpILEtBQU9pakgsSUFHRS9DLEdBQU8sU0FBQyxHQUFZLElBQVhwM0YsRUFBVyxFQUFYQSxNQUNsQixPQUFPLFNBQUE1d0IsR0FDSEEsRUFBU0osZ0JBQUtneEIsTUMvTHRCLFNBQVNnOUYsR0FBVCxHQUNDLElBRDBDLElBQWZDLEVBQWUsRUFBZkEsT0FBUTdtSCxFQUFPLEVBQVBBLElBQzFCM00sRUFBSSxFQUFHQSxFQUFJMk0sRUFBSWxLLE9BQVF6QyxJQUMzQnl6SCxHQUFTOW1ILEVBQUkzTSxJQUNoQnV6SCxHQUFpQixDQUFFQyxTQUFRN21ILElBQUtBLEVBQUkzTSxLQUUxQjB6SCxHQUFPL21ILEVBQUkzTSxJQUNyQjJ6SCxHQUFrQixDQUFFSCxTQUFReHhILElBQUsySyxFQUFJM00sS0FHckN3ekgsRUFBT2p1SCxLQUFLb0gsRUFBSTNNLElBS25CLFNBQVN5ekgsR0FBU3BwSCxHQUNqQixNQUErQyxtQkFBeEMzSixPQUFPa0IsVUFBVThCLFNBQVN2RCxLQUFLa0ssR0FFdkMsU0FBU3FwSCxHQUFPcnBILEdBQ2YsTUFBK0Msb0JBQXhDM0osT0FBT2tCLFVBQVU4QixTQUFTdkQsS0FBS2tLLEdBSXZDLFNBQVNzcEgsR0FBVCxHQUlDLElBSjJDLElBQWZILEVBQWUsRUFBZkEsT0FBUXh4SCxFQUFPLEVBQVBBLElBRTlCNHhILEVBQVVsekgsT0FBTzBqRixPQUFPcGlGLEdBRXJCaEMsRUFBSSxFQUFHQSxFQUFJNHpILEVBQVFueEgsT0FBUXpDLElBRS9CeXpILEdBQVNHLEVBQVE1ekgsSUFDcEJ1ekgsR0FBaUIsQ0FBRUMsU0FBUTdtSCxJQUFLaW5ILEVBQVE1ekgsS0FFOUIwekgsR0FBT0UsRUFBUTV6SCxJQUN6QjJ6SCxHQUFrQixDQUFFSCxTQUFReHhILElBQUs0eEgsRUFBUTV6SCxLQUd6Q3d6SCxFQUFPanVILEtBQUtxdUgsRUFBUTV6SCxJQVl2QixJQUllNnpILEdBSkksQ0FDZkMsbUJBUEosU0FBNEI5eEgsR0FDM0IsSUFBSXd4SCxFQUFTLEdBRWIsT0FEQUcsR0FBa0IsQ0FBRUgsT0FBUUEsRUFBUXh4SCxJQUFLQSxJQUNsQ3d4SCxJQ25DRk8sRyxZQUNGLFdBQVl2eEgsR0FBTyx5QkFDZiw0QkFBTUEsSUFEUyx5QkFNUixTQUFBNEUsR0FDUCxJQUFNN0YsRUFBTTZGLEVBQUU2NUMsY0FBYzIyRCxhQUFhLGdCQUNuQzMyRyxFQUFRbUcsRUFBRTdFLE9BQU90QixPQUFTbUcsRUFBRTY1QyxjQUFjMjJELGFBQWEsY0FDN0QsRUFBS3AxRyxNQUFNeXJILFFBQVF5RSxvQkFBb0IsQ0FBRW54SCxNQUFLTixVQUMxQ21HLEVBQUU3RSxPQUFPdEIsT0FDVCxFQUFLK3lILGNBWE0sZ0NBZUQsU0FBQ2h5SCxHQUdmLElBRkEsSUFBTWl5SCxFQUFXLEdBQ1hudEgsRUFBT3BHLE9BQU9vRyxLQUFLOUUsR0FDaEJoQyxFQUFJLEVBQUdBLEVBQUk4RyxFQUFLckUsT0FBUXpDLElBQ3pCZ0MsRUFBSThFLEVBQUs5RyxNQUFPaTBILEVBQVNudEgsRUFBSzlHLElBQU1nQyxFQUFJOEUsRUFBSzlHLEtBRXJELE9BQU9pMEgsS0FyQlEsK0JBd0JGLFlBQXdCLElBQXJCanlILEVBQXFCLEVBQXJCQSxJQUFLa3lILEVBQWdCLEVBQWhCQSxVQUNyQmx5SCxFQUFNQSxFQUFJdUcsUUFBTyxTQUFBdUUsR0FBSSxNQUEwQixZQUF0QkEsRUFBSzhpSCxnQkFDOUIsSUFBTXVFLEVBQWlCenpILE9BQU9vRyxLQUFLb3RILEdBOEJuQyxPQTNCcUJseUgsRUFBSXVHLFFBQU8sU0FBQXVFLEdBSTVCLElBRkEsSUFBSXNuSCxHQUFjLEVBRVRwMEgsRUFBSSxFQUFHQSxFQUFJbTBILEVBQWUxeEgsT0FBUXpDLElBQUssQ0FDNUMsSUFBTXlILEVBQU8wc0gsRUFBZW4wSCxHQUN4QnEwSCxFQUFTSCxFQUFVQyxFQUFlbjBILElBTXRDLEdBSitDLG9CQUEzQ1UsT0FBT2tCLFVBQVU4QixTQUFTdkQsS0FBS2swSCxLQUMvQkEsRUFBU0EsRUFBT3oxRyxlQUdSLFNBQVRuWCxHQUVnRCxJQUQ5QjZzSCxHQUFPUixtQkFBbUI5eEgsR0FBSzZCLEtBQUssS0FDekMrYSxjQUFjblosUUFBUTR1SCxLQUM5QkQsR0FBYyxRQUlnQyxJQUE5Q3RuSCxFQUFLckYsR0FBTW1YLGNBQWNuWixRQUFRNHVILEtBQ2pDRCxHQUFjLEdBSzFCLE9BQU9BLFFBdERJLHlCQTJEUixXQUFNLE1BQ2dCLEVBQUs1eEgsTUFBTW10SCxTQUFoQ3BuSCxFQURLLEVBQ0xBLE9BQVFvbkgsRUFESCxFQUNHQSxTQUVWdUUsRUFBWSxFQUFLSyxnQkFBZ0Joc0gsR0FDakNnb0gsRUFBb0IsRUFBS2lFLGVBQWUsQ0FBRXh5SCxJQUFLMnRILEVBQVV1RSxjQUMvRCxFQUFLMXhILE1BQU15ckgsUUFBUXFFLG9CQUFvQixDQUFFM0MsU0FBVVksSUFDbkQsRUFBSy90SCxNQUFNeXJILFFBQVEwRSxnQkFBZ0IsQ0FBRS81RixRQUFRLE9BL0Q3QyxFQUFLdnhCLE1BQVEsR0FGRSxFLHNEQW9FVixXQUNHa0IsRUFBV2hDLEtBQUsvRCxNQUFNbXRILFNBQXRCcG5ILE9BRUZrc0gsRUFBVWx1SCxLQUFLZ3VILGdCQUFnQmhzSCxHQUUvQm1zSCxFQUFVLHlCQUNaNStCLFVBQVUsdUJBQ1YsMEJBQU1wa0IsUUFBU25yRSxLQUFLeXRILFNBQVVsK0IsVUFBVSxtQkFBbUJsbUYsTUFBTyxDQUFFK2tILGdCQUFpQixVQUNqRix1QkFBRzcrQixVQUFVLGVBQWVtM0IsY0FBWSxXQUdoRCxPQUFPLHlCQUFLbjNCLFVBQVUsa0JBQ2xCLHlCQUFLQSxVQUFVLGVBQ1gsZ0NBQ0ksdUJBQUdBLFVBQVUsTUFBYixZQUVKLHlCQUFLQSxVQUFVLGtCQUVWcDFGLE9BQU9vRyxLQUFLMnRILEdBQVM3cUgsS0FBSSxTQUFBbkMsR0FBSSxPQUFLLDRCQUMvQmxHLElBQUtrRyxFQUFLL0QsWUFBYyxJQUFJbzdCLE1BQVE4MUYsVUFDcEMvdUgsS0FBSyxTQUNMaXdGLFVBQVUsdUJBQ1YrK0IsZUFBY3B0SCxFQUNkaXFFLFFBQVMsRUFBSys2QyxTQUNkcUksYUFBVyxJQUNiTCxFQUFRaHRILEdBUHlCLEtBU25CLHVCQUFHcXVGLFVBQVUsaUJBVE0sU0FZdkMseUJBQUtBLFVBQVUsZ0JBRVgseUJBQUtBLFVBQVUsb0JBQ1gsMkJBQ0lqd0YsS0FBSyxPQUNMaXdGLFVBQVUsZUFDVnhJLFlBQVksa0NBQ1pyc0YsTUFBT3NILEVBQU8wbkgsS0FDZDRFLGVBQWEsT0FDYnBJLFNBQVVsbUgsS0FBS2ttSCxTQUNmc0ksUUFBUyxTQUFBM3RILEdBQXlCLEtBQWRBLEVBQUVxb0QsU0FBa0IsRUFBS3VrRSxjQUM5Q1UsR0FFUCx5QkFBSzUrQixVQUFVLG9CQUNYLDJCQUNJandGLEtBQUssT0FDTGl3RixVQUFVLGVBQ1Z4SSxZQUFZLGFBQ1p1bkMsZUFBYSxXQUNiNXpILE1BQU9zSCxFQUFPMm5ILFNBQ2R6RCxTQUFVbG1ILEtBQUtrbUgsU0FDZnNJLFFBQVMsU0FBQTN0SCxHQUF5QixLQUFkQSxFQUFFcW9ELFNBQWtCLEVBQUt1a0UsY0FDOUNVLEdBR1AseUJBQUs1K0IsVUFBVSxvQkFDWCwyQkFDSWp3RixLQUFLLE9BQ0xpd0YsVUFBVSxlQUNWeEksWUFBWSxjQUNadW5DLGVBQWEsV0FDYjV6SCxNQUFPc0gsRUFBTzRuSCxTQUNkMUQsU0FBVWxtSCxLQUFLa21ILFNBQ2ZzSSxRQUFTLFNBQUEzdEgsR0FBeUIsS0FBZEEsRUFBRXFvRCxTQUFrQixFQUFLdWtFLGNBQzlDVSxHQUVQLHlCQUFLNStCLFVBQVUsb0JBQ1gsMkJBQ0lqd0YsS0FBSyxPQUNMaXdGLFVBQVUsZUFDVnhJLFlBQVksWUFDWnVuQyxlQUFhLFNBQ2I1ekgsTUFBT3NILEVBQU82bkgsT0FDZDNELFNBQVVsbUgsS0FBS2ttSCxTQUNmc0ksUUFBUyxTQUFBM3RILEdBQXlCLEtBQWRBLEVBQUVxb0QsU0FBa0IsRUFBS3VrRSxjQUM5Q1UsR0FFUCx5QkFBSzUrQixVQUFVLG9CQUNYLDJCQUNJandGLEtBQUssT0FDTGl3RixVQUFVLGVBQ1Z4SSxZQUFZLGVBQ1p1bkMsZUFBYSxZQUNiNXpILE1BQU9zSCxFQUFPOG5ILFVBQ2Q1RCxTQUFVbG1ILEtBQUtrbUgsU0FDZnNJLFFBQVMsU0FBQTN0SCxHQUF5QixLQUFkQSxFQUFFcW9ELFNBQWtCLEVBQUt1a0UsY0FDOUNVLFUsR0EzSk50M0UsYUErS3JCMjJFLEdBQU92cUcsVUFBWSxDQUNmbW1HLFNBQVU3dkMsSUFBVUgsTUFBTSxDQUN0Qm13QyxVQUFXaHdDLElBQVUvaEUsT0FDckJneUcsZUFBZ0Jqd0MsSUFBVWxrRSxNQUMxQit6RyxTQUFVN3ZDLElBQVVsa0UsTUFDcEJvMEcsWUFBYWx3QyxJQUFVL2hFLE9BQ3ZCeFYsT0FBUXUzRSxJQUFVSCxNQUFNLENBQ3BCc3dDLEtBQU1ud0MsSUFBVS9oRSxPQUNoQmkzRyxLQUFNbDFDLElBQVUvaEUsT0FDaEJveUcsU0FBVXJ3QyxJQUFVL2hFLE9BQ3BCcXlHLE9BQVF0d0MsSUFBVS9oRSxPQUNsQnN5RyxVQUFXdndDLElBQVUvaEUsT0FDckJ1eUcsV0FBWXh3QyxJQUFVL2hFLFNBRTFCd3lHLGtCQUFtQnp3QyxJQUFVbGtFLE1BQzdCNDBHLGNBQWUxd0MsSUFBVVgsS0FDekJ3eEMsY0FBZTd3QyxJQUFVL2hFLFNBRTdCcXpHLEtBQU10eEMsSUFBVUgsTUFBTSxDQUNsQnN4QyxTQUFVbnhDLElBQVVsa0UsUUFFeEJxeUcsUUFBU251QyxJQUFVcCtFLFFBSVI0OEIsV0FwQ1MsU0FBQWozQixHQUNwQixNQUFPLENBQ0hzb0gsU0FBVXRvSCxFQUFNc29ILGFBR0csU0FBQWhxSCxHQUN2QixNQUFPLENBQ0hzb0gsUUFBU2ptSCw2QkFBbUJpbUgsRUFBU3RvSCxNQTZCOUIyNEIsQ0FBNkN5MUYsSSxvQ0N2TTdDa0IsSSxPQU5BLFdBQ1gsT0FBTyx5QkFBS24vQixVQUFVLGtCQUNsQix5QkFBS0EsVUFBVSx3QkNJakJvL0IsRyxZQUNGLFdBQVkxeUgsR0FBTyx5QkFDZiw0QkFBTUEsSUFEUyx5QkFrQlIsU0FBQTRFLEdBQ1AsSUFBTXZCLEVBQU91QixFQUFFNjVDLGNBQWMyMkQsYUFBYSxhQUNwQzMyRyxFQUFRbUcsRUFBRTdFLE9BQU90QixNQUN2QixFQUFLdUIsTUFBTXlySCxRQUFRZ0UsY0FBYyxDQUFFcHNILE9BQU01RSxhQXJCMUIsMkJBd0JOLFNBQUFtRyxHQUNUMkwsUUFBUXNZLElBQUksb0JBQ1osRUFBSzdvQixNQUFNeXJILFFBQVFnRSxjQUFjLENBQUVoeEgsTUFBT21HLEVBQUU2NUMsY0FBYzIyRCxhQUFhLHNCQUN2RSxFQUFLcDFHLE1BQU15ckgsUUFBUWtFLGVBQWUsQ0FBRTd1RSxJQUFLbDhDLEVBQUU2NUMsY0FBYzIyRCxhQUFhLHlCQTNCdkQsK0JBOEJGLFdBQU0sSUFDWGtZLEVBQWMsRUFBS3R0SCxNQUFNbXRILFNBQXpCRyxVQUNSLEVBQUt0dEgsTUFBTXlySCxRQUFRa0UsZUFBZSxDQUFFN3VFLElBQUt3c0UsT0FoQzFCLDBCQW1DUCxTQUFBOXRILEdBR1IsSUFGQSxJQUFNaXlILEVBQVcsR0FDWG50SCxFQUFPcEcsT0FBT29HLEtBQUs5RSxHQUNoQmhDLEVBQUksRUFBR0EsRUFBSThHLEVBQUtyRSxPQUFRekMsSUFDekJnQyxFQUFJOEUsRUFBSzlHLE1BQU9pMEgsRUFBU250SCxFQUFLOUcsSUFBTWdDLEVBQUk4RSxFQUFLOUcsS0FFckQsT0FBT2kwSCxLQXpDUSwwQkE0Q1AsU0FBQWxuSCxHQUlSLElBSEEsSUFBSW9vSCxFQUFhLEVBQUszeUgsTUFBTW10SCxTQUFTcG5ILE9BQ2pDNnNILEVBQWMxMEgsT0FBTzBqRixPQUFPLEVBQUtpeEMsVUFBVUYsSUFDM0NHLEVBQWN2b0gsRUFDVC9NLEVBQUksRUFBR0EsRUFBSW8xSCxFQUFZM3lILE9BQVF6QyxJQUNwQ3MxSCxFQUFjQSxFQUFZMTJHLGNBQWNyUyxRQUFRNm9ILEVBQVlwMUgsR0FBRzRlLGNBQWpELG1DQUE0RncyRyxFQUFZcDFILEdBQXhHLFlBR2xCLE9BREFzMUgsRUFBY0MsS0FBZ0JELE1BbkRmLDBCQXVEUCxTQUFBbHVILEdBQUMsT0FBSSxFQUFLOHpDLFNBQVMsQ0FBRXM2RSxVQUFXcHVILEVBQUU2NUMsY0FBYzIyRCxhQUFhLHdCQXZEdEQsMEJBd0RQLGtCQUFNLEVBQUsxOEQsU0FBUyxDQUFFczZFLFVBQVcsUUF4RDFCLDBCQTBEUCxTQUFBcHVILEdBQ1IsSUFBTXZCLEVBQU91QixFQUFFNjVDLGNBQWMyMkQsYUFBYSxZQUM3QixRQUFUL3hHLEdBQWdCLEVBQUtyRCxNQUFNeXJILFFBQVEwRSxnQkFBZ0IsQ0FBRS81RixRQUFRLElBQ3BELGFBQVQveUIsR0FBcUIsRUFBS3JELE1BQU15ckgsUUFBUTBFLGdCQUFnQixDQUFFLzVGLFFBQVEsT0E3RHZELDRCQWdFTCxTQUFBeHhCLEdBQ1YsSUFBTTRILEVBQUs1SCxFQUFFNjVDLGNBQWMyMkQsYUFBYSxtQkFFeEMsRUFBS3AxRyxNQUFNeXJILFFBQVFOLEtBQUssQ0FBQ3AzRixNQUFRLFlBQWN2bkIsT0FqRS9DLEVBQUszSCxNQUFRLENBQ1RtdUgsVUFBVyxHQUNYQyxpQkFBaUIsR0FKTixFLGlFQVFDLFdBQ1ZDLEVBQWU1cEgsU0FBUzBDLGNBQWMseUNBQzVDa25ILEVBQWFqaUcsaUJBQWlCLFdBQVcsV0FDckMsRUFBS3luQixTQUFTLENBQUV1NkUsaUJBQWlCLE9BRXJDQyxFQUFhamlHLGlCQUFpQixZQUFZLFdBQ3RDLEVBQUt5bkIsU0FBUyxDQUFFdTZFLGlCQUFpQixTLCtCQXdEaEMsYUFDa0NsdkgsS0FBS2MsTUFBcENtdUgsRUFESCxFQUNHQSxVQUFXQyxFQURkLEVBQ2NBLGdCQUNYeEUsRUFBYTFxSCxLQUFLL0QsTUFBTTR1SCxLQUF4QkgsU0FGSCxFQUc2RTFxSCxLQUFLL0QsTUFBTW10SCxTQUFyRkcsRUFISCxFQUdHQSxVQUFXSCxFQUhkLEVBR2NBLFNBQVVJLEVBSHhCLEVBR3dCQSxlQUFnQlMsRUFIeEMsRUFHd0NBLGNBQWVELEVBSHZELEVBR3VEQSxrQkFDdERvRixFQUFLcHZILEtBQUtxdkgsVUFHVkMsRUFBb0I1RSxFQUFTMW9ILFFBQU8sU0FBQXVFLEdBQUksT0FBaUMsSUFBN0JBLEVBQUtySCxRQUFRcXFILE1BRXpEZ0csRUFBYSxTQUFDaHBILEVBQU05TSxHQUd0QixNQUEwQixTQUF0QjhNLEVBQUs4aUgsYUFBZ0MseUJBQUs5NUIsVUFBVSxPQUFPdjBGLElBQUt1TCxFQUFLcEosV0FBYTFELEdBQ2xGLHlCQUFLODFGLFVBQVUsd0JBQ1gseUJBQUtBLFVBQVUsVUFDWCxrQkFBQyxHQUFELFNBTWMsWUFBdEJocEYsRUFBSzhpSCxhQUFtQyx5QkFBSzk1QixVQUFVLE9BQU92MEYsSUFBS3VMLEVBQUtwSixXQUFhMUQsR0FDckYseUJBQUs4MUYsVUFBVSx3QkFDWCx5QkFBS0EsVUFBVSxVQUNYLDBCQUFNQSxVQUFVLFFBQVEsWUFBeEIsS0FBNkNocEYsRUFBS3FqSCxZQUtwQyxhQUF0QnJqSCxFQUFLOGlILGFBQW9DLHlCQUFLOTVCLFVBQVUsT0FBT3YwRixJQUFLdUwsRUFBS3BKLFdBQWExRCxHQUN0Rix5QkFBSzgxRixVQUFVLHdCQUNYLHlCQUFLQSxVQUFVLFVBQ1gsMEJBQU1BLFVBQVUsUUFBUSxjQUQ1QixJQUNrRGhwRixFQUFLcWpILFlBS3JDLFFBQXRCcmpILEVBQUs4aUgsYUFBK0IseUJBQUs5NUIsVUFBVSxPQUFPdjBGLElBQUt1TCxFQUFLcEosV0FBYTFELEdBQ2pGLHlCQUFLODFGLFVBQVUsYUFDWCx1QkFBR0EsVUFBVSxVQUFTLDBCQUFNQSxVQUFVLFFBQVEscUJBSWxEMC9CLElBQWMxb0gsRUFBS3dqSCxXQUVaLHlCQUFLeDZCLFVBQVUsT0FBT3YwRixJQUFLdUwsRUFBS3BKLFdBQWExRCxHQUNoRCx5QkFBSzgxRixVQUFVLGFBQ1gsNkJBQ0ksNEJBQVFwa0IsUUFBUyxFQUFLcWtELFdBQXRCLGFBQ0N4b0gsS0FBS0MsVUFBVVYsT0FBTW5JLEVBQVcsTUFLMUMseUJBQUtteEYsVUFBVSxPQUFPdjBGLElBQUt1TCxFQUFLcEosV0FBYTFELEdBQ2hELHlCQUFLODFGLFVBQVUsYUFFWCx5QkFBS0EsVUFBVSxnQkFDWCx5QkFBS0EsVUFBVSxTQUNYLHlCQUFLN3RFLElBQUtuYixFQUFLa3BILFNBRW5CLHlCQUFLbGdDLFVBQVUsY0FDWCx5QkFBS0EsVUFBVSxXQUVYLHVCQUNJbWdDLGtCQUFpQm5wSCxFQUFLd2pILFdBQ3RCNStDLFFBQVMsRUFBS3drRCxhQUVkLHdCQUFJcGdDLFVBQVUsY0FBZCxJQUE2QjkxRixFQUFJLEVBQWpDLEtBQTJDMjFILEVBQUc3b0gsRUFBS3FqSCxZQUV2RCwwQkFBTThGLGtCQUFpQm5wSCxFQUFLd2pILFdBQVk1K0MsUUFBUyxFQUFLOGpELFdBQXRELEtBQTZFLHVCQUFHMS9CLFVBQVUsZUFBZW0zQixjQUFZLFdBRXpILHlCQUFLbjNCLFVBQVUsZ0JBQ1gsMkJBQU9BLFVBQVUsY0FBakIsV0FBdUM2L0IsRUFBRzdvSCxFQUFLc2pILFNBQy9DLDJCQUFPdDZCLFVBQVUsY0FBakIsa0JBQ3FCLElBQUloM0QsS0FBS0EsS0FBS3RPLE1BQU0xakIsRUFBS3FwSCxnQkFBaUJDLHNCQUMvRCwyQkFBT3RnQyxVQUFVLGNBQWpCLGNBQTBDNi9CLEVBQUc3b0gsRUFBS3VqSCxZQUNsRCwyQkFBT3Y2QixVQUFVLFFBQWpCLGVBQXFDaHBGLEVBQUt1cEgsV0FBYyxJQUF4RCxTQUVKLHlCQUFLdmdDLFVBQVUsZ0JBQ1gsdUJBQUdBLFVBQVUsdUJBQXVCNi9CLEVBQUc3b0gsRUFBS2ttQixjQUM1Qyx1QkFBRzhpRSxVQUFVLGdCQUFiLFdBRVFocEYsRUFBS29qSCxTQUFTdHNILE1BQU0sS0FBS2dHLEtBQUksU0FBQTA1QyxHQUFHLE9BQUksNEJBQ2hDejlDLEtBQUssU0FDTGl3RixVQUFVLGdCQUNWdjBGLElBQUsraEQsRUFBTXRqRCxHQUNWMjFILEVBQUdyeUUsY0FVbENnekUsRUFBWSx5QkFBS3hnQyxVQUFVLFFBQzdCLHlCQUFLQSxVQUFVLGFBQ1gseUJBQUtBLFVBQVUsY0FBZix1Q0FNUixPQUFPLHlCQUFLQSxVQUFVLGVBQWU5bUYsR0FBRyxlQUNwQyx5QkFBSzhtRixVQUFVLGFBRVgseUJBQUtBLFVBQVUsbUJBQ1gseUJBQUtBLFVBQVUsZ0JBQ1gseUJBQUtBLFVBQVUsZUFDUCwyQkFDSWp3RixLQUFLLE9BQ0xpd0YsVUFBVSxlQUNWeEksWUFBWSxZQUNaaXBDLFlBQVUsWUFDVnQxSCxNQUFPNnVILEVBQ1ByRCxTQUFVbG1ILEtBQUtrbUgsU0FDZnNJLFFBQVMsU0FBQTN0SCxHQUF5QixLQUFkQSxFQUFFcW9ELFNBQWtCLEVBQUswaUUsb0JBR3JELHlCQUNJemdELFFBQVNuckUsS0FBSzRySCxlQUNkcjhCLFVBQVUsdUJBQ1YsMEJBQU1BLFVBQVUsb0JBQ1osdUJBQUdBLFVBQVUsZUFBZW0zQixjQUFZLFNBRDVDLEtBRWlCMEMsRUFBU2x0SCxPQUFTLGFBQWUsb0JBSzFELHlCQUFLcXpGLFVBQVUsZUFDVjIvQixFQUNLSSxFQUFrQmpzSCxLQUFJLFNBQUFrRCxHQUFJLE9BQUsseUJBQzdCZ3BGLFVBQVUsY0FDVnYwRixJQUFLdUwsRUFBTyxJQUFJZ3lCLEtBQ2hCMDNGLG1CQUFrQjFwSCxFQUFLOFIsY0FDdkI4eUQsUUFBUyxFQUFLK2tELFlBSmUsSUFLOUIzcEgsTUFHRCx1Q0FRdEIseUJBQUtncEYsVUFBVSwwQkFDWCx5QkFBS0EsVUFBVSx1QkFDWCxtREFFSWk2QixFQUFldHRILFFBQVVzdEgsRUFBZW5tSCxLQUFJLFNBQUNrRCxFQUFNOU0sR0FDL0MsT0FBTyw0QkFDSDZGLEtBQUssU0FDTGl3RixVQUFVLGdCQUNWdjBGLElBQUt1TCxFQUFPOU0sRUFDWncySCxtQkFBa0IxcEgsRUFDbEI0a0UsUUFBUyxFQUFLK2tELFlBRWQsdUJBQUczZ0MsVUFBVSxlQUFlbTNCLGNBQVksU0FQckMsTUFPdURuZ0gsUUFROUUseUJBQUtncEYsVUFBVSxnQkFDWCx5QkFBS0EsVUFBVSxhQUdYLHlCQUFLQSxVQUFVLGtCQUNYLDBCQUFNNGdDLFdBQVMsTUFBTWhsRCxRQUFTbnJFLEtBQUtvd0gsVUFBVzdnQyxVQUFXMDZCLEVBQWdCLEdBQUssVUFBOUUsT0FDQSwwQkFBTWtHLFdBQVMsV0FBV2hsRCxRQUFTbnJFLEtBQUtvd0gsVUFBVzdnQyxVQUFZMDZCLEVBQXFCLFNBQUwsSUFBL0UsYUFLQ0EsRUFJS0QsRUFBa0IzbUgsSUFBSWtzSCxHQUh0Qm5HLEVBQVNsdEgsT0FDTGt0SCxFQUFTL2xILElBQUlrc0gsR0FDYlEsRUFNVjNHLEVBQVNsdEgsT0FBUyxFQUNaLHlCQUFLcXpGLFVBQVUsU0FDYix5QkFBS0EsVUFBVSxzQkFBc0Jwa0IsUUFBU25yRSxLQUFLNHJILGdCQUMvQyxtREFFQywwQyxHQXpRbEIvMEUsYUFvU25CODNFLEdBQUsxckcsVUFBWSxDQUNibW1HLFNBQVU3dkMsSUFBVUgsTUFBTSxDQUN0Qm13QyxVQUFXaHdDLElBQVUvaEUsT0FDckJneUcsZUFBZ0Jqd0MsSUFBVWxrRSxNQUMxQit6RyxTQUFVN3ZDLElBQVVsa0UsTUFDcEJvMEcsWUFBYWx3QyxJQUFVL2hFLE9BQ3ZCeFYsT0FBUXUzRSxJQUFVSCxNQUFNLENBQ3BCc3dDLEtBQU1ud0MsSUFBVS9oRSxPQUNoQmkzRyxLQUFNbDFDLElBQVUvaEUsT0FDaEJveUcsU0FBVXJ3QyxJQUFVL2hFLE9BQ3BCcXlHLE9BQVF0d0MsSUFBVS9oRSxPQUNsQnN5RyxVQUFXdndDLElBQVUvaEUsT0FDckJ1eUcsV0FBWXh3QyxJQUFVL2hFLFNBRTFCd3lHLGtCQUFtQnp3QyxJQUFVbGtFLE1BQzdCNDBHLGNBQWUxd0MsSUFBVVgsS0FDekJ3eEMsY0FBZTd3QyxJQUFVL2hFLFNBRTdCcXpHLEtBQU10eEMsSUFBVUgsTUFBTSxDQUNsQnN4QyxTQUFVbnhDLElBQVVsa0UsUUFFeEJxeUcsUUFBU251QyxJQUFVcCtFLFFBSVI0OEIsV0FyQ1MsU0FBQWozQixHQUNwQixNQUFPLENBQ0hzb0gsU0FBVXRvSCxFQUFNc29ILFNBQ2hCeUIsS0FBTS9wSCxFQUFNK3BILFNBR08sU0FBQXpySCxHQUN2QixNQUFPLENBQ0hzb0gsUUFBU2ptSCw2QkFBbUJpbUgsRUFBU3RvSCxNQTZCOUIyNEIsQ0FBNkNxOEUsR0FBV3VhLEtDNVRqRTBCLEcseUlBU0UsT0FMS2hLLEdBQU94ekYsS0FBT2x2QixRQUNmM0QsS0FBSy9ELE1BQU15ckgsUUFBUU4sS0FBSyxDQUFDcDNGLE1BQVEsYUFJOUIseUJBQUt1L0QsVUFBVSxnQkFDbEIseUJBQUtBLFVBQVUsNkJBQ1gsa0JBQUMsR0FBRCxNQUNBLGtCQUFDLEdBQUQsWSxHQVpHMTRDLGFBNEJKOWUsT0FWUyxTQUFBajNCLEdBQ3BCLE1BQU8sTUFHZ0IsU0FBQTFCLEdBQ3ZCLE1BQU8sQ0FDSHNvSCxRQUFTam1ILDZCQUFtQmltSCxFQUFTdG9ILE1BSTlCMjRCLENBQTZDczRGLElDOUJ0REMsSSxtQkFDRixXQUFZcjBILEdBQU8sMEJBQ2YsNEJBQU1BLEtBQ0Q2RSxNQUFRLENBQ1QySCxHQUFJLEdBQ0owaUgsUUFBUyxJQUpFLEUsaUVBT0MsSUFDUi9CLEVBQWFwcEgsS0FBSy9ELE1BQU1tdEgsU0FBeEJBLFNBRUY1ckcsRUFEZXhkLEtBQUsvRCxNQUFNNjlCLFNBQXhCaXBELFNBQ2MxbEYsTUFBTSxLQUN0Qm9MLEVBQUsrVSxFQUFLQSxFQUFLdGhCLE9BQVMsR0FBRzRKLE9BQzNCeXFILEVBQWNuSCxFQUFTcG5ILFFBQU8sU0FBQXVFLEdBQUksT0FBSUEsRUFBS3dqSCxhQUFldGhILEtBRXJDLElBQXZCOG5ILEVBQVlyMEgsU0FDWjhELEtBQUsyMEMsU0FBUyxDQUFDbHNDLEtBQUkwaUgsUUFBVW9GLEVBQVksS0FDekN2d0gsS0FBSy9ELE1BQU15ckgsUUFBUW1GLFVBQVUsQ0FBRTM3RixJQUFLcS9GLEVBQVksR0FBR3IvRixTLHlDQUt4Q3VvRixFQUFXRixHQUMxQixJQUFNaVgsRUFBWWpySCxTQUFTcXlGLGVBQWUscUJBREwsRUFFWTUzRixLQUFLL0QsTUFBTW10SCxTQUFwRGMsRUFGNkIsRUFFN0JBLFVBQVdDLEVBRmtCLEVBRWxCQSxXQUFZQyxFQUZNLEVBRU5BLGNBRS9CLEdBQUkzUSxFQUFVMlAsU0FBU2MsWUFBY0EsRUFBVyxDQUM1QyxHQUFJQSxFQUFXLENBQ1gsSUFBTXVHLEVBQU1sckgsU0FBUytELGNBQWMsT0FDbkNtbkgsRUFBSWhvSCxHQUFLLE9BQ1Rnb0gsRUFBSXZ1RSxVQUFZZ29FLEVBQ2hCc0csRUFBVTdtSCxZQUFZOG1ILEdBRTFCendILEtBQUsvRCxNQUFNeXJILFFBQVEyRSxlQUFlLENBQUU1akgsR0FBS3pJLEtBQUtjLE1BQU0ySCxLQUd4RCxHQUFJZ3hHLEVBQVUyUCxTQUFTZSxhQUFlQSxHQUM5QkEsRUFBWSxDQUVaLElBQU05Z0gsRUFBUTlELFNBQVMrRCxjQUFjLFNBQ2pDRCxFQUFNNjRDLFVBQVlpb0UsRUFDbEJxRyxFQUFVN21ILFlBQVlOLEdBS2xDLEdBQUlvd0csRUFBVTJQLFNBQVNnQixnQkFBa0JBLEVBQWUsQ0FDcEQsSUFBTW9HLEVBQVlqckgsU0FBU3F5RixlQUFlLHVCQUUxQyxHQUFJd3lCLEVBQWUsQ0FDZixJQUFNcUcsRUFBTWxySCxTQUFTK0QsY0FBYyxPQUNuQ21uSCxFQUFJbGhDLFVBQVksMENBQ2hCa2hDLEVBQUl2dUUsVUFBWWtvRSxFQUNoQm9HLEVBQVU3bUgsWUFBWThtSCxHQUV0QixJQUFNbnlGLEVBQU8vNEIsU0FBUytELGNBQWMsUUFDcENnMUIsRUFBS3lnRSxJQUFNLGFBQ1h6Z0UsRUFBS295RixZQUFjLFlBQ25CcHlGLEVBQUtzM0IsS0FBTyx5RkFDWjQ2RCxFQUFVN21ILFlBQVkyMEIsTyw2Q0FLOUJ0K0IsS0FBSy9ELE1BQU15ckgsUUFBUTRFLGdCQUFnQixDQUFFbEMsY0FBZSxLQUNwRHBxSCxLQUFLL0QsTUFBTXlySCxRQUFRb0YsWUFBWSxDQUFFNUMsVUFBVyxLQUM1Q2xxSCxLQUFLL0QsTUFBTXlySCxRQUFRcUYsYUFBYSxDQUFFNUMsV0FBWSxPLCtCQUV6QyxNQUNtQm5xSCxLQUFLYyxNQUFyQjJILEVBREgsRUFDR0EsR0FBSTBpSCxFQURQLEVBQ09BLFFBRFAsRUFFZ0NuckgsS0FBSy9ELE1BQU1tdEgsU0FBeENnQixFQUZILEVBRUdBLGNBQWVGLEVBRmxCLEVBRWtCQSxVQUV2QixPQUFPLHlCQUFLMzZCLFVBQVUsZ0JBRWxCLHlCQUFLQSxVQUFXOW1GLEVBQUssWUFBYyxvQkFFL0IseUJBQUs4bUYsVUFBVSxjQUFmLGtCQUNtQix1QkFBRzM1QixLQUFNdTFELEVBQVFqNkYsS0FBTWk2RixFQUFRajZGLE1BRzdDZzVGLEVBQXlCLG1DQUFiLGtCQUFDLEdBQUQsTUFFakIseUJBQUt6aEgsR0FBRyxzQkFHUix5QkFBS0EsR0FBRyx1QkFDSix5QkFBSzhtRixVQUFXNjZCLEVBQWdCLGdCQUFrQixVQUM5QyxrQkFBQyxHQUFELFNBS1oseUJBQUs3NkIsVUFBVzltRixFQUFLLG1CQUFxQixhQUN0QyxpRSxHQTdGR291QyxjQW9ISjllLE9BZlMsU0FBQWozQixHQUNwQixNQUFPLENBQ0hnNUIsU0FBVWg1QixFQUFNNnpHLE9BQU83NkUsU0FDdkJzdkYsU0FBVXRvSCxFQUFNc29ILGFBSUcsU0FBQWhxSCxHQUN2QixNQUFPLENBQ0hzb0gsUUFBU2ptSCw2QkFBbUJpbUgsRUFBU3RvSCxNQU05QjI0QixDQUE2Q3E4RSxHQUFXa2MsS0NyR3hESyxHLHNMQVRQLE9BQVEsa0JBQUMsR0FBRCxLQUNKLGtCQUFDLEdBQUQsQ0FBT3psRyxLQUFLLFVBQVV6SCxVQUFXZ2tHLEtBQ2pDLGtCQUFDLEdBQUQsQ0FBT3Y4RixLQUFLLFdBQVd6SCxVQUFXbXRHLEtBQ2xDLGtCQUFDLEdBQUQsQ0FBTzFsRyxLQUFLLGVBQWV6SCxVQUFXNnNHLEtBQ3RDLGtCQUFDLEdBQUQsQ0FBT3BsRyxLQUFLLElBQUl6SCxVQUFXNHNHLFUsR0FWbEJ4NUUsYUNvQk5nNkUsRyxZQXRCWCxXQUFZNTBILEdBQU0sNkNBQ1JBLEksaUVBS1krRCxLQUFLL0QsTUFBZmdILE1BQ0Y3RCxTVFBWLGlDQUFPLFdBQU1BLEdBQU4sc0JBQUF5RCxFQUFBLDBEQUNBd2pILEdBQU94ekYsS0FBT2x2QixPQURkLGdDaEIwQjBCa2pILEdBQVEsTUFBTyxZQUFhLElnQjFCdEQsVUFFT3B6RixFQUZQLFNBRzZCQSxFQUFTdnNCLEtBQTlCQSxFQUhSLEVBR1FBLEtBQU1pSCxFQUhkLEVBR2NBLElBSGQsRUFHbUJra0IsT0FIbkIseUNBTVk0MEYsR0FBUyxRQUFTOTRHLEVBQUloUixhQU5sQyxPQVFDcVAsUUFBUXNZLElBQUksaUJBQWtCNWQsR0FDOUI5SCxFQUFTbXNILEdBQWEsQ0FBQzVCLFNBQVV6aUgsS0FUbEMsMkNBQVAseUQsK0JTVVMsSUFDR2pFLEVBQVVqRCxLQUFLL0QsTUFBZmdILE1BQ1IsT0FFSSxrQkFBQyxHQUFELEtBQ0ksa0JBQUMsR0FBRCxDQUFRQSxNQUFPQSxTLEdBaEJYNHpDLGFDd0JMaTZFLEcseUlBakJYLE9BQ0Usa0JBQUMsRUFBRCxDQUFVN3RILE1BQU9BLElBRWYsa0JBQUMsR0FBRCxDQUFpQnVnRixRQUFTQSxJQUV4Qix5QkFBSytMLFVBQVUsT0FDYiw2QkFDRSxrQkFBQyxHQUFELENBQU90c0YsTUFBT0EsYSxHQVpWNHpDLGEsT0NIbEJrNkUsSUFBU250RyxPQUFPLGtCQUFDLEdBQUQsTUFBU3JlLFNBQVNxeUYsZUFBZSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi4vXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyMDkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmaW5lUHJvcGVydHk7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY2xhc3NDYWxsQ2hlY2s7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jcmVhdGVDbGFzczsiLCJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIGFzc2VydFRoaXNJbml0aWFsaXplZCA9IHJlcXVpcmUoXCIuL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKTtcblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9XG5cbiAgcmV0dXJuIGFzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjsiLCJmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZ2V0UHJvdG90eXBlT2Y7IiwidmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4vc2V0UHJvdG90eXBlT2ZcIik7XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW5oZXJpdHM7IiwiaW1wb3J0ICQkb2JzZXJ2YWJsZSBmcm9tICdzeW1ib2wtb2JzZXJ2YWJsZSc7XG5cbi8qKlxuICogVGhlc2UgYXJlIHByaXZhdGUgYWN0aW9uIHR5cGVzIHJlc2VydmVkIGJ5IFJlZHV4LlxuICogRm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHlvdSBtdXN0IHJldHVybiB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIElmIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLlxuICogRG8gbm90IHJlZmVyZW5jZSB0aGVzZSBhY3Rpb24gdHlwZXMgZGlyZWN0bHkgaW4geW91ciBjb2RlLlxuICovXG52YXIgcmFuZG9tU3RyaW5nID0gZnVuY3Rpb24gcmFuZG9tU3RyaW5nKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG59O1xuXG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6IFwiQEByZWR1eC9JTklUXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUkVQTEFDRTogXCJAQHJlZHV4L1JFUExBQ0VcIiArIHJhbmRvbVN0cmluZygpLFxuICBQUk9CRV9VTktOT1dOX0FDVElPTjogZnVuY3Rpb24gUFJPQkVfVU5LTk9XTl9BQ1RJT04oKSB7XG4gICAgcmV0dXJuIFwiQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTlwiICsgcmFuZG9tU3RyaW5nKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IG9iaiBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYXJndW1lbnQgYXBwZWFycyB0byBiZSBhIHBsYWluIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICB2YXIgcHJvdG8gPSBvYmo7XG5cbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0IGxvb2tzIGxpa2UgeW91IGFyZSBwYXNzaW5nIHNldmVyYWwgc3RvcmUgZW5oYW5jZXJzIHRvICcgKyAnY3JlYXRlU3RvcmUoKS4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkLCBjb21wb3NlIHRoZW0gJyArICd0b2dldGhlciB0byBhIHNpbmdsZSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoaXMgbWFrZXMgYSBzaGFsbG93IGNvcHkgb2YgY3VycmVudExpc3RlbmVycyBzbyB3ZSBjYW4gdXNlXG4gICAqIG5leHRMaXN0ZW5lcnMgYXMgYSB0ZW1wb3JhcnkgbGlzdCB3aGlsZSBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogVGhpcyBwcmV2ZW50cyBhbnkgYnVncyBhcm91bmQgY29uc3VtZXJzIGNhbGxpbmdcbiAgICogc3Vic2NyaWJlL3Vuc3Vic2NyaWJlIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG5cblxuICBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuc3Vic2NyaWJlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ0lmIHlvdSB3b3VsZCBsaWtlIHRvIGJlIG5vdGlmaWVkIGFmdGVyIHRoZSBzdG9yZSBoYXMgYmVlbiB1cGRhdGVkLCBzdWJzY3JpYmUgZnJvbSBhICcgKyAnY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlKGxpc3RlbmVyKSBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgIH1cblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gJyArICdVc2UgY3VzdG9tIG1pZGRsZXdhcmUgZm9yIGFzeW5jIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiAnICsgJ0hhdmUgeW91IG1pc3NwZWxsZWQgYSBjb25zdGFudD8nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyOyAvLyBUaGlzIGFjdGlvbiBoYXMgYSBzaW1pbGlhciBlZmZlY3QgdG8gQWN0aW9uVHlwZXMuSU5JVC5cbiAgICAvLyBBbnkgcmVkdWNlcnMgdGhhdCBleGlzdGVkIGluIGJvdGggdGhlIG5ldyBhbmQgb2xkIHJvb3RSZWR1Y2VyXG4gICAgLy8gd2lsbCByZWNlaXZlIHRoZSBwcmV2aW91cyBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgICAvLyB0aGUgbmV3IHN0YXRlIHRyZWUgd2l0aCBhbnkgcmVsZXZhbnQgZGF0YSBmcm9tIHRoZSBvbGQgb25lLlxuXG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUkVQTEFDRVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnRlcm9wZXJhYmlsaXR5IHBvaW50IGZvciBvYnNlcnZhYmxlL3JlYWN0aXZlIGxpYnJhcmllcy5cbiAgICogQHJldHVybnMge29ic2VydmFibGV9IEEgbWluaW1hbCBvYnNlcnZhYmxlIG9mIHN0YXRlIGNoYW5nZXMuXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIG9ic2VydmFibGUgcHJvcG9zYWw6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdGhlIG9ic2VydmVyIHRvIGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9IC8vIFdoZW4gYSBzdG9yZSBpcyBjcmVhdGVkLCBhbiBcIklOSVRcIiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCBzbyB0aGF0IGV2ZXJ5XG4gIC8vIHJlZHVjZXIgcmV0dXJucyB0aGVpciBpbml0aWFsIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAvLyB0aGUgaW5pdGlhbCBzdGF0ZSB0cmVlLlxuXG5cbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgfSk7XG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShrZXksIGFjdGlvbikge1xuICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgdmFyIGFjdGlvbkRlc2NyaXB0aW9uID0gYWN0aW9uVHlwZSAmJiBcImFjdGlvbiBcXFwiXCIgKyBTdHJpbmcoYWN0aW9uVHlwZSkgKyBcIlxcXCJcIiB8fCAnYW4gYWN0aW9uJztcbiAgcmV0dXJuIFwiR2l2ZW4gXCIgKyBhY3Rpb25EZXNjcmlwdGlvbiArIFwiLCByZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQuIFwiICsgXCJUbyBpZ25vcmUgYW4gYWN0aW9uLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgcHJldmlvdXMgc3RhdGUuIFwiICsgXCJJZiB5b3Ugd2FudCB0aGlzIHJlZHVjZXIgdG8gaG9sZCBubyB2YWx1ZSwgeW91IGNhbiByZXR1cm4gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIjtcbn1cblxuZnVuY3Rpb24gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShpbnB1dFN0YXRlLCByZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgYXJndW1lbnROYW1lID0gYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5JTklUID8gJ3ByZWxvYWRlZFN0YXRlIGFyZ3VtZW50IHBhc3NlZCB0byBjcmVhdGVTdG9yZScgOiAncHJldmlvdXMgc3RhdGUgcmVjZWl2ZWQgYnkgdGhlIHJlZHVjZXInO1xuXG4gIGlmIChyZWR1Y2VyS2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJ1N0b3JlIGRvZXMgbm90IGhhdmUgYSB2YWxpZCByZWR1Y2VyLiBNYWtlIHN1cmUgdGhlIGFyZ3VtZW50IHBhc3NlZCAnICsgJ3RvIGNvbWJpbmVSZWR1Y2VycyBpcyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSByZWR1Y2Vycy4nO1xuICB9XG5cbiAgaWYgKCFpc1BsYWluT2JqZWN0KGlucHV0U3RhdGUpKSB7XG4gICAgcmV0dXJuIFwiVGhlIFwiICsgYXJndW1lbnROYW1lICsgXCIgaGFzIHVuZXhwZWN0ZWQgdHlwZSBvZiBcXFwiXCIgKyB7fS50b1N0cmluZy5jYWxsKGlucHV0U3RhdGUpLm1hdGNoKC9cXHMoW2EtenxBLVpdKykvKVsxXSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24uIFwiICsgXCJJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgXCIgKyBcImV4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgXCIgKyBcIm5vdCBiZSB1bmRlZmluZWQuIElmIHlvdSBkb24ndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsIFwiICsgXCJ5b3UgY2FuIHVzZSBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5QUk9CRV9VTktOT1dOX0FDVElPTigpXG4gICAgfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiBcIiArIChcIkRvbid0IHRyeSB0byBoYW5kbGUgXCIgKyBBY3Rpb25UeXBlcy5JTklUICsgXCIgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTsgLy8gVGhpcyBpcyB1c2VkIHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCB3YXJuIGFib3V0IHRoZSBzYW1lXG4gIC8vIGtleXMgbXVsdGlwbGUgdGltZXMuXG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UoX2tleSwgYWN0aW9uKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG5cbiAgICAgIG5leHRTdGF0ZVtfa2V5XSA9IG5leHRTdGF0ZUZvcktleTtcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG5leHRTdGF0ZUZvcktleSAhPT0gcHJldmlvdXNTdGF0ZUZvcktleTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb24gY3JlYXRvcnMsIGludG8gYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBzYW1lIGtleXMsIGJ1dCB3aXRoIGV2ZXJ5IGZ1bmN0aW9uIHdyYXBwZWQgaW50byBhIGBkaXNwYXRjaGAgY2FsbCBzbyB0aGV5XG4gKiBtYXkgYmUgaW52b2tlZCBkaXJlY3RseS4gVGhpcyBpcyBqdXN0IGEgY29udmVuaWVuY2UgbWV0aG9kLCBhcyB5b3UgY2FuIGNhbGxcbiAqIGBzdG9yZS5kaXNwYXRjaChNeUFjdGlvbkNyZWF0b3JzLmRvU29tZXRoaW5nKCkpYCB5b3Vyc2VsZiBqdXN0IGZpbmUuXG4gKlxuICogRm9yIGNvbnZlbmllbmNlLCB5b3UgY2FuIGFsc28gcGFzcyBhbiBhY3Rpb24gY3JlYXRvciBhcyB0aGUgZmlyc3QgYXJndW1lbnQsXG4gKiBhbmQgZ2V0IGEgZGlzcGF0Y2ggd3JhcHBlZCBmdW5jdGlvbiBpbiByZXR1cm4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IGFjdGlvbkNyZWF0b3JzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvblxuICogY3JlYXRvciBmdW5jdGlvbnMuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzYFxuICogc3ludGF4LiBZb3UgbWF5IGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCBUaGUgYGRpc3BhdGNoYCBmdW5jdGlvbiBhdmFpbGFibGUgb24geW91ciBSZWR1eFxuICogc3RvcmUuXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gVGhlIG9iamVjdCBtaW1pY2tpbmcgdGhlIG9yaWdpbmFsIG9iamVjdCwgYnV0IHdpdGhcbiAqIGV2ZXJ5IGFjdGlvbiBjcmVhdG9yIHdyYXBwZWQgaW50byB0aGUgYGRpc3BhdGNoYCBjYWxsLiBJZiB5b3UgcGFzc2VkIGFcbiAqIGZ1bmN0aW9uIGFzIGBhY3Rpb25DcmVhdG9yc2AsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBhbHNvIGJlIGEgc2luZ2xlXG4gKiBmdW5jdGlvbi5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJiaW5kQWN0aW9uQ3JlYXRvcnMgZXhwZWN0ZWQgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sIGluc3RlYWQgcmVjZWl2ZWQgXCIgKyAoYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgYWN0aW9uQ3JlYXRvcnMpICsgXCIuIFwiICsgXCJEaWQgeW91IHdyaXRlIFxcXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCIgaW5zdGVhZCBvZiBcXFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCI/XCIpO1xuICB9XG5cbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gYWN0aW9uQ3JlYXRvcnMpIHtcbiAgICB2YXIgYWN0aW9uQ3JlYXRvciA9IGFjdGlvbkNyZWF0b3JzW2tleV07XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpKTtcbiAgfVxuXG4gIGlmIChlbnVtZXJhYmxlT25seSkga2V5cyA9IGtleXMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgfSk7XG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Rpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuICcgKyAnT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLicpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHZvaWQgMCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkMih7fSwgc3RvcmUsIHtcbiAgICAgICAgZGlzcGF0Y2g6IF9kaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLypcbiAqIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiAqIElmIHRoZSBmdW5jdGlvbiBoYXMgYmVlbiBtaW5pZmllZCBhbmQgTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJywgd2FybiB0aGUgdXNlci5cbiAqL1xuXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgaXNDcnVzaGVkLm5hbWUgPT09ICdzdHJpbmcnICYmIGlzQ3J1c2hlZC5uYW1lICE9PSAnaXNDcnVzaGVkJykge1xuICB3YXJuaW5nKCdZb3UgYXJlIGN1cnJlbnRseSB1c2luZyBtaW5pZmllZCBjb2RlIG91dHNpZGUgb2YgTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiLiAnICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3Igc2V0dGluZyBtb2RlIHRvIHByb2R1Y3Rpb24gaW4gd2VicGFjayAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25jZXB0cy9tb2RlLykgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xufVxuXG5leHBvcnQgeyBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzLCBhcHBseU1pZGRsZXdhcmUsIGJpbmRBY3Rpb25DcmVhdG9ycywgY29tYmluZVJlZHVjZXJzLCBjb21wb3NlLCBjcmVhdGVTdG9yZSB9O1xuIiwiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkOyIsIm1vZHVsZS5leHBvcnRzID0geyAvL2RldmVsb3BtZW50XG4gICAgUE9SVCA6IDgwLFxuICAgIFNFUlZFUl9VUkwgOiBcImh0dHA6Ly9lYzItNTQtMTcyLTIyOS02Ni5jb21wdXRlLTEuYW1hem9uYXdzLmNvbVwiLFxuICAgIFNFUlZFUl9QT1JUIDogODAsXG4gICAgVE9LRU4gOiAneHh4LXByb2QtY3Jhd2xlcidcbn1cblxuLy8gbW9kdWxlLmV4cG9ydHMgPSB7IC8vcHJvZHVjdGlvblxuLy8gICAgIFBPUlQgOiA1MDUwLFxuLy8gICAgIFNFUlZFUl9VUkwgOiBcImVjMi01NC0xNzItMjI5LTY2LmNvbXB1dGUtMS5hbWF6b25hd3MuY29tXCIsXG4vLyAgICAgU0VSVkVSX1BPUlQgOiA4MCxcbi8vICAgICBUT0tFTiA6ICd4eHgtcHJvZC1jcmF3bGVyJ1xuLy8gfSIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBpc0J1ZmZlciA9IHJlcXVpcmUoJ2lzLWJ1ZmZlcicpO1xuXG4vKmdsb2JhbCB0b1N0cmluZzp0cnVlKi9cblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05TJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEZ1bmN0aW9uIGVxdWFsIHRvIG1lcmdlIHdpdGggdGhlIGRpZmZlcmVuY2UgYmVpbmcgdGhhdCBubyByZWZlcmVuY2VcbiAqIHRvIG9yaWdpbmFsIG9iamVjdHMgaXMga2VwdC5cbiAqXG4gKiBAc2VlIG1lcmdlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBkZWVwTWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBkZWVwTWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBkZWVwTWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZGVlcE1lcmdlOiBkZWVwTWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltXG59O1xuIiwidmFyIGFycmF5V2l0aG91dEhvbGVzID0gcmVxdWlyZShcIi4vYXJyYXlXaXRob3V0SG9sZXNcIik7XG5cbnZhciBpdGVyYWJsZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9pdGVyYWJsZVRvQXJyYXlcIik7XG5cbnZhciBub25JdGVyYWJsZVNwcmVhZCA9IHJlcXVpcmUoXCIuL25vbkl0ZXJhYmxlU3ByZWFkXCIpO1xuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3RvQ29uc3VtYWJsZUFycmF5OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbaV0pO1xuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG5cbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gIHJldHVybiBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlcyA9IFtdO1xuICB2YXIgbmV3U3R5bGVzID0ge307XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjc3MgPSBpdGVtWzFdO1xuICAgIHZhciBtZWRpYSA9IGl0ZW1bMl07XG4gICAgdmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG4gICAgdmFyIHBhcnQgPSB7XG4gICAgICBjc3M6IGNzcyxcbiAgICAgIG1lZGlhOiBtZWRpYSxcbiAgICAgIHNvdXJjZU1hcDogc291cmNlTWFwXG4gICAgfTtcblxuICAgIGlmICghbmV3U3R5bGVzW2lkXSkge1xuICAgICAgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICBwYXJ0czogW3BhcnRdXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gc3R5bGVzW2ldO1xuICAgIHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuICAgIHZhciBqID0gMDtcblxuICAgIGlmIChkb21TdHlsZSkge1xuICAgICAgZG9tU3R5bGUucmVmcysrO1xuXG4gICAgICBmb3IgKDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuICAgICAgfVxuXG4gICAgICBmb3IgKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgICBmb3IgKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgcGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge1xuICAgICAgICBpZDogaXRlbS5pZCxcbiAgICAgICAgcmVmczogMSxcbiAgICAgICAgcGFydHM6IHBhcnRzXG4gICAgICB9O1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIG9wdGlvbnMuYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKG9wdGlvbnMuYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgb3B0aW9ucy5hdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIGJ0b2EpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMuYXR0cmlidXRlcyA9IHR5cGVvZiBvcHRpb25zLmF0dHJpYnV0ZXMgPT09ICdvYmplY3QnID8gb3B0aW9ucy5hdHRyaWJ1dGVzIDoge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgdmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcbiAgYWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgdmFyIG1heVJlbW92ZSA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gc3R5bGVzW2ldO1xuICAgICAgdmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cbiAgICAgIGlmIChkb21TdHlsZSkge1xuICAgICAgICBkb21TdHlsZS5yZWZzLS07XG4gICAgICAgIG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobmV3TGlzdCkge1xuICAgICAgdmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcbiAgICAgIGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1heVJlbW92ZS5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfZG9tU3R5bGUgPSBtYXlSZW1vdmVbX2ldO1xuXG4gICAgICBpZiAoX2RvbVN0eWxlLnJlZnMgPT09IDApIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBfZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBfZG9tU3R5bGUucGFydHNbal0oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSBzdHlsZXNJbkRvbVtfZG9tU3R5bGUuaWRdO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuIiwiZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykge1xuICB0cnkge1xuICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTtcbiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlamVjdChlcnJvcik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGluZm8uZG9uZSkge1xuICAgIHJlc29sdmUodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXG4gICAgICBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwibmV4dFwiLCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7XG4gICAgICB9XG5cbiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FzeW5jVG9HZW5lcmF0b3I7IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG52YXIgaGFzQmluYXJ5ID0gcmVxdWlyZSgnaGFzLWJpbmFyeTInKTtcbnZhciBzbGljZUJ1ZmZlciA9IHJlcXVpcmUoJ2FycmF5YnVmZmVyLnNsaWNlJyk7XG52YXIgYWZ0ZXIgPSByZXF1aXJlKCdhZnRlcicpO1xudmFyIHV0ZjggPSByZXF1aXJlKCcuL3V0ZjgnKTtcblxudmFyIGJhc2U2NGVuY29kZXI7XG5pZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykge1xuICBiYXNlNjRlbmNvZGVyID0gcmVxdWlyZSgnYmFzZTY0LWFycmF5YnVmZmVyJyk7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgd2UgYXJlIHJ1bm5pbmcgYW4gYW5kcm9pZCBicm93c2VyLiBUaGF0IHJlcXVpcmVzIHVzIHRvIHVzZVxuICogQXJyYXlCdWZmZXIgd2l0aCBwb2xsaW5nIHRyYW5zcG9ydHMuLi5cbiAqXG4gKiBodHRwOi8vZ2hpbmRhLm5ldC9qcGVnLWJsb2ItYWpheC1hbmRyb2lkL1xuICovXG5cbnZhciBpc0FuZHJvaWQgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvQW5kcm9pZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogQ2hlY2sgaWYgd2UgYXJlIHJ1bm5pbmcgaW4gUGhhbnRvbUpTLlxuICogVXBsb2FkaW5nIGEgQmxvYiB3aXRoIFBoYW50b21KUyBkb2VzIG5vdCB3b3JrIGNvcnJlY3RseSwgYXMgcmVwb3J0ZWQgaGVyZTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hcml5YS9waGFudG9tanMvaXNzdWVzLzExMzk1XG4gKiBAdHlwZSBib29sZWFuXG4gKi9cbnZhciBpc1BoYW50b21KUyA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIC9QaGFudG9tSlMvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIFdoZW4gdHJ1ZSwgYXZvaWRzIHVzaW5nIEJsb2JzIHRvIGVuY29kZSBwYXlsb2Fkcy5cbiAqIEB0eXBlIGJvb2xlYW5cbiAqL1xudmFyIGRvbnRTZW5kQmxvYnMgPSBpc0FuZHJvaWQgfHwgaXNQaGFudG9tSlM7XG5cbi8qKlxuICogQ3VycmVudCBwcm90b2NvbCB2ZXJzaW9uLlxuICovXG5cbmV4cG9ydHMucHJvdG9jb2wgPSAzO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlcy5cbiAqL1xuXG52YXIgcGFja2V0cyA9IGV4cG9ydHMucGFja2V0cyA9IHtcbiAgICBvcGVuOiAgICAgMCAgICAvLyBub24td3NcbiAgLCBjbG9zZTogICAgMSAgICAvLyBub24td3NcbiAgLCBwaW5nOiAgICAgMlxuICAsIHBvbmc6ICAgICAzXG4gICwgbWVzc2FnZTogIDRcbiAgLCB1cGdyYWRlOiAgNVxuICAsIG5vb3A6ICAgICA2XG59O1xuXG52YXIgcGFja2V0c2xpc3QgPSBrZXlzKHBhY2tldHMpO1xuXG4vKipcbiAqIFByZW1hZGUgZXJyb3IgcGFja2V0LlxuICovXG5cbnZhciBlcnIgPSB7IHR5cGU6ICdlcnJvcicsIGRhdGE6ICdwYXJzZXIgZXJyb3InIH07XG5cbi8qKlxuICogQ3JlYXRlIGEgYmxvYiBhcGkgZXZlbiBmb3IgYmxvYiBidWlsZGVyIHdoZW4gdmVuZG9yIHByZWZpeGVzIGV4aXN0XG4gKi9cblxudmFyIEJsb2IgPSByZXF1aXJlKCdibG9iJyk7XG5cbi8qKlxuICogRW5jb2RlcyBhIHBhY2tldC5cbiAqXG4gKiAgICAgPHBhY2tldCB0eXBlIGlkPiBbIDxkYXRhPiBdXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgNWhlbGxvIHdvcmxkXG4gKiAgICAgM1xuICogICAgIDRcbiAqXG4gKiBCaW5hcnkgaXMgZW5jb2RlZCBpbiBhbiBpZGVudGljYWwgcHJpbmNpcGxlXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5lbmNvZGVQYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgdXRmOGVuY29kZSwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBzdXBwb3J0c0JpbmFyeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gc3VwcG9ydHNCaW5hcnk7XG4gICAgc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdXRmOGVuY29kZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gdXRmOGVuY29kZTtcbiAgICB1dGY4ZW5jb2RlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBkYXRhID0gKHBhY2tldC5kYXRhID09PSB1bmRlZmluZWQpXG4gICAgPyB1bmRlZmluZWRcbiAgICA6IHBhY2tldC5kYXRhLmJ1ZmZlciB8fCBwYWNrZXQuZGF0YTtcblxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiBkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZW5jb2RlQXJyYXlCdWZmZXIocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiBkYXRhIGluc3RhbmNlb2YgQmxvYikge1xuICAgIHJldHVybiBlbmNvZGVCbG9iKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8vIG1pZ2h0IGJlIGFuIG9iamVjdCB3aXRoIHsgYmFzZTY0OiB0cnVlLCBkYXRhOiBkYXRhQXNCYXNlNjRTdHJpbmcgfVxuICBpZiAoZGF0YSAmJiBkYXRhLmJhc2U2NCkge1xuICAgIHJldHVybiBlbmNvZGVCYXNlNjRPYmplY3QocGFja2V0LCBjYWxsYmFjayk7XG4gIH1cblxuICAvLyBTZW5kaW5nIGRhdGEgYXMgYSB1dGYtOCBzdHJpbmdcbiAgdmFyIGVuY29kZWQgPSBwYWNrZXRzW3BhY2tldC50eXBlXTtcblxuICAvLyBkYXRhIGZyYWdtZW50IGlzIG9wdGlvbmFsXG4gIGlmICh1bmRlZmluZWQgIT09IHBhY2tldC5kYXRhKSB7XG4gICAgZW5jb2RlZCArPSB1dGY4ZW5jb2RlID8gdXRmOC5lbmNvZGUoU3RyaW5nKHBhY2tldC5kYXRhKSwgeyBzdHJpY3Q6IGZhbHNlIH0pIDogU3RyaW5nKHBhY2tldC5kYXRhKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsYmFjaygnJyArIGVuY29kZWQpO1xuXG59O1xuXG5mdW5jdGlvbiBlbmNvZGVCYXNlNjRPYmplY3QocGFja2V0LCBjYWxsYmFjaykge1xuICAvLyBwYWNrZXQgZGF0YSBpcyBhbiBvYmplY3QgeyBiYXNlNjQ6IHRydWUsIGRhdGE6IGRhdGFBc0Jhc2U2NFN0cmluZyB9XG4gIHZhciBtZXNzYWdlID0gJ2InICsgZXhwb3J0cy5wYWNrZXRzW3BhY2tldC50eXBlXSArIHBhY2tldC5kYXRhLmRhdGE7XG4gIHJldHVybiBjYWxsYmFjayhtZXNzYWdlKTtcbn1cblxuLyoqXG4gKiBFbmNvZGUgcGFja2V0IGhlbHBlcnMgZm9yIGJpbmFyeSB0eXBlc1xuICovXG5cbmZ1bmN0aW9uIGVuY29kZUFycmF5QnVmZmVyKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gIGlmICghc3VwcG9ydHNCaW5hcnkpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQocGFja2V0LCBjYWxsYmFjayk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHBhY2tldC5kYXRhO1xuICB2YXIgY29udGVudEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG4gIHZhciByZXN1bHRCdWZmZXIgPSBuZXcgVWludDhBcnJheSgxICsgZGF0YS5ieXRlTGVuZ3RoKTtcblxuICByZXN1bHRCdWZmZXJbMF0gPSBwYWNrZXRzW3BhY2tldC50eXBlXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250ZW50QXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHRCdWZmZXJbaSsxXSA9IGNvbnRlbnRBcnJheVtpXTtcbiAgfVxuXG4gIHJldHVybiBjYWxsYmFjayhyZXN1bHRCdWZmZXIuYnVmZmVyKTtcbn1cblxuZnVuY3Rpb24gZW5jb2RlQmxvYkFzQXJyYXlCdWZmZXIocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spIHtcbiAgaWYgKCFzdXBwb3J0c0JpbmFyeSkge1xuICAgIHJldHVybiBleHBvcnRzLmVuY29kZUJhc2U2NFBhY2tldChwYWNrZXQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHZhciBmciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gIGZyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHsgdHlwZTogcGFja2V0LnR5cGUsIGRhdGE6IGZyLnJlc3VsdCB9LCBzdXBwb3J0c0JpbmFyeSwgdHJ1ZSwgY2FsbGJhY2spO1xuICB9O1xuICByZXR1cm4gZnIucmVhZEFzQXJyYXlCdWZmZXIocGFja2V0LmRhdGEpO1xufVxuXG5mdW5jdGlvbiBlbmNvZGVCbG9iKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gIGlmICghc3VwcG9ydHNCaW5hcnkpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQocGFja2V0LCBjYWxsYmFjayk7XG4gIH1cblxuICBpZiAoZG9udFNlbmRCbG9icykge1xuICAgIHJldHVybiBlbmNvZGVCbG9iQXNBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjayk7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gbmV3IFVpbnQ4QXJyYXkoMSk7XG4gIGxlbmd0aFswXSA9IHBhY2tldHNbcGFja2V0LnR5cGVdO1xuICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtsZW5ndGguYnVmZmVyLCBwYWNrZXQuZGF0YV0pO1xuXG4gIHJldHVybiBjYWxsYmFjayhibG9iKTtcbn1cblxuLyoqXG4gKiBFbmNvZGVzIGEgcGFja2V0IHdpdGggYmluYXJ5IGRhdGEgaW4gYSBiYXNlNjQgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCwgaGFzIGB0eXBlYCBhbmQgYGRhdGFgXG4gKiBAcmV0dXJuIHtTdHJpbmd9IGJhc2U2NCBlbmNvZGVkIG1lc3NhZ2VcbiAqL1xuXG5leHBvcnRzLmVuY29kZUJhc2U2NFBhY2tldCA9IGZ1bmN0aW9uKHBhY2tldCwgY2FsbGJhY2spIHtcbiAgdmFyIG1lc3NhZ2UgPSAnYicgKyBleHBvcnRzLnBhY2tldHNbcGFja2V0LnR5cGVdO1xuICBpZiAodHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIHBhY2tldC5kYXRhIGluc3RhbmNlb2YgQmxvYikge1xuICAgIHZhciBmciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgZnIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYjY0ID0gZnIucmVzdWx0LnNwbGl0KCcsJylbMV07XG4gICAgICBjYWxsYmFjayhtZXNzYWdlICsgYjY0KTtcbiAgICB9O1xuICAgIHJldHVybiBmci5yZWFkQXNEYXRhVVJMKHBhY2tldC5kYXRhKTtcbiAgfVxuXG4gIHZhciBiNjRkYXRhO1xuICB0cnkge1xuICAgIGI2NGRhdGEgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KHBhY2tldC5kYXRhKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBpUGhvbmUgU2FmYXJpIGRvZXNuJ3QgbGV0IHlvdSBhcHBseSB3aXRoIHR5cGVkIGFycmF5c1xuICAgIHZhciB0eXBlZCA9IG5ldyBVaW50OEFycmF5KHBhY2tldC5kYXRhKTtcbiAgICB2YXIgYmFzaWMgPSBuZXcgQXJyYXkodHlwZWQubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICBiYXNpY1tpXSA9IHR5cGVkW2ldO1xuICAgIH1cbiAgICBiNjRkYXRhID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBiYXNpYyk7XG4gIH1cbiAgbWVzc2FnZSArPSBidG9hKGI2NGRhdGEpO1xuICByZXR1cm4gY2FsbGJhY2sobWVzc2FnZSk7XG59O1xuXG4vKipcbiAqIERlY29kZXMgYSBwYWNrZXQuIENoYW5nZXMgZm9ybWF0IHRvIEJsb2IgaWYgcmVxdWVzdGVkLlxuICpcbiAqIEByZXR1cm4ge09iamVjdH0gd2l0aCBgdHlwZWAgYW5kIGBkYXRhYCAoaWYgYW55KVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVQYWNrZXQgPSBmdW5jdGlvbiAoZGF0YSwgYmluYXJ5VHlwZSwgdXRmOGRlY29kZSkge1xuICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGVycjtcbiAgfVxuICAvLyBTdHJpbmcgZGF0YVxuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKGRhdGEuY2hhckF0KDApID09PSAnYicpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmRlY29kZUJhc2U2NFBhY2tldChkYXRhLnN1YnN0cigxKSwgYmluYXJ5VHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKHV0ZjhkZWNvZGUpIHtcbiAgICAgIGRhdGEgPSB0cnlEZWNvZGUoZGF0YSk7XG4gICAgICBpZiAoZGF0YSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGVycjtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIHR5cGUgPSBkYXRhLmNoYXJBdCgwKTtcblxuICAgIGlmIChOdW1iZXIodHlwZSkgIT0gdHlwZSB8fCAhcGFja2V0c2xpc3RbdHlwZV0pIHtcbiAgICAgIHJldHVybiBlcnI7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEubGVuZ3RoID4gMSkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogcGFja2V0c2xpc3RbdHlwZV0sIGRhdGE6IGRhdGEuc3Vic3RyaW5nKDEpIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IHBhY2tldHNsaXN0W3R5cGVdIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIGFzQXJyYXkgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgdmFyIHR5cGUgPSBhc0FycmF5WzBdO1xuICB2YXIgcmVzdCA9IHNsaWNlQnVmZmVyKGRhdGEsIDEpO1xuICBpZiAoQmxvYiAmJiBiaW5hcnlUeXBlID09PSAnYmxvYicpIHtcbiAgICByZXN0ID0gbmV3IEJsb2IoW3Jlc3RdKTtcbiAgfVxuICByZXR1cm4geyB0eXBlOiBwYWNrZXRzbGlzdFt0eXBlXSwgZGF0YTogcmVzdCB9O1xufTtcblxuZnVuY3Rpb24gdHJ5RGVjb2RlKGRhdGEpIHtcbiAgdHJ5IHtcbiAgICBkYXRhID0gdXRmOC5kZWNvZGUoZGF0YSwgeyBzdHJpY3Q6IGZhbHNlIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIERlY29kZXMgYSBwYWNrZXQgZW5jb2RlZCBpbiBhIGJhc2U2NCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYmFzZTY0IGVuY29kZWQgbWVzc2FnZVxuICogQHJldHVybiB7T2JqZWN0fSB3aXRoIGB0eXBlYCBhbmQgYGRhdGFgIChpZiBhbnkpXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVCYXNlNjRQYWNrZXQgPSBmdW5jdGlvbihtc2csIGJpbmFyeVR5cGUpIHtcbiAgdmFyIHR5cGUgPSBwYWNrZXRzbGlzdFttc2cuY2hhckF0KDApXTtcbiAgaWYgKCFiYXNlNjRlbmNvZGVyKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogdHlwZSwgZGF0YTogeyBiYXNlNjQ6IHRydWUsIGRhdGE6IG1zZy5zdWJzdHIoMSkgfSB9O1xuICB9XG5cbiAgdmFyIGRhdGEgPSBiYXNlNjRlbmNvZGVyLmRlY29kZShtc2cuc3Vic3RyKDEpKTtcblxuICBpZiAoYmluYXJ5VHlwZSA9PT0gJ2Jsb2InICYmIEJsb2IpIHtcbiAgICBkYXRhID0gbmV3IEJsb2IoW2RhdGFdKTtcbiAgfVxuXG4gIHJldHVybiB7IHR5cGU6IHR5cGUsIGRhdGE6IGRhdGEgfTtcbn07XG5cbi8qKlxuICogRW5jb2RlcyBtdWx0aXBsZSBtZXNzYWdlcyAocGF5bG9hZCkuXG4gKlxuICogICAgIDxsZW5ndGg+OmRhdGFcbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgICAxMTpoZWxsbyB3b3JsZDI6aGlcbiAqXG4gKiBJZiBhbnkgY29udGVudHMgYXJlIGJpbmFyeSwgdGhleSB3aWxsIGJlIGVuY29kZWQgYXMgYmFzZTY0IHN0cmluZ3MuIEJhc2U2NFxuICogZW5jb2RlZCBzdHJpbmdzIGFyZSBtYXJrZWQgd2l0aCBhIGIgYmVmb3JlIHRoZSBsZW5ndGggc3BlY2lmaWVyXG4gKlxuICogQHBhcmFtIHtBcnJheX0gcGFja2V0c1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5lbmNvZGVQYXlsb2FkID0gZnVuY3Rpb24gKHBhY2tldHMsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIHN1cHBvcnRzQmluYXJ5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBzdXBwb3J0c0JpbmFyeTtcbiAgICBzdXBwb3J0c0JpbmFyeSA9IG51bGw7XG4gIH1cblxuICB2YXIgaXNCaW5hcnkgPSBoYXNCaW5hcnkocGFja2V0cyk7XG5cbiAgaWYgKHN1cHBvcnRzQmluYXJ5ICYmIGlzQmluYXJ5KSB7XG4gICAgaWYgKEJsb2IgJiYgIWRvbnRTZW5kQmxvYnMpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmVuY29kZVBheWxvYWRBc0Jsb2IocGFja2V0cywgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIHJldHVybiBleHBvcnRzLmVuY29kZVBheWxvYWRBc0FycmF5QnVmZmVyKHBhY2tldHMsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGlmICghcGFja2V0cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gY2FsbGJhY2soJzA6Jyk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRMZW5ndGhIZWFkZXIobWVzc2FnZSkge1xuICAgIHJldHVybiBtZXNzYWdlLmxlbmd0aCArICc6JyArIG1lc3NhZ2U7XG4gIH1cblxuICBmdW5jdGlvbiBlbmNvZGVPbmUocGFja2V0LCBkb25lQ2FsbGJhY2spIHtcbiAgICBleHBvcnRzLmVuY29kZVBhY2tldChwYWNrZXQsICFpc0JpbmFyeSA/IGZhbHNlIDogc3VwcG9ydHNCaW5hcnksIGZhbHNlLCBmdW5jdGlvbihtZXNzYWdlKSB7XG4gICAgICBkb25lQ2FsbGJhY2sobnVsbCwgc2V0TGVuZ3RoSGVhZGVyKG1lc3NhZ2UpKTtcbiAgICB9KTtcbiAgfVxuXG4gIG1hcChwYWNrZXRzLCBlbmNvZGVPbmUsIGZ1bmN0aW9uKGVyciwgcmVzdWx0cykge1xuICAgIHJldHVybiBjYWxsYmFjayhyZXN1bHRzLmpvaW4oJycpKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEFzeW5jIGFycmF5IG1hcCB1c2luZyBhZnRlclxuICovXG5cbmZ1bmN0aW9uIG1hcChhcnksIGVhY2gsIGRvbmUpIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyBBcnJheShhcnkubGVuZ3RoKTtcbiAgdmFyIG5leHQgPSBhZnRlcihhcnkubGVuZ3RoLCBkb25lKTtcblxuICB2YXIgZWFjaFdpdGhJbmRleCA9IGZ1bmN0aW9uKGksIGVsLCBjYikge1xuICAgIGVhY2goZWwsIGZ1bmN0aW9uKGVycm9yLCBtc2cpIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1zZztcbiAgICAgIGNiKGVycm9yLCByZXN1bHQpO1xuICAgIH0pO1xuICB9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgZWFjaFdpdGhJbmRleChpLCBhcnlbaV0sIG5leHQpO1xuICB9XG59XG5cbi8qXG4gKiBEZWNvZGVzIGRhdGEgd2hlbiBhIHBheWxvYWQgaXMgbWF5YmUgZXhwZWN0ZWQuIFBvc3NpYmxlIGJpbmFyeSBjb250ZW50cyBhcmVcbiAqIGRlY29kZWQgZnJvbSB0aGVpciBiYXNlNjQgcmVwcmVzZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YSwgY2FsbGJhY2sgbWV0aG9kXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuZGVjb2RlUGF5bG9hZCA9IGZ1bmN0aW9uIChkYXRhLCBiaW5hcnlUeXBlLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIGRhdGEgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuZGVjb2RlUGF5bG9hZEFzQmluYXJ5KGRhdGEsIGJpbmFyeVR5cGUsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYmluYXJ5VHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gYmluYXJ5VHlwZTtcbiAgICBiaW5hcnlUeXBlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBwYWNrZXQ7XG4gIGlmIChkYXRhID09PSAnJykge1xuICAgIC8vIHBhcnNlciBlcnJvciAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSAnJywgbiwgbXNnO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gZGF0YS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgY2hyID0gZGF0YS5jaGFyQXQoaSk7XG5cbiAgICBpZiAoY2hyICE9PSAnOicpIHtcbiAgICAgIGxlbmd0aCArPSBjaHI7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAobGVuZ3RoID09PSAnJyB8fCAobGVuZ3RoICE9IChuID0gTnVtYmVyKGxlbmd0aCkpKSkge1xuICAgICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxuICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gICAgfVxuXG4gICAgbXNnID0gZGF0YS5zdWJzdHIoaSArIDEsIG4pO1xuXG4gICAgaWYgKGxlbmd0aCAhPSBtc2cubGVuZ3RoKSB7XG4gICAgICAvLyBwYXJzZXIgZXJyb3IgLSBpZ25vcmluZyBwYXlsb2FkXG4gICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgICB9XG5cbiAgICBpZiAobXNnLmxlbmd0aCkge1xuICAgICAgcGFja2V0ID0gZXhwb3J0cy5kZWNvZGVQYWNrZXQobXNnLCBiaW5hcnlUeXBlLCBmYWxzZSk7XG5cbiAgICAgIGlmIChlcnIudHlwZSA9PT0gcGFja2V0LnR5cGUgJiYgZXJyLmRhdGEgPT09IHBhY2tldC5kYXRhKSB7XG4gICAgICAgIC8vIHBhcnNlciBlcnJvciBpbiBpbmRpdmlkdWFsIHBhY2tldCAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gICAgICB9XG5cbiAgICAgIHZhciByZXQgPSBjYWxsYmFjayhwYWNrZXQsIGkgKyBuLCBsKTtcbiAgICAgIGlmIChmYWxzZSA9PT0gcmV0KSByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYWR2YW5jZSBjdXJzb3JcbiAgICBpICs9IG47XG4gICAgbGVuZ3RoID0gJyc7XG4gIH1cblxuICBpZiAobGVuZ3RoICE9PSAnJykge1xuICAgIC8vIHBhcnNlciBlcnJvciAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgfVxuXG59O1xuXG4vKipcbiAqIEVuY29kZXMgbXVsdGlwbGUgbWVzc2FnZXMgKHBheWxvYWQpIGFzIGJpbmFyeS5cbiAqXG4gKiA8MSA9IGJpbmFyeSwgMCA9IHN0cmluZz48bnVtYmVyIGZyb20gMC05PjxudW1iZXIgZnJvbSAwLTk+Wy4uLl08bnVtYmVyXG4gKiAyNTU+PGRhdGE+XG4gKlxuICogRXhhbXBsZTpcbiAqIDEgMyAyNTUgMSAyIDMsIGlmIHRoZSBiaW5hcnkgY29udGVudHMgYXJlIGludGVycHJldGVkIGFzIDggYml0IGludGVnZXJzXG4gKlxuICogQHBhcmFtIHtBcnJheX0gcGFja2V0c1xuICogQHJldHVybiB7QXJyYXlCdWZmZXJ9IGVuY29kZWQgcGF5bG9hZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5lbmNvZGVQYXlsb2FkQXNBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKHBhY2tldHMsIGNhbGxiYWNrKSB7XG4gIGlmICghcGFja2V0cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gY2FsbGJhY2sobmV3IEFycmF5QnVmZmVyKDApKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuY29kZU9uZShwYWNrZXQsIGRvbmVDYWxsYmFjaykge1xuICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHBhY2tldCwgdHJ1ZSwgdHJ1ZSwgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIGRvbmVDYWxsYmFjayhudWxsLCBkYXRhKTtcbiAgICB9KTtcbiAgfVxuXG4gIG1hcChwYWNrZXRzLCBlbmNvZGVPbmUsIGZ1bmN0aW9uKGVyciwgZW5jb2RlZFBhY2tldHMpIHtcbiAgICB2YXIgdG90YWxMZW5ndGggPSBlbmNvZGVkUGFja2V0cy5yZWR1Y2UoZnVuY3Rpb24oYWNjLCBwKSB7XG4gICAgICB2YXIgbGVuO1xuICAgICAgaWYgKHR5cGVvZiBwID09PSAnc3RyaW5nJyl7XG4gICAgICAgIGxlbiA9IHAubGVuZ3RoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGVuID0gcC5ieXRlTGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYyArIGxlbi50b1N0cmluZygpLmxlbmd0aCArIGxlbiArIDI7IC8vIHN0cmluZy9iaW5hcnkgaWRlbnRpZmllciArIHNlcGFyYXRvciA9IDJcbiAgICB9LCAwKTtcblxuICAgIHZhciByZXN1bHRBcnJheSA9IG5ldyBVaW50OEFycmF5KHRvdGFsTGVuZ3RoKTtcblxuICAgIHZhciBidWZmZXJJbmRleCA9IDA7XG4gICAgZW5jb2RlZFBhY2tldHMuZm9yRWFjaChmdW5jdGlvbihwKSB7XG4gICAgICB2YXIgaXNTdHJpbmcgPSB0eXBlb2YgcCA9PT0gJ3N0cmluZyc7XG4gICAgICB2YXIgYWIgPSBwO1xuICAgICAgaWYgKGlzU3RyaW5nKSB7XG4gICAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkocC5sZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2aWV3W2ldID0gcC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB9XG4gICAgICAgIGFiID0gdmlldy5idWZmZXI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1N0cmluZykgeyAvLyBub3QgdHJ1ZSBiaW5hcnlcbiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSAwO1xuICAgICAgfSBlbHNlIHsgLy8gdHJ1ZSBiaW5hcnlcbiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSAxO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGVuU3RyID0gYWIuYnl0ZUxlbmd0aC50b1N0cmluZygpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5TdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSBwYXJzZUludChsZW5TdHJbaV0pO1xuICAgICAgfVxuICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSAyNTU7XG5cbiAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYWIpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdEFycmF5W2J1ZmZlckluZGV4KytdID0gdmlld1tpXTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBjYWxsYmFjayhyZXN1bHRBcnJheS5idWZmZXIpO1xuICB9KTtcbn07XG5cbi8qKlxuICogRW5jb2RlIGFzIEJsb2JcbiAqL1xuXG5leHBvcnRzLmVuY29kZVBheWxvYWRBc0Jsb2IgPSBmdW5jdGlvbihwYWNrZXRzLCBjYWxsYmFjaykge1xuICBmdW5jdGlvbiBlbmNvZGVPbmUocGFja2V0LCBkb25lQ2FsbGJhY2spIHtcbiAgICBleHBvcnRzLmVuY29kZVBhY2tldChwYWNrZXQsIHRydWUsIHRydWUsIGZ1bmN0aW9uKGVuY29kZWQpIHtcbiAgICAgIHZhciBiaW5hcnlJZGVudGlmaWVyID0gbmV3IFVpbnQ4QXJyYXkoMSk7XG4gICAgICBiaW5hcnlJZGVudGlmaWVyWzBdID0gMTtcbiAgICAgIGlmICh0eXBlb2YgZW5jb2RlZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShlbmNvZGVkLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZW5jb2RlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZpZXdbaV0gPSBlbmNvZGVkLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZW5jb2RlZCA9IHZpZXcuYnVmZmVyO1xuICAgICAgICBiaW5hcnlJZGVudGlmaWVyWzBdID0gMDtcbiAgICAgIH1cblxuICAgICAgdmFyIGxlbiA9IChlbmNvZGVkIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpXG4gICAgICAgID8gZW5jb2RlZC5ieXRlTGVuZ3RoXG4gICAgICAgIDogZW5jb2RlZC5zaXplO1xuXG4gICAgICB2YXIgbGVuU3RyID0gbGVuLnRvU3RyaW5nKCk7XG4gICAgICB2YXIgbGVuZ3RoQXJ5ID0gbmV3IFVpbnQ4QXJyYXkobGVuU3RyLmxlbmd0aCArIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5TdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGVuZ3RoQXJ5W2ldID0gcGFyc2VJbnQobGVuU3RyW2ldKTtcbiAgICAgIH1cbiAgICAgIGxlbmd0aEFyeVtsZW5TdHIubGVuZ3RoXSA9IDI1NTtcblxuICAgICAgaWYgKEJsb2IpIHtcbiAgICAgICAgdmFyIGJsb2IgPSBuZXcgQmxvYihbYmluYXJ5SWRlbnRpZmllci5idWZmZXIsIGxlbmd0aEFyeS5idWZmZXIsIGVuY29kZWRdKTtcbiAgICAgICAgZG9uZUNhbGxiYWNrKG51bGwsIGJsb2IpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbWFwKHBhY2tldHMsIGVuY29kZU9uZSwgZnVuY3Rpb24oZXJyLCByZXN1bHRzKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBCbG9iKHJlc3VsdHMpKTtcbiAgfSk7XG59O1xuXG4vKlxuICogRGVjb2RlcyBkYXRhIHdoZW4gYSBwYXlsb2FkIGlzIG1heWJlIGV4cGVjdGVkLiBTdHJpbmdzIGFyZSBkZWNvZGVkIGJ5XG4gKiBpbnRlcnByZXRpbmcgZWFjaCBieXRlIGFzIGEga2V5IGNvZGUgZm9yIGVudHJpZXMgbWFya2VkIHRvIHN0YXJ0IHdpdGggMC4gU2VlXG4gKiBkZXNjcmlwdGlvbiBvZiBlbmNvZGVQYXlsb2FkQXNCaW5hcnlcbiAqXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBkYXRhLCBjYWxsYmFjayBtZXRob2RcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVQYXlsb2FkQXNCaW5hcnkgPSBmdW5jdGlvbiAoZGF0YSwgYmluYXJ5VHlwZSwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBiaW5hcnlUeXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBiaW5hcnlUeXBlO1xuICAgIGJpbmFyeVR5cGUgPSBudWxsO1xuICB9XG5cbiAgdmFyIGJ1ZmZlclRhaWwgPSBkYXRhO1xuICB2YXIgYnVmZmVycyA9IFtdO1xuXG4gIHdoaWxlIChidWZmZXJUYWlsLmJ5dGVMZW5ndGggPiAwKSB7XG4gICAgdmFyIHRhaWxBcnJheSA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlclRhaWwpO1xuICAgIHZhciBpc1N0cmluZyA9IHRhaWxBcnJheVswXSA9PT0gMDtcbiAgICB2YXIgbXNnTGVuZ3RoID0gJyc7XG5cbiAgICBmb3IgKHZhciBpID0gMTsgOyBpKyspIHtcbiAgICAgIGlmICh0YWlsQXJyYXlbaV0gPT09IDI1NSkgYnJlYWs7XG5cbiAgICAgIC8vIDMxMCA9IGNoYXIgbGVuZ3RoIG9mIE51bWJlci5NQVhfVkFMVUVcbiAgICAgIGlmIChtc2dMZW5ndGgubGVuZ3RoID4gMzEwKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICAgICAgfVxuXG4gICAgICBtc2dMZW5ndGggKz0gdGFpbEFycmF5W2ldO1xuICAgIH1cblxuICAgIGJ1ZmZlclRhaWwgPSBzbGljZUJ1ZmZlcihidWZmZXJUYWlsLCAyICsgbXNnTGVuZ3RoLmxlbmd0aCk7XG4gICAgbXNnTGVuZ3RoID0gcGFyc2VJbnQobXNnTGVuZ3RoKTtcblxuICAgIHZhciBtc2cgPSBzbGljZUJ1ZmZlcihidWZmZXJUYWlsLCAwLCBtc2dMZW5ndGgpO1xuICAgIGlmIChpc1N0cmluZykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbXNnID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheShtc2cpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaVBob25lIFNhZmFyaSBkb2Vzbid0IGxldCB5b3UgYXBwbHkgdG8gdHlwZWQgYXJyYXlzXG4gICAgICAgIHZhciB0eXBlZCA9IG5ldyBVaW50OEFycmF5KG1zZyk7XG4gICAgICAgIG1zZyA9ICcnO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbXNnICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodHlwZWRbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgYnVmZmVycy5wdXNoKG1zZyk7XG4gICAgYnVmZmVyVGFpbCA9IHNsaWNlQnVmZmVyKGJ1ZmZlclRhaWwsIG1zZ0xlbmd0aCk7XG4gIH1cblxuICB2YXIgdG90YWwgPSBidWZmZXJzLmxlbmd0aDtcbiAgYnVmZmVycy5mb3JFYWNoKGZ1bmN0aW9uKGJ1ZmZlciwgaSkge1xuICAgIGNhbGxiYWNrKGV4cG9ydHMuZGVjb2RlUGFja2V0KGJ1ZmZlciwgYmluYXJ5VHlwZSwgdHJ1ZSksIGksIHRvdGFsKTtcbiAgfSk7XG59O1xuIiwidmFyIFBhcnNlciA9IHJlcXVpcmUoXCIuL1BhcnNlci5qc1wiKTtcbnZhciBEb21IYW5kbGVyID0gcmVxdWlyZShcImRvbWhhbmRsZXJcIik7XG5cbmZ1bmN0aW9uIGRlZmluZVByb3AobmFtZSwgdmFsdWUpIHtcbiAgICBkZWxldGUgbW9kdWxlLmV4cG9ydHNbbmFtZV07XG4gICAgbW9kdWxlLmV4cG9ydHNbbmFtZV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIFBhcnNlcjogUGFyc2VyLFxuICAgIFRva2VuaXplcjogcmVxdWlyZShcIi4vVG9rZW5pemVyLmpzXCIpLFxuICAgIEVsZW1lbnRUeXBlOiByZXF1aXJlKFwiZG9tZWxlbWVudHR5cGVcIiksXG4gICAgRG9tSGFuZGxlcjogRG9tSGFuZGxlcixcbiAgICBnZXQgRmVlZEhhbmRsZXIoKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmVQcm9wKFwiRmVlZEhhbmRsZXJcIiwgcmVxdWlyZShcIi4vRmVlZEhhbmRsZXIuanNcIikpO1xuICAgIH0sXG4gICAgZ2V0IFN0cmVhbSgpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZVByb3AoXCJTdHJlYW1cIiwgcmVxdWlyZShcIi4vU3RyZWFtLmpzXCIpKTtcbiAgICB9LFxuICAgIGdldCBXcml0YWJsZVN0cmVhbSgpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZVByb3AoXCJXcml0YWJsZVN0cmVhbVwiLCByZXF1aXJlKFwiLi9Xcml0YWJsZVN0cmVhbS5qc1wiKSk7XG4gICAgfSxcbiAgICBnZXQgUHJveHlIYW5kbGVyKCkge1xuICAgICAgICByZXR1cm4gZGVmaW5lUHJvcChcIlByb3h5SGFuZGxlclwiLCByZXF1aXJlKFwiLi9Qcm94eUhhbmRsZXIuanNcIikpO1xuICAgIH0sXG4gICAgZ2V0IERvbVV0aWxzKCkge1xuICAgICAgICByZXR1cm4gZGVmaW5lUHJvcChcIkRvbVV0aWxzXCIsIHJlcXVpcmUoXCJkb211dGlsc1wiKSk7XG4gICAgfSxcbiAgICBnZXQgQ29sbGVjdGluZ0hhbmRsZXIoKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmVQcm9wKFxuICAgICAgICAgICAgXCJDb2xsZWN0aW5nSGFuZGxlclwiLFxuICAgICAgICAgICAgcmVxdWlyZShcIi4vQ29sbGVjdGluZ0hhbmRsZXIuanNcIilcbiAgICAgICAgKTtcbiAgICB9LFxuICAgIC8vIEZvciBsZWdhY3kgc3VwcG9ydFxuICAgIERlZmF1bHRIYW5kbGVyOiBEb21IYW5kbGVyLFxuICAgIGdldCBSc3NIYW5kbGVyKCkge1xuICAgICAgICByZXR1cm4gZGVmaW5lUHJvcChcIlJzc0hhbmRsZXJcIiwgdGhpcy5GZWVkSGFuZGxlcik7XG4gICAgfSxcbiAgICAvL2hlbHBlciBtZXRob2RzXG4gICAgcGFyc2VET006IGZ1bmN0aW9uKGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBuZXcgRG9tSGFuZGxlcihvcHRpb25zKTtcbiAgICAgICAgbmV3IFBhcnNlcihoYW5kbGVyLCBvcHRpb25zKS5lbmQoZGF0YSk7XG4gICAgICAgIHJldHVybiBoYW5kbGVyLmRvbTtcbiAgICB9LFxuICAgIHBhcnNlRmVlZDogZnVuY3Rpb24oZmVlZCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgaGFuZGxlciA9IG5ldyBtb2R1bGUuZXhwb3J0cy5GZWVkSGFuZGxlcihvcHRpb25zKTtcbiAgICAgICAgbmV3IFBhcnNlcihoYW5kbGVyLCBvcHRpb25zKS5lbmQoZmVlZCk7XG4gICAgICAgIHJldHVybiBoYW5kbGVyLmRvbTtcbiAgICB9LFxuICAgIGNyZWF0ZURvbVN0cmVhbTogZnVuY3Rpb24oY2IsIG9wdGlvbnMsIGVsZW1lbnRDYikge1xuICAgICAgICB2YXIgaGFuZGxlciA9IG5ldyBEb21IYW5kbGVyKGNiLCBvcHRpb25zLCBlbGVtZW50Q2IpO1xuICAgICAgICByZXR1cm4gbmV3IFBhcnNlcihoYW5kbGVyLCBvcHRpb25zKTtcbiAgICB9LFxuICAgIC8vIExpc3Qgb2YgYWxsIGV2ZW50cyB0aGF0IHRoZSBwYXJzZXIgZW1pdHNcbiAgICBFVkVOVFM6IHtcbiAgICAgICAgLyogRm9ybWF0OiBldmVudG5hbWU6IG51bWJlciBvZiBhcmd1bWVudHMgKi9cbiAgICAgICAgYXR0cmlidXRlOiAyLFxuICAgICAgICBjZGF0YXN0YXJ0OiAwLFxuICAgICAgICBjZGF0YWVuZDogMCxcbiAgICAgICAgdGV4dDogMSxcbiAgICAgICAgcHJvY2Vzc2luZ2luc3RydWN0aW9uOiAyLFxuICAgICAgICBjb21tZW50OiAxLFxuICAgICAgICBjb21tZW50ZW5kOiAwLFxuICAgICAgICBjbG9zZXRhZzogMSxcbiAgICAgICAgb3BlbnRhZzogMixcbiAgICAgICAgb3BlbnRhZ25hbWU6IDEsXG4gICAgICAgIGVycm9yOiAxLFxuICAgICAgICBlbmQ6IDBcbiAgICB9XG59O1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBEdWUgdG8gdmFyaW91cyBicm93c2VyIGJ1Z3MsIHNvbWV0aW1lcyB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZCBldmVuXG4gKiB3aGVuIHRoZSBicm93c2VyIHN1cHBvcnRzIHR5cGVkIGFycmF5cy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsXG4gKiAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguXG4gKlxuICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG4gKlxuICogICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cblxuICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXlcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUICE9PSB1bmRlZmluZWRcbiAgPyBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVFxuICA6IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuLypcbiAqIEV4cG9ydCBrTWF4TGVuZ3RoIGFmdGVyIHR5cGVkIGFycmF5IHN1cHBvcnQgaXMgZGV0ZXJtaW5lZC5cbiAqL1xuZXhwb3J0cy5rTWF4TGVuZ3RoID0ga01heExlbmd0aCgpXG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBhcnIuX19wcm90b19fID0ge19fcHJvdG9fXzogVWludDhBcnJheS5wcm90b3R5cGUsIGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfX1cbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MiAmJiAvLyB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZFxuICAgICAgICB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nICYmIC8vIGNocm9tZSA5LTEwIGxhY2sgYHN1YmFycmF5YFxuICAgICAgICBhcnIuc3ViYXJyYXkoMSwgMSkuYnl0ZUxlbmd0aCA9PT0gMCAvLyBpZTEwIGhhcyBicm9rZW4gYHN1YmFycmF5YFxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24ga01heExlbmd0aCAoKSB7XG4gIHJldHVybiBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVFxuICAgID8gMHg3ZmZmZmZmZlxuICAgIDogMHgzZmZmZmZmZlxufVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKHRoYXQsIGxlbmd0aCkge1xuICBpZiAoa01heExlbmd0aCgpIDwgbGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoJylcbiAgfVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICBpZiAodGhhdCA9PT0gbnVsbCkge1xuICAgICAgdGhhdCA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuICAgIH1cbiAgICB0aGF0Lmxlbmd0aCA9IGxlbmd0aFxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUodGhpcywgYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKHRoaXMsIGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuLy8gVE9ETzogTGVnYWN5LCBub3QgbmVlZGVkIGFueW1vcmUuIFJlbW92ZSBpbiBuZXh0IG1ham9yIHZlcnNpb24uXG5CdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGFyci5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gZnJvbSAodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoYXQsIHZhbHVlKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbmlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG4gIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAmJlxuICAgICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gICAgLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTdcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLCBTeW1ib2wuc3BlY2llcywge1xuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2MobnVsbCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlICh0aGF0LCBzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7XG4gICAgICB0aGF0W2ldID0gMFxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHRoYXQsIHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSB0aGF0LndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICB0aGF0ID0gdGhhdC5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGFycmF5LmJ5dGVMZW5ndGggLy8gdGhpcyB0aHJvd3MgaWYgYGFycmF5YCBpcyBub3QgYSB2YWxpZCBBcnJheUJ1ZmZlclxuXG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdvZmZzZXRcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ2xlbmd0aFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gYXJyYXlcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgdGhhdCA9IGZyb21BcnJheUxpa2UodGhhdCwgYXJyYXkpXG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAodGhhdCwgb2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIHZhciBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuKVxuXG4gICAgaWYgKHRoYXQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhhdFxuICAgIH1cblxuICAgIG9iai5jb3B5KHRoYXQsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gdGhhdFxuICB9XG5cbiAgaWYgKG9iaikge1xuICAgIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIG9iaikge1xuICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBpc25hbihvYmoubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIDApXG4gICAgICB9XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmopXG4gICAgfVxuXG4gICAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBpc0FycmF5KG9iai5kYXRhKSkge1xuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqLmRhdGEpXG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpXG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBrTWF4TGVuZ3RoKClgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0ga01heExlbmd0aCgpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIGtNYXhMZW5ndGgoKS50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcilcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIHZhciB4ID0gYS5sZW5ndGhcbiAgdmFyIHkgPSBiLmxlbmd0aFxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIWlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYnVmID0gbGlzdFtpXVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IHN0cmluZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoZSBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIGFuZCBgaXMtYnVmZmVyYCAoaW4gU2FmYXJpIDUtNykgdG8gZGV0ZWN0XG4vLyBCdWZmZXIgaW5zdGFuY2VzLlxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCB8IDBcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKVxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0ICAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJlxuICAgICAgICB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbIHZhbCBdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICB2YXIgaW5kZXhTaXplID0gMVxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaVxuICBpZiAoZGlyKSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKGlzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCB8IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICAvLyBsZWdhY3kgd3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpIC0gcmVtb3ZlIGluIHYwLjEzXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkge1xuICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDIpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlICYgKDB4ZmYgPDwgKDggKiAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSkpKSA+Pj5cbiAgICAgIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpICogOFxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmZcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSAwXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcbiAgdmFyIGlcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmIChjb2RlIDwgMjU2KSB7XG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiB1dGY4VG9CeXRlcyhuZXcgQnVmZmVyKHZhbCwgZW5jb2RpbmcpLnRvU3RyaW5nKCkpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgdmFyIGNvZGVQb2ludFxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGlzbmFuICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gdmFsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG4iLCIvL1R5cGVzIG9mIGVsZW1lbnRzIGZvdW5kIGluIHRoZSBET01cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRUZXh0OiBcInRleHRcIiwgLy9UZXh0XG5cdERpcmVjdGl2ZTogXCJkaXJlY3RpdmVcIiwgLy88PyAuLi4gPz5cblx0Q29tbWVudDogXCJjb21tZW50XCIsIC8vPCEtLSAuLi4gLS0+XG5cdFNjcmlwdDogXCJzY3JpcHRcIiwgLy88c2NyaXB0PiB0YWdzXG5cdFN0eWxlOiBcInN0eWxlXCIsIC8vPHN0eWxlPiB0YWdzXG5cdFRhZzogXCJ0YWdcIiwgLy9BbnkgdGFnXG5cdENEQVRBOiBcImNkYXRhXCIsIC8vPCFbQ0RBVEFbIC4uLiBdXT5cblx0RG9jdHlwZTogXCJkb2N0eXBlXCIsXG5cblx0aXNUYWc6IGZ1bmN0aW9uKGVsZW0pe1xuXHRcdHJldHVybiBlbGVtLnR5cGUgPT09IFwidGFnXCIgfHwgZWxlbS50eXBlID09PSBcInNjcmlwdFwiIHx8IGVsZW0udHlwZSA9PT0gXCJzdHlsZVwiO1xuXHR9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgICBjb250ZXh0VHlwZXM6IHRydWUsXG4gICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgIG1peGluczogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgbmFtZTogdHJ1ZSxcbiAgICBsZW5ndGg6IHRydWUsXG4gICAgcHJvdG90eXBlOiB0cnVlLFxuICAgIGNhbGxlcjogdHJ1ZSxcbiAgICBjYWxsZWU6IHRydWUsXG4gICAgYXJndW1lbnRzOiB0cnVlLFxuICAgIGFyaXR5OiB0cnVlXG59O1xuXG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgICAnJCR0eXBlb2YnOiB0cnVlLFxuICAgIHJlbmRlcjogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlXG59O1xuXG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAgICckJHR5cGVvZic6IHRydWUsXG4gICAgY29tcGFyZTogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgIHR5cGU6IHRydWVcbn07XG5cbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tSZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgICBpZiAoUmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgICAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICAgIH1cbiAgICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcblxuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICAgIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuXG4gICAgICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgICAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE3IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpICYmIGFyZy5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIGlubmVyID0gY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpO1xuXHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goaW5uZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRjbGFzc05hbWVzLmRlZmF1bHQgPSBjbGFzc05hbWVzO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIvKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cblxuLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKi9cblxuZXhwb3J0cy5sb2cgPSBsb2c7XG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9IGxvY2Fsc3RvcmFnZSgpO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFtcblx0JyMwMDAwQ0MnLFxuXHQnIzAwMDBGRicsXG5cdCcjMDAzM0NDJyxcblx0JyMwMDMzRkYnLFxuXHQnIzAwNjZDQycsXG5cdCcjMDA2NkZGJyxcblx0JyMwMDk5Q0MnLFxuXHQnIzAwOTlGRicsXG5cdCcjMDBDQzAwJyxcblx0JyMwMENDMzMnLFxuXHQnIzAwQ0M2NicsXG5cdCcjMDBDQzk5Jyxcblx0JyMwMENDQ0MnLFxuXHQnIzAwQ0NGRicsXG5cdCcjMzMwMENDJyxcblx0JyMzMzAwRkYnLFxuXHQnIzMzMzNDQycsXG5cdCcjMzMzM0ZGJyxcblx0JyMzMzY2Q0MnLFxuXHQnIzMzNjZGRicsXG5cdCcjMzM5OUNDJyxcblx0JyMzMzk5RkYnLFxuXHQnIzMzQ0MwMCcsXG5cdCcjMzNDQzMzJyxcblx0JyMzM0NDNjYnLFxuXHQnIzMzQ0M5OScsXG5cdCcjMzNDQ0NDJyxcblx0JyMzM0NDRkYnLFxuXHQnIzY2MDBDQycsXG5cdCcjNjYwMEZGJyxcblx0JyM2NjMzQ0MnLFxuXHQnIzY2MzNGRicsXG5cdCcjNjZDQzAwJyxcblx0JyM2NkNDMzMnLFxuXHQnIzk5MDBDQycsXG5cdCcjOTkwMEZGJyxcblx0JyM5OTMzQ0MnLFxuXHQnIzk5MzNGRicsXG5cdCcjOTlDQzAwJyxcblx0JyM5OUNDMzMnLFxuXHQnI0NDMDAwMCcsXG5cdCcjQ0MwMDMzJyxcblx0JyNDQzAwNjYnLFxuXHQnI0NDMDA5OScsXG5cdCcjQ0MwMENDJyxcblx0JyNDQzAwRkYnLFxuXHQnI0NDMzMwMCcsXG5cdCcjQ0MzMzMzJyxcblx0JyNDQzMzNjYnLFxuXHQnI0NDMzM5OScsXG5cdCcjQ0MzM0NDJyxcblx0JyNDQzMzRkYnLFxuXHQnI0NDNjYwMCcsXG5cdCcjQ0M2NjMzJyxcblx0JyNDQzk5MDAnLFxuXHQnI0NDOTkzMycsXG5cdCcjQ0NDQzAwJyxcblx0JyNDQ0NDMzMnLFxuXHQnI0ZGMDAwMCcsXG5cdCcjRkYwMDMzJyxcblx0JyNGRjAwNjYnLFxuXHQnI0ZGMDA5OScsXG5cdCcjRkYwMENDJyxcblx0JyNGRjAwRkYnLFxuXHQnI0ZGMzMwMCcsXG5cdCcjRkYzMzMzJyxcblx0JyNGRjMzNjYnLFxuXHQnI0ZGMzM5OScsXG5cdCcjRkYzM0NDJyxcblx0JyNGRjMzRkYnLFxuXHQnI0ZGNjYwMCcsXG5cdCcjRkY2NjMzJyxcblx0JyNGRjk5MDAnLFxuXHQnI0ZGOTkzMycsXG5cdCcjRkZDQzAwJyxcblx0JyNGRkNDMzMnXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG5cdC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcblx0Ly8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2Vcblx0Ly8gZXhwbGljaXRseVxuXHRpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgKHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicgfHwgd2luZG93LnByb2Nlc3MuX19ud2pzKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Ly8gSW50ZXJuZXQgRXhwbG9yZXIgYW5kIEVkZ2UgZG8gbm90IHN1cHBvcnQgY29sb3JzLlxuXHRpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goLyhlZGdlfHRyaWRlbnQpXFwvKFxcZCspLykpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBJcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuXHQvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuXHRyZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcblx0XHQvLyBJcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG5cdFx0KHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcblx0XHQvLyBJcyBmaXJlZm94ID49IHYzMT9cblx0XHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcblx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSkgfHxcblx0XHQvLyBEb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG5cdFx0KHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pKTtcbn1cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcblx0YXJnc1swXSA9ICh0aGlzLnVzZUNvbG9ycyA/ICclYycgOiAnJykgK1xuXHRcdHRoaXMubmFtZXNwYWNlICtcblx0XHQodGhpcy51c2VDb2xvcnMgPyAnICVjJyA6ICcgJykgK1xuXHRcdGFyZ3NbMF0gK1xuXHRcdCh0aGlzLnVzZUNvbG9ycyA/ICclYyAnIDogJyAnKSArXG5cdFx0JysnICsgbW9kdWxlLmV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuXHRpZiAoIXRoaXMudXNlQ29sb3JzKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc3QgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG5cdGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpO1xuXG5cdC8vIFRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG5cdC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cblx0Ly8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG5cdGxldCBpbmRleCA9IDA7XG5cdGxldCBsYXN0QyA9IDA7XG5cdGFyZ3NbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLCBtYXRjaCA9PiB7XG5cdFx0aWYgKG1hdGNoID09PSAnJSUnKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGluZGV4Kys7XG5cdFx0aWYgKG1hdGNoID09PSAnJWMnKSB7XG5cdFx0XHQvLyBXZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcblx0XHRcdC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG5cdFx0XHRsYXN0QyA9IGluZGV4O1xuXHRcdH1cblx0fSk7XG5cblx0YXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUubG9nKClgIHdoZW4gYXZhaWxhYmxlLlxuICogTm8tb3Agd2hlbiBgY29uc29sZS5sb2dgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBsb2coLi4uYXJncykge1xuXHQvLyBUaGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuXHQvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuXHRyZXR1cm4gdHlwZW9mIGNvbnNvbGUgPT09ICdvYmplY3QnICYmXG5cdFx0Y29uc29sZS5sb2cgJiZcblx0XHRjb25zb2xlLmxvZyguLi5hcmdzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuXHR0cnkge1xuXHRcdGlmIChuYW1lc3BhY2VzKSB7XG5cdFx0XHRleHBvcnRzLnN0b3JhZ2Uuc2V0SXRlbSgnZGVidWcnLCBuYW1lc3BhY2VzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG5cdFx0fVxuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBsb2FkKCkge1xuXHRsZXQgcjtcblx0dHJ5IHtcblx0XHRyID0gZXhwb3J0cy5zdG9yYWdlLmdldEl0ZW0oJ2RlYnVnJyk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG5cblx0Ly8gSWYgZGVidWcgaXNuJ3Qgc2V0IGluIExTLCBhbmQgd2UncmUgaW4gRWxlY3Ryb24sIHRyeSB0byBsb2FkICRERUJVR1xuXHRpZiAoIXIgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICdlbnYnIGluIHByb2Nlc3MpIHtcblx0XHRyID0gcHJvY2Vzcy5lbnYuREVCVUc7XG5cdH1cblxuXHRyZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKSB7XG5cdHRyeSB7XG5cdFx0Ly8gVFZNTEtpdCAoQXBwbGUgVFYgSlMgUnVudGltZSkgZG9lcyBub3QgaGF2ZSBhIHdpbmRvdyBvYmplY3QsIGp1c3QgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dFxuXHRcdC8vIFRoZSBCcm93c2VyIGFsc28gaGFzIGxvY2FsU3RvcmFnZSBpbiB0aGUgZ2xvYmFsIGNvbnRleHQuXG5cdFx0cmV0dXJuIGxvY2FsU3RvcmFnZTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvbW1vbicpKGV4cG9ydHMpO1xuXG5jb25zdCB7Zm9ybWF0dGVyc30gPSBtb2R1bGUuZXhwb3J0cztcblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24gKHYpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVycm9yLm1lc3NhZ2U7XG5cdH1cbn07XG4iLCIvKipcclxuICogQ29tcGlsZXMgYSBxdWVyeXN0cmluZ1xyXG4gKiBSZXR1cm5zIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgb2JqZWN0XHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5leHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uIChvYmopIHtcclxuICB2YXIgc3RyID0gJyc7XHJcblxyXG4gIGZvciAodmFyIGkgaW4gb2JqKSB7XHJcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGkpKSB7XHJcbiAgICAgIGlmIChzdHIubGVuZ3RoKSBzdHIgKz0gJyYnO1xyXG4gICAgICBzdHIgKz0gZW5jb2RlVVJJQ29tcG9uZW50KGkpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KG9ialtpXSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc3RyO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFBhcnNlcyBhIHNpbXBsZSBxdWVyeXN0cmluZyBpbnRvIGFuIG9iamVjdFxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gcXNcclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZXhwb3J0cy5kZWNvZGUgPSBmdW5jdGlvbihxcyl7XHJcbiAgdmFyIHFyeSA9IHt9O1xyXG4gIHZhciBwYWlycyA9IHFzLnNwbGl0KCcmJyk7XHJcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYWlycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgIHZhciBwYWlyID0gcGFpcnNbaV0uc3BsaXQoJz0nKTtcclxuICAgIHFyeVtkZWNvZGVVUklDb21wb25lbnQocGFpclswXSldID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0pO1xyXG4gIH1cclxuICByZXR1cm4gcXJ5O1xyXG59O1xyXG4iLCJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYSwgYil7XG4gIHZhciBmbiA9IGZ1bmN0aW9uKCl7fTtcbiAgZm4ucHJvdG90eXBlID0gYi5wcm90b3R5cGU7XG4gIGEucHJvdG90eXBlID0gbmV3IGZuO1xuICBhLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGE7XG59OyIsIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuZXhwb3J0cy5zdG9yYWdlID0gbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuXHQnIzAwMDBDQycsXG5cdCcjMDAwMEZGJyxcblx0JyMwMDMzQ0MnLFxuXHQnIzAwMzNGRicsXG5cdCcjMDA2NkNDJyxcblx0JyMwMDY2RkYnLFxuXHQnIzAwOTlDQycsXG5cdCcjMDA5OUZGJyxcblx0JyMwMENDMDAnLFxuXHQnIzAwQ0MzMycsXG5cdCcjMDBDQzY2Jyxcblx0JyMwMENDOTknLFxuXHQnIzAwQ0NDQycsXG5cdCcjMDBDQ0ZGJyxcblx0JyMzMzAwQ0MnLFxuXHQnIzMzMDBGRicsXG5cdCcjMzMzM0NDJyxcblx0JyMzMzMzRkYnLFxuXHQnIzMzNjZDQycsXG5cdCcjMzM2NkZGJyxcblx0JyMzMzk5Q0MnLFxuXHQnIzMzOTlGRicsXG5cdCcjMzNDQzAwJyxcblx0JyMzM0NDMzMnLFxuXHQnIzMzQ0M2NicsXG5cdCcjMzNDQzk5Jyxcblx0JyMzM0NDQ0MnLFxuXHQnIzMzQ0NGRicsXG5cdCcjNjYwMENDJyxcblx0JyM2NjAwRkYnLFxuXHQnIzY2MzNDQycsXG5cdCcjNjYzM0ZGJyxcblx0JyM2NkNDMDAnLFxuXHQnIzY2Q0MzMycsXG5cdCcjOTkwMENDJyxcblx0JyM5OTAwRkYnLFxuXHQnIzk5MzNDQycsXG5cdCcjOTkzM0ZGJyxcblx0JyM5OUNDMDAnLFxuXHQnIzk5Q0MzMycsXG5cdCcjQ0MwMDAwJyxcblx0JyNDQzAwMzMnLFxuXHQnI0NDMDA2NicsXG5cdCcjQ0MwMDk5Jyxcblx0JyNDQzAwQ0MnLFxuXHQnI0NDMDBGRicsXG5cdCcjQ0MzMzAwJyxcblx0JyNDQzMzMzMnLFxuXHQnI0NDMzM2NicsXG5cdCcjQ0MzMzk5Jyxcblx0JyNDQzMzQ0MnLFxuXHQnI0NDMzNGRicsXG5cdCcjQ0M2NjAwJyxcblx0JyNDQzY2MzMnLFxuXHQnI0NDOTkwMCcsXG5cdCcjQ0M5OTMzJyxcblx0JyNDQ0NDMDAnLFxuXHQnI0NDQ0MzMycsXG5cdCcjRkYwMDAwJyxcblx0JyNGRjAwMzMnLFxuXHQnI0ZGMDA2NicsXG5cdCcjRkYwMDk5Jyxcblx0JyNGRjAwQ0MnLFxuXHQnI0ZGMDBGRicsXG5cdCcjRkYzMzAwJyxcblx0JyNGRjMzMzMnLFxuXHQnI0ZGMzM2NicsXG5cdCcjRkYzMzk5Jyxcblx0JyNGRjMzQ0MnLFxuXHQnI0ZGMzNGRicsXG5cdCcjRkY2NjAwJyxcblx0JyNGRjY2MzMnLFxuXHQnI0ZGOTkwMCcsXG5cdCcjRkY5OTMzJyxcblx0JyNGRkNDMDAnLFxuXHQnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcblx0Ly8gTkI6IEluIGFuIEVsZWN0cm9uIHByZWxvYWQgc2NyaXB0LCBkb2N1bWVudCB3aWxsIGJlIGRlZmluZWQgYnV0IG5vdCBmdWxseVxuXHQvLyBpbml0aWFsaXplZC4gU2luY2Ugd2Uga25vdyB3ZSdyZSBpbiBDaHJvbWUsIHdlJ2xsIGp1c3QgZGV0ZWN0IHRoaXMgY2FzZVxuXHQvLyBleHBsaWNpdGx5XG5cdGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucHJvY2VzcyAmJiAod2luZG93LnByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJyB8fCB3aW5kb3cucHJvY2Vzcy5fX253anMpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHQvLyBJbnRlcm5ldCBFeHBsb3JlciBhbmQgRWRnZSBkbyBub3Qgc3VwcG9ydCBjb2xvcnMuXG5cdGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvKGVkZ2V8dHJpZGVudClcXC8oXFxkKykvKSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIElzIHdlYmtpdD8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTY0NTk2MDYvMzc2NzczXG5cdC8vIGRvY3VtZW50IGlzIHVuZGVmaW5lZCBpbiByZWFjdC1uYXRpdmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvcHVsbC8xNjMyXG5cdHJldHVybiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlKSB8fFxuXHRcdC8vIElzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcblx0XHQodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNvbnNvbGUgJiYgKHdpbmRvdy5jb25zb2xlLmZpcmVidWcgfHwgKHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiAmJiB3aW5kb3cuY29uc29sZS50YWJsZSkpKSB8fFxuXHRcdC8vIElzIGZpcmVmb3ggPj0gdjMxP1xuXHRcdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuXHRcdCh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxKSB8fFxuXHRcdC8vIERvdWJsZSBjaGVjayB3ZWJraXQgaW4gdXNlckFnZW50IGp1c3QgaW4gY2FzZSB3ZSBhcmUgaW4gYSB3b3JrZXJcblx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2FwcGxld2Via2l0XFwvKFxcZCspLykpO1xufVxuXG4vKipcbiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuXHRhcmdzWzBdID0gKHRoaXMudXNlQ29sb3JzID8gJyVjJyA6ICcnKSArXG5cdFx0dGhpcy5uYW1lc3BhY2UgK1xuXHRcdCh0aGlzLnVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKSArXG5cdFx0YXJnc1swXSArXG5cdFx0KHRoaXMudXNlQ29sb3JzID8gJyVjICcgOiAnICcpICtcblx0XHQnKycgKyBtb2R1bGUuZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpO1xuXG5cdGlmICghdGhpcy51c2VDb2xvcnMpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRjb25zdCBjID0gJ2NvbG9yOiAnICsgdGhpcy5jb2xvcjtcblx0YXJncy5zcGxpY2UoMSwgMCwgYywgJ2NvbG9yOiBpbmhlcml0Jyk7XG5cblx0Ly8gVGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcblx0Ly8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuXHQvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cblx0bGV0IGluZGV4ID0gMDtcblx0bGV0IGxhc3RDID0gMDtcblx0YXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIG1hdGNoID0+IHtcblx0XHRpZiAobWF0Y2ggPT09ICclJScpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aW5kZXgrKztcblx0XHRpZiAobWF0Y2ggPT09ICclYycpIHtcblx0XHRcdC8vIFdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuXHRcdFx0Ly8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcblx0XHRcdGxhc3RDID0gaW5kZXg7XG5cdFx0fVxuXHR9KTtcblxuXHRhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGxvZyguLi5hcmdzKSB7XG5cdC8vIFRoaXMgaGFja2VyeSBpcyByZXF1aXJlZCBmb3IgSUU4LzksIHdoZXJlXG5cdC8vIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uIGRvZXNuJ3QgaGF2ZSAnYXBwbHknXG5cdHJldHVybiB0eXBlb2YgY29uc29sZSA9PT0gJ29iamVjdCcgJiZcblx0XHRjb25zb2xlLmxvZyAmJlxuXHRcdGNvbnNvbGUubG9nKC4uLmFyZ3MpO1xufVxuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG5cdHRyeSB7XG5cdFx0aWYgKG5hbWVzcGFjZXMpIHtcblx0XHRcdGV4cG9ydHMuc3RvcmFnZS5zZXRJdGVtKCdkZWJ1ZycsIG5hbWVzcGFjZXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRleHBvcnRzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcblx0XHR9XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGxvYWQoKSB7XG5cdGxldCByO1xuXHR0cnkge1xuXHRcdHIgPSBleHBvcnRzLnN0b3JhZ2UuZ2V0SXRlbSgnZGVidWcnKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cblxuXHQvLyBJZiBkZWJ1ZyBpc24ndCBzZXQgaW4gTFMsIGFuZCB3ZSdyZSBpbiBFbGVjdHJvbiwgdHJ5IHRvIGxvYWQgJERFQlVHXG5cdGlmICghciAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuXHRcdHIgPSBwcm9jZXNzLmVudi5ERUJVRztcblx0fVxuXG5cdHJldHVybiByO1xufVxuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcblx0dHJ5IHtcblx0XHQvLyBUVk1MS2l0IChBcHBsZSBUViBKUyBSdW50aW1lKSBkb2VzIG5vdCBoYXZlIGEgd2luZG93IG9iamVjdCwganVzdCBsb2NhbFN0b3JhZ2UgaW4gdGhlIGdsb2JhbCBjb250ZXh0XG5cdFx0Ly8gVGhlIEJyb3dzZXIgYWxzbyBoYXMgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dC5cblx0XHRyZXR1cm4gbG9jYWxTdG9yYWdlO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY29tbW9uJykoZXhwb3J0cyk7XG5cbmNvbnN0IHtmb3JtYXR0ZXJzfSA9IG1vZHVsZS5leHBvcnRzO1xuXG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbiAodikge1xuXHR0cnkge1xuXHRcdHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRyZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyb3IubWVzc2FnZTtcblx0fVxufTtcbiIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgICB9XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5yb3V0ZXJNaWRkbGV3YXJlID0gZXhwb3J0cy5yb3V0ZXJBY3Rpb25zID0gZXhwb3J0cy5nb0ZvcndhcmQgPSBleHBvcnRzLmdvQmFjayA9IGV4cG9ydHMuZ28gPSBleHBvcnRzLnJlcGxhY2UgPSBleHBvcnRzLnB1c2ggPSBleHBvcnRzLkNBTExfSElTVE9SWV9NRVRIT0QgPSBleHBvcnRzLnJvdXRlclJlZHVjZXIgPSBleHBvcnRzLkxPQ0FUSU9OX0NIQU5HRSA9IGV4cG9ydHMuc3luY0hpc3RvcnlXaXRoU3RvcmUgPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVkdWNlciA9IHJlcXVpcmUoJy4vcmVkdWNlcicpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0xPQ0FUSU9OX0NIQU5HRScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9yZWR1Y2VyLkxPQ0FUSU9OX0NIQU5HRTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ3JvdXRlclJlZHVjZXInLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfcmVkdWNlci5yb3V0ZXJSZWR1Y2VyO1xuICB9XG59KTtcblxudmFyIF9hY3Rpb25zID0gcmVxdWlyZSgnLi9hY3Rpb25zJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnQ0FMTF9ISVNUT1JZX01FVEhPRCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9hY3Rpb25zLkNBTExfSElTVE9SWV9NRVRIT0Q7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdwdXNoJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2FjdGlvbnMucHVzaDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ3JlcGxhY2UnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfYWN0aW9ucy5yZXBsYWNlO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnZ28nLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfYWN0aW9ucy5nbztcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2dvQmFjaycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9hY3Rpb25zLmdvQmFjaztcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2dvRm9yd2FyZCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9hY3Rpb25zLmdvRm9yd2FyZDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ3JvdXRlckFjdGlvbnMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfYWN0aW9ucy5yb3V0ZXJBY3Rpb25zO1xuICB9XG59KTtcblxudmFyIF9zeW5jID0gcmVxdWlyZSgnLi9zeW5jJyk7XG5cbnZhciBfc3luYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zeW5jKTtcblxudmFyIF9taWRkbGV3YXJlID0gcmVxdWlyZSgnLi9taWRkbGV3YXJlJyk7XG5cbnZhciBfbWlkZGxld2FyZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9taWRkbGV3YXJlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5leHBvcnRzLnN5bmNIaXN0b3J5V2l0aFN0b3JlID0gX3N5bmMyWydkZWZhdWx0J107XG5leHBvcnRzLnJvdXRlck1pZGRsZXdhcmUgPSBfbWlkZGxld2FyZTJbJ2RlZmF1bHQnXTsiLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgYmluYXJ5ID0gcmVxdWlyZSgnLi9iaW5hcnknKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xudmFyIGlzQnVmID0gcmVxdWlyZSgnLi9pcy1idWZmZXInKTtcblxuLyoqXG4gKiBQcm90b2NvbCB2ZXJzaW9uLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5wcm90b2NvbCA9IDQ7XG5cbi8qKlxuICogUGFja2V0IHR5cGVzLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy50eXBlcyA9IFtcbiAgJ0NPTk5FQ1QnLFxuICAnRElTQ09OTkVDVCcsXG4gICdFVkVOVCcsXG4gICdBQ0snLFxuICAnRVJST1InLFxuICAnQklOQVJZX0VWRU5UJyxcbiAgJ0JJTkFSWV9BQ0snXG5dO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBjb25uZWN0YC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuQ09OTkVDVCA9IDA7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGRpc2Nvbm5lY3RgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5ESVNDT05ORUNUID0gMTtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgZXZlbnRgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5FVkVOVCA9IDI7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGFja2AuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkFDSyA9IDM7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGVycm9yYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRVJST1IgPSA0O1xuXG4vKipcbiAqIFBhY2tldCB0eXBlICdiaW5hcnkgZXZlbnQnXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkJJTkFSWV9FVkVOVCA9IDU7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGJpbmFyeSBhY2tgLiBGb3IgYWNrcyB3aXRoIGJpbmFyeSBhcmd1bWVudHMuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkJJTkFSWV9BQ0sgPSA2O1xuXG4vKipcbiAqIEVuY29kZXIgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkVuY29kZXIgPSBFbmNvZGVyO1xuXG4vKipcbiAqIERlY29kZXIgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkRlY29kZXIgPSBEZWNvZGVyO1xuXG4vKipcbiAqIEEgc29ja2V0LmlvIEVuY29kZXIgaW5zdGFuY2VcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEVuY29kZXIoKSB7fVxuXG52YXIgRVJST1JfUEFDS0VUID0gZXhwb3J0cy5FUlJPUiArICdcImVuY29kZSBlcnJvclwiJztcblxuLyoqXG4gKiBFbmNvZGUgYSBwYWNrZXQgYXMgYSBzaW5nbGUgc3RyaW5nIGlmIG5vbi1iaW5hcnksIG9yIGFzIGFcbiAqIGJ1ZmZlciBzZXF1ZW5jZSwgZGVwZW5kaW5nIG9uIHBhY2tldCB0eXBlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogLSBwYWNrZXQgb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIGZ1bmN0aW9uIHRvIGhhbmRsZSBlbmNvZGluZ3MgKGxpa2VseSBlbmdpbmUud3JpdGUpXG4gKiBAcmV0dXJuIENhbGxzIGNhbGxiYWNrIHdpdGggQXJyYXkgb2YgZW5jb2RpbmdzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkVuY29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uKG9iaiwgY2FsbGJhY2spe1xuICBkZWJ1ZygnZW5jb2RpbmcgcGFja2V0ICVqJywgb2JqKTtcblxuICBpZiAoZXhwb3J0cy5CSU5BUllfRVZFTlQgPT09IG9iai50eXBlIHx8IGV4cG9ydHMuQklOQVJZX0FDSyA9PT0gb2JqLnR5cGUpIHtcbiAgICBlbmNvZGVBc0JpbmFyeShvYmosIGNhbGxiYWNrKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZW5jb2RpbmcgPSBlbmNvZGVBc1N0cmluZyhvYmopO1xuICAgIGNhbGxiYWNrKFtlbmNvZGluZ10pO1xuICB9XG59O1xuXG4vKipcbiAqIEVuY29kZSBwYWNrZXQgYXMgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEByZXR1cm4ge1N0cmluZ30gZW5jb2RlZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZW5jb2RlQXNTdHJpbmcob2JqKSB7XG5cbiAgLy8gZmlyc3QgaXMgdHlwZVxuICB2YXIgc3RyID0gJycgKyBvYmoudHlwZTtcblxuICAvLyBhdHRhY2htZW50cyBpZiB3ZSBoYXZlIHRoZW1cbiAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09PSBvYmoudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT09IG9iai50eXBlKSB7XG4gICAgc3RyICs9IG9iai5hdHRhY2htZW50cyArICctJztcbiAgfVxuXG4gIC8vIGlmIHdlIGhhdmUgYSBuYW1lc3BhY2Ugb3RoZXIgdGhhbiBgL2BcbiAgLy8gd2UgYXBwZW5kIGl0IGZvbGxvd2VkIGJ5IGEgY29tbWEgYCxgXG4gIGlmIChvYmoubnNwICYmICcvJyAhPT0gb2JqLm5zcCkge1xuICAgIHN0ciArPSBvYmoubnNwICsgJywnO1xuICB9XG5cbiAgLy8gaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgdGhlIGlkXG4gIGlmIChudWxsICE9IG9iai5pZCkge1xuICAgIHN0ciArPSBvYmouaWQ7XG4gIH1cblxuICAvLyBqc29uIGRhdGFcbiAgaWYgKG51bGwgIT0gb2JqLmRhdGEpIHtcbiAgICB2YXIgcGF5bG9hZCA9IHRyeVN0cmluZ2lmeShvYmouZGF0YSk7XG4gICAgaWYgKHBheWxvYWQgIT09IGZhbHNlKSB7XG4gICAgICBzdHIgKz0gcGF5bG9hZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIEVSUk9SX1BBQ0tFVDtcbiAgICB9XG4gIH1cblxuICBkZWJ1ZygnZW5jb2RlZCAlaiBhcyAlcycsIG9iaiwgc3RyKTtcbiAgcmV0dXJuIHN0cjtcbn1cblxuZnVuY3Rpb24gdHJ5U3RyaW5naWZ5KHN0cikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzdHIpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEVuY29kZSBwYWNrZXQgYXMgJ2J1ZmZlciBzZXF1ZW5jZScgYnkgcmVtb3ZpbmcgYmxvYnMsIGFuZFxuICogZGVjb25zdHJ1Y3RpbmcgcGFja2V0IGludG8gb2JqZWN0IHdpdGggcGxhY2Vob2xkZXJzIGFuZFxuICogYSBsaXN0IG9mIGJ1ZmZlcnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQHJldHVybiB7QnVmZmVyfSBlbmNvZGVkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBlbmNvZGVBc0JpbmFyeShvYmosIGNhbGxiYWNrKSB7XG5cbiAgZnVuY3Rpb24gd3JpdGVFbmNvZGluZyhibG9ibGVzc0RhdGEpIHtcbiAgICB2YXIgZGVjb25zdHJ1Y3Rpb24gPSBiaW5hcnkuZGVjb25zdHJ1Y3RQYWNrZXQoYmxvYmxlc3NEYXRhKTtcbiAgICB2YXIgcGFjayA9IGVuY29kZUFzU3RyaW5nKGRlY29uc3RydWN0aW9uLnBhY2tldCk7XG4gICAgdmFyIGJ1ZmZlcnMgPSBkZWNvbnN0cnVjdGlvbi5idWZmZXJzO1xuXG4gICAgYnVmZmVycy51bnNoaWZ0KHBhY2spOyAvLyBhZGQgcGFja2V0IGluZm8gdG8gYmVnaW5uaW5nIG9mIGRhdGEgbGlzdFxuICAgIGNhbGxiYWNrKGJ1ZmZlcnMpOyAvLyB3cml0ZSBhbGwgdGhlIGJ1ZmZlcnNcbiAgfVxuXG4gIGJpbmFyeS5yZW1vdmVCbG9icyhvYmosIHdyaXRlRW5jb2RpbmcpO1xufVxuXG4vKipcbiAqIEEgc29ja2V0LmlvIERlY29kZXIgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IGRlY29kZXJcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gRGVjb2RlcigpIHtcbiAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbnVsbDtcbn1cblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgIHdpdGggRGVjb2Rlci5cbiAqL1xuXG5FbWl0dGVyKERlY29kZXIucHJvdG90eXBlKTtcblxuLyoqXG4gKiBEZWNvZGVzIGFuIGVuY29kZWQgcGFja2V0IHN0cmluZyBpbnRvIHBhY2tldCBKU09OLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBvYmogLSBlbmNvZGVkIHBhY2tldFxuICogQHJldHVybiB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRGVjb2Rlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24ob2JqKSB7XG4gIHZhciBwYWNrZXQ7XG4gIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykge1xuICAgIHBhY2tldCA9IGRlY29kZVN0cmluZyhvYmopO1xuICAgIGlmIChleHBvcnRzLkJJTkFSWV9FVkVOVCA9PT0gcGFja2V0LnR5cGUgfHwgZXhwb3J0cy5CSU5BUllfQUNLID09PSBwYWNrZXQudHlwZSkgeyAvLyBiaW5hcnkgcGFja2V0J3MganNvblxuICAgICAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbmV3IEJpbmFyeVJlY29uc3RydWN0b3IocGFja2V0KTtcblxuICAgICAgLy8gbm8gYXR0YWNobWVudHMsIGxhYmVsZWQgYmluYXJ5IGJ1dCBubyBiaW5hcnkgZGF0YSB0byBmb2xsb3dcbiAgICAgIGlmICh0aGlzLnJlY29uc3RydWN0b3IucmVjb25QYWNrLmF0dGFjaG1lbnRzID09PSAwKSB7XG4gICAgICAgIHRoaXMuZW1pdCgnZGVjb2RlZCcsIHBhY2tldCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHsgLy8gbm9uLWJpbmFyeSBmdWxsIHBhY2tldFxuICAgICAgdGhpcy5lbWl0KCdkZWNvZGVkJywgcGFja2V0KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNCdWYob2JqKSB8fCBvYmouYmFzZTY0KSB7IC8vIHJhdyBiaW5hcnkgZGF0YVxuICAgIGlmICghdGhpcy5yZWNvbnN0cnVjdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2dvdCBiaW5hcnkgZGF0YSB3aGVuIG5vdCByZWNvbnN0cnVjdGluZyBhIHBhY2tldCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYWNrZXQgPSB0aGlzLnJlY29uc3RydWN0b3IudGFrZUJpbmFyeURhdGEob2JqKTtcbiAgICAgIGlmIChwYWNrZXQpIHsgLy8gcmVjZWl2ZWQgZmluYWwgYnVmZmVyXG4gICAgICAgIHRoaXMucmVjb25zdHJ1Y3RvciA9IG51bGw7XG4gICAgICAgIHRoaXMuZW1pdCgnZGVjb2RlZCcsIHBhY2tldCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biB0eXBlOiAnICsgb2JqKTtcbiAgfVxufTtcblxuLyoqXG4gKiBEZWNvZGUgYSBwYWNrZXQgU3RyaW5nIChKU09OIGRhdGEpXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGRlY29kZVN0cmluZyhzdHIpIHtcbiAgdmFyIGkgPSAwO1xuICAvLyBsb29rIHVwIHR5cGVcbiAgdmFyIHAgPSB7XG4gICAgdHlwZTogTnVtYmVyKHN0ci5jaGFyQXQoMCkpXG4gIH07XG5cbiAgaWYgKG51bGwgPT0gZXhwb3J0cy50eXBlc1twLnR5cGVdKSB7XG4gICAgcmV0dXJuIGVycm9yKCd1bmtub3duIHBhY2tldCB0eXBlICcgKyBwLnR5cGUpO1xuICB9XG5cbiAgLy8gbG9vayB1cCBhdHRhY2htZW50cyBpZiB0eXBlIGJpbmFyeVxuICBpZiAoZXhwb3J0cy5CSU5BUllfRVZFTlQgPT09IHAudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT09IHAudHlwZSkge1xuICAgIHZhciBidWYgPSAnJztcbiAgICB3aGlsZSAoc3RyLmNoYXJBdCgrK2kpICE9PSAnLScpIHtcbiAgICAgIGJ1ZiArPSBzdHIuY2hhckF0KGkpO1xuICAgICAgaWYgKGkgPT0gc3RyLmxlbmd0aCkgYnJlYWs7XG4gICAgfVxuICAgIGlmIChidWYgIT0gTnVtYmVyKGJ1ZikgfHwgc3RyLmNoYXJBdChpKSAhPT0gJy0nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lsbGVnYWwgYXR0YWNobWVudHMnKTtcbiAgICB9XG4gICAgcC5hdHRhY2htZW50cyA9IE51bWJlcihidWYpO1xuICB9XG5cbiAgLy8gbG9vayB1cCBuYW1lc3BhY2UgKGlmIGFueSlcbiAgaWYgKCcvJyA9PT0gc3RyLmNoYXJBdChpICsgMSkpIHtcbiAgICBwLm5zcCA9ICcnO1xuICAgIHdoaWxlICgrK2kpIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJBdChpKTtcbiAgICAgIGlmICgnLCcgPT09IGMpIGJyZWFrO1xuICAgICAgcC5uc3AgKz0gYztcbiAgICAgIGlmIChpID09PSBzdHIubGVuZ3RoKSBicmVhaztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcC5uc3AgPSAnLyc7XG4gIH1cblxuICAvLyBsb29rIHVwIGlkXG4gIHZhciBuZXh0ID0gc3RyLmNoYXJBdChpICsgMSk7XG4gIGlmICgnJyAhPT0gbmV4dCAmJiBOdW1iZXIobmV4dCkgPT0gbmV4dCkge1xuICAgIHAuaWQgPSAnJztcbiAgICB3aGlsZSAoKytpKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQXQoaSk7XG4gICAgICBpZiAobnVsbCA9PSBjIHx8IE51bWJlcihjKSAhPSBjKSB7XG4gICAgICAgIC0taTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBwLmlkICs9IHN0ci5jaGFyQXQoaSk7XG4gICAgICBpZiAoaSA9PT0gc3RyLmxlbmd0aCkgYnJlYWs7XG4gICAgfVxuICAgIHAuaWQgPSBOdW1iZXIocC5pZCk7XG4gIH1cblxuICAvLyBsb29rIHVwIGpzb24gZGF0YVxuICBpZiAoc3RyLmNoYXJBdCgrK2kpKSB7XG4gICAgdmFyIHBheWxvYWQgPSB0cnlQYXJzZShzdHIuc3Vic3RyKGkpKTtcbiAgICB2YXIgaXNQYXlsb2FkVmFsaWQgPSBwYXlsb2FkICE9PSBmYWxzZSAmJiAocC50eXBlID09PSBleHBvcnRzLkVSUk9SIHx8IGlzQXJyYXkocGF5bG9hZCkpO1xuICAgIGlmIChpc1BheWxvYWRWYWxpZCkge1xuICAgICAgcC5kYXRhID0gcGF5bG9hZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVycm9yKCdpbnZhbGlkIHBheWxvYWQnKTtcbiAgICB9XG4gIH1cblxuICBkZWJ1ZygnZGVjb2RlZCAlcyBhcyAlaicsIHN0ciwgcCk7XG4gIHJldHVybiBwO1xufVxuXG5mdW5jdGlvbiB0cnlQYXJzZShzdHIpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShzdHIpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIERlYWxsb2NhdGVzIGEgcGFyc2VyJ3MgcmVzb3VyY2VzXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5EZWNvZGVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLnJlY29uc3RydWN0b3IpIHtcbiAgICB0aGlzLnJlY29uc3RydWN0b3IuZmluaXNoZWRSZWNvbnN0cnVjdGlvbigpO1xuICB9XG59O1xuXG4vKipcbiAqIEEgbWFuYWdlciBvZiBhIGJpbmFyeSBldmVudCdzICdidWZmZXIgc2VxdWVuY2UnLiBTaG91bGRcbiAqIGJlIGNvbnN0cnVjdGVkIHdoZW5ldmVyIGEgcGFja2V0IG9mIHR5cGUgQklOQVJZX0VWRU5UIGlzXG4gKiBkZWNvZGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEByZXR1cm4ge0JpbmFyeVJlY29uc3RydWN0b3J9IGluaXRpYWxpemVkIHJlY29uc3RydWN0b3JcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIEJpbmFyeVJlY29uc3RydWN0b3IocGFja2V0KSB7XG4gIHRoaXMucmVjb25QYWNrID0gcGFja2V0O1xuICB0aGlzLmJ1ZmZlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBNZXRob2QgdG8gYmUgY2FsbGVkIHdoZW4gYmluYXJ5IGRhdGEgcmVjZWl2ZWQgZnJvbSBjb25uZWN0aW9uXG4gKiBhZnRlciBhIEJJTkFSWV9FVkVOVCBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtCdWZmZXIgfCBBcnJheUJ1ZmZlcn0gYmluRGF0YSAtIHRoZSByYXcgYmluYXJ5IGRhdGEgcmVjZWl2ZWRcbiAqIEByZXR1cm4ge251bGwgfCBPYmplY3R9IHJldHVybnMgbnVsbCBpZiBtb3JlIGJpbmFyeSBkYXRhIGlzIGV4cGVjdGVkIG9yXG4gKiAgIGEgcmVjb25zdHJ1Y3RlZCBwYWNrZXQgb2JqZWN0IGlmIGFsbCBidWZmZXJzIGhhdmUgYmVlbiByZWNlaXZlZC5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkJpbmFyeVJlY29uc3RydWN0b3IucHJvdG90eXBlLnRha2VCaW5hcnlEYXRhID0gZnVuY3Rpb24oYmluRGF0YSkge1xuICB0aGlzLmJ1ZmZlcnMucHVzaChiaW5EYXRhKTtcbiAgaWYgKHRoaXMuYnVmZmVycy5sZW5ndGggPT09IHRoaXMucmVjb25QYWNrLmF0dGFjaG1lbnRzKSB7IC8vIGRvbmUgd2l0aCBidWZmZXIgbGlzdFxuICAgIHZhciBwYWNrZXQgPSBiaW5hcnkucmVjb25zdHJ1Y3RQYWNrZXQodGhpcy5yZWNvblBhY2ssIHRoaXMuYnVmZmVycyk7XG4gICAgdGhpcy5maW5pc2hlZFJlY29uc3RydWN0aW9uKCk7XG4gICAgcmV0dXJuIHBhY2tldDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cbi8qKlxuICogQ2xlYW5zIHVwIGJpbmFyeSBwYWNrZXQgcmVjb25zdHJ1Y3Rpb24gdmFyaWFibGVzLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkJpbmFyeVJlY29uc3RydWN0b3IucHJvdG90eXBlLmZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5yZWNvblBhY2sgPSBudWxsO1xuICB0aGlzLmJ1ZmZlcnMgPSBbXTtcbn07XG5cbmZ1bmN0aW9uIGVycm9yKG1zZykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IGV4cG9ydHMuRVJST1IsXG4gICAgZGF0YTogJ3BhcnNlciBlcnJvcjogJyArIG1zZ1xuICB9O1xufVxuIiwiLy8gYnJvd3NlciBzaGltIGZvciB4bWxodHRwcmVxdWVzdCBtb2R1bGVcblxudmFyIGhhc0NPUlMgPSByZXF1aXJlKCdoYXMtY29ycycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRzKSB7XG4gIHZhciB4ZG9tYWluID0gb3B0cy54ZG9tYWluO1xuXG4gIC8vIHNjaGVtZSBtdXN0IGJlIHNhbWUgd2hlbiB1c2lnbiBYRG9tYWluUmVxdWVzdFxuICAvLyBodHRwOi8vYmxvZ3MubXNkbi5jb20vYi9pZWludGVybmFscy9hcmNoaXZlLzIwMTAvMDUvMTMveGRvbWFpbnJlcXVlc3QtcmVzdHJpY3Rpb25zLWxpbWl0YXRpb25zLWFuZC13b3JrYXJvdW5kcy5hc3B4XG4gIHZhciB4c2NoZW1lID0gb3B0cy54c2NoZW1lO1xuXG4gIC8vIFhEb21haW5SZXF1ZXN0IGhhcyBhIGZsb3cgb2Ygbm90IHNlbmRpbmcgY29va2llLCB0aGVyZWZvcmUgaXQgc2hvdWxkIGJlIGRpc2FibGVkIGFzIGEgZGVmYXVsdC5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0F1dG9tYXR0aWMvZW5naW5lLmlvLWNsaWVudC9wdWxsLzIxN1xuICB2YXIgZW5hYmxlc1hEUiA9IG9wdHMuZW5hYmxlc1hEUjtcblxuICAvLyBYTUxIdHRwUmVxdWVzdCBjYW4gYmUgZGlzYWJsZWQgb24gSUVcbiAgdHJ5IHtcbiAgICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAmJiAoIXhkb21haW4gfHwgaGFzQ09SUykpIHtcbiAgICAgIHJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHsgfVxuXG4gIC8vIFVzZSBYRG9tYWluUmVxdWVzdCBmb3IgSUU4IGlmIGVuYWJsZXNYRFIgaXMgdHJ1ZVxuICAvLyBiZWNhdXNlIGxvYWRpbmcgYmFyIGtlZXBzIGZsYXNoaW5nIHdoZW4gdXNpbmcganNvbnAtcG9sbGluZ1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20veXVqaW9zYWthL3NvY2tlLmlvLWllOC1sb2FkaW5nLWV4YW1wbGVcbiAgdHJ5IHtcbiAgICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBYRG9tYWluUmVxdWVzdCAmJiAheHNjaGVtZSAmJiBlbmFibGVzWERSKSB7XG4gICAgICByZXR1cm4gbmV3IFhEb21haW5SZXF1ZXN0KCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7IH1cblxuICBpZiAoIXhkb21haW4pIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG5ldyBzZWxmW1snQWN0aXZlJ10uY29uY2F0KCdPYmplY3QnKS5qb2luKCdYJyldKCdNaWNyb3NvZnQuWE1MSFRUUCcpO1xuICAgIH0gY2F0Y2ggKGUpIHsgfVxuICB9XG59O1xuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc3BvcnQ7XG5cbi8qKlxuICogVHJhbnNwb3J0IGFic3RyYWN0IGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gVHJhbnNwb3J0IChvcHRzKSB7XG4gIHRoaXMucGF0aCA9IG9wdHMucGF0aDtcbiAgdGhpcy5ob3N0bmFtZSA9IG9wdHMuaG9zdG5hbWU7XG4gIHRoaXMucG9ydCA9IG9wdHMucG9ydDtcbiAgdGhpcy5zZWN1cmUgPSBvcHRzLnNlY3VyZTtcbiAgdGhpcy5xdWVyeSA9IG9wdHMucXVlcnk7XG4gIHRoaXMudGltZXN0YW1wUGFyYW0gPSBvcHRzLnRpbWVzdGFtcFBhcmFtO1xuICB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzID0gb3B0cy50aW1lc3RhbXBSZXF1ZXN0cztcbiAgdGhpcy5yZWFkeVN0YXRlID0gJyc7XG4gIHRoaXMuYWdlbnQgPSBvcHRzLmFnZW50IHx8IGZhbHNlO1xuICB0aGlzLnNvY2tldCA9IG9wdHMuc29ja2V0O1xuICB0aGlzLmVuYWJsZXNYRFIgPSBvcHRzLmVuYWJsZXNYRFI7XG4gIHRoaXMud2l0aENyZWRlbnRpYWxzID0gb3B0cy53aXRoQ3JlZGVudGlhbHM7XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMucGZ4ID0gb3B0cy5wZng7XG4gIHRoaXMua2V5ID0gb3B0cy5rZXk7XG4gIHRoaXMucGFzc3BocmFzZSA9IG9wdHMucGFzc3BocmFzZTtcbiAgdGhpcy5jZXJ0ID0gb3B0cy5jZXJ0O1xuICB0aGlzLmNhID0gb3B0cy5jYTtcbiAgdGhpcy5jaXBoZXJzID0gb3B0cy5jaXBoZXJzO1xuICB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCA9IG9wdHMucmVqZWN0VW5hdXRob3JpemVkO1xuICB0aGlzLmZvcmNlTm9kZSA9IG9wdHMuZm9yY2VOb2RlO1xuXG4gIC8vIHJlc3VsdHMgb2YgUmVhY3ROYXRpdmUgZW52aXJvbm1lbnQgZGV0ZWN0aW9uXG4gIHRoaXMuaXNSZWFjdE5hdGl2ZSA9IG9wdHMuaXNSZWFjdE5hdGl2ZTtcblxuICAvLyBvdGhlciBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuICB0aGlzLmxvY2FsQWRkcmVzcyA9IG9wdHMubG9jYWxBZGRyZXNzO1xufVxuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAuXG4gKi9cblxuRW1pdHRlcihUcmFuc3BvcnQucHJvdG90eXBlKTtcblxuLyoqXG4gKiBFbWl0cyBhbiBlcnJvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtUcmFuc3BvcnR9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAobXNnLCBkZXNjKSB7XG4gIHZhciBlcnIgPSBuZXcgRXJyb3IobXNnKTtcbiAgZXJyLnR5cGUgPSAnVHJhbnNwb3J0RXJyb3InO1xuICBlcnIuZGVzY3JpcHRpb24gPSBkZXNjO1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIE9wZW5zIHRoZSB0cmFuc3BvcnQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICgnY2xvc2VkJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICcnID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSAnb3BlbmluZyc7XG4gICAgdGhpcy5kb09wZW4oKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIHRyYW5zcG9ydC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ29wZW5pbmcnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLmRvQ2xvc2UoKTtcbiAgICB0aGlzLm9uQ2xvc2UoKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZW5kcyBtdWx0aXBsZSBwYWNrZXRzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHBhY2tldHNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChwYWNrZXRzKSB7XG4gIGlmICgnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIHRoaXMud3JpdGUocGFja2V0cyk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc3BvcnQgbm90IG9wZW4nKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBvcGVuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuJztcbiAgdGhpcy53cml0YWJsZSA9IHRydWU7XG4gIHRoaXMuZW1pdCgnb3BlbicpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBkYXRhLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHZhciBwYWNrZXQgPSBwYXJzZXIuZGVjb2RlUGFja2V0KGRhdGEsIHRoaXMuc29ja2V0LmJpbmFyeVR5cGUpO1xuICB0aGlzLm9uUGFja2V0KHBhY2tldCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aXRoIGEgZGVjb2RlZCBwYWNrZXQuXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vblBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICB0aGlzLmVtaXQoJ2Nsb3NlJyk7XG59O1xuIiwiXHJcbi8qKlxyXG4gKiBFeHBvc2UgYEVtaXR0ZXJgLlxyXG4gKi9cclxuXHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG4gIG1vZHVsZS5leHBvcnRzID0gRW1pdHRlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEluaXRpYWxpemUgYSBuZXcgYEVtaXR0ZXJgLlxyXG4gKlxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIEVtaXR0ZXIob2JqKSB7XHJcbiAgaWYgKG9iaikgcmV0dXJuIG1peGluKG9iaik7XHJcbn07XHJcblxyXG4vKipcclxuICogTWl4aW4gdGhlIGVtaXR0ZXIgcHJvcGVydGllcy5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IG9ialxyXG4gKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIG1peGluKG9iaikge1xyXG4gIGZvciAodmFyIGtleSBpbiBFbWl0dGVyLnByb3RvdHlwZSkge1xyXG4gICAgb2JqW2tleV0gPSBFbWl0dGVyLnByb3RvdHlwZVtrZXldO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59XHJcblxyXG4vKipcclxuICogTGlzdGVuIG9uIHRoZSBnaXZlbiBgZXZlbnRgIHdpdGggYGZuYC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub24gPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgKHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdIHx8IFtdKVxyXG4gICAgLnB1c2goZm4pO1xyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEFkZHMgYW4gYGV2ZW50YCBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgaW52b2tlZCBhIHNpbmdsZVxyXG4gKiB0aW1lIHRoZW4gYXV0b21hdGljYWxseSByZW1vdmVkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICBmdW5jdGlvbiBvbigpIHtcclxuICAgIHRoaXMub2ZmKGV2ZW50LCBvbik7XHJcbiAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gIH1cclxuXHJcbiAgb24uZm4gPSBmbjtcclxuICB0aGlzLm9uKGV2ZW50LCBvbik7XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmVtb3ZlIHRoZSBnaXZlbiBjYWxsYmFjayBmb3IgYGV2ZW50YCBvciBhbGxcclxuICogcmVnaXN0ZXJlZCBjYWxsYmFja3MuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9mZiA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG5cclxuICAvLyBhbGxcclxuICBpZiAoMCA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICB0aGlzLl9jYWxsYmFja3MgPSB7fTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLy8gc3BlY2lmaWMgZXZlbnRcclxuICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuICBpZiAoIWNhbGxiYWNrcykgcmV0dXJuIHRoaXM7XHJcblxyXG4gIC8vIHJlbW92ZSBhbGwgaGFuZGxlcnNcclxuICBpZiAoMSA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICBkZWxldGUgdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLy8gcmVtb3ZlIHNwZWNpZmljIGhhbmRsZXJcclxuICB2YXIgY2I7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcclxuICAgIGNiID0gY2FsbGJhY2tzW2ldO1xyXG4gICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcclxuICAgICAgY2FsbGJhY2tzLnNwbGljZShpLCAxKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEVtaXQgYGV2ZW50YCB3aXRoIHRoZSBnaXZlbiBhcmdzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtNaXhlZH0gLi4uXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSlcclxuICAgICwgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuXHJcbiAgaWYgKGNhbGxiYWNrcykge1xyXG4gICAgY2FsbGJhY2tzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xyXG4gICAgICBjYWxsYmFja3NbaV0uYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gYXJyYXkgb2YgY2FsbGJhY2tzIGZvciBgZXZlbnRgLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHJldHVybiB7QXJyYXl9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICByZXR1cm4gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiB0aGlzIGVtaXR0ZXIgaGFzIGBldmVudGAgaGFuZGxlcnMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmhhc0xpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICByZXR1cm4gISEgdGhpcy5saXN0ZW5lcnMoZXZlbnQpLmxlbmd0aDtcclxufTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcHJvY2Vzc05vZGVzO1xuXG52YXIgX2lzRW1wdHlUZXh0Tm9kZSA9IHJlcXVpcmUoJy4vdXRpbHMvaXNFbXB0eVRleHROb2RlJyk7XG5cbnZhciBfaXNFbXB0eVRleHROb2RlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzRW1wdHlUZXh0Tm9kZSk7XG5cbnZhciBfY29udmVydE5vZGVUb0VsZW1lbnQgPSByZXF1aXJlKCcuL2NvbnZlcnROb2RlVG9FbGVtZW50Jyk7XG5cbnZhciBfY29udmVydE5vZGVUb0VsZW1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29udmVydE5vZGVUb0VsZW1lbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIFByb2Nlc3NlcyB0aGUgbm9kZXMgZ2VuZXJhdGVkIGJ5IGh0bWxwYXJzZXIyIGFuZCBjb252ZXJ0IHRoZW0gYWxsIGludG8gUmVhY3QgZWxlbWVudHNcbiAqXG4gKiBAcGFyYW0ge09iamVjdFtdfSBub2RlcyBMaXN0IG9mIG5vZGVzIHRvIHByb2Nlc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUcmFuc2Zvcm0gZnVuY3Rpb24gdG8gb3B0aW9uYWxseSBhcHBseSB0byBub2Rlc1xuICogQHJldHVybnMge1JlYWN0LkVsZW1lbnRbXX0gVGhlIGxpc3Qgb2YgcHJvY2Vzc2VkIFJlYWN0IGVsZW1lbnRzXG4gKi9cbmZ1bmN0aW9uIHByb2Nlc3NOb2Rlcyhub2RlcywgdHJhbnNmb3JtKSB7XG5cbiAgcmV0dXJuIG5vZGVzLmZpbHRlcihmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiAhKDAsIF9pc0VtcHR5VGV4dE5vZGUyLmRlZmF1bHQpKG5vZGUpO1xuICB9KS5tYXAoZnVuY3Rpb24gKG5vZGUsIGluZGV4KSB7XG5cbiAgICAvLyByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIGlmIGFwcGxpY2FibGVcbiAgICB2YXIgdHJhbnNmb3JtZWQgPSB2b2lkIDA7XG4gICAgaWYgKHR5cGVvZiB0cmFuc2Zvcm0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRyYW5zZm9ybWVkID0gdHJhbnNmb3JtKG5vZGUsIGluZGV4KTtcbiAgICAgIGlmICh0cmFuc2Zvcm1lZCA9PT0gbnVsbCB8fCAhIXRyYW5zZm9ybWVkKSB7XG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1lZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBvdGhlcndpc2UgY29udmVydCB0aGUgbm9kZSBhcyBzdGFuZGFyZFxuICAgIHJldHVybiAoMCwgX2NvbnZlcnROb2RlVG9FbGVtZW50Mi5kZWZhdWx0KShub2RlLCBpbmRleCwgdHJhbnNmb3JtKTtcbiAgfSk7XG59IiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCJmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2luaGVyaXRzTG9vc2U7IiwidmFyIGlzYXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLydcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF1cbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXVxuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXhcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGhcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdXG4gICAgdmFyIHByZWZpeCA9IHJlc1syXVxuICAgIHZhciBuYW1lID0gcmVzWzNdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF1cbiAgICB2YXIgZ3JvdXAgPSByZXNbNV1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl1cbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN11cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXhcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyXG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwXG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pXG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpXG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIHJvdXRlID0gJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJ1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKVxuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlclxuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nXG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJ1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgLy8gT25seSBOb2RlLkpTIGhhcyBhIHByb2Nlc3MgdmFyaWFibGUgdGhhdCBpcyBvZiBbW0NsYXNzXV0gcHJvY2Vzc1xuICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcigndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgdXRpbHMuZm9yRWFjaChbJ3VybCcsICdtZXRob2QnLCAncGFyYW1zJywgJ2RhdGEnXSwgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2goWydoZWFkZXJzJywgJ2F1dGgnLCAncHJveHknXSwgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSB1dGlscy5kZWVwTWVyZ2UoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gdXRpbHMuZGVlcE1lcmdlKGNvbmZpZzFbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzFbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcxW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChbXG4gICAgJ2Jhc2VVUkwnLCAndHJhbnNmb3JtUmVxdWVzdCcsICd0cmFuc2Zvcm1SZXNwb25zZScsICdwYXJhbXNTZXJpYWxpemVyJyxcbiAgICAndGltZW91dCcsICd3aXRoQ3JlZGVudGlhbHMnLCAnYWRhcHRlcicsICdyZXNwb25zZVR5cGUnLCAneHNyZkNvb2tpZU5hbWUnLFxuICAgICd4c3JmSGVhZGVyTmFtZScsICdvblVwbG9hZFByb2dyZXNzJywgJ29uRG93bmxvYWRQcm9ncmVzcycsICdtYXhDb250ZW50TGVuZ3RoJyxcbiAgICAndmFsaWRhdGVTdGF0dXMnLCAnbWF4UmVkaXJlY3RzJywgJ2h0dHBBZ2VudCcsICdodHRwc0FnZW50JywgJ2NhbmNlbFRva2VuJyxcbiAgICAnc29ja2V0UGF0aCdcbiAgXSwgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmV4cG9ydHMucm91dGVyUmVkdWNlciA9IHJvdXRlclJlZHVjZXI7XG4vKipcbiAqIFRoaXMgYWN0aW9uIHR5cGUgd2lsbCBiZSBkaXNwYXRjaGVkIHdoZW4geW91ciBoaXN0b3J5XG4gKiByZWNlaXZlcyBhIGxvY2F0aW9uIGNoYW5nZS5cbiAqL1xudmFyIExPQ0FUSU9OX0NIQU5HRSA9IGV4cG9ydHMuTE9DQVRJT05fQ0hBTkdFID0gJ0BAcm91dGVyL0xPQ0FUSU9OX0NIQU5HRSc7XG5cbnZhciBpbml0aWFsU3RhdGUgPSB7XG4gIGxvY2F0aW9uQmVmb3JlVHJhbnNpdGlvbnM6IG51bGxcbn07XG5cbi8qKlxuICogVGhpcyByZWR1Y2VyIHdpbGwgdXBkYXRlIHRoZSBzdGF0ZSB3aXRoIHRoZSBtb3N0IHJlY2VudCBsb2NhdGlvbiBoaXN0b3J5XG4gKiBoYXMgdHJhbnNpdGlvbmVkIHRvLiBUaGlzIG1heSBub3QgYmUgaW4gc3luYyB3aXRoIHRoZSByb3V0ZXIsIHBhcnRpY3VsYXJseVxuICogaWYgeW91IGhhdmUgYXN5bmNocm9ub3VzbHktbG9hZGVkIHJvdXRlcywgc28gcmVhZGluZyBmcm9tIGFuZCByZWx5aW5nIG9uXG4gKiB0aGlzIHN0YXRlIGlzIGRpc2NvdXJhZ2VkLlxuICovXG5mdW5jdGlvbiByb3V0ZXJSZWR1Y2VyKCkge1xuICB2YXIgc3RhdGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGluaXRpYWxTdGF0ZTtcblxuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgICB0eXBlID0gX3JlZi50eXBlLFxuICAgICAgcGF5bG9hZCA9IF9yZWYucGF5bG9hZDtcblxuICBpZiAodHlwZSA9PT0gTE9DQVRJT05fQ0hBTkdFKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwgeyBsb2NhdGlvbkJlZm9yZVRyYW5zaXRpb25zOiBwYXlsb2FkIH0pO1xuICB9XG5cbiAgcmV0dXJuIHN0YXRlO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbi8qKlxuICogVGhpcyBhY3Rpb24gdHlwZSB3aWxsIGJlIGRpc3BhdGNoZWQgYnkgdGhlIGhpc3RvcnkgYWN0aW9ucyBiZWxvdy5cbiAqIElmIHlvdSdyZSB3cml0aW5nIGEgbWlkZGxld2FyZSB0byB3YXRjaCBmb3IgbmF2aWdhdGlvbiBldmVudHMsIGJlIHN1cmUgdG9cbiAqIGxvb2sgZm9yIGFjdGlvbnMgb2YgdGhpcyB0eXBlLlxuICovXG52YXIgQ0FMTF9ISVNUT1JZX01FVEhPRCA9IGV4cG9ydHMuQ0FMTF9ISVNUT1JZX01FVEhPRCA9ICdAQHJvdXRlci9DQUxMX0hJU1RPUllfTUVUSE9EJztcblxuZnVuY3Rpb24gdXBkYXRlTG9jYXRpb24obWV0aG9kKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IENBTExfSElTVE9SWV9NRVRIT0QsXG4gICAgICBwYXlsb2FkOiB7IG1ldGhvZDogbWV0aG9kLCBhcmdzOiBhcmdzIH1cbiAgICB9O1xuICB9O1xufVxuXG4vKipcbiAqIFRoZXNlIGFjdGlvbnMgY29ycmVzcG9uZCB0byB0aGUgaGlzdG9yeSBBUEkuXG4gKiBUaGUgYXNzb2NpYXRlZCByb3V0ZXJNaWRkbGV3YXJlIHdpbGwgY2FwdHVyZSB0aGVzZSBldmVudHMgYmVmb3JlIHRoZXkgZ2V0IHRvXG4gKiB5b3VyIHJlZHVjZXIgYW5kIHJlaXNzdWUgdGhlbSBhcyB0aGUgbWF0Y2hpbmcgZnVuY3Rpb24gb24geW91ciBoaXN0b3J5LlxuICovXG52YXIgcHVzaCA9IGV4cG9ydHMucHVzaCA9IHVwZGF0ZUxvY2F0aW9uKCdwdXNoJyk7XG52YXIgcmVwbGFjZSA9IGV4cG9ydHMucmVwbGFjZSA9IHVwZGF0ZUxvY2F0aW9uKCdyZXBsYWNlJyk7XG52YXIgZ28gPSBleHBvcnRzLmdvID0gdXBkYXRlTG9jYXRpb24oJ2dvJyk7XG52YXIgZ29CYWNrID0gZXhwb3J0cy5nb0JhY2sgPSB1cGRhdGVMb2NhdGlvbignZ29CYWNrJyk7XG52YXIgZ29Gb3J3YXJkID0gZXhwb3J0cy5nb0ZvcndhcmQgPSB1cGRhdGVMb2NhdGlvbignZ29Gb3J3YXJkJyk7XG5cbnZhciByb3V0ZXJBY3Rpb25zID0gZXhwb3J0cy5yb3V0ZXJBY3Rpb25zID0geyBwdXNoOiBwdXNoLCByZXBsYWNlOiByZXBsYWNlLCBnbzogZ28sIGdvQmFjazogZ29CYWNrLCBnb0ZvcndhcmQ6IGdvRm9yd2FyZCB9OyIsIi8qKlxyXG4gKiBQYXJzZXMgYW4gVVJJXHJcbiAqXHJcbiAqIEBhdXRob3IgU3RldmVuIExldml0aGFuIDxzdGV2ZW5sZXZpdGhhbi5jb20+IChNSVQgbGljZW5zZSlcclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxudmFyIHJlID0gL14oPzooPyFbXjpAXSs6W146QFxcL10qQCkoaHR0cHxodHRwc3x3c3x3c3MpOlxcL1xcLyk/KCg/OigoW146QF0qKSg/OjooW146QF0qKSk/KT9AKT8oKD86W2EtZjAtOV17MCw0fTopezIsN31bYS1mMC05XXswLDR9fFteOlxcLz8jXSopKD86OihcXGQqKSk/KSgoKFxcLyg/OltePyNdKD8hW14/I1xcL10qXFwuW14/I1xcLy5dKyg/Ols/I118JCkpKSpcXC8/KT8oW14/I1xcL10qKSkoPzpcXD8oW14jXSopKT8oPzojKC4qKSk/KS87XHJcblxyXG52YXIgcGFydHMgPSBbXHJcbiAgICAnc291cmNlJywgJ3Byb3RvY29sJywgJ2F1dGhvcml0eScsICd1c2VySW5mbycsICd1c2VyJywgJ3Bhc3N3b3JkJywgJ2hvc3QnLCAncG9ydCcsICdyZWxhdGl2ZScsICdwYXRoJywgJ2RpcmVjdG9yeScsICdmaWxlJywgJ3F1ZXJ5JywgJ2FuY2hvcidcclxuXTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2V1cmkoc3RyKSB7XHJcbiAgICB2YXIgc3JjID0gc3RyLFxyXG4gICAgICAgIGIgPSBzdHIuaW5kZXhPZignWycpLFxyXG4gICAgICAgIGUgPSBzdHIuaW5kZXhPZignXScpO1xyXG5cclxuICAgIGlmIChiICE9IC0xICYmIGUgIT0gLTEpIHtcclxuICAgICAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKDAsIGIpICsgc3RyLnN1YnN0cmluZyhiLCBlKS5yZXBsYWNlKC86L2csICc7JykgKyBzdHIuc3Vic3RyaW5nKGUsIHN0ci5sZW5ndGgpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBtID0gcmUuZXhlYyhzdHIgfHwgJycpLFxyXG4gICAgICAgIHVyaSA9IHt9LFxyXG4gICAgICAgIGkgPSAxNDtcclxuXHJcbiAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgdXJpW3BhcnRzW2ldXSA9IG1baV0gfHwgJyc7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGIgIT0gLTEgJiYgZSAhPSAtMSkge1xyXG4gICAgICAgIHVyaS5zb3VyY2UgPSBzcmM7XHJcbiAgICAgICAgdXJpLmhvc3QgPSB1cmkuaG9zdC5zdWJzdHJpbmcoMSwgdXJpLmhvc3QubGVuZ3RoIC0gMSkucmVwbGFjZSgvOy9nLCAnOicpO1xyXG4gICAgICAgIHVyaS5hdXRob3JpdHkgPSB1cmkuYXV0aG9yaXR5LnJlcGxhY2UoJ1snLCAnJykucmVwbGFjZSgnXScsICcnKS5yZXBsYWNlKC87L2csICc6Jyk7XHJcbiAgICAgICAgdXJpLmlwdjZ1cmkgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB1cmk7XHJcbn07XHJcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmO1xuXG52YXIgd2l0aE5hdGl2ZUJ1ZmZlciA9IHR5cGVvZiBCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIEJ1ZmZlci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJztcbnZhciB3aXRoTmF0aXZlQXJyYXlCdWZmZXIgPSB0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICdmdW5jdGlvbic7XG5cbnZhciBpc1ZpZXcgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nID8gQXJyYXlCdWZmZXIuaXNWaWV3KG9iaikgOiAob2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIG9iaiBpcyBhIGJ1ZmZlciBvciBhbiBhcnJheWJ1ZmZlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBpc0J1ZihvYmopIHtcbiAgcmV0dXJuICh3aXRoTmF0aXZlQnVmZmVyICYmIEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB8fFxuICAgICAgICAgICh3aXRoTmF0aXZlQXJyYXlCdWZmZXIgJiYgKG9iaiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8IGlzVmlldyhvYmopKSk7XG59XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgZWlvID0gcmVxdWlyZSgnZW5naW5lLmlvLWNsaWVudCcpO1xudmFyIFNvY2tldCA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnc29ja2V0LmlvLXBhcnNlcicpO1xudmFyIG9uID0gcmVxdWlyZSgnLi9vbicpO1xudmFyIGJpbmQgPSByZXF1aXJlKCdjb21wb25lbnQtYmluZCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudDptYW5hZ2VyJyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJ2luZGV4b2YnKTtcbnZhciBCYWNrb2ZmID0gcmVxdWlyZSgnYmFja28yJyk7XG5cbi8qKlxuICogSUU2KyBoYXNPd25Qcm9wZXJ0eVxuICovXG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBNYW5hZ2VyO1xuXG4vKipcbiAqIGBNYW5hZ2VyYCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZW5naW5lIGluc3RhbmNlIG9yIGVuZ2luZSB1cmkvb3B0c1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gTWFuYWdlciAodXJpLCBvcHRzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBNYW5hZ2VyKSkgcmV0dXJuIG5ldyBNYW5hZ2VyKHVyaSwgb3B0cyk7XG4gIGlmICh1cmkgJiYgKCdvYmplY3QnID09PSB0eXBlb2YgdXJpKSkge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gdW5kZWZpbmVkO1xuICB9XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gIG9wdHMucGF0aCA9IG9wdHMucGF0aCB8fCAnL3NvY2tldC5pbyc7XG4gIHRoaXMubnNwcyA9IHt9O1xuICB0aGlzLnN1YnMgPSBbXTtcbiAgdGhpcy5vcHRzID0gb3B0cztcbiAgdGhpcy5yZWNvbm5lY3Rpb24ob3B0cy5yZWNvbm5lY3Rpb24gIT09IGZhbHNlKTtcbiAgdGhpcy5yZWNvbm5lY3Rpb25BdHRlbXB0cyhvcHRzLnJlY29ubmVjdGlvbkF0dGVtcHRzIHx8IEluZmluaXR5KTtcbiAgdGhpcy5yZWNvbm5lY3Rpb25EZWxheShvcHRzLnJlY29ubmVjdGlvbkRlbGF5IHx8IDEwMDApO1xuICB0aGlzLnJlY29ubmVjdGlvbkRlbGF5TWF4KG9wdHMucmVjb25uZWN0aW9uRGVsYXlNYXggfHwgNTAwMCk7XG4gIHRoaXMucmFuZG9taXphdGlvbkZhY3RvcihvcHRzLnJhbmRvbWl6YXRpb25GYWN0b3IgfHwgMC41KTtcbiAgdGhpcy5iYWNrb2ZmID0gbmV3IEJhY2tvZmYoe1xuICAgIG1pbjogdGhpcy5yZWNvbm5lY3Rpb25EZWxheSgpLFxuICAgIG1heDogdGhpcy5yZWNvbm5lY3Rpb25EZWxheU1heCgpLFxuICAgIGppdHRlcjogdGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKClcbiAgfSk7XG4gIHRoaXMudGltZW91dChudWxsID09IG9wdHMudGltZW91dCA/IDIwMDAwIDogb3B0cy50aW1lb3V0KTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIHRoaXMudXJpID0gdXJpO1xuICB0aGlzLmNvbm5lY3RpbmcgPSBbXTtcbiAgdGhpcy5sYXN0UGluZyA9IG51bGw7XG4gIHRoaXMuZW5jb2RpbmcgPSBmYWxzZTtcbiAgdGhpcy5wYWNrZXRCdWZmZXIgPSBbXTtcbiAgdmFyIF9wYXJzZXIgPSBvcHRzLnBhcnNlciB8fCBwYXJzZXI7XG4gIHRoaXMuZW5jb2RlciA9IG5ldyBfcGFyc2VyLkVuY29kZXIoKTtcbiAgdGhpcy5kZWNvZGVyID0gbmV3IF9wYXJzZXIuRGVjb2RlcigpO1xuICB0aGlzLmF1dG9Db25uZWN0ID0gb3B0cy5hdXRvQ29ubmVjdCAhPT0gZmFsc2U7XG4gIGlmICh0aGlzLmF1dG9Db25uZWN0KSB0aGlzLm9wZW4oKTtcbn1cblxuLyoqXG4gKiBQcm9wYWdhdGUgZ2l2ZW4gZXZlbnQgdG8gc29ja2V0cyBhbmQgZW1pdCBvbiBgdGhpc2BcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5lbWl0QWxsID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgZm9yICh2YXIgbnNwIGluIHRoaXMubnNwcykge1xuICAgIGlmIChoYXMuY2FsbCh0aGlzLm5zcHMsIG5zcCkpIHtcbiAgICAgIHRoaXMubnNwc1tuc3BdLmVtaXQuYXBwbHkodGhpcy5uc3BzW25zcF0sIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFVwZGF0ZSBgc29ja2V0LmlkYCBvZiBhbGwgc29ja2V0c1xuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnVwZGF0ZVNvY2tldElkcyA9IGZ1bmN0aW9uICgpIHtcbiAgZm9yICh2YXIgbnNwIGluIHRoaXMubnNwcykge1xuICAgIGlmIChoYXMuY2FsbCh0aGlzLm5zcHMsIG5zcCkpIHtcbiAgICAgIHRoaXMubnNwc1tuc3BdLmlkID0gdGhpcy5nZW5lcmF0ZUlkKG5zcCk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIGdlbmVyYXRlIGBzb2NrZXQuaWRgIGZvciB0aGUgZ2l2ZW4gYG5zcGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbnNwXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5nZW5lcmF0ZUlkID0gZnVuY3Rpb24gKG5zcCkge1xuICByZXR1cm4gKG5zcCA9PT0gJy8nID8gJycgOiAobnNwICsgJyMnKSkgKyB0aGlzLmVuZ2luZS5pZDtcbn07XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKE1hbmFnZXIucHJvdG90eXBlKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBgcmVjb25uZWN0aW9uYCBjb25maWcuXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSB0cnVlL2ZhbHNlIGlmIGl0IHNob3VsZCBhdXRvbWF0aWNhbGx5IHJlY29ubmVjdFxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb24gPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb247XG4gIHRoaXMuX3JlY29ubmVjdGlvbiA9ICEhdjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIHJlY29ubmVjdGlvbiBhdHRlbXB0cyBjb25maWcuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1heCByZWNvbm5lY3Rpb24gYXR0ZW1wdHMgYmVmb3JlIGdpdmluZyB1cFxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb25BdHRlbXB0cyA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzO1xuICB0aGlzLl9yZWNvbm5lY3Rpb25BdHRlbXB0cyA9IHY7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBkZWxheSBiZXR3ZWVuIHJlY29ubmVjdGlvbnMuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5XG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbkRlbGF5ID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uRGVsYXk7XG4gIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5ID0gdjtcbiAgdGhpcy5iYWNrb2ZmICYmIHRoaXMuYmFja29mZi5zZXRNaW4odik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuTWFuYWdlci5wcm90b3R5cGUucmFuZG9taXphdGlvbkZhY3RvciA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JhbmRvbWl6YXRpb25GYWN0b3I7XG4gIHRoaXMuX3JhbmRvbWl6YXRpb25GYWN0b3IgPSB2O1xuICB0aGlzLmJhY2tvZmYgJiYgdGhpcy5iYWNrb2ZmLnNldEppdHRlcih2KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIG1heGltdW0gZGVsYXkgYmV0d2VlbiByZWNvbm5lY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWxheVxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb25EZWxheU1heCA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4O1xuICB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheU1heCA9IHY7XG4gIHRoaXMuYmFja29mZiAmJiB0aGlzLmJhY2tvZmYuc2V0TWF4KHYpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgY29ubmVjdGlvbiB0aW1lb3V0LiBgZmFsc2VgIHRvIGRpc2FibGVcbiAqXG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnRpbWVvdXQgPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl90aW1lb3V0O1xuICB0aGlzLl90aW1lb3V0ID0gdjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFN0YXJ0cyB0cnlpbmcgdG8gcmVjb25uZWN0IGlmIHJlY29ubmVjdGlvbiBpcyBlbmFibGVkIGFuZCB3ZSBoYXZlIG5vdFxuICogc3RhcnRlZCByZWNvbm5lY3RpbmcgeWV0XG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUubWF5YmVSZWNvbm5lY3RPbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIC8vIE9ubHkgdHJ5IHRvIHJlY29ubmVjdCBpZiBpdCdzIHRoZSBmaXJzdCB0aW1lIHdlJ3JlIGNvbm5lY3RpbmdcbiAgaWYgKCF0aGlzLnJlY29ubmVjdGluZyAmJiB0aGlzLl9yZWNvbm5lY3Rpb24gJiYgdGhpcy5iYWNrb2ZmLmF0dGVtcHRzID09PSAwKSB7XG4gICAgLy8ga2VlcHMgcmVjb25uZWN0aW9uIGZyb20gZmlyaW5nIHR3aWNlIGZvciB0aGUgc2FtZSByZWNvbm5lY3Rpb24gbG9vcFxuICAgIHRoaXMucmVjb25uZWN0KCk7XG4gIH1cbn07XG5cbi8qKlxuICogU2V0cyB0aGUgY3VycmVudCB0cmFuc3BvcnQgYHNvY2tldGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9uYWwsIGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9wZW4gPVxuTWFuYWdlci5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIChmbiwgb3B0cykge1xuICBkZWJ1ZygncmVhZHlTdGF0ZSAlcycsIHRoaXMucmVhZHlTdGF0ZSk7XG4gIGlmICh+dGhpcy5yZWFkeVN0YXRlLmluZGV4T2YoJ29wZW4nKSkgcmV0dXJuIHRoaXM7XG5cbiAgZGVidWcoJ29wZW5pbmcgJXMnLCB0aGlzLnVyaSk7XG4gIHRoaXMuZW5naW5lID0gZWlvKHRoaXMudXJpLCB0aGlzLm9wdHMpO1xuICB2YXIgc29ja2V0ID0gdGhpcy5lbmdpbmU7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW5pbmcnO1xuICB0aGlzLnNraXBSZWNvbm5lY3QgPSBmYWxzZTtcblxuICAvLyBlbWl0IGBvcGVuYFxuICB2YXIgb3BlblN1YiA9IG9uKHNvY2tldCwgJ29wZW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbm9wZW4oKTtcbiAgICBmbiAmJiBmbigpO1xuICB9KTtcblxuICAvLyBlbWl0IGBjb25uZWN0X2Vycm9yYFxuICB2YXIgZXJyb3JTdWIgPSBvbihzb2NrZXQsICdlcnJvcicsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGVidWcoJ2Nvbm5lY3RfZXJyb3InKTtcbiAgICBzZWxmLmNsZWFudXAoKTtcbiAgICBzZWxmLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgICBzZWxmLmVtaXRBbGwoJ2Nvbm5lY3RfZXJyb3InLCBkYXRhKTtcbiAgICBpZiAoZm4pIHtcbiAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ0Nvbm5lY3Rpb24gZXJyb3InKTtcbiAgICAgIGVyci5kYXRhID0gZGF0YTtcbiAgICAgIGZuKGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9ubHkgZG8gdGhpcyBpZiB0aGVyZSBpcyBubyBmbiB0byBoYW5kbGUgdGhlIGVycm9yXG4gICAgICBzZWxmLm1heWJlUmVjb25uZWN0T25PcGVuKCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBlbWl0IGBjb25uZWN0X3RpbWVvdXRgXG4gIGlmIChmYWxzZSAhPT0gdGhpcy5fdGltZW91dCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy5fdGltZW91dDtcbiAgICBkZWJ1ZygnY29ubmVjdCBhdHRlbXB0IHdpbGwgdGltZW91dCBhZnRlciAlZCcsIHRpbWVvdXQpO1xuXG4gICAgLy8gc2V0IHRpbWVyXG4gICAgdmFyIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBkZWJ1ZygnY29ubmVjdCBhdHRlbXB0IHRpbWVkIG91dCBhZnRlciAlZCcsIHRpbWVvdXQpO1xuICAgICAgb3BlblN1Yi5kZXN0cm95KCk7XG4gICAgICBzb2NrZXQuY2xvc2UoKTtcbiAgICAgIHNvY2tldC5lbWl0KCdlcnJvcicsICd0aW1lb3V0Jyk7XG4gICAgICBzZWxmLmVtaXRBbGwoJ2Nvbm5lY3RfdGltZW91dCcsIHRpbWVvdXQpO1xuICAgIH0sIHRpbWVvdXQpO1xuXG4gICAgdGhpcy5zdWJzLnB1c2goe1xuICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdGhpcy5zdWJzLnB1c2gob3BlblN1Yik7XG4gIHRoaXMuc3Vicy5wdXNoKGVycm9yU3ViKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IG9wZW4uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1Zygnb3BlbicpO1xuXG4gIC8vIGNsZWFyIG9sZCBzdWJzXG4gIHRoaXMuY2xlYW51cCgpO1xuXG4gIC8vIG1hcmsgYXMgb3BlblxuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIHRoaXMuZW1pdCgnb3BlbicpO1xuXG4gIC8vIGFkZCBuZXcgc3Vic1xuICB2YXIgc29ja2V0ID0gdGhpcy5lbmdpbmU7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2RhdGEnLCBiaW5kKHRoaXMsICdvbmRhdGEnKSkpO1xuICB0aGlzLnN1YnMucHVzaChvbihzb2NrZXQsICdwaW5nJywgYmluZCh0aGlzLCAnb25waW5nJykpKTtcbiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAncG9uZycsIGJpbmQodGhpcywgJ29ucG9uZycpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2Vycm9yJywgYmluZCh0aGlzLCAnb25lcnJvcicpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2Nsb3NlJywgYmluZCh0aGlzLCAnb25jbG9zZScpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHRoaXMuZGVjb2RlciwgJ2RlY29kZWQnLCBiaW5kKHRoaXMsICdvbmRlY29kZWQnKSkpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHBpbmcuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25waW5nID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmxhc3RQaW5nID0gbmV3IERhdGUoKTtcbiAgdGhpcy5lbWl0QWxsKCdwaW5nJyk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9ucG9uZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0QWxsKCdwb25nJywgbmV3IERhdGUoKSAtIHRoaXMubGFzdFBpbmcpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBkYXRhLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uZGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuZGVjb2Rlci5hZGQoZGF0YSk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIHBhcnNlciBmdWxseSBkZWNvZGVzIGEgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uZGVjb2RlZCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzb2NrZXQgZXJyb3IuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgZGVidWcoJ2Vycm9yJywgZXJyKTtcbiAgdGhpcy5lbWl0QWxsKCdlcnJvcicsIGVycik7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgc29ja2V0IGZvciB0aGUgZ2l2ZW4gYG5zcGAuXG4gKlxuICogQHJldHVybiB7U29ja2V0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5zb2NrZXQgPSBmdW5jdGlvbiAobnNwLCBvcHRzKSB7XG4gIHZhciBzb2NrZXQgPSB0aGlzLm5zcHNbbnNwXTtcbiAgaWYgKCFzb2NrZXQpIHtcbiAgICBzb2NrZXQgPSBuZXcgU29ja2V0KHRoaXMsIG5zcCwgb3B0cyk7XG4gICAgdGhpcy5uc3BzW25zcF0gPSBzb2NrZXQ7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHNvY2tldC5vbignY29ubmVjdGluZycsIG9uQ29ubmVjdGluZyk7XG4gICAgc29ja2V0Lm9uKCdjb25uZWN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgc29ja2V0LmlkID0gc2VsZi5nZW5lcmF0ZUlkKG5zcCk7XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5hdXRvQ29ubmVjdCkge1xuICAgICAgLy8gbWFudWFsbHkgY2FsbCBoZXJlIHNpbmNlIGNvbm5lY3RpbmcgZXZlbnQgaXMgZmlyZWQgYmVmb3JlIGxpc3RlbmluZ1xuICAgICAgb25Db25uZWN0aW5nKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25Db25uZWN0aW5nICgpIHtcbiAgICBpZiAoIX5pbmRleE9mKHNlbGYuY29ubmVjdGluZywgc29ja2V0KSkge1xuICAgICAgc2VsZi5jb25uZWN0aW5nLnB1c2goc29ja2V0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc29ja2V0O1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHNvY2tldCBjbG9zZS5cbiAqXG4gKiBAcGFyYW0ge1NvY2tldH0gc29ja2V0XG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIChzb2NrZXQpIHtcbiAgdmFyIGluZGV4ID0gaW5kZXhPZih0aGlzLmNvbm5lY3RpbmcsIHNvY2tldCk7XG4gIGlmICh+aW5kZXgpIHRoaXMuY29ubmVjdGluZy5zcGxpY2UoaW5kZXgsIDEpO1xuICBpZiAodGhpcy5jb25uZWN0aW5nLmxlbmd0aCkgcmV0dXJuO1xuXG4gIHRoaXMuY2xvc2UoKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgZGVidWcoJ3dyaXRpbmcgcGFja2V0ICVqJywgcGFja2V0KTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZiAocGFja2V0LnF1ZXJ5ICYmIHBhY2tldC50eXBlID09PSAwKSBwYWNrZXQubnNwICs9ICc/JyArIHBhY2tldC5xdWVyeTtcblxuICBpZiAoIXNlbGYuZW5jb2RpbmcpIHtcbiAgICAvLyBlbmNvZGUsIHRoZW4gd3JpdGUgdG8gZW5naW5lIHdpdGggcmVzdWx0XG4gICAgc2VsZi5lbmNvZGluZyA9IHRydWU7XG4gICAgdGhpcy5lbmNvZGVyLmVuY29kZShwYWNrZXQsIGZ1bmN0aW9uIChlbmNvZGVkUGFja2V0cykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNvZGVkUGFja2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZWxmLmVuZ2luZS53cml0ZShlbmNvZGVkUGFja2V0c1tpXSwgcGFja2V0Lm9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgc2VsZi5lbmNvZGluZyA9IGZhbHNlO1xuICAgICAgc2VsZi5wcm9jZXNzUGFja2V0UXVldWUoKTtcbiAgICB9KTtcbiAgfSBlbHNlIHsgLy8gYWRkIHBhY2tldCB0byB0aGUgcXVldWVcbiAgICBzZWxmLnBhY2tldEJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gIH1cbn07XG5cbi8qKlxuICogSWYgcGFja2V0IGJ1ZmZlciBpcyBub24tZW1wdHksIGJlZ2lucyBlbmNvZGluZyB0aGVcbiAqIG5leHQgcGFja2V0IGluIGxpbmUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucHJvY2Vzc1BhY2tldFF1ZXVlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5wYWNrZXRCdWZmZXIubGVuZ3RoID4gMCAmJiAhdGhpcy5lbmNvZGluZykge1xuICAgIHZhciBwYWNrID0gdGhpcy5wYWNrZXRCdWZmZXIuc2hpZnQoKTtcbiAgICB0aGlzLnBhY2tldChwYWNrKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCB0cmFuc3BvcnQgc3Vic2NyaXB0aW9ucyBhbmQgcGFja2V0IGJ1ZmZlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygnY2xlYW51cCcpO1xuXG4gIHZhciBzdWJzTGVuZ3RoID0gdGhpcy5zdWJzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJzTGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc3ViID0gdGhpcy5zdWJzLnNoaWZ0KCk7XG4gICAgc3ViLmRlc3Ryb3koKTtcbiAgfVxuXG4gIHRoaXMucGFja2V0QnVmZmVyID0gW107XG4gIHRoaXMuZW5jb2RpbmcgPSBmYWxzZTtcbiAgdGhpcy5sYXN0UGluZyA9IG51bGw7XG5cbiAgdGhpcy5kZWNvZGVyLmRlc3Ryb3koKTtcbn07XG5cbi8qKlxuICogQ2xvc2UgdGhlIGN1cnJlbnQgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLmNsb3NlID1cbk1hbmFnZXIucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdkaXNjb25uZWN0Jyk7XG4gIHRoaXMuc2tpcFJlY29ubmVjdCA9IHRydWU7XG4gIHRoaXMucmVjb25uZWN0aW5nID0gZmFsc2U7XG4gIGlmICgnb3BlbmluZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIC8vIGBvbmNsb3NlYCB3aWxsIG5vdCBmaXJlIGJlY2F1c2VcbiAgICAvLyBhbiBvcGVuIGV2ZW50IG5ldmVyIGhhcHBlbmVkXG4gICAgdGhpcy5jbGVhbnVwKCk7XG4gIH1cbiAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICBpZiAodGhpcy5lbmdpbmUpIHRoaXMuZW5naW5lLmNsb3NlKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGVuZ2luZSBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbmNsb3NlID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICBkZWJ1Zygnb25jbG9zZScpO1xuXG4gIHRoaXMuY2xlYW51cCgpO1xuICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIHRoaXMuZW1pdCgnY2xvc2UnLCByZWFzb24pO1xuXG4gIGlmICh0aGlzLl9yZWNvbm5lY3Rpb24gJiYgIXRoaXMuc2tpcFJlY29ubmVjdCkge1xuICAgIHRoaXMucmVjb25uZWN0KCk7XG4gIH1cbn07XG5cbi8qKlxuICogQXR0ZW1wdCBhIHJlY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnJlY29ubmVjdGluZyB8fCB0aGlzLnNraXBSZWNvbm5lY3QpIHJldHVybiB0aGlzO1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAodGhpcy5iYWNrb2ZmLmF0dGVtcHRzID49IHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzKSB7XG4gICAgZGVidWcoJ3JlY29ubmVjdCBmYWlsZWQnKTtcbiAgICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgICB0aGlzLmVtaXRBbGwoJ3JlY29ubmVjdF9mYWlsZWQnKTtcbiAgICB0aGlzLnJlY29ubmVjdGluZyA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHZhciBkZWxheSA9IHRoaXMuYmFja29mZi5kdXJhdGlvbigpO1xuICAgIGRlYnVnKCd3aWxsIHdhaXQgJWRtcyBiZWZvcmUgcmVjb25uZWN0IGF0dGVtcHQnLCBkZWxheSk7XG5cbiAgICB0aGlzLnJlY29ubmVjdGluZyA9IHRydWU7XG4gICAgdmFyIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5za2lwUmVjb25uZWN0KSByZXR1cm47XG5cbiAgICAgIGRlYnVnKCdhdHRlbXB0aW5nIHJlY29ubmVjdCcpO1xuICAgICAgc2VsZi5lbWl0QWxsKCdyZWNvbm5lY3RfYXR0ZW1wdCcsIHNlbGYuYmFja29mZi5hdHRlbXB0cyk7XG4gICAgICBzZWxmLmVtaXRBbGwoJ3JlY29ubmVjdGluZycsIHNlbGYuYmFja29mZi5hdHRlbXB0cyk7XG5cbiAgICAgIC8vIGNoZWNrIGFnYWluIGZvciB0aGUgY2FzZSBzb2NrZXQgY2xvc2VkIGluIGFib3ZlIGV2ZW50c1xuICAgICAgaWYgKHNlbGYuc2tpcFJlY29ubmVjdCkgcmV0dXJuO1xuXG4gICAgICBzZWxmLm9wZW4oZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgZGVidWcoJ3JlY29ubmVjdCBhdHRlbXB0IGVycm9yJyk7XG4gICAgICAgICAgc2VsZi5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICBzZWxmLnJlY29ubmVjdCgpO1xuICAgICAgICAgIHNlbGYuZW1pdEFsbCgncmVjb25uZWN0X2Vycm9yJywgZXJyLmRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlYnVnKCdyZWNvbm5lY3Qgc3VjY2VzcycpO1xuICAgICAgICAgIHNlbGYub25yZWNvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgZGVsYXkpO1xuXG4gICAgdGhpcy5zdWJzLnB1c2goe1xuICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHN1Y2Nlc3NmdWwgcmVjb25uZWN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9ucmVjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXR0ZW1wdCA9IHRoaXMuYmFja29mZi5hdHRlbXB0cztcbiAgdGhpcy5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gIHRoaXMudXBkYXRlU29ja2V0SWRzKCk7XG4gIHRoaXMuZW1pdEFsbCgncmVjb25uZWN0JywgYXR0ZW1wdCk7XG59O1xuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzXG4gKi9cblxudmFyIFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZSgneG1saHR0cHJlcXVlc3Qtc3NsJyk7XG52YXIgWEhSID0gcmVxdWlyZSgnLi9wb2xsaW5nLXhocicpO1xudmFyIEpTT05QID0gcmVxdWlyZSgnLi9wb2xsaW5nLWpzb25wJyk7XG52YXIgd2Vic29ja2V0ID0gcmVxdWlyZSgnLi93ZWJzb2NrZXQnKTtcblxuLyoqXG4gKiBFeHBvcnQgdHJhbnNwb3J0cy5cbiAqL1xuXG5leHBvcnRzLnBvbGxpbmcgPSBwb2xsaW5nO1xuZXhwb3J0cy53ZWJzb2NrZXQgPSB3ZWJzb2NrZXQ7XG5cbi8qKlxuICogUG9sbGluZyB0cmFuc3BvcnQgcG9seW1vcnBoaWMgY29uc3RydWN0b3IuXG4gKiBEZWNpZGVzIG9uIHhociB2cyBqc29ucCBiYXNlZCBvbiBmZWF0dXJlIGRldGVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwb2xsaW5nIChvcHRzKSB7XG4gIHZhciB4aHI7XG4gIHZhciB4ZCA9IGZhbHNlO1xuICB2YXIgeHMgPSBmYWxzZTtcbiAgdmFyIGpzb25wID0gZmFsc2UgIT09IG9wdHMuanNvbnA7XG5cbiAgaWYgKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgaXNTU0wgPSAnaHR0cHM6JyA9PT0gbG9jYXRpb24ucHJvdG9jb2w7XG4gICAgdmFyIHBvcnQgPSBsb2NhdGlvbi5wb3J0O1xuXG4gICAgLy8gc29tZSB1c2VyIGFnZW50cyBoYXZlIGVtcHR5IGBsb2NhdGlvbi5wb3J0YFxuICAgIGlmICghcG9ydCkge1xuICAgICAgcG9ydCA9IGlzU1NMID8gNDQzIDogODA7XG4gICAgfVxuXG4gICAgeGQgPSBvcHRzLmhvc3RuYW1lICE9PSBsb2NhdGlvbi5ob3N0bmFtZSB8fCBwb3J0ICE9PSBvcHRzLnBvcnQ7XG4gICAgeHMgPSBvcHRzLnNlY3VyZSAhPT0gaXNTU0w7XG4gIH1cblxuICBvcHRzLnhkb21haW4gPSB4ZDtcbiAgb3B0cy54c2NoZW1lID0geHM7XG4gIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdChvcHRzKTtcblxuICBpZiAoJ29wZW4nIGluIHhociAmJiAhb3B0cy5mb3JjZUpTT05QKSB7XG4gICAgcmV0dXJuIG5ldyBYSFIob3B0cyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFqc29ucCkgdGhyb3cgbmV3IEVycm9yKCdKU09OUCBkaXNhYmxlZCcpO1xuICAgIHJldHVybiBuZXcgSlNPTlAob3B0cyk7XG4gIH1cbn1cbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi4vdHJhbnNwb3J0Jyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1pbmhlcml0Jyk7XG52YXIgeWVhc3QgPSByZXF1aXJlKCd5ZWFzdCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBQb2xsaW5nO1xuXG4vKipcbiAqIElzIFhIUjIgc3VwcG9ydGVkP1xuICovXG5cbnZhciBoYXNYSFIyID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZSgneG1saHR0cHJlcXVlc3Qtc3NsJyk7XG4gIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoeyB4ZG9tYWluOiBmYWxzZSB9KTtcbiAgcmV0dXJuIG51bGwgIT0geGhyLnJlc3BvbnNlVHlwZTtcbn0pKCk7XG5cbi8qKlxuICogUG9sbGluZyBpbnRlcmZhY2UuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIFBvbGxpbmcgKG9wdHMpIHtcbiAgdmFyIGZvcmNlQmFzZTY0ID0gKG9wdHMgJiYgb3B0cy5mb3JjZUJhc2U2NCk7XG4gIGlmICghaGFzWEhSMiB8fCBmb3JjZUJhc2U2NCkge1xuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuICBUcmFuc3BvcnQuY2FsbCh0aGlzLCBvcHRzKTtcbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFRyYW5zcG9ydC5cbiAqL1xuXG5pbmhlcml0KFBvbGxpbmcsIFRyYW5zcG9ydCk7XG5cbi8qKlxuICogVHJhbnNwb3J0IG5hbWUuXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUubmFtZSA9ICdwb2xsaW5nJztcblxuLyoqXG4gKiBPcGVucyB0aGUgc29ja2V0ICh0cmlnZ2VycyBwb2xsaW5nKS4gV2Ugd3JpdGUgYSBQSU5HIG1lc3NhZ2UgdG8gZGV0ZXJtaW5lXG4gKiB3aGVuIHRoZSB0cmFuc3BvcnQgaXMgb3Blbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5kb09wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucG9sbCgpO1xufTtcblxuLyoqXG4gKiBQYXVzZXMgcG9sbGluZy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB1cG9uIGJ1ZmZlcnMgYXJlIGZsdXNoZWQgYW5kIHRyYW5zcG9ydCBpcyBwYXVzZWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKG9uUGF1c2UpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdwYXVzaW5nJztcblxuICBmdW5jdGlvbiBwYXVzZSAoKSB7XG4gICAgZGVidWcoJ3BhdXNlZCcpO1xuICAgIHNlbGYucmVhZHlTdGF0ZSA9ICdwYXVzZWQnO1xuICAgIG9uUGF1c2UoKTtcbiAgfVxuXG4gIGlmICh0aGlzLnBvbGxpbmcgfHwgIXRoaXMud3JpdGFibGUpIHtcbiAgICB2YXIgdG90YWwgPSAwO1xuXG4gICAgaWYgKHRoaXMucG9sbGluZykge1xuICAgICAgZGVidWcoJ3dlIGFyZSBjdXJyZW50bHkgcG9sbGluZyAtIHdhaXRpbmcgdG8gcGF1c2UnKTtcbiAgICAgIHRvdGFsKys7XG4gICAgICB0aGlzLm9uY2UoJ3BvbGxDb21wbGV0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVidWcoJ3ByZS1wYXVzZSBwb2xsaW5nIGNvbXBsZXRlJyk7XG4gICAgICAgIC0tdG90YWwgfHwgcGF1c2UoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghdGhpcy53cml0YWJsZSkge1xuICAgICAgZGVidWcoJ3dlIGFyZSBjdXJyZW50bHkgd3JpdGluZyAtIHdhaXRpbmcgdG8gcGF1c2UnKTtcbiAgICAgIHRvdGFsKys7XG4gICAgICB0aGlzLm9uY2UoJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWJ1ZygncHJlLXBhdXNlIHdyaXRpbmcgY29tcGxldGUnKTtcbiAgICAgICAgLS10b3RhbCB8fCBwYXVzZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHBhdXNlKCk7XG4gIH1cbn07XG5cbi8qKlxuICogU3RhcnRzIHBvbGxpbmcgY3ljbGUuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5wb2xsID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygncG9sbGluZycpO1xuICB0aGlzLnBvbGxpbmcgPSB0cnVlO1xuICB0aGlzLmRvUG9sbCgpO1xuICB0aGlzLmVtaXQoJ3BvbGwnKTtcbn07XG5cbi8qKlxuICogT3ZlcmxvYWRzIG9uRGF0YSB0byBkZXRlY3QgcGF5bG9hZHMuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBkZWJ1ZygncG9sbGluZyBnb3QgZGF0YSAlcycsIGRhdGEpO1xuICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiAocGFja2V0LCBpbmRleCwgdG90YWwpIHtcbiAgICAvLyBpZiBpdHMgdGhlIGZpcnN0IG1lc3NhZ2Ugd2UgY29uc2lkZXIgdGhlIHRyYW5zcG9ydCBvcGVuXG4gICAgaWYgKCdvcGVuaW5nJyA9PT0gc2VsZi5yZWFkeVN0YXRlKSB7XG4gICAgICBzZWxmLm9uT3BlbigpO1xuICAgIH1cblxuICAgIC8vIGlmIGl0cyBhIGNsb3NlIHBhY2tldCwgd2UgY2xvc2UgdGhlIG9uZ29pbmcgcmVxdWVzdHNcbiAgICBpZiAoJ2Nsb3NlJyA9PT0gcGFja2V0LnR5cGUpIHtcbiAgICAgIHNlbGYub25DbG9zZSgpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIG90aGVyd2lzZSBieXBhc3Mgb25EYXRhIGFuZCBoYW5kbGUgdGhlIG1lc3NhZ2VcbiAgICBzZWxmLm9uUGFja2V0KHBhY2tldCk7XG4gIH07XG5cbiAgLy8gZGVjb2RlIHBheWxvYWRcbiAgcGFyc2VyLmRlY29kZVBheWxvYWQoZGF0YSwgdGhpcy5zb2NrZXQuYmluYXJ5VHlwZSwgY2FsbGJhY2spO1xuXG4gIC8vIGlmIGFuIGV2ZW50IGRpZCBub3QgdHJpZ2dlciBjbG9zaW5nXG4gIGlmICgnY2xvc2VkJyAhPT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgLy8gaWYgd2UgZ290IGRhdGEgd2UncmUgbm90IHBvbGxpbmdcbiAgICB0aGlzLnBvbGxpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoJ3BvbGxDb21wbGV0ZScpO1xuXG4gICAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICB0aGlzLnBvbGwoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWcoJ2lnbm9yaW5nIHBvbGwgLSB0cmFuc3BvcnQgc3RhdGUgXCIlc1wiJywgdGhpcy5yZWFkeVN0YXRlKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRm9yIHBvbGxpbmcsIHNlbmQgYSBjbG9zZSBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIGNsb3NlICgpIHtcbiAgICBkZWJ1Zygnd3JpdGluZyBjbG9zZSBwYWNrZXQnKTtcbiAgICBzZWxmLndyaXRlKFt7IHR5cGU6ICdjbG9zZScgfV0pO1xuICB9XG5cbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgZGVidWcoJ3RyYW5zcG9ydCBvcGVuIC0gY2xvc2luZycpO1xuICAgIGNsb3NlKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gaW4gY2FzZSB3ZSdyZSB0cnlpbmcgdG8gY2xvc2Ugd2hpbGVcbiAgICAvLyBoYW5kc2hha2luZyBpcyBpbiBwcm9ncmVzcyAoR0gtMTY0KVxuICAgIGRlYnVnKCd0cmFuc3BvcnQgbm90IG9wZW4gLSBkZWZlcnJpbmcgY2xvc2UnKTtcbiAgICB0aGlzLm9uY2UoJ29wZW4nLCBjbG9zZSk7XG4gIH1cbn07XG5cbi8qKlxuICogV3JpdGVzIGEgcGFja2V0cyBwYXlsb2FkLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgcGFja2V0c1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZHJhaW4gY2FsbGJhY2tcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKHBhY2tldHMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG4gIHZhciBjYWxsYmFja2ZuID0gZnVuY3Rpb24gKCkge1xuICAgIHNlbGYud3JpdGFibGUgPSB0cnVlO1xuICAgIHNlbGYuZW1pdCgnZHJhaW4nKTtcbiAgfTtcblxuICBwYXJzZXIuZW5jb2RlUGF5bG9hZChwYWNrZXRzLCB0aGlzLnN1cHBvcnRzQmluYXJ5LCBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHNlbGYuZG9Xcml0ZShkYXRhLCBjYWxsYmFja2ZuKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlcyB1cmkgZm9yIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUudXJpID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJ5IHx8IHt9O1xuICB2YXIgc2NoZW1hID0gdGhpcy5zZWN1cmUgPyAnaHR0cHMnIDogJ2h0dHAnO1xuICB2YXIgcG9ydCA9ICcnO1xuXG4gIC8vIGNhY2hlIGJ1c3RpbmcgaXMgZm9yY2VkXG4gIGlmIChmYWxzZSAhPT0gdGhpcy50aW1lc3RhbXBSZXF1ZXN0cykge1xuICAgIHF1ZXJ5W3RoaXMudGltZXN0YW1wUGFyYW1dID0geWVhc3QoKTtcbiAgfVxuXG4gIGlmICghdGhpcy5zdXBwb3J0c0JpbmFyeSAmJiAhcXVlcnkuc2lkKSB7XG4gICAgcXVlcnkuYjY0ID0gMTtcbiAgfVxuXG4gIHF1ZXJ5ID0gcGFyc2Vxcy5lbmNvZGUocXVlcnkpO1xuXG4gIC8vIGF2b2lkIHBvcnQgaWYgZGVmYXVsdCBmb3Igc2NoZW1hXG4gIGlmICh0aGlzLnBvcnQgJiYgKCgnaHR0cHMnID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMucG9ydCkgIT09IDQ0MykgfHxcbiAgICAgKCdodHRwJyA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLnBvcnQpICE9PSA4MCkpKSB7XG4gICAgcG9ydCA9ICc6JyArIHRoaXMucG9ydDtcbiAgfVxuXG4gIC8vIHByZXBlbmQgPyB0byBxdWVyeVxuICBpZiAocXVlcnkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSAnPycgKyBxdWVyeTtcbiAgfVxuXG4gIHZhciBpcHY2ID0gdGhpcy5ob3N0bmFtZS5pbmRleE9mKCc6JykgIT09IC0xO1xuICByZXR1cm4gc2NoZW1hICsgJzovLycgKyAoaXB2NiA/ICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScgOiB0aGlzLmhvc3RuYW1lKSArIHBvcnQgKyB0aGlzLnBhdGggKyBxdWVyeTtcbn07XG4iLCIvKiBnbG9iYWwgQmxvYiBGaWxlICovXG5cbi8qXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzLlxuICovXG5cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIHdpdGhOYXRpdmVCbG9iID0gdHlwZW9mIEJsb2IgPT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiB0b1N0cmluZy5jYWxsKEJsb2IpID09PSAnW29iamVjdCBCbG9iQ29uc3RydWN0b3JdJztcbnZhciB3aXRoTmF0aXZlRmlsZSA9IHR5cGVvZiBGaWxlID09PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgRmlsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdG9TdHJpbmcuY2FsbChGaWxlKSA9PT0gJ1tvYmplY3QgRmlsZUNvbnN0cnVjdG9yXSc7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNCaW5hcnk7XG5cbi8qKlxuICogQ2hlY2tzIGZvciBiaW5hcnkgZGF0YS5cbiAqXG4gKiBTdXBwb3J0cyBCdWZmZXIsIEFycmF5QnVmZmVyLCBCbG9iIGFuZCBGaWxlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhbnl0aGluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBoYXNCaW5hcnkgKG9iaikge1xuICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChoYXNCaW5hcnkob2JqW2ldKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCh0eXBlb2YgQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIEJ1ZmZlci5pc0J1ZmZlciAmJiBCdWZmZXIuaXNCdWZmZXIob2JqKSkgfHxcbiAgICAodHlwZW9mIEFycmF5QnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iaiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fFxuICAgICh3aXRoTmF0aXZlQmxvYiAmJiBvYmogaW5zdGFuY2VvZiBCbG9iKSB8fFxuICAgICh3aXRoTmF0aXZlRmlsZSAmJiBvYmogaW5zdGFuY2VvZiBGaWxlKVxuICApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL0F1dG9tYXR0aWMvaGFzLWJpbmFyeS9wdWxsLzRcbiAgaWYgKG9iai50b0pTT04gJiYgdHlwZW9mIG9iai50b0pTT04gPT09ICdmdW5jdGlvbicgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBoYXNCaW5hcnkob2JqLnRvSlNPTigpLCB0cnVlKTtcbiAgfVxuXG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSAmJiBoYXNCaW5hcnkob2JqW2tleV0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbHBoYWJldCA9ICcwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei1fJy5zcGxpdCgnJylcbiAgLCBsZW5ndGggPSA2NFxuICAsIG1hcCA9IHt9XG4gICwgc2VlZCA9IDBcbiAgLCBpID0gMFxuICAsIHByZXY7XG5cbi8qKlxuICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgc3BlY2lmaWVkIG51bWJlci5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbnVtIFRoZSBudW1iZXIgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG51bWJlci5cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGVuY29kZShudW0pIHtcbiAgdmFyIGVuY29kZWQgPSAnJztcblxuICBkbyB7XG4gICAgZW5jb2RlZCA9IGFscGhhYmV0W251bSAlIGxlbmd0aF0gKyBlbmNvZGVkO1xuICAgIG51bSA9IE1hdGguZmxvb3IobnVtIC8gbGVuZ3RoKTtcbiAgfSB3aGlsZSAobnVtID4gMCk7XG5cbiAgcmV0dXJuIGVuY29kZWQ7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBpbnRlZ2VyIHZhbHVlIHNwZWNpZmllZCBieSB0aGUgZ2l2ZW4gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge051bWJlcn0gVGhlIGludGVnZXIgdmFsdWUgcmVwcmVzZW50ZWQgYnkgdGhlIHN0cmluZy5cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGRlY29kZShzdHIpIHtcbiAgdmFyIGRlY29kZWQgPSAwO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBkZWNvZGVkID0gZGVjb2RlZCAqIGxlbmd0aCArIG1hcFtzdHIuY2hhckF0KGkpXTtcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVkO1xufVxuXG4vKipcbiAqIFllYXN0OiBBIHRpbnkgZ3Jvd2luZyBpZCBnZW5lcmF0b3IuXG4gKlxuICogQHJldHVybnMge1N0cmluZ30gQSB1bmlxdWUgaWQuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiB5ZWFzdCgpIHtcbiAgdmFyIG5vdyA9IGVuY29kZSgrbmV3IERhdGUoKSk7XG5cbiAgaWYgKG5vdyAhPT0gcHJldikgcmV0dXJuIHNlZWQgPSAwLCBwcmV2ID0gbm93O1xuICByZXR1cm4gbm93ICsnLicrIGVuY29kZShzZWVkKyspO1xufVxuXG4vL1xuLy8gTWFwIGVhY2ggY2hhcmFjdGVyIHRvIGl0cyBpbmRleC5cbi8vXG5mb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSBtYXBbYWxwaGFiZXRbaV1dID0gaTtcblxuLy9cbi8vIEV4cG9zZSB0aGUgYHllYXN0YCwgYGVuY29kZWAgYW5kIGBkZWNvZGVgIGZ1bmN0aW9ucy5cbi8vXG55ZWFzdC5lbmNvZGUgPSBlbmNvZGU7XG55ZWFzdC5kZWNvZGUgPSBkZWNvZGU7XG5tb2R1bGUuZXhwb3J0cyA9IHllYXN0O1xuIiwiXG52YXIgaW5kZXhPZiA9IFtdLmluZGV4T2Y7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXJyLCBvYmope1xuICBpZiAoaW5kZXhPZikgcmV0dXJuIGFyci5pbmRleE9mKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKGFycltpXSA9PT0gb2JqKSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59OyIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBwYXJzZXIgPSByZXF1aXJlKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgdG9BcnJheSA9IHJlcXVpcmUoJ3RvLWFycmF5Jyk7XG52YXIgb24gPSByZXF1aXJlKCcuL29uJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1iaW5kJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tY2xpZW50OnNvY2tldCcpO1xudmFyIHBhcnNlcXMgPSByZXF1aXJlKCdwYXJzZXFzJyk7XG52YXIgaGFzQmluID0gcmVxdWlyZSgnaGFzLWJpbmFyeTInKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBTb2NrZXQ7XG5cbi8qKlxuICogSW50ZXJuYWwgZXZlbnRzIChibGFja2xpc3RlZCkuXG4gKiBUaGVzZSBldmVudHMgY2FuJ3QgYmUgZW1pdHRlZCBieSB0aGUgdXNlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG52YXIgZXZlbnRzID0ge1xuICBjb25uZWN0OiAxLFxuICBjb25uZWN0X2Vycm9yOiAxLFxuICBjb25uZWN0X3RpbWVvdXQ6IDEsXG4gIGNvbm5lY3Rpbmc6IDEsXG4gIGRpc2Nvbm5lY3Q6IDEsXG4gIGVycm9yOiAxLFxuICByZWNvbm5lY3Q6IDEsXG4gIHJlY29ubmVjdF9hdHRlbXB0OiAxLFxuICByZWNvbm5lY3RfZmFpbGVkOiAxLFxuICByZWNvbm5lY3RfZXJyb3I6IDEsXG4gIHJlY29ubmVjdGluZzogMSxcbiAgcGluZzogMSxcbiAgcG9uZzogMVxufTtcblxuLyoqXG4gKiBTaG9ydGN1dCB0byBgRW1pdHRlciNlbWl0YC5cbiAqL1xuXG52YXIgZW1pdCA9IEVtaXR0ZXIucHJvdG90eXBlLmVtaXQ7XG5cbi8qKlxuICogYFNvY2tldGAgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBTb2NrZXQgKGlvLCBuc3AsIG9wdHMpIHtcbiAgdGhpcy5pbyA9IGlvO1xuICB0aGlzLm5zcCA9IG5zcDtcbiAgdGhpcy5qc29uID0gdGhpczsgLy8gY29tcGF0XG4gIHRoaXMuaWRzID0gMDtcbiAgdGhpcy5hY2tzID0ge307XG4gIHRoaXMucmVjZWl2ZUJ1ZmZlciA9IFtdO1xuICB0aGlzLnNlbmRCdWZmZXIgPSBbXTtcbiAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgdGhpcy5kaXNjb25uZWN0ZWQgPSB0cnVlO1xuICB0aGlzLmZsYWdzID0ge307XG4gIGlmIChvcHRzICYmIG9wdHMucXVlcnkpIHtcbiAgICB0aGlzLnF1ZXJ5ID0gb3B0cy5xdWVyeTtcbiAgfVxuICBpZiAodGhpcy5pby5hdXRvQ29ubmVjdCkgdGhpcy5vcGVuKCk7XG59XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKFNvY2tldC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIFN1YnNjcmliZSB0byBvcGVuLCBjbG9zZSBhbmQgcGFja2V0IGV2ZW50c1xuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuc3ViRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5zdWJzKSByZXR1cm47XG5cbiAgdmFyIGlvID0gdGhpcy5pbztcbiAgdGhpcy5zdWJzID0gW1xuICAgIG9uKGlvLCAnb3BlbicsIGJpbmQodGhpcywgJ29ub3BlbicpKSxcbiAgICBvbihpbywgJ3BhY2tldCcsIGJpbmQodGhpcywgJ29ucGFja2V0JykpLFxuICAgIG9uKGlvLCAnY2xvc2UnLCBiaW5kKHRoaXMsICdvbmNsb3NlJykpXG4gIF07XG59O1xuXG4vKipcbiAqIFwiT3BlbnNcIiB0aGUgc29ja2V0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vcGVuID1cblNvY2tldC5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuY29ubmVjdGVkKSByZXR1cm4gdGhpcztcblxuICB0aGlzLnN1YkV2ZW50cygpO1xuICB0aGlzLmlvLm9wZW4oKTsgLy8gZW5zdXJlIG9wZW5cbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5pby5yZWFkeVN0YXRlKSB0aGlzLm9ub3BlbigpO1xuICB0aGlzLmVtaXQoJ2Nvbm5lY3RpbmcnKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNlbmRzIGEgYG1lc3NhZ2VgIGV2ZW50LlxuICpcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMpO1xuICBhcmdzLnVuc2hpZnQoJ21lc3NhZ2UnKTtcbiAgdGhpcy5lbWl0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogT3ZlcnJpZGUgYGVtaXRgLlxuICogSWYgdGhlIGV2ZW50IGlzIGluIGBldmVudHNgLCBpdCdzIGVtaXR0ZWQgbm9ybWFsbHkuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IG5hbWVcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiAoZXYpIHtcbiAgaWYgKGV2ZW50cy5oYXNPd25Qcm9wZXJ0eShldikpIHtcbiAgICBlbWl0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzKTtcbiAgdmFyIHBhY2tldCA9IHtcbiAgICB0eXBlOiAodGhpcy5mbGFncy5iaW5hcnkgIT09IHVuZGVmaW5lZCA/IHRoaXMuZmxhZ3MuYmluYXJ5IDogaGFzQmluKGFyZ3MpKSA/IHBhcnNlci5CSU5BUllfRVZFTlQgOiBwYXJzZXIuRVZFTlQsXG4gICAgZGF0YTogYXJnc1xuICB9O1xuXG4gIHBhY2tldC5vcHRpb25zID0ge307XG4gIHBhY2tldC5vcHRpb25zLmNvbXByZXNzID0gIXRoaXMuZmxhZ3MgfHwgZmFsc2UgIT09IHRoaXMuZmxhZ3MuY29tcHJlc3M7XG5cbiAgLy8gZXZlbnQgYWNrIGNhbGxiYWNrXG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdKSB7XG4gICAgZGVidWcoJ2VtaXR0aW5nIHBhY2tldCB3aXRoIGFjayBpZCAlZCcsIHRoaXMuaWRzKTtcbiAgICB0aGlzLmFja3NbdGhpcy5pZHNdID0gYXJncy5wb3AoKTtcbiAgICBwYWNrZXQuaWQgPSB0aGlzLmlkcysrO1xuICB9XG5cbiAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgdGhpcy5wYWNrZXQocGFja2V0KTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnNlbmRCdWZmZXIucHVzaChwYWNrZXQpO1xuICB9XG5cbiAgdGhpcy5mbGFncyA9IHt9O1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZW5kcyBhIHBhY2tldC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgcGFja2V0Lm5zcCA9IHRoaXMubnNwO1xuICB0aGlzLmlvLnBhY2tldChwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBlbmdpbmUgYG9wZW5gLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygndHJhbnNwb3J0IGlzIG9wZW4gLSBjb25uZWN0aW5nJyk7XG5cbiAgLy8gd3JpdGUgY29ubmVjdCBwYWNrZXQgaWYgbmVjZXNzYXJ5XG4gIGlmICgnLycgIT09IHRoaXMubnNwKSB7XG4gICAgaWYgKHRoaXMucXVlcnkpIHtcbiAgICAgIHZhciBxdWVyeSA9IHR5cGVvZiB0aGlzLnF1ZXJ5ID09PSAnb2JqZWN0JyA/IHBhcnNlcXMuZW5jb2RlKHRoaXMucXVlcnkpIDogdGhpcy5xdWVyeTtcbiAgICAgIGRlYnVnKCdzZW5kaW5nIGNvbm5lY3QgcGFja2V0IHdpdGggcXVlcnkgJXMnLCBxdWVyeSk7XG4gICAgICB0aGlzLnBhY2tldCh7dHlwZTogcGFyc2VyLkNPTk5FQ1QsIHF1ZXJ5OiBxdWVyeX0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBhY2tldCh7dHlwZTogcGFyc2VyLkNPTk5FQ1R9KTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gZW5naW5lIGBjbG9zZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJlYXNvblxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmNsb3NlID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICBkZWJ1ZygnY2xvc2UgKCVzKScsIHJlYXNvbik7XG4gIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gIHRoaXMuZGlzY29ubmVjdGVkID0gdHJ1ZTtcbiAgZGVsZXRlIHRoaXMuaWQ7XG4gIHRoaXMuZW1pdCgnZGlzY29ubmVjdCcsIHJlYXNvbik7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aXRoIHNvY2tldCBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdmFyIHNhbWVOYW1lc3BhY2UgPSBwYWNrZXQubnNwID09PSB0aGlzLm5zcDtcbiAgdmFyIHJvb3ROYW1lc3BhY2VFcnJvciA9IHBhY2tldC50eXBlID09PSBwYXJzZXIuRVJST1IgJiYgcGFja2V0Lm5zcCA9PT0gJy8nO1xuXG4gIGlmICghc2FtZU5hbWVzcGFjZSAmJiAhcm9vdE5hbWVzcGFjZUVycm9yKSByZXR1cm47XG5cbiAgc3dpdGNoIChwYWNrZXQudHlwZSkge1xuICAgIGNhc2UgcGFyc2VyLkNPTk5FQ1Q6XG4gICAgICB0aGlzLm9uY29ubmVjdCgpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5FVkVOVDpcbiAgICAgIHRoaXMub25ldmVudChwYWNrZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5CSU5BUllfRVZFTlQ6XG4gICAgICB0aGlzLm9uZXZlbnQocGFja2V0KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuQUNLOlxuICAgICAgdGhpcy5vbmFjayhwYWNrZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5CSU5BUllfQUNLOlxuICAgICAgdGhpcy5vbmFjayhwYWNrZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5ESVNDT05ORUNUOlxuICAgICAgdGhpcy5vbmRpc2Nvbm5lY3QoKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuRVJST1I6XG4gICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgcGFja2V0LmRhdGEpO1xuICAgICAgYnJlYWs7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gYSBzZXJ2ZXIgZXZlbnQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmV2ZW50ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICB2YXIgYXJncyA9IHBhY2tldC5kYXRhIHx8IFtdO1xuICBkZWJ1ZygnZW1pdHRpbmcgZXZlbnQgJWonLCBhcmdzKTtcblxuICBpZiAobnVsbCAhPSBwYWNrZXQuaWQpIHtcbiAgICBkZWJ1ZygnYXR0YWNoaW5nIGFjayBjYWxsYmFjayB0byBldmVudCcpO1xuICAgIGFyZ3MucHVzaCh0aGlzLmFjayhwYWNrZXQuaWQpKTtcbiAgfVxuXG4gIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgIGVtaXQuYXBwbHkodGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5yZWNlaXZlQnVmZmVyLnB1c2goYXJncyk7XG4gIH1cbn07XG5cbi8qKlxuICogUHJvZHVjZXMgYW4gYWNrIGNhbGxiYWNrIHRvIGVtaXQgd2l0aCBhbiBldmVudC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmFjayA9IGZ1bmN0aW9uIChpZCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBzZW50ID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gcHJldmVudCBkb3VibGUgY2FsbGJhY2tzXG4gICAgaWYgKHNlbnQpIHJldHVybjtcbiAgICBzZW50ID0gdHJ1ZTtcbiAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICBkZWJ1Zygnc2VuZGluZyBhY2sgJWonLCBhcmdzKTtcblxuICAgIHNlbGYucGFja2V0KHtcbiAgICAgIHR5cGU6IGhhc0JpbihhcmdzKSA/IHBhcnNlci5CSU5BUllfQUNLIDogcGFyc2VyLkFDSyxcbiAgICAgIGlkOiBpZCxcbiAgICAgIGRhdGE6IGFyZ3NcbiAgICB9KTtcbiAgfTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gYSBzZXJ2ZXIgYWNrbm93bGVnZW1lbnQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmFjayA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdmFyIGFjayA9IHRoaXMuYWNrc1twYWNrZXQuaWRdO1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGFjaykge1xuICAgIGRlYnVnKCdjYWxsaW5nIGFjayAlcyB3aXRoICVqJywgcGFja2V0LmlkLCBwYWNrZXQuZGF0YSk7XG4gICAgYWNrLmFwcGx5KHRoaXMsIHBhY2tldC5kYXRhKTtcbiAgICBkZWxldGUgdGhpcy5hY2tzW3BhY2tldC5pZF07XG4gIH0gZWxzZSB7XG4gICAgZGVidWcoJ2JhZCBhY2sgJXMnLCBwYWNrZXQuaWQpO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHNlcnZlciBjb25uZWN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25jb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmNvbm5lY3RlZCA9IHRydWU7XG4gIHRoaXMuZGlzY29ubmVjdGVkID0gZmFsc2U7XG4gIHRoaXMuZW1pdCgnY29ubmVjdCcpO1xuICB0aGlzLmVtaXRCdWZmZXJlZCgpO1xufTtcblxuLyoqXG4gKiBFbWl0IGJ1ZmZlcmVkIGV2ZW50cyAocmVjZWl2ZWQgYW5kIGVtaXR0ZWQpLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuZW1pdEJ1ZmZlcmVkID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaTtcbiAgZm9yIChpID0gMDsgaSA8IHRoaXMucmVjZWl2ZUJ1ZmZlci5sZW5ndGg7IGkrKykge1xuICAgIGVtaXQuYXBwbHkodGhpcywgdGhpcy5yZWNlaXZlQnVmZmVyW2ldKTtcbiAgfVxuICB0aGlzLnJlY2VpdmVCdWZmZXIgPSBbXTtcblxuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5zZW5kQnVmZmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgdGhpcy5wYWNrZXQodGhpcy5zZW5kQnVmZmVyW2ldKTtcbiAgfVxuICB0aGlzLnNlbmRCdWZmZXIgPSBbXTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gc2VydmVyIGRpc2Nvbm5lY3QuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdzZXJ2ZXIgZGlzY29ubmVjdCAoJXMpJywgdGhpcy5uc3ApO1xuICB0aGlzLmRlc3Ryb3koKTtcbiAgdGhpcy5vbmNsb3NlKCdpbyBzZXJ2ZXIgZGlzY29ubmVjdCcpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBmb3JjZWQgY2xpZW50L3NlcnZlciBzaWRlIGRpc2Nvbm5lY3Rpb25zLFxuICogdGhpcyBtZXRob2QgZW5zdXJlcyB0aGUgbWFuYWdlciBzdG9wcyB0cmFja2luZyB1cyBhbmRcbiAqIHRoYXQgcmVjb25uZWN0aW9ucyBkb24ndCBnZXQgdHJpZ2dlcmVkIGZvciB0aGlzLlxuICpcbiAqIEBhcGkgcHJpdmF0ZS5cbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnN1YnMpIHtcbiAgICAvLyBjbGVhbiBzdWJzY3JpcHRpb25zIHRvIGF2b2lkIHJlY29ubmVjdGlvbnNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc3Vicy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5zdWJzW2ldLmRlc3Ryb3koKTtcbiAgICB9XG4gICAgdGhpcy5zdWJzID0gbnVsbDtcbiAgfVxuXG4gIHRoaXMuaW8uZGVzdHJveSh0aGlzKTtcbn07XG5cbi8qKlxuICogRGlzY29ubmVjdHMgdGhlIHNvY2tldCBtYW51YWxseS5cbiAqXG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5jbG9zZSA9XG5Tb2NrZXQucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgIGRlYnVnKCdwZXJmb3JtaW5nIGRpc2Nvbm5lY3QgKCVzKScsIHRoaXMubnNwKTtcbiAgICB0aGlzLnBhY2tldCh7IHR5cGU6IHBhcnNlci5ESVNDT05ORUNUIH0pO1xuICB9XG5cbiAgLy8gcmVtb3ZlIHNvY2tldCBmcm9tIHBvb2xcbiAgdGhpcy5kZXN0cm95KCk7XG5cbiAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgLy8gZmlyZSBldmVudHNcbiAgICB0aGlzLm9uY2xvc2UoJ2lvIGNsaWVudCBkaXNjb25uZWN0Jyk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGNvbXByZXNzIGZsYWcuXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBpZiBgdHJ1ZWAsIGNvbXByZXNzZXMgdGhlIHNlbmRpbmcgZGF0YVxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuY29tcHJlc3MgPSBmdW5jdGlvbiAoY29tcHJlc3MpIHtcbiAgdGhpcy5mbGFncy5jb21wcmVzcyA9IGNvbXByZXNzO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgYmluYXJ5IGZsYWdcbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHdoZXRoZXIgdGhlIGVtaXR0ZWQgZGF0YSBjb250YWlucyBiaW5hcnlcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmJpbmFyeSA9IGZ1bmN0aW9uIChiaW5hcnkpIHtcbiAgdGhpcy5mbGFncy5iaW5hcnkgPSBiaW5hcnk7XG4gIHJldHVybiB0aGlzO1xufTtcbiIsIlxyXG4vKipcclxuICogRXhwb3NlIGBFbWl0dGVyYC5cclxuICovXHJcblxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICBtb2R1bGUuZXhwb3J0cyA9IEVtaXR0ZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbml0aWFsaXplIGEgbmV3IGBFbWl0dGVyYC5cclxuICpcclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5mdW5jdGlvbiBFbWl0dGVyKG9iaikge1xyXG4gIGlmIChvYmopIHJldHVybiBtaXhpbihvYmopO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIE1peGluIHRoZSBlbWl0dGVyIHByb3BlcnRpZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcclxuICogQHJldHVybiB7T2JqZWN0fVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5mdW5jdGlvbiBtaXhpbihvYmopIHtcclxuICBmb3IgKHZhciBrZXkgaW4gRW1pdHRlci5wcm90b3R5cGUpIHtcclxuICAgIG9ialtrZXldID0gRW1pdHRlci5wcm90b3R5cGVba2V5XTtcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufVxyXG5cclxuLyoqXHJcbiAqIExpc3RlbiBvbiB0aGUgZ2l2ZW4gYGV2ZW50YCB3aXRoIGBmbmAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9uID1cclxuRW1pdHRlci5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gICh0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXSlcclxuICAgIC5wdXNoKGZuKTtcclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBBZGRzIGFuIGBldmVudGAgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgYSBzaW5nbGVcclxuICogdGltZSB0aGVuIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgZnVuY3Rpb24gb24oKSB7XHJcbiAgICB0aGlzLm9mZihldmVudCwgb24pO1xyXG4gICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICB9XHJcblxyXG4gIG9uLmZuID0gZm47XHJcbiAgdGhpcy5vbihldmVudCwgb24pO1xyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSB0aGUgZ2l2ZW4gY2FsbGJhY2sgZm9yIGBldmVudGAgb3IgYWxsXHJcbiAqIHJlZ2lzdGVyZWQgY2FsbGJhY2tzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vZmYgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuXHJcbiAgLy8gYWxsXHJcbiAgaWYgKDAgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgdGhpcy5fY2FsbGJhY2tzID0ge307XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8vIHNwZWNpZmljIGV2ZW50XHJcbiAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcbiAgaWYgKCFjYWxsYmFja3MpIHJldHVybiB0aGlzO1xyXG5cclxuICAvLyByZW1vdmUgYWxsIGhhbmRsZXJzXHJcbiAgaWYgKDEgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8vIHJlbW92ZSBzcGVjaWZpYyBoYW5kbGVyXHJcbiAgdmFyIGNiO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjYiA9IGNhbGxiYWNrc1tpXTtcclxuICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7XHJcbiAgICAgIGNhbGxiYWNrcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBFbWl0IGBldmVudGAgd2l0aCB0aGUgZ2l2ZW4gYXJncy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7TWl4ZWR9IC4uLlxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpXHJcbiAgICAsIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcblxyXG4gIGlmIChjYWxsYmFja3MpIHtcclxuICAgIGNhbGxiYWNrcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcclxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcclxuICAgICAgY2FsbGJhY2tzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJuIGFycmF5IG9mIGNhbGxiYWNrcyBmb3IgYGV2ZW50YC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEByZXR1cm4ge0FycmF5fVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgcmV0dXJuIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW107XHJcbn07XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgdGhpcyBlbWl0dGVyIGhhcyBgZXZlbnRgIGhhbmRsZXJzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHJldHVybiB7Qm9vbGVhbn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5oYXNMaXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgcmV0dXJuICEhIHRoaXMubGlzdGVuZXJzKGV2ZW50KS5sZW5ndGg7XHJcbn07XHJcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IG9uO1xuXG4vKipcbiAqIEhlbHBlciBmb3Igc3Vic2NyaXB0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxFdmVudEVtaXR0ZXJ9IG9iaiB3aXRoIGBFbWl0dGVyYCBtaXhpbiBvciBgRXZlbnRFbWl0dGVyYFxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IG5hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIG9uIChvYmosIGV2LCBmbikge1xuICBvYmoub24oZXYsIGZuKTtcbiAgcmV0dXJuIHtcbiAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICBvYmoucmVtb3ZlTGlzdGVuZXIoZXYsIGZuKTtcbiAgICB9XG4gIH07XG59XG4iLCIvKipcbiAqIFNsaWNlIHJlZmVyZW5jZS5cbiAqL1xuXG52YXIgc2xpY2UgPSBbXS5zbGljZTtcblxuLyoqXG4gKiBCaW5kIGBvYmpgIHRvIGBmbmAuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IGZuIG9yIHN0cmluZ1xuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBmbil7XG4gIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgZm4pIGZuID0gb2JqW2ZuXTtcbiAgaWYgKCdmdW5jdGlvbicgIT0gdHlwZW9mIGZuKSB0aHJvdyBuZXcgRXJyb3IoJ2JpbmQoKSByZXF1aXJlcyBhIGZ1bmN0aW9uJyk7XG4gIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gZm4uYXBwbHkob2JqLCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNvbnZlcnROb2RlVG9FbGVtZW50O1xuXG52YXIgX2VsZW1lbnRUeXBlcyA9IHJlcXVpcmUoJy4vZWxlbWVudFR5cGVzJyk7XG5cbnZhciBfZWxlbWVudFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VsZW1lbnRUeXBlcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogQ29udmVydHMgYSBodG1scGFyc2VyMiBub2RlIHRvIGEgUmVhY3QgZWxlbWVudFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBub2RlIFRoZSBodG1scGFyc2VyMiBub2RlIHRvIGNvbnZlcnRcbiAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleCBUaGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgbm9kZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRyYW5zZm9ybSBmdW5jdGlvbiB0byBhcHBseSB0byBjaGlsZHJlbiBvZiB0aGUgbm9kZVxuICogQHJldHVybnMge1JlYWN0LkVsZW1lbnR9XG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnROb2RlVG9FbGVtZW50KG5vZGUsIGluZGV4LCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIF9lbGVtZW50VHlwZXMyLmRlZmF1bHRbbm9kZS50eXBlXShub2RlLCBpbmRleCwgdHJhbnNmb3JtKTtcbn0iLCJ2YXIgVG9rZW5pemVyID0gcmVxdWlyZShcIi4vVG9rZW5pemVyLmpzXCIpO1xuXG4vKlxuXHRPcHRpb25zOlxuXG5cdHhtbE1vZGU6IERpc2FibGVzIHRoZSBzcGVjaWFsIGJlaGF2aW9yIGZvciBzY3JpcHQvc3R5bGUgdGFncyAoZmFsc2UgYnkgZGVmYXVsdClcblx0bG93ZXJDYXNlQXR0cmlidXRlTmFtZXM6IGNhbGwgLnRvTG93ZXJDYXNlIGZvciBlYWNoIGF0dHJpYnV0ZSBuYW1lICh0cnVlIGlmIHhtbE1vZGUgaXMgYGZhbHNlYClcblx0bG93ZXJDYXNlVGFnczogY2FsbCAudG9Mb3dlckNhc2UgZm9yIGVhY2ggdGFnIG5hbWUgKHRydWUgaWYgeG1sTW9kZSBpcyBgZmFsc2VgKVxuKi9cblxuLypcblx0Q2FsbGJhY2tzOlxuXG5cdG9uY2RhdGFlbmQsXG5cdG9uY2RhdGFzdGFydCxcblx0b25jbG9zZXRhZyxcblx0b25jb21tZW50LFxuXHRvbmNvbW1lbnRlbmQsXG5cdG9uZXJyb3IsXG5cdG9ub3BlbnRhZyxcblx0b25wcm9jZXNzaW5naW5zdHJ1Y3Rpb24sXG5cdG9ucmVzZXQsXG5cdG9udGV4dFxuKi9cblxudmFyIGZvcm1UYWdzID0ge1xuICAgIGlucHV0OiB0cnVlLFxuICAgIG9wdGlvbjogdHJ1ZSxcbiAgICBvcHRncm91cDogdHJ1ZSxcbiAgICBzZWxlY3Q6IHRydWUsXG4gICAgYnV0dG9uOiB0cnVlLFxuICAgIGRhdGFsaXN0OiB0cnVlLFxuICAgIHRleHRhcmVhOiB0cnVlXG59O1xuXG52YXIgb3BlbkltcGxpZXNDbG9zZSA9IHtcbiAgICB0cjogeyB0cjogdHJ1ZSwgdGg6IHRydWUsIHRkOiB0cnVlIH0sXG4gICAgdGg6IHsgdGg6IHRydWUgfSxcbiAgICB0ZDogeyB0aGVhZDogdHJ1ZSwgdGg6IHRydWUsIHRkOiB0cnVlIH0sXG4gICAgYm9keTogeyBoZWFkOiB0cnVlLCBsaW5rOiB0cnVlLCBzY3JpcHQ6IHRydWUgfSxcbiAgICBsaTogeyBsaTogdHJ1ZSB9LFxuICAgIHA6IHsgcDogdHJ1ZSB9LFxuICAgIGgxOiB7IHA6IHRydWUgfSxcbiAgICBoMjogeyBwOiB0cnVlIH0sXG4gICAgaDM6IHsgcDogdHJ1ZSB9LFxuICAgIGg0OiB7IHA6IHRydWUgfSxcbiAgICBoNTogeyBwOiB0cnVlIH0sXG4gICAgaDY6IHsgcDogdHJ1ZSB9LFxuICAgIHNlbGVjdDogZm9ybVRhZ3MsXG4gICAgaW5wdXQ6IGZvcm1UYWdzLFxuICAgIG91dHB1dDogZm9ybVRhZ3MsXG4gICAgYnV0dG9uOiBmb3JtVGFncyxcbiAgICBkYXRhbGlzdDogZm9ybVRhZ3MsXG4gICAgdGV4dGFyZWE6IGZvcm1UYWdzLFxuICAgIG9wdGlvbjogeyBvcHRpb246IHRydWUgfSxcbiAgICBvcHRncm91cDogeyBvcHRncm91cDogdHJ1ZSB9XG59O1xuXG52YXIgdm9pZEVsZW1lbnRzID0ge1xuICAgIF9fcHJvdG9fXzogbnVsbCxcbiAgICBhcmVhOiB0cnVlLFxuICAgIGJhc2U6IHRydWUsXG4gICAgYmFzZWZvbnQ6IHRydWUsXG4gICAgYnI6IHRydWUsXG4gICAgY29sOiB0cnVlLFxuICAgIGNvbW1hbmQ6IHRydWUsXG4gICAgZW1iZWQ6IHRydWUsXG4gICAgZnJhbWU6IHRydWUsXG4gICAgaHI6IHRydWUsXG4gICAgaW1nOiB0cnVlLFxuICAgIGlucHV0OiB0cnVlLFxuICAgIGlzaW5kZXg6IHRydWUsXG4gICAga2V5Z2VuOiB0cnVlLFxuICAgIGxpbms6IHRydWUsXG4gICAgbWV0YTogdHJ1ZSxcbiAgICBwYXJhbTogdHJ1ZSxcbiAgICBzb3VyY2U6IHRydWUsXG4gICAgdHJhY2s6IHRydWUsXG4gICAgd2JyOiB0cnVlXG59O1xuXG52YXIgZm9yZWlnbkNvbnRleHRFbGVtZW50cyA9IHtcbiAgICBfX3Byb3RvX186IG51bGwsXG4gICAgbWF0aDogdHJ1ZSxcbiAgICBzdmc6IHRydWVcbn07XG52YXIgaHRtbEludGVncmF0aW9uRWxlbWVudHMgPSB7XG4gICAgX19wcm90b19fOiBudWxsLFxuICAgIG1pOiB0cnVlLFxuICAgIG1vOiB0cnVlLFxuICAgIG1uOiB0cnVlLFxuICAgIG1zOiB0cnVlLFxuICAgIG10ZXh0OiB0cnVlLFxuICAgIFwiYW5ub3RhdGlvbi14bWxcIjogdHJ1ZSxcbiAgICBmb3JlaWduT2JqZWN0OiB0cnVlLFxuICAgIGRlc2M6IHRydWUsXG4gICAgdGl0bGU6IHRydWVcbn07XG5cbnZhciByZV9uYW1lRW5kID0gL1xcc3xcXC8vO1xuXG5mdW5jdGlvbiBQYXJzZXIoY2JzLCBvcHRpb25zKSB7XG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgdGhpcy5fY2JzID0gY2JzIHx8IHt9O1xuXG4gICAgdGhpcy5fdGFnbmFtZSA9IFwiXCI7XG4gICAgdGhpcy5fYXR0cmlibmFtZSA9IFwiXCI7XG4gICAgdGhpcy5fYXR0cmlidmFsdWUgPSBcIlwiO1xuICAgIHRoaXMuX2F0dHJpYnMgPSBudWxsO1xuICAgIHRoaXMuX3N0YWNrID0gW107XG4gICAgdGhpcy5fZm9yZWlnbkNvbnRleHQgPSBbXTtcblxuICAgIHRoaXMuc3RhcnRJbmRleCA9IDA7XG4gICAgdGhpcy5lbmRJbmRleCA9IG51bGw7XG5cbiAgICB0aGlzLl9sb3dlckNhc2VUYWdOYW1lcyA9XG4gICAgICAgIFwibG93ZXJDYXNlVGFnc1wiIGluIHRoaXMuX29wdGlvbnNcbiAgICAgICAgICAgID8gISF0aGlzLl9vcHRpb25zLmxvd2VyQ2FzZVRhZ3NcbiAgICAgICAgICAgIDogIXRoaXMuX29wdGlvbnMueG1sTW9kZTtcbiAgICB0aGlzLl9sb3dlckNhc2VBdHRyaWJ1dGVOYW1lcyA9XG4gICAgICAgIFwibG93ZXJDYXNlQXR0cmlidXRlTmFtZXNcIiBpbiB0aGlzLl9vcHRpb25zXG4gICAgICAgICAgICA/ICEhdGhpcy5fb3B0aW9ucy5sb3dlckNhc2VBdHRyaWJ1dGVOYW1lc1xuICAgICAgICAgICAgOiAhdGhpcy5fb3B0aW9ucy54bWxNb2RlO1xuXG4gICAgaWYgKHRoaXMuX29wdGlvbnMuVG9rZW5pemVyKSB7XG4gICAgICAgIFRva2VuaXplciA9IHRoaXMuX29wdGlvbnMuVG9rZW5pemVyO1xuICAgIH1cbiAgICB0aGlzLl90b2tlbml6ZXIgPSBuZXcgVG9rZW5pemVyKHRoaXMuX29wdGlvbnMsIHRoaXMpO1xuXG4gICAgaWYgKHRoaXMuX2Nicy5vbnBhcnNlcmluaXQpIHRoaXMuX2Nicy5vbnBhcnNlcmluaXQodGhpcyk7XG59XG5cbnJlcXVpcmUoXCJpbmhlcml0c1wiKShQYXJzZXIsIHJlcXVpcmUoXCJldmVudHNcIikuRXZlbnRFbWl0dGVyKTtcblxuUGFyc2VyLnByb3RvdHlwZS5fdXBkYXRlUG9zaXRpb24gPSBmdW5jdGlvbihpbml0aWFsT2Zmc2V0KSB7XG4gICAgaWYgKHRoaXMuZW5kSW5kZXggPT09IG51bGwpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Rva2VuaXplci5fc2VjdGlvblN0YXJ0IDw9IGluaXRpYWxPZmZzZXQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRJbmRleCA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0SW5kZXggPSB0aGlzLl90b2tlbml6ZXIuX3NlY3Rpb25TdGFydCAtIGluaXRpYWxPZmZzZXQ7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgdGhpcy5zdGFydEluZGV4ID0gdGhpcy5lbmRJbmRleCArIDE7XG4gICAgdGhpcy5lbmRJbmRleCA9IHRoaXMuX3Rva2VuaXplci5nZXRBYnNvbHV0ZUluZGV4KCk7XG59O1xuXG4vL1Rva2VuaXplciBldmVudCBoYW5kbGVyc1xuUGFyc2VyLnByb3RvdHlwZS5vbnRleHQgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgdGhpcy5fdXBkYXRlUG9zaXRpb24oMSk7XG4gICAgdGhpcy5lbmRJbmRleC0tO1xuXG4gICAgaWYgKHRoaXMuX2Nicy5vbnRleHQpIHRoaXMuX2Nicy5vbnRleHQoZGF0YSk7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLm9ub3BlbnRhZ25hbWUgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgaWYgKHRoaXMuX2xvd2VyQ2FzZVRhZ05hbWVzKSB7XG4gICAgICAgIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fdGFnbmFtZSA9IG5hbWU7XG5cbiAgICBpZiAoIXRoaXMuX29wdGlvbnMueG1sTW9kZSAmJiBuYW1lIGluIG9wZW5JbXBsaWVzQ2xvc2UpIHtcbiAgICAgICAgZm9yIChcbiAgICAgICAgICAgIHZhciBlbDtcbiAgICAgICAgICAgIChlbCA9IHRoaXMuX3N0YWNrW3RoaXMuX3N0YWNrLmxlbmd0aCAtIDFdKSBpblxuICAgICAgICAgICAgb3BlbkltcGxpZXNDbG9zZVtuYW1lXTtcbiAgICAgICAgICAgIHRoaXMub25jbG9zZXRhZyhlbClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fb3B0aW9ucy54bWxNb2RlIHx8ICEobmFtZSBpbiB2b2lkRWxlbWVudHMpKSB7XG4gICAgICAgIHRoaXMuX3N0YWNrLnB1c2gobmFtZSk7XG4gICAgICAgIGlmIChuYW1lIGluIGZvcmVpZ25Db250ZXh0RWxlbWVudHMpIHRoaXMuX2ZvcmVpZ25Db250ZXh0LnB1c2godHJ1ZSk7XG4gICAgICAgIGVsc2UgaWYgKG5hbWUgaW4gaHRtbEludGVncmF0aW9uRWxlbWVudHMpXG4gICAgICAgICAgICB0aGlzLl9mb3JlaWduQ29udGV4dC5wdXNoKGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY2JzLm9ub3BlbnRhZ25hbWUpIHRoaXMuX2Nicy5vbm9wZW50YWduYW1lKG5hbWUpO1xuICAgIGlmICh0aGlzLl9jYnMub25vcGVudGFnKSB0aGlzLl9hdHRyaWJzID0ge307XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLm9ub3BlbnRhZ2VuZCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3VwZGF0ZVBvc2l0aW9uKDEpO1xuXG4gICAgaWYgKHRoaXMuX2F0dHJpYnMpIHtcbiAgICAgICAgaWYgKHRoaXMuX2Nicy5vbm9wZW50YWcpXG4gICAgICAgICAgICB0aGlzLl9jYnMub25vcGVudGFnKHRoaXMuX3RhZ25hbWUsIHRoaXMuX2F0dHJpYnMpO1xuICAgICAgICB0aGlzLl9hdHRyaWJzID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAgICF0aGlzLl9vcHRpb25zLnhtbE1vZGUgJiZcbiAgICAgICAgdGhpcy5fY2JzLm9uY2xvc2V0YWcgJiZcbiAgICAgICAgdGhpcy5fdGFnbmFtZSBpbiB2b2lkRWxlbWVudHNcbiAgICApIHtcbiAgICAgICAgdGhpcy5fY2JzLm9uY2xvc2V0YWcodGhpcy5fdGFnbmFtZSk7XG4gICAgfVxuXG4gICAgdGhpcy5fdGFnbmFtZSA9IFwiXCI7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLm9uY2xvc2V0YWcgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgdGhpcy5fdXBkYXRlUG9zaXRpb24oMSk7XG5cbiAgICBpZiAodGhpcy5fbG93ZXJDYXNlVGFnTmFtZXMpIHtcbiAgICAgICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgXG4gICAgaWYgKG5hbWUgaW4gZm9yZWlnbkNvbnRleHRFbGVtZW50cyB8fCBuYW1lIGluIGh0bWxJbnRlZ3JhdGlvbkVsZW1lbnRzKSB7XG4gICAgICAgIHRoaXMuX2ZvcmVpZ25Db250ZXh0LnBvcCgpO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgICAgdGhpcy5fc3RhY2subGVuZ3RoICYmXG4gICAgICAgICghKG5hbWUgaW4gdm9pZEVsZW1lbnRzKSB8fCB0aGlzLl9vcHRpb25zLnhtbE1vZGUpXG4gICAgKSB7XG4gICAgICAgIHZhciBwb3MgPSB0aGlzLl9zdGFjay5sYXN0SW5kZXhPZihuYW1lKTtcbiAgICAgICAgaWYgKHBvcyAhPT0gLTEpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jYnMub25jbG9zZXRhZykge1xuICAgICAgICAgICAgICAgIHBvcyA9IHRoaXMuX3N0YWNrLmxlbmd0aCAtIHBvcztcbiAgICAgICAgICAgICAgICB3aGlsZSAocG9zLS0pIHRoaXMuX2Nicy5vbmNsb3NldGFnKHRoaXMuX3N0YWNrLnBvcCgpKTtcbiAgICAgICAgICAgIH0gZWxzZSB0aGlzLl9zdGFjay5sZW5ndGggPSBwb3M7XG4gICAgICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gXCJwXCIgJiYgIXRoaXMuX29wdGlvbnMueG1sTW9kZSkge1xuICAgICAgICAgICAgdGhpcy5vbm9wZW50YWduYW1lKG5hbWUpO1xuICAgICAgICAgICAgdGhpcy5fY2xvc2VDdXJyZW50VGFnKCk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCF0aGlzLl9vcHRpb25zLnhtbE1vZGUgJiYgKG5hbWUgPT09IFwiYnJcIiB8fCBuYW1lID09PSBcInBcIikpIHtcbiAgICAgICAgdGhpcy5vbm9wZW50YWduYW1lKG5hbWUpO1xuICAgICAgICB0aGlzLl9jbG9zZUN1cnJlbnRUYWcoKTtcbiAgICB9XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLm9uc2VsZmNsb3Npbmd0YWcgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoXG4gICAgICAgIHRoaXMuX29wdGlvbnMueG1sTW9kZSB8fFxuICAgICAgICB0aGlzLl9vcHRpb25zLnJlY29nbml6ZVNlbGZDbG9zaW5nIHx8XG4gICAgICAgIHRoaXMuX2ZvcmVpZ25Db250ZXh0W3RoaXMuX2ZvcmVpZ25Db250ZXh0Lmxlbmd0aCAtIDFdXG4gICAgKSB7XG4gICAgICAgIHRoaXMuX2Nsb3NlQ3VycmVudFRhZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub25vcGVudGFnZW5kKCk7XG4gICAgfVxufTtcblxuUGFyc2VyLnByb3RvdHlwZS5fY2xvc2VDdXJyZW50VGFnID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5hbWUgPSB0aGlzLl90YWduYW1lO1xuXG4gICAgdGhpcy5vbm9wZW50YWdlbmQoKTtcblxuICAgIC8vc2VsZi1jbG9zaW5nIHRhZ3Mgd2lsbCBiZSBvbiB0aGUgdG9wIG9mIHRoZSBzdGFja1xuICAgIC8vKGNoZWFwZXIgY2hlY2sgdGhhbiBpbiBvbmNsb3NldGFnKVxuICAgIGlmICh0aGlzLl9zdGFja1t0aGlzLl9zdGFjay5sZW5ndGggLSAxXSA9PT0gbmFtZSkge1xuICAgICAgICBpZiAodGhpcy5fY2JzLm9uY2xvc2V0YWcpIHtcbiAgICAgICAgICAgIHRoaXMuX2Nicy5vbmNsb3NldGFnKG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N0YWNrLnBvcCgpO1xuICAgICAgICBcbiAgICB9XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLm9uYXR0cmlibmFtZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBpZiAodGhpcy5fbG93ZXJDYXNlQXR0cmlidXRlTmFtZXMpIHtcbiAgICAgICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgdGhpcy5fYXR0cmlibmFtZSA9IG5hbWU7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLm9uYXR0cmliZGF0YSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdGhpcy5fYXR0cmlidmFsdWUgKz0gdmFsdWU7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLm9uYXR0cmliZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2Nicy5vbmF0dHJpYnV0ZSlcbiAgICAgICAgdGhpcy5fY2JzLm9uYXR0cmlidXRlKHRoaXMuX2F0dHJpYm5hbWUsIHRoaXMuX2F0dHJpYnZhbHVlKTtcbiAgICBpZiAoXG4gICAgICAgIHRoaXMuX2F0dHJpYnMgJiZcbiAgICAgICAgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLl9hdHRyaWJzLCB0aGlzLl9hdHRyaWJuYW1lKVxuICAgICkge1xuICAgICAgICB0aGlzLl9hdHRyaWJzW3RoaXMuX2F0dHJpYm5hbWVdID0gdGhpcy5fYXR0cmlidmFsdWU7XG4gICAgfVxuICAgIHRoaXMuX2F0dHJpYm5hbWUgPSBcIlwiO1xuICAgIHRoaXMuX2F0dHJpYnZhbHVlID0gXCJcIjtcbn07XG5cblBhcnNlci5wcm90b3R5cGUuX2dldEluc3RydWN0aW9uTmFtZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIGlkeCA9IHZhbHVlLnNlYXJjaChyZV9uYW1lRW5kKSxcbiAgICAgICAgbmFtZSA9IGlkeCA8IDAgPyB2YWx1ZSA6IHZhbHVlLnN1YnN0cigwLCBpZHgpO1xuXG4gICAgaWYgKHRoaXMuX2xvd2VyQ2FzZVRhZ05hbWVzKSB7XG4gICAgICAgIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5hbWU7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLm9uZGVjbGFyYXRpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmICh0aGlzLl9jYnMub25wcm9jZXNzaW5naW5zdHJ1Y3Rpb24pIHtcbiAgICAgICAgdmFyIG5hbWUgPSB0aGlzLl9nZXRJbnN0cnVjdGlvbk5hbWUodmFsdWUpO1xuICAgICAgICB0aGlzLl9jYnMub25wcm9jZXNzaW5naW5zdHJ1Y3Rpb24oXCIhXCIgKyBuYW1lLCBcIiFcIiArIHZhbHVlKTtcbiAgICB9XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAodGhpcy5fY2JzLm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uKSB7XG4gICAgICAgIHZhciBuYW1lID0gdGhpcy5fZ2V0SW5zdHJ1Y3Rpb25OYW1lKHZhbHVlKTtcbiAgICAgICAgdGhpcy5fY2JzLm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uKFwiP1wiICsgbmFtZSwgXCI/XCIgKyB2YWx1ZSk7XG4gICAgfVxufTtcblxuUGFyc2VyLnByb3RvdHlwZS5vbmNvbW1lbnQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHRoaXMuX3VwZGF0ZVBvc2l0aW9uKDQpO1xuXG4gICAgaWYgKHRoaXMuX2Nicy5vbmNvbW1lbnQpIHRoaXMuX2Nicy5vbmNvbW1lbnQodmFsdWUpO1xuICAgIGlmICh0aGlzLl9jYnMub25jb21tZW50ZW5kKSB0aGlzLl9jYnMub25jb21tZW50ZW5kKCk7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLm9uY2RhdGEgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHRoaXMuX3VwZGF0ZVBvc2l0aW9uKDEpO1xuXG4gICAgaWYgKHRoaXMuX29wdGlvbnMueG1sTW9kZSB8fCB0aGlzLl9vcHRpb25zLnJlY29nbml6ZUNEQVRBKSB7XG4gICAgICAgIGlmICh0aGlzLl9jYnMub25jZGF0YXN0YXJ0KSB0aGlzLl9jYnMub25jZGF0YXN0YXJ0KCk7XG4gICAgICAgIGlmICh0aGlzLl9jYnMub250ZXh0KSB0aGlzLl9jYnMub250ZXh0KHZhbHVlKTtcbiAgICAgICAgaWYgKHRoaXMuX2Nicy5vbmNkYXRhZW5kKSB0aGlzLl9jYnMub25jZGF0YWVuZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub25jb21tZW50KFwiW0NEQVRBW1wiICsgdmFsdWUgKyBcIl1dXCIpO1xuICAgIH1cbn07XG5cblBhcnNlci5wcm90b3R5cGUub25lcnJvciA9IGZ1bmN0aW9uKGVycikge1xuICAgIGlmICh0aGlzLl9jYnMub25lcnJvcikgdGhpcy5fY2JzLm9uZXJyb3IoZXJyKTtcbn07XG5cblBhcnNlci5wcm90b3R5cGUub25lbmQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fY2JzLm9uY2xvc2V0YWcpIHtcbiAgICAgICAgZm9yIChcbiAgICAgICAgICAgIHZhciBpID0gdGhpcy5fc3RhY2subGVuZ3RoO1xuICAgICAgICAgICAgaSA+IDA7XG4gICAgICAgICAgICB0aGlzLl9jYnMub25jbG9zZXRhZyh0aGlzLl9zdGFja1stLWldKVxuICAgICAgICApO1xuICAgIH1cbiAgICBpZiAodGhpcy5fY2JzLm9uZW5kKSB0aGlzLl9jYnMub25lbmQoKTtcbn07XG5cbi8vUmVzZXRzIHRoZSBwYXJzZXIgdG8gYSBibGFuayBzdGF0ZSwgcmVhZHkgdG8gcGFyc2UgYSBuZXcgSFRNTCBkb2N1bWVudFxuUGFyc2VyLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9jYnMub25yZXNldCkgdGhpcy5fY2JzLm9ucmVzZXQoKTtcbiAgICB0aGlzLl90b2tlbml6ZXIucmVzZXQoKTtcblxuICAgIHRoaXMuX3RhZ25hbWUgPSBcIlwiO1xuICAgIHRoaXMuX2F0dHJpYm5hbWUgPSBcIlwiO1xuICAgIHRoaXMuX2F0dHJpYnMgPSBudWxsO1xuICAgIHRoaXMuX3N0YWNrID0gW107XG5cbiAgICBpZiAodGhpcy5fY2JzLm9ucGFyc2VyaW5pdCkgdGhpcy5fY2JzLm9ucGFyc2VyaW5pdCh0aGlzKTtcbn07XG5cbi8vUGFyc2VzIGEgY29tcGxldGUgSFRNTCBkb2N1bWVudCBhbmQgcHVzaGVzIGl0IHRvIHRoZSBoYW5kbGVyXG5QYXJzZXIucHJvdG90eXBlLnBhcnNlQ29tcGxldGUgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgdGhpcy5yZXNldCgpO1xuICAgIHRoaXMuZW5kKGRhdGEpO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGNodW5rKSB7XG4gICAgdGhpcy5fdG9rZW5pemVyLndyaXRlKGNodW5rKTtcbn07XG5cblBhcnNlci5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24oY2h1bmspIHtcbiAgICB0aGlzLl90b2tlbml6ZXIuZW5kKGNodW5rKTtcbn07XG5cblBhcnNlci5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl90b2tlbml6ZXIucGF1c2UoKTtcbn07XG5cblBhcnNlci5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fdG9rZW5pemVyLnJlc3VtZSgpO1xufTtcblxuLy9hbGlhcyBmb3IgYmFja3dhcmRzIGNvbXBhdFxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZUNodW5rID0gUGFyc2VyLnByb3RvdHlwZS53cml0ZTtcblBhcnNlci5wcm90b3R5cGUuZG9uZSA9IFBhcnNlci5wcm90b3R5cGUuZW5kO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhcnNlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gVG9rZW5pemVyO1xuXG52YXIgZGVjb2RlQ29kZVBvaW50ID0gcmVxdWlyZShcImVudGl0aWVzL2xpYi9kZWNvZGVfY29kZXBvaW50LmpzXCIpO1xudmFyIGVudGl0eU1hcCA9IHJlcXVpcmUoXCJlbnRpdGllcy9tYXBzL2VudGl0aWVzLmpzb25cIik7XG52YXIgbGVnYWN5TWFwID0gcmVxdWlyZShcImVudGl0aWVzL21hcHMvbGVnYWN5Lmpzb25cIik7XG52YXIgeG1sTWFwID0gcmVxdWlyZShcImVudGl0aWVzL21hcHMveG1sLmpzb25cIik7XG5cbnZhciBpID0gMDtcblxudmFyIFRFWFQgPSBpKys7XG52YXIgQkVGT1JFX1RBR19OQU1FID0gaSsrOyAvL2FmdGVyIDxcbnZhciBJTl9UQUdfTkFNRSA9IGkrKztcbnZhciBJTl9TRUxGX0NMT1NJTkdfVEFHID0gaSsrO1xudmFyIEJFRk9SRV9DTE9TSU5HX1RBR19OQU1FID0gaSsrO1xudmFyIElOX0NMT1NJTkdfVEFHX05BTUUgPSBpKys7XG52YXIgQUZURVJfQ0xPU0lOR19UQUdfTkFNRSA9IGkrKztcblxuLy9hdHRyaWJ1dGVzXG52YXIgQkVGT1JFX0FUVFJJQlVURV9OQU1FID0gaSsrO1xudmFyIElOX0FUVFJJQlVURV9OQU1FID0gaSsrO1xudmFyIEFGVEVSX0FUVFJJQlVURV9OQU1FID0gaSsrO1xudmFyIEJFRk9SRV9BVFRSSUJVVEVfVkFMVUUgPSBpKys7XG52YXIgSU5fQVRUUklCVVRFX1ZBTFVFX0RRID0gaSsrOyAvLyBcIlxudmFyIElOX0FUVFJJQlVURV9WQUxVRV9TUSA9IGkrKzsgLy8gJ1xudmFyIElOX0FUVFJJQlVURV9WQUxVRV9OUSA9IGkrKztcblxuLy9kZWNsYXJhdGlvbnNcbnZhciBCRUZPUkVfREVDTEFSQVRJT04gPSBpKys7IC8vICFcbnZhciBJTl9ERUNMQVJBVElPTiA9IGkrKztcblxuLy9wcm9jZXNzaW5nIGluc3RydWN0aW9uc1xudmFyIElOX1BST0NFU1NJTkdfSU5TVFJVQ1RJT04gPSBpKys7IC8vID9cblxuLy9jb21tZW50c1xudmFyIEJFRk9SRV9DT01NRU5UID0gaSsrO1xudmFyIElOX0NPTU1FTlQgPSBpKys7XG52YXIgQUZURVJfQ09NTUVOVF8xID0gaSsrO1xudmFyIEFGVEVSX0NPTU1FTlRfMiA9IGkrKztcblxuLy9jZGF0YVxudmFyIEJFRk9SRV9DREFUQV8xID0gaSsrOyAvLyBbXG52YXIgQkVGT1JFX0NEQVRBXzIgPSBpKys7IC8vIENcbnZhciBCRUZPUkVfQ0RBVEFfMyA9IGkrKzsgLy8gRFxudmFyIEJFRk9SRV9DREFUQV80ID0gaSsrOyAvLyBBXG52YXIgQkVGT1JFX0NEQVRBXzUgPSBpKys7IC8vIFRcbnZhciBCRUZPUkVfQ0RBVEFfNiA9IGkrKzsgLy8gQVxudmFyIElOX0NEQVRBID0gaSsrOyAvLyBbXG52YXIgQUZURVJfQ0RBVEFfMSA9IGkrKzsgLy8gXVxudmFyIEFGVEVSX0NEQVRBXzIgPSBpKys7IC8vIF1cblxuLy9zcGVjaWFsIHRhZ3NcbnZhciBCRUZPUkVfU1BFQ0lBTCA9IGkrKzsgLy9TXG52YXIgQkVGT1JFX1NQRUNJQUxfRU5EID0gaSsrOyAvL1NcblxudmFyIEJFRk9SRV9TQ1JJUFRfMSA9IGkrKzsgLy9DXG52YXIgQkVGT1JFX1NDUklQVF8yID0gaSsrOyAvL1JcbnZhciBCRUZPUkVfU0NSSVBUXzMgPSBpKys7IC8vSVxudmFyIEJFRk9SRV9TQ1JJUFRfNCA9IGkrKzsgLy9QXG52YXIgQkVGT1JFX1NDUklQVF81ID0gaSsrOyAvL1RcbnZhciBBRlRFUl9TQ1JJUFRfMSA9IGkrKzsgLy9DXG52YXIgQUZURVJfU0NSSVBUXzIgPSBpKys7IC8vUlxudmFyIEFGVEVSX1NDUklQVF8zID0gaSsrOyAvL0lcbnZhciBBRlRFUl9TQ1JJUFRfNCA9IGkrKzsgLy9QXG52YXIgQUZURVJfU0NSSVBUXzUgPSBpKys7IC8vVFxuXG52YXIgQkVGT1JFX1NUWUxFXzEgPSBpKys7IC8vVFxudmFyIEJFRk9SRV9TVFlMRV8yID0gaSsrOyAvL1lcbnZhciBCRUZPUkVfU1RZTEVfMyA9IGkrKzsgLy9MXG52YXIgQkVGT1JFX1NUWUxFXzQgPSBpKys7IC8vRVxudmFyIEFGVEVSX1NUWUxFXzEgPSBpKys7IC8vVFxudmFyIEFGVEVSX1NUWUxFXzIgPSBpKys7IC8vWVxudmFyIEFGVEVSX1NUWUxFXzMgPSBpKys7IC8vTFxudmFyIEFGVEVSX1NUWUxFXzQgPSBpKys7IC8vRVxuXG52YXIgQkVGT1JFX0VOVElUWSA9IGkrKzsgLy8mXG52YXIgQkVGT1JFX05VTUVSSUNfRU5USVRZID0gaSsrOyAvLyNcbnZhciBJTl9OQU1FRF9FTlRJVFkgPSBpKys7XG52YXIgSU5fTlVNRVJJQ19FTlRJVFkgPSBpKys7XG52YXIgSU5fSEVYX0VOVElUWSA9IGkrKzsgLy9YXG5cbnZhciBqID0gMDtcblxudmFyIFNQRUNJQUxfTk9ORSA9IGorKztcbnZhciBTUEVDSUFMX1NDUklQVCA9IGorKztcbnZhciBTUEVDSUFMX1NUWUxFID0gaisrO1xuXG5mdW5jdGlvbiB3aGl0ZXNwYWNlKGMpIHtcbiAgICByZXR1cm4gYyA9PT0gXCIgXCIgfHwgYyA9PT0gXCJcXG5cIiB8fCBjID09PSBcIlxcdFwiIHx8IGMgPT09IFwiXFxmXCIgfHwgYyA9PT0gXCJcXHJcIjtcbn1cblxuZnVuY3Rpb24gaWZFbHNlU3RhdGUodXBwZXIsIFNVQ0NFU1MsIEZBSUxVUkUpIHtcbiAgICB2YXIgbG93ZXIgPSB1cHBlci50b0xvd2VyQ2FzZSgpO1xuXG4gICAgaWYgKHVwcGVyID09PSBsb3dlcikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oYykge1xuICAgICAgICAgICAgaWYgKGMgPT09IGxvd2VyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBTVUNDRVNTO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IEZBSUxVUkU7XG4gICAgICAgICAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oYykge1xuICAgICAgICAgICAgaWYgKGMgPT09IGxvd2VyIHx8IGMgPT09IHVwcGVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBTVUNDRVNTO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IEZBSUxVUkU7XG4gICAgICAgICAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNvbnN1bWVTcGVjaWFsTmFtZUNoYXIodXBwZXIsIE5FWFRfU1RBVEUpIHtcbiAgICB2YXIgbG93ZXIgPSB1cHBlci50b0xvd2VyQ2FzZSgpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IGxvd2VyIHx8IGMgPT09IHVwcGVyKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IE5FWFRfU1RBVEU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IElOX1RBR19OQU1FO1xuICAgICAgICAgICAgdGhpcy5faW5kZXgtLTsgLy9jb25zdW1lIHRoZSB0b2tlbiBhZ2FpblxuICAgICAgICB9XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gVG9rZW5pemVyKG9wdGlvbnMsIGNicykge1xuICAgIHRoaXMuX3N0YXRlID0gVEVYVDtcbiAgICB0aGlzLl9idWZmZXIgPSBcIlwiO1xuICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IDA7XG4gICAgdGhpcy5faW5kZXggPSAwO1xuICAgIHRoaXMuX2J1ZmZlck9mZnNldCA9IDA7IC8vY2hhcnMgcmVtb3ZlZCBmcm9tIF9idWZmZXJcbiAgICB0aGlzLl9iYXNlU3RhdGUgPSBURVhUO1xuICAgIHRoaXMuX3NwZWNpYWwgPSBTUEVDSUFMX05PTkU7XG4gICAgdGhpcy5fY2JzID0gY2JzO1xuICAgIHRoaXMuX3J1bm5pbmcgPSB0cnVlO1xuICAgIHRoaXMuX2VuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5feG1sTW9kZSA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy54bWxNb2RlKTtcbiAgICB0aGlzLl9kZWNvZGVFbnRpdGllcyA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWNvZGVFbnRpdGllcyk7XG59XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlVGV4dCA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCI8XCIpIHtcbiAgICAgICAgaWYgKHRoaXMuX2luZGV4ID4gdGhpcy5fc2VjdGlvblN0YXJ0KSB7XG4gICAgICAgICAgICB0aGlzLl9jYnMub250ZXh0KHRoaXMuX2dldFNlY3Rpb24oKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RhdGUgPSBCRUZPUkVfVEFHX05BTUU7XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4O1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHRoaXMuX2RlY29kZUVudGl0aWVzICYmXG4gICAgICAgIHRoaXMuX3NwZWNpYWwgPT09IFNQRUNJQUxfTk9ORSAmJlxuICAgICAgICBjID09PSBcIiZcIlxuICAgICkge1xuICAgICAgICBpZiAodGhpcy5faW5kZXggPiB0aGlzLl9zZWN0aW9uU3RhcnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2Nicy5vbnRleHQodGhpcy5fZ2V0U2VjdGlvbigpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9iYXNlU3RhdGUgPSBURVhUO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IEJFRk9SRV9FTlRJVFk7XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4O1xuICAgIH1cbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQmVmb3JlVGFnTmFtZSA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCIvXCIpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBCRUZPUkVfQ0xPU0lOR19UQUdfTkFNRTtcbiAgICB9IGVsc2UgaWYgKGMgPT09IFwiPFwiKSB7XG4gICAgICAgIHRoaXMuX2Nicy5vbnRleHQodGhpcy5fZ2V0U2VjdGlvbigpKTtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXg7XG4gICAgfSBlbHNlIGlmIChjID09PSBcIj5cIiB8fCB0aGlzLl9zcGVjaWFsICE9PSBTUEVDSUFMX05PTkUgfHwgd2hpdGVzcGFjZShjKSkge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IFRFWFQ7XG4gICAgfSBlbHNlIGlmIChjID09PSBcIiFcIikge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IEJFRk9SRV9ERUNMQVJBVElPTjtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgIH0gZWxzZSBpZiAoYyA9PT0gXCI/XCIpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBJTl9QUk9DRVNTSU5HX0lOU1RSVUNUSU9OO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCArIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPVxuICAgICAgICAgICAgIXRoaXMuX3htbE1vZGUgJiYgKGMgPT09IFwic1wiIHx8IGMgPT09IFwiU1wiKVxuICAgICAgICAgICAgICAgID8gQkVGT1JFX1NQRUNJQUxcbiAgICAgICAgICAgICAgICA6IElOX1RBR19OQU1FO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleDtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUluVGFnTmFtZSA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCIvXCIgfHwgYyA9PT0gXCI+XCIgfHwgd2hpdGVzcGFjZShjKSkge1xuICAgICAgICB0aGlzLl9lbWl0VG9rZW4oXCJvbm9wZW50YWduYW1lXCIpO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IEJFRk9SRV9BVFRSSUJVVEVfTkFNRTtcbiAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZUNsb3NlaW5nVGFnTmFtZSA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAod2hpdGVzcGFjZShjKSk7XG4gICAgZWxzZSBpZiAoYyA9PT0gXCI+XCIpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBURVhUO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fc3BlY2lhbCAhPT0gU1BFQ0lBTF9OT05FKSB7XG4gICAgICAgIGlmIChjID09PSBcInNcIiB8fCBjID09PSBcIlNcIikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBCRUZPUkVfU1BFQ0lBTF9FTkQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IFRFWFQ7XG4gICAgICAgICAgICB0aGlzLl9pbmRleC0tO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBJTl9DTE9TSU5HX1RBR19OQU1FO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleDtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUluQ2xvc2VpbmdUYWdOYW1lID0gZnVuY3Rpb24oYykge1xuICAgIGlmIChjID09PSBcIj5cIiB8fCB3aGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgIHRoaXMuX2VtaXRUb2tlbihcIm9uY2xvc2V0YWdcIik7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gQUZURVJfQ0xPU0lOR19UQUdfTkFNRTtcbiAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUFmdGVyQ2xvc2VpbmdUYWdOYW1lID0gZnVuY3Rpb24oYykge1xuICAgIC8vc2tpcCBldmVyeXRoaW5nIHVudGlsIFwiPlwiXG4gICAgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gVEVYVDtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgIH1cbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQmVmb3JlQXR0cmlidXRlTmFtZSA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCI+XCIpIHtcbiAgICAgICAgdGhpcy5fY2JzLm9ub3BlbnRhZ2VuZCgpO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IFRFWFQ7XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4ICsgMTtcbiAgICB9IGVsc2UgaWYgKGMgPT09IFwiL1wiKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gSU5fU0VMRl9DTE9TSU5HX1RBRztcbiAgICB9IGVsc2UgaWYgKCF3aGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gSU5fQVRUUklCVVRFX05BTUU7XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4O1xuICAgIH1cbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlSW5TZWxmQ2xvc2luZ1RhZyA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCI+XCIpIHtcbiAgICAgICAgdGhpcy5fY2JzLm9uc2VsZmNsb3Npbmd0YWcoKTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBURVhUO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCArIDE7XG4gICAgfSBlbHNlIGlmICghd2hpdGVzcGFjZShjKSkge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IEJFRk9SRV9BVFRSSUJVVEVfTkFNRTtcbiAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUluQXR0cmlidXRlTmFtZSA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCI9XCIgfHwgYyA9PT0gXCIvXCIgfHwgYyA9PT0gXCI+XCIgfHwgd2hpdGVzcGFjZShjKSkge1xuICAgICAgICB0aGlzLl9jYnMub25hdHRyaWJuYW1lKHRoaXMuX2dldFNlY3Rpb24oKSk7XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IC0xO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IEFGVEVSX0FUVFJJQlVURV9OQU1FO1xuICAgICAgICB0aGlzLl9pbmRleC0tO1xuICAgIH1cbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQWZ0ZXJBdHRyaWJ1dGVOYW1lID0gZnVuY3Rpb24oYykge1xuICAgIGlmIChjID09PSBcIj1cIikge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IEJFRk9SRV9BVFRSSUJVVEVfVkFMVUU7XG4gICAgfSBlbHNlIGlmIChjID09PSBcIi9cIiB8fCBjID09PSBcIj5cIikge1xuICAgICAgICB0aGlzLl9jYnMub25hdHRyaWJlbmQoKTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBCRUZPUkVfQVRUUklCVVRFX05BTUU7XG4gICAgICAgIHRoaXMuX2luZGV4LS07XG4gICAgfSBlbHNlIGlmICghd2hpdGVzcGFjZShjKSkge1xuICAgICAgICB0aGlzLl9jYnMub25hdHRyaWJlbmQoKTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBJTl9BVFRSSUJVVEVfTkFNRTtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXg7XG4gICAgfVxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVCZWZvcmVBdHRyaWJ1dGVWYWx1ZSA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gJ1wiJykge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IElOX0FUVFJJQlVURV9WQUxVRV9EUTtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgIH0gZWxzZSBpZiAoYyA9PT0gXCInXCIpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBJTl9BVFRSSUJVVEVfVkFMVUVfU1E7XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4ICsgMTtcbiAgICB9IGVsc2UgaWYgKCF3aGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gSU5fQVRUUklCVVRFX1ZBTFVFX05RO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleDtcbiAgICAgICAgdGhpcy5faW5kZXgtLTsgLy9yZWNvbnN1bWUgdG9rZW5cbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUluQXR0cmlidXRlVmFsdWVEb3VibGVRdW90ZXMgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09ICdcIicpIHtcbiAgICAgICAgdGhpcy5fZW1pdFRva2VuKFwib25hdHRyaWJkYXRhXCIpO1xuICAgICAgICB0aGlzLl9jYnMub25hdHRyaWJlbmQoKTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBCRUZPUkVfQVRUUklCVVRFX05BTUU7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9kZWNvZGVFbnRpdGllcyAmJiBjID09PSBcIiZcIikge1xuICAgICAgICB0aGlzLl9lbWl0VG9rZW4oXCJvbmF0dHJpYmRhdGFcIik7XG4gICAgICAgIHRoaXMuX2Jhc2VTdGF0ZSA9IHRoaXMuX3N0YXRlO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IEJFRk9SRV9FTlRJVFk7XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4O1xuICAgIH1cbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlSW5BdHRyaWJ1dGVWYWx1ZVNpbmdsZVF1b3RlcyA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCInXCIpIHtcbiAgICAgICAgdGhpcy5fZW1pdFRva2VuKFwib25hdHRyaWJkYXRhXCIpO1xuICAgICAgICB0aGlzLl9jYnMub25hdHRyaWJlbmQoKTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBCRUZPUkVfQVRUUklCVVRFX05BTUU7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9kZWNvZGVFbnRpdGllcyAmJiBjID09PSBcIiZcIikge1xuICAgICAgICB0aGlzLl9lbWl0VG9rZW4oXCJvbmF0dHJpYmRhdGFcIik7XG4gICAgICAgIHRoaXMuX2Jhc2VTdGF0ZSA9IHRoaXMuX3N0YXRlO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IEJFRk9SRV9FTlRJVFk7XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4O1xuICAgIH1cbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlSW5BdHRyaWJ1dGVWYWx1ZU5vUXVvdGVzID0gZnVuY3Rpb24oYykge1xuICAgIGlmICh3aGl0ZXNwYWNlKGMpIHx8IGMgPT09IFwiPlwiKSB7XG4gICAgICAgIHRoaXMuX2VtaXRUb2tlbihcIm9uYXR0cmliZGF0YVwiKTtcbiAgICAgICAgdGhpcy5fY2JzLm9uYXR0cmliZW5kKCk7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gQkVGT1JFX0FUVFJJQlVURV9OQU1FO1xuICAgICAgICB0aGlzLl9pbmRleC0tO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fZGVjb2RlRW50aXRpZXMgJiYgYyA9PT0gXCImXCIpIHtcbiAgICAgICAgdGhpcy5fZW1pdFRva2VuKFwib25hdHRyaWJkYXRhXCIpO1xuICAgICAgICB0aGlzLl9iYXNlU3RhdGUgPSB0aGlzLl9zdGF0ZTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBCRUZPUkVfRU5USVRZO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleDtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZURlY2xhcmF0aW9uID0gZnVuY3Rpb24oYykge1xuICAgIHRoaXMuX3N0YXRlID1cbiAgICAgICAgYyA9PT0gXCJbXCJcbiAgICAgICAgICAgID8gQkVGT1JFX0NEQVRBXzFcbiAgICAgICAgICAgIDogYyA9PT0gXCItXCJcbiAgICAgICAgICAgICAgICA/IEJFRk9SRV9DT01NRU5UXG4gICAgICAgICAgICAgICAgOiBJTl9ERUNMQVJBVElPTjtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlSW5EZWNsYXJhdGlvbiA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCI+XCIpIHtcbiAgICAgICAgdGhpcy5fY2JzLm9uZGVjbGFyYXRpb24odGhpcy5fZ2V0U2VjdGlvbigpKTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBURVhUO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCArIDE7XG4gICAgfVxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVJblByb2Nlc3NpbmdJbnN0cnVjdGlvbiA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCI+XCIpIHtcbiAgICAgICAgdGhpcy5fY2JzLm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uKHRoaXMuX2dldFNlY3Rpb24oKSk7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gVEVYVDtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgIH1cbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQmVmb3JlQ29tbWVudCA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCItXCIpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBJTl9DT01NRU5UO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCArIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBJTl9ERUNMQVJBVElPTjtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUluQ29tbWVudCA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCItXCIpIHRoaXMuX3N0YXRlID0gQUZURVJfQ09NTUVOVF8xO1xufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVBZnRlckNvbW1lbnQxID0gZnVuY3Rpb24oYykge1xuICAgIGlmIChjID09PSBcIi1cIikge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IEFGVEVSX0NPTU1FTlRfMjtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IElOX0NPTU1FTlQ7XG4gICAgfVxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVBZnRlckNvbW1lbnQyID0gZnVuY3Rpb24oYykge1xuICAgIGlmIChjID09PSBcIj5cIikge1xuICAgICAgICAvL3JlbW92ZSAyIHRyYWlsaW5nIGNoYXJzXG4gICAgICAgIHRoaXMuX2Nicy5vbmNvbW1lbnQoXG4gICAgICAgICAgICB0aGlzLl9idWZmZXIuc3Vic3RyaW5nKHRoaXMuX3NlY3Rpb25TdGFydCwgdGhpcy5faW5kZXggLSAyKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IFRFWFQ7XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4ICsgMTtcbiAgICB9IGVsc2UgaWYgKGMgIT09IFwiLVwiKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gSU5fQ09NTUVOVDtcbiAgICB9XG4gICAgLy8gZWxzZTogc3RheSBpbiBBRlRFUl9DT01NRU5UXzIgKGAtLS0+YClcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQmVmb3JlQ2RhdGExID0gaWZFbHNlU3RhdGUoXG4gICAgXCJDXCIsXG4gICAgQkVGT1JFX0NEQVRBXzIsXG4gICAgSU5fREVDTEFSQVRJT05cbik7XG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZUNkYXRhMiA9IGlmRWxzZVN0YXRlKFxuICAgIFwiRFwiLFxuICAgIEJFRk9SRV9DREFUQV8zLFxuICAgIElOX0RFQ0xBUkFUSU9OXG4pO1xuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVCZWZvcmVDZGF0YTMgPSBpZkVsc2VTdGF0ZShcbiAgICBcIkFcIixcbiAgICBCRUZPUkVfQ0RBVEFfNCxcbiAgICBJTl9ERUNMQVJBVElPTlxuKTtcblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQmVmb3JlQ2RhdGE0ID0gaWZFbHNlU3RhdGUoXG4gICAgXCJUXCIsXG4gICAgQkVGT1JFX0NEQVRBXzUsXG4gICAgSU5fREVDTEFSQVRJT05cbik7XG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZUNkYXRhNSA9IGlmRWxzZVN0YXRlKFxuICAgIFwiQVwiLFxuICAgIEJFRk9SRV9DREFUQV82LFxuICAgIElOX0RFQ0xBUkFUSU9OXG4pO1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZUNkYXRhNiA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCJbXCIpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBJTl9DREFUQTtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gSU5fREVDTEFSQVRJT047XG4gICAgICAgIHRoaXMuX2luZGV4LS07XG4gICAgfVxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVJbkNkYXRhID0gZnVuY3Rpb24oYykge1xuICAgIGlmIChjID09PSBcIl1cIikgdGhpcy5fc3RhdGUgPSBBRlRFUl9DREFUQV8xO1xufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVBZnRlckNkYXRhMSA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCJdXCIpIHRoaXMuX3N0YXRlID0gQUZURVJfQ0RBVEFfMjtcbiAgICBlbHNlIHRoaXMuX3N0YXRlID0gSU5fQ0RBVEE7XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUFmdGVyQ2RhdGEyID0gZnVuY3Rpb24oYykge1xuICAgIGlmIChjID09PSBcIj5cIikge1xuICAgICAgICAvL3JlbW92ZSAyIHRyYWlsaW5nIGNoYXJzXG4gICAgICAgIHRoaXMuX2Nicy5vbmNkYXRhKFxuICAgICAgICAgICAgdGhpcy5fYnVmZmVyLnN1YnN0cmluZyh0aGlzLl9zZWN0aW9uU3RhcnQsIHRoaXMuX2luZGV4IC0gMilcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBURVhUO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCArIDE7XG4gICAgfSBlbHNlIGlmIChjICE9PSBcIl1cIikge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IElOX0NEQVRBO1xuICAgIH1cbiAgICAvL2Vsc2U6IHN0YXkgaW4gQUZURVJfQ0RBVEFfMiAoYF1dXT5gKVxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVCZWZvcmVTcGVjaWFsID0gZnVuY3Rpb24oYykge1xuICAgIGlmIChjID09PSBcImNcIiB8fCBjID09PSBcIkNcIikge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IEJFRk9SRV9TQ1JJUFRfMTtcbiAgICB9IGVsc2UgaWYgKGMgPT09IFwidFwiIHx8IGMgPT09IFwiVFwiKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gQkVGT1JFX1NUWUxFXzE7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBJTl9UQUdfTkFNRTtcbiAgICAgICAgdGhpcy5faW5kZXgtLTsgLy9jb25zdW1lIHRoZSB0b2tlbiBhZ2FpblxuICAgIH1cbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQmVmb3JlU3BlY2lhbEVuZCA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAodGhpcy5fc3BlY2lhbCA9PT0gU1BFQ0lBTF9TQ1JJUFQgJiYgKGMgPT09IFwiY1wiIHx8IGMgPT09IFwiQ1wiKSkge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IEFGVEVSX1NDUklQVF8xO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fc3BlY2lhbCA9PT0gU1BFQ0lBTF9TVFlMRSAmJiAoYyA9PT0gXCJ0XCIgfHwgYyA9PT0gXCJUXCIpKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gQUZURVJfU1RZTEVfMTtcbiAgICB9IGVsc2UgdGhpcy5fc3RhdGUgPSBURVhUO1xufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVCZWZvcmVTY3JpcHQxID0gY29uc3VtZVNwZWNpYWxOYW1lQ2hhcihcbiAgICBcIlJcIixcbiAgICBCRUZPUkVfU0NSSVBUXzJcbik7XG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZVNjcmlwdDIgPSBjb25zdW1lU3BlY2lhbE5hbWVDaGFyKFxuICAgIFwiSVwiLFxuICAgIEJFRk9SRV9TQ1JJUFRfM1xuKTtcblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQmVmb3JlU2NyaXB0MyA9IGNvbnN1bWVTcGVjaWFsTmFtZUNoYXIoXG4gICAgXCJQXCIsXG4gICAgQkVGT1JFX1NDUklQVF80XG4pO1xuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVCZWZvcmVTY3JpcHQ0ID0gY29uc3VtZVNwZWNpYWxOYW1lQ2hhcihcbiAgICBcIlRcIixcbiAgICBCRUZPUkVfU0NSSVBUXzVcbik7XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQmVmb3JlU2NyaXB0NSA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCIvXCIgfHwgYyA9PT0gXCI+XCIgfHwgd2hpdGVzcGFjZShjKSkge1xuICAgICAgICB0aGlzLl9zcGVjaWFsID0gU1BFQ0lBTF9TQ1JJUFQ7XG4gICAgfVxuICAgIHRoaXMuX3N0YXRlID0gSU5fVEFHX05BTUU7XG4gICAgdGhpcy5faW5kZXgtLTsgLy9jb25zdW1lIHRoZSB0b2tlbiBhZ2FpblxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVBZnRlclNjcmlwdDEgPSBpZkVsc2VTdGF0ZShcIlJcIiwgQUZURVJfU0NSSVBUXzIsIFRFWFQpO1xuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVBZnRlclNjcmlwdDIgPSBpZkVsc2VTdGF0ZShcIklcIiwgQUZURVJfU0NSSVBUXzMsIFRFWFQpO1xuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVBZnRlclNjcmlwdDMgPSBpZkVsc2VTdGF0ZShcIlBcIiwgQUZURVJfU0NSSVBUXzQsIFRFWFQpO1xuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVBZnRlclNjcmlwdDQgPSBpZkVsc2VTdGF0ZShcIlRcIiwgQUZURVJfU0NSSVBUXzUsIFRFWFQpO1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUFmdGVyU2NyaXB0NSA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCI+XCIgfHwgd2hpdGVzcGFjZShjKSkge1xuICAgICAgICB0aGlzLl9zcGVjaWFsID0gU1BFQ0lBTF9OT05FO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IElOX0NMT1NJTkdfVEFHX05BTUU7XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4IC0gNjtcbiAgICAgICAgdGhpcy5faW5kZXgtLTsgLy9yZWNvbnN1bWUgdGhlIHRva2VuXG4gICAgfSBlbHNlIHRoaXMuX3N0YXRlID0gVEVYVDtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQmVmb3JlU3R5bGUxID0gY29uc3VtZVNwZWNpYWxOYW1lQ2hhcihcbiAgICBcIllcIixcbiAgICBCRUZPUkVfU1RZTEVfMlxuKTtcblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQmVmb3JlU3R5bGUyID0gY29uc3VtZVNwZWNpYWxOYW1lQ2hhcihcbiAgICBcIkxcIixcbiAgICBCRUZPUkVfU1RZTEVfM1xuKTtcblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQmVmb3JlU3R5bGUzID0gY29uc3VtZVNwZWNpYWxOYW1lQ2hhcihcbiAgICBcIkVcIixcbiAgICBCRUZPUkVfU1RZTEVfNFxuKTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVCZWZvcmVTdHlsZTQgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiL1wiIHx8IGMgPT09IFwiPlwiIHx8IHdoaXRlc3BhY2UoYykpIHtcbiAgICAgICAgdGhpcy5fc3BlY2lhbCA9IFNQRUNJQUxfU1RZTEU7XG4gICAgfVxuICAgIHRoaXMuX3N0YXRlID0gSU5fVEFHX05BTUU7XG4gICAgdGhpcy5faW5kZXgtLTsgLy9jb25zdW1lIHRoZSB0b2tlbiBhZ2FpblxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVBZnRlclN0eWxlMSA9IGlmRWxzZVN0YXRlKFwiWVwiLCBBRlRFUl9TVFlMRV8yLCBURVhUKTtcblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQWZ0ZXJTdHlsZTIgPSBpZkVsc2VTdGF0ZShcIkxcIiwgQUZURVJfU1RZTEVfMywgVEVYVCk7XG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUFmdGVyU3R5bGUzID0gaWZFbHNlU3RhdGUoXCJFXCIsIEFGVEVSX1NUWUxFXzQsIFRFWFQpO1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUFmdGVyU3R5bGU0ID0gZnVuY3Rpb24oYykge1xuICAgIGlmIChjID09PSBcIj5cIiB8fCB3aGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgIHRoaXMuX3NwZWNpYWwgPSBTUEVDSUFMX05PTkU7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gSU5fQ0xPU0lOR19UQUdfTkFNRTtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggLSA1O1xuICAgICAgICB0aGlzLl9pbmRleC0tOyAvL3JlY29uc3VtZSB0aGUgdG9rZW5cbiAgICB9IGVsc2UgdGhpcy5fc3RhdGUgPSBURVhUO1xufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVCZWZvcmVFbnRpdHkgPSBpZkVsc2VTdGF0ZShcbiAgICBcIiNcIixcbiAgICBCRUZPUkVfTlVNRVJJQ19FTlRJVFksXG4gICAgSU5fTkFNRURfRU5USVRZXG4pO1xuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVCZWZvcmVOdW1lcmljRW50aXR5ID0gaWZFbHNlU3RhdGUoXG4gICAgXCJYXCIsXG4gICAgSU5fSEVYX0VOVElUWSxcbiAgICBJTl9OVU1FUklDX0VOVElUWVxuKTtcblxuLy9mb3IgZW50aXRpZXMgdGVybWluYXRlZCB3aXRoIGEgc2VtaWNvbG9uXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9wYXJzZU5hbWVkRW50aXR5U3RyaWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgLy9vZmZzZXQgPSAxXG4gICAgaWYgKHRoaXMuX3NlY3Rpb25TdGFydCArIDEgPCB0aGlzLl9pbmRleCkge1xuICAgICAgICB2YXIgZW50aXR5ID0gdGhpcy5fYnVmZmVyLnN1YnN0cmluZyhcbiAgICAgICAgICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgKyAxLFxuICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgbWFwID0gdGhpcy5feG1sTW9kZSA/IHhtbE1hcCA6IGVudGl0eU1hcDtcblxuICAgICAgICBpZiAobWFwLmhhc093blByb3BlcnR5KGVudGl0eSkpIHtcbiAgICAgICAgICAgIHRoaXMuX2VtaXRQYXJ0aWFsKG1hcFtlbnRpdHldKTtcbiAgICAgICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4ICsgMTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8vcGFyc2VzIGxlZ2FjeSBlbnRpdGllcyAod2l0aG91dCB0cmFpbGluZyBzZW1pY29sb24pXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9wYXJzZUxlZ2FjeUVudGl0eSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX3NlY3Rpb25TdGFydCArIDEsXG4gICAgICAgIGxpbWl0ID0gdGhpcy5faW5kZXggLSBzdGFydDtcblxuICAgIGlmIChsaW1pdCA+IDYpIGxpbWl0ID0gNjsgLy90aGUgbWF4IGxlbmd0aCBvZiBsZWdhY3kgZW50aXRpZXMgaXMgNlxuXG4gICAgd2hpbGUgKGxpbWl0ID49IDIpIHtcbiAgICAgICAgLy90aGUgbWluIGxlbmd0aCBvZiBsZWdhY3kgZW50aXRpZXMgaXMgMlxuICAgICAgICB2YXIgZW50aXR5ID0gdGhpcy5fYnVmZmVyLnN1YnN0cihzdGFydCwgbGltaXQpO1xuXG4gICAgICAgIGlmIChsZWdhY3lNYXAuaGFzT3duUHJvcGVydHkoZW50aXR5KSkge1xuICAgICAgICAgICAgdGhpcy5fZW1pdFBhcnRpYWwobGVnYWN5TWFwW2VudGl0eV0pO1xuICAgICAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ICs9IGxpbWl0ICsgMTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpbWl0LS07XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUluTmFtZWRFbnRpdHkgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiO1wiKSB7XG4gICAgICAgIHRoaXMuX3BhcnNlTmFtZWRFbnRpdHlTdHJpY3QoKTtcbiAgICAgICAgaWYgKHRoaXMuX3NlY3Rpb25TdGFydCArIDEgPCB0aGlzLl9pbmRleCAmJiAhdGhpcy5feG1sTW9kZSkge1xuICAgICAgICAgICAgdGhpcy5fcGFyc2VMZWdhY3lFbnRpdHkoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgICAoYyA8IFwiYVwiIHx8IGMgPiBcInpcIikgJiZcbiAgICAgICAgKGMgPCBcIkFcIiB8fCBjID4gXCJaXCIpICYmXG4gICAgICAgIChjIDwgXCIwXCIgfHwgYyA+IFwiOVwiKVxuICAgICkge1xuICAgICAgICBpZiAodGhpcy5feG1sTW9kZSk7XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX3NlY3Rpb25TdGFydCArIDEgPT09IHRoaXMuX2luZGV4KTtcbiAgICAgICAgZWxzZSBpZiAodGhpcy5fYmFzZVN0YXRlICE9PSBURVhUKSB7XG4gICAgICAgICAgICBpZiAoYyAhPT0gXCI9XCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJzZU5hbWVkRW50aXR5U3RyaWN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9wYXJzZUxlZ2FjeUVudGl0eSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gICAgICAgIHRoaXMuX2luZGV4LS07XG4gICAgfVxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fZGVjb2RlTnVtZXJpY0VudGl0eSA9IGZ1bmN0aW9uKG9mZnNldCwgYmFzZSkge1xuICAgIHZhciBzZWN0aW9uU3RhcnQgPSB0aGlzLl9zZWN0aW9uU3RhcnQgKyBvZmZzZXQ7XG5cbiAgICBpZiAoc2VjdGlvblN0YXJ0ICE9PSB0aGlzLl9pbmRleCkge1xuICAgICAgICAvL3BhcnNlIGVudGl0eVxuICAgICAgICB2YXIgZW50aXR5ID0gdGhpcy5fYnVmZmVyLnN1YnN0cmluZyhzZWN0aW9uU3RhcnQsIHRoaXMuX2luZGV4KTtcbiAgICAgICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KGVudGl0eSwgYmFzZSk7XG5cbiAgICAgICAgdGhpcy5fZW1pdFBhcnRpYWwoZGVjb2RlQ29kZVBvaW50KHBhcnNlZCkpO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleDtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQtLTtcbiAgICB9XG5cbiAgICB0aGlzLl9zdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlSW5OdW1lcmljRW50aXR5ID0gZnVuY3Rpb24oYykge1xuICAgIGlmIChjID09PSBcIjtcIikge1xuICAgICAgICB0aGlzLl9kZWNvZGVOdW1lcmljRW50aXR5KDIsIDEwKTtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0Kys7XG4gICAgfSBlbHNlIGlmIChjIDwgXCIwXCIgfHwgYyA+IFwiOVwiKSB7XG4gICAgICAgIGlmICghdGhpcy5feG1sTW9kZSkge1xuICAgICAgICAgICAgdGhpcy5fZGVjb2RlTnVtZXJpY0VudGl0eSgyLCAxMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pbmRleC0tO1xuICAgIH1cbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlSW5IZXhFbnRpdHkgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiO1wiKSB7XG4gICAgICAgIHRoaXMuX2RlY29kZU51bWVyaWNFbnRpdHkoMywgMTYpO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQrKztcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgICAoYyA8IFwiYVwiIHx8IGMgPiBcImZcIikgJiZcbiAgICAgICAgKGMgPCBcIkFcIiB8fCBjID4gXCJGXCIpICYmXG4gICAgICAgIChjIDwgXCIwXCIgfHwgYyA+IFwiOVwiKVxuICAgICkge1xuICAgICAgICBpZiAoIXRoaXMuX3htbE1vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2RlY29kZU51bWVyaWNFbnRpdHkoMywgMTYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9jbGVhbnVwID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3NlY3Rpb25TdGFydCA8IDApIHtcbiAgICAgICAgdGhpcy5fYnVmZmVyID0gXCJcIjtcbiAgICAgICAgdGhpcy5fYnVmZmVyT2Zmc2V0ICs9IHRoaXMuX2luZGV4O1xuICAgICAgICB0aGlzLl9pbmRleCA9IDA7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9ydW5uaW5nKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZSA9PT0gVEVYVCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3NlY3Rpb25TdGFydCAhPT0gdGhpcy5faW5kZXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYnMub250ZXh0KHRoaXMuX2J1ZmZlci5zdWJzdHIodGhpcy5fc2VjdGlvblN0YXJ0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9idWZmZXIgPSBcIlwiO1xuICAgICAgICAgICAgdGhpcy5fYnVmZmVyT2Zmc2V0ICs9IHRoaXMuX2luZGV4O1xuICAgICAgICAgICAgdGhpcy5faW5kZXggPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3NlY3Rpb25TdGFydCA9PT0gdGhpcy5faW5kZXgpIHtcbiAgICAgICAgICAgIC8vdGhlIHNlY3Rpb24ganVzdCBzdGFydGVkXG4gICAgICAgICAgICB0aGlzLl9idWZmZXIgPSBcIlwiO1xuICAgICAgICAgICAgdGhpcy5fYnVmZmVyT2Zmc2V0ICs9IHRoaXMuX2luZGV4O1xuICAgICAgICAgICAgdGhpcy5faW5kZXggPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy9yZW1vdmUgZXZlcnl0aGluZyB1bm5lY2Vzc2FyeVxuICAgICAgICAgICAgdGhpcy5fYnVmZmVyID0gdGhpcy5fYnVmZmVyLnN1YnN0cih0aGlzLl9zZWN0aW9uU3RhcnQpO1xuICAgICAgICAgICAgdGhpcy5faW5kZXggLT0gdGhpcy5fc2VjdGlvblN0YXJ0O1xuICAgICAgICAgICAgdGhpcy5fYnVmZmVyT2Zmc2V0ICs9IHRoaXMuX3NlY3Rpb25TdGFydDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IDA7XG4gICAgfVxufTtcblxuLy9UT0RPIG1ha2UgZXZlbnRzIGNvbmRpdGlvbmFsXG5Ub2tlbml6ZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24oY2h1bmspIHtcbiAgICBpZiAodGhpcy5fZW5kZWQpIHRoaXMuX2Nicy5vbmVycm9yKEVycm9yKFwiLndyaXRlKCkgYWZ0ZXIgZG9uZSFcIikpO1xuXG4gICAgdGhpcy5fYnVmZmVyICs9IGNodW5rO1xuICAgIHRoaXMuX3BhcnNlKCk7XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9wYXJzZSA9IGZ1bmN0aW9uKCkge1xuICAgIHdoaWxlICh0aGlzLl9pbmRleCA8IHRoaXMuX2J1ZmZlci5sZW5ndGggJiYgdGhpcy5fcnVubmluZykge1xuICAgICAgICB2YXIgYyA9IHRoaXMuX2J1ZmZlci5jaGFyQXQodGhpcy5faW5kZXgpO1xuICAgICAgICBpZiAodGhpcy5fc3RhdGUgPT09IFRFWFQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlVGV4dChjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQkVGT1JFX1RBR19OQU1FKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZVRhZ05hbWUoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IElOX1RBR19OQU1FKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUluVGFnTmFtZShjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQkVGT1JFX0NMT1NJTkdfVEFHX05BTUUpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQmVmb3JlQ2xvc2VpbmdUYWdOYW1lKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBJTl9DTE9TSU5HX1RBR19OQU1FKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUluQ2xvc2VpbmdUYWdOYW1lKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBBRlRFUl9DTE9TSU5HX1RBR19OQU1FKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUFmdGVyQ2xvc2VpbmdUYWdOYW1lKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBJTl9TRUxGX0NMT1NJTkdfVEFHKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUluU2VsZkNsb3NpbmdUYWcoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEJFRk9SRV9BVFRSSUJVVEVfTkFNRSkge1xuXG4gICAgICAgIC8qXG5cdFx0Klx0YXR0cmlidXRlc1xuXHRcdCovXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZUF0dHJpYnV0ZU5hbWUoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IElOX0FUVFJJQlVURV9OQU1FKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUluQXR0cmlidXRlTmFtZShjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQUZURVJfQVRUUklCVVRFX05BTUUpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQWZ0ZXJBdHRyaWJ1dGVOYW1lKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBCRUZPUkVfQVRUUklCVVRFX1ZBTFVFKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZUF0dHJpYnV0ZVZhbHVlKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBJTl9BVFRSSUJVVEVfVkFMVUVfRFEpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlSW5BdHRyaWJ1dGVWYWx1ZURvdWJsZVF1b3RlcyhjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gSU5fQVRUUklCVVRFX1ZBTFVFX1NRKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUluQXR0cmlidXRlVmFsdWVTaW5nbGVRdW90ZXMoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IElOX0FUVFJJQlVURV9WQUxVRV9OUSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVJbkF0dHJpYnV0ZVZhbHVlTm9RdW90ZXMoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEJFRk9SRV9ERUNMQVJBVElPTikge1xuXG4gICAgICAgIC8qXG5cdFx0Klx0ZGVjbGFyYXRpb25zXG5cdFx0Ki9cbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQmVmb3JlRGVjbGFyYXRpb24oYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IElOX0RFQ0xBUkFUSU9OKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUluRGVjbGFyYXRpb24oYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IElOX1BST0NFU1NJTkdfSU5TVFJVQ1RJT04pIHtcblxuICAgICAgICAvKlxuXHRcdCpcdHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb25zXG5cdFx0Ki9cbiAgICAgICAgICAgIHRoaXMuX3N0YXRlSW5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24oYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEJFRk9SRV9DT01NRU5UKSB7XG5cbiAgICAgICAgLypcblx0XHQqXHRjb21tZW50c1xuXHRcdCovXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZUNvbW1lbnQoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IElOX0NPTU1FTlQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlSW5Db21tZW50KGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBBRlRFUl9DT01NRU5UXzEpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQWZ0ZXJDb21tZW50MShjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQUZURVJfQ09NTUVOVF8yKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUFmdGVyQ29tbWVudDIoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEJFRk9SRV9DREFUQV8xKSB7XG5cbiAgICAgICAgLypcblx0XHQqXHRjZGF0YVxuXHRcdCovXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZUNkYXRhMShjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQkVGT1JFX0NEQVRBXzIpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQmVmb3JlQ2RhdGEyKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBCRUZPUkVfQ0RBVEFfMykge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVDZGF0YTMoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEJFRk9SRV9DREFUQV80KSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZUNkYXRhNChjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQkVGT1JFX0NEQVRBXzUpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQmVmb3JlQ2RhdGE1KGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBCRUZPUkVfQ0RBVEFfNikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVDZGF0YTYoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IElOX0NEQVRBKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUluQ2RhdGEoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEFGVEVSX0NEQVRBXzEpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQWZ0ZXJDZGF0YTEoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEFGVEVSX0NEQVRBXzIpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQWZ0ZXJDZGF0YTIoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEJFRk9SRV9TUEVDSUFMKSB7XG5cbiAgICAgICAgLypcblx0XHQqIHNwZWNpYWwgdGFnc1xuXHRcdCovXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZVNwZWNpYWwoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEJFRk9SRV9TUEVDSUFMX0VORCkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVTcGVjaWFsRW5kKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBCRUZPUkVfU0NSSVBUXzEpIHtcblxuICAgICAgICAvKlxuXHRcdCogc2NyaXB0XG5cdFx0Ki9cbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQmVmb3JlU2NyaXB0MShjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQkVGT1JFX1NDUklQVF8yKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZVNjcmlwdDIoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEJFRk9SRV9TQ1JJUFRfMykge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVTY3JpcHQzKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBCRUZPUkVfU0NSSVBUXzQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQmVmb3JlU2NyaXB0NChjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQkVGT1JFX1NDUklQVF81KSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZVNjcmlwdDUoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEFGVEVSX1NDUklQVF8xKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUFmdGVyU2NyaXB0MShjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQUZURVJfU0NSSVBUXzIpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQWZ0ZXJTY3JpcHQyKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBBRlRFUl9TQ1JJUFRfMykge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVBZnRlclNjcmlwdDMoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEFGVEVSX1NDUklQVF80KSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUFmdGVyU2NyaXB0NChjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQUZURVJfU0NSSVBUXzUpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQWZ0ZXJTY3JpcHQ1KGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBCRUZPUkVfU1RZTEVfMSkge1xuXG4gICAgICAgIC8qXG5cdFx0KiBzdHlsZVxuXHRcdCovXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZVN0eWxlMShjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQkVGT1JFX1NUWUxFXzIpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQmVmb3JlU3R5bGUyKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBCRUZPUkVfU1RZTEVfMykge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVTdHlsZTMoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEJFRk9SRV9TVFlMRV80KSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZVN0eWxlNChjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQUZURVJfU1RZTEVfMSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVBZnRlclN0eWxlMShjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQUZURVJfU1RZTEVfMikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVBZnRlclN0eWxlMihjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQUZURVJfU1RZTEVfMykge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVBZnRlclN0eWxlMyhjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQUZURVJfU1RZTEVfNCkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVBZnRlclN0eWxlNChjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQkVGT1JFX0VOVElUWSkge1xuXG4gICAgICAgIC8qXG5cdFx0KiBlbnRpdGllc1xuXHRcdCovXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZUVudGl0eShjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQkVGT1JFX05VTUVSSUNfRU5USVRZKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZU51bWVyaWNFbnRpdHkoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IElOX05BTUVEX0VOVElUWSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVJbk5hbWVkRW50aXR5KGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBJTl9OVU1FUklDX0VOVElUWSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVJbk51bWVyaWNFbnRpdHkoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IElOX0hFWF9FTlRJVFkpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlSW5IZXhFbnRpdHkoYyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9jYnMub25lcnJvcihFcnJvcihcInVua25vd24gX3N0YXRlXCIpLCB0aGlzLl9zdGF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9pbmRleCsrO1xuICAgIH1cblxuICAgIHRoaXMuX2NsZWFudXAoKTtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9ydW5uaW5nID0gZmFsc2U7XG59O1xuVG9rZW5pemVyLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9ydW5uaW5nID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl9pbmRleCA8IHRoaXMuX2J1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5fcGFyc2UoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2VuZGVkKSB7XG4gICAgICAgIHRoaXMuX2ZpbmlzaCgpO1xuICAgIH1cbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24oY2h1bmspIHtcbiAgICBpZiAodGhpcy5fZW5kZWQpIHRoaXMuX2Nicy5vbmVycm9yKEVycm9yKFwiLmVuZCgpIGFmdGVyIGRvbmUhXCIpKTtcbiAgICBpZiAoY2h1bmspIHRoaXMud3JpdGUoY2h1bmspO1xuXG4gICAgdGhpcy5fZW5kZWQgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMuX3J1bm5pbmcpIHRoaXMuX2ZpbmlzaCgpO1xufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fZmluaXNoID0gZnVuY3Rpb24oKSB7XG4gICAgLy9pZiB0aGVyZSBpcyByZW1haW5pbmcgZGF0YSwgZW1pdCBpdCBpbiBhIHJlYXNvbmFibGUgd2F5XG4gICAgaWYgKHRoaXMuX3NlY3Rpb25TdGFydCA8IHRoaXMuX2luZGV4KSB7XG4gICAgICAgIHRoaXMuX2hhbmRsZVRyYWlsaW5nRGF0YSgpO1xuICAgIH1cblxuICAgIHRoaXMuX2Nicy5vbmVuZCgpO1xufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5faGFuZGxlVHJhaWxpbmdEYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRhdGEgPSB0aGlzLl9idWZmZXIuc3Vic3RyKHRoaXMuX3NlY3Rpb25TdGFydCk7XG5cbiAgICBpZiAoXG4gICAgICAgIHRoaXMuX3N0YXRlID09PSBJTl9DREFUQSB8fFxuICAgICAgICB0aGlzLl9zdGF0ZSA9PT0gQUZURVJfQ0RBVEFfMSB8fFxuICAgICAgICB0aGlzLl9zdGF0ZSA9PT0gQUZURVJfQ0RBVEFfMlxuICAgICkge1xuICAgICAgICB0aGlzLl9jYnMub25jZGF0YShkYXRhKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgICB0aGlzLl9zdGF0ZSA9PT0gSU5fQ09NTUVOVCB8fFxuICAgICAgICB0aGlzLl9zdGF0ZSA9PT0gQUZURVJfQ09NTUVOVF8xIHx8XG4gICAgICAgIHRoaXMuX3N0YXRlID09PSBBRlRFUl9DT01NRU5UXzJcbiAgICApIHtcbiAgICAgICAgdGhpcy5fY2JzLm9uY29tbWVudChkYXRhKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBJTl9OQU1FRF9FTlRJVFkgJiYgIXRoaXMuX3htbE1vZGUpIHtcbiAgICAgICAgdGhpcy5fcGFyc2VMZWdhY3lFbnRpdHkoKTtcbiAgICAgICAgaWYgKHRoaXMuX3NlY3Rpb25TdGFydCA8IHRoaXMuX2luZGV4KSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZVRyYWlsaW5nRGF0YSgpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gSU5fTlVNRVJJQ19FTlRJVFkgJiYgIXRoaXMuX3htbE1vZGUpIHtcbiAgICAgICAgdGhpcy5fZGVjb2RlTnVtZXJpY0VudGl0eSgyLCAxMCk7XG4gICAgICAgIGlmICh0aGlzLl9zZWN0aW9uU3RhcnQgPCB0aGlzLl9pbmRleCkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVUcmFpbGluZ0RhdGEoKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IElOX0hFWF9FTlRJVFkgJiYgIXRoaXMuX3htbE1vZGUpIHtcbiAgICAgICAgdGhpcy5fZGVjb2RlTnVtZXJpY0VudGl0eSgzLCAxNik7XG4gICAgICAgIGlmICh0aGlzLl9zZWN0aW9uU3RhcnQgPCB0aGlzLl9pbmRleCkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVUcmFpbGluZ0RhdGEoKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHRoaXMuX3N0YXRlICE9PSBJTl9UQUdfTkFNRSAmJlxuICAgICAgICB0aGlzLl9zdGF0ZSAhPT0gQkVGT1JFX0FUVFJJQlVURV9OQU1FICYmXG4gICAgICAgIHRoaXMuX3N0YXRlICE9PSBCRUZPUkVfQVRUUklCVVRFX1ZBTFVFICYmXG4gICAgICAgIHRoaXMuX3N0YXRlICE9PSBBRlRFUl9BVFRSSUJVVEVfTkFNRSAmJlxuICAgICAgICB0aGlzLl9zdGF0ZSAhPT0gSU5fQVRUUklCVVRFX05BTUUgJiZcbiAgICAgICAgdGhpcy5fc3RhdGUgIT09IElOX0FUVFJJQlVURV9WQUxVRV9TUSAmJlxuICAgICAgICB0aGlzLl9zdGF0ZSAhPT0gSU5fQVRUUklCVVRFX1ZBTFVFX0RRICYmXG4gICAgICAgIHRoaXMuX3N0YXRlICE9PSBJTl9BVFRSSUJVVEVfVkFMVUVfTlEgJiZcbiAgICAgICAgdGhpcy5fc3RhdGUgIT09IElOX0NMT1NJTkdfVEFHX05BTUVcbiAgICApIHtcbiAgICAgICAgdGhpcy5fY2JzLm9udGV4dChkYXRhKTtcbiAgICB9XG4gICAgLy9lbHNlLCBpZ25vcmUgcmVtYWluaW5nIGRhdGFcbiAgICAvL1RPRE8gYWRkIGEgd2F5IHRvIHJlbW92ZSBjdXJyZW50IHRhZ1xufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgIFRva2VuaXplci5jYWxsKFxuICAgICAgICB0aGlzLFxuICAgICAgICB7IHhtbE1vZGU6IHRoaXMuX3htbE1vZGUsIGRlY29kZUVudGl0aWVzOiB0aGlzLl9kZWNvZGVFbnRpdGllcyB9LFxuICAgICAgICB0aGlzLl9jYnNcbiAgICApO1xufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5nZXRBYnNvbHV0ZUluZGV4ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2J1ZmZlck9mZnNldCArIHRoaXMuX2luZGV4O1xufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fZ2V0U2VjdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9idWZmZXIuc3Vic3RyaW5nKHRoaXMuX3NlY3Rpb25TdGFydCwgdGhpcy5faW5kZXgpO1xufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fZW1pdFRva2VuID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHRoaXMuX2Nic1tuYW1lXSh0aGlzLl9nZXRTZWN0aW9uKCkpO1xuICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IC0xO1xufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fZW1pdFBhcnRpYWwgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmICh0aGlzLl9iYXNlU3RhdGUgIT09IFRFWFQpIHtcbiAgICAgICAgdGhpcy5fY2JzLm9uYXR0cmliZGF0YSh2YWx1ZSk7IC8vVE9ETyBpbXBsZW1lbnQgdGhlIG5ldyBldmVudFxuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2Nicy5vbnRleHQodmFsdWUpO1xuICAgIH1cbn07XG4iLCJ2YXIgRWxlbWVudFR5cGUgPSByZXF1aXJlKFwiZG9tZWxlbWVudHR5cGVcIik7XG5cbnZhciByZV93aGl0ZXNwYWNlID0gL1xccysvZztcbnZhciBOb2RlUHJvdG90eXBlID0gcmVxdWlyZShcIi4vbGliL25vZGVcIik7XG52YXIgRWxlbWVudFByb3RvdHlwZSA9IHJlcXVpcmUoXCIuL2xpYi9lbGVtZW50XCIpO1xuXG5mdW5jdGlvbiBEb21IYW5kbGVyKGNhbGxiYWNrLCBvcHRpb25zLCBlbGVtZW50Q0Ipe1xuXHRpZih0eXBlb2YgY2FsbGJhY2sgPT09IFwib2JqZWN0XCIpe1xuXHRcdGVsZW1lbnRDQiA9IG9wdGlvbnM7XG5cdFx0b3B0aW9ucyA9IGNhbGxiYWNrO1xuXHRcdGNhbGxiYWNrID0gbnVsbDtcblx0fSBlbHNlIGlmKHR5cGVvZiBvcHRpb25zID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdGVsZW1lbnRDQiA9IG9wdGlvbnM7XG5cdFx0b3B0aW9ucyA9IGRlZmF1bHRPcHRzO1xuXHR9XG5cdHRoaXMuX2NhbGxiYWNrID0gY2FsbGJhY2s7XG5cdHRoaXMuX29wdGlvbnMgPSBvcHRpb25zIHx8IGRlZmF1bHRPcHRzO1xuXHR0aGlzLl9lbGVtZW50Q0IgPSBlbGVtZW50Q0I7XG5cdHRoaXMuZG9tID0gW107XG5cdHRoaXMuX2RvbmUgPSBmYWxzZTtcblx0dGhpcy5fdGFnU3RhY2sgPSBbXTtcblx0dGhpcy5fcGFyc2VyID0gdGhpcy5fcGFyc2VyIHx8IG51bGw7XG59XG5cbi8vZGVmYXVsdCBvcHRpb25zXG52YXIgZGVmYXVsdE9wdHMgPSB7XG5cdG5vcm1hbGl6ZVdoaXRlc3BhY2U6IGZhbHNlLCAvL1JlcGxhY2UgYWxsIHdoaXRlc3BhY2Ugd2l0aCBzaW5nbGUgc3BhY2VzXG5cdHdpdGhTdGFydEluZGljZXM6IGZhbHNlLCAvL0FkZCBzdGFydEluZGV4IHByb3BlcnRpZXMgdG8gbm9kZXNcblx0d2l0aEVuZEluZGljZXM6IGZhbHNlLCAvL0FkZCBlbmRJbmRleCBwcm9wZXJ0aWVzIHRvIG5vZGVzXG59O1xuXG5Eb21IYW5kbGVyLnByb3RvdHlwZS5vbnBhcnNlcmluaXQgPSBmdW5jdGlvbihwYXJzZXIpe1xuXHR0aGlzLl9wYXJzZXIgPSBwYXJzZXI7XG59O1xuXG4vL1Jlc2V0cyB0aGUgaGFuZGxlciBiYWNrIHRvIHN0YXJ0aW5nIHN0YXRlXG5Eb21IYW5kbGVyLnByb3RvdHlwZS5vbnJlc2V0ID0gZnVuY3Rpb24oKXtcblx0RG9tSGFuZGxlci5jYWxsKHRoaXMsIHRoaXMuX2NhbGxiYWNrLCB0aGlzLl9vcHRpb25zLCB0aGlzLl9lbGVtZW50Q0IpO1xufTtcblxuLy9TaWduYWxzIHRoZSBoYW5kbGVyIHRoYXQgcGFyc2luZyBpcyBkb25lXG5Eb21IYW5kbGVyLnByb3RvdHlwZS5vbmVuZCA9IGZ1bmN0aW9uKCl7XG5cdGlmKHRoaXMuX2RvbmUpIHJldHVybjtcblx0dGhpcy5fZG9uZSA9IHRydWU7XG5cdHRoaXMuX3BhcnNlciA9IG51bGw7XG5cdHRoaXMuX2hhbmRsZUNhbGxiYWNrKG51bGwpO1xufTtcblxuRG9tSGFuZGxlci5wcm90b3R5cGUuX2hhbmRsZUNhbGxiYWNrID1cbkRvbUhhbmRsZXIucHJvdG90eXBlLm9uZXJyb3IgPSBmdW5jdGlvbihlcnJvcil7XG5cdGlmKHR5cGVvZiB0aGlzLl9jYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKXtcblx0XHR0aGlzLl9jYWxsYmFjayhlcnJvciwgdGhpcy5kb20pO1xuXHR9IGVsc2Uge1xuXHRcdGlmKGVycm9yKSB0aHJvdyBlcnJvcjtcblx0fVxufTtcblxuRG9tSGFuZGxlci5wcm90b3R5cGUub25jbG9zZXRhZyA9IGZ1bmN0aW9uKCl7XG5cdC8vaWYodGhpcy5fdGFnU3RhY2sucG9wKCkubmFtZSAhPT0gbmFtZSkgdGhpcy5faGFuZGxlQ2FsbGJhY2soRXJyb3IoXCJUYWduYW1lIGRpZG4ndCBtYXRjaCFcIikpO1xuXHRcblx0dmFyIGVsZW0gPSB0aGlzLl90YWdTdGFjay5wb3AoKTtcblxuXHRpZih0aGlzLl9vcHRpb25zLndpdGhFbmRJbmRpY2VzICYmIGVsZW0pe1xuXHRcdGVsZW0uZW5kSW5kZXggPSB0aGlzLl9wYXJzZXIuZW5kSW5kZXg7XG5cdH1cblxuXHRpZih0aGlzLl9lbGVtZW50Q0IpIHRoaXMuX2VsZW1lbnRDQihlbGVtKTtcbn07XG5cbkRvbUhhbmRsZXIucHJvdG90eXBlLl9jcmVhdGVEb21FbGVtZW50ID0gZnVuY3Rpb24ocHJvcGVydGllcyl7XG5cdGlmICghdGhpcy5fb3B0aW9ucy53aXRoRG9tTHZsMSkgcmV0dXJuIHByb3BlcnRpZXM7XG5cblx0dmFyIGVsZW1lbnQ7XG5cdGlmIChwcm9wZXJ0aWVzLnR5cGUgPT09IFwidGFnXCIpIHtcblx0XHRlbGVtZW50ID0gT2JqZWN0LmNyZWF0ZShFbGVtZW50UHJvdG90eXBlKTtcblx0fSBlbHNlIHtcblx0XHRlbGVtZW50ID0gT2JqZWN0LmNyZWF0ZShOb2RlUHJvdG90eXBlKTtcblx0fVxuXG5cdGZvciAodmFyIGtleSBpbiBwcm9wZXJ0aWVzKSB7XG5cdFx0aWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXHRcdFx0ZWxlbWVudFtrZXldID0gcHJvcGVydGllc1trZXldO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50O1xufTtcblxuRG9tSGFuZGxlci5wcm90b3R5cGUuX2FkZERvbUVsZW1lbnQgPSBmdW5jdGlvbihlbGVtZW50KXtcblx0dmFyIHBhcmVudCA9IHRoaXMuX3RhZ1N0YWNrW3RoaXMuX3RhZ1N0YWNrLmxlbmd0aCAtIDFdO1xuXHR2YXIgc2libGluZ3MgPSBwYXJlbnQgPyBwYXJlbnQuY2hpbGRyZW4gOiB0aGlzLmRvbTtcblx0dmFyIHByZXZpb3VzU2libGluZyA9IHNpYmxpbmdzW3NpYmxpbmdzLmxlbmd0aCAtIDFdO1xuXG5cdGVsZW1lbnQubmV4dCA9IG51bGw7XG5cblx0aWYodGhpcy5fb3B0aW9ucy53aXRoU3RhcnRJbmRpY2VzKXtcblx0XHRlbGVtZW50LnN0YXJ0SW5kZXggPSB0aGlzLl9wYXJzZXIuc3RhcnRJbmRleDtcblx0fVxuXHRpZih0aGlzLl9vcHRpb25zLndpdGhFbmRJbmRpY2VzKXtcblx0XHRlbGVtZW50LmVuZEluZGV4ID0gdGhpcy5fcGFyc2VyLmVuZEluZGV4O1xuXHR9XG5cblx0aWYocHJldmlvdXNTaWJsaW5nKXtcblx0XHRlbGVtZW50LnByZXYgPSBwcmV2aW91c1NpYmxpbmc7XG5cdFx0cHJldmlvdXNTaWJsaW5nLm5leHQgPSBlbGVtZW50O1xuXHR9IGVsc2Uge1xuXHRcdGVsZW1lbnQucHJldiA9IG51bGw7XG5cdH1cblxuXHRzaWJsaW5ncy5wdXNoKGVsZW1lbnQpO1xuXHRlbGVtZW50LnBhcmVudCA9IHBhcmVudCB8fCBudWxsO1xufTtcblxuRG9tSGFuZGxlci5wcm90b3R5cGUub25vcGVudGFnID0gZnVuY3Rpb24obmFtZSwgYXR0cmlicyl7XG5cdHZhciBwcm9wZXJ0aWVzID0ge1xuXHRcdHR5cGU6IG5hbWUgPT09IFwic2NyaXB0XCIgPyBFbGVtZW50VHlwZS5TY3JpcHQgOiBuYW1lID09PSBcInN0eWxlXCIgPyBFbGVtZW50VHlwZS5TdHlsZSA6IEVsZW1lbnRUeXBlLlRhZyxcblx0XHRuYW1lOiBuYW1lLFxuXHRcdGF0dHJpYnM6IGF0dHJpYnMsXG5cdFx0Y2hpbGRyZW46IFtdXG5cdH07XG5cblx0dmFyIGVsZW1lbnQgPSB0aGlzLl9jcmVhdGVEb21FbGVtZW50KHByb3BlcnRpZXMpO1xuXG5cdHRoaXMuX2FkZERvbUVsZW1lbnQoZWxlbWVudCk7XG5cblx0dGhpcy5fdGFnU3RhY2sucHVzaChlbGVtZW50KTtcbn07XG5cbkRvbUhhbmRsZXIucHJvdG90eXBlLm9udGV4dCA9IGZ1bmN0aW9uKGRhdGEpe1xuXHQvL3RoZSBpZ25vcmVXaGl0ZXNwYWNlIGlzIG9mZmljaWFsbHkgZHJvcHBlZCwgYnV0IGZvciBub3csXG5cdC8vaXQncyBhbiBhbGlhcyBmb3Igbm9ybWFsaXplV2hpdGVzcGFjZVxuXHR2YXIgbm9ybWFsaXplID0gdGhpcy5fb3B0aW9ucy5ub3JtYWxpemVXaGl0ZXNwYWNlIHx8IHRoaXMuX29wdGlvbnMuaWdub3JlV2hpdGVzcGFjZTtcblxuXHR2YXIgbGFzdFRhZztcblxuXHRpZighdGhpcy5fdGFnU3RhY2subGVuZ3RoICYmIHRoaXMuZG9tLmxlbmd0aCAmJiAobGFzdFRhZyA9IHRoaXMuZG9tW3RoaXMuZG9tLmxlbmd0aC0xXSkudHlwZSA9PT0gRWxlbWVudFR5cGUuVGV4dCl7XG5cdFx0aWYobm9ybWFsaXplKXtcblx0XHRcdGxhc3RUYWcuZGF0YSA9IChsYXN0VGFnLmRhdGEgKyBkYXRhKS5yZXBsYWNlKHJlX3doaXRlc3BhY2UsIFwiIFwiKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bGFzdFRhZy5kYXRhICs9IGRhdGE7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdGlmKFxuXHRcdFx0dGhpcy5fdGFnU3RhY2subGVuZ3RoICYmXG5cdFx0XHQobGFzdFRhZyA9IHRoaXMuX3RhZ1N0YWNrW3RoaXMuX3RhZ1N0YWNrLmxlbmd0aCAtIDFdKSAmJlxuXHRcdFx0KGxhc3RUYWcgPSBsYXN0VGFnLmNoaWxkcmVuW2xhc3RUYWcuY2hpbGRyZW4ubGVuZ3RoIC0gMV0pICYmXG5cdFx0XHRsYXN0VGFnLnR5cGUgPT09IEVsZW1lbnRUeXBlLlRleHRcblx0XHQpe1xuXHRcdFx0aWYobm9ybWFsaXplKXtcblx0XHRcdFx0bGFzdFRhZy5kYXRhID0gKGxhc3RUYWcuZGF0YSArIGRhdGEpLnJlcGxhY2UocmVfd2hpdGVzcGFjZSwgXCIgXCIpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bGFzdFRhZy5kYXRhICs9IGRhdGE7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmKG5vcm1hbGl6ZSl7XG5cdFx0XHRcdGRhdGEgPSBkYXRhLnJlcGxhY2UocmVfd2hpdGVzcGFjZSwgXCIgXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZWxlbWVudCA9IHRoaXMuX2NyZWF0ZURvbUVsZW1lbnQoe1xuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHR0eXBlOiBFbGVtZW50VHlwZS5UZXh0XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5fYWRkRG9tRWxlbWVudChlbGVtZW50KTtcblx0XHR9XG5cdH1cbn07XG5cbkRvbUhhbmRsZXIucHJvdG90eXBlLm9uY29tbWVudCA9IGZ1bmN0aW9uKGRhdGEpe1xuXHR2YXIgbGFzdFRhZyA9IHRoaXMuX3RhZ1N0YWNrW3RoaXMuX3RhZ1N0YWNrLmxlbmd0aCAtIDFdO1xuXG5cdGlmKGxhc3RUYWcgJiYgbGFzdFRhZy50eXBlID09PSBFbGVtZW50VHlwZS5Db21tZW50KXtcblx0XHRsYXN0VGFnLmRhdGEgKz0gZGF0YTtcblx0XHRyZXR1cm47XG5cdH1cblxuXHR2YXIgcHJvcGVydGllcyA9IHtcblx0XHRkYXRhOiBkYXRhLFxuXHRcdHR5cGU6IEVsZW1lbnRUeXBlLkNvbW1lbnRcblx0fTtcblxuXHR2YXIgZWxlbWVudCA9IHRoaXMuX2NyZWF0ZURvbUVsZW1lbnQocHJvcGVydGllcyk7XG5cblx0dGhpcy5fYWRkRG9tRWxlbWVudChlbGVtZW50KTtcblx0dGhpcy5fdGFnU3RhY2sucHVzaChlbGVtZW50KTtcbn07XG5cbkRvbUhhbmRsZXIucHJvdG90eXBlLm9uY2RhdGFzdGFydCA9IGZ1bmN0aW9uKCl7XG5cdHZhciBwcm9wZXJ0aWVzID0ge1xuXHRcdGNoaWxkcmVuOiBbe1xuXHRcdFx0ZGF0YTogXCJcIixcblx0XHRcdHR5cGU6IEVsZW1lbnRUeXBlLlRleHRcblx0XHR9XSxcblx0XHR0eXBlOiBFbGVtZW50VHlwZS5DREFUQVxuXHR9O1xuXG5cdHZhciBlbGVtZW50ID0gdGhpcy5fY3JlYXRlRG9tRWxlbWVudChwcm9wZXJ0aWVzKTtcblxuXHR0aGlzLl9hZGREb21FbGVtZW50KGVsZW1lbnQpO1xuXHR0aGlzLl90YWdTdGFjay5wdXNoKGVsZW1lbnQpO1xufTtcblxuRG9tSGFuZGxlci5wcm90b3R5cGUub25jb21tZW50ZW5kID0gRG9tSGFuZGxlci5wcm90b3R5cGUub25jZGF0YWVuZCA9IGZ1bmN0aW9uKCl7XG5cdHRoaXMuX3RhZ1N0YWNrLnBvcCgpO1xufTtcblxuRG9tSGFuZGxlci5wcm90b3R5cGUub25wcm9jZXNzaW5naW5zdHJ1Y3Rpb24gPSBmdW5jdGlvbihuYW1lLCBkYXRhKXtcblx0dmFyIGVsZW1lbnQgPSB0aGlzLl9jcmVhdGVEb21FbGVtZW50KHtcblx0XHRuYW1lOiBuYW1lLFxuXHRcdGRhdGE6IGRhdGEsXG5cdFx0dHlwZTogRWxlbWVudFR5cGUuRGlyZWN0aXZlXG5cdH0pO1xuXG5cdHRoaXMuX2FkZERvbUVsZW1lbnQoZWxlbWVudCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERvbUhhbmRsZXI7XG4iLCIvLyBUaGlzIG9iamVjdCB3aWxsIGJlIHVzZWQgYXMgdGhlIHByb3RvdHlwZSBmb3IgTm9kZXMgd2hlbiBjcmVhdGluZyBhXG4vLyBET00tTGV2ZWwtMS1jb21wbGlhbnQgc3RydWN0dXJlLlxudmFyIE5vZGVQcm90b3R5cGUgPSBtb2R1bGUuZXhwb3J0cyA9IHtcblx0Z2V0IGZpcnN0Q2hpbGQoKSB7XG5cdFx0dmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcblx0XHRyZXR1cm4gY2hpbGRyZW4gJiYgY2hpbGRyZW5bMF0gfHwgbnVsbDtcblx0fSxcblx0Z2V0IGxhc3RDaGlsZCgpIHtcblx0XHR2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuXHRcdHJldHVybiBjaGlsZHJlbiAmJiBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXSB8fCBudWxsO1xuXHR9LFxuXHRnZXQgbm9kZVR5cGUoKSB7XG5cdFx0cmV0dXJuIG5vZGVUeXBlc1t0aGlzLnR5cGVdIHx8IG5vZGVUeXBlcy5lbGVtZW50O1xuXHR9XG59O1xuXG52YXIgZG9tTHZsMSA9IHtcblx0dGFnTmFtZTogXCJuYW1lXCIsXG5cdGNoaWxkTm9kZXM6IFwiY2hpbGRyZW5cIixcblx0cGFyZW50Tm9kZTogXCJwYXJlbnRcIixcblx0cHJldmlvdXNTaWJsaW5nOiBcInByZXZcIixcblx0bmV4dFNpYmxpbmc6IFwibmV4dFwiLFxuXHRub2RlVmFsdWU6IFwiZGF0YVwiXG59O1xuXG52YXIgbm9kZVR5cGVzID0ge1xuXHRlbGVtZW50OiAxLFxuXHR0ZXh0OiAzLFxuXHRjZGF0YTogNCxcblx0Y29tbWVudDogOFxufTtcblxuT2JqZWN0LmtleXMoZG9tTHZsMSkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0dmFyIHNob3J0aGFuZCA9IGRvbUx2bDFba2V5XTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGVQcm90b3R5cGUsIGtleSwge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpc1tzaG9ydGhhbmRdIHx8IG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKHZhbCkge1xuXHRcdFx0dGhpc1tzaG9ydGhhbmRdID0gdmFsO1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cdH0pO1xufSk7XG4iLCJ2YXIgRG9tVXRpbHMgPSBtb2R1bGUuZXhwb3J0cztcblxuW1xuXHRyZXF1aXJlKFwiLi9saWIvc3RyaW5naWZ5XCIpLFxuXHRyZXF1aXJlKFwiLi9saWIvdHJhdmVyc2FsXCIpLFxuXHRyZXF1aXJlKFwiLi9saWIvbWFuaXB1bGF0aW9uXCIpLFxuXHRyZXF1aXJlKFwiLi9saWIvcXVlcnlpbmdcIiksXG5cdHJlcXVpcmUoXCIuL2xpYi9sZWdhY3lcIiksXG5cdHJlcXVpcmUoXCIuL2xpYi9oZWxwZXJzXCIpXG5dLmZvckVhY2goZnVuY3Rpb24oZXh0KXtcblx0T2JqZWN0LmtleXMoZXh0KS5mb3JFYWNoKGZ1bmN0aW9uKGtleSl7XG5cdFx0RG9tVXRpbHNba2V5XSA9IGV4dFtrZXldLmJpbmQoRG9tVXRpbHMpO1xuXHR9KTtcbn0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZW50aXRpZXNfanNvbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21hcHMvZW50aXRpZXMuanNvblwiKSk7XG52YXIgbGVnYWN5X2pzb25fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9tYXBzL2xlZ2FjeS5qc29uXCIpKTtcbnZhciB4bWxfanNvbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21hcHMveG1sLmpzb25cIikpO1xudmFyIGRlY29kZV9jb2RlcG9pbnRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9kZWNvZGVfY29kZXBvaW50XCIpKTtcbmV4cG9ydHMuZGVjb2RlWE1MID0gZ2V0U3RyaWN0RGVjb2Rlcih4bWxfanNvbl8xLmRlZmF1bHQpO1xuZXhwb3J0cy5kZWNvZGVIVE1MU3RyaWN0ID0gZ2V0U3RyaWN0RGVjb2RlcihlbnRpdGllc19qc29uXzEuZGVmYXVsdCk7XG5mdW5jdGlvbiBnZXRTdHJpY3REZWNvZGVyKG1hcCkge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMobWFwKS5qb2luKFwifFwiKTtcbiAgICB2YXIgcmVwbGFjZSA9IGdldFJlcGxhY2VyKG1hcCk7XG4gICAga2V5cyArPSBcInwjW3hYXVtcXFxcZGEtZkEtRl0rfCNcXFxcZCtcIjtcbiAgICB2YXIgcmUgPSBuZXcgUmVnRXhwKFwiJig/OlwiICsga2V5cyArIFwiKTtcIiwgXCJnXCIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBTdHJpbmcoc3RyKS5yZXBsYWNlKHJlLCByZXBsYWNlKTsgfTtcbn1cbnZhciBzb3J0ZXIgPSBmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gKGEgPCBiID8gMSA6IC0xKTsgfTtcbmV4cG9ydHMuZGVjb2RlSFRNTCA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxlZ2FjeSA9IE9iamVjdC5rZXlzKGxlZ2FjeV9qc29uXzEuZGVmYXVsdCkuc29ydChzb3J0ZXIpO1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZW50aXRpZXNfanNvbl8xLmRlZmF1bHQpLnNvcnQoc29ydGVyKTtcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChsZWdhY3lbal0gPT09IGtleXNbaV0pIHtcbiAgICAgICAgICAgIGtleXNbaV0gKz0gXCI7P1wiO1xuICAgICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAga2V5c1tpXSArPSBcIjtcIjtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgcmUgPSBuZXcgUmVnRXhwKFwiJig/OlwiICsga2V5cy5qb2luKFwifFwiKSArIFwifCNbeFhdW1xcXFxkYS1mQS1GXSs7P3wjXFxcXGQrOz8pXCIsIFwiZ1wiKTtcbiAgICB2YXIgcmVwbGFjZSA9IGdldFJlcGxhY2VyKGVudGl0aWVzX2pzb25fMS5kZWZhdWx0KTtcbiAgICBmdW5jdGlvbiByZXBsYWNlcihzdHIpIHtcbiAgICAgICAgaWYgKHN0ci5zdWJzdHIoLTEpICE9PSBcIjtcIilcbiAgICAgICAgICAgIHN0ciArPSBcIjtcIjtcbiAgICAgICAgcmV0dXJuIHJlcGxhY2Uoc3RyKTtcbiAgICB9XG4gICAgLy9UT0RPIGNvbnNpZGVyIGNyZWF0aW5nIGEgbWVyZ2VkIG1hcFxuICAgIHJldHVybiBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcoc3RyKS5yZXBsYWNlKHJlLCByZXBsYWNlcik7XG4gICAgfTtcbn0pKCk7XG5mdW5jdGlvbiBnZXRSZXBsYWNlcihtYXApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShzdHIpIHtcbiAgICAgICAgaWYgKHN0ci5jaGFyQXQoMSkgPT09IFwiI1wiKSB7XG4gICAgICAgICAgICBpZiAoc3RyLmNoYXJBdCgyKSA9PT0gXCJYXCIgfHwgc3RyLmNoYXJBdCgyKSA9PT0gXCJ4XCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVjb2RlX2NvZGVwb2ludF8xLmRlZmF1bHQocGFyc2VJbnQoc3RyLnN1YnN0cigzKSwgMTYpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkZWNvZGVfY29kZXBvaW50XzEuZGVmYXVsdChwYXJzZUludChzdHIuc3Vic3RyKDIpLCAxMCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXBbc3RyLnNsaWNlKDEsIC0xKV07XG4gICAgfTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHhtbF9qc29uXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbWFwcy94bWwuanNvblwiKSk7XG52YXIgaW52ZXJzZVhNTCA9IGdldEludmVyc2VPYmooeG1sX2pzb25fMS5kZWZhdWx0KTtcbnZhciB4bWxSZXBsYWNlciA9IGdldEludmVyc2VSZXBsYWNlcihpbnZlcnNlWE1MKTtcbmV4cG9ydHMuZW5jb2RlWE1MID0gZ2V0SW52ZXJzZShpbnZlcnNlWE1MLCB4bWxSZXBsYWNlcik7XG52YXIgZW50aXRpZXNfanNvbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21hcHMvZW50aXRpZXMuanNvblwiKSk7XG52YXIgaW52ZXJzZUhUTUwgPSBnZXRJbnZlcnNlT2JqKGVudGl0aWVzX2pzb25fMS5kZWZhdWx0KTtcbnZhciBodG1sUmVwbGFjZXIgPSBnZXRJbnZlcnNlUmVwbGFjZXIoaW52ZXJzZUhUTUwpO1xuZXhwb3J0cy5lbmNvZGVIVE1MID0gZ2V0SW52ZXJzZShpbnZlcnNlSFRNTCwgaHRtbFJlcGxhY2VyKTtcbmZ1bmN0aW9uIGdldEludmVyc2VPYmoob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iailcbiAgICAgICAgLnNvcnQoKVxuICAgICAgICAucmVkdWNlKGZ1bmN0aW9uIChpbnZlcnNlLCBuYW1lKSB7XG4gICAgICAgIGludmVyc2Vbb2JqW25hbWVdXSA9IFwiJlwiICsgbmFtZSArIFwiO1wiO1xuICAgICAgICByZXR1cm4gaW52ZXJzZTtcbiAgICB9LCB7fSk7XG59XG5mdW5jdGlvbiBnZXRJbnZlcnNlUmVwbGFjZXIoaW52ZXJzZSkge1xuICAgIHZhciBzaW5nbGUgPSBbXTtcbiAgICB2YXIgbXVsdGlwbGUgPSBbXTtcbiAgICBPYmplY3Qua2V5cyhpbnZlcnNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICAgIHJldHVybiBrLmxlbmd0aCA9PT0gMVxuICAgICAgICAgICAgPyAvLyBBZGQgdmFsdWUgdG8gc2luZ2xlIGFycmF5XG4gICAgICAgICAgICAgICAgc2luZ2xlLnB1c2goXCJcXFxcXCIgKyBrKVxuICAgICAgICAgICAgOiAvLyBBZGQgdmFsdWUgdG8gbXVsdGlwbGUgYXJyYXlcbiAgICAgICAgICAgICAgICBtdWx0aXBsZS5wdXNoKGspO1xuICAgIH0pO1xuICAgIC8vVE9ETyBhZGQgcmFuZ2VzXG4gICAgbXVsdGlwbGUudW5zaGlmdChcIltcIiArIHNpbmdsZS5qb2luKFwiXCIpICsgXCJdXCIpO1xuICAgIHJldHVybiBuZXcgUmVnRXhwKG11bHRpcGxlLmpvaW4oXCJ8XCIpLCBcImdcIik7XG59XG52YXIgcmVOb25BU0NJSSA9IC9bXlxcMC1cXHg3Rl0vZztcbnZhciByZUFzdHJhbFN5bWJvbHMgPSAvW1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXS9nO1xuZnVuY3Rpb24gc2luZ2xlQ2hhclJlcGxhY2VyKGMpIHtcbiAgICByZXR1cm4gXCImI3hcIiArIGNcbiAgICAgICAgLmNoYXJDb2RlQXQoMClcbiAgICAgICAgLnRvU3RyaW5nKDE2KVxuICAgICAgICAudG9VcHBlckNhc2UoKSArIFwiO1wiO1xufVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycywgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gYXN0cmFsUmVwbGFjZXIoYywgXykge1xuICAgIC8vIGh0dHA6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmcjc3Vycm9nYXRlLWZvcm11bGFlXG4gICAgdmFyIGhpZ2ggPSBjLmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIGxvdyA9IGMuY2hhckNvZGVBdCgxKTtcbiAgICB2YXIgY29kZVBvaW50ID0gKGhpZ2ggLSAweGQ4MDApICogMHg0MDAgKyBsb3cgLSAweGRjMDAgKyAweDEwMDAwO1xuICAgIHJldHVybiBcIiYjeFwiICsgY29kZVBvaW50LnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpICsgXCI7XCI7XG59XG5mdW5jdGlvbiBnZXRJbnZlcnNlKGludmVyc2UsIHJlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgICAgICAucmVwbGFjZShyZSwgZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIGludmVyc2VbbmFtZV07IH0pXG4gICAgICAgICAgICAucmVwbGFjZShyZUFzdHJhbFN5bWJvbHMsIGFzdHJhbFJlcGxhY2VyKVxuICAgICAgICAgICAgLnJlcGxhY2UocmVOb25BU0NJSSwgc2luZ2xlQ2hhclJlcGxhY2VyKTtcbiAgICB9O1xufVxudmFyIHJlWG1sQ2hhcnMgPSBnZXRJbnZlcnNlUmVwbGFjZXIoaW52ZXJzZVhNTCk7XG5mdW5jdGlvbiBlc2NhcGUoZGF0YSkge1xuICAgIHJldHVybiBkYXRhXG4gICAgICAgIC5yZXBsYWNlKHJlWG1sQ2hhcnMsIHNpbmdsZUNoYXJSZXBsYWNlcilcbiAgICAgICAgLnJlcGxhY2UocmVBc3RyYWxTeW1ib2xzLCBhc3RyYWxSZXBsYWNlcilcbiAgICAgICAgLnJlcGxhY2UocmVOb25BU0NJSSwgc2luZ2xlQ2hhclJlcGxhY2VyKTtcbn1cbmV4cG9ydHMuZXNjYXBlID0gZXNjYXBlO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBTdHJlYW07XG5cbnZhciBQYXJzZXIgPSByZXF1aXJlKFwiLi9QYXJzZXIuanNcIik7XG52YXIgV3JpdGFibGVTdHJlYW0gPSByZXF1aXJlKFwicmVhZGFibGUtc3RyZWFtXCIpLldyaXRhYmxlO1xudmFyIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKFwic3RyaW5nX2RlY29kZXJcIikuU3RyaW5nRGVjb2RlcjtcbnZhciBCdWZmZXIgPSByZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcjtcblxuZnVuY3Rpb24gU3RyZWFtKGNicywgb3B0aW9ucykge1xuICAgIHZhciBwYXJzZXIgPSAodGhpcy5fcGFyc2VyID0gbmV3IFBhcnNlcihjYnMsIG9wdGlvbnMpKTtcbiAgICB2YXIgZGVjb2RlciA9ICh0aGlzLl9kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoKSk7XG5cbiAgICBXcml0YWJsZVN0cmVhbS5jYWxsKHRoaXMsIHsgZGVjb2RlU3RyaW5nczogZmFsc2UgfSk7XG5cbiAgICB0aGlzLm9uY2UoXCJmaW5pc2hcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHBhcnNlci5lbmQoZGVjb2Rlci5lbmQoKSk7XG4gICAgfSk7XG59XG5cbnJlcXVpcmUoXCJpbmhlcml0c1wiKShTdHJlYW0sIFdyaXRhYmxlU3RyZWFtKTtcblxuU3RyZWFtLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbihjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gICAgaWYgKGNodW5rIGluc3RhbmNlb2YgQnVmZmVyKSBjaHVuayA9IHRoaXMuX2RlY29kZXIud3JpdGUoY2h1bmspO1xuICAgIHRoaXMuX3BhcnNlci53cml0ZShjaHVuayk7XG4gICAgY2IoKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGdlbmVyYXRlUHJvcHNGcm9tQXR0cmlidXRlcztcblxudmFyIF9odG1sQXR0cmlidXRlc1RvUmVhY3QgPSByZXF1aXJlKCcuL2h0bWxBdHRyaWJ1dGVzVG9SZWFjdCcpO1xuXG52YXIgX2h0bWxBdHRyaWJ1dGVzVG9SZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9odG1sQXR0cmlidXRlc1RvUmVhY3QpO1xuXG52YXIgX2lubGluZVN0eWxlVG9PYmplY3QgPSByZXF1aXJlKCcuL2lubGluZVN0eWxlVG9PYmplY3QnKTtcblxudmFyIF9pbmxpbmVTdHlsZVRvT2JqZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lubGluZVN0eWxlVG9PYmplY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEdlbmVyYXRlcyBwcm9wcyBmb3IgYSBSZWFjdCBlbGVtZW50IGZyb20gYW4gb2JqZWN0IG9mIEhUTUwgYXR0cmlidXRlc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhdHRyaWJ1dGVzIFRoZSBIVE1MIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgVGhlIGtleSB0byBnaXZlIHRoZSByZWFjdCBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlUHJvcHNGcm9tQXR0cmlidXRlcyhhdHRyaWJ1dGVzLCBrZXkpIHtcblxuICAvLyBnZW5lcmF0ZSBwcm9wc1xuICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgKDAsIF9odG1sQXR0cmlidXRlc1RvUmVhY3QyLmRlZmF1bHQpKGF0dHJpYnV0ZXMpLCB7IGtleToga2V5IH0pO1xuXG4gIC8vIGlmIHRoZXJlIGlzIGFuIGlubGluZS9zdHJpbmcgc3R5bGUgcHJvcCB0aGVuIGNvbnZlcnQgaXQgdG8gYSBSZWFjdCBzdHlsZSBvYmplY3RcbiAgLy8gb3RoZXJ3aXNlLCBpdCBpcyBpbnZhbGlkIGFuZCBvbWl0dGVkXG4gIGlmICh0eXBlb2YgcHJvcHMuc3R5bGUgPT09ICdzdHJpbmcnIHx8IHByb3BzLnN0eWxlIGluc3RhbmNlb2YgU3RyaW5nKSB7XG4gICAgcHJvcHMuc3R5bGUgPSAoMCwgX2lubGluZVN0eWxlVG9PYmplY3QyLmRlZmF1bHQpKHByb3BzLnN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICBkZWxldGUgcHJvcHMuc3R5bGU7XG4gIH1cblxuICByZXR1cm4gcHJvcHM7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1ZhbGlkVGFnT3JBdHRyaWJ1dGVOYW1lO1xudmFyIFZBTElEX1RBR19SRUdFWCA9IC9eW2EtekEtWl1bYS16QS1aOl9cXC5cXC1cXGRdKiQvO1xuXG52YXIgbmFtZUNhY2hlID0ge307XG5cbmZ1bmN0aW9uIGlzVmFsaWRUYWdPckF0dHJpYnV0ZU5hbWUodGFnTmFtZSkge1xuICBpZiAoIW5hbWVDYWNoZS5oYXNPd25Qcm9wZXJ0eSh0YWdOYW1lKSkge1xuICAgIG5hbWVDYWNoZVt0YWdOYW1lXSA9IFZBTElEX1RBR19SRUdFWC50ZXN0KHRhZ05hbWUpO1xuICB9XG4gIHJldHVybiBuYW1lQ2FjaGVbdGFnTmFtZV07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsKHJvb3QpIHtcblx0dmFyIHJlc3VsdDtcblx0dmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0aWYgKFN5bWJvbC5vYnNlcnZhYmxlKSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2wub2JzZXJ2YWJsZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG5cdFx0XHRTeW1ib2wub2JzZXJ2YWJsZSA9IHJlc3VsdDtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmVzdWx0ID0gJ0BAb2JzZXJ2YWJsZSc7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIEBmbG93XG4ndXNlIHN0cmljdCc7XG5cbnZhciBrZXkgPSAnX19nbG9iYWxfdW5pcXVlX2lkX18nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ2xvYmFsW2tleV0gPSAoZ2xvYmFsW2tleV0gfHwgMCkgKyAxO1xufTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciB1cmwgPSByZXF1aXJlKCcuL3VybCcpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ3NvY2tldC5pby1wYXJzZXInKTtcbnZhciBNYW5hZ2VyID0gcmVxdWlyZSgnLi9tYW5hZ2VyJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tY2xpZW50Jyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gbG9va3VwO1xuXG4vKipcbiAqIE1hbmFnZXJzIGNhY2hlLlxuICovXG5cbnZhciBjYWNoZSA9IGV4cG9ydHMubWFuYWdlcnMgPSB7fTtcblxuLyoqXG4gKiBMb29rcyB1cCBhbiBleGlzdGluZyBgTWFuYWdlcmAgZm9yIG11bHRpcGxleGluZy5cbiAqIElmIHRoZSB1c2VyIHN1bW1vbnM6XG4gKlxuICogICBgaW8oJ2h0dHA6Ly9sb2NhbGhvc3QvYScpO2BcbiAqICAgYGlvKCdodHRwOi8vbG9jYWxob3N0L2InKTtgXG4gKlxuICogV2UgcmV1c2UgdGhlIGV4aXN0aW5nIGluc3RhbmNlIGJhc2VkIG9uIHNhbWUgc2NoZW1lL3BvcnQvaG9zdCxcbiAqIGFuZCB3ZSBpbml0aWFsaXplIHNvY2tldHMgZm9yIGVhY2ggbmFtZXNwYWNlLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9va3VwICh1cmksIG9wdHMpIHtcbiAgaWYgKHR5cGVvZiB1cmkgPT09ICdvYmplY3QnKSB7XG4gICAgb3B0cyA9IHVyaTtcbiAgICB1cmkgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBvcHRzID0gb3B0cyB8fCB7fTtcblxuICB2YXIgcGFyc2VkID0gdXJsKHVyaSk7XG4gIHZhciBzb3VyY2UgPSBwYXJzZWQuc291cmNlO1xuICB2YXIgaWQgPSBwYXJzZWQuaWQ7XG4gIHZhciBwYXRoID0gcGFyc2VkLnBhdGg7XG4gIHZhciBzYW1lTmFtZXNwYWNlID0gY2FjaGVbaWRdICYmIHBhdGggaW4gY2FjaGVbaWRdLm5zcHM7XG4gIHZhciBuZXdDb25uZWN0aW9uID0gb3B0cy5mb3JjZU5ldyB8fCBvcHRzWydmb3JjZSBuZXcgY29ubmVjdGlvbiddIHx8XG4gICAgICAgICAgICAgICAgICAgICAgZmFsc2UgPT09IG9wdHMubXVsdGlwbGV4IHx8IHNhbWVOYW1lc3BhY2U7XG5cbiAgdmFyIGlvO1xuXG4gIGlmIChuZXdDb25uZWN0aW9uKSB7XG4gICAgZGVidWcoJ2lnbm9yaW5nIHNvY2tldCBjYWNoZSBmb3IgJXMnLCBzb3VyY2UpO1xuICAgIGlvID0gTWFuYWdlcihzb3VyY2UsIG9wdHMpO1xuICB9IGVsc2Uge1xuICAgIGlmICghY2FjaGVbaWRdKSB7XG4gICAgICBkZWJ1ZygnbmV3IGlvIGluc3RhbmNlIGZvciAlcycsIHNvdXJjZSk7XG4gICAgICBjYWNoZVtpZF0gPSBNYW5hZ2VyKHNvdXJjZSwgb3B0cyk7XG4gICAgfVxuICAgIGlvID0gY2FjaGVbaWRdO1xuICB9XG4gIGlmIChwYXJzZWQucXVlcnkgJiYgIW9wdHMucXVlcnkpIHtcbiAgICBvcHRzLnF1ZXJ5ID0gcGFyc2VkLnF1ZXJ5O1xuICB9XG4gIHJldHVybiBpby5zb2NrZXQocGFyc2VkLnBhdGgsIG9wdHMpO1xufVxuXG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnByb3RvY29sID0gcGFyc2VyLnByb3RvY29sO1xuXG4vKipcbiAqIGBjb25uZWN0YC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJpXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuY29ubmVjdCA9IGxvb2t1cDtcblxuLyoqXG4gKiBFeHBvc2UgY29uc3RydWN0b3JzIGZvciBzdGFuZGFsb25lIGJ1aWxkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5NYW5hZ2VyID0gcmVxdWlyZSgnLi9tYW5hZ2VyJyk7XG5leHBvcnRzLlNvY2tldCA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGNvbXBvc2UgPSByZXF1aXJlKCdyZWR1eCcpLmNvbXBvc2U7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmNvbXBvc2VXaXRoRGV2VG9vbHMgPSAoXG4gIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18gP1xuICAgIHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18gOlxuICAgIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gJ29iamVjdCcpIHJldHVybiBjb21wb3NlO1xuICAgICAgcmV0dXJuIGNvbXBvc2UuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XG4pO1xuXG5leHBvcnRzLmRldlRvb2xzRW5oYW5jZXIgPSAoXG4gIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fID9cbiAgICB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyA6XG4gICAgZnVuY3Rpb24oKSB7IHJldHVybiBmdW5jdGlvbihub29wKSB7IHJldHVybiBub29wOyB9IH1cbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmh0bWxwYXJzZXIyID0gZXhwb3J0cy5jb252ZXJ0Tm9kZVRvRWxlbWVudCA9IGV4cG9ydHMucHJvY2Vzc05vZGVzID0gdW5kZWZpbmVkO1xuXG52YXIgX3Byb2Nlc3NOb2RlcyA9IHJlcXVpcmUoJy4vcHJvY2Vzc05vZGVzJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAncHJvY2Vzc05vZGVzJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvY2Vzc05vZGVzKS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9jb252ZXJ0Tm9kZVRvRWxlbWVudCA9IHJlcXVpcmUoJy4vY29udmVydE5vZGVUb0VsZW1lbnQnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdjb252ZXJ0Tm9kZVRvRWxlbWVudCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbnZlcnROb2RlVG9FbGVtZW50KS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9odG1scGFyc2VyID0gcmVxdWlyZSgnaHRtbHBhcnNlcjInKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdodG1scGFyc2VyMicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2h0bWxwYXJzZXIpLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0h0bWxQYXJzZXIgPSByZXF1aXJlKCcuL0h0bWxQYXJzZXInKTtcblxudmFyIF9IdG1sUGFyc2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0h0bWxQYXJzZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfSHRtbFBhcnNlcjIuZGVmYXVsdDsiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEyLjBcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBoPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixwPW4/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0PW4/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHU9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsdj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx3PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAseD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMix5PW4/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzO24mJlN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpO1xudmFyIHo9bj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxhYT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2O24mJlN5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTtuJiZTeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpO24mJlN5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTt2YXIgQT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiBCKGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifXZhciBDPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxEPXt9O1xuZnVuY3Rpb24gRShhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1jfHxDfUUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307RS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKEIoODUpKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1jfHxDfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO2goSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST17Y3VycmVudDpudWxsfSxKPXtjdXJyZW50Om51bGx9LEs9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixjKXt2YXIgZSxkPXt9LGc9bnVsbCxsPW51bGw7aWYobnVsbCE9Yilmb3IoZSBpbiB2b2lkIDAhPT1iLnJlZiYmKGw9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUsuY2FsbChiLGUpJiYhTC5oYXNPd25Qcm9wZXJ0eShlKSYmKGRbZV09YltlXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49YztlbHNlIGlmKDE8Zil7Zm9yKHZhciBrPUFycmF5KGYpLG09MDttPGY7bSsrKWtbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1rfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihlIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1kW2VdJiYoZFtlXT1mW2VdKTtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEsa2V5OmcscmVmOmwscHJvcHM6ZCxfb3duZXI6Si5jdXJyZW50fX1cbmZ1bmN0aW9uIGJhKGEsYil7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBOKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1wfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE89L1xcLysvZyxQPVtdO2Z1bmN0aW9uIFEoYSxiLGMsZSl7aWYoUC5sZW5ndGgpe3ZhciBkPVAucG9wKCk7ZC5yZXN1bHQ9YTtkLmtleVByZWZpeD1iO2QuZnVuYz1jO2QuY29udGV4dD1lO2QuY291bnQ9MDtyZXR1cm4gZH1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzpjLGNvbnRleHQ6ZSxjb3VudDowfX1cbmZ1bmN0aW9uIFIoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5QLmxlbmd0aCYmUC5wdXNoKGEpfVxuZnVuY3Rpb24gUyhhLGIsYyxlKXt2YXIgZD10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZHx8XCJib29sZWFuXCI9PT1kKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgcDpjYXNlIHE6Zz0hMH19aWYoZylyZXR1cm4gYyhlLGEsXCJcIj09PWI/XCIuXCIrVChhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgbD0wO2w8YS5sZW5ndGg7bCsrKXtkPWFbbF07dmFyIGY9YitUKGQsbCk7Zys9UyhkLGYsYyxlKX1lbHNlIGlmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGE/Zj1udWxsOihmPUEmJmFbQV18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksbD1cbjA7IShkPWEubmV4dCgpKS5kb25lOylkPWQudmFsdWUsZj1iK1QoZCxsKyspLGcrPVMoZCxmLGMsZSk7ZWxzZSBpZihcIm9iamVjdFwiPT09ZCl0aHJvdyBjPVwiXCIrYSxFcnJvcihCKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1jP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmMsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFUoYSxiLGMpe3JldHVybiBudWxsPT1hPzA6UyhhLFwiXCIsYixjKX1mdW5jdGlvbiBUKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBjYShhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBkYShhLGIsYyl7dmFyIGU9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9WKGEsZSxjLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk6bnVsbCE9YSYmKE4oYSkmJihhPWJhKGEsZCsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoTyxcIiQmL1wiKStcIi9cIikrYykpLGUucHVzaChhKSl9ZnVuY3Rpb24gVihhLGIsYyxlLGQpe3ZhciBnPVwiXCI7bnVsbCE9YyYmKGc9KFwiXCIrYykucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKTtiPVEoYixnLGUsZCk7VShhLGRhLGIpO1IoYil9ZnVuY3Rpb24gVygpe3ZhciBhPUkuY3VycmVudDtpZihudWxsPT09YSl0aHJvdyBFcnJvcihCKDMyMSkpO3JldHVybiBhfVxudmFyIFg9e0NoaWxkcmVuOnttYXA6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W107VihhLGUsbnVsbCxiLGMpO3JldHVybiBlfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO2I9UShudWxsLG51bGwsYixjKTtVKGEsY2EsYik7UihiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFUoYSxmdW5jdGlvbigpe3JldHVybiBudWxsfSxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtWKGEsYixudWxsLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU4oYSkpdGhyb3cgRXJyb3IoQigxNDMpKTtyZXR1cm4gYX19LGNyZWF0ZVJlZjpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fSxDb21wb25lbnQ6RSxQdXJlQ29tcG9uZW50OkcsY3JlYXRlQ29udGV4dDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOncsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsXG5fY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnYsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX0sZm9yd2FyZFJlZjpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eCxyZW5kZXI6YX19LGxhenk6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOmFhLF9jdG9yOmEsX3N0YXR1czotMSxfcmVzdWx0Om51bGx9fSxtZW1vOmZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnosdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fSx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlQ2FsbGJhY2soYSxiKX0sdXNlQ29udGV4dDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlQ29udGV4dChhLGIpfSx1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUVmZmVjdChhLGIpfSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsXG5iLGMpe3JldHVybiBXKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsYyl9LHVzZURlYnVnVmFsdWU6ZnVuY3Rpb24oKXt9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZU1lbW8oYSxiKX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIFcoKS51c2VSZWR1Y2VyKGEsYixjKX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3JldHVybiBXKCkudXNlUmVmKGEpfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXtyZXR1cm4gVygpLnVzZVN0YXRlKGEpfSxGcmFnbWVudDpyLFByb2ZpbGVyOnUsU3RyaWN0TW9kZTp0LFN1c3BlbnNlOnksY3JlYXRlRWxlbWVudDpNLGNsb25lRWxlbWVudDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoQigyNjcsYSkpO3ZhciBlPWgoe30sYS5wcm9wcyksZD1hLmtleSxnPWEucmVmLGw9YS5fb3duZXI7XG5pZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGc9Yi5yZWYsbD1KLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZD1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGY9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoayBpbiBiKUsuY2FsbChiLGspJiYhTC5oYXNPd25Qcm9wZXJ0eShrKSYmKGVba109dm9pZCAwPT09YltrXSYmdm9pZCAwIT09Zj9mW2tdOmJba10pfXZhciBrPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ayllLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGspe2Y9QXJyYXkoayk7Zm9yKHZhciBtPTA7bTxrO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49Zn1yZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6ZCxyZWY6Zyxwcm9wczplLF9vd25lcjpsfX0sY3JlYXRlRmFjdG9yeTpmdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn0saXNWYWxpZEVsZW1lbnQ6Tix2ZXJzaW9uOlwiMTYuMTIuMFwiLFxuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6SSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7c3VzcGVuc2U6bnVsbH0sUmVhY3RDdXJyZW50T3duZXI6SixJc1NvbWVSZW5kZXJlckFjdGluZzp7Y3VycmVudDohMX0sYXNzaWduOmh9fSxZPXtkZWZhdWx0Olh9LFo9WSYmWHx8WTttb2R1bGUuZXhwb3J0cz1aLmRlZmF1bHR8fFo7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEyLjBcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbj1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxxPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gdShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IodSgyMjcpKTt2YXIgYmE9bnVsbCxjYT17fTtcbmZ1bmN0aW9uIGRhKCl7aWYoYmEpZm9yKHZhciBhIGluIGNhKXt2YXIgYj1jYVthXSxjPWJhLmluZGV4T2YoYSk7aWYoISgtMTxjKSl0aHJvdyBFcnJvcih1KDk2LGEpKTtpZighZWFbY10pe2lmKCFiLmV4dHJhY3RFdmVudHMpdGhyb3cgRXJyb3IodSg5NyxhKSk7ZWFbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0sZz1iLGg9ZDtpZihmYS5oYXNPd25Qcm9wZXJ0eShoKSl0aHJvdyBFcnJvcih1KDk5LGgpKTtmYVtoXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZoYShrW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8oaGEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtpZighZSl0aHJvdyBFcnJvcih1KDk4LGQsYSkpO319fX1cbmZ1bmN0aW9uIGhhKGEsYixjKXtpZihpYVthXSl0aHJvdyBFcnJvcih1KDEwMCxhKSk7aWFbYV09YjtqYVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBlYT1bXSxmYT17fSxpYT17fSxqYT17fTtmdW5jdGlvbiBrYShhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgbGE9ITEsbWE9bnVsbCxuYT0hMSxvYT1udWxsLHBhPXtvbkVycm9yOmZ1bmN0aW9uKGEpe2xhPSEwO21hPWF9fTtmdW5jdGlvbiBxYShhLGIsYyxkLGUsZixnLGgsayl7bGE9ITE7bWE9bnVsbDtrYS5hcHBseShwYSxhcmd1bWVudHMpfVxuZnVuY3Rpb24gcmEoYSxiLGMsZCxlLGYsZyxoLGspe3FhLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihsYSl7aWYobGEpe3ZhciBsPW1hO2xhPSExO21hPW51bGx9ZWxzZSB0aHJvdyBFcnJvcih1KDE5OCkpO25hfHwobmE9ITAsb2E9bCl9fXZhciBzYT1udWxsLHVhPW51bGwsdmE9bnVsbDtmdW5jdGlvbiB3YShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9dmEoYyk7cmEoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1mdW5jdGlvbiB4YShhLGIpe2lmKG51bGw9PWIpdGhyb3cgRXJyb3IodSgzMCkpO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1cbmZ1bmN0aW9uIHlhKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciB6YT1udWxsO2Z1bmN0aW9uIEFhKGEpe2lmKGEpe3ZhciBiPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGM9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2QrKyl3YShhLGJbZF0sY1tkXSk7ZWxzZSBiJiZ3YShhLGIsYyk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gQmEoYSl7bnVsbCE9PWEmJih6YT14YSh6YSxhKSk7YT16YTt6YT1udWxsO2lmKGEpe3lhKGEsQWEpO2lmKHphKXRocm93IEVycm9yKHUoOTUpKTtpZihuYSl0aHJvdyBhPW9hLG5hPSExLG9hPW51bGwsYTt9fVxudmFyIENhPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOmZ1bmN0aW9uKGEpe2lmKGJhKXRocm93IEVycm9yKHUoMTAxKSk7YmE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7ZGEoKX0saW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOmZ1bmN0aW9uKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO2lmKCFjYS5oYXNPd25Qcm9wZXJ0eShjKXx8Y2FbY10hPT1kKXtpZihjYVtjXSl0aHJvdyBFcnJvcih1KDEwMixjKSk7Y2FbY109ZDtiPSEwfX1iJiZkYSgpfX07XG5mdW5jdGlvbiBEYShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPXNhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IEVycm9yKHUoMjMxLGIsdHlwZW9mIGMpKTtcbnJldHVybiBjfXZhciBFYT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtFYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudERpc3BhdGNoZXJcIil8fChFYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyPXtjdXJyZW50Om51bGx9KTtFYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnXCIpfHwoRWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc9e3N1c3BlbnNlOm51bGx9KTtcbnZhciBGYT0vXiguKilbXFxcXFxcL10vLHc9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixHYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLEhhPXc/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixJYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxKYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxLYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxMYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxNYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLE5hPXc/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxPYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixQYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxRYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOlxuNjAxMjAsUmE9dz9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxTYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2O3cmJlN5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTt3JiZTeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpO3cmJlN5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTt2YXIgVGE9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIFVhKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1UYSYmYVtUYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbmZ1bmN0aW9uIFZhKGEpe2lmKC0xPT09YS5fc3RhdHVzKXthLl9zdGF0dXM9MDt2YXIgYj1hLl9jdG9yO2I9YigpO2EuX3Jlc3VsdD1iO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSl9fVxuZnVuY3Rpb24gV2EoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSBJYTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSBIYTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgS2E6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgSmE6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBQYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBRYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBNYTpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlIExhOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgT2E6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7cmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcblwiRm9yd2FyZFJlZlwiKTtjYXNlIFJhOnJldHVybiBXYShhLnR5cGUpO2Nhc2UgU2E6aWYoYT0xPT09YS5fc3RhdHVzP2EuX3Jlc3VsdDpudWxsKXJldHVybiBXYShhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBYYShhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDM6Y2FzZSA0OmNhc2UgNjpjYXNlIDc6Y2FzZSAxMDpjYXNlIDk6dmFyIGM9XCJcIjticmVhayBhO2RlZmF1bHQ6dmFyIGQ9YS5fZGVidWdPd25lcixlPWEuX2RlYnVnU291cmNlLGY9V2EoYS50eXBlKTtjPW51bGw7ZCYmKGM9V2EoZC50eXBlKSk7ZD1mO2Y9XCJcIjtlP2Y9XCIgKGF0IFwiK2UuZmlsZU5hbWUucmVwbGFjZShGYSxcIlwiKStcIjpcIitlLmxpbmVOdW1iZXIrXCIpXCI6YyYmKGY9XCIgKGNyZWF0ZWQgYnkgXCIrYytcIilcIik7Yz1cIlxcbiAgICBpbiBcIisoZHx8XCJVbmtub3duXCIpK2Z9Yis9YzthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxudmFyIFlhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSxaYT1udWxsLCRhPW51bGwsYWI9bnVsbDtmdW5jdGlvbiBiYihhKXtpZihhPXVhKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgWmEpdGhyb3cgRXJyb3IodSgyODApKTt2YXIgYj1zYShhLnN0YXRlTm9kZSk7WmEoYS5zdGF0ZU5vZGUsYS50eXBlLGIpfX1mdW5jdGlvbiBjYihhKXskYT9hYj9hYi5wdXNoKGEpOmFiPVthXTokYT1hfWZ1bmN0aW9uIGRiKCl7aWYoJGEpe3ZhciBhPSRhLGI9YWI7YWI9JGE9bnVsbDtiYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspYmIoYlthXSl9fWZ1bmN0aW9uIGViKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gZmIoYSxiLGMsZCl7cmV0dXJuIGEoYixjLGQpfWZ1bmN0aW9uIGdiKCl7fVxudmFyIGhiPWViLGliPSExLGpiPSExO2Z1bmN0aW9uIGtiKCl7aWYobnVsbCE9PSRhfHxudWxsIT09YWIpZ2IoKSxkYigpfW5ldyBNYXA7dmFyIGxiPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxtYj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LG5iPXt9LG9iPXt9O1xuZnVuY3Rpb24gcGIoYSl7aWYobWIuY2FsbChvYixhKSlyZXR1cm4hMDtpZihtYi5jYWxsKG5iLGEpKXJldHVybiExO2lmKGxiLnRlc3QoYSkpcmV0dXJuIG9iW2FdPSEwO25iW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHFiKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcmIoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8cWIoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBCKGEsYixjLGQsZSxmKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zn12YXIgRD17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDAsITEsYSxudWxsLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtEW2JdPW5ldyBCKGIsMSwhMSxhWzFdLG51bGwsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDIsITEsYSxudWxsLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITAsYSxudWxsLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDQsITEsYSxudWxsLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNiwhMSxhLG51bGwsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTt2YXIgc2I9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiB0YihhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShzYixcbnRiKTtEW2JdPW5ldyBCKGIsMSwhMSxhLG51bGwsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uoc2IsdGIpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uoc2IsdGIpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbkQueGxpbmtIcmVmPW5ldyBCKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCl9KTtmdW5jdGlvbiB1YihhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiB2YihhLGIsYyxkKXt2YXIgZT1ELmhhc093blByb3BlcnR5KGIpP0RbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChyYihiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/cGIoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbmZ1bmN0aW9uIHdiKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiB4YihhKXt2YXIgYj13YihhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24geWIoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPXhiKGEpKX1mdW5jdGlvbiB6YihhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9d2IoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBBYihhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbih7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9XG5mdW5jdGlvbiBCYihhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz11YihudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIENiKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmdmIoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIEViKGEsYil7Q2IoYSxiKTt2YXIgYz11YihiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9GYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZGYihhLGIudHlwZSx1YihiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIEdiKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIEZiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1mdW5jdGlvbiBIYihhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBJYihhLGIpe2E9bih7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPUhiKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIit1YihjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gS2IoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHUoOTEpKTtyZXR1cm4gbih7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBMYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmRlZmF1bHRWYWx1ZTtiPWIuY2hpbGRyZW47aWYobnVsbCE9Yil7aWYobnVsbCE9Yyl0aHJvdyBFcnJvcih1KDkyKSk7aWYoQXJyYXkuaXNBcnJheShiKSl7aWYoISgxPj1iLmxlbmd0aCkpdGhyb3cgRXJyb3IodSg5MykpO2I9YlswXX1jPWJ9bnVsbD09YyYmKGM9XCJcIil9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6dWIoYyl9fVxuZnVuY3Rpb24gTWIoYSxiKXt2YXIgYz11YihiLnZhbHVlKSxkPXViKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gTmIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX12YXIgT2I9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gUGIoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBRYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/UGIoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgUmIsU2I9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09T2Iuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7UmI9UmJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7UmIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9UmIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gVGIoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1mdW5jdGlvbiBVYihhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBWYj17YW5pbWF0aW9uZW5kOlViKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlViKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6VWIoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6VWIoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxXYj17fSxYYj17fTtcbllhJiYoWGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgVmIuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgVmIuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgVmIuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgVmIudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBZYihhKXtpZihXYlthXSlyZXR1cm4gV2JbYV07aWYoIVZiW2FdKXJldHVybiBhO3ZhciBiPVZiW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFhiKXJldHVybiBXYlthXT1iW2NdO3JldHVybiBhfXZhciBaYj1ZYihcImFuaW1hdGlvbmVuZFwiKSwkYj1ZYihcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxhYz1ZYihcImFuaW1hdGlvbnN0YXJ0XCIpLGJjPVliKFwidHJhbnNpdGlvbmVuZFwiKSxjYz1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBlYyhhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZWZmZWN0VGFnJjEwMjYpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiBmYyhhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIGdjKGEpe2lmKGVjKGEpIT09YSl0aHJvdyBFcnJvcih1KDE4OCkpO31cbmZ1bmN0aW9uIGhjKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPWVjKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHUoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIGdjKGUpLGE7aWYoZj09PWQpcmV0dXJuIGdjKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IodSgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcih1KDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHUoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcih1KDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gaWMoYSl7YT1oYyhhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbnZhciBqYyxrYyxsYyxtYz0hMSxuYz1bXSxvYz1udWxsLHBjPW51bGwscWM9bnVsbCxyYz1uZXcgTWFwLHNjPW5ldyBNYXAsdGM9W10sdWM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjbG9zZSBjYW5jZWwgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKSx2Yz1cImZvY3VzIGJsdXIgZHJhZ2VudGVyIGRyYWdsZWF2ZSBtb3VzZW92ZXIgbW91c2VvdXQgcG9pbnRlcm92ZXIgcG9pbnRlcm91dCBnb3Rwb2ludGVyY2FwdHVyZSBsb3N0cG9pbnRlcmNhcHR1cmVcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiB3YyhhKXt2YXIgYj14YyhhKTt1Yy5mb3JFYWNoKGZ1bmN0aW9uKGMpe3ljKGMsYSxiKX0pO3ZjLmZvckVhY2goZnVuY3Rpb24oYyl7eWMoYyxhLGIpfSl9ZnVuY3Rpb24gemMoYSxiLGMsZCl7cmV0dXJue2Jsb2NrZWRPbjphLHRvcExldmVsVHlwZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wzMixuYXRpdmVFdmVudDpkfX1mdW5jdGlvbiBBYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOm9jPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpwYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpxYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6cmMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6c2MuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiBCYyhhLGIsYyxkLGUpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZSlyZXR1cm4gYT16YyhiLGMsZCxlKSxudWxsIT09YiYmKGI9Q2MoYiksbnVsbCE9PWImJmtjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtyZXR1cm4gYX1mdW5jdGlvbiBEYyhhLGIsYyxkKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzXCI6cmV0dXJuIG9jPUJjKG9jLGEsYixjLGQpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gcGM9QmMocGMsYSxiLGMsZCksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBxYz1CYyhxYyxhLGIsYyxkKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZT1kLnBvaW50ZXJJZDtyYy5zZXQoZSxCYyhyYy5nZXQoZSl8fG51bGwsYSxiLGMsZCkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBlPWQucG9pbnRlcklkLHNjLnNldChlLEJjKHNjLmdldChlKXx8bnVsbCxhLGIsYyxkKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiBFYyhhKXt2YXIgYj1GYyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPWVjKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPWZjKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO3EudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KGEucHJpb3JpdHksZnVuY3Rpb24oKXtsYyhjKX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9ZnVuY3Rpb24gR2MoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO3ZhciBiPUhjKGEudG9wTGV2ZWxUeXBlLGEuZXZlbnRTeXN0ZW1GbGFncyxhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09Yil7dmFyIGM9Q2MoYik7bnVsbCE9PWMmJmtjKGMpO2EuYmxvY2tlZE9uPWI7cmV0dXJuITF9cmV0dXJuITB9XG5mdW5jdGlvbiBJYyhhLGIsYyl7R2MoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uIEpjKCl7Zm9yKG1jPSExOzA8bmMubGVuZ3RoOyl7dmFyIGE9bmNbMF07aWYobnVsbCE9PWEuYmxvY2tlZE9uKXthPUNjKGEuYmxvY2tlZE9uKTtudWxsIT09YSYmamMoYSk7YnJlYWt9dmFyIGI9SGMoYS50b3BMZXZlbFR5cGUsYS5ldmVudFN5c3RlbUZsYWdzLGEubmF0aXZlRXZlbnQpO251bGwhPT1iP2EuYmxvY2tlZE9uPWI6bmMuc2hpZnQoKX1udWxsIT09b2MmJkdjKG9jKSYmKG9jPW51bGwpO251bGwhPT1wYyYmR2MocGMpJiYocGM9bnVsbCk7bnVsbCE9PXFjJiZHYyhxYykmJihxYz1udWxsKTtyYy5mb3JFYWNoKEljKTtzYy5mb3JFYWNoKEljKX1mdW5jdGlvbiBLYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsbWN8fChtYz0hMCxxLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2socS51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxKYykpKX1cbmZ1bmN0aW9uIExjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIEtjKGIsYSl9aWYoMDxuYy5sZW5ndGgpe0tjKG5jWzBdLGEpO2Zvcih2YXIgYz0xO2M8bmMubGVuZ3RoO2MrKyl7dmFyIGQ9bmNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1vYyYmS2Mob2MsYSk7bnVsbCE9PXBjJiZLYyhwYyxhKTtudWxsIT09cWMmJktjKHFjLGEpO3JjLmZvckVhY2goYik7c2MuZm9yRWFjaChiKTtmb3IoYz0wO2M8dGMubGVuZ3RoO2MrKylkPXRjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDx0Yy5sZW5ndGgmJihjPXRjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KUVjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmdGMuc2hpZnQoKX1cbmZ1bmN0aW9uIE1jKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1mdW5jdGlvbiBOYyhhKXtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfWZ1bmN0aW9uIE9jKGEsYixjKXtpZihiPURhKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9eGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9eGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9XG5mdW5jdGlvbiBQYyhhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXtmb3IodmFyIGI9YS5fdGFyZ2V0SW5zdCxjPVtdO2I7KWMucHVzaChiKSxiPU5jKGIpO2ZvcihiPWMubGVuZ3RoOzA8Yi0tOylPYyhjW2JdLFwiY2FwdHVyZWRcIixhKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKU9jKGNbYl0sXCJidWJibGVkXCIsYSl9fWZ1bmN0aW9uIFFjKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPURhKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz14YShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz14YShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gUmMoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZRYyhhLl90YXJnZXRJbnN0LG51bGwsYSl9XG5mdW5jdGlvbiBTYyhhKXt5YShhLFBjKX1mdW5jdGlvbiBUYygpe3JldHVybiEwfWZ1bmN0aW9uIFVjKCl7cmV0dXJuITF9ZnVuY3Rpb24gRShhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/VGM6VWM7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1VYztyZXR1cm4gdGhpc31cbm4oRS5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1UYyl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1UYyl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1UY30saXNQZXJzaXN0ZW50OlVjLGRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxcbmI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7dGhpcy5uYXRpdmVFdmVudD10aGlzLl90YXJnZXRJbnN0PXRoaXMuZGlzcGF0Y2hDb25maWc9bnVsbDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXRoaXMuaXNEZWZhdWx0UHJldmVudGVkPVVjO3RoaXMuX2Rpc3BhdGNoSW5zdGFuY2VzPXRoaXMuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGx9fSk7RS5JbnRlcmZhY2U9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG5FLmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtuKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1uKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO1ZjKGMpO3JldHVybiBjfTtWYyhFKTtmdW5jdGlvbiBXYyhhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1cbmZ1bmN0aW9uIFhjKGEpe2lmKCEoYSBpbnN0YW5jZW9mIHRoaXMpKXRocm93IEVycm9yKHUoMjc5KSk7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfWZ1bmN0aW9uIFZjKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPVdjO2EucmVsZWFzZT1YY312YXIgWWM9RS5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLFpjPUUuZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksJGM9RS5leHRlbmQoe3ZpZXc6bnVsbCxkZXRhaWw6bnVsbH0pLGFkPSRjLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7XG5mdW5jdGlvbiBiZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciBjZD17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sZGQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LGVkPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBnZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPWVkW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gaGQoKXtyZXR1cm4gZ2R9XG52YXIgaWQ9JGMuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPWNkW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPWJkKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9kZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6aGQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP2JkKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/YmQoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxqZD0wLGtkPTAsbGQ9ITEsbWQ9ITEsbmQ9JGMuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOmhkLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluIGEpcmV0dXJuIGEubW92ZW1lbnRYO3ZhciBiPWpkO2pkPWEuc2NyZWVuWDtyZXR1cm4gbGQ/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblgtXG5iOjA6KGxkPSEwLDApfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFlcImluIGEpcmV0dXJuIGEubW92ZW1lbnRZO3ZhciBiPWtkO2tkPWEuc2NyZWVuWTtyZXR1cm4gbWQ/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblktYjowOihtZD0hMCwwKX19KSxvZD1uZC5leHRlbmQoe3BvaW50ZXJJZDpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwscHJlc3N1cmU6bnVsbCx0YW5nZW50aWFsUHJlc3N1cmU6bnVsbCx0aWx0WDpudWxsLHRpbHRZOm51bGwsdHdpc3Q6bnVsbCxwb2ludGVyVHlwZTpudWxsLGlzUHJpbWFyeTpudWxsfSkscGQ9bmQuZXh0ZW5kKHtkYXRhVHJhbnNmZXI6bnVsbH0pLHFkPSRjLmV4dGVuZCh7dG91Y2hlczpudWxsLHRhcmdldFRvdWNoZXM6bnVsbCxjaGFuZ2VkVG91Y2hlczpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOmhkfSkscmQ9RS5leHRlbmQoe3Byb3BlcnR5TmFtZTpudWxsLFxuZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxzZD1uZC5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksdGQ9W1tcImJsdXJcIixcImJsdXJcIiwwXSxbXCJjYW5jZWxcIixcImNhbmNlbFwiLDBdLFtcImNsaWNrXCIsXCJjbGlja1wiLDBdLFtcImNsb3NlXCIsXCJjbG9zZVwiLDBdLFtcImNvbnRleHRtZW51XCIsXCJjb250ZXh0TWVudVwiLDBdLFtcImNvcHlcIixcImNvcHlcIiwwXSxbXCJjdXRcIixcImN1dFwiLDBdLFtcImF1eGNsaWNrXCIsXCJhdXhDbGlja1wiLDBdLFtcImRibGNsaWNrXCIsXCJkb3VibGVDbGlja1wiLDBdLFtcImRyYWdlbmRcIixcImRyYWdFbmRcIixcbjBdLFtcImRyYWdzdGFydFwiLFwiZHJhZ1N0YXJ0XCIsMF0sW1wiZHJvcFwiLFwiZHJvcFwiLDBdLFtcImZvY3VzXCIsXCJmb2N1c1wiLDBdLFtcImlucHV0XCIsXCJpbnB1dFwiLDBdLFtcImludmFsaWRcIixcImludmFsaWRcIiwwXSxbXCJrZXlkb3duXCIsXCJrZXlEb3duXCIsMF0sW1wia2V5cHJlc3NcIixcImtleVByZXNzXCIsMF0sW1wia2V5dXBcIixcImtleVVwXCIsMF0sW1wibW91c2Vkb3duXCIsXCJtb3VzZURvd25cIiwwXSxbXCJtb3VzZXVwXCIsXCJtb3VzZVVwXCIsMF0sW1wicGFzdGVcIixcInBhc3RlXCIsMF0sW1wicGF1c2VcIixcInBhdXNlXCIsMF0sW1wicGxheVwiLFwicGxheVwiLDBdLFtcInBvaW50ZXJjYW5jZWxcIixcInBvaW50ZXJDYW5jZWxcIiwwXSxbXCJwb2ludGVyZG93blwiLFwicG9pbnRlckRvd25cIiwwXSxbXCJwb2ludGVydXBcIixcInBvaW50ZXJVcFwiLDBdLFtcInJhdGVjaGFuZ2VcIixcInJhdGVDaGFuZ2VcIiwwXSxbXCJyZXNldFwiLFwicmVzZXRcIiwwXSxbXCJzZWVrZWRcIixcInNlZWtlZFwiLDBdLFtcInN1Ym1pdFwiLFwic3VibWl0XCIsMF0sW1widG91Y2hjYW5jZWxcIixcInRvdWNoQ2FuY2VsXCIsXG4wXSxbXCJ0b3VjaGVuZFwiLFwidG91Y2hFbmRcIiwwXSxbXCJ0b3VjaHN0YXJ0XCIsXCJ0b3VjaFN0YXJ0XCIsMF0sW1widm9sdW1lY2hhbmdlXCIsXCJ2b2x1bWVDaGFuZ2VcIiwwXSxbXCJkcmFnXCIsXCJkcmFnXCIsMV0sW1wiZHJhZ2VudGVyXCIsXCJkcmFnRW50ZXJcIiwxXSxbXCJkcmFnZXhpdFwiLFwiZHJhZ0V4aXRcIiwxXSxbXCJkcmFnbGVhdmVcIixcImRyYWdMZWF2ZVwiLDFdLFtcImRyYWdvdmVyXCIsXCJkcmFnT3ZlclwiLDFdLFtcIm1vdXNlbW92ZVwiLFwibW91c2VNb3ZlXCIsMV0sW1wibW91c2VvdXRcIixcIm1vdXNlT3V0XCIsMV0sW1wibW91c2VvdmVyXCIsXCJtb3VzZU92ZXJcIiwxXSxbXCJwb2ludGVybW92ZVwiLFwicG9pbnRlck1vdmVcIiwxXSxbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyT3V0XCIsMV0sW1wicG9pbnRlcm92ZXJcIixcInBvaW50ZXJPdmVyXCIsMV0sW1wic2Nyb2xsXCIsXCJzY3JvbGxcIiwxXSxbXCJ0b2dnbGVcIixcInRvZ2dsZVwiLDFdLFtcInRvdWNobW92ZVwiLFwidG91Y2hNb3ZlXCIsMV0sW1wid2hlZWxcIixcIndoZWVsXCIsMV0sW1wiYWJvcnRcIixcImFib3J0XCIsXG4yXSxbWmIsXCJhbmltYXRpb25FbmRcIiwyXSxbJGIsXCJhbmltYXRpb25JdGVyYXRpb25cIiwyXSxbYWMsXCJhbmltYXRpb25TdGFydFwiLDJdLFtcImNhbnBsYXlcIixcImNhblBsYXlcIiwyXSxbXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIiwyXSxbXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIiwyXSxbXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCIsMl0sW1wiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIiwyXSxbXCJlbmRlZFwiLFwiZW5kZWRcIiwyXSxbXCJlcnJvclwiLFwiZXJyb3JcIiwyXSxbXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIiwyXSxbXCJsb2FkXCIsXCJsb2FkXCIsMl0sW1wibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiLDJdLFtcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLDJdLFtcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCIsMl0sW1wibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIiwyXSxbXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsMl0sW1wicHJvZ3Jlc3NcIixcblwicHJvZ3Jlc3NcIiwyXSxbXCJzZWVraW5nXCIsXCJzZWVraW5nXCIsMl0sW1wic3RhbGxlZFwiLFwic3RhbGxlZFwiLDJdLFtcInN1c3BlbmRcIixcInN1c3BlbmRcIiwyXSxbXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCIsMl0sW2JjLFwidHJhbnNpdGlvbkVuZFwiLDJdLFtcIndhaXRpbmdcIixcIndhaXRpbmdcIiwyXV0sdWQ9e30sdmQ9e30sd2Q9MDtmb3IoO3dkPHRkLmxlbmd0aDt3ZCsrKXt2YXIgeWQ9dGRbd2RdLHpkPXlkWzBdLEFkPXlkWzFdLEJkPXlkWzJdLENkPVwib25cIisoQWRbMF0udG9VcHBlckNhc2UoKStBZC5zbGljZSgxKSksRGQ9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOkNkLGNhcHR1cmVkOkNkK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W3pkXSxldmVudFByaW9yaXR5OkJkfTt1ZFtBZF09RGQ7dmRbemRdPURkfVxudmFyIEVkPXtldmVudFR5cGVzOnVkLGdldEV2ZW50UHJpb3JpdHk6ZnVuY3Rpb24oYSl7YT12ZFthXTtyZXR1cm4gdm9pZCAwIT09YT9hLmV2ZW50UHJpb3JpdHk6Mn0sZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT12ZFthXTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PWJkKGMpKXJldHVybiBudWxsO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6YT1pZDticmVhaztjYXNlIFwiYmx1clwiOmNhc2UgXCJmb2N1c1wiOmE9YWQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6YT1uZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjphPVxucGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6YT1xZDticmVhaztjYXNlIFpiOmNhc2UgJGI6Y2FzZSBhYzphPVljO2JyZWFrO2Nhc2UgYmM6YT1yZDticmVhaztjYXNlIFwic2Nyb2xsXCI6YT0kYzticmVhaztjYXNlIFwid2hlZWxcIjphPXNkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOmE9WmM7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6YT1vZDticmVhaztkZWZhdWx0OmE9RX1iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO1NjKGIpO3JldHVybiBifX0sRmQ9cS51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxcbkdkPXEudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LEhkPUVkLmdldEV2ZW50UHJpb3JpdHksSWQ9MTAsSmQ9W107XG5mdW5jdGlvbiBLZChhKXt2YXIgYj1hLnRhcmdldEluc3QsYz1iO2Rve2lmKCFjKXthLmFuY2VzdG9ycy5wdXNoKGMpO2JyZWFrfXZhciBkPWM7aWYoMz09PWQudGFnKWQ9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlbHNle2Zvcig7ZC5yZXR1cm47KWQ9ZC5yZXR1cm47ZD0zIT09ZC50YWc/bnVsbDpkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvfWlmKCFkKWJyZWFrO2I9Yy50YWc7NSE9PWImJjYhPT1ifHxhLmFuY2VzdG9ycy5wdXNoKGMpO2M9RmMoZCl9d2hpbGUoYyk7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspe2I9YS5hbmNlc3RvcnNbY107dmFyIGU9TWMoYS5uYXRpdmVFdmVudCk7ZD1hLnRvcExldmVsVHlwZTtmb3IodmFyIGY9YS5uYXRpdmVFdmVudCxnPWEuZXZlbnRTeXN0ZW1GbGFncyxoPW51bGwsaz0wO2s8ZWEubGVuZ3RoO2srKyl7dmFyIGw9ZWFba107bCYmKGw9bC5leHRyYWN0RXZlbnRzKGQsYixmLGUsZykpJiYoaD14YShoLGwpKX1CYShoKX19XG52YXIgTGQ9ITA7ZnVuY3Rpb24gRihhLGIpe01kKGIsYSwhMSl9ZnVuY3Rpb24gTWQoYSxiLGMpe3N3aXRjaChIZChiKSl7Y2FzZSAwOnZhciBkPU5kLmJpbmQobnVsbCxiLDEpO2JyZWFrO2Nhc2UgMTpkPU9kLmJpbmQobnVsbCxiLDEpO2JyZWFrO2RlZmF1bHQ6ZD1QZC5iaW5kKG51bGwsYiwxKX1jP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGQsITApOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGQsITEpfWZ1bmN0aW9uIE5kKGEsYixjKXtpYnx8Z2IoKTt2YXIgZD1QZCxlPWliO2liPSEwO3RyeXtmYihkLGEsYixjKX1maW5hbGx5eyhpYj1lKXx8a2IoKX19ZnVuY3Rpb24gT2QoYSxiLGMpe0dkKEZkLFBkLmJpbmQobnVsbCxhLGIsYykpfVxuZnVuY3Rpb24gUWQoYSxiLGMsZCl7aWYoSmQubGVuZ3RoKXt2YXIgZT1KZC5wb3AoKTtlLnRvcExldmVsVHlwZT1hO2UuZXZlbnRTeXN0ZW1GbGFncz1iO2UubmF0aXZlRXZlbnQ9YztlLnRhcmdldEluc3Q9ZDthPWV9ZWxzZSBhPXt0b3BMZXZlbFR5cGU6YSxldmVudFN5c3RlbUZsYWdzOmIsbmF0aXZlRXZlbnQ6Yyx0YXJnZXRJbnN0OmQsYW5jZXN0b3JzOltdfTt0cnl7aWYoYj1LZCxjPWEsamIpYihjLHZvaWQgMCk7ZWxzZXtqYj0hMDt0cnl7aGIoYixjLHZvaWQgMCl9ZmluYWxseXtqYj0hMSxrYigpfX19ZmluYWxseXthLnRvcExldmVsVHlwZT1udWxsLGEubmF0aXZlRXZlbnQ9bnVsbCxhLnRhcmdldEluc3Q9bnVsbCxhLmFuY2VzdG9ycy5sZW5ndGg9MCxKZC5sZW5ndGg8SWQmJkpkLnB1c2goYSl9fVxuZnVuY3Rpb24gUGQoYSxiLGMpe2lmKExkKWlmKDA8bmMubGVuZ3RoJiYtMTx1Yy5pbmRleE9mKGEpKWE9emMobnVsbCxhLGIsYyksbmMucHVzaChhKTtlbHNle3ZhciBkPUhjKGEsYixjKTtudWxsPT09ZD9BYyhhLGMpOi0xPHVjLmluZGV4T2YoYSk/KGE9emMoZCxhLGIsYyksbmMucHVzaChhKSk6RGMoZCxhLGIsYyl8fChBYyhhLGMpLFFkKGEsYixjLG51bGwpKX19ZnVuY3Rpb24gSGMoYSxiLGMpe3ZhciBkPU1jKGMpO2Q9RmMoZCk7aWYobnVsbCE9PWQpe3ZhciBlPWVjKGQpO2lmKG51bGw9PT1lKWQ9bnVsbDtlbHNle3ZhciBmPWUudGFnO2lmKDEzPT09Zil7ZD1mYyhlKTtpZihudWxsIT09ZClyZXR1cm4gZDtkPW51bGx9ZWxzZSBpZigzPT09Zil7aWYoZS5zdGF0ZU5vZGUuaHlkcmF0ZSlyZXR1cm4gMz09PWUudGFnP2Uuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtkPW51bGx9ZWxzZSBlIT09ZCYmKGQ9bnVsbCl9fVFkKGEsYixjLGQpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gUmQoYSl7aWYoIVlhKXJldHVybiExO2E9XCJvblwiK2E7dmFyIGI9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifXZhciBTZD1uZXcgKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwKTtmdW5jdGlvbiB4YyhhKXt2YXIgYj1TZC5nZXQoYSk7dm9pZCAwPT09YiYmKGI9bmV3IFNldCxTZC5zZXQoYSxiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiB5YyhhLGIsYyl7aWYoIWMuaGFzKGEpKXtzd2l0Y2goYSl7Y2FzZSBcInNjcm9sbFwiOk1kKGIsXCJzY3JvbGxcIiwhMCk7YnJlYWs7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjpNZChiLFwiZm9jdXNcIiwhMCk7TWQoYixcImJsdXJcIiwhMCk7Yy5hZGQoXCJibHVyXCIpO2MuYWRkKFwiZm9jdXNcIik7YnJlYWs7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbG9zZVwiOlJkKGEpJiZNZChiLGEsITApO2JyZWFrO2Nhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJyZXNldFwiOmJyZWFrO2RlZmF1bHQ6LTE9PT1jYy5pbmRleE9mKGEpJiZGKGEsYil9Yy5hZGQoYSl9fVxudmFyIFRkPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LFVkPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhUZCkuZm9yRWFjaChmdW5jdGlvbihhKXtVZC5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO1RkW2JdPVRkW2FdfSl9KTtmdW5jdGlvbiBWZChhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8VGQuaGFzT3duUHJvcGVydHkoYSkmJlRkW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIFdkKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPVZkKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIFhkPW4oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiBZZChhLGIpe2lmKGIpe2lmKFhkW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IodSgxMzcsYSxcIlwiKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcih1KDYwKSk7aWYoIShcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih1KDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcih1KDYyLFwiXCIpKTt9fVxuZnVuY3Rpb24gWmQoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fWZ1bmN0aW9uICRkKGEsYil7YT05PT09YS5ub2RlVHlwZXx8MTE9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O3ZhciBjPXhjKGEpO2I9amFbYl07Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspeWMoYltkXSxhLGMpfWZ1bmN0aW9uIGFlKCl7fVxuZnVuY3Rpb24gYmUoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fWZ1bmN0aW9uIGNlKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1mdW5jdGlvbiBkZShhLGIpe3ZhciBjPWNlKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPWNlKGMpfX1cbmZ1bmN0aW9uIGVlKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/ZWUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfWZ1bmN0aW9uIGZlKCl7Zm9yKHZhciBhPXdpbmRvdyxiPWJlKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPWJlKGEuZG9jdW1lbnQpfXJldHVybiBifVxuZnVuY3Rpb24gZ2UoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX12YXIgaGU9XCIkXCIsaWU9XCIvJFwiLGplPVwiJD9cIixrZT1cIiQhXCIsbGU9bnVsbCxtZT1udWxsO2Z1bmN0aW9uIG5lKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIG9lKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgcGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAscWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO2Z1bmN0aW9uIHJlKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfVxuZnVuY3Rpb24gc2UoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihjPT09aGV8fGM9PT1rZXx8Yz09PWplKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZSBjPT09aWUmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciB0ZT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSx1ZT1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK3RlLHZlPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrdGUsd2U9XCJfX3JlYWN0Q29udGFpbmVyZSRcIit0ZTtcbmZ1bmN0aW9uIEZjKGEpe3ZhciBiPWFbdWVdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW3dlXXx8Y1t1ZV0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1zZShhKTtudWxsIT09YTspe2lmKGM9YVt1ZV0pcmV0dXJuIGM7YT1zZShhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQ2MoYSl7YT1hW3VlXXx8YVt3ZV07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIHhlKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcih1KDMzKSk7fWZ1bmN0aW9uIHllKGEpe3JldHVybiBhW3ZlXXx8bnVsbH12YXIgemU9bnVsbCxBZT1udWxsLEJlPW51bGw7XG5mdW5jdGlvbiBDZSgpe2lmKEJlKXJldHVybiBCZTt2YXIgYSxiPUFlLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIHplP3plLnZhbHVlOnplLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIEJlPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9dmFyIERlPUUuZXh0ZW5kKHtkYXRhOm51bGx9KSxFZT1FLmV4dGVuZCh7ZGF0YTpudWxsfSksRmU9WzksMTMsMjcsMzJdLEdlPVlhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxIZT1udWxsO1lhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihIZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIEllPVlhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhSGUsSmU9WWEmJighR2V8fEhlJiY4PEhlJiYxMT49SGUpLEtlPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLExlPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LE1lPSExO1xuZnVuY3Rpb24gTmUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1GZS5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIE9lKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIFBlPSExO2Z1bmN0aW9uIFFlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBPZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7TWU9ITA7cmV0dXJuIEtlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PUtlJiZNZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBSZShhLGIpe2lmKFBlKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFHZSYmTmUoYSxiKT8oYT1DZSgpLEJlPUFlPXplPW51bGwsUGU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIEplJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBTZT17ZXZlbnRUeXBlczpMZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlO2lmKEdlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBmPUxlLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpmPUxlLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Zj1MZS5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWY9dm9pZCAwfWVsc2UgUGU/TmUoYSxjKSYmKGY9TGUuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZj1MZS5jb21wb3NpdGlvblN0YXJ0KTtmPyhKZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihQZXx8ZiE9PUxlLmNvbXBvc2l0aW9uU3RhcnQ/Zj09PUxlLmNvbXBvc2l0aW9uRW5kJiZQZSYmKGU9Q2UoKSk6KHplPWQsQWU9XCJ2YWx1ZVwiaW4gemU/emUudmFsdWU6emUudGV4dENvbnRlbnQsUGU9ITApKSxmPURlLmdldFBvb2xlZChmLFxuYixjLGQpLGU/Zi5kYXRhPWU6KGU9T2UoYyksbnVsbCE9PWUmJihmLmRhdGE9ZSkpLFNjKGYpLGU9Zik6ZT1udWxsOyhhPUllP1FlKGEsYyk6UmUoYSxjKSk/KGI9RWUuZ2V0UG9vbGVkKExlLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxTYyhiKSk6Yj1udWxsO3JldHVybiBudWxsPT09ZT9iOm51bGw9PT1iP2U6W2UsYl19fSxUZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBVZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIVRlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbnZhciBWZT17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiBXZShhLGIsYyl7YT1FLmdldFBvb2xlZChWZS5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO2NiKGMpO1NjKGEpO3JldHVybiBhfXZhciBYZT1udWxsLFllPW51bGw7ZnVuY3Rpb24gWmUoYSl7QmEoYSl9ZnVuY3Rpb24gJGUoYSl7dmFyIGI9eGUoYSk7aWYoemIoYikpcmV0dXJuIGF9ZnVuY3Rpb24gYWYoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgYmY9ITE7WWEmJihiZj1SZChcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtcbmZ1bmN0aW9uIGNmKCl7WGUmJihYZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixkZiksWWU9WGU9bnVsbCl9ZnVuY3Rpb24gZGYoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJiRlKFllKSlpZihhPVdlKFllLGEsTWMoYSkpLGliKUJhKGEpO2Vsc2V7aWI9ITA7dHJ5e2ViKFplLGEpfWZpbmFsbHl7aWI9ITEsa2IoKX19fWZ1bmN0aW9uIGVmKGEsYixjKXtcImZvY3VzXCI9PT1hPyhjZigpLFhlPWIsWWU9YyxYZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixkZikpOlwiYmx1clwiPT09YSYmY2YoKX1mdW5jdGlvbiBmZihhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiAkZShZZSl9ZnVuY3Rpb24gZ2YoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiAkZShiKX1mdW5jdGlvbiBoZihhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiAkZShiKX1cbnZhciBqZj17ZXZlbnRUeXBlczpWZSxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOmJmLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj94ZShiKTp3aW5kb3csZj1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWZ8fFwiaW5wdXRcIj09PWYmJlwiZmlsZVwiPT09ZS50eXBlKXZhciBnPWFmO2Vsc2UgaWYoVWUoZSkpaWYoYmYpZz1oZjtlbHNle2c9ZmY7dmFyIGg9ZWZ9ZWxzZShmPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1mLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihnPWdmKTtpZihnJiYoZz1nKGEsYikpKXJldHVybiBXZShnLGMsZCk7aCYmaChhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJkZiKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LGtmPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsXG5kZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0sbW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxwb2ludGVyRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJFbnRlclwiLGRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX0scG9pbnRlckxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxsZixtZj17ZXZlbnRUeXBlczprZixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEsZz1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoZiYmMD09PShlJjMyKSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fCFnJiYhZilyZXR1cm4gbnVsbDtcbmU9ZC53aW5kb3c9PT1kP2Q6KGU9ZC5vd25lckRvY3VtZW50KT9lLmRlZmF1bHRWaWV3fHxlLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoZyl7aWYoZz1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/RmMoYik6bnVsbCxudWxsIT09YiYmKGY9ZWMoYiksYiE9PWZ8fDUhPT1iLnRhZyYmNiE9PWIudGFnKSliPW51bGx9ZWxzZSBnPW51bGw7aWYoZz09PWIpcmV0dXJuIG51bGw7aWYoXCJtb3VzZW91dFwiPT09YXx8XCJtb3VzZW92ZXJcIj09PWEpe3ZhciBoPW5kO3ZhciBrPWtmLm1vdXNlTGVhdmU7dmFyIGw9a2YubW91c2VFbnRlcjt2YXIgbT1cIm1vdXNlXCJ9ZWxzZSBpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpaD1vZCxrPWtmLnBvaW50ZXJMZWF2ZSxsPWtmLnBvaW50ZXJFbnRlcixtPVwicG9pbnRlclwiO2E9bnVsbD09Zz9lOnhlKGcpO2U9bnVsbD09Yj9lOnhlKGIpO2s9aC5nZXRQb29sZWQoayxnLGMsZCk7ay50eXBlPW0rXCJsZWF2ZVwiO2sudGFyZ2V0PVxuYTtrLnJlbGF0ZWRUYXJnZXQ9ZTtkPWguZ2V0UG9vbGVkKGwsYixjLGQpO2QudHlwZT1tK1wiZW50ZXJcIjtkLnRhcmdldD1lO2QucmVsYXRlZFRhcmdldD1hO2g9ZzttPWI7aWYoaCYmbSlhOntsPWg7YT1tO2c9MDtmb3IoYj1sO2I7Yj1OYyhiKSlnKys7Yj0wO2ZvcihlPWE7ZTtlPU5jKGUpKWIrKztmb3IoOzA8Zy1iOylsPU5jKGwpLGctLTtmb3IoOzA8Yi1nOylhPU5jKGEpLGItLTtmb3IoO2ctLTspe2lmKGw9PT1hfHxsPT09YS5hbHRlcm5hdGUpYnJlYWsgYTtsPU5jKGwpO2E9TmMoYSl9bD1udWxsfWVsc2UgbD1udWxsO2E9bDtmb3IobD1bXTtoJiZoIT09YTspe2c9aC5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1hKWJyZWFrO2wucHVzaChoKTtoPU5jKGgpfWZvcihoPVtdO20mJm0hPT1hOyl7Zz1tLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PWEpYnJlYWs7aC5wdXNoKG0pO209TmMobSl9Zm9yKG09MDttPGwubGVuZ3RoO20rKylRYyhsW21dLFwiYnViYmxlZFwiLGspO2ZvcihtPVxuaC5sZW5ndGg7MDxtLS07KVFjKGhbbV0sXCJjYXB0dXJlZFwiLGQpO2lmKGM9PT1sZilyZXR1cm4gbGY9bnVsbCxba107bGY9YztyZXR1cm5bayxkXX19O2Z1bmN0aW9uIG5mKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgb2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6bmYscGY9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtmdW5jdGlvbiBxZihhLGIpe2lmKG9mKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighcGYuY2FsbChiLGNbZF0pfHwhb2YoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1cbnZhciByZj1ZYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLHNmPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSx0Zj1udWxsLHVmPW51bGwsdmY9bnVsbCx3Zj0hMTtcbmZ1bmN0aW9uIHhmKGEsYil7dmFyIGM9Yi53aW5kb3c9PT1iP2IuZG9jdW1lbnQ6OT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQ7aWYod2Z8fG51bGw9PXRmfHx0ZiE9PWJlKGMpKXJldHVybiBudWxsO2M9dGY7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmZ2UoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OihjPShjLm93bmVyRG9jdW1lbnQmJmMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTtyZXR1cm4gdmYmJnFmKHZmLGMpP251bGw6KHZmPWMsYT1FLmdldFBvb2xlZChzZi5zZWxlY3QsdWYsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD10ZixTYyhhKSxhKX1cbnZhciB5Zj17ZXZlbnRUeXBlczpzZixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50LGY7aWYoIShmPSFlKSl7YTp7ZT14YyhlKTtmPWphLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKWlmKCFlLmhhcyhmW2ddKSl7ZT0hMTticmVhayBhfWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj94ZShiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmlmKFVlKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKXRmPWUsdWY9Yix2Zj1udWxsO2JyZWFrO2Nhc2UgXCJibHVyXCI6dmY9dWY9dGY9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6d2Y9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOnJldHVybiB3Zj0hMSx4ZihjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihyZilicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuIHhmKGMsZCl9cmV0dXJuIG51bGx9fTtDYS5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO3ZhciB6Zj1DYztzYT15ZTt1YT16Zjt2YT14ZTtDYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1NpbXBsZUV2ZW50UGx1Z2luOkVkLEVudGVyTGVhdmVFdmVudFBsdWdpbjptZixDaGFuZ2VFdmVudFBsdWdpbjpqZixTZWxlY3RFdmVudFBsdWdpbjp5ZixCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOlNlfSk7bmV3IFNldDt2YXIgQWY9W10sQmY9LTE7ZnVuY3Rpb24gRyhhKXswPkJmfHwoYS5jdXJyZW50PUFmW0JmXSxBZltCZl09bnVsbCxCZi0tKX1cbmZ1bmN0aW9uIEkoYSxiKXtCZisrO0FmW0JmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIENmPXt9LEo9e2N1cnJlbnQ6Q2Z9LEs9e2N1cnJlbnQ6ITF9LERmPUNmO2Z1bmN0aW9uIEVmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQ2Y7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gTChhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfVxuZnVuY3Rpb24gRmYoYSl7RyhLLGEpO0coSixhKX1mdW5jdGlvbiBHZihhKXtHKEssYSk7RyhKLGEpfWZ1bmN0aW9uIEhmKGEsYixjKXtpZihKLmN1cnJlbnQhPT1DZil0aHJvdyBFcnJvcih1KDE2OCkpO0koSixiLGEpO0koSyxjLGEpfWZ1bmN0aW9uIElmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYSkpdGhyb3cgRXJyb3IodSgxMDgsV2EoYil8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gbih7fSxjLHt9LGQpfWZ1bmN0aW9uIEpmKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2I9YiYmYi5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8Q2Y7RGY9Si5jdXJyZW50O0koSixiLGEpO0koSyxLLmN1cnJlbnQsYSk7cmV0dXJuITB9XG5mdW5jdGlvbiBLZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IodSgxNjkpKTtjPyhiPUlmKGEsYixEZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1iLEcoSyxhKSxHKEosYSksSShKLGIsYSkpOkcoSyxhKTtJKEssYyxhKX1cbnZhciBMZj1xLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxNZj1xLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssTmY9cS51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxPZj1xLnVuc3RhYmxlX3Nob3VsZFlpZWxkLFBmPXEudW5zdGFibGVfcmVxdWVzdFBhaW50LFFmPXEudW5zdGFibGVfbm93LFJmPXEudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsU2Y9cS51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxUZj1xLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LFVmPXEudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksVmY9cS51bnN0YWJsZV9Mb3dQcmlvcml0eSxXZj1xLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxYZj17fSxZZj12b2lkIDAhPT1QZj9QZjpmdW5jdGlvbigpe30sWmY9bnVsbCwkZj1udWxsLGFnPSExLGJnPVFmKCksY2c9MUU0PmJnP1FmOmZ1bmN0aW9uKCl7cmV0dXJuIFFmKCktYmd9O1xuZnVuY3Rpb24gZGcoKXtzd2l0Y2goUmYoKSl7Y2FzZSBTZjpyZXR1cm4gOTk7Y2FzZSBUZjpyZXR1cm4gOTg7Y2FzZSBVZjpyZXR1cm4gOTc7Y2FzZSBWZjpyZXR1cm4gOTY7Y2FzZSBXZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMzMikpO319ZnVuY3Rpb24gZWcoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIFNmO2Nhc2UgOTg6cmV0dXJuIFRmO2Nhc2UgOTc6cmV0dXJuIFVmO2Nhc2UgOTY6cmV0dXJuIFZmO2Nhc2UgOTU6cmV0dXJuIFdmO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMzIpKTt9fWZ1bmN0aW9uIGZnKGEsYil7YT1lZyhhKTtyZXR1cm4gTGYoYSxiKX1mdW5jdGlvbiBnZyhhLGIsYyl7YT1lZyhhKTtyZXR1cm4gTWYoYSxiLGMpfWZ1bmN0aW9uIGhnKGEpe251bGw9PT1aZj8oWmY9W2FdLCRmPU1mKFNmLGlnKSk6WmYucHVzaChhKTtyZXR1cm4gWGZ9ZnVuY3Rpb24gamcoKXtpZihudWxsIT09JGYpe3ZhciBhPSRmOyRmPW51bGw7TmYoYSl9aWcoKX1cbmZ1bmN0aW9uIGlnKCl7aWYoIWFnJiZudWxsIT09WmYpe2FnPSEwO3ZhciBhPTA7dHJ5e3ZhciBiPVpmO2ZnKDk5LGZ1bmN0aW9uKCl7Zm9yKDthPGIubGVuZ3RoO2ErKyl7dmFyIGM9YlthXTtkbyBjPWMoITApO3doaWxlKG51bGwhPT1jKX19KTtaZj1udWxsfWNhdGNoKGMpe3Rocm93IG51bGwhPT1aZiYmKFpmPVpmLnNsaWNlKGErMSkpLE1mKFNmLGpnKSxjO31maW5hbGx5e2FnPSExfX19dmFyIGtnPTM7ZnVuY3Rpb24gbGcoYSxiLGMpe2MvPTEwO3JldHVybiAxMDczNzQxODIxLSgoKDEwNzM3NDE4MjEtYStiLzEwKS9jfDApKzEpKmN9ZnVuY3Rpb24gbWcoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1uKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSl9cmV0dXJuIGJ9dmFyIG5nPXtjdXJyZW50Om51bGx9LG9nPW51bGwscGc9bnVsbCxxZz1udWxsO2Z1bmN0aW9uIHJnKCl7cWc9cGc9b2c9bnVsbH1cbmZ1bmN0aW9uIHNnKGEsYil7dmFyIGM9YS50eXBlLl9jb250ZXh0O0kobmcsYy5fY3VycmVudFZhbHVlLGEpO2MuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHRnKGEpe3ZhciBiPW5nLmN1cnJlbnQ7RyhuZyxhKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHVnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKGEuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWEuY2hpbGRFeHBpcmF0aW9uVGltZT1iLG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtlbHNlIGlmKG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiljLmNoaWxkRXhwaXJhdGlvblRpbWU9YjtlbHNlIGJyZWFrO2E9YS5yZXR1cm59fVxuZnVuY3Rpb24gdmcoYSxiKXtvZz1hO3FnPXBnPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoYS5leHBpcmF0aW9uVGltZT49YiYmKHdnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1mdW5jdGlvbiB4ZyhhLGIpe2lmKHFnIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YilxZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtpZihudWxsPT09cGcpe2lmKG51bGw9PT1vZyl0aHJvdyBFcnJvcih1KDMwOCkpO3BnPWI7b2cuZGVwZW5kZW5jaWVzPXtleHBpcmF0aW9uVGltZTowLGZpcnN0Q29udGV4dDpiLHJlc3BvbmRlcnM6bnVsbH19ZWxzZSBwZz1wZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgeWc9ITE7XG5mdW5jdGlvbiB6ZyhhKXtyZXR1cm57YmFzZVN0YXRlOmEsZmlyc3RVcGRhdGU6bnVsbCxsYXN0VXBkYXRlOm51bGwsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gQWcoYSl7cmV0dXJue2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdFVwZGF0ZTphLmZpcnN0VXBkYXRlLGxhc3RVcGRhdGU6YS5sYXN0VXBkYXRlLGZpcnN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxsYXN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxmaXJzdEVmZmVjdDpudWxsLGxhc3RFZmZlY3Q6bnVsbCxmaXJzdENhcHR1cmVkRWZmZWN0Om51bGwsbGFzdENhcHR1cmVkRWZmZWN0Om51bGx9fVxuZnVuY3Rpb24gQmcoYSxiKXtyZXR1cm57ZXhwaXJhdGlvblRpbWU6YSxzdXNwZW5zZUNvbmZpZzpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbCxuZXh0RWZmZWN0Om51bGx9fWZ1bmN0aW9uIENnKGEsYil7bnVsbD09PWEubGFzdFVwZGF0ZT9hLmZpcnN0VXBkYXRlPWEubGFzdFVwZGF0ZT1iOihhLmxhc3RVcGRhdGUubmV4dD1iLGEubGFzdFVwZGF0ZT1iKX1cbmZ1bmN0aW9uIERnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7aWYobnVsbD09PWMpe3ZhciBkPWEudXBkYXRlUXVldWU7dmFyIGU9bnVsbDtudWxsPT09ZCYmKGQ9YS51cGRhdGVRdWV1ZT16ZyhhLm1lbW9pemVkU3RhdGUpKX1lbHNlIGQ9YS51cGRhdGVRdWV1ZSxlPWMudXBkYXRlUXVldWUsbnVsbD09PWQ/bnVsbD09PWU/KGQ9YS51cGRhdGVRdWV1ZT16ZyhhLm1lbW9pemVkU3RhdGUpLGU9Yy51cGRhdGVRdWV1ZT16ZyhjLm1lbW9pemVkU3RhdGUpKTpkPWEudXBkYXRlUXVldWU9QWcoZSk6bnVsbD09PWUmJihlPWMudXBkYXRlUXVldWU9QWcoZCkpO251bGw9PT1lfHxkPT09ZT9DZyhkLGIpOm51bGw9PT1kLmxhc3RVcGRhdGV8fG51bGw9PT1lLmxhc3RVcGRhdGU/KENnKGQsYiksQ2coZSxiKSk6KENnKGQsYiksZS5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gRWcoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlO2M9bnVsbD09PWM/YS51cGRhdGVRdWV1ZT16ZyhhLm1lbW9pemVkU3RhdGUpOkZnKGEsYyk7bnVsbD09PWMubGFzdENhcHR1cmVkVXBkYXRlP2MuZmlyc3RDYXB0dXJlZFVwZGF0ZT1jLmxhc3RDYXB0dXJlZFVwZGF0ZT1iOihjLmxhc3RDYXB0dXJlZFVwZGF0ZS5uZXh0PWIsYy5sYXN0Q2FwdHVyZWRVcGRhdGU9Yil9ZnVuY3Rpb24gRmcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYj09PWMudXBkYXRlUXVldWUmJihiPWEudXBkYXRlUXVldWU9QWcoYikpO3JldHVybiBifVxuZnVuY3Rpb24gR2coYSxiLGMsZCxlLGYpe3N3aXRjaChjLnRhZyl7Y2FzZSAxOnJldHVybiBhPWMucGF5bG9hZCxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7Y2FzZSAzOmEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi00MDk3fDY0O2Nhc2UgMDphPWMucGF5bG9hZDtlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtpZihudWxsPT09ZXx8dm9pZCAwPT09ZSlicmVhaztyZXR1cm4gbih7fSxkLGUpO2Nhc2UgMjp5Zz0hMH1yZXR1cm4gZH1cbmZ1bmN0aW9uIEhnKGEsYixjLGQsZSl7eWc9ITE7Yj1GZyhhLGIpO2Zvcih2YXIgZj1iLmJhc2VTdGF0ZSxnPW51bGwsaD0wLGs9Yi5maXJzdFVwZGF0ZSxsPWY7bnVsbCE9PWs7KXt2YXIgbT1rLmV4cGlyYXRpb25UaW1lO208ZT8obnVsbD09PWcmJihnPWssZj1sKSxoPG0mJihoPW0pKTooSWcobSxrLnN1c3BlbnNlQ29uZmlnKSxsPUdnKGEsYixrLGwsYyxkKSxudWxsIT09ay5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD0zMixrLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0RWZmZWN0P2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWs6KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWssYi5sYXN0RWZmZWN0PWspKSk7az1rLm5leHR9bT1udWxsO2ZvcihrPWIuZmlyc3RDYXB0dXJlZFVwZGF0ZTtudWxsIT09azspe3ZhciBDPWsuZXhwaXJhdGlvblRpbWU7QzxlPyhudWxsPT09bSYmKG09ayxudWxsPT09ZyYmKGY9bCkpLGg8QyYmKGg9QykpOihsPUdnKGEsYixrLGwsYyxkKSxudWxsIT09XG5rLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PTMyLGsubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RDYXB0dXJlZEVmZmVjdD9iLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9azooYi5sYXN0Q2FwdHVyZWRFZmZlY3QubmV4dEVmZmVjdD1rLGIubGFzdENhcHR1cmVkRWZmZWN0PWspKSk7az1rLm5leHR9bnVsbD09PWcmJihiLmxhc3RVcGRhdGU9bnVsbCk7bnVsbD09PW0/Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbDphLmVmZmVjdFRhZ3w9MzI7bnVsbD09PWcmJm51bGw9PT1tJiYoZj1sKTtiLmJhc2VTdGF0ZT1mO2IuZmlyc3RVcGRhdGU9ZztiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9bTtKZyhoKTthLmV4cGlyYXRpb25UaW1lPWg7YS5tZW1vaXplZFN0YXRlPWx9XG5mdW5jdGlvbiBLZyhhLGIsYyl7bnVsbCE9PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSYmKG51bGwhPT1iLmxhc3RVcGRhdGUmJihiLmxhc3RVcGRhdGUubmV4dD1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUsYi5sYXN0VXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlKSxiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbCk7TGcoYi5maXJzdEVmZmVjdCxjKTtiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsO0xnKGIuZmlyc3RDYXB0dXJlZEVmZmVjdCxjKTtiLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9bnVsbH1mdW5jdGlvbiBMZyhhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmNhbGxiYWNrO2lmKG51bGwhPT1jKXthLmNhbGxiYWNrPW51bGw7dmFyIGQ9YjtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgYyl0aHJvdyBFcnJvcih1KDE5MSxjKSk7Yy5jYWxsKGQpfWE9YS5uZXh0RWZmZWN0fX1cbnZhciBNZz1FYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxOZz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztmdW5jdGlvbiBPZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bih7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jO2Q9YS51cGRhdGVRdWV1ZTtudWxsIT09ZCYmMD09PWEuZXhwaXJhdGlvblRpbWUmJihkLmJhc2VTdGF0ZT1jKX1cbnZhciBTZz17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/ZWMoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPVBnKCksZT1NZy5zdXNwZW5zZTtkPVFnKGQsYSxlKTtlPUJnKGQsZSk7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO0RnKGEsZSk7UmcoYSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9UGcoKSxlPU1nLnN1c3BlbnNlO2Q9UWcoZCxhLGUpO2U9QmcoZCxlKTtlLnRhZz0xO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtEZyhhLGUpO1JnKGEsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBjPVBnKCksZD1NZy5zdXNwZW5zZTtcbmM9UWcoYyxhLGQpO2Q9QmcoYyxkKTtkLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZC5jYWxsYmFjaz1iKTtEZyhhLGQpO1JnKGEsYyl9fTtmdW5jdGlvbiBUZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFxZihjLGQpfHwhcWYoZSxmKTohMH1cbmZ1bmN0aW9uIFVnKGEsYixjKXt2YXIgZD0hMSxlPUNmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXhnKGYpOihlPUwoYik/RGY6Si5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/RWYoYSxlKTpDZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPVNnO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbEZpYmVyPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIFZnKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZTZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIFdnKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9Tmc7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD14ZyhmKTooZj1MKGIpP0RmOkouY3VycmVudCxlLmNvbnRleHQ9RWYoYSxmKSk7Zj1hLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoSGcoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKE9nKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJlNnLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGY9YS51cGRhdGVRdWV1ZSxudWxsIT09ZiYmKEhnKGEsZixjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX12YXIgWGc9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFlnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IodSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih1KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1OZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih1KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih1KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gWmcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IodSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIikpO31cbmZ1bmN0aW9uICRnKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiLGMpe2E9YWgoYSxiLGMpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1iaChjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9WWcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPWNoKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPVlnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1cbmMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9ZGgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9ZWgoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIEMoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPWJoKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIEdhOnJldHVybiBjPWNoKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVlnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSBIYTpyZXR1cm4gYj1kaChiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoWGcoYil8fFxuVWEoYikpcmV0dXJuIGI9ZWgoYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7WmcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB5KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIEdhOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09SWE/bShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIEhhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKFhnKGMpfHxVYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7WmcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBIKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9XG5hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgR2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PUlhP20oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIEhhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKFhnKGQpfHxVYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7WmcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB6KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLG09bnVsbCxyPWcseD1nPTAsQT1udWxsO251bGwhPT1yJiZ4PGgubGVuZ3RoO3grKyl7ci5pbmRleD54PyhBPXIscj1udWxsKTpBPXIuc2libGluZzt2YXIgcD15KGUscixoW3hdLGspO2lmKG51bGw9PT1wKXtudWxsPT09ciYmKHI9QSk7YnJlYWt9YSYmXG5yJiZudWxsPT09cC5hbHRlcm5hdGUmJmIoZSxyKTtnPWYocCxnLHgpO251bGw9PT1tP2w9cDptLnNpYmxpbmc9cDttPXA7cj1BfWlmKHg9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHIpLGw7aWYobnVsbD09PXIpe2Zvcig7eDxoLmxlbmd0aDt4Kyspcj1DKGUsaFt4XSxrKSxudWxsIT09ciYmKGc9ZihyLGcseCksbnVsbD09PW0/bD1yOm0uc2libGluZz1yLG09cik7cmV0dXJuIGx9Zm9yKHI9ZChlLHIpO3g8aC5sZW5ndGg7eCsrKUE9SChyLGUseCxoW3hdLGspLG51bGwhPT1BJiYoYSYmbnVsbCE9PUEuYWx0ZXJuYXRlJiZyLmRlbGV0ZShudWxsPT09QS5rZXk/eDpBLmtleSksZz1mKEEsZyx4KSxudWxsPT09bT9sPUE6bS5zaWJsaW5nPUEsbT1BKTthJiZyLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIHRhKGUsZyxoLGspe3ZhciBsPVVhKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBsKXRocm93IEVycm9yKHUoMTUwKSk7aD1sLmNhbGwoaCk7XG5pZihudWxsPT1oKXRocm93IEVycm9yKHUoMTUxKSk7Zm9yKHZhciBtPWw9bnVsbCxyPWcseD1nPTAsQT1udWxsLHA9aC5uZXh0KCk7bnVsbCE9PXImJiFwLmRvbmU7eCsrLHA9aC5uZXh0KCkpe3IuaW5kZXg+eD8oQT1yLHI9bnVsbCk6QT1yLnNpYmxpbmc7dmFyIHo9eShlLHIscC52YWx1ZSxrKTtpZihudWxsPT09eil7bnVsbD09PXImJihyPUEpO2JyZWFrfWEmJnImJm51bGw9PT16LmFsdGVybmF0ZSYmYihlLHIpO2c9Zih6LGcseCk7bnVsbD09PW0/bD16Om0uc2libGluZz16O209ejtyPUF9aWYocC5kb25lKXJldHVybiBjKGUsciksbDtpZihudWxsPT09cil7Zm9yKDshcC5kb25lO3grKyxwPWgubmV4dCgpKXA9QyhlLHAudmFsdWUsayksbnVsbCE9PXAmJihnPWYocCxnLHgpLG51bGw9PT1tP2w9cDptLnNpYmxpbmc9cCxtPXApO3JldHVybiBsfWZvcihyPWQoZSxyKTshcC5kb25lO3grKyxwPWgubmV4dCgpKXA9SChyLGUseCxwLnZhbHVlLGspLG51bGwhPT1wJiYoYSYmbnVsbCE9PVxucC5hbHRlcm5hdGUmJnIuZGVsZXRlKG51bGw9PT1wLmtleT94OnAua2V5KSxnPWYocCxnLHgpLG51bGw9PT1tP2w9cDptLnNpYmxpbmc9cCxtPXApO2EmJnIuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PUlhJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIEdhOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bClpZig3PT09ay50YWc/Zi50eXBlPT09SWE6ay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi50eXBlPT09SWE/Zi5wcm9wcy5jaGlsZHJlbjpmLnByb3BzLGgpO2QucmVmPVlnKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLFxuayk7YnJlYWt9ZWxzZSBiKGEsayk7az1rLnNpYmxpbmd9Zi50eXBlPT09SWE/KGQ9ZWgoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPWNoKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPVlnKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSBIYTphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10saCk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPWRoKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT1cbnR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsaCksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1iaChmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihYZyhmKSlyZXR1cm4geihhLGQsZixoKTtpZihVYShmKSlyZXR1cm4gdGEoYSxkLGYsaCk7bCYmWmcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMDp0aHJvdyBhPWEudHlwZSxFcnJvcih1KDE1MixhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiQ29tcG9uZW50XCIpKTt9cmV0dXJuIGMoYSxkKX19dmFyIGZoPSRnKCEwKSxnaD0kZyghMSksaGg9e30saWg9e2N1cnJlbnQ6aGh9LGpoPXtjdXJyZW50OmhofSxraD17Y3VycmVudDpoaH07ZnVuY3Rpb24gbGgoYSl7aWYoYT09PWhoKXRocm93IEVycm9yKHUoMTc0KSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBtaChhLGIpe0koa2gsYixhKTtJKGpoLGEsYSk7SShpaCxoaCxhKTt2YXIgYz1iLm5vZGVUeXBlO3N3aXRjaChjKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTpRYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6Yz04PT09Yz9iLnBhcmVudE5vZGU6YixiPWMubmFtZXNwYWNlVVJJfHxudWxsLGM9Yy50YWdOYW1lLGI9UWIoYixjKX1HKGloLGEpO0koaWgsYixhKX1mdW5jdGlvbiBuaChhKXtHKGloLGEpO0coamgsYSk7RyhraCxhKX1mdW5jdGlvbiBvaChhKXtsaChraC5jdXJyZW50KTt2YXIgYj1saChpaC5jdXJyZW50KTt2YXIgYz1RYihiLGEudHlwZSk7YiE9PWMmJihJKGpoLGEsYSksSShpaCxjLGEpKX1mdW5jdGlvbiBwaChhKXtqaC5jdXJyZW50PT09YSYmKEcoaWgsYSksRyhqaCxhKSl9dmFyIE09e2N1cnJlbnQ6MH07XG5mdW5jdGlvbiBxaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxjLmRhdGE9PT1qZXx8Yy5kYXRhPT09a2UpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcmgoYSxiKXtyZXR1cm57cmVzcG9uZGVyOmEscHJvcHM6Yn19XG52YXIgc2g9RWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixOPUVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLHRoPTAsdWg9bnVsbCxPPW51bGwsdmg9bnVsbCx3aD1udWxsLFA9bnVsbCx4aD1udWxsLHloPTAsemg9bnVsbCxBaD0wLEJoPSExLENoPW51bGwsR2g9MDtmdW5jdGlvbiBRKCl7dGhyb3cgRXJyb3IodSgzMjEpKTt9ZnVuY3Rpb24gSGgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighb2YoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIEloKGEsYixjLGQsZSxmKXt0aD1mO3VoPWI7dmg9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7c2guY3VycmVudD1udWxsPT09dmg/Smg6S2g7Yj1jKGQsZSk7aWYoQmgpe2RvIEJoPSExLEdoKz0xLHZoPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsLHhoPXdoLHpoPVA9Tz1udWxsLHNoLmN1cnJlbnQ9S2gsYj1jKGQsZSk7d2hpbGUoQmgpO0NoPW51bGw7R2g9MH1zaC5jdXJyZW50PUxoO2E9dWg7YS5tZW1vaXplZFN0YXRlPXdoO2EuZXhwaXJhdGlvblRpbWU9eWg7YS51cGRhdGVRdWV1ZT16aDthLmVmZmVjdFRhZ3w9QWg7YT1udWxsIT09TyYmbnVsbCE9PU8ubmV4dDt0aD0wO3hoPVA9d2g9dmg9Tz11aD1udWxsO3loPTA7emg9bnVsbDtBaD0wO2lmKGEpdGhyb3cgRXJyb3IodSgzMDApKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE1oKCl7c2guY3VycmVudD1MaDt0aD0wO3hoPVA9d2g9dmg9Tz11aD1udWxsO3loPTA7emg9bnVsbDtBaD0wO0JoPSExO0NoPW51bGw7R2g9MH1mdW5jdGlvbiBOaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwscXVldWU6bnVsbCxiYXNlVXBkYXRlOm51bGwsbmV4dDpudWxsfTtudWxsPT09UD93aD1QPWE6UD1QLm5leHQ9YTtyZXR1cm4gUH1mdW5jdGlvbiBPaCgpe2lmKG51bGwhPT14aClQPXhoLHhoPVAubmV4dCxPPXZoLHZoPW51bGwhPT1PP08ubmV4dDpudWxsO2Vsc2V7aWYobnVsbD09PXZoKXRocm93IEVycm9yKHUoMzEwKSk7Tz12aDt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLHF1ZXVlOk8ucXVldWUsYmFzZVVwZGF0ZTpPLmJhc2VVcGRhdGUsbmV4dDpudWxsfTtQPW51bGw9PT1QP3doPWE6UC5uZXh0PWE7dmg9Ty5uZXh0fXJldHVybiBQfVxuZnVuY3Rpb24gUGgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBRaChhKXt2YXIgYj1PaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih1KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO2lmKDA8R2gpe3ZhciBkPWMuZGlzcGF0Y2g7aWYobnVsbCE9PUNoKXt2YXIgZT1DaC5nZXQoYyk7aWYodm9pZCAwIT09ZSl7Q2guZGVsZXRlKGMpO3ZhciBmPWIubWVtb2l6ZWRTdGF0ZTtkbyBmPWEoZixlLmFjdGlvbiksZT1lLm5leHQ7d2hpbGUobnVsbCE9PWUpO29mKGYsYi5tZW1vaXplZFN0YXRlKXx8KHdnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtiLmJhc2VVcGRhdGU9PT1jLmxhc3QmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWY7cmV0dXJuW2YsZF19fXJldHVybltiLm1lbW9pemVkU3RhdGUsZF19ZD1jLmxhc3Q7dmFyIGc9Yi5iYXNlVXBkYXRlO2Y9Yi5iYXNlU3RhdGU7bnVsbCE9PWc/KG51bGwhPT1kJiYoZC5uZXh0PW51bGwpLGQ9Zy5uZXh0KTpkPW51bGwhPT1kP2QubmV4dDpudWxsO2lmKG51bGwhPT1cbmQpe3ZhciBoPWU9bnVsbCxrPWQsbD0hMTtkb3t2YXIgbT1rLmV4cGlyYXRpb25UaW1lO208dGg/KGx8fChsPSEwLGg9ZyxlPWYpLG0+eWgmJih5aD1tLEpnKHloKSkpOihJZyhtLGsuc3VzcGVuc2VDb25maWcpLGY9ay5lYWdlclJlZHVjZXI9PT1hP2suZWFnZXJTdGF0ZTphKGYsay5hY3Rpb24pKTtnPWs7az1rLm5leHR9d2hpbGUobnVsbCE9PWsmJmshPT1kKTtsfHwoaD1nLGU9Zik7b2YoZixiLm1lbW9pemVkU3RhdGUpfHwod2c9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO2IuYmFzZVVwZGF0ZT1oO2IuYmFzZVN0YXRlPWU7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiBSaChhKXt2YXIgYj1OaCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT17bGFzdDpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpQaCxsYXN0UmVuZGVyZWRTdGF0ZTphfTthPWEuZGlzcGF0Y2g9U2guYmluZChudWxsLHVoLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19ZnVuY3Rpb24gVGgoYSl7cmV0dXJuIFFoKFBoLGEpfWZ1bmN0aW9uIFVoKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtudWxsPT09emg/KHpoPXtsYXN0RWZmZWN0Om51bGx9LHpoLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihiPXpoLmxhc3RFZmZlY3QsbnVsbD09PWI/emgubGFzdEVmZmVjdD1hLm5leHQ9YTooYz1iLm5leHQsYi5uZXh0PWEsYS5uZXh0PWMsemgubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBWaChhLGIsYyxkKXt2YXIgZT1OaCgpO0FofD1hO2UubWVtb2l6ZWRTdGF0ZT1VaChiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1mdW5jdGlvbiBXaChhLGIsYyxkKXt2YXIgZT1PaCgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1PKXt2YXIgZz1PLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJkhoKGQsZy5kZXBzKSl7VWgoMCxjLGYsZCk7cmV0dXJufX1BaHw9YTtlLm1lbW9pemVkU3RhdGU9VWgoYixjLGYsZCl9ZnVuY3Rpb24gWGgoYSxiKXtyZXR1cm4gVmgoNTE2LDE5MixhLGIpfWZ1bmN0aW9uIFloKGEsYil7cmV0dXJuIFdoKDUxNiwxOTIsYSxiKX1cbmZ1bmN0aW9uIFpoKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19ZnVuY3Rpb24gJGgoKXt9ZnVuY3Rpb24gYWkoYSxiKXtOaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfWZ1bmN0aW9uIGJpKGEsYil7dmFyIGM9T2goKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkhoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gU2goYSxiLGMpe2lmKCEoMjU+R2gpKXRocm93IEVycm9yKHUoMzAxKSk7dmFyIGQ9YS5hbHRlcm5hdGU7aWYoYT09PXVofHxudWxsIT09ZCYmZD09PXVoKWlmKEJoPSEwLGE9e2V4cGlyYXRpb25UaW1lOnRoLHN1c3BlbnNlQ29uZmlnOm51bGwsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH0sbnVsbD09PUNoJiYoQ2g9bmV3IE1hcCksYz1DaC5nZXQoYiksdm9pZCAwPT09YylDaC5zZXQoYixhKTtlbHNle2ZvcihiPWM7bnVsbCE9PWIubmV4dDspYj1iLm5leHQ7Yi5uZXh0PWF9ZWxzZXt2YXIgZT1QZygpLGY9TWcuc3VzcGVuc2U7ZT1RZyhlLGEsZik7Zj17ZXhwaXJhdGlvblRpbWU6ZSxzdXNwZW5zZUNvbmZpZzpmLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O3ZhciBnPWIubGFzdDtpZihudWxsPT09ZylmLm5leHQ9ZjtlbHNle3ZhciBoPWcubmV4dDtudWxsIT09aCYmXG4oZi5uZXh0PWgpO2cubmV4dD1mfWIubGFzdD1mO2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lJiYobnVsbD09PWR8fDA9PT1kLmV4cGlyYXRpb25UaW1lKSYmKGQ9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1kKSl0cnl7dmFyIGs9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxsPWQoayxjKTtmLmVhZ2VyUmVkdWNlcj1kO2YuZWFnZXJTdGF0ZT1sO2lmKG9mKGwsaykpcmV0dXJufWNhdGNoKG0pe31maW5hbGx5e31SZyhhLGUpfX1cbnZhciBMaD17cmVhZENvbnRleHQ6eGcsdXNlQ2FsbGJhY2s6USx1c2VDb250ZXh0OlEsdXNlRWZmZWN0OlEsdXNlSW1wZXJhdGl2ZUhhbmRsZTpRLHVzZUxheW91dEVmZmVjdDpRLHVzZU1lbW86USx1c2VSZWR1Y2VyOlEsdXNlUmVmOlEsdXNlU3RhdGU6USx1c2VEZWJ1Z1ZhbHVlOlEsdXNlUmVzcG9uZGVyOlEsdXNlRGVmZXJyZWRWYWx1ZTpRLHVzZVRyYW5zaXRpb246UX0sSmg9e3JlYWRDb250ZXh0OnhnLHVzZUNhbGxiYWNrOmFpLHVzZUNvbnRleHQ6eGcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBWaCg0LDM2LFpoLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVmgoNCwzNixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9TmgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1cblthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1OaCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT1kLnF1ZXVlPXtsYXN0Om51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07YT1hLmRpc3BhdGNoPVNoLmJpbmQobnVsbCx1aCxhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9TmgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6UmgsdXNlRGVidWdWYWx1ZTokaCx1c2VSZXNwb25kZXI6cmgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPVJoKGEpLGQ9Y1swXSxlPWNbMV07WGgoZnVuY3Rpb24oKXtxLnVuc3RhYmxlX25leHQoZnVuY3Rpb24oKXt2YXIgYz1OLnN1c3BlbnNlO04uc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtOLnN1c3BlbnNlPVxuY319KX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPVJoKCExKSxjPWJbMF0sZD1iWzFdO3JldHVyblthaShmdW5jdGlvbihiKXtkKCEwKTtxLnVuc3RhYmxlX25leHQoZnVuY3Rpb24oKXt2YXIgYz1OLnN1c3BlbnNlO04uc3VzcGVuc2U9dm9pZCAwPT09YT9udWxsOmE7dHJ5e2QoITEpLGIoKX1maW5hbGx5e04uc3VzcGVuc2U9Y319KX0sW2EsY10pLGNdfX0sS2g9e3JlYWRDb250ZXh0OnhnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6eGcsdXNlRWZmZWN0OlloLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBXaCg0LDM2LFpoLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gV2goNCwzNixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9T2goKTtiPXZvaWQgMD09PWI/XG5udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmSGgoYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6UWgsdXNlUmVmOmZ1bmN0aW9uKCl7cmV0dXJuIE9oKCkubWVtb2l6ZWRTdGF0ZX0sdXNlU3RhdGU6VGgsdXNlRGVidWdWYWx1ZTokaCx1c2VSZXNwb25kZXI6cmgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPVRoKGEpLGQ9Y1swXSxlPWNbMV07WWgoZnVuY3Rpb24oKXtxLnVuc3RhYmxlX25leHQoZnVuY3Rpb24oKXt2YXIgYz1OLnN1c3BlbnNlO04uc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtOLnN1c3BlbnNlPWN9fSl9LFthLGJdKTtyZXR1cm4gZH0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbihhKXt2YXIgYj1UaCghMSksYz1iWzBdLGQ9YlsxXTtyZXR1cm5bYmkoZnVuY3Rpb24oYil7ZCghMCk7cS51bnN0YWJsZV9uZXh0KGZ1bmN0aW9uKCl7dmFyIGM9XG5OLnN1c3BlbnNlO04uc3VzcGVuc2U9dm9pZCAwPT09YT9udWxsOmE7dHJ5e2QoITEpLGIoKX1maW5hbGx5e04uc3VzcGVuc2U9Y319KX0sW2EsY10pLGNdfX0sY2k9bnVsbCxkaT1udWxsLGVpPSExO2Z1bmN0aW9uIGZpKGEsYil7dmFyIGM9Z2koNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31cbmZ1bmN0aW9uIGhpKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBpaShhKXtpZihlaSl7dmFyIGI9ZGk7aWYoYil7dmFyIGM9YjtpZighaGkoYSxiKSl7Yj1yZShjLm5leHRTaWJsaW5nKTtpZighYnx8IWhpKGEsYikpe2EuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDI7ZWk9ITE7Y2k9YTtyZXR1cm59ZmkoY2ksYyl9Y2k9YTtkaT1yZShiLmZpcnN0Q2hpbGQpfWVsc2UgYS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTEwMjV8MixlaT0hMSxjaT1hfX1mdW5jdGlvbiBqaShhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47Y2k9YX1cbmZ1bmN0aW9uIGtpKGEpe2lmKGEhPT1jaSlyZXR1cm4hMTtpZighZWkpcmV0dXJuIGppKGEpLGVpPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhb2UoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPWRpO2I7KWZpKGEsYiksYj1yZShiLm5leHRTaWJsaW5nKTtqaShhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHUoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoYz09PWllKXtpZigwPT09Yil7ZGk9cmUoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZSBjIT09aGUmJmMhPT1rZSYmYyE9PWplfHxiKyt9YT1hLm5leHRTaWJsaW5nfWRpPW51bGx9fWVsc2UgZGk9Y2k/cmUoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9XG5mdW5jdGlvbiBsaSgpe2RpPWNpPW51bGw7ZWk9ITF9dmFyIG1pPUVhLlJlYWN0Q3VycmVudE93bmVyLHdnPSExO2Z1bmN0aW9uIFIoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9naChiLG51bGwsYyxkKTpmaChiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBuaShhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7dmcoYixlKTtkPUloKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXdnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksb2koYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1IoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBwaShhLGIsYyxkLGUsZil7aWYobnVsbD09PWEpe3ZhciBnPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmIXFpKGcpJiZ2b2lkIDA9PT1nLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1nLHJpKGEsYixnLGQsZSxmKTthPWNoKGMudHlwZSxudWxsLGQsbnVsbCxiLm1vZGUsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWc9YS5jaGlsZDtpZihlPGYmJihlPWcubWVtb2l6ZWRQcm9wcyxjPWMuY29tcGFyZSxjPW51bGwhPT1jP2M6cWYsYyhlLGQpJiZhLnJlZj09PWIucmVmKSlyZXR1cm4gb2koYSxiLGYpO2IuZWZmZWN0VGFnfD0xO2E9YWgoZyxkLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIHJpKGEsYixjLGQsZSxmKXtyZXR1cm4gbnVsbCE9PWEmJnFmKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZiYmKHdnPSExLGU8Zik/b2koYSxiLGYpOnNpKGEsYixjLGQsZil9ZnVuY3Rpb24gdGkoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiBzaShhLGIsYyxkLGUpe3ZhciBmPUwoYyk/RGY6Si5jdXJyZW50O2Y9RWYoYixmKTt2ZyhiLGUpO2M9SWgoYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhd2cpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmVmZmVjdFRhZyY9LTUxNyxhLmV4cGlyYXRpb25UaW1lPD1lJiYoYS5leHBpcmF0aW9uVGltZT0wKSxvaShhLGIsZSk7Yi5lZmZlY3RUYWd8PTE7UihhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHVpKGEsYixjLGQsZSl7aWYoTChjKSl7dmFyIGY9ITA7SmYoYil9ZWxzZSBmPSExO3ZnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxVZyhiLGMsZCxlKSxXZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD14ZyhsKToobD1MKGMpP0RmOkouY3VycmVudCxsPUVmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLEM9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO0N8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZWZyhiLGcsZCxsKTt5Zz0hMTt2YXIgeT1iLm1lbW9pemVkU3RhdGU7az1nLnN0YXRlPXk7dmFyIEg9Yi51cGRhdGVRdWV1ZTtudWxsIT09SCYmKEhnKGIsSCxkLGcsZSksaz1iLm1lbW9pemVkU3RhdGUpO2ghPT1kfHx5IT09a3x8Sy5jdXJyZW50fHx5Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihPZyhiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9eWd8fFRnKGIsYyxoLGQseSxrLGwpKT8oQ3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlxuZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzLGcucHJvcHM9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOm1nKGIudHlwZSxoKSxrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGUsXCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXhnKGwpOihsPUwoYyk/RGY6Si5jdXJyZW50LGw9RWYoYixsKSksbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcywoQz1cblwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmVmcoYixnLGQsbCkseWc9ITEsaz1iLm1lbW9pemVkU3RhdGUseT1nLnN0YXRlPWssSD1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1IJiYoSGcoYixILGQsZyxlKSx5PWIubWVtb2l6ZWRTdGF0ZSksaCE9PWR8fGshPT15fHxLLmN1cnJlbnR8fHlnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKE9nKGIsYyxtLGQpLHk9Yi5tZW1vaXplZFN0YXRlKSwobT15Z3x8VGcoYixjLGgsZCxrLHksbCkpPyhDfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8XG4oXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQseSxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHksbCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPVxuZCxiLm1lbW9pemVkU3RhdGU9eSksZy5wcm9wcz1kLGcuc3RhdGU9eSxnLmNvbnRleHQ9bCxkPW0pOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gdmkoYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gdmkoYSxiLGMsZCxlLGYpe3RpKGEsYik7dmFyIGc9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZLZihiLGMsITEpLG9pKGEsYixmKTtkPWIuc3RhdGVOb2RlO21pLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPWZoKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9ZmgoYixudWxsLGgsZikpOlIoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmS2YoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiB3aShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P0hmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJkhmKGEsYi5jb250ZXh0LCExKTttaChhLGIuY29udGFpbmVySW5mbyl9XG52YXIgeGk9e2RlaHlkcmF0ZWQ6bnVsbCxyZXRyeVRpbWU6MH07XG5mdW5jdGlvbiB5aShhLGIsYyl7dmFyIGQ9Yi5tb2RlLGU9Yi5wZW5kaW5nUHJvcHMsZj1NLmN1cnJlbnQsZz0hMSxoOyhoPTAhPT0oYi5lZmZlY3RUYWcmNjQpKXx8KGg9MCE9PShmJjIpJiYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpKTtoPyhnPSEwLGIuZWZmZWN0VGFnJj0tNjUpOm51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlfHx2b2lkIDA9PT1lLmZhbGxiYWNrfHwhMD09PWUudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fChmfD0xKTtJKE0sZiYxLGIpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1lLmZhbGxiYWNrJiZpaShiKTtpZihnKXtnPWUuZmFsbGJhY2s7ZT1laChudWxsLGQsMCxudWxsKTtlLnJldHVybj1iO2lmKDA9PT0oYi5tb2RlJjIpKWZvcihhPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGUuY2hpbGQ9YTtudWxsIT09YTspYS5yZXR1cm49ZSxhPWEuc2libGluZztjPWVoKGcsZCxjLG51bGwpO2MucmV0dXJuPVxuYjtlLnNpYmxpbmc9YztiLm1lbW9pemVkU3RhdGU9eGk7Yi5jaGlsZD1lO3JldHVybiBjfWQ9ZS5jaGlsZHJlbjtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1naChiLG51bGwsZCxjKX1pZihudWxsIT09YS5tZW1vaXplZFN0YXRlKXthPWEuY2hpbGQ7ZD1hLnNpYmxpbmc7aWYoZyl7ZT1lLmZhbGxiYWNrO2M9YWgoYSxhLnBlbmRpbmdQcm9wcywwKTtjLnJldHVybj1iO2lmKDA9PT0oYi5tb2RlJjIpJiYoZz1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxnIT09YS5jaGlsZCkpZm9yKGMuY2hpbGQ9ZztudWxsIT09ZzspZy5yZXR1cm49YyxnPWcuc2libGluZztkPWFoKGQsZSxkLmV4cGlyYXRpb25UaW1lKTtkLnJldHVybj1iO2Muc2libGluZz1kO2MuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2IubWVtb2l6ZWRTdGF0ZT14aTtiLmNoaWxkPWM7cmV0dXJuIGR9Yz1maChiLGEuY2hpbGQsZS5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9XG5udWxsO3JldHVybiBiLmNoaWxkPWN9YT1hLmNoaWxkO2lmKGcpe2c9ZS5mYWxsYmFjaztlPWVoKG51bGwsZCwwLG51bGwpO2UucmV0dXJuPWI7ZS5jaGlsZD1hO251bGwhPT1hJiYoYS5yZXR1cm49ZSk7aWYoMD09PShiLm1vZGUmMikpZm9yKGE9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZS5jaGlsZD1hO251bGwhPT1hOylhLnJldHVybj1lLGE9YS5zaWJsaW5nO2M9ZWgoZyxkLGMsbnVsbCk7Yy5yZXR1cm49YjtlLnNpYmxpbmc9YztjLmVmZmVjdFRhZ3w9MjtlLmNoaWxkRXhwaXJhdGlvblRpbWU9MDtiLm1lbW9pemVkU3RhdGU9eGk7Yi5jaGlsZD1lO3JldHVybiBjfWIubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPWZoKGIsYSxlLmNoaWxkcmVuLGMpfVxuZnVuY3Rpb24gemkoYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3VnKGEucmV0dXJuLGIpfWZ1bmN0aW9uIEFpKGEsYixjLGQsZSxmKXt2YXIgZz1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWc/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLGxhc3Q6ZCx0YWlsOmMsdGFpbEV4cGlyYXRpb246MCx0YWlsTW9kZTplLGxhc3RFZmZlY3Q6Zn06KGcuaXNCYWNrd2FyZHM9YixnLnJlbmRlcmluZz1udWxsLGcubGFzdD1kLGcudGFpbD1jLGcudGFpbEV4cGlyYXRpb249MCxnLnRhaWxNb2RlPWUsZy5sYXN0RWZmZWN0PWYpfVxuZnVuY3Rpb24gQmkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtSKGEsYixkLmNoaWxkcmVuLGMpO2Q9TS5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZWZmZWN0VGFnfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZWZmZWN0VGFnJjY0KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJnppKGEsYyk7ZWxzZSBpZigxOT09PWEudGFnKXppKGEsYyk7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUkoTSxkLGIpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1xaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO0FpKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PXFoKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX1BaShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6QWkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIG9pKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTt2YXIgZD1iLmV4cGlyYXRpb25UaW1lOzAhPT1kJiZKZyhkKTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IodSgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9YWgoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9YWgoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfWZ1bmN0aW9uIENpKGEpe2EuZWZmZWN0VGFnfD00fXZhciBIaSxJaSxKaSxLaTtcbkhpPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtJaT1mdW5jdGlvbigpe307XG5KaT1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihmIT09ZCl7dmFyIGc9Yi5zdGF0ZU5vZGU7bGgoaWguY3VycmVudCk7YT1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpmPUFiKGcsZik7ZD1BYihnLGQpO2E9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmY9SWIoZyxmKTtkPUliKGcsZCk7YT1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Zj1uKHt9LGYse3ZhbHVlOnZvaWQgMH0pO2Q9bih7fSxkLHt2YWx1ZTp2b2lkIDB9KTthPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmY9S2IoZyxmKTtkPUtiKGcsZCk7YT1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBmLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihnLm9uY2xpY2s9YWUpfVlkKGMsZCk7dmFyIGgsaztjPW51bGw7Zm9yKGggaW4gZilpZighZC5oYXNPd25Qcm9wZXJ0eShoKSYmZi5oYXNPd25Qcm9wZXJ0eShoKSYmbnVsbCE9ZltoXSlpZihcInN0eWxlXCI9PT1cbmgpZm9yKGsgaW4gZz1mW2hdLGcpZy5oYXNPd25Qcm9wZXJ0eShrKSYmKGN8fChjPXt9KSxjW2tdPVwiXCIpO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1oJiZcImNoaWxkcmVuXCIhPT1oJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJlwiYXV0b0ZvY3VzXCIhPT1oJiYoaWEuaGFzT3duUHJvcGVydHkoaCk/YXx8KGE9W10pOihhPWF8fFtdKS5wdXNoKGgsbnVsbCkpO2ZvcihoIGluIGQpe3ZhciBsPWRbaF07Zz1udWxsIT1mP2ZbaF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoaCkmJmwhPT1nJiYobnVsbCE9bHx8bnVsbCE9ZykpaWYoXCJzdHlsZVwiPT09aClpZihnKXtmb3IoayBpbiBnKSFnLmhhc093blByb3BlcnR5KGspfHxsJiZsLmhhc093blByb3BlcnR5KGspfHwoY3x8KGM9e30pLGNba109XCJcIik7Zm9yKGsgaW4gbClsLmhhc093blByb3BlcnR5KGspJiZnW2tdIT09bFtrXSYmKGN8fChjPXt9KSxcbmNba109bFtrXSl9ZWxzZSBjfHwoYXx8KGE9W10pLGEucHVzaChoLGMpKSxjPWw7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/KGw9bD9sLl9faHRtbDp2b2lkIDAsZz1nP2cuX19odG1sOnZvaWQgMCxudWxsIT1sJiZnIT09bCYmKGE9YXx8W10pLnB1c2goaCxcIlwiK2wpKTpcImNoaWxkcmVuXCI9PT1oP2c9PT1sfHxcInN0cmluZ1wiIT09dHlwZW9mIGwmJlwibnVtYmVyXCIhPT10eXBlb2YgbHx8KGE9YXx8W10pLnB1c2goaCxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmKGlhLmhhc093blByb3BlcnR5KGgpPyhudWxsIT1sJiYkZChlLGgpLGF8fGc9PT1sfHwoYT1bXSkpOihhPWF8fFtdKS5wdXNoKGgsbCkpfWMmJihhPWF8fFtdKS5wdXNoKFwic3R5bGVcIixjKTtlPWE7KGIudXBkYXRlUXVldWU9ZSkmJkNpKGIpfX07S2k9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJkNpKGIpfTtcbmZ1bmN0aW9uIExpKGEsYil7c3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIE1pKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkwoYS50eXBlKSYmRmYoYSk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImNDA5Nj8oYS5lZmZlY3RUYWc9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMzpuaChhKTtHZihhKTtiPWEuZWZmZWN0VGFnO2lmKDAhPT0oYiY2NCkpdGhyb3cgRXJyb3IodSgyODUpKTthLmVmZmVjdFRhZz1iJi00MDk3fDY0O3JldHVybiBhO2Nhc2UgNTpyZXR1cm4gcGgoYSksbnVsbDtjYXNlIDEzOnJldHVybiBHKE0sYSksYj1hLmVmZmVjdFRhZyxiJjQwOTY/KGEuZWZmZWN0VGFnPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBHKE0sYSksbnVsbDtjYXNlIDQ6cmV0dXJuIG5oKGEpLG51bGw7Y2FzZSAxMDpyZXR1cm4gdGcoYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1mdW5jdGlvbiBOaShhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOlhhKGIpfX1cbnZhciBPaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtmdW5jdGlvbiBQaShhLGIpe3ZhciBjPWIuc291cmNlLGQ9Yi5zdGFjaztudWxsPT09ZCYmbnVsbCE9PWMmJihkPVhhKGMpKTtudWxsIT09YyYmV2EoYy50eXBlKTtiPWIudmFsdWU7bnVsbCE9PWEmJjE9PT1hLnRhZyYmV2EoYS50eXBlKTt0cnl7Y29uc29sZS5lcnJvcihiKX1jYXRjaChlKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX19ZnVuY3Rpb24gUWkoYSxiKXt0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGMpe1JpKGEsYyl9fWZ1bmN0aW9uIFNpKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe1JpKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIFRpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlVpKDIsMCxiKTticmVhaztjYXNlIDE6aWYoYi5lZmZlY3RUYWcmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzptZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifWJyZWFrO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgxNjMpKTt9fVxuZnVuY3Rpb24gVWkoYSxiLGMpe2M9Yy51cGRhdGVRdWV1ZTtjPW51bGwhPT1jP2MubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1jKXt2YXIgZD1jPWMubmV4dDtkb3tpZigwIT09KGQudGFnJmEpKXt2YXIgZT1kLmRlc3Ryb3k7ZC5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1lJiZlKCl9MCE9PShkLnRhZyZiKSYmKGU9ZC5jcmVhdGUsZC5kZXN0cm95PWUoKSk7ZD1kLm5leHR9d2hpbGUoZCE9PWMpfX1cbmZ1bmN0aW9uIFZpKGEsYixjKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgV2kmJldpKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGQ9YS5uZXh0O2ZnKDk3PGM/OTc6YyxmdW5jdGlvbigpe3ZhciBhPWQ7ZG97dmFyIGM9YS5kZXN0cm95O2lmKHZvaWQgMCE9PWMpe3ZhciBnPWI7dHJ5e2MoKX1jYXRjaChoKXtSaShnLGgpfX1hPWEubmV4dH13aGlsZShhIT09ZCl9KX1icmVhaztjYXNlIDE6U2koYik7Yz1iLnN0YXRlTm9kZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5jb21wb25lbnRXaWxsVW5tb3VudCYmUWkoYixjKTticmVhaztjYXNlIDU6U2koYik7YnJlYWs7Y2FzZSA0OlhpKGEsYixjKX19XG5mdW5jdGlvbiBZaShhKXt2YXIgYj1hLmFsdGVybmF0ZTthLnJldHVybj1udWxsO2EuY2hpbGQ9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLmFsdGVybmF0ZT1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO251bGwhPT1iJiZZaShiKX1mdW5jdGlvbiBaaShhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uICRpKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKFppKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn10aHJvdyBFcnJvcih1KDE2MCkpO31iPWMuc3RhdGVOb2RlO3N3aXRjaChjLnRhZyl7Y2FzZSA1OnZhciBkPSExO2JyZWFrO2Nhc2UgMzpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgxNjEpKTt9Yy5lZmZlY3RUYWcmMTYmJihUYihiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8WmkoYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO1xuaWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1mb3IodmFyIGU9YTs7KXt2YXIgZj01PT09ZS50YWd8fDY9PT1lLnRhZztpZihmKXt2YXIgZz1mP2Uuc3RhdGVOb2RlOmUuc3RhdGVOb2RlLmluc3RhbmNlO2lmKGMpaWYoZCl7Zj1iO3ZhciBoPWc7Zz1jOzg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoaCxnKTpmLmluc2VydEJlZm9yZShoLGcpfWVsc2UgYi5pbnNlcnRCZWZvcmUoZyxjKTtlbHNlIGQ/KGg9Yiw4PT09aC5ub2RlVHlwZT8oZj1oLnBhcmVudE5vZGUsZi5pbnNlcnRCZWZvcmUoZyxoKSk6KGY9aCxmLmFwcGVuZENoaWxkKGcpKSxoPWguX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09aCYmdm9pZCAwIT09aHx8bnVsbCE9PWYub25jbGlja3x8KGYub25jbGljaz1hZSkpOmIuYXBwZW5kQ2hpbGQoZyl9ZWxzZSBpZig0IT09XG5lLnRhZyYmbnVsbCE9PWUuY2hpbGQpe2UuY2hpbGQucmV0dXJuPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWUuc2libGluZzspe2lmKG51bGw9PT1lLnJldHVybnx8ZS5yZXR1cm49PT1hKXJldHVybjtlPWUucmV0dXJufWUuc2libGluZy5yZXR1cm49ZS5yZXR1cm47ZT1lLnNpYmxpbmd9fVxuZnVuY3Rpb24gWGkoYSxiLGMpe2Zvcih2YXIgZD1iLGU9ITEsZixnOzspe2lmKCFlKXtlPWQucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZSl0aHJvdyBFcnJvcih1KDE2MCkpO2Y9ZS5zdGF0ZU5vZGU7c3dpdGNoKGUudGFnKXtjYXNlIDU6Zz0hMTticmVhayBhO2Nhc2UgMzpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGE7Y2FzZSA0OmY9Zi5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYX1lPWUucmV0dXJufWU9ITB9aWYoNT09PWQudGFnfHw2PT09ZC50YWcpe2E6Zm9yKHZhciBoPWEsaz1kLGw9YyxtPWs7OylpZihWaShoLG0sbCksbnVsbCE9PW0uY2hpbGQmJjQhPT1tLnRhZyltLmNoaWxkLnJldHVybj1tLG09bS5jaGlsZDtlbHNle2lmKG09PT1rKWJyZWFrO2Zvcig7bnVsbD09PW0uc2libGluZzspe2lmKG51bGw9PT1tLnJldHVybnx8bS5yZXR1cm49PT1rKWJyZWFrIGE7bT1tLnJldHVybn1tLnNpYmxpbmcucmV0dXJuPW0ucmV0dXJuO209bS5zaWJsaW5nfWc/KGg9XG5mLGs9ZC5zdGF0ZU5vZGUsOD09PWgubm9kZVR5cGU/aC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGspOmgucmVtb3ZlQ2hpbGQoaykpOmYucmVtb3ZlQ2hpbGQoZC5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWQudGFnKXtpZihudWxsIT09ZC5jaGlsZCl7Zj1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2c9ITA7ZC5jaGlsZC5yZXR1cm49ZDtkPWQuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoVmkoYSxkLGMpLG51bGwhPT1kLmNoaWxkKXtkLmNoaWxkLnJldHVybj1kO2Q9ZC5jaGlsZDtjb250aW51ZX1pZihkPT09YilicmVhaztmb3IoO251bGw9PT1kLnNpYmxpbmc7KXtpZihudWxsPT09ZC5yZXR1cm58fGQucmV0dXJuPT09YilyZXR1cm47ZD1kLnJldHVybjs0PT09ZC50YWcmJihlPSExKX1kLnNpYmxpbmcucmV0dXJuPWQucmV0dXJuO2Q9ZC5zaWJsaW5nfX1cbmZ1bmN0aW9uIGFqKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6VWkoNCw4LGIpO2JyZWFrO2Nhc2UgMTpicmVhaztjYXNlIDU6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzLGU9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7YT1iLnR5cGU7dmFyIGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWYpe2NbdmVdPWQ7XCJpbnB1dFwiPT09YSYmXCJyYWRpb1wiPT09ZC50eXBlJiZudWxsIT1kLm5hbWUmJkNiKGMsZCk7WmQoYSxlKTtiPVpkKGEsZCk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrPTIpe3ZhciBnPWZbZV0saD1mW2UrMV07XCJzdHlsZVwiPT09Zz9XZChjLGgpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/U2IoYyxoKTpcImNoaWxkcmVuXCI9PT1nP1RiKGMsaCk6dmIoYyxnLGgsYil9c3dpdGNoKGEpe2Nhc2UgXCJpbnB1dFwiOkViKGMsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6TWIoYyxcbmQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxjLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFkLm11bHRpcGxlLGE9ZC52YWx1ZSxudWxsIT1hP0piKGMsISFkLm11bHRpcGxlLGEsITEpOmIhPT0hIWQubXVsdGlwbGUmJihudWxsIT1kLmRlZmF1bHRWYWx1ZT9KYihjLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk6SmIoYywhIWQubXVsdGlwbGUsZC5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fX1icmVhaztjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPWIubWVtb2l6ZWRQcm9wczticmVhaztjYXNlIDM6Yj1iLnN0YXRlTm9kZTtiLmh5ZHJhdGUmJihiLmh5ZHJhdGU9ITEsTGMoYi5jb250YWluZXJJbmZvKSk7YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmM9YjtudWxsPT09Yi5tZW1vaXplZFN0YXRlP2Q9ITE6KGQ9ITAsYz1iLmNoaWxkLGJqPWNnKCkpO1xuaWYobnVsbCE9PWMpYTpmb3IoYT1jOzspe2lmKDU9PT1hLnRhZylmPWEuc3RhdGVOb2RlLGQ/KGY9Zi5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5zZXRQcm9wZXJ0eT9mLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmYuZGlzcGxheT1cIm5vbmVcIik6KGY9YS5zdGF0ZU5vZGUsZT1hLm1lbW9pemVkUHJvcHMuc3R5bGUsZT12b2lkIDAhPT1lJiZudWxsIT09ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ZS5kaXNwbGF5Om51bGwsZi5zdHlsZS5kaXNwbGF5PVZkKFwiZGlzcGxheVwiLGUpKTtlbHNlIGlmKDY9PT1hLnRhZylhLnN0YXRlTm9kZS5ub2RlVmFsdWU9ZD9cIlwiOmEubWVtb2l6ZWRQcm9wcztlbHNlIGlmKDEzPT09YS50YWcmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUmJm51bGw9PT1hLm1lbW9pemVkU3RhdGUuZGVoeWRyYXRlZCl7Zj1hLmNoaWxkLnNpYmxpbmc7Zi5yZXR1cm49YTthPWY7Y29udGludWV9ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49XG5hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YylicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1jKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWNqKGIpO2JyZWFrO2Nhc2UgMTk6Y2ooYik7YnJlYWs7Y2FzZSAxNzpicmVhaztjYXNlIDIwOmJyZWFrO2Nhc2UgMjE6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDE2MykpO319ZnVuY3Rpb24gY2ooYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgT2kpO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1kai5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX12YXIgZWo9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7XG5mdW5jdGlvbiBmaihhLGIsYyl7Yz1CZyhjLG51bGwpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe2dqfHwoZ2o9ITAsaGo9ZCk7UGkoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBpaihhLGIsYyl7Yz1CZyhjLG51bGwpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtQaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09amo/amo9bmV3IFNldChbdGhpc10pOmpqLmFkZCh0aGlzKSxQaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY31cbnZhciBraj1NYXRoLmNlaWwsbGo9RWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixtaj1FYS5SZWFjdEN1cnJlbnRPd25lcixTPTAsbmo9OCxvaj0xNixwaj0zMixxaj0wLHJqPTEsc2o9Mix0aj0zLHVqPTQsdmo9NSxUPVMsVT1udWxsLFY9bnVsbCxXPTAsWD1xaix3aj1udWxsLHhqPTEwNzM3NDE4MjMseWo9MTA3Mzc0MTgyMyx6aj1udWxsLEFqPTAsQmo9ITEsYmo9MCxDaj01MDAsWT1udWxsLGdqPSExLGhqPW51bGwsamo9bnVsbCxEaj0hMSxFaj1udWxsLEZqPTkwLEdqPW51bGwsSGo9MCxJaj1udWxsLEpqPTA7ZnVuY3Rpb24gUGcoKXtyZXR1cm4oVCYob2p8cGopKSE9PVM/MTA3Mzc0MTgyMS0oY2coKS8xMHwwKTowIT09Smo/Smo6Smo9MTA3Mzc0MTgyMS0oY2coKS8xMHwwKX1cbmZ1bmN0aW9uIFFnKGEsYixjKXtiPWIubW9kZTtpZigwPT09KGImMikpcmV0dXJuIDEwNzM3NDE4MjM7dmFyIGQ9ZGcoKTtpZigwPT09KGImNCkpcmV0dXJuIDk5PT09ZD8xMDczNzQxODIzOjEwNzM3NDE4MjI7aWYoKFQmb2opIT09UylyZXR1cm4gVztpZihudWxsIT09YylhPWxnKGEsYy50aW1lb3V0TXN8MHx8NUUzLDI1MCk7ZWxzZSBzd2l0Y2goZCl7Y2FzZSA5OTphPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA5ODphPWxnKGEsMTUwLDEwMCk7YnJlYWs7Y2FzZSA5NzpjYXNlIDk2OmE9bGcoYSw1RTMsMjUwKTticmVhaztjYXNlIDk1OmE9MjticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMzI2KSk7fW51bGwhPT1VJiZhPT09VyYmLS1hO3JldHVybiBhfVxuZnVuY3Rpb24gUmcoYSxiKXtpZig1MDxIail0aHJvdyBIaj0wLElqPW51bGwsRXJyb3IodSgxODUpKTthPUtqKGEsYik7aWYobnVsbCE9PWEpe3ZhciBjPWRnKCk7MTA3Mzc0MTgyMz09PWI/KFQmbmopIT09UyYmKFQmKG9qfHBqKSk9PT1TP0xqKGEpOihaKGEpLFQ9PT1TJiZqZygpKTpaKGEpOyhUJjQpPT09U3x8OTghPT1jJiY5OSE9PWN8fChudWxsPT09R2o/R2o9bmV3IE1hcChbW2EsYl1dKTooYz1Hai5nZXQoYSksKHZvaWQgMD09PWN8fGM+YikmJkdqLnNldChhLGIpKSl9fVxuZnVuY3Rpb24gS2ooYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBkPWEucmV0dXJuLGU9bnVsbDtpZihudWxsPT09ZCYmMz09PWEudGFnKWU9YS5zdGF0ZU5vZGU7ZWxzZSBmb3IoO251bGwhPT1kOyl7Yz1kLmFsdGVybmF0ZTtkLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGQuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7aWYobnVsbD09PWQucmV0dXJuJiYzPT09ZC50YWcpe2U9ZC5zdGF0ZU5vZGU7YnJlYWt9ZD1kLnJldHVybn1udWxsIT09ZSYmKFU9PT1lJiYoSmcoYiksWD09PXVqJiZNaihlLFcpKSxOaihlLGIpKTtyZXR1cm4gZX1cbmZ1bmN0aW9uIE9qKGEpe3ZhciBiPWEubGFzdEV4cGlyZWRUaW1lO2lmKDAhPT1iKXJldHVybiBiO2I9YS5maXJzdFBlbmRpbmdUaW1lO2lmKCFQaihhLGIpKXJldHVybiBiO2I9YS5sYXN0UGluZ2VkVGltZTthPWEubmV4dEtub3duUGVuZGluZ0xldmVsO3JldHVybiBiPmE/YjphfVxuZnVuY3Rpb24gWihhKXtpZigwIT09YS5sYXN0RXhwaXJlZFRpbWUpYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjMsYS5jYWxsYmFja1ByaW9yaXR5PTk5LGEuY2FsbGJhY2tOb2RlPWhnKExqLmJpbmQobnVsbCxhKSk7ZWxzZXt2YXIgYj1PaihhKSxjPWEuY2FsbGJhY2tOb2RlO2lmKDA9PT1iKW51bGwhPT1jJiYoYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MCxhLmNhbGxiYWNrUHJpb3JpdHk9OTApO2Vsc2V7dmFyIGQ9UGcoKTsxMDczNzQxODIzPT09Yj9kPTk5OjE9PT1ifHwyPT09Yj9kPTk1OihkPTEwKigxMDczNzQxODIxLWIpLTEwKigxMDczNzQxODIxLWQpLGQ9MD49ZD85OToyNTA+PWQ/OTg6NTI1MD49ZD85Nzo5NSk7aWYobnVsbCE9PWMpe3ZhciBlPWEuY2FsbGJhY2tQcmlvcml0eTtpZihhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9PT1iJiZlPj1kKXJldHVybjtjIT09WGYmJk5mKGMpfWEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT1cbmI7YS5jYWxsYmFja1ByaW9yaXR5PWQ7Yj0xMDczNzQxODIzPT09Yj9oZyhMai5iaW5kKG51bGwsYSkpOmdnKGQsUWouYmluZChudWxsLGEpLHt0aW1lb3V0OjEwKigxMDczNzQxODIxLWIpLWNnKCl9KTthLmNhbGxiYWNrTm9kZT1ifX19XG5mdW5jdGlvbiBRaihhLGIpe0pqPTA7aWYoYilyZXR1cm4gYj1QZygpLFJqKGEsYiksWihhKSxudWxsO3ZhciBjPU9qKGEpO2lmKDAhPT1jKXtiPWEuY2FsbGJhY2tOb2RlO2lmKChUJihvanxwaikpIT09Uyl0aHJvdyBFcnJvcih1KDMyNykpO1NqKCk7YT09PVUmJmM9PT1XfHxUaihhLGMpO2lmKG51bGwhPT1WKXt2YXIgZD1UO1R8PW9qO3ZhciBlPVVqKGEpO2RvIHRyeXtWaigpO2JyZWFrfWNhdGNoKGgpe1dqKGEsaCl9d2hpbGUoMSk7cmcoKTtUPWQ7bGouY3VycmVudD1lO2lmKFg9PT1yail0aHJvdyBiPXdqLFRqKGEsYyksTWooYSxjKSxaKGEpLGI7aWYobnVsbD09PVYpc3dpdGNoKGU9YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZSxhLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9YyxkPVgsVT1udWxsLGQpe2Nhc2UgcWo6Y2FzZSByajp0aHJvdyBFcnJvcih1KDM0NSkpO2Nhc2Ugc2o6UmooYSwyPGM/MjpjKTticmVhaztjYXNlIHRqOk1qKGEsYyk7ZD1hLmxhc3RTdXNwZW5kZWRUaW1lO1xuYz09PWQmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1YaihlKSk7aWYoMTA3Mzc0MTgyMz09PXhqJiYoZT1iaitDai1jZygpLDEwPGUpKXtpZihCail7dmFyIGY9YS5sYXN0UGluZ2VkVGltZTtpZigwPT09Znx8Zj49Yyl7YS5sYXN0UGluZ2VkVGltZT1jO1RqKGEsYyk7YnJlYWt9fWY9T2ooYSk7aWYoMCE9PWYmJmYhPT1jKWJyZWFrO2lmKDAhPT1kJiZkIT09Yyl7YS5sYXN0UGluZ2VkVGltZT1kO2JyZWFrfWEudGltZW91dEhhbmRsZT1wZShZai5iaW5kKG51bGwsYSksZSk7YnJlYWt9WWooYSk7YnJlYWs7Y2FzZSB1ajpNaihhLGMpO2Q9YS5sYXN0U3VzcGVuZGVkVGltZTtjPT09ZCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPVhqKGUpKTtpZihCaiYmKGU9YS5sYXN0UGluZ2VkVGltZSwwPT09ZXx8ZT49Yykpe2EubGFzdFBpbmdlZFRpbWU9YztUaihhLGMpO2JyZWFrfWU9T2ooYSk7aWYoMCE9PWUmJmUhPT1jKWJyZWFrO2lmKDAhPT1kJiZkIT09Yyl7YS5sYXN0UGluZ2VkVGltZT1cbmQ7YnJlYWt9MTA3Mzc0MTgyMyE9PXlqP2Q9MTAqKDEwNzM3NDE4MjEteWopLWNnKCk6MTA3Mzc0MTgyMz09PXhqP2Q9MDooZD0xMCooMTA3Mzc0MTgyMS14aiktNUUzLGU9Y2coKSxjPTEwKigxMDczNzQxODIxLWMpLWUsZD1lLWQsMD5kJiYoZD0wKSxkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKmtqKGQvMTk2MCkpLWQsYzxkJiYoZD1jKSk7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPXBlKFlqLmJpbmQobnVsbCxhKSxkKTticmVha31ZaihhKTticmVhaztjYXNlIHZqOmlmKDEwNzM3NDE4MjMhPT14aiYmbnVsbCE9PXpqKXtmPXhqO3ZhciBnPXpqO2Q9Zy5idXN5TWluRHVyYXRpb25Nc3wwOzA+PWQ/ZD0wOihlPWcuYnVzeURlbGF5TXN8MCxmPWNnKCktKDEwKigxMDczNzQxODIxLWYpLShnLnRpbWVvdXRNc3wwfHw1RTMpKSxkPWY8PWU/MDplK2QtZik7aWYoMTA8ZCl7TWooYSxjKTthLnRpbWVvdXRIYW5kbGU9XG5wZShZai5iaW5kKG51bGwsYSksZCk7YnJlYWt9fVlqKGEpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMjkpKTt9WihhKTtpZihhLmNhbGxiYWNrTm9kZT09PWIpcmV0dXJuIFFqLmJpbmQobnVsbCxhKX19cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBMaihhKXt2YXIgYj1hLmxhc3RFeHBpcmVkVGltZTtiPTAhPT1iP2I6MTA3Mzc0MTgyMztpZihhLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9PT1iKVlqKGEpO2Vsc2V7aWYoKFQmKG9qfHBqKSkhPT1TKXRocm93IEVycm9yKHUoMzI3KSk7U2ooKTthPT09VSYmYj09PVd8fFRqKGEsYik7aWYobnVsbCE9PVYpe3ZhciBjPVQ7VHw9b2o7dmFyIGQ9VWooYSk7ZG8gdHJ5e1pqKCk7YnJlYWt9Y2F0Y2goZSl7V2ooYSxlKX13aGlsZSgxKTtyZygpO1Q9Yztsai5jdXJyZW50PWQ7aWYoWD09PXJqKXRocm93IGM9d2osVGooYSxiKSxNaihhLGIpLFooYSksYztpZihudWxsIT09Vil0aHJvdyBFcnJvcih1KDI2MSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPWI7VT1udWxsO1lqKGEpO1ooYSl9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gYWsoKXtpZihudWxsIT09R2ope3ZhciBhPUdqO0dqPW51bGw7YS5mb3JFYWNoKGZ1bmN0aW9uKGEsYyl7UmooYyxhKTtaKGMpfSk7amcoKX19ZnVuY3Rpb24gYmsoYSxiKXt2YXIgYz1UO1R8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7VD1jLFQ9PT1TJiZqZygpfX1mdW5jdGlvbiBjayhhLGIpe3ZhciBjPVQ7VCY9LTI7VHw9bmo7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7VD1jLFQ9PT1TJiZqZygpfX1cbmZ1bmN0aW9uIFRqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLHFlKGMpKTtpZihudWxsIT09Vilmb3IoYz1WLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6dmFyIGU9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1lJiZ2b2lkIDAhPT1lJiZGZihkKTticmVhaztjYXNlIDM6bmgoZCk7R2YoZCk7YnJlYWs7Y2FzZSA1OnBoKGQpO2JyZWFrO2Nhc2UgNDpuaChkKTticmVhaztjYXNlIDEzOkcoTSxkKTticmVhaztjYXNlIDE5OkcoTSxkKTticmVhaztjYXNlIDEwOnRnKGQpfWM9Yy5yZXR1cm59VT1hO1Y9YWgoYS5jdXJyZW50LG51bGwsYik7Vz1iO1g9cWo7d2o9bnVsbDt5aj14aj0xMDczNzQxODIzO3pqPW51bGw7QWo9MDtCaj0hMX1cbmZ1bmN0aW9uIFdqKGEsYil7ZG97dHJ5e3JnKCk7TWgoKTtpZihudWxsPT09Vnx8bnVsbD09PVYucmV0dXJuKXJldHVybiBYPXJqLHdqPWIsbnVsbDthOnt2YXIgYz1hLGQ9Vi5yZXR1cm4sZT1WLGY9YjtiPVc7ZS5lZmZlY3RUYWd8PTIwNDg7ZS5maXJzdEVmZmVjdD1lLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09ZiYmXCJvYmplY3RcIj09PXR5cGVvZiBmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi50aGVuKXt2YXIgZz1mLGg9MCE9PShNLmN1cnJlbnQmMSksaz1kO2Rve3ZhciBsO2lmKGw9MTM9PT1rLnRhZyl7dmFyIG09ay5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1tKWw9bnVsbCE9PW0uZGVoeWRyYXRlZD8hMDohMTtlbHNle3ZhciBDPWsubWVtb2l6ZWRQcm9wcztsPXZvaWQgMD09PUMuZmFsbGJhY2s/ITE6ITAhPT1DLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrPyEwOmg/ITE6ITB9fWlmKGwpe3ZhciB5PWsudXBkYXRlUXVldWU7aWYobnVsbD09PXkpe3ZhciBIPW5ldyBTZXQ7XG5ILmFkZChnKTtrLnVwZGF0ZVF1ZXVlPUh9ZWxzZSB5LmFkZChnKTtpZigwPT09KGsubW9kZSYyKSl7ay5lZmZlY3RUYWd8PTY0O2UuZWZmZWN0VGFnJj0tMjk4MTtpZigxPT09ZS50YWcpaWYobnVsbD09PWUuYWx0ZXJuYXRlKWUudGFnPTE3O2Vsc2V7dmFyIHo9QmcoMTA3Mzc0MTgyMyxudWxsKTt6LnRhZz0yO0RnKGUseil9ZS5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2JyZWFrIGF9Zj12b2lkIDA7ZT1iO3ZhciB0YT1jLnBpbmdDYWNoZTtudWxsPT09dGE/KHRhPWMucGluZ0NhY2hlPW5ldyBlaixmPW5ldyBTZXQsdGEuc2V0KGcsZikpOihmPXRhLmdldChnKSx2b2lkIDA9PT1mJiYoZj1uZXcgU2V0LHRhLnNldChnLGYpKSk7aWYoIWYuaGFzKGUpKXtmLmFkZChlKTt2YXIgcj1kay5iaW5kKG51bGwsYyxnLGUpO2cudGhlbihyLHIpfWsuZWZmZWN0VGFnfD00MDk2O2suZXhwaXJhdGlvblRpbWU9YjticmVhayBhfWs9ay5yZXR1cm59d2hpbGUobnVsbCE9PWspO2Y9RXJyb3IoKFdhKGUudHlwZSl8fFxuXCJBIFJlYWN0IGNvbXBvbmVudFwiKStcIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiK1hhKGUpKX1YIT09dmomJihYPXNqKTtmPU5pKGYsZSk7az1kO2Rve3N3aXRjaChrLnRhZyl7Y2FzZSAzOmc9ZjtrLmVmZmVjdFRhZ3w9NDA5NjtrLmV4cGlyYXRpb25UaW1lPWI7dmFyIHg9ZmooayxnLGIpO0VnKGsseCk7YnJlYWsgYTtjYXNlIDE6Zz1mO3ZhciBBPWsudHlwZSxwPWsuc3RhdGVOb2RlO2lmKDA9PT0oay5lZmZlY3RUYWcmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEEuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09cCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHAuY29tcG9uZW50RGlkQ2F0Y2gmJlxuKG51bGw9PT1qanx8IWpqLmhhcyhwKSkpKXtrLmVmZmVjdFRhZ3w9NDA5NjtrLmV4cGlyYXRpb25UaW1lPWI7dmFyIHQ9aWooayxnLGIpO0VnKGssdCk7YnJlYWsgYX19az1rLnJldHVybn13aGlsZShudWxsIT09ayl9Vj1layhWKX1jYXRjaCh2KXtiPXY7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9ZnVuY3Rpb24gVWooKXt2YXIgYT1sai5jdXJyZW50O2xqLmN1cnJlbnQ9TGg7cmV0dXJuIG51bGw9PT1hP0xoOmF9ZnVuY3Rpb24gSWcoYSxiKXthPHhqJiYyPGEmJih4aj1hKTtudWxsIT09YiYmYTx5aiYmMjxhJiYoeWo9YSx6aj1iKX1mdW5jdGlvbiBKZyhhKXthPkFqJiYoQWo9YSl9ZnVuY3Rpb24gWmooKXtmb3IoO251bGwhPT1WOylWPWZrKFYpfWZ1bmN0aW9uIFZqKCl7Zm9yKDtudWxsIT09ViYmIU9mKCk7KVY9ZmsoVil9XG5mdW5jdGlvbiBmayhhKXt2YXIgYj1nayhhLmFsdGVybmF0ZSxhLFcpO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09YiYmKGI9ZWsoYSkpO21qLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1cbmZ1bmN0aW9uIGVrKGEpe1Y9YTtkb3t2YXIgYj1WLmFsdGVybmF0ZTthPVYucmV0dXJuO2lmKDA9PT0oVi5lZmZlY3RUYWcmMjA0OCkpe2E6e3ZhciBjPWI7Yj1WO3ZhciBkPVc7dmFyIGU9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6YnJlYWs7Y2FzZSAxNjpicmVhaztjYXNlIDE1OmNhc2UgMDpicmVhaztjYXNlIDE6TChiLnR5cGUpJiZGZihiKTticmVhaztjYXNlIDM6bmgoYik7R2YoYik7ZT1iLnN0YXRlTm9kZTtlLnBlbmRpbmdDb250ZXh0JiYoZS5jb250ZXh0PWUucGVuZGluZ0NvbnRleHQsZS5wZW5kaW5nQ29udGV4dD1udWxsKTsobnVsbD09PWN8fG51bGw9PT1jLmNoaWxkKSYma2koYikmJkNpKGIpO0lpKGIpO2JyZWFrO2Nhc2UgNTpwaChiKTtkPWxoKGtoLmN1cnJlbnQpO3ZhciBmPWIudHlwZTtpZihudWxsIT09YyYmbnVsbCE9Yi5zdGF0ZU5vZGUpSmkoYyxiLGYsZSxkKSxjLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCk7ZWxzZSBpZihlKXt2YXIgZz1cbmxoKGloLmN1cnJlbnQpO2lmKGtpKGIpKXtlPWI7dmFyIGg9ZS5zdGF0ZU5vZGU7Yz1lLnR5cGU7dmFyIGs9ZS5tZW1vaXplZFByb3BzLGw9ZDtoW3VlXT1lO2hbdmVdPWs7Zj12b2lkIDA7ZD1oO3N3aXRjaChjKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGg9MDtoPGNjLmxlbmd0aDtoKyspRihjY1toXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsZCk7RihcImxvYWRcIixkKTticmVhaztjYXNlIFwiZm9ybVwiOkYoXCJyZXNldFwiLGQpO0YoXCJzdWJtaXRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpCYihkLGspO0YoXCJpbnZhbGlkXCIsZCk7JGQobCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFrLm11bHRpcGxlfTtGKFwiaW52YWxpZFwiLGQpOyRkKGwsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpMYihkLGspLEYoXCJpbnZhbGlkXCIsZCksJGQobCxcIm9uQ2hhbmdlXCIpfVlkKGMsayk7aD1udWxsO2ZvcihmIGluIGspay5oYXNPd25Qcm9wZXJ0eShmKSYmKGc9a1tmXSxcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2YgZz9kLnRleHRDb250ZW50IT09ZyYmKGg9W1wiY2hpbGRyZW5cIixnXSk6XCJudW1iZXJcIj09PXR5cGVvZiBnJiZkLnRleHRDb250ZW50IT09XCJcIitnJiYoaD1bXCJjaGlsZHJlblwiLFwiXCIrZ10pOmlhLmhhc093blByb3BlcnR5KGYpJiZudWxsIT1nJiYkZChsLGYpKTtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6eWIoZCk7R2IoZCxrLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjp5YihkKTtOYihkLGspO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay5vbkNsaWNrJiZcbihkLm9uY2xpY2s9YWUpfWY9aDtlLnVwZGF0ZVF1ZXVlPWY7ZT1udWxsIT09Zj8hMDohMTtlJiZDaShiKX1lbHNle2M9YjtsPWY7az1lO2g9OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQ7Zz09PU9iLmh0bWwmJihnPVBiKGwpKTtnPT09T2IuaHRtbD9cInNjcmlwdFwiPT09bD8oaz1oLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksay5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixoPWsucmVtb3ZlQ2hpbGQoay5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBrLmlzP2g9aC5jcmVhdGVFbGVtZW50KGwse2lzOmsuaXN9KTooaD1oLmNyZWF0ZUVsZW1lbnQobCksXCJzZWxlY3RcIj09PWwmJihsPWgsay5tdWx0aXBsZT9sLm11bHRpcGxlPSEwOmsuc2l6ZSYmKGwuc2l6ZT1rLnNpemUpKSk6aD1oLmNyZWF0ZUVsZW1lbnROUyhnLGwpO2s9aDtrW3VlXT1jO2tbdmVdPWU7SGkoayxiLCExLCExKTtiLnN0YXRlTm9kZT1rO2w9ZjtjPWU7dmFyIG09ZCxDPVpkKGwsYyk7c3dpdGNoKGwpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RihcImxvYWRcIixcbmspO2Q9YzticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZD0wO2Q8Y2MubGVuZ3RoO2QrKylGKGNjW2RdLGspO2Q9YzticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsayk7ZD1jO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkYoXCJlcnJvclwiLGspO0YoXCJsb2FkXCIsayk7ZD1jO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RihcInJlc2V0XCIsayk7RihcInN1Ym1pdFwiLGspO2Q9YzticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixrKTtkPWM7YnJlYWs7Y2FzZSBcImlucHV0XCI6QmIoayxjKTtkPUFiKGssYyk7RihcImludmFsaWRcIixrKTskZChtLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmQ9SWIoayxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6ay5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWMubXVsdGlwbGV9O2Q9bih7fSxjLHt2YWx1ZTp2b2lkIDB9KTtGKFwiaW52YWxpZFwiLGspOyRkKG0sXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpMYihrLFxuYyk7ZD1LYihrLGMpO0YoXCJpbnZhbGlkXCIsayk7JGQobSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6ZD1jfVlkKGwsZCk7aD12b2lkIDA7Zz1sO3ZhciB5PWssSD1kO2ZvcihoIGluIEgpaWYoSC5oYXNPd25Qcm9wZXJ0eShoKSl7dmFyIHo9SFtoXTtcInN0eWxlXCI9PT1oP1dkKHkseik6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD8oej16P3ouX19odG1sOnZvaWQgMCxudWxsIT16JiZTYih5LHopKTpcImNoaWxkcmVuXCI9PT1oP1wic3RyaW5nXCI9PT10eXBlb2Ygej8oXCJ0ZXh0YXJlYVwiIT09Z3x8XCJcIiE9PXopJiZUYih5LHopOlwibnVtYmVyXCI9PT10eXBlb2YgeiYmVGIoeSxcIlwiK3opOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmXCJhdXRvRm9jdXNcIiE9PWgmJihpYS5oYXNPd25Qcm9wZXJ0eShoKT9udWxsIT16JiYkZChtLGgpOm51bGwhPXomJnZiKHksaCx6LEMpKX1zd2l0Y2gobCl7Y2FzZSBcImlucHV0XCI6eWIoayk7XG5HYihrLGMsITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnliKGspO05iKGssYyk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWMudmFsdWUmJmsuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK3ViKGMudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZD1rO2QubXVsdGlwbGU9ISFjLm11bHRpcGxlO2s9Yy52YWx1ZTtudWxsIT1rP0piKGQsISFjLm11bHRpcGxlLGssITEpOm51bGwhPWMuZGVmYXVsdFZhbHVlJiZKYihkLCEhYy5tdWx0aXBsZSxjLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoay5vbmNsaWNrPWFlKX0oZT1uZShmLGUpKSYmQ2koYil9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZSBpZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjYpKTticmVhaztjYXNlIDY6aWYoYyYmbnVsbCE9Yi5zdGF0ZU5vZGUpS2koYyxiLGMubWVtb2l6ZWRQcm9wcyxlKTtlbHNle2lmKFwic3RyaW5nXCIhPT1cbnR5cGVvZiBlJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjYpKTtkPWxoKGtoLmN1cnJlbnQpO2xoKGloLmN1cnJlbnQpO2tpKGIpPyhlPWIsZj1lLnN0YXRlTm9kZSxkPWUubWVtb2l6ZWRQcm9wcyxmW3VlXT1lLChlPWYubm9kZVZhbHVlIT09ZCkmJkNpKGIpKTooZj1iLGU9KDk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShlKSxlW3VlXT1mLGIuc3RhdGVOb2RlPWUpfWJyZWFrO2Nhc2UgMTE6YnJlYWs7Y2FzZSAxMzpHKE0sYik7ZT1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpe2IuZXhwaXJhdGlvblRpbWU9ZDticmVhayBhfWU9bnVsbCE9PWU7Zj0hMTtudWxsPT09Yz92b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMuZmFsbGJhY2smJmtpKGIpOihkPWMubWVtb2l6ZWRTdGF0ZSxmPW51bGwhPT1kLGV8fG51bGw9PT1kfHwoZD1jLmNoaWxkLnNpYmxpbmcsbnVsbCE9PWQmJihrPWIuZmlyc3RFZmZlY3QsXG5udWxsIT09az8oYi5maXJzdEVmZmVjdD1kLGQubmV4dEVmZmVjdD1rKTooYi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9ZCxkLm5leHRFZmZlY3Q9bnVsbCksZC5lZmZlY3RUYWc9OCkpKTtpZihlJiYhZiYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWMmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KE0uY3VycmVudCYxKSlYPT09cWomJihYPXRqKTtlbHNle2lmKFg9PT1xanx8WD09PXRqKVg9dWo7MCE9PUFqJiZudWxsIT09VSYmKE1qKFUsVyksTmooVSxBaikpfWlmKGV8fGYpYi5lZmZlY3RUYWd8PTQ7YnJlYWs7Y2FzZSA3OmJyZWFrO2Nhc2UgODpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgNDpuaChiKTtJaShiKTticmVhaztjYXNlIDEwOnRnKGIpO2JyZWFrO2Nhc2UgOTpicmVhaztjYXNlIDE0OmJyZWFrO2Nhc2UgMTc6TChiLnR5cGUpJiZGZihiKTticmVhaztjYXNlIDE5OkcoTSxiKTtlPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09XG5lKWJyZWFrO2Y9MCE9PShiLmVmZmVjdFRhZyY2NCk7az1lLnJlbmRlcmluZztpZihudWxsPT09aylpZihmKUxpKGUsITEpO2Vsc2V7aWYoWCE9PXFqfHxudWxsIT09YyYmMCE9PShjLmVmZmVjdFRhZyY2NCkpZm9yKGM9Yi5jaGlsZDtudWxsIT09Yzspe2s9cWgoYyk7aWYobnVsbCE9PWspe2IuZWZmZWN0VGFnfD02NDtMaShlLCExKTtmPWsudXBkYXRlUXVldWU7bnVsbCE9PWYmJihiLnVwZGF0ZVF1ZXVlPWYsYi5lZmZlY3RUYWd8PTQpO251bGw9PT1lLmxhc3RFZmZlY3QmJihiLmZpcnN0RWZmZWN0PW51bGwpO2IubGFzdEVmZmVjdD1lLmxhc3RFZmZlY3Q7ZT1kO2ZvcihmPWIuY2hpbGQ7bnVsbCE9PWY7KWQ9ZixjPWUsZC5lZmZlY3RUYWcmPTIsZC5uZXh0RWZmZWN0PW51bGwsZC5maXJzdEVmZmVjdD1udWxsLGQubGFzdEVmZmVjdD1udWxsLGs9ZC5hbHRlcm5hdGUsbnVsbD09PWs/KGQuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGQuZXhwaXJhdGlvblRpbWU9YyxkLmNoaWxkPW51bGwsXG5kLm1lbW9pemVkUHJvcHM9bnVsbCxkLm1lbW9pemVkU3RhdGU9bnVsbCxkLnVwZGF0ZVF1ZXVlPW51bGwsZC5kZXBlbmRlbmNpZXM9bnVsbCk6KGQuY2hpbGRFeHBpcmF0aW9uVGltZT1rLmNoaWxkRXhwaXJhdGlvblRpbWUsZC5leHBpcmF0aW9uVGltZT1rLmV4cGlyYXRpb25UaW1lLGQuY2hpbGQ9ay5jaGlsZCxkLm1lbW9pemVkUHJvcHM9ay5tZW1vaXplZFByb3BzLGQubWVtb2l6ZWRTdGF0ZT1rLm1lbW9pemVkU3RhdGUsZC51cGRhdGVRdWV1ZT1rLnVwZGF0ZVF1ZXVlLGM9ay5kZXBlbmRlbmNpZXMsZC5kZXBlbmRlbmNpZXM9bnVsbD09PWM/bnVsbDp7ZXhwaXJhdGlvblRpbWU6Yy5leHBpcmF0aW9uVGltZSxmaXJzdENvbnRleHQ6Yy5maXJzdENvbnRleHQscmVzcG9uZGVyczpjLnJlc3BvbmRlcnN9KSxmPWYuc2libGluZztJKE0sTS5jdXJyZW50JjF8MixiKTtiPWIuY2hpbGQ7YnJlYWsgYX1jPWMuc2libGluZ319ZWxzZXtpZighZilpZihjPXFoKGspLG51bGwhPT1jKXtpZihiLmVmZmVjdFRhZ3w9XG42NCxmPSEwLGQ9Yy51cGRhdGVRdWV1ZSxudWxsIT09ZCYmKGIudXBkYXRlUXVldWU9ZCxiLmVmZmVjdFRhZ3w9NCksTGkoZSwhMCksbnVsbD09PWUudGFpbCYmXCJoaWRkZW5cIj09PWUudGFpbE1vZGUmJiFrLmFsdGVybmF0ZSl7Yj1iLmxhc3RFZmZlY3Q9ZS5sYXN0RWZmZWN0O251bGwhPT1iJiYoYi5uZXh0RWZmZWN0PW51bGwpO2JyZWFrfX1lbHNlIGNnKCk+ZS50YWlsRXhwaXJhdGlvbiYmMTxkJiYoYi5lZmZlY3RUYWd8PTY0LGY9ITAsTGkoZSwhMSksYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9ZC0xKTtlLmlzQmFja3dhcmRzPyhrLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWspOihkPWUubGFzdCxudWxsIT09ZD9kLnNpYmxpbmc9azpiLmNoaWxkPWssZS5sYXN0PWspfWlmKG51bGwhPT1lLnRhaWwpezA9PT1lLnRhaWxFeHBpcmF0aW9uJiYoZS50YWlsRXhwaXJhdGlvbj1jZygpKzUwMCk7ZD1lLnRhaWw7ZS5yZW5kZXJpbmc9ZDtlLnRhaWw9ZC5zaWJsaW5nO1xuZS5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdDtkLnNpYmxpbmc9bnVsbDtlPU0uY3VycmVudDtlPWY/ZSYxfDI6ZSYxO0koTSxlLGIpO2I9ZDticmVhayBhfWJyZWFrO2Nhc2UgMjA6YnJlYWs7Y2FzZSAyMTpicmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMTU2LGIudGFnKSk7fWI9bnVsbH1lPVY7aWYoMT09PVd8fDEhPT1lLmNoaWxkRXhwaXJhdGlvblRpbWUpe2Y9MDtmb3IoZD1lLmNoaWxkO251bGwhPT1kOyljPWQuZXhwaXJhdGlvblRpbWUsaz1kLmNoaWxkRXhwaXJhdGlvblRpbWUsYz5mJiYoZj1jKSxrPmYmJihmPWspLGQ9ZC5zaWJsaW5nO2UuY2hpbGRFeHBpcmF0aW9uVGltZT1mfWlmKG51bGwhPT1iKXJldHVybiBiO251bGwhPT1hJiYwPT09KGEuZWZmZWN0VGFnJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PVYuZmlyc3RFZmZlY3QpLG51bGwhPT1WLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9XG5WLmZpcnN0RWZmZWN0KSxhLmxhc3RFZmZlY3Q9Vi5sYXN0RWZmZWN0KSwxPFYuZWZmZWN0VGFnJiYobnVsbCE9PWEubGFzdEVmZmVjdD9hLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1WOmEuZmlyc3RFZmZlY3Q9VixhLmxhc3RFZmZlY3Q9VikpfWVsc2V7Yj1NaShWLFcpO2lmKG51bGwhPT1iKXJldHVybiBiLmVmZmVjdFRhZyY9MjA0NyxiO251bGwhPT1hJiYoYS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9bnVsbCxhLmVmZmVjdFRhZ3w9MjA0OCl9Yj1WLnNpYmxpbmc7aWYobnVsbCE9PWIpcmV0dXJuIGI7Vj1hfXdoaWxlKG51bGwhPT1WKTtYPT09cWomJihYPXZqKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBYaihhKXt2YXIgYj1hLmV4cGlyYXRpb25UaW1lO2E9YS5jaGlsZEV4cGlyYXRpb25UaW1lO3JldHVybiBiPmE/YjphfWZ1bmN0aW9uIFlqKGEpe3ZhciBiPWRnKCk7ZmcoOTksaWsuYmluZChudWxsLGEsYikpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gaWsoYSxiKXtkbyBTaigpO3doaWxlKG51bGwhPT1Faik7aWYoKFQmKG9qfHBqKSkhPT1TKXRocm93IEVycm9yKHUoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcmssZD1hLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHUoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDthLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MDthLmNhbGxiYWNrUHJpb3JpdHk9OTA7YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDt2YXIgZT1YaihjKTthLmZpcnN0UGVuZGluZ1RpbWU9ZTtkPD1hLmxhc3RTdXNwZW5kZWRUaW1lP2EuZmlyc3RTdXNwZW5kZWRUaW1lPWEubGFzdFN1c3BlbmRlZFRpbWU9YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDpkPD1hLmZpcnN0U3VzcGVuZGVkVGltZSYmKGEuZmlyc3RTdXNwZW5kZWRUaW1lPVxuZC0xKTtkPD1hLmxhc3RQaW5nZWRUaW1lJiYoYS5sYXN0UGluZ2VkVGltZT0wKTtkPD1hLmxhc3RFeHBpcmVkVGltZSYmKGEubGFzdEV4cGlyZWRUaW1lPTApO2E9PT1VJiYoVj1VPW51bGwsVz0wKTsxPGMuZWZmZWN0VGFnP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZT1jLmZpcnN0RWZmZWN0KTplPWM6ZT1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1lKXt2YXIgZj1UO1R8PXBqO21qLmN1cnJlbnQ9bnVsbDtsZT1MZDt2YXIgZz1mZSgpO2lmKGdlKGcpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBnKXZhciBoPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntoPShoPWcub3duZXJEb2N1bWVudCkmJmguZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgaz1oLmdldFNlbGVjdGlvbiYmaC5nZXRTZWxlY3Rpb24oKTtpZihrJiYwIT09ay5yYW5nZUNvdW50KXtoPWsuYW5jaG9yTm9kZTt2YXIgbD1rLmFuY2hvck9mZnNldCxcbm09ay5mb2N1c05vZGU7az1rLmZvY3VzT2Zmc2V0O3RyeXtoLm5vZGVUeXBlLG0ubm9kZVR5cGV9Y2F0Y2goRGIpe2g9bnVsbDticmVhayBhfXZhciBDPTAseT0tMSxIPS0xLHo9MCx0YT0wLHI9Zyx4PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgQTs7KXtyIT09aHx8MCE9PWwmJjMhPT1yLm5vZGVUeXBlfHwoeT1DK2wpO3IhPT1tfHwwIT09ayYmMyE9PXIubm9kZVR5cGV8fChIPUMrayk7Mz09PXIubm9kZVR5cGUmJihDKz1yLm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oQT1yLmZpcnN0Q2hpbGQpKWJyZWFrO3g9cjtyPUF9Zm9yKDs7KXtpZihyPT09ZylicmVhayBiO3g9PT1oJiYrK3o9PT1sJiYoeT1DKTt4PT09bSYmKyt0YT09PWsmJihIPUMpO2lmKG51bGwhPT0oQT1yLm5leHRTaWJsaW5nKSlicmVhaztyPXg7eD1yLnBhcmVudE5vZGV9cj1BfWg9LTE9PT15fHwtMT09PUg/bnVsbDp7c3RhcnQ6eSxlbmQ6SH19ZWxzZSBoPW51bGx9aD1ofHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBoPVxubnVsbDttZT17Zm9jdXNlZEVsZW06ZyxzZWxlY3Rpb25SYW5nZTpofTtMZD0hMTtZPWU7ZG8gdHJ5e2prKCl9Y2F0Y2goRGIpe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7UmkoWSxEYik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO1k9ZTtkbyB0cnl7Zm9yKGc9YSxoPWI7bnVsbCE9PVk7KXt2YXIgcD1ZLmVmZmVjdFRhZztwJjE2JiZUYihZLnN0YXRlTm9kZSxcIlwiKTtpZihwJjEyOCl7dmFyIHQ9WS5hbHRlcm5hdGU7aWYobnVsbCE9PXQpe3ZhciB2PXQucmVmO251bGwhPT12JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHY/dihudWxsKTp2LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaChwJjEwMzgpe2Nhc2UgMjokaShZKTtZLmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2OiRpKFkpO1kuZWZmZWN0VGFnJj0tMzthaihZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDEwMjQ6WS5lZmZlY3RUYWcmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpZLmVmZmVjdFRhZyY9LTEwMjU7YWooWS5hbHRlcm5hdGUsXG5ZKTticmVhaztjYXNlIDQ6YWooWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSA4Omw9WSxYaShnLGwsaCksWWkobCl9WT1ZLm5leHRFZmZlY3R9fWNhdGNoKERiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO1JpKFksRGIpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTt2PW1lO3Q9ZmUoKTtwPXYuZm9jdXNlZEVsZW07aD12LnNlbGVjdGlvblJhbmdlO2lmKHQhPT1wJiZwJiZwLm93bmVyRG9jdW1lbnQmJmVlKHAub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQscCkpe251bGwhPT1oJiZnZShwKSYmKHQ9aC5zdGFydCx2PWguZW5kLHZvaWQgMD09PXYmJih2PXQpLFwic2VsZWN0aW9uU3RhcnRcImluIHA/KHAuc2VsZWN0aW9uU3RhcnQ9dCxwLnNlbGVjdGlvbkVuZD1NYXRoLm1pbih2LHAudmFsdWUubGVuZ3RoKSk6KHY9KHQ9cC5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJnQuZGVmYXVsdFZpZXd8fHdpbmRvdyx2LmdldFNlbGVjdGlvbiYmKHY9di5nZXRTZWxlY3Rpb24oKSxcbmw9cC50ZXh0Q29udGVudC5sZW5ndGgsZz1NYXRoLm1pbihoLnN0YXJ0LGwpLGg9dm9pZCAwPT09aC5lbmQ/ZzpNYXRoLm1pbihoLmVuZCxsKSwhdi5leHRlbmQmJmc+aCYmKGw9aCxoPWcsZz1sKSxsPWRlKHAsZyksbT1kZShwLGgpLGwmJm0mJigxIT09di5yYW5nZUNvdW50fHx2LmFuY2hvck5vZGUhPT1sLm5vZGV8fHYuYW5jaG9yT2Zmc2V0IT09bC5vZmZzZXR8fHYuZm9jdXNOb2RlIT09bS5ub2RlfHx2LmZvY3VzT2Zmc2V0IT09bS5vZmZzZXQpJiYodD10LmNyZWF0ZVJhbmdlKCksdC5zZXRTdGFydChsLm5vZGUsbC5vZmZzZXQpLHYucmVtb3ZlQWxsUmFuZ2VzKCksZz5oPyh2LmFkZFJhbmdlKHQpLHYuZXh0ZW5kKG0ubm9kZSxtLm9mZnNldCkpOih0LnNldEVuZChtLm5vZGUsbS5vZmZzZXQpLHYuYWRkUmFuZ2UodCkpKSkpKTt0PVtdO2Zvcih2PXA7dj12LnBhcmVudE5vZGU7KTE9PT12Lm5vZGVUeXBlJiZ0LnB1c2goe2VsZW1lbnQ6dixsZWZ0OnYuc2Nyb2xsTGVmdCx0b3A6di5zY3JvbGxUb3B9KTtcblwiZnVuY3Rpb25cIj09PXR5cGVvZiBwLmZvY3VzJiZwLmZvY3VzKCk7Zm9yKHA9MDtwPHQubGVuZ3RoO3ArKyl2PXRbcF0sdi5lbGVtZW50LnNjcm9sbExlZnQ9di5sZWZ0LHYuZWxlbWVudC5zY3JvbGxUb3A9di50b3B9bWU9bnVsbDtMZD0hIWxlO2xlPW51bGw7YS5jdXJyZW50PWM7WT1lO2RvIHRyeXtmb3IocD1kO251bGwhPT1ZOyl7dmFyIERoPVkuZWZmZWN0VGFnO2lmKERoJjM2KXt2YXIgZGM9WS5hbHRlcm5hdGU7dD1ZO3Y9cDtzd2l0Y2godC50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6VWkoMTYsMzIsdCk7YnJlYWs7Y2FzZSAxOnZhciBmZD10LnN0YXRlTm9kZTtpZih0LmVmZmVjdFRhZyY0KWlmKG51bGw9PT1kYylmZC5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGhrPXQuZWxlbWVudFR5cGU9PT10LnR5cGU/ZGMubWVtb2l6ZWRQcm9wczptZyh0LnR5cGUsZGMubWVtb2l6ZWRQcm9wcyk7ZmQuY29tcG9uZW50RGlkVXBkYXRlKGhrLGRjLm1lbW9pemVkU3RhdGUsXG5mZC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9dmFyIEVoPXQudXBkYXRlUXVldWU7bnVsbCE9PUVoJiZLZyh0LEVoLGZkLHYpO2JyZWFrO2Nhc2UgMzp2YXIgRmg9dC51cGRhdGVRdWV1ZTtpZihudWxsIT09Rmgpe2c9bnVsbDtpZihudWxsIT09dC5jaGlsZClzd2l0Y2godC5jaGlsZC50YWcpe2Nhc2UgNTpnPXQuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTpnPXQuY2hpbGQuc3RhdGVOb2RlfUtnKHQsRmgsZyx2KX1icmVhaztjYXNlIDU6dmFyIHhrPXQuc3RhdGVOb2RlO251bGw9PT1kYyYmdC5lZmZlY3RUYWcmNCYmbmUodC50eXBlLHQubWVtb2l6ZWRQcm9wcykmJnhrLmZvY3VzKCk7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6aWYobnVsbD09PXQubWVtb2l6ZWRTdGF0ZSl7dmFyIERpPXQuYWx0ZXJuYXRlO2lmKG51bGwhPT1EaSl7dmFyIEVpPURpLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PUVpKXt2YXIgRmk9XG5FaS5kZWh5ZHJhdGVkO251bGwhPT1GaSYmTGMoRmkpfX19YnJlYWs7Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjA6Y2FzZSAyMTpicmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMTYzKSk7fX1pZihEaCYxMjgpe3Q9dm9pZCAwO3ZhciB4ZD1ZLnJlZjtpZihudWxsIT09eGQpe3ZhciBHaT1ZLnN0YXRlTm9kZTtzd2l0Y2goWS50YWcpe2Nhc2UgNTp0PUdpO2JyZWFrO2RlZmF1bHQ6dD1HaX1cImZ1bmN0aW9uXCI9PT10eXBlb2YgeGQ/eGQodCk6eGQuY3VycmVudD10fX1ZPVkubmV4dEVmZmVjdH19Y2F0Y2goRGIpe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7UmkoWSxEYik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO1k9bnVsbDtZZigpO1Q9Zn1lbHNlIGEuY3VycmVudD1jO2lmKERqKURqPSExLEVqPWEsRmo9YjtlbHNlIGZvcihZPWU7bnVsbCE9PVk7KWI9WS5uZXh0RWZmZWN0LFkubmV4dEVmZmVjdD1udWxsLFk9YjtiPWEuZmlyc3RQZW5kaW5nVGltZTswPT09YiYmXG4oamo9bnVsbCk7MTA3Mzc0MTgyMz09PWI/YT09PUlqP0hqKys6KEhqPTAsSWo9YSk6SGo9MDtcImZ1bmN0aW9uXCI9PT10eXBlb2Yga2smJmtrKGMuc3RhdGVOb2RlLGQpO1ooYSk7aWYoZ2opdGhyb3cgZ2o9ITEsYT1oaixoaj1udWxsLGE7aWYoKFQmbmopIT09UylyZXR1cm4gbnVsbDtqZygpO3JldHVybiBudWxsfWZ1bmN0aW9uIGprKCl7Zm9yKDtudWxsIT09WTspe3ZhciBhPVkuZWZmZWN0VGFnOzAhPT0oYSYyNTYpJiZUaShZLmFsdGVybmF0ZSxZKTswPT09KGEmNTEyKXx8RGp8fChEaj0hMCxnZyg5NyxmdW5jdGlvbigpe1NqKCk7cmV0dXJuIG51bGx9KSk7WT1ZLm5leHRFZmZlY3R9fWZ1bmN0aW9uIFNqKCl7aWYoOTAhPT1Gail7dmFyIGE9OTc8Rmo/OTc6Rmo7Rmo9OTA7cmV0dXJuIGZnKGEsbGspfX1cbmZ1bmN0aW9uIGxrKCl7aWYobnVsbD09PUVqKXJldHVybiExO3ZhciBhPUVqO0VqPW51bGw7aWYoKFQmKG9qfHBqKSkhPT1TKXRocm93IEVycm9yKHUoMzMxKSk7dmFyIGI9VDtUfD1wajtmb3IoYT1hLmN1cnJlbnQuZmlyc3RFZmZlY3Q7bnVsbCE9PWE7KXt0cnl7dmFyIGM9YTtpZigwIT09KGMuZWZmZWN0VGFnJjUxMikpc3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlVpKDEyOCwwLGMpLFVpKDAsNjQsYyl9fWNhdGNoKGQpe2lmKG51bGw9PT1hKXRocm93IEVycm9yKHUoMzMwKSk7UmkoYSxkKX1jPWEubmV4dEVmZmVjdDthLm5leHRFZmZlY3Q9bnVsbDthPWN9VD1iO2pnKCk7cmV0dXJuITB9ZnVuY3Rpb24gbWsoYSxiLGMpe2I9TmkoYyxiKTtiPWZqKGEsYiwxMDczNzQxODIzKTtEZyhhLGIpO2E9S2ooYSwxMDczNzQxODIzKTtudWxsIT09YSYmWihhKX1cbmZ1bmN0aW9uIFJpKGEsYil7aWYoMz09PWEudGFnKW1rKGEsYSxiKTtlbHNlIGZvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKDM9PT1jLnRhZyl7bWsoYyxhLGIpO2JyZWFrfWVsc2UgaWYoMT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09amp8fCFqai5oYXMoZCkpKXthPU5pKGIsYSk7YT1paihjLGEsMTA3Mzc0MTgyMyk7RGcoYyxhKTtjPUtqKGMsMTA3Mzc0MTgyMyk7bnVsbCE9PWMmJlooYyk7YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24gZGsoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtVPT09YSYmVz09PWM/WD09PXVqfHxYPT09dGomJjEwNzM3NDE4MjM9PT14aiYmY2coKS1iajxDaj9UaihhLFcpOkJqPSEwOlBqKGEsYykmJihiPWEubGFzdFBpbmdlZFRpbWUsMCE9PWImJmI8Y3x8KGEubGFzdFBpbmdlZFRpbWU9YyxhLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9PT1jJiYoYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTAsYS5maW5pc2hlZFdvcms9bnVsbCksWihhKSkpfWZ1bmN0aW9uIGRqKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbCE9PWMmJmMuZGVsZXRlKGIpO2I9MDswPT09YiYmKGI9UGcoKSxiPVFnKGIsYSxudWxsKSk7YT1LaihhLGIpO251bGwhPT1hJiZaKGEpfXZhciBnaztcbmdrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iLmV4cGlyYXRpb25UaW1lO2lmKG51bGwhPT1hKXt2YXIgZT1iLnBlbmRpbmdQcm9wcztpZihhLm1lbW9pemVkUHJvcHMhPT1lfHxLLmN1cnJlbnQpd2c9ITA7ZWxzZXtpZihkPGMpe3dnPSExO3N3aXRjaChiLnRhZyl7Y2FzZSAzOndpKGIpO2xpKCk7YnJlYWs7Y2FzZSA1Om9oKGIpO2lmKGIubW9kZSY0JiYxIT09YyYmZS5oaWRkZW4pcmV0dXJuIGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsbnVsbDticmVhaztjYXNlIDE6TChiLnR5cGUpJiZKZihiKTticmVhaztjYXNlIDQ6bWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOnNnKGIsYi5tZW1vaXplZFByb3BzLnZhbHVlKTticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2Q9Yi5jaGlsZC5jaGlsZEV4cGlyYXRpb25UaW1lO2lmKDAhPT1kJiZkPj1jKXJldHVybiB5aShhLGIsYyk7SShNLE0uY3VycmVudCZcbjEsYik7Yj1vaShhLGIsYyk7cmV0dXJuIG51bGwhPT1iP2Iuc2libGluZzpudWxsfUkoTSxNLmN1cnJlbnQmMSxiKTticmVhaztjYXNlIDE5OmQ9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPj1jO2lmKDAhPT0oYS5lZmZlY3RUYWcmNjQpKXtpZihkKXJldHVybiBCaShhLGIsYyk7Yi5lZmZlY3RUYWd8PTY0fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCk7SShNLE0uY3VycmVudCxiKTtpZighZClyZXR1cm4gbnVsbH1yZXR1cm4gb2koYSxiLGMpfXdnPSExfX1lbHNlIHdnPSExO2IuZXhwaXJhdGlvblRpbWU9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPUVmKGIsSi5jdXJyZW50KTt2ZyhiLGMpO2U9SWgobnVsbCxiLGQsYSxlLGMpO2IuZWZmZWN0VGFnfD0xO2lmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO01oKCk7aWYoTChkKSl7dmFyIGY9ITA7SmYoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJk9nKGIsZCxnLGEpO2UudXBkYXRlcj1TZztiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxGaWJlcj1iO1dnKGIsZCxhLGMpO2I9dmkobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsUihudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjplPWIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7VmEoZSk7aWYoMSE9PWUuX3N0YXR1cyl0aHJvdyBlLl9yZXN1bHQ7XG5lPWUuX3Jlc3VsdDtiLnR5cGU9ZTtmPWIudGFnPW5rKGUpO2E9bWcoZSxhKTtzd2l0Y2goZil7Y2FzZSAwOmI9c2kobnVsbCxiLGUsYSxjKTticmVhaztjYXNlIDE6Yj11aShudWxsLGIsZSxhLGMpO2JyZWFrO2Nhc2UgMTE6Yj1uaShudWxsLGIsZSxhLGMpO2JyZWFrO2Nhc2UgMTQ6Yj1waShudWxsLGIsZSxtZyhlLnR5cGUsYSksZCxjKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMzA2LGUsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOm1nKGQsZSksc2koYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOm1nKGQsZSksdWkoYSxiLGQsZSxjKTtjYXNlIDM6d2koYik7ZD1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1kKXRocm93IEVycm9yKHUoMjgyKSk7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6XG5udWxsO0hnKGIsZCxiLnBlbmRpbmdQcm9wcyxudWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpbGkoKSxiPW9pKGEsYixjKTtlbHNle2lmKGU9Yi5zdGF0ZU5vZGUuaHlkcmF0ZSlkaT1yZShiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLGNpPWIsZT1laT0hMDtpZihlKWZvcihjPWdoKGIsbnVsbCxkLGMpLGIuY2hpbGQ9YztjOyljLmVmZmVjdFRhZz1jLmVmZmVjdFRhZyYtM3wxMDI0LGM9Yy5zaWJsaW5nO2Vsc2UgUihhLGIsZCxjKSxsaSgpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIG9oKGIpLG51bGw9PT1hJiZpaShiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLG9lKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZvZShkLGYpJiYoYi5lZmZlY3RUYWd8PTE2KSx0aShhLGIpLGIubW9kZSY0JiYxIT09YyYmZS5oaWRkZW4/KGIuZXhwaXJhdGlvblRpbWU9XG5iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxiPW51bGwpOihSKGEsYixnLGMpLGI9Yi5jaGlsZCksYjtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZpaShiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHlpKGEsYixjKTtjYXNlIDQ6cmV0dXJuIG1oKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPWZoKGIsbnVsbCxkLGMpOlIoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTptZyhkLGUpLG5pKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBSKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gUihhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBSKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7XG5lPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTtzZyhiLGYpO2lmKG51bGwhPT1nKXt2YXIgaD1nLnZhbHVlO2Y9b2YoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwO2lmKDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIUsuY3VycmVudCl7Yj1vaShhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgaz1oLmRlcGVuZGVuY2llcztpZihudWxsIT09ayl7Zz1oLmNoaWxkO2Zvcih2YXIgbD1rLmZpcnN0Q29udGV4dDtudWxsIT09bDspe2lmKGwuY29udGV4dD09PWQmJjAhPT0obC5vYnNlcnZlZEJpdHMmZikpezE9PT1oLnRhZyYmKGw9QmcoYyxudWxsKSxsLnRhZz0yLERnKGgsbCkpO2guZXhwaXJhdGlvblRpbWU8YyYmKGguZXhwaXJhdGlvblRpbWU9XG5jKTtsPWguYWx0ZXJuYXRlO251bGwhPT1sJiZsLmV4cGlyYXRpb25UaW1lPGMmJihsLmV4cGlyYXRpb25UaW1lPWMpO3VnKGgucmV0dXJuLGMpO2suZXhwaXJhdGlvblRpbWU8YyYmKGsuZXhwaXJhdGlvblRpbWU9Yyk7YnJlYWt9bD1sLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9Z319UihhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbix2ZyhiLGMpLGU9eGcoZSxmLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZWZmZWN0VGFnfD0xLFIoYSxiLGQsYyksYi5jaGlsZDtcbmNhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9bWcoZSxiLnBlbmRpbmdQcm9wcyksZj1tZyhlLnR5cGUsZikscGkoYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIHJpKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTptZyhkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxiLnRhZz0xLEwoZCk/KGE9ITAsSmYoYikpOmE9ITEsdmcoYixjKSxVZyhiLGQsZSxjKSxXZyhiLGQsZSxjKSx2aShudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIEJpKGEsYixjKX10aHJvdyBFcnJvcih1KDE1NixiLnRhZykpO307dmFyIGtrPW51bGwsV2k9bnVsbDtcbmZ1bmN0aW9uIG9rKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO2trPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJSb290KGMsYSx2b2lkIDAsNjQ9PT0oYS5jdXJyZW50LmVmZmVjdFRhZyY2NCkpfWNhdGNoKGUpe319O1dpPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9Y2F0Y2goZSl7fX19Y2F0Y2goZCl7fXJldHVybiEwfVxuZnVuY3Rpb24gcGsoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRFeHBpcmF0aW9uVGltZT10aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBnaShhLGIsYyxkKXtyZXR1cm4gbmV3IHBrKGEsYixjLGQpfVxuZnVuY3Rpb24gcWkoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1mdW5jdGlvbiBuayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gcWkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PU9hKXJldHVybiAxMTtpZihhPT09UmEpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gYWgoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1naShhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLmVmZmVjdFRhZz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtjLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWU7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntleHBpcmF0aW9uVGltZTpiLmV4cGlyYXRpb25UaW1lLFxuZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Yi5yZXNwb25kZXJzfTtjLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIGNoKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlxaShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSBJYTpyZXR1cm4gZWgoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBOYTpnPTg7ZXw9NzticmVhaztjYXNlIEphOmc9ODtlfD0xO2JyZWFrO2Nhc2UgS2E6cmV0dXJuIGE9Z2koMTIsYyxiLGV8OCksYS5lbGVtZW50VHlwZT1LYSxhLnR5cGU9S2EsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBQYTpyZXR1cm4gYT1naSgxMyxjLGIsZSksYS50eXBlPVBhLGEuZWxlbWVudFR5cGU9UGEsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBRYTpyZXR1cm4gYT1naSgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1RYSxhLmV4cGlyYXRpb25UaW1lPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgTGE6Zz1cbjEwO2JyZWFrIGE7Y2FzZSBNYTpnPTk7YnJlYWsgYTtjYXNlIE9hOmc9MTE7YnJlYWsgYTtjYXNlIFJhOmc9MTQ7YnJlYWsgYTtjYXNlIFNhOmc9MTY7ZD1udWxsO2JyZWFrIGF9dGhyb3cgRXJyb3IodSgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1naShnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1mO3JldHVybiBifWZ1bmN0aW9uIGVoKGEsYixjLGQpe2E9Z2koNyxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIGJoKGEsYixjKXthPWdpKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIGRoKGEsYixjKXtiPWdpKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gcWsoYSxiLGMpe3RoaXMudGFnPWI7dGhpcy5jdXJyZW50PW51bGw7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5waW5nQ2FjaGU9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDt0aGlzLmZpbmlzaGVkV29yaz1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTkwO3RoaXMubGFzdEV4cGlyZWRUaW1lPXRoaXMubGFzdFBpbmdlZFRpbWU9dGhpcy5uZXh0S25vd25QZW5kaW5nTGV2ZWw9dGhpcy5sYXN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0UGVuZGluZ1RpbWU9MH1cbmZ1bmN0aW9uIFBqKGEsYil7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWU7YT1hLmxhc3RTdXNwZW5kZWRUaW1lO3JldHVybiAwIT09YyYmYz49YiYmYTw9Yn1mdW5jdGlvbiBNaihhLGIpe3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lLGQ9YS5sYXN0U3VzcGVuZGVkVGltZTtjPGImJihhLmZpcnN0U3VzcGVuZGVkVGltZT1iKTtpZihkPmJ8fDA9PT1jKWEubGFzdFN1c3BlbmRlZFRpbWU9YjtiPD1hLmxhc3RQaW5nZWRUaW1lJiYoYS5sYXN0UGluZ2VkVGltZT0wKTtiPD1hLmxhc3RFeHBpcmVkVGltZSYmKGEubGFzdEV4cGlyZWRUaW1lPTApfVxuZnVuY3Rpb24gTmooYSxiKXtiPmEuZmlyc3RQZW5kaW5nVGltZSYmKGEuZmlyc3RQZW5kaW5nVGltZT1iKTt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZTswIT09YyYmKGI+PWM/YS5maXJzdFN1c3BlbmRlZFRpbWU9YS5sYXN0U3VzcGVuZGVkVGltZT1hLm5leHRLbm93blBlbmRpbmdMZXZlbD0wOmI+PWEubGFzdFN1c3BlbmRlZFRpbWUmJihhLmxhc3RTdXNwZW5kZWRUaW1lPWIrMSksYj5hLm5leHRLbm93blBlbmRpbmdMZXZlbCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPWIpKX1mdW5jdGlvbiBSaihhLGIpe3ZhciBjPWEubGFzdEV4cGlyZWRUaW1lO2lmKDA9PT1jfHxjPmIpYS5sYXN0RXhwaXJlZFRpbWU9Yn1cbmZ1bmN0aW9uIHJrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPVBnKCksZz1NZy5zdXNwZW5zZTtmPVFnKGYsZSxnKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2I6e2lmKGVjKGMpIT09Y3x8MSE9PWMudGFnKXRocm93IEVycm9yKHUoMTcwKSk7dmFyIGg9Yztkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoPWguc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoTChoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHUoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEwoaykpe2M9SWYoYyxrLGgpO2JyZWFrIGF9fWM9aH1lbHNlIGM9Q2Y7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1CZyhmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PVxuZD9udWxsOmQ7bnVsbCE9PWQmJihiLmNhbGxiYWNrPWQpO0RnKGUsYik7UmcoZSxmKTtyZXR1cm4gZn1mdW5jdGlvbiBzayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIHRrKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7bnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQmJmEucmV0cnlUaW1lPGImJihhLnJldHJ5VGltZT1iKX1mdW5jdGlvbiB1ayhhLGIpe3RrKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZ0ayhhLGIpfVxuZnVuY3Rpb24gdmsoYSxiLGMpe2M9bnVsbCE9YyYmITA9PT1jLmh5ZHJhdGU7dmFyIGQ9bmV3IHFrKGEsYixjKSxlPWdpKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtkLmN1cnJlbnQ9ZTtlLnN0YXRlTm9kZT1kO2Fbd2VdPWQuY3VycmVudDtjJiYwIT09YiYmd2MoOT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQpO3RoaXMuX2ludGVybmFsUm9vdD1kfXZrLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXtyayhhLHRoaXMuX2ludGVybmFsUm9vdCxudWxsLHZvaWQgMD09PWI/bnVsbDpiKX07dmsucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290LGM9dm9pZCAwPT09YT9udWxsOmEsZD1iLmNvbnRhaW5lckluZm87cmsobnVsbCxiLG51bGwsZnVuY3Rpb24oKXtkW3dlXT1udWxsO251bGwhPT1jJiZjKCl9KX07XG5mdW5jdGlvbiB3ayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9ZnVuY3Rpb24geWsoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyB2ayhhLDAsYj97aHlkcmF0ZTohMH06dm9pZCAwKX1cbmZ1bmN0aW9uIHprKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9c2soZyk7aC5jYWxsKGEpfX1yayhiLGcsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPXlrKGMsZCk7Zz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPXNrKGcpO2suY2FsbChhKX19Y2soZnVuY3Rpb24oKXtyayhiLGcsYSxlKX0pfXJldHVybiBzayhnKX1mdW5jdGlvbiBBayhhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOkhhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuamM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9bGcoUGcoKSwxNTAsMTAwKTtSZyhhLGIpO3VrKGEsYil9fTtrYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXtQZygpO3ZhciBiPWtnKys7UmcoYSxiKTt1ayhhLGIpfX07bGM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9UGcoKTtiPVFnKGIsYSxudWxsKTtSZyhhLGIpO3VrKGEsYil9fTtcblphPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6RWIoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPXllKGQpO2lmKCFlKXRocm93IEVycm9yKHUoOTApKTt6YihkKTtFYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6TWIoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJkpiKGEsISFjLm11bHRpcGxlLGIsITEpfX07ZWI9Yms7XG5mYj1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1UO1R8PTQ7dHJ5e3JldHVybiBmZyg5OCxhLmJpbmQobnVsbCxiLGMsZCkpfWZpbmFsbHl7VD1lLFQ9PT1TJiZqZygpfX07Z2I9ZnVuY3Rpb24oKXsoVCYoMXxvanxwaikpPT09UyYmKGFrKCksU2ooKSl9O2hiPWZ1bmN0aW9uKGEsYil7dmFyIGM9VDtUfD0yO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1Q9YyxUPT09UyYmamcoKX19O2Z1bmN0aW9uIEJrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIXdrKGIpKXRocm93IEVycm9yKHUoMjAwKSk7cmV0dXJuIEFrKGEsYixudWxsLGMpfVxudmFyIENrPXtjcmVhdGVQb3J0YWw6QmssZmluZERPTU5vZGU6ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFsRmliZXI7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHUoMTg4KSk7dGhyb3cgRXJyb3IodSgyNjgsT2JqZWN0LmtleXMoYSkpKTt9YT1pYyhiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9LGh5ZHJhdGU6ZnVuY3Rpb24oYSxiLGMpe2lmKCF3ayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiB6ayhudWxsLGEsYiwhMCxjKX0scmVuZGVyOmZ1bmN0aW9uKGEsYixjKXtpZighd2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gemsobnVsbCxhLGIsITEsYyl9LHVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixjLGQpe2lmKCF3ayhjKSl0aHJvdyBFcnJvcih1KDIwMCkpO1xuaWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyKXRocm93IEVycm9yKHUoMzgpKTtyZXR1cm4gemsoYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7aWYoIXdrKGEpKXRocm93IEVycm9yKHUoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhjayhmdW5jdGlvbigpe3prKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVt3ZV09bnVsbH0pfSksITApOiExfSx1bnN0YWJsZV9jcmVhdGVQb3J0YWw6ZnVuY3Rpb24oKXtyZXR1cm4gQmsuYXBwbHkodm9pZCAwLGFyZ3VtZW50cyl9LHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOmJrLGZsdXNoU3luYzpmdW5jdGlvbihhLGIpe2lmKChUJihvanxwaikpIT09Uyl0aHJvdyBFcnJvcih1KDE4NykpO3ZhciBjPVQ7VHw9MTt0cnl7cmV0dXJuIGZnKDk5LGEuYmluZChudWxsLGIpKX1maW5hbGx5e1Q9YyxqZygpfX0sX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50czpbQ2MsXG54ZSx5ZSxDYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUsZmEsU2MsZnVuY3Rpb24oYSl7eWEoYSxSYyl9LGNiLGRiLFBkLEJhLFNqLHtjdXJyZW50OiExfV19fTtcbihmdW5jdGlvbihhKXt2YXIgYj1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBvayhuKHt9LGEse292ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6RWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPWljKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYj9iKGEpOm51bGx9LGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9KSl9KSh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6RmMsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi4xMi4wXCIsXG5yZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTt2YXIgRGs9e2RlZmF1bHQ6Q2t9LEVrPURrJiZDa3x8RGs7bW9kdWxlLmV4cG9ydHM9RWsuZGVmYXVsdHx8RWs7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYwLjE4LjBcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgZixnLGgsayxsO1xuaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIHA9bnVsbCxxPW51bGwsdD1mdW5jdGlvbigpe2lmKG51bGwhPT1wKXRyeXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO3AoITAsYSk7cD1udWxsfWNhdGNoKGIpe3Rocm93IHNldFRpbWVvdXQodCwwKSxiO319LHU9RGF0ZS5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpLXV9O2Y9ZnVuY3Rpb24oYSl7bnVsbCE9PXA/c2V0VGltZW91dChmLDAsYSk6KHA9YSxzZXRUaW1lb3V0KHQsMCkpfTtnPWZ1bmN0aW9uKGEsYil7cT1zZXRUaW1lb3V0KGEsYil9O2g9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQocSl9O2s9ZnVuY3Rpb24oKXtyZXR1cm4hMX07bD1leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKCl7fX1lbHNle3ZhciB3PXdpbmRvdy5wZXJmb3JtYW5jZSx4PXdpbmRvdy5EYXRlLFxueT13aW5kb3cuc2V0VGltZW91dCx6PXdpbmRvdy5jbGVhclRpbWVvdXQ7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlKXt2YXIgQT13aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIik7XCJmdW5jdGlvblwiIT09dHlwZW9mIEEmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKX1pZihcIm9iamVjdFwiPT09XG50eXBlb2YgdyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHcubm93KWV4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHcubm93KCl9O2Vsc2V7dmFyIEI9eC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB4Lm5vdygpLUJ9fXZhciBDPSExLEQ9bnVsbCxFPS0xLEY9NSxHPTA7az1mdW5jdGlvbigpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpPj1HfTtsPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3QgdW5zdXBwb3J0ZWRcIik6Rj0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEg9bmV3IE1lc3NhZ2VDaGFubmVsLEk9SC5wb3J0MjtILnBvcnQxLm9ubWVzc2FnZT1cbmZ1bmN0aW9uKCl7aWYobnVsbCE9PUQpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7Rz1hK0Y7dHJ5e0QoITAsYSk/SS5wb3N0TWVzc2FnZShudWxsKTooQz0hMSxEPW51bGwpfWNhdGNoKGIpe3Rocm93IEkucG9zdE1lc3NhZ2UobnVsbCksYjt9fWVsc2UgQz0hMX07Zj1mdW5jdGlvbihhKXtEPWE7Q3x8KEM9ITAsSS5wb3N0TWVzc2FnZShudWxsKSl9O2c9ZnVuY3Rpb24oYSxiKXtFPXkoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3ooRSk7RT0tMX19ZnVuY3Rpb24gSihhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9TWF0aC5mbG9vcigoYy0xKS8yKSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxLKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBMKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBNKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPksobixjKSl2b2lkIDAhPT1yJiYwPksocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPksocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEsoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIE49W10sTz1bXSxQPTEsUT1udWxsLFI9MyxTPSExLFQ9ITEsVT0hMTtcbmZ1bmN0aW9uIFYoYSl7Zm9yKHZhciBiPUwoTyk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylNKE8pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpTShPKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEooTixiKTtlbHNlIGJyZWFrO2I9TChPKX19ZnVuY3Rpb24gVyhhKXtVPSExO1YoYSk7aWYoIVQpaWYobnVsbCE9PUwoTikpVD0hMCxmKFgpO2Vsc2V7dmFyIGI9TChPKTtudWxsIT09YiYmZyhXLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFgoYSxiKXtUPSExO1UmJihVPSExLGgoKSk7Uz0hMDt2YXIgYz1SO3RyeXtWKGIpO2ZvcihRPUwoTik7bnVsbCE9PVEmJighKFEuZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFrKCkpOyl7dmFyIGQ9US5jYWxsYmFjaztpZihudWxsIT09ZCl7US5jYWxsYmFjaz1udWxsO1I9US5wcmlvcml0eUxldmVsO3ZhciBlPWQoUS5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP1EuY2FsbGJhY2s9ZTpRPT09TChOKSYmTShOKTtWKGIpfWVsc2UgTShOKTtRPUwoTil9aWYobnVsbCE9PVEpdmFyIG09ITA7ZWxzZXt2YXIgbj1MKE8pO251bGwhPT1uJiZnKFcsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e1E9bnVsbCxSPWMsUz0hMX19XG5mdW5jdGlvbiBZKGEpe3N3aXRjaChhKXtjYXNlIDE6cmV0dXJuLTE7Y2FzZSAyOnJldHVybiAyNTA7Y2FzZSA1OnJldHVybiAxMDczNzQxODIzO2Nhc2UgNDpyZXR1cm4gMUU0O2RlZmF1bHQ6cmV0dXJuIDVFM319dmFyIFo9bDtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVI7Uj1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7Uj1jfX07XG5leHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFIpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVJ9dmFyIGM9UjtSPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtSPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXt2YXIgZT1jLmRlbGF5O2U9XCJudW1iZXJcIj09PXR5cGVvZiBlJiYwPGU/ZCtlOmQ7Yz1cIm51bWJlclwiPT09dHlwZW9mIGMudGltZW91dD9jLnRpbWVvdXQ6WShhKX1lbHNlIGM9WShhKSxlPWQ7Yz1lK2M7YT17aWQ6UCsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTplLGV4cGlyYXRpb25UaW1lOmMsc29ydEluZGV4Oi0xfTtlPmQ/KGEuc29ydEluZGV4PWUsSihPLGEpLG51bGw9PT1MKE4pJiZhPT09TChPKSYmKFU/aCgpOlU9ITAsZyhXLGUtZCkpKTooYS5zb3J0SW5kZXg9YyxKKE4sYSksVHx8U3x8KFQ9ITAsZihYKSkpO3JldHVybiBhfTtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1SO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVI7Uj1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtSPWN9fX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBSfTtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtWKGEpO3ZhciBiPUwoTik7cmV0dXJuIGIhPT1RJiZudWxsIT09USYmbnVsbCE9PWImJm51bGwhPT1iLmNhbGxiYWNrJiZiLnN0YXJ0VGltZTw9YSYmYi5leHBpcmF0aW9uVGltZTxRLmV4cGlyYXRpb25UaW1lfHxrKCl9O2V4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PVo7ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe1R8fFN8fChUPSEwLGYoWCkpfTtcbmV4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gTChOKX07ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtcbiIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mOyIsImZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjExLjBcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO1xudmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6XG42MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtmdW5jdGlvbiB5KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB1PWEuJCR0eXBlb2Y7c3dpdGNoKHUpe2Nhc2UgYzpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBsOmNhc2UgbTpjYXNlIGU6Y2FzZSBnOmNhc2UgZjpjYXNlIHA6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG46Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgdDpjYXNlIHI6Y2FzZSBkOnJldHVybiB1fX19ZnVuY3Rpb24geihhKXtyZXR1cm4geShhKT09PW19XG5leHBvcnRzLnR5cGVPZj15O2V4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtleHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXZ8fGEuJCR0eXBlb2Y9PT13fHxhLiQkdHlwZW9mPT09eCl9O2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSl8fHkoYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9ejtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWh9O1xuZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT10fTtleHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PXB9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJleHBvcnRzXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWVcblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsInZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMTEtMSEuLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTExLTIhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTExLTMhLi9BcHAuc2Nzc1wiKTtcbmNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG5pZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbn1cblxudmFyIG9wdGlvbnMgPSB7fVxuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZiAoY29udGVudC5sb2NhbHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbn1cbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSByZXF1aXJlKFwiLi4vcHVibGljL2ZvbnRzL3NwaWRlcmF5c2ZvbnRzX3RoZS1hbWF6aW5nLXNwaWRlci1tYW4vVGhlQW1hemluZ1NwaWRlck1hbi1NWDF3LnR0ZlwiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyA9IHJlcXVpcmUoXCIuLi9wdWJsaWMvaW1hZ2VzLzMuanBnXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyh0cnVlKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18pO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJAZm9udC1mYWNle2ZvbnQtZmFtaWx5OlxcXCJzcGlkZXItZm9udFxcXCI7c3JjOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIikgZm9ybWF0KFxcXCJ0cnVldHlwZVxcXCIpfSp7Zm9udC1mYW1pbHk6J1JvYm90byd9LmZvcm0tY29udHJvbDpmb2N1c3tib3gtc2hhZG93OjAgMCAwIDAuMDVyZW0gcmdiYSgwLDEyMywyNTUsMC4yNSl9LmNhcmR7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDI1NSwyNTUsMjU1LDAuODUpfS5BcHB7b3ZlcmZsb3c6aGlkZGVuO2JhY2tncm91bmQ6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyArIFwiKSBuby1yZXBlYXQgY2VudGVyIGNlbnRlciBmaXhlZDtiYWNrZ3JvdW5kLXNpemU6Y292ZXJ9Kjo6LXdlYmtpdC1zY3JvbGxiYXJ7d2lkdGg6LjNyZW19Kjo6LXdlYmtpdC1zY3JvbGxiYXItdHJhY2t7LXdlYmtpdC1ib3gtc2hhZG93Omluc2V0IDAgMCA2cHggcmdiYSgwLDAsMCwwLjMpfSo6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1ie2JhY2tncm91bmQtY29sb3I6ZGFya2dyZXk7b3V0bGluZToxcHggc29saWQgc2xhdGVncmV5fS5pbnB1dC1ncm91cD4uZm9ybS1jb250cm9sLC5pbnB1dC1ncm91cC10ZXh0e3BhZGRpbmc6LjFyZW0gLjVyZW07Zm9udC1zaXplOi44cmVtfS5ib2xke2ZvbnQtd2VpZ2h0OmJvbGR9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wiL2hvbWUvZGVlcC9EZXNrdG9wL3Byb2plY3RzL2NyYXdsbWUvZnJvbnRlbmQvc3JjL0FwcC5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLFdBQ0kseUJBQTBCLENBQzFCLDhEQUF5SCxDQUc3SCxFQUNJLG9CQUFxQixDQUN4QixvQkFJRyw2Q0FBZ0QsQ0FFbkQsTUFHRyx1Q0FBMEMsQ0FDN0MsS0FHRyxlQUFnQixDQUVoQixnRkFBb0YsQ0FJcEYscUJBQThCLENBQ2pDLHFCQUdHLFdBQVksQ0FDZiwyQkFHRyxnREFBb0QsQ0FDdkQsMkJBR0cseUJBQTBCLENBQzFCLDJCQUFxQyxDQUN4Qyw2Q0FJRyxtQkFBc0IsQ0FDdEIsZUFBZ0IsQ0FDbkIsTUFHRyxnQkFBaUJcIixcImZpbGVcIjpcIkFwcC5zY3NzXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBmb250LWZhY2Uge1xcbiAgICBmb250LWZhbWlseTogXFxcInNwaWRlci1mb250XFxcIjtcXG4gICAgc3JjICAgICAgICA6IHVybCgnLi4vcHVibGljL2ZvbnRzL3NwaWRlcmF5c2ZvbnRzX3RoZS1hbWF6aW5nLXNwaWRlci1tYW4vVGhlQW1hemluZ1NwaWRlck1hbi1NWDF3LnR0ZicpIGZvcm1hdChcXFwidHJ1ZXR5cGVcXFwiKTtcXG59XFxuXFxuKiB7XFxuICAgIGZvbnQtZmFtaWx5OiAnUm9ib3RvJztcXG59XFxuXFxuXFxuLmZvcm0tY29udHJvbDpmb2N1cyB7XFxuICAgIGJveC1zaGFkb3c6IDAgMCAwIDAuMDVyZW0gcmdiYSgwLCAxMjMsIDI1NSwgLjI1KTtcXG5cXG59XFxuXFxuLmNhcmQge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIC44NSk7XFxufVxcblxcbi5BcHAge1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcblxcbiAgICBiYWNrZ3JvdW5kICAgICAgICAgICAgIDogdXJsKFxcXCIuLi9wdWJsaWMvaW1hZ2VzLzMuanBnXFxcIikgbm8tcmVwZWF0IGNlbnRlciBjZW50ZXIgZml4ZWQ7XFxuICAgIC13ZWJraXQtYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXG4gICAgLW1vei1iYWNrZ3JvdW5kLXNpemUgICA6IGNvdmVyO1xcbiAgICAtby1iYWNrZ3JvdW5kLXNpemUgICAgIDogY292ZXI7XFxuICAgIGJhY2tncm91bmQtc2l6ZSAgICAgICAgOiBjb3ZlcjtcXG59XFxuXFxuKjo6LXdlYmtpdC1zY3JvbGxiYXIge1xcbiAgICB3aWR0aDogLjNyZW07XFxufVxcblxcbio6Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrIHtcXG4gICAgLXdlYmtpdC1ib3gtc2hhZG93OiBpbnNldCAwIDAgNnB4IHJnYmEoMCwgMCwgMCwgMC4zKTtcXG59XFxuXFxuKjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBkYXJrZ3JleTtcXG4gICAgb3V0bGluZSAgICAgICAgIDogMXB4IHNvbGlkIHNsYXRlZ3JleTtcXG59XFxuXFxuLmlucHV0LWdyb3VwPi5mb3JtLWNvbnRyb2wsXFxuLmlucHV0LWdyb3VwLXRleHQge1xcbiAgICBwYWRkaW5nICA6IC4xcmVtIC41cmVtO1xcbiAgICBmb250LXNpemU6IC44cmVtO1xcbn1cXG5cXG4uYm9sZCB7XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cIl19XSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIG9wdGlvbnMgPSB7fTtcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZXJzY29yZS1kYW5nbGUsIG5vLXBhcmFtLXJlYXNzaWduXG5cblxuICB1cmwgPSB1cmwgJiYgdXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybDtcblxuICBpZiAodHlwZW9mIHVybCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9IC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuXG5cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB1cmwgKz0gb3B0aW9ucy5oYXNoO1xuICB9IC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcblxuXG4gIGlmICgvW1wiJygpIFxcdFxcbl0vLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csICdcXFxcbicpLCBcIlxcXCJcIik7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNDBkN2YwYjIzOTM1M2VhNzViYTUxY2NjMWI1YjE3ZWEudHRmXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjMuanBnXCI7IiwidmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0xMS0xIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tMTEtMiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMTEtMyEuL25hdmJhci5zY3NzXCIpO1xuY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbmlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xufVxuXG52YXIgb3B0aW9ucyA9IHt9XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmIChjb250ZW50LmxvY2Fscykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xufVxuIiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyh0cnVlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLm5hdmJhci1jb250YWluZXIgI25hdntwYWRkaW5nOi41cmVtIDJyZW07Ym9yZGVyLWJvdHRvbTouMDVyZW0gc29saWQgd2hpdGU7YmFja2dyb3VuZC1jb2xvcjojMjAyMDIwO2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LW9yaWVudDpob3Jpem9udGFsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7ZmxleC1kaXJlY3Rpb246cm93Oy13ZWJraXQtYm94LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjttYXgtaGVpZ2h0OjU2cHh9Lm5hdmJhci1jb250YWluZXIgI25hdiBsaXtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyOy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXJ9Lm5hdmJhci1jb250YWluZXIgI25hdiAubmF2LWxpbmt7cGFkZGluZzowICAxcmVtfS5uYXZiYXItY29udGFpbmVyICNuYXYgYXtjb2xvcjp3aGl0ZX0ubmF2YmFyLWNvbnRhaW5lciAjbmF2IGltZ3toZWlnaHQ6MS44cmVtfS5uYXZiYXItY29udGFpbmVyICNuYXYgLmZhe21hcmdpbi10b3A6MH0ubmF2YmFyLWNvbnRhaW5lciAjbmF2IC5mYS1zaWduLW91dHtmb250LXNpemU6MS41cmVtfS5uYXZiYXItY29udGFpbmVyICNuYXYgLmZhLXNpZ24tb3V0OmhvdmVye2NvbG9yOiNkOWQ5ZDl9Lm5hdmJhci1jb250YWluZXIgI25hdiBoNHtjb2xvcjp3aGl0ZTtmb250LXdlaWdodDpib2xkfSNsb2dvLWRlc2N7Ym9yZGVyLXN0eWxlOm5vbmU7Zm9udC1zaXplOjEuMnJlbTtmb250LWZhbWlseTonc3BpZGVyLWZvbnQnfS5sb2dvLWJsaW5rey13ZWJraXQtYW5pbWF0aW9uOmJsaW5raW5nIDJzIGluZmluaXRlO2FuaW1hdGlvbjpibGlua2luZyAycyBpbmZpbml0ZTstd2Via2l0LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6MTthbmltYXRpb24taXRlcmF0aW9uLWNvdW50OjF9LmxvZ28tZGVzYy1ibGlua3std2Via2l0LWFuaW1hdGlvbjpibGlua2luZzIgMnMgaW5maW5pdGU7YW5pbWF0aW9uOmJsaW5raW5nMiAycyBpbmZpbml0ZTstd2Via2l0LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6MTthbmltYXRpb24taXRlcmF0aW9uLWNvdW50OjF9QC13ZWJraXQta2V5ZnJhbWVzIGJsaW5raW5nezAle2JhY2tncm91bmQtY29sb3I6IzM3RUY1MDtib3JkZXI6MnB4IHNvbGlkICM4NzE5MjQ7cGFkZGluZzouMnJlbTtib3JkZXItcmFkaXVzOi4ycmVtfTEwMCV7YmFja2dyb3VuZC1jb2xvcjpibGFjaztib3JkZXI6MnB4IHNvbGlkIGJsYWNrO3BhZGRpbmc6LjJyZW07Ym9yZGVyLXJhZGl1czouMnJlbX19QGtleWZyYW1lcyBibGlua2luZ3swJXtiYWNrZ3JvdW5kLWNvbG9yOiMzN0VGNTA7Ym9yZGVyOjJweCBzb2xpZCAjODcxOTI0O3BhZGRpbmc6LjJyZW07Ym9yZGVyLXJhZGl1czouMnJlbX0xMDAle2JhY2tncm91bmQtY29sb3I6YmxhY2s7Ym9yZGVyOjJweCBzb2xpZCBibGFjaztwYWRkaW5nOi4ycmVtO2JvcmRlci1yYWRpdXM6LjJyZW19fUAtd2Via2l0LWtleWZyYW1lcyBibGlua2luZzJ7MCV7Y29sb3I6IzM3RUY1MDtib3JkZXItYm90dG9tOi4wNXJlbSBzb2xpZCAjMzdFRjUwfTEwMCV7Y29sb3I6d2hpdGU7Ym9yZGVyLWJvdHRvbTouMDVyZW0gc29saWQgd2hpdGV9fUBrZXlmcmFtZXMgYmxpbmtpbmcyezAle2NvbG9yOiMzN0VGNTA7Ym9yZGVyLWJvdHRvbTouMDVyZW0gc29saWQgIzM3RUY1MH0xMDAle2NvbG9yOndoaXRlO2JvcmRlci1ib3R0b206LjA1cmVtIHNvbGlkIHdoaXRlfX1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCIvaG9tZS9kZWVwL0Rlc2t0b3AvcHJvamVjdHMvY3Jhd2xtZS9mcm9udGVuZC9zcmMvY29tcG9uZW50cy9jb21tb24vbmF2YmFyL25hdmJhci5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUNBLHVCQUVRLGtCQUE0QixDQUM1QixnQ0FBb0MsQ0FDcEMsd0JBQXlCLENBQ3pCLG1CQUFzQixDQUF0QixZQUFzQixDQUN0Qiw2QkFBcUIsQ0FBckIsNEJBQXFCLENBQXJCLGtCQUFxQixDQUNyQix3QkFBK0IsQ0FBL0IsNkJBQStCLENBQy9CLGVBQXNCLENBUjlCLDBCQVdZLG1CQUFxQixDQUFyQixZQUFxQixDQUNyQix1QkFBdUIsQ0FBdkIsc0JBQXVCLENBQ3ZCLHdCQUFpQixDQUFqQixrQkFBdUIsQ0FibkMsaUNBZ0JZLGVBQWlCLENBaEI3Qix5QkFtQlksV0FBWSxDQW5CeEIsMkJBdUJZLGFBQWMsQ0F2QjFCLDJCQTBCWSxZQUFjLENBMUIxQixvQ0E2QlksZ0JBQWlCLENBN0I3QiwwQ0FpQ2dCLGFBQXlCLENBakN6QywwQkFzQ1ksV0FBa0IsQ0FDbEIsZ0JBQWlCLENBQ3BCLFdBS0wsaUJBQWtCLENBQ2xCLGdCQUFvQixDQUNwQix5QkFBMEIsQ0FDN0IsWUFHRyxzQ0FBK0MsQ0FBL0MsOEJBQStDLENBQy9DLG1DQUEyQixDQUEzQiwyQkFBNEIsQ0FDL0IsaUJBR0csdUNBQWdELENBQWhELCtCQUFnRCxDQUNoRCxtQ0FBMkIsQ0FBM0IsMkJBQTRCLENBQy9CLDRCQUdHLEdBQ0ksd0JBQXlCLENBQ3pCLHdCQUFtQyxDQUNuQyxhQUF1QixDQUN2QixtQkFBdUIsQ0FHM0IsS0FDSSxzQkFBdUIsQ0FDdkIsc0JBQWlDLENBQ2pDLGFBQXVCLENBQ3ZCLG1CQUF1QixDQUFBLENBZDlCLG9CQUdHLEdBQ0ksd0JBQXlCLENBQ3pCLHdCQUFtQyxDQUNuQyxhQUF1QixDQUN2QixtQkFBdUIsQ0FHM0IsS0FDSSxzQkFBdUIsQ0FDdkIsc0JBQWlDLENBQ2pDLGFBQXVCLENBQ3ZCLG1CQUF1QixDQUFBLENBTS9CLDZCQUNJLEdBQ0ksYUFBc0IsQ0FDdEIsa0NBQW1DLENBR3ZDLEtBQ0ksV0FBb0IsQ0FDcEIsZ0NBQWlDLENBQUEsQ0FSekMscUJBQ0ksR0FDSSxhQUFzQixDQUN0QixrQ0FBbUMsQ0FHdkMsS0FDSSxXQUFvQixDQUNwQixnQ0FBaUMsQ0FBQVwiLFwiZmlsZVwiOlwibmF2YmFyLnNjc3NcIixcInNvdXJjZXNDb250ZW50XCI6W1wiXFxuLm5hdmJhci1jb250YWluZXJ7XFxuICAgICNuYXYge1xcbiAgICAgICAgcGFkZGluZyAgICAgICAgIDogLjVyZW0gMnJlbTtcXG4gICAgICAgIGJvcmRlci1ib3R0b20gICA6IC4wNXJlbSBzb2xpZCB3aGl0ZTtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMyMDIwMjA7XFxuICAgICAgICBkaXNwbGF5ICAgICAgICAgOiBmbGV4O1xcbiAgICAgICAgZmxleC1kaXJlY3Rpb24gIDogcm93O1xcbiAgICAgICAganVzdGlmeS1jb250ZW50IDogc3BhY2UtYmV0d2VlbjtcXG4gICAgICAgIG1heC1oZWlnaHQgICAgICA6IDU2cHg7XFxuICAgIFxcbiAgICAgICAgbGkge1xcbiAgICAgICAgICAgIGRpc3BsYXkgICAgICAgIDogZmxleDtcXG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgICAgICAgICBhbGlnbi1pdGVtcyAgICA6IGNlbnRlcjtcXG4gICAgICAgIH1cXG4gICAgICAgIC5uYXYtbGlua3tcXG4gICAgICAgICAgICBwYWRkaW5nIDogMCAgMXJlbTtcXG4gICAgICAgIH1cXG4gICAgICAgIGEge1xcbiAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgICAgIH1cXG4gICAgXFxuICAgICAgICBpbWcge1xcbiAgICAgICAgICAgIGhlaWdodDogMS44cmVtO1xcbiAgICAgICAgfVxcbiAgICAgICAgLmZhe1xcbiAgICAgICAgICAgIG1hcmdpbi10b3AgOiAwO1xcbiAgICAgICAgfVxcbiAgICAgICAgLmZhLXNpZ24tb3V0IHtcXG4gICAgICAgICAgICBmb250LXNpemU6IDEuNXJlbTtcXG4gICAgXFxuICAgICAgICAgICAgJjpob3ZlciB7XFxuICAgIFxcbiAgICAgICAgICAgICAgICBjb2xvcjogcmdiKDIxNywgMjE3LCAyMTcpXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgXFxuICAgICAgICBoNCB7XFxuICAgICAgICAgICAgY29sb3IgICAgICA6IHdoaXRlO1xcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgICAgICAgfVxcbiAgICB9XFxufVxcblxcbiNsb2dvLWRlc2Mge1xcbiAgICBib3JkZXItc3R5bGU6IG5vbmU7XFxuICAgIGZvbnQtc2l6ZSAgIDogMS4ycmVtO1xcbiAgICBmb250LWZhbWlseTogJ3NwaWRlci1mb250JztcXG59XFxuXFxuLmxvZ28tYmxpbmsge1xcbiAgICBhbmltYXRpb24gICAgICAgICAgICAgICAgOiBibGlua2luZyAycyBpbmZpbml0ZTtcXG4gICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogMTtcXG59XFxuXFxuLmxvZ28tZGVzYy1ibGluayB7XFxuICAgIGFuaW1hdGlvbiAgICAgICAgICAgICAgICA6IGJsaW5raW5nMiAycyBpbmZpbml0ZTtcXG4gICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogMTtcXG59XFxuXFxuQGtleWZyYW1lcyBibGlua2luZyB7XFxuICAgIDAlIHtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMzN0VGNTA7XFxuICAgICAgICBib3JkZXIgICAgICAgICAgOiAycHggc29saWQgIzg3MTkyNDtcXG4gICAgICAgIHBhZGRpbmcgICAgICAgICA6IC4ycmVtO1xcbiAgICAgICAgYm9yZGVyLXJhZGl1cyAgIDogLjJyZW07XFxuICAgIH1cXG5cXG4gICAgMTAwJSB7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcXG4gICAgICAgIGJvcmRlciAgICAgICAgICA6IDJweCBzb2xpZCBibGFjaztcXG4gICAgICAgIHBhZGRpbmcgICAgICAgICA6IC4ycmVtO1xcbiAgICAgICAgYm9yZGVyLXJhZGl1cyAgIDogLjJyZW07XFxuICAgIH1cXG5cXG59XFxuXFxuXFxuQGtleWZyYW1lcyBibGlua2luZzIge1xcbiAgICAwJSB7XFxuICAgICAgICBjb2xvciAgICAgICAgOiAjMzdFRjUwO1xcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogLjA1cmVtIHNvbGlkICMzN0VGNTA7XFxuICAgIH1cXG5cXG4gICAgMTAwJSB7XFxuICAgICAgICBjb2xvciAgICAgICAgOiB3aGl0ZTtcXG4gICAgICAgIGJvcmRlci1ib3R0b206IC4wNXJlbSBzb2xpZCB3aGl0ZTtcXG4gICAgfVxcbn1cIl19XSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJ2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMTEtMSEuLi8uLi9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tMTEtMiEuLi8uLi9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0xMS0zIS4vUmVhY3RUb2FzdGlmeS5jc3NcIik7XG5jb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG59XG5cbnZhciBvcHRpb25zID0ge31cblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZiAoY29udGVudC5sb2NhbHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbn1cbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyh0cnVlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLlRvYXN0aWZ5X190b2FzdC1jb250YWluZXJ7ei1pbmRleDo5OTk5Oy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDAsIDk5OTlweCk7cG9zaXRpb246Zml4ZWQ7cGFkZGluZzo0cHg7d2lkdGg6MzIwcHg7Ym94LXNpemluZzpib3JkZXItYm94O2NvbG9yOiNmZmZ9LlRvYXN0aWZ5X190b2FzdC1jb250YWluZXItLXRvcC1sZWZ0e3RvcDoxZW07bGVmdDoxZW19LlRvYXN0aWZ5X190b2FzdC1jb250YWluZXItLXRvcC1jZW50ZXJ7dG9wOjFlbTtsZWZ0OjUwJTttYXJnaW4tbGVmdDotMTYwcHh9LlRvYXN0aWZ5X190b2FzdC1jb250YWluZXItLXRvcC1yaWdodHt0b3A6MWVtO3JpZ2h0OjFlbX0uVG9hc3RpZnlfX3RvYXN0LWNvbnRhaW5lci0tYm90dG9tLWxlZnR7Ym90dG9tOjFlbTtsZWZ0OjFlbX0uVG9hc3RpZnlfX3RvYXN0LWNvbnRhaW5lci0tYm90dG9tLWNlbnRlcntib3R0b206MWVtO2xlZnQ6NTAlO21hcmdpbi1sZWZ0Oi0xNjBweH0uVG9hc3RpZnlfX3RvYXN0LWNvbnRhaW5lci0tYm90dG9tLXJpZ2h0e2JvdHRvbToxZW07cmlnaHQ6MWVtfUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDgwcHgpey5Ub2FzdGlmeV9fdG9hc3QtY29udGFpbmVye3dpZHRoOjEwMHZ3O3BhZGRpbmc6MDtsZWZ0OjA7bWFyZ2luOjB9LlRvYXN0aWZ5X190b2FzdC1jb250YWluZXItLXRvcC1sZWZ0LC5Ub2FzdGlmeV9fdG9hc3QtY29udGFpbmVyLS10b3AtY2VudGVyLC5Ub2FzdGlmeV9fdG9hc3QtY29udGFpbmVyLS10b3AtcmlnaHR7dG9wOjB9LlRvYXN0aWZ5X190b2FzdC1jb250YWluZXItLWJvdHRvbS1sZWZ0LC5Ub2FzdGlmeV9fdG9hc3QtY29udGFpbmVyLS1ib3R0b20tY2VudGVyLC5Ub2FzdGlmeV9fdG9hc3QtY29udGFpbmVyLS1ib3R0b20tcmlnaHR7Ym90dG9tOjB9LlRvYXN0aWZ5X190b2FzdC1jb250YWluZXItLXJ0bHtyaWdodDowO2xlZnQ6aW5pdGlhbH19LlRvYXN0aWZ5X190b2FzdHtwb3NpdGlvbjpyZWxhdGl2ZTttaW4taGVpZ2h0OjY0cHg7Ym94LXNpemluZzpib3JkZXItYm94O21hcmdpbi1ib3R0b206MXJlbTtwYWRkaW5nOjhweDtib3JkZXItcmFkaXVzOjFweDtib3gtc2hhZG93OjAgMXB4IDEwcHggMCByZ2JhKDAsMCwwLDAuMSksMCAycHggMTVweCAwIHJnYmEoMCwwLDAsMC4wNSk7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtcGFjazpqdXN0aWZ5O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO21heC1oZWlnaHQ6ODAwcHg7b3ZlcmZsb3c6aGlkZGVuO2ZvbnQtZmFtaWx5OnNhbnMtc2VyaWY7Y3Vyc29yOnBvaW50ZXI7ZGlyZWN0aW9uOmx0cn0uVG9hc3RpZnlfX3RvYXN0LS1ydGx7ZGlyZWN0aW9uOnJ0bH0uVG9hc3RpZnlfX3RvYXN0LS1kZWZhdWx0e2JhY2tncm91bmQ6I2ZmZjtjb2xvcjojYWFhfS5Ub2FzdGlmeV9fdG9hc3QtLWluZm97YmFja2dyb3VuZDojMzQ5OGRifS5Ub2FzdGlmeV9fdG9hc3QtLXN1Y2Nlc3N7YmFja2dyb3VuZDojMDdiYzBjfS5Ub2FzdGlmeV9fdG9hc3QtLXdhcm5pbmd7YmFja2dyb3VuZDojZjFjNDBmfS5Ub2FzdGlmeV9fdG9hc3QtLWVycm9ye2JhY2tncm91bmQ6I2U3NGMzY30uVG9hc3RpZnlfX3RvYXN0LWJvZHl7bWFyZ2luOmF1dG8gMDstd2Via2l0LWJveC1mbGV4OjE7ZmxleDoxfUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDgwcHgpey5Ub2FzdGlmeV9fdG9hc3R7bWFyZ2luLWJvdHRvbTowfX0uVG9hc3RpZnlfX2Nsb3NlLWJ1dHRvbntjb2xvcjojZmZmO2ZvbnQtd2VpZ2h0OmJvbGQ7Zm9udC1zaXplOjE0cHg7YmFja2dyb3VuZDp0cmFuc3BhcmVudDtvdXRsaW5lOm5vbmU7Ym9yZGVyOm5vbmU7cGFkZGluZzowO2N1cnNvcjpwb2ludGVyO29wYWNpdHk6MC43Oy13ZWJraXQtdHJhbnNpdGlvbjowLjNzIGVhc2U7dHJhbnNpdGlvbjowLjNzIGVhc2U7YWxpZ24tc2VsZjpmbGV4LXN0YXJ0fS5Ub2FzdGlmeV9fY2xvc2UtYnV0dG9uLS1kZWZhdWx0e2NvbG9yOiMwMDA7b3BhY2l0eTowLjN9LlRvYXN0aWZ5X19jbG9zZS1idXR0b246aG92ZXIsLlRvYXN0aWZ5X19jbG9zZS1idXR0b246Zm9jdXN7b3BhY2l0eToxfUAtd2Via2l0LWtleWZyYW1lcyBUb2FzdGlmeV9fdHJhY2tQcm9ncmVzc3swJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZVgoMSk7dHJhbnNmb3JtOnNjYWxlWCgxKX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlWCgwKTt0cmFuc2Zvcm06c2NhbGVYKDApfX1Aa2V5ZnJhbWVzIFRvYXN0aWZ5X190cmFja1Byb2dyZXNzezAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlWCgxKTt0cmFuc2Zvcm06c2NhbGVYKDEpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGVYKDApO3RyYW5zZm9ybTpzY2FsZVgoMCl9fS5Ub2FzdGlmeV9fcHJvZ3Jlc3MtYmFye3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbTowO2xlZnQ6MDt3aWR0aDoxMDAlO2hlaWdodDo1cHg7ei1pbmRleDo5OTk5O29wYWNpdHk6MC43O2JhY2tncm91bmQtY29sb3I6cmdiYSgyNTUsMjU1LDI1NSwwLjcpOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0O3RyYW5zZm9ybS1vcmlnaW46bGVmdH0uVG9hc3RpZnlfX3Byb2dyZXNzLWJhci0tYW5pbWF0ZWR7LXdlYmtpdC1hbmltYXRpb246VG9hc3RpZnlfX3RyYWNrUHJvZ3Jlc3MgbGluZWFyIDEgZm9yd2FyZHM7YW5pbWF0aW9uOlRvYXN0aWZ5X190cmFja1Byb2dyZXNzIGxpbmVhciAxIGZvcndhcmRzfS5Ub2FzdGlmeV9fcHJvZ3Jlc3MtYmFyLS1jb250cm9sbGVkey13ZWJraXQtdHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuMnM7dHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuMnM7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjJzO3RyYW5zaXRpb246dHJhbnNmb3JtIC4ycywgLXdlYmtpdC10cmFuc2Zvcm0gLjJzfS5Ub2FzdGlmeV9fcHJvZ3Jlc3MtYmFyLS1ydGx7cmlnaHQ6MDtsZWZ0OmluaXRpYWw7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0O3RyYW5zZm9ybS1vcmlnaW46cmlnaHR9LlRvYXN0aWZ5X19wcm9ncmVzcy1iYXItLWRlZmF1bHR7YmFja2dyb3VuZDotd2Via2l0LWdyYWRpZW50KGxpbmVhciwgbGVmdCB0b3AsIHJpZ2h0IHRvcCwgZnJvbSgjNGNkOTY0KSwgY29sb3Itc3RvcCgjNWFjOGZhKSwgY29sb3Itc3RvcCgjMDA3YWZmKSwgY29sb3Itc3RvcCgjMzRhYWRjKSwgY29sb3Itc3RvcCgjNTg1NmQ2KSwgdG8oI2ZmMmQ1NSkpO2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAjNGNkOTY0LCAjNWFjOGZhLCAjMDA3YWZmLCAjMzRhYWRjLCAjNTg1NmQ2LCAjZmYyZDU1KX1ALXdlYmtpdC1rZXlmcmFtZXMgVG9hc3RpZnlfX2JvdW5jZUluUmlnaHR7ZnJvbSw2MCUsNzUlLDkwJSx0b3std2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKDAuMjE1LCAwLjYxLCAwLjM1NSwgMSk7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoMC4yMTUsIDAuNjEsIDAuMzU1LCAxKX1mcm9te29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgzMDAwcHgsIDAsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgzMDAwcHgsIDAsIDApfTYwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTI1cHgsIDAsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgtMjVweCwgMCwgMCl9NzUley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDEwcHgsIDAsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgxMHB4LCAwLCAwKX05MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTVweCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC01cHgsIDAsIDApfXRvey13ZWJraXQtdHJhbnNmb3JtOm5vbmU7dHJhbnNmb3JtOm5vbmV9fUBrZXlmcmFtZXMgVG9hc3RpZnlfX2JvdW5jZUluUmlnaHR7ZnJvbSw2MCUsNzUlLDkwJSx0b3std2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKDAuMjE1LCAwLjYxLCAwLjM1NSwgMSk7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoMC4yMTUsIDAuNjEsIDAuMzU1LCAxKX1mcm9te29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgzMDAwcHgsIDAsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgzMDAwcHgsIDAsIDApfTYwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTI1cHgsIDAsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgtMjVweCwgMCwgMCl9NzUley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDEwcHgsIDAsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgxMHB4LCAwLCAwKX05MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTVweCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC01cHgsIDAsIDApfXRvey13ZWJraXQtdHJhbnNmb3JtOm5vbmU7dHJhbnNmb3JtOm5vbmV9fUAtd2Via2l0LWtleWZyYW1lcyBUb2FzdGlmeV9fYm91bmNlT3V0UmlnaHR7MjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgtMjBweCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0yMHB4LCAwLCAwKX10b3tvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMjAwMHB4LCAwLCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMjAwMHB4LCAwLCAwKX19QGtleWZyYW1lcyBUb2FzdGlmeV9fYm91bmNlT3V0UmlnaHR7MjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgtMjBweCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0yMHB4LCAwLCAwKX10b3tvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMjAwMHB4LCAwLCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMjAwMHB4LCAwLCAwKX19QC13ZWJraXQta2V5ZnJhbWVzIFRvYXN0aWZ5X19ib3VuY2VJbkxlZnR7ZnJvbSw2MCUsNzUlLDkwJSx0b3std2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKDAuMjE1LCAwLjYxLCAwLjM1NSwgMSk7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoMC4yMTUsIDAuNjEsIDAuMzU1LCAxKX0wJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTMwMDBweCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0zMDAwcHgsIDAsIDApfTYwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMjVweCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDI1cHgsIDAsIDApfTc1JXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgtMTBweCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0xMHB4LCAwLCAwKX05MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoNXB4LCAwLCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoNXB4LCAwLCAwKX10b3std2Via2l0LXRyYW5zZm9ybTpub25lO3RyYW5zZm9ybTpub25lfX1Aa2V5ZnJhbWVzIFRvYXN0aWZ5X19ib3VuY2VJbkxlZnR7ZnJvbSw2MCUsNzUlLDkwJSx0b3std2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKDAuMjE1LCAwLjYxLCAwLjM1NSwgMSk7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoMC4yMTUsIDAuNjEsIDAuMzU1LCAxKX0wJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTMwMDBweCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0zMDAwcHgsIDAsIDApfTYwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMjVweCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDI1cHgsIDAsIDApfTc1JXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgtMTBweCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0xMHB4LCAwLCAwKX05MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoNXB4LCAwLCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoNXB4LCAwLCAwKX10b3std2Via2l0LXRyYW5zZm9ybTpub25lO3RyYW5zZm9ybTpub25lfX1ALXdlYmtpdC1rZXlmcmFtZXMgVG9hc3RpZnlfX2JvdW5jZU91dExlZnR7MjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgyMHB4LCAwLCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMjBweCwgMCwgMCl9dG97b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0yMDAwcHgsIDAsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgtMjAwMHB4LCAwLCAwKX19QGtleWZyYW1lcyBUb2FzdGlmeV9fYm91bmNlT3V0TGVmdHsyMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDIwcHgsIDAsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgyMHB4LCAwLCAwKX10b3tvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTIwMDBweCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0yMDAwcHgsIDAsIDApfX1ALXdlYmtpdC1rZXlmcmFtZXMgVG9hc3RpZnlfX2JvdW5jZUluVXB7ZnJvbSw2MCUsNzUlLDkwJSx0b3std2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKDAuMjE1LCAwLjYxLCAwLjM1NSwgMSk7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoMC4yMTUsIDAuNjEsIDAuMzU1LCAxKX1mcm9te29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAzMDAwcHgsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAzMDAwcHgsIDApfTYwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgLTIwcHgsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAtMjBweCwgMCl9NzUley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDEwcHgsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAxMHB4LCAwKX05MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgLTVweCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIC01cHgsIDApfXRvey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDAsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAwLCAwKX19QGtleWZyYW1lcyBUb2FzdGlmeV9fYm91bmNlSW5VcHtmcm9tLDYwJSw3NSUsOTAlLHRvey13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoMC4yMTUsIDAuNjEsIDAuMzU1LCAxKTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllcigwLjIxNSwgMC42MSwgMC4zNTUsIDEpfWZyb217b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDMwMDBweCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDMwMDBweCwgMCl9NjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAtMjBweCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIC0yMHB4LCAwKX03NSV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMTBweCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDEwcHgsIDApfTkwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAtNXB4LCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgLTVweCwgMCl9dG97LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDAsIDApfX1ALXdlYmtpdC1rZXlmcmFtZXMgVG9hc3RpZnlfX2JvdW5jZU91dFVwezIwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAtMTBweCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIC0xMHB4LCAwKX00MCUsNDUle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAyMHB4LCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMjBweCwgMCl9dG97b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIC0yMDAwcHgsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAtMjAwMHB4LCAwKX19QGtleWZyYW1lcyBUb2FzdGlmeV9fYm91bmNlT3V0VXB7MjAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIC0xMHB4LCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgLTEwcHgsIDApfTQwJSw0NSV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDIwcHgsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAyMHB4LCAwKX10b3tvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgLTIwMDBweCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIC0yMDAwcHgsIDApfX1ALXdlYmtpdC1rZXlmcmFtZXMgVG9hc3RpZnlfX2JvdW5jZUluRG93bntmcm9tLDYwJSw3NSUsOTAlLHRvey13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoMC4yMTUsIDAuNjEsIDAuMzU1LCAxKTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllcigwLjIxNSwgMC42MSwgMC4zNTUsIDEpfTAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAtMzAwMHB4LCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgLTMwMDBweCwgMCl9NjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAyNXB4LCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMjVweCwgMCl9NzUley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIC0xMHB4LCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgLTEwcHgsIDApfTkwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCA1cHgsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCA1cHgsIDApfXRvey13ZWJraXQtdHJhbnNmb3JtOm5vbmU7dHJhbnNmb3JtOm5vbmV9fUBrZXlmcmFtZXMgVG9hc3RpZnlfX2JvdW5jZUluRG93bntmcm9tLDYwJSw3NSUsOTAlLHRvey13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoMC4yMTUsIDAuNjEsIDAuMzU1LCAxKTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllcigwLjIxNSwgMC42MSwgMC4zNTUsIDEpfTAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAtMzAwMHB4LCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgLTMwMDBweCwgMCl9NjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAyNXB4LCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMjVweCwgMCl9NzUley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIC0xMHB4LCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgLTEwcHgsIDApfTkwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCA1cHgsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCA1cHgsIDApfXRvey13ZWJraXQtdHJhbnNmb3JtOm5vbmU7dHJhbnNmb3JtOm5vbmV9fUAtd2Via2l0LWtleWZyYW1lcyBUb2FzdGlmeV9fYm91bmNlT3V0RG93bnsyMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMTBweCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDEwcHgsIDApfTQwJSw0NSV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIC0yMHB4LCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgLTIwcHgsIDApfXRve29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAyMDAwcHgsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAyMDAwcHgsIDApfX1Aa2V5ZnJhbWVzIFRvYXN0aWZ5X19ib3VuY2VPdXREb3duezIwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAxMHB4LCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMTBweCwgMCl9NDAlLDQ1JXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgLTIwcHgsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAtMjBweCwgMCl9dG97b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDIwMDBweCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDIwMDBweCwgMCl9fS5Ub2FzdGlmeV9fYm91bmNlLWVudGVyLS10b3AtbGVmdCwuVG9hc3RpZnlfX2JvdW5jZS1lbnRlci0tYm90dG9tLWxlZnR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpUb2FzdGlmeV9fYm91bmNlSW5MZWZ0O2FuaW1hdGlvbi1uYW1lOlRvYXN0aWZ5X19ib3VuY2VJbkxlZnR9LlRvYXN0aWZ5X19ib3VuY2UtZW50ZXItLXRvcC1yaWdodCwuVG9hc3RpZnlfX2JvdW5jZS1lbnRlci0tYm90dG9tLXJpZ2h0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6VG9hc3RpZnlfX2JvdW5jZUluUmlnaHQ7YW5pbWF0aW9uLW5hbWU6VG9hc3RpZnlfX2JvdW5jZUluUmlnaHR9LlRvYXN0aWZ5X19ib3VuY2UtZW50ZXItLXRvcC1jZW50ZXJ7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpUb2FzdGlmeV9fYm91bmNlSW5Eb3duO2FuaW1hdGlvbi1uYW1lOlRvYXN0aWZ5X19ib3VuY2VJbkRvd259LlRvYXN0aWZ5X19ib3VuY2UtZW50ZXItLWJvdHRvbS1jZW50ZXJ7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpUb2FzdGlmeV9fYm91bmNlSW5VcDthbmltYXRpb24tbmFtZTpUb2FzdGlmeV9fYm91bmNlSW5VcH0uVG9hc3RpZnlfX2JvdW5jZS1leGl0LS10b3AtbGVmdCwuVG9hc3RpZnlfX2JvdW5jZS1leGl0LS1ib3R0b20tbGVmdHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOlRvYXN0aWZ5X19ib3VuY2VPdXRMZWZ0O2FuaW1hdGlvbi1uYW1lOlRvYXN0aWZ5X19ib3VuY2VPdXRMZWZ0fS5Ub2FzdGlmeV9fYm91bmNlLWV4aXQtLXRvcC1yaWdodCwuVG9hc3RpZnlfX2JvdW5jZS1leGl0LS1ib3R0b20tcmlnaHR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpUb2FzdGlmeV9fYm91bmNlT3V0UmlnaHQ7YW5pbWF0aW9uLW5hbWU6VG9hc3RpZnlfX2JvdW5jZU91dFJpZ2h0fS5Ub2FzdGlmeV9fYm91bmNlLWV4aXQtLXRvcC1jZW50ZXJ7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpUb2FzdGlmeV9fYm91bmNlT3V0VXA7YW5pbWF0aW9uLW5hbWU6VG9hc3RpZnlfX2JvdW5jZU91dFVwfS5Ub2FzdGlmeV9fYm91bmNlLWV4aXQtLWJvdHRvbS1jZW50ZXJ7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpUb2FzdGlmeV9fYm91bmNlT3V0RG93bjthbmltYXRpb24tbmFtZTpUb2FzdGlmeV9fYm91bmNlT3V0RG93bn1ALXdlYmtpdC1rZXlmcmFtZXMgVG9hc3RpZnlfX3pvb21Jbntmcm9te29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKDAuMywgMC4zLCAwLjMpO3RyYW5zZm9ybTpzY2FsZTNkKDAuMywgMC4zLCAwLjMpfTUwJXtvcGFjaXR5OjF9fUBrZXlmcmFtZXMgVG9hc3RpZnlfX3pvb21Jbntmcm9te29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKDAuMywgMC4zLCAwLjMpO3RyYW5zZm9ybTpzY2FsZTNkKDAuMywgMC4zLCAwLjMpfTUwJXtvcGFjaXR5OjF9fUAtd2Via2l0LWtleWZyYW1lcyBUb2FzdGlmeV9fem9vbU91dHtmcm9te29wYWNpdHk6MX01MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoMC4zLCAwLjMsIDAuMyk7dHJhbnNmb3JtOnNjYWxlM2QoMC4zLCAwLjMsIDAuMyl9dG97b3BhY2l0eTowfX1Aa2V5ZnJhbWVzIFRvYXN0aWZ5X196b29tT3V0e2Zyb217b3BhY2l0eToxfTUwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCgwLjMsIDAuMywgMC4zKTt0cmFuc2Zvcm06c2NhbGUzZCgwLjMsIDAuMywgMC4zKX10b3tvcGFjaXR5OjB9fS5Ub2FzdGlmeV9fem9vbS1lbnRlcnstd2Via2l0LWFuaW1hdGlvbi1uYW1lOlRvYXN0aWZ5X196b29tSW47YW5pbWF0aW9uLW5hbWU6VG9hc3RpZnlfX3pvb21Jbn0uVG9hc3RpZnlfX3pvb20tZXhpdHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOlRvYXN0aWZ5X196b29tT3V0O2FuaW1hdGlvbi1uYW1lOlRvYXN0aWZ5X196b29tT3V0fUAtd2Via2l0LWtleWZyYW1lcyBUb2FzdGlmeV9fZmxpcElue2Zyb217LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDEsIDAsIDAsIDkwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDEsIDAsIDAsIDkwZGVnKTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbjthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW47b3BhY2l0eTowfTQwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMSwgMCwgMCwgLTIwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDEsIDAsIDAsIC0yMGRlZyk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW47YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWlufTYwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMSwgMCwgMCwgMTBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMSwgMCwgMCwgMTBkZWcpO29wYWNpdHk6MX04MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDEsIDAsIDAsIC01ZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDEsIDAsIDAsIC01ZGVnKX10b3std2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KX19QGtleWZyYW1lcyBUb2FzdGlmeV9fZmxpcElue2Zyb217LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDEsIDAsIDAsIDkwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDEsIDAsIDAsIDkwZGVnKTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbjthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW47b3BhY2l0eTowfTQwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMSwgMCwgMCwgLTIwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDEsIDAsIDAsIC0yMGRlZyk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW47YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWlufTYwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMSwgMCwgMCwgMTBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMSwgMCwgMCwgMTBkZWcpO29wYWNpdHk6MX04MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDEsIDAsIDAsIC01ZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDEsIDAsIDAsIC01ZGVnKX10b3std2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KX19QC13ZWJraXQta2V5ZnJhbWVzIFRvYXN0aWZ5X19mbGlwT3V0e2Zyb217LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCl9MzAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGUzZCgxLCAwLCAwLCAtMjBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMSwgMCwgMCwgLTIwZGVnKTtvcGFjaXR5OjF9dG97LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDEsIDAsIDAsIDkwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDEsIDAsIDAsIDkwZGVnKTtvcGFjaXR5OjB9fUBrZXlmcmFtZXMgVG9hc3RpZnlfX2ZsaXBPdXR7ZnJvbXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KX0zMCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDEsIDAsIDAsIC0yMGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGUzZCgxLCAwLCAwLCAtMjBkZWcpO29wYWNpdHk6MX10b3std2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMSwgMCwgMCwgOTBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMSwgMCwgMCwgOTBkZWcpO29wYWNpdHk6MH19LlRvYXN0aWZ5X19mbGlwLWVudGVyey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6VG9hc3RpZnlfX2ZsaXBJbjthbmltYXRpb24tbmFtZTpUb2FzdGlmeV9fZmxpcElufS5Ub2FzdGlmeV9fZmxpcC1leGl0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6VG9hc3RpZnlfX2ZsaXBPdXQ7YW5pbWF0aW9uLW5hbWU6VG9hc3RpZnlfX2ZsaXBPdXR9QC13ZWJraXQta2V5ZnJhbWVzIFRvYXN0aWZ5X19zbGlkZUluUmlnaHR7ZnJvbXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgxMTAlLCAwLCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMTEwJSwgMCwgMCk7dmlzaWJpbGl0eTp2aXNpYmxlfXRvey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDAsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAwLCAwKX19QGtleWZyYW1lcyBUb2FzdGlmeV9fc2xpZGVJblJpZ2h0e2Zyb217LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMTEwJSwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDExMCUsIDAsIDApO3Zpc2liaWxpdHk6dmlzaWJsZX10b3std2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAwLCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMCwgMCl9fUAtd2Via2l0LWtleWZyYW1lcyBUb2FzdGlmeV9fc2xpZGVJbkxlZnR7ZnJvbXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgtMTEwJSwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0xMTAlLCAwLCAwKTt2aXNpYmlsaXR5OnZpc2libGV9dG97LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDAsIDApfX1Aa2V5ZnJhbWVzIFRvYXN0aWZ5X19zbGlkZUluTGVmdHtmcm9tey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0xMTAlLCAwLCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTExMCUsIDAsIDApO3Zpc2liaWxpdHk6dmlzaWJsZX10b3std2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAwLCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMCwgMCl9fUAtd2Via2l0LWtleWZyYW1lcyBUb2FzdGlmeV9fc2xpZGVJblVwe2Zyb217LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMTEwJSwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDExMCUsIDApO3Zpc2liaWxpdHk6dmlzaWJsZX10b3std2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAwLCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMCwgMCl9fUBrZXlmcmFtZXMgVG9hc3RpZnlfX3NsaWRlSW5VcHtmcm9tey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDExMCUsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAxMTAlLCAwKTt2aXNpYmlsaXR5OnZpc2libGV9dG97LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDAsIDApfX1ALXdlYmtpdC1rZXlmcmFtZXMgVG9hc3RpZnlfX3NsaWRlSW5Eb3due2Zyb217LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgLTExMCUsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAtMTEwJSwgMCk7dmlzaWJpbGl0eTp2aXNpYmxlfXRvey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDAsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAwLCAwKX19QGtleWZyYW1lcyBUb2FzdGlmeV9fc2xpZGVJbkRvd257ZnJvbXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAtMTEwJSwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIC0xMTAlLCAwKTt2aXNpYmlsaXR5OnZpc2libGV9dG97LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDAsIDApfX1ALXdlYmtpdC1rZXlmcmFtZXMgVG9hc3RpZnlfX3NsaWRlT3V0UmlnaHR7ZnJvbXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAwLCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMCwgMCl9dG97dmlzaWJpbGl0eTpoaWRkZW47LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMTEwJSwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDExMCUsIDAsIDApfX1Aa2V5ZnJhbWVzIFRvYXN0aWZ5X19zbGlkZU91dFJpZ2h0e2Zyb217LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDAsIDApfXRve3Zpc2liaWxpdHk6aGlkZGVuOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDExMCUsIDAsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgxMTAlLCAwLCAwKX19QC13ZWJraXQta2V5ZnJhbWVzIFRvYXN0aWZ5X19zbGlkZU91dExlZnR7ZnJvbXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAwLCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMCwgMCl9dG97dmlzaWJpbGl0eTpoaWRkZW47LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTExMCUsIDAsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgtMTEwJSwgMCwgMCl9fUBrZXlmcmFtZXMgVG9hc3RpZnlfX3NsaWRlT3V0TGVmdHtmcm9tey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDAsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAwLCAwKX10b3t2aXNpYmlsaXR5OmhpZGRlbjstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgtMTEwJSwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0xMTAlLCAwLCAwKX19QC13ZWJraXQta2V5ZnJhbWVzIFRvYXN0aWZ5X19zbGlkZU91dERvd257ZnJvbXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAwLCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMCwgMCl9dG97dmlzaWJpbGl0eTpoaWRkZW47LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgNTAwcHgsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCA1MDBweCwgMCl9fUBrZXlmcmFtZXMgVG9hc3RpZnlfX3NsaWRlT3V0RG93bntmcm9tey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDAsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAwLCAwKX10b3t2aXNpYmlsaXR5OmhpZGRlbjstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCA1MDBweCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDUwMHB4LCAwKX19QC13ZWJraXQta2V5ZnJhbWVzIFRvYXN0aWZ5X19zbGlkZU91dFVwe2Zyb217LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDAsIDApfXRve3Zpc2liaWxpdHk6aGlkZGVuOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIC01MDBweCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIC01MDBweCwgMCl9fUBrZXlmcmFtZXMgVG9hc3RpZnlfX3NsaWRlT3V0VXB7ZnJvbXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAwLCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMCwgMCl9dG97dmlzaWJpbGl0eTpoaWRkZW47LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgLTUwMHB4LCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgLTUwMHB4LCAwKX19LlRvYXN0aWZ5X19zbGlkZS1lbnRlci0tdG9wLWxlZnQsLlRvYXN0aWZ5X19zbGlkZS1lbnRlci0tYm90dG9tLWxlZnR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpUb2FzdGlmeV9fc2xpZGVJbkxlZnQ7YW5pbWF0aW9uLW5hbWU6VG9hc3RpZnlfX3NsaWRlSW5MZWZ0fS5Ub2FzdGlmeV9fc2xpZGUtZW50ZXItLXRvcC1yaWdodCwuVG9hc3RpZnlfX3NsaWRlLWVudGVyLS1ib3R0b20tcmlnaHR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpUb2FzdGlmeV9fc2xpZGVJblJpZ2h0O2FuaW1hdGlvbi1uYW1lOlRvYXN0aWZ5X19zbGlkZUluUmlnaHR9LlRvYXN0aWZ5X19zbGlkZS1lbnRlci0tdG9wLWNlbnRlcnstd2Via2l0LWFuaW1hdGlvbi1uYW1lOlRvYXN0aWZ5X19zbGlkZUluRG93bjthbmltYXRpb24tbmFtZTpUb2FzdGlmeV9fc2xpZGVJbkRvd259LlRvYXN0aWZ5X19zbGlkZS1lbnRlci0tYm90dG9tLWNlbnRlcnstd2Via2l0LWFuaW1hdGlvbi1uYW1lOlRvYXN0aWZ5X19zbGlkZUluVXA7YW5pbWF0aW9uLW5hbWU6VG9hc3RpZnlfX3NsaWRlSW5VcH0uVG9hc3RpZnlfX3NsaWRlLWV4aXQtLXRvcC1sZWZ0LC5Ub2FzdGlmeV9fc2xpZGUtZXhpdC0tYm90dG9tLWxlZnR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpUb2FzdGlmeV9fc2xpZGVPdXRMZWZ0O2FuaW1hdGlvbi1uYW1lOlRvYXN0aWZ5X19zbGlkZU91dExlZnR9LlRvYXN0aWZ5X19zbGlkZS1leGl0LS10b3AtcmlnaHQsLlRvYXN0aWZ5X19zbGlkZS1leGl0LS1ib3R0b20tcmlnaHR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpUb2FzdGlmeV9fc2xpZGVPdXRSaWdodDthbmltYXRpb24tbmFtZTpUb2FzdGlmeV9fc2xpZGVPdXRSaWdodH0uVG9hc3RpZnlfX3NsaWRlLWV4aXQtLXRvcC1jZW50ZXJ7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpUb2FzdGlmeV9fc2xpZGVPdXRVcDthbmltYXRpb24tbmFtZTpUb2FzdGlmeV9fc2xpZGVPdXRVcH0uVG9hc3RpZnlfX3NsaWRlLWV4aXQtLWJvdHRvbS1jZW50ZXJ7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpUb2FzdGlmeV9fc2xpZGVPdXREb3duO2FuaW1hdGlvbi1uYW1lOlRvYXN0aWZ5X19zbGlkZU91dERvd259XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wiL2hvbWUvZGVlcC9EZXNrdG9wL3Byb2plY3RzL2NyYXdsbWUvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL3JlYWN0LXRvYXN0aWZ5L2Rpc3QvUmVhY3RUb2FzdGlmeS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsMkJBQ0UsWUFBYSxDQUNiLDJDQUE0QyxDQUM1QyxjQUFlLENBQ2YsV0FBWSxDQUNaLFdBQVksQ0FDWixxQkFBc0IsQ0FDdEIsVUFBVyxDQUFHLHFDQUVaLE9BQVEsQ0FDUixRQUFTLENBQUcsdUNBRVosT0FBUSxDQUNSLFFBQVMsQ0FDVCxrQkFBbUIsQ0FBRyxzQ0FFdEIsT0FBUSxDQUNSLFNBQVUsQ0FBRyx3Q0FFYixVQUFXLENBQ1gsUUFBUyxDQUFHLDBDQUVaLFVBQVcsQ0FDWCxRQUFTLENBQ1Qsa0JBQW1CLENBQUcseUNBRXRCLFVBQVcsQ0FDWCxTQUFVLENBQUcsMENBR2YsMkJBQ0UsV0FBWSxDQUNaLFNBQVUsQ0FDVixNQUFPLENBQ1AsUUFBUyxDQUFHLGtIQUVWLEtBQU0sQ0FBRywySEFFVCxRQUFTLENBQUcsZ0NBRVosT0FBUSxDQUNSLFlBQWEsQ0FBRyxDQUV0QixpQkFDRSxpQkFBa0IsQ0FDbEIsZUFBZ0IsQ0FDaEIscUJBQXNCLENBQ3RCLGtCQUFtQixDQUNuQixXQUFZLENBQ1osaUJBQWtCLENBQ2xCLHFFQUE2RSxDQUU3RSxtQkFBYSxDQUFiLFlBQWEsQ0FFVCx3QkFBOEIsQ0FBOUIsNkJBQThCLENBQ2xDLGdCQUFpQixDQUNqQixlQUFnQixDQUNoQixzQkFBdUIsQ0FDdkIsY0FBZSxDQUNmLGFBQWMsQ0FBRyxzQkFFZixhQUFjLENBQUcsMEJBRWpCLGVBQWdCLENB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RSxzQ0FBVyxDQUFYLDhCQUErQixDQUNqQyxHQUNFLGlCQUFrQixDQUNsQix5Q0FBVyxDQUFYLGlDQUFrQyxDQUFBLENBRXRDLDBDQUNFLEtBQ0Usc0NBQVcsQ0FBWCw4QkFBK0IsQ0FDakMsR0FDRSxpQkFBa0IsQ0FDbEIsMENBQVcsQ0FBWCxrQ0FBbUMsQ0FBQSxDQUx2QyxrQ0FDRSxLQUNFLHNDQUFXLENBQVgsOEJBQStCLENBQ2pDLEdBQ0UsaUJBQWtCLENBQ2xCLDBDQUFXLENBQVgsa0NBQW1DLENBQUEsQ0FFdkMsMENBQ0UsS0FDRSxzQ0FBVyxDQUFYLDhCQUErQixDQUNqQyxHQUNFLGlCQUFrQixDQUNsQiwwQ0FBVyxDQUFYLGtDQUFtQyxDQUFBLENBTHZDLGtDQUNFLEtBQ0Usc0NBQVcsQ0FBWCw4QkFBK0IsQ0FDakMsR0FDRSxpQkFBa0IsQ0FDbEIsMENBQVcsQ0FBWCxrQ0FBbUMsQ0FBQSxDQUV2Qyx3Q0FDRSxLQUNFLHNDQUFXLENBQVgsOEJBQStCLENBQ2pDLEdBQ0UsaUJBQWtCLENBQ2xCLDJDQUFXLENBQVgsbUNBQW9DLENBQUEsQ0FMeEMsZ0NBQ0UsS0FDRSxzQ0FBVyxDQUFYLDhCQUErQixDQUNqQyxHQUNFLGlCQUFrQixDQUNsQiwyQ0FBVyxDQUFYLG1DQUFvQyxDQUFBLENBRXhDLHFFQUNFLDRDQUFnQixDQUFoQixvQ0FBcUMsQ0FBRyx1RUFHeEMsNkNBQWdCLENBQWhCLHFDQUFzQyxDQUFHLG1DQUd6Qyw0Q0FBZ0IsQ0FBaEIsb0NBQXFDLENBQUcsc0NBR3hDLDBDQUFnQixDQUFoQixrQ0FBbUMsQ0FBRyxtRUFHdEMsNkNBQWdCLENBQWhCLHFDQUFzQyxDQUFHLHFFQUd6Qyw4Q0FBZ0IsQ0FBaEIsc0NBQXVDLENBQUcsa0NBRzFDLDJDQUFnQixDQUFoQixtQ0FBb0MsQ0FBRyxxQ0FHdkMsNkNBQWdCLENBQWhCLHFDQUFzQ1wiLFwiZmlsZVwiOlwiUmVhY3RUb2FzdGlmeS5jc3NcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLlRvYXN0aWZ5X190b2FzdC1jb250YWluZXIge1xcbiAgei1pbmRleDogOTk5OTtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCA5OTk5cHgpO1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgcGFkZGluZzogNHB4O1xcbiAgd2lkdGg6IDMyMHB4O1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGNvbG9yOiAjZmZmOyB9XFxuICAuVG9hc3RpZnlfX3RvYXN0LWNvbnRhaW5lci0tdG9wLWxlZnQge1xcbiAgICB0b3A6IDFlbTtcXG4gICAgbGVmdDogMWVtOyB9XFxuICAuVG9hc3RpZnlfX3RvYXN0LWNvbnRhaW5lci0tdG9wLWNlbnRlciB7XFxuICAgIHRvcDogMWVtO1xcbiAgICBsZWZ0OiA1MCU7XFxuICAgIG1hcmdpbi1sZWZ0OiAtMTYwcHg7IH1cXG4gIC5Ub2FzdGlmeV9fdG9hc3QtY29udGFpbmVyLS10b3AtcmlnaHQge1xcbiAgICB0b3A6IDFlbTtcXG4gICAgcmlnaHQ6IDFlbTsgfVxcbiAgLlRvYXN0aWZ5X190b2FzdC1jb250YWluZXItLWJvdHRvbS1sZWZ0IHtcXG4gICAgYm90dG9tOiAxZW07XFxuICAgIGxlZnQ6IDFlbTsgfVxcbiAgLlRvYXN0aWZ5X190b2FzdC1jb250YWluZXItLWJvdHRvbS1jZW50ZXIge1xcbiAgICBib3R0b206IDFlbTtcXG4gICAgbGVmdDogNTAlO1xcbiAgICBtYXJnaW4tbGVmdDogLTE2MHB4OyB9XFxuICAuVG9hc3RpZnlfX3RvYXN0LWNvbnRhaW5lci0tYm90dG9tLXJpZ2h0IHtcXG4gICAgYm90dG9tOiAxZW07XFxuICAgIHJpZ2h0OiAxZW07IH1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQ4MHB4KSB7XFxuICAuVG9hc3RpZnlfX3RvYXN0LWNvbnRhaW5lciB7XFxuICAgIHdpZHRoOiAxMDB2dztcXG4gICAgcGFkZGluZzogMDtcXG4gICAgbGVmdDogMDtcXG4gICAgbWFyZ2luOiAwOyB9XFxuICAgIC5Ub2FzdGlmeV9fdG9hc3QtY29udGFpbmVyLS10b3AtbGVmdCwgLlRvYXN0aWZ5X190b2FzdC1jb250YWluZXItLXRvcC1jZW50ZXIsIC5Ub2FzdGlmeV9fdG9hc3QtY29udGFpbmVyLS10b3AtcmlnaHQge1xcbiAgICAgIHRvcDogMDsgfVxcbiAgICAuVG9hc3RpZnlfX3RvYXN0LWNvbnRhaW5lci0tYm90dG9tLWxlZnQsIC5Ub2FzdGlmeV9fdG9hc3QtY29udGFpbmVyLS1ib3R0b20tY2VudGVyLCAuVG9hc3RpZnlfX3RvYXN0LWNvbnRhaW5lci0tYm90dG9tLXJpZ2h0IHtcXG4gICAgICBib3R0b206IDA7IH1cXG4gICAgLlRvYXN0aWZ5X190b2FzdC1jb250YWluZXItLXJ0bCB7XFxuICAgICAgcmlnaHQ6IDA7XFxuICAgICAgbGVmdDogaW5pdGlhbDsgfSB9XFxuXFxuLlRvYXN0aWZ5X190b2FzdCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBtaW4taGVpZ2h0OiA2NHB4O1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIG1hcmdpbi1ib3R0b206IDFyZW07XFxuICBwYWRkaW5nOiA4cHg7XFxuICBib3JkZXItcmFkaXVzOiAxcHg7XFxuICBib3gtc2hhZG93OiAwIDFweCAxMHB4IDAgcmdiYSgwLCAwLCAwLCAwLjEpLCAwIDJweCAxNXB4IDAgcmdiYSgwLCAwLCAwLCAwLjA1KTtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC1tcy1mbGV4LXBhY2s6IGp1c3RpZnk7XFxuICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgbWF4LWhlaWdodDogODAwcHg7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBkaXJlY3Rpb246IGx0cjsgfVxcbiAgLlRvYXN0aWZ5X190b2FzdC0tcnRsIHtcXG4gICAgZGlyZWN0aW9uOiBydGw7IH1cXG4gIC5Ub2FzdGlmeV9fdG9hc3QtLWRlZmF1bHQge1xcbiAgICBiYWNrZ3JvdW5kOiAjZmZmO1xcbiAgICBjb2xvcjogI2FhYTsgfVxcbiAgLlRvYXN0aWZ5X190b2FzdC0taW5mbyB7XFxuICAgIGJhY2tncm91bmQ6ICMzNDk4ZGI7IH1cXG4gIC5Ub2FzdGlmeV9fdG9hc3QtLXN1Y2Nlc3Mge1xcbiAgICBiYWNrZ3JvdW5kOiAjMDdiYzBjOyB9XFxuICAuVG9hc3RpZnlfX3RvYXN0LS13YXJuaW5nIHtcXG4gICAgYmFja2dyb3VuZDogI2YxYzQwZjsgfVxcbiAgLlRvYXN0aWZ5X190b2FzdC0tZXJyb3Ige1xcbiAgICBiYWNrZ3JvdW5kOiAjZTc0YzNjOyB9XFxuICAuVG9hc3RpZnlfX3RvYXN0LWJvZHkge1xcbiAgICBtYXJnaW46IGF1dG8gMDtcXG4gICAgLW1zLWZsZXg6IDE7XFxuICAgICAgICBmbGV4OiAxOyB9XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0ODBweCkge1xcbiAgLlRvYXN0aWZ5X190b2FzdCB7XFxuICAgIG1hcmdpbi1ib3R0b206IDA7IH0gfVxcblxcbi5Ub2FzdGlmeV9fY2xvc2UtYnV0dG9uIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG4gIG91dGxpbmU6IG5vbmU7XFxuICBib3JkZXI6IG5vbmU7XFxuICBwYWRkaW5nOiAwO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgb3BhY2l0eTogMC43O1xcbiAgdHJhbnNpdGlvbjogMC4zcyBlYXNlO1xcbiAgLW1zLWZsZXgtaXRlbS1hbGlnbjogc3RhcnQ7XFxuICAgICAgYWxpZ24tc2VsZjogZmxleC1zdGFydDsgfVxcbiAgLlRvYXN0aWZ5X19jbG9zZS1idXR0b24tLWRlZmF1bHQge1xcbiAgICBjb2xvcjogIzAwMDtcXG4gICAgb3BhY2l0eTogMC4zOyB9XFxuICAuVG9hc3RpZnlfX2Nsb3NlLWJ1dHRvbjpob3ZlciwgLlRvYXN0aWZ5X19jbG9zZS1idXR0b246Zm9jdXMge1xcbiAgICBvcGFjaXR5OiAxOyB9XFxuXFxuQGtleWZyYW1lcyBUb2FzdGlmeV9fdHJhY2tQcm9ncmVzcyB7XFxuICAwJSB7XFxuICAgIHRyYW5zZm9ybTogc2NhbGVYKDEpOyB9XFxuICAxMDAlIHtcXG4gICAgdHJhbnNmb3JtOiBzY2FsZVgoMCk7IH0gfVxcblxcbi5Ub2FzdGlmeV9fcHJvZ3Jlc3MtYmFyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvdHRvbTogMDtcXG4gIGxlZnQ6IDA7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogNXB4O1xcbiAgei1pbmRleDogOTk5OTtcXG4gIG9wYWNpdHk6IDAuNztcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KTtcXG4gIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQ7IH1cXG4gIC5Ub2FzdGlmeV9fcHJvZ3Jlc3MtYmFyLS1hbmltYXRlZCB7XFxuICAgIGFuaW1hdGlvbjogVG9hc3RpZnlfX3RyYWNrUHJvZ3Jlc3MgbGluZWFyIDEgZm9yd2FyZHM7IH1cXG4gIC5Ub2FzdGlmeV9fcHJvZ3Jlc3MtYmFyLS1jb250cm9sbGVkIHtcXG4gICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIC4yczsgfVxcbiAgLlRvYXN0aWZ5X19wcm9ncmVzcy1iYXItLXJ0bCB7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICBsZWZ0OiBpbml0aWFsO1xcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiByaWdodDsgfVxcbiAgLlRvYXN0aWZ5X19wcm9ncmVzcy1iYXItLWRlZmF1bHQge1xcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICM0Y2Q5NjQsICM1YWM4ZmEsICMwMDdhZmYsICMzNGFhZGMsICM1ODU2ZDYsICNmZjJkNTUpOyB9XFxuXFxuQGtleWZyYW1lcyBUb2FzdGlmeV9fYm91bmNlSW5SaWdodCB7XFxuICBmcm9tLFxcbiAgNjAlLFxcbiAgNzUlLFxcbiAgOTAlLFxcbiAgdG8ge1xcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4yMTUsIDAuNjEsIDAuMzU1LCAxKTsgfVxcbiAgZnJvbSB7XFxuICAgIG9wYWNpdHk6IDA7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMzAwMHB4LCAwLCAwKTsgfVxcbiAgNjAlIHtcXG4gICAgb3BhY2l0eTogMTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtMjVweCwgMCwgMCk7IH1cXG4gIDc1JSB7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMTBweCwgMCwgMCk7IH1cXG4gIDkwJSB7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTVweCwgMCwgMCk7IH1cXG4gIHRvIHtcXG4gICAgdHJhbnNmb3JtOiBub25lOyB9IH1cXG5cXG5Aa2V5ZnJhbWVzIFRvYXN0aWZ5X19ib3VuY2VPdXRSaWdodCB7XFxuICAyMCUge1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0yMHB4LCAwLCAwKTsgfVxcbiAgdG8ge1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDIwMDBweCwgMCwgMCk7IH0gfVxcblxcbkBrZXlmcmFtZXMgVG9hc3RpZnlfX2JvdW5jZUluTGVmdCB7XFxuICBmcm9tLFxcbiAgNjAlLFxcbiAgNzUlLFxcbiAgOTAlLFxcbiAgdG8ge1xcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4yMTUsIDAuNjEsIDAuMzU1LCAxKTsgfVxcbiAgMCUge1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0zMDAwcHgsIDAsIDApOyB9XFxuICA2MCUge1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDI1cHgsIDAsIDApOyB9XFxuICA3NSUge1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0xMHB4LCAwLCAwKTsgfVxcbiAgOTAlIHtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCg1cHgsIDAsIDApOyB9XFxuICB0byB7XFxuICAgIHRyYW5zZm9ybTogbm9uZTsgfSB9XFxuXFxuQGtleWZyYW1lcyBUb2FzdGlmeV9fYm91bmNlT3V0TGVmdCB7XFxuICAyMCUge1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDIwcHgsIDAsIDApOyB9XFxuICB0byB7XFxuICAgIG9wYWNpdHk6IDA7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTIwMDBweCwgMCwgMCk7IH0gfVxcblxcbkBrZXlmcmFtZXMgVG9hc3RpZnlfX2JvdW5jZUluVXAge1xcbiAgZnJvbSxcXG4gIDYwJSxcXG4gIDc1JSxcXG4gIDkwJSxcXG4gIHRvIHtcXG4gICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMjE1LCAwLjYxLCAwLjM1NSwgMSk7IH1cXG4gIGZyb20ge1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDMwMDBweCwgMCk7IH1cXG4gIDYwJSB7XFxuICAgIG9wYWNpdHk6IDE7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTIwcHgsIDApOyB9XFxuICA3NSUge1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDEwcHgsIDApOyB9XFxuICA5MCUge1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC01cHgsIDApOyB9XFxuICB0byB7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7IH0gfVxcblxcbkBrZXlmcmFtZXMgVG9hc3RpZnlfX2JvdW5jZU91dFVwIHtcXG4gIDIwJSB7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTEwcHgsIDApOyB9XFxuICA0MCUsXFxuICA0NSUge1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDIwcHgsIDApOyB9XFxuICB0byB7XFxuICAgIG9wYWNpdHk6IDA7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTIwMDBweCwgMCk7IH0gfVxcblxcbkBrZXlmcmFtZXMgVG9hc3RpZnlfX2JvdW5jZUluRG93biB7XFxuICBmcm9tLFxcbiAgNjAlLFxcbiAgNzUlLFxcbiAgOTAlLFxcbiAgdG8ge1xcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4yMTUsIDAuNjEsIDAuMzU1LCAxKTsgfVxcbiAgMCUge1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMDAwcHgsIDApOyB9XFxuICA2MCUge1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDI1cHgsIDApOyB9XFxuICA3NSUge1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0xMHB4LCAwKTsgfVxcbiAgOTAlIHtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCA1cHgsIDApOyB9XFxuICB0byB7XFxuICAgIHRyYW5zZm9ybTogbm9uZTsgfSB9XFxuXFxuQGtleWZyYW1lcyBUb2FzdGlmeV9fYm91bmNlT3V0RG93biB7XFxuICAyMCUge1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDEwcHgsIDApOyB9XFxuICA0MCUsXFxuICA0NSUge1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0yMHB4LCAwKTsgfVxcbiAgdG8ge1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDIwMDBweCwgMCk7IH0gfVxcblxcbi5Ub2FzdGlmeV9fYm91bmNlLWVudGVyLS10b3AtbGVmdCwgLlRvYXN0aWZ5X19ib3VuY2UtZW50ZXItLWJvdHRvbS1sZWZ0IHtcXG4gIGFuaW1hdGlvbi1uYW1lOiBUb2FzdGlmeV9fYm91bmNlSW5MZWZ0OyB9XFxuXFxuLlRvYXN0aWZ5X19ib3VuY2UtZW50ZXItLXRvcC1yaWdodCwgLlRvYXN0aWZ5X19ib3VuY2UtZW50ZXItLWJvdHRvbS1yaWdodCB7XFxuICBhbmltYXRpb24tbmFtZTogVG9hc3RpZnlfX2JvdW5jZUluUmlnaHQ7IH1cXG5cXG4uVG9hc3RpZnlfX2JvdW5jZS1lbnRlci0tdG9wLWNlbnRlciB7XFxuICBhbmltYXRpb24tbmFtZTogVG9hc3RpZnlfX2JvdW5jZUluRG93bjsgfVxcblxcbi5Ub2FzdGlmeV9fYm91bmNlLWVudGVyLS1ib3R0b20tY2VudGVyIHtcXG4gIGFuaW1hdGlvbi1uYW1lOiBUb2FzdGlmeV9fYm91bmNlSW5VcDsgfVxcblxcbi5Ub2FzdGlmeV9fYm91bmNlLWV4aXQtLXRvcC1sZWZ0LCAuVG9hc3RpZnlfX2JvdW5jZS1leGl0LS1ib3R0b20tbGVmdCB7XFxuICBhbmltYXRpb24tbmFtZTogVG9hc3RpZnlfX2JvdW5jZU91dExlZnQ7IH1cXG5cXG4uVG9hc3RpZnlfX2JvdW5jZS1leGl0LS10b3AtcmlnaHQsIC5Ub2FzdGlmeV9fYm91bmNlLWV4aXQtLWJvdHRvbS1yaWdodCB7XFxuICBhbmltYXRpb24tbmFtZTogVG9hc3RpZnlfX2JvdW5jZU91dFJpZ2h0OyB9XFxuXFxuLlRvYXN0aWZ5X19ib3VuY2UtZXhpdC0tdG9wLWNlbnRlciB7XFxuICBhbmltYXRpb24tbmFtZTogVG9hc3RpZnlfX2JvdW5jZU91dFVwOyB9XFxuXFxuLlRvYXN0aWZ5X19ib3VuY2UtZXhpdC0tYm90dG9tLWNlbnRlciB7XFxuICBhbmltYXRpb24tbmFtZTogVG9hc3RpZnlfX2JvdW5jZU91dERvd247IH1cXG5cXG5Aa2V5ZnJhbWVzIFRvYXN0aWZ5X196b29tSW4ge1xcbiAgZnJvbSB7XFxuICAgIG9wYWNpdHk6IDA7XFxuICAgIHRyYW5zZm9ybTogc2NhbGUzZCgwLjMsIDAuMywgMC4zKTsgfVxcbiAgNTAlIHtcXG4gICAgb3BhY2l0eTogMTsgfSB9XFxuXFxuQGtleWZyYW1lcyBUb2FzdGlmeV9fem9vbU91dCB7XFxuICBmcm9tIHtcXG4gICAgb3BhY2l0eTogMTsgfVxcbiAgNTAlIHtcXG4gICAgb3BhY2l0eTogMDtcXG4gICAgdHJhbnNmb3JtOiBzY2FsZTNkKDAuMywgMC4zLCAwLjMpOyB9XFxuICB0byB7XFxuICAgIG9wYWNpdHk6IDA7IH0gfVxcblxcbi5Ub2FzdGlmeV9fem9vbS1lbnRlciB7XFxuICBhbmltYXRpb24tbmFtZTogVG9hc3RpZnlfX3pvb21JbjsgfVxcblxcbi5Ub2FzdGlmeV9fem9vbS1leGl0IHtcXG4gIGFuaW1hdGlvbi1uYW1lOiBUb2FzdGlmeV9fem9vbU91dDsgfVxcblxcbkBrZXlmcmFtZXMgVG9hc3RpZnlfX2ZsaXBJbiB7XFxuICBmcm9tIHtcXG4gICAgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMSwgMCwgMCwgOTBkZWcpO1xcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluO1xcbiAgICBvcGFjaXR5OiAwOyB9XFxuICA0MCUge1xcbiAgICB0cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGUzZCgxLCAwLCAwLCAtMjBkZWcpO1xcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluOyB9XFxuICA2MCUge1xcbiAgICB0cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGUzZCgxLCAwLCAwLCAxMGRlZyk7XFxuICAgIG9wYWNpdHk6IDE7IH1cXG4gIDgwJSB7XFxuICAgIHRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDEsIDAsIDAsIC01ZGVnKTsgfVxcbiAgdG8ge1xcbiAgICB0cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KTsgfSB9XFxuXFxuQGtleWZyYW1lcyBUb2FzdGlmeV9fZmxpcE91dCB7XFxuICBmcm9tIHtcXG4gICAgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCk7IH1cXG4gIDMwJSB7XFxuICAgIHRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDEsIDAsIDAsIC0yMGRlZyk7XFxuICAgIG9wYWNpdHk6IDE7IH1cXG4gIHRvIHtcXG4gICAgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlM2QoMSwgMCwgMCwgOTBkZWcpO1xcbiAgICBvcGFjaXR5OiAwOyB9IH1cXG5cXG4uVG9hc3RpZnlfX2ZsaXAtZW50ZXIge1xcbiAgYW5pbWF0aW9uLW5hbWU6IFRvYXN0aWZ5X19mbGlwSW47IH1cXG5cXG4uVG9hc3RpZnlfX2ZsaXAtZXhpdCB7XFxuICBhbmltYXRpb24tbmFtZTogVG9hc3RpZnlfX2ZsaXBPdXQ7IH1cXG5cXG5Aa2V5ZnJhbWVzIFRvYXN0aWZ5X19zbGlkZUluUmlnaHQge1xcbiAgZnJvbSB7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMTEwJSwgMCwgMCk7XFxuICAgIHZpc2liaWxpdHk6IHZpc2libGU7IH1cXG4gIHRvIHtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTsgfSB9XFxuXFxuQGtleWZyYW1lcyBUb2FzdGlmeV9fc2xpZGVJbkxlZnQge1xcbiAgZnJvbSB7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTExMCUsIDAsIDApO1xcbiAgICB2aXNpYmlsaXR5OiB2aXNpYmxlOyB9XFxuICB0byB7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7IH0gfVxcblxcbkBrZXlmcmFtZXMgVG9hc3RpZnlfX3NsaWRlSW5VcCB7XFxuICBmcm9tIHtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAxMTAlLCAwKTtcXG4gICAgdmlzaWJpbGl0eTogdmlzaWJsZTsgfVxcbiAgdG8ge1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApOyB9IH1cXG5cXG5Aa2V5ZnJhbWVzIFRvYXN0aWZ5X19zbGlkZUluRG93biB7XFxuICBmcm9tIHtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMTEwJSwgMCk7XFxuICAgIHZpc2liaWxpdHk6IHZpc2libGU7IH1cXG4gIHRvIHtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTsgfSB9XFxuXFxuQGtleWZyYW1lcyBUb2FzdGlmeV9fc2xpZGVPdXRSaWdodCB7XFxuICBmcm9tIHtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTsgfVxcbiAgdG8ge1xcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMTEwJSwgMCwgMCk7IH0gfVxcblxcbkBrZXlmcmFtZXMgVG9hc3RpZnlfX3NsaWRlT3V0TGVmdCB7XFxuICBmcm9tIHtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTsgfVxcbiAgdG8ge1xcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTExMCUsIDAsIDApOyB9IH1cXG5cXG5Aa2V5ZnJhbWVzIFRvYXN0aWZ5X19zbGlkZU91dERvd24ge1xcbiAgZnJvbSB7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7IH1cXG4gIHRvIHtcXG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDUwMHB4LCAwKTsgfSB9XFxuXFxuQGtleWZyYW1lcyBUb2FzdGlmeV9fc2xpZGVPdXRVcCB7XFxuICBmcm9tIHtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTsgfVxcbiAgdG8ge1xcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTUwMHB4LCAwKTsgfSB9XFxuXFxuLlRvYXN0aWZ5X19zbGlkZS1lbnRlci0tdG9wLWxlZnQsIC5Ub2FzdGlmeV9fc2xpZGUtZW50ZXItLWJvdHRvbS1sZWZ0IHtcXG4gIGFuaW1hdGlvbi1uYW1lOiBUb2FzdGlmeV9fc2xpZGVJbkxlZnQ7IH1cXG5cXG4uVG9hc3RpZnlfX3NsaWRlLWVudGVyLS10b3AtcmlnaHQsIC5Ub2FzdGlmeV9fc2xpZGUtZW50ZXItLWJvdHRvbS1yaWdodCB7XFxuICBhbmltYXRpb24tbmFtZTogVG9hc3RpZnlfX3NsaWRlSW5SaWdodDsgfVxcblxcbi5Ub2FzdGlmeV9fc2xpZGUtZW50ZXItLXRvcC1jZW50ZXIge1xcbiAgYW5pbWF0aW9uLW5hbWU6IFRvYXN0aWZ5X19zbGlkZUluRG93bjsgfVxcblxcbi5Ub2FzdGlmeV9fc2xpZGUtZW50ZXItLWJvdHRvbS1jZW50ZXIge1xcbiAgYW5pbWF0aW9uLW5hbWU6IFRvYXN0aWZ5X19zbGlkZUluVXA7IH1cXG5cXG4uVG9hc3RpZnlfX3NsaWRlLWV4aXQtLXRvcC1sZWZ0LCAuVG9hc3RpZnlfX3NsaWRlLWV4aXQtLWJvdHRvbS1sZWZ0IHtcXG4gIGFuaW1hdGlvbi1uYW1lOiBUb2FzdGlmeV9fc2xpZGVPdXRMZWZ0OyB9XFxuXFxuLlRvYXN0aWZ5X19zbGlkZS1leGl0LS10b3AtcmlnaHQsIC5Ub2FzdGlmeV9fc2xpZGUtZXhpdC0tYm90dG9tLXJpZ2h0IHtcXG4gIGFuaW1hdGlvbi1uYW1lOiBUb2FzdGlmeV9fc2xpZGVPdXRSaWdodDsgfVxcblxcbi5Ub2FzdGlmeV9fc2xpZGUtZXhpdC0tdG9wLWNlbnRlciB7XFxuICBhbmltYXRpb24tbmFtZTogVG9hc3RpZnlfX3NsaWRlT3V0VXA7IH1cXG5cXG4uVG9hc3RpZnlfX3NsaWRlLWV4aXQtLWJvdHRvbS1jZW50ZXIge1xcbiAgYW5pbWF0aW9uLW5hbWU6IFRvYXN0aWZ5X19zbGlkZU91dERvd247IH1cXG5cXG4vKiMgc291cmNlTWFwcGluZ1VSTD1SZWFjdFRvYXN0aWZ5LmNzcy5tYXAgKi9cIl19XSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJ2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTExLTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS0xMS0yIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0xMS0zIS4vYXV0aC5zY3NzXCIpO1xuY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbmlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xufVxuXG52YXIgb3B0aW9ucyA9IHt9XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmIChjb250ZW50LmxvY2Fscykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xufVxuIiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyh0cnVlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmF1dGgtd3JhcHBlcnttaW4taGVpZ2h0Ojkwdmg7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO2hlaWdodDpjYWxjKDEwMHZoIC0gNTZweCl9LmF1dGgtd3JhcHBlciAuYXV0aC1ib2R5e3BhZGRpbmc6NHJlbTtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoNDAsNDAsNDAsMC45Mik7Y29sb3I6d2hpdGU7Zm9udC13ZWlnaHQ6Ym9sZH0uYXV0aC13cmFwcGVyIC5hdXRoLWJvZHkgLmF1dGgtYnV0dG9uc3tkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1vcmllbnQ6aG9yaXpvbnRhbDstd2Via2l0LWJveC1kaXJlY3Rpb246bm9ybWFsO2ZsZXgtZGlyZWN0aW9uOnJvdzstd2Via2l0LWJveC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47bWFyZ2luLXRvcDoycmVtfVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIi9ob21lL2RlZXAvRGVza3RvcC9wcm9qZWN0cy9jcmF3bG1lL2Zyb250ZW5kL3NyYy9jb21wb25lbnRzL2F1dGgvYXV0aC5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLGNBQ0ksZUFBZ0IsQ0FFaEIsbUJBQWEsQ0FBYixZQUFhLENBQ2IsdUJBQXVCLENBQXZCLHNCQUF1QixDQUN2Qix3QkFBbUIsQ0FBbkIsa0JBQW1CLENBQ25CLHlCQUEwQixDQU45Qix5QkFRUSxZQUFjLENBQ2Qsb0NBQXNDLENBQ3RDLFdBQWEsQ0FDYixnQkFBaUIsQ0FYekIsdUNBYVksbUJBQWEsQ0FBYixZQUFhLENBQ2IsNkJBQW1CLENBQW5CLDRCQUFtQixDQUFuQixrQkFBbUIsQ0FDbkIsd0JBQThCLENBQTlCLDZCQUE4QixDQUM5QixlQUFpQlwiLFwiZmlsZVwiOlwiYXV0aC5zY3NzXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5hdXRoLXdyYXBwZXJ7XFxuICAgIG1pbi1oZWlnaHQ6IDkwdmg7XFxuICAgIC8vIGJhY2tncm91bmQtY29sb3I6IGdyZWVuO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gNTZweCk7XFxuICAgIC5hdXRoLWJvZHl7XFxuICAgICAgICBwYWRkaW5nIDogNHJlbTtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNDAsIDQwLCA0MCwuOTIpO1xcbiAgICAgICAgY29sb3IgOiB3aGl0ZTtcXG4gICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgICAgICAgLmF1dGgtYnV0dG9uc3tcXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgICAgICAgICAgIG1hcmdpbi10b3AgOiAycmVtO1xcbiAgICAgICAgfVxcbiAgICB9XFxufVwiXX1dKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoYXhpb3MuZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IgIT0gbnVsbCAmJlxuICAgIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vbWVyZ2VDb25maWcnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcbiAgICBjb25maWcudXJsID0gYXJndW1lbnRzWzBdO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kID8gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpIDogJ2dldCc7XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHJldHVybiBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcikucmVwbGFjZSgvXlxcPy8sICcnKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybFxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gU3VwcG9ydCBiYXNlVVJMIGNvbmZpZ1xuICBpZiAoY29uZmlnLmJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwoY29uZmlnLnVybCkpIHtcbiAgICBjb25maWcudXJsID0gY29tYmluZVVSTHMoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICB9XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVycyB8fCB7fVxuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG5cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIGVycm9yLmlzQXhpb3NFcnJvciA9IHRydWU7XG5cbiAgZXJyb3IudG9KU09OID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGVcbiAgICB9O1xuICB9O1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gc3luY0hpc3RvcnlXaXRoU3RvcmU7XG5cbnZhciBfcmVkdWNlciA9IHJlcXVpcmUoJy4vcmVkdWNlcicpO1xuXG52YXIgZGVmYXVsdFNlbGVjdExvY2F0aW9uU3RhdGUgPSBmdW5jdGlvbiBkZWZhdWx0U2VsZWN0TG9jYXRpb25TdGF0ZShzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUucm91dGluZztcbn07XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBzeW5jaHJvbml6ZXMgeW91ciBoaXN0b3J5IHN0YXRlIHdpdGggdGhlIFJlZHV4IHN0b3JlLlxuICogTG9jYXRpb24gY2hhbmdlcyBmbG93IGZyb20gaGlzdG9yeSB0byB0aGUgc3RvcmUuIEFuIGVuaGFuY2VkIGhpc3RvcnkgaXNcbiAqIHJldHVybmVkIHdpdGggYSBsaXN0ZW4gbWV0aG9kIHRoYXQgcmVzcG9uZHMgdG8gc3RvcmUgdXBkYXRlcyBmb3IgbG9jYXRpb24uXG4gKlxuICogV2hlbiB0aGlzIGhpc3RvcnkgaXMgcHJvdmlkZWQgdG8gdGhlIHJvdXRlciwgdGhpcyBtZWFucyB0aGUgbG9jYXRpb24gZGF0YVxuICogd2lsbCBmbG93IGxpa2UgdGhpczpcbiAqIGhpc3RvcnkucHVzaCAtPiBzdG9yZS5kaXNwYXRjaCAtPiBlbmhhbmNlZEhpc3RvcnkubGlzdGVuIC0+IHJvdXRlclxuICogVGhpcyBlbnN1cmVzIHRoYXQgd2hlbiB0aGUgc3RvcmUgc3RhdGUgY2hhbmdlcyBkdWUgdG8gYSByZXBsYXkgb3Igb3RoZXJcbiAqIGV2ZW50LCB0aGUgcm91dGVyIHdpbGwgYmUgdXBkYXRlZCBhcHByb3ByaWF0ZWx5IGFuZCBjYW4gdHJhbnNpdGlvbiB0byB0aGVcbiAqIGNvcnJlY3Qgcm91dGVyIHN0YXRlLlxuICovXG5mdW5jdGlvbiBzeW5jSGlzdG9yeVdpdGhTdG9yZShoaXN0b3J5LCBzdG9yZSkge1xuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge30sXG4gICAgICBfcmVmJHNlbGVjdExvY2F0aW9uU3QgPSBfcmVmLnNlbGVjdExvY2F0aW9uU3RhdGUsXG4gICAgICBzZWxlY3RMb2NhdGlvblN0YXRlID0gX3JlZiRzZWxlY3RMb2NhdGlvblN0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0U2VsZWN0TG9jYXRpb25TdGF0ZSA6IF9yZWYkc2VsZWN0TG9jYXRpb25TdCxcbiAgICAgIF9yZWYkYWRqdXN0VXJsT25SZXBsYSA9IF9yZWYuYWRqdXN0VXJsT25SZXBsYXksXG4gICAgICBhZGp1c3RVcmxPblJlcGxheSA9IF9yZWYkYWRqdXN0VXJsT25SZXBsYSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYkYWRqdXN0VXJsT25SZXBsYTtcblxuICAvLyBFbnN1cmUgdGhhdCB0aGUgcmVkdWNlciBpcyBtb3VudGVkIG9uIHRoZSBzdG9yZSBhbmQgZnVuY3Rpb25pbmcgcHJvcGVybHkuXG4gIGlmICh0eXBlb2Ygc2VsZWN0TG9jYXRpb25TdGF0ZShzdG9yZS5nZXRTdGF0ZSgpKSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByb3V0aW5nIHN0YXRlIHRvIGJlIGF2YWlsYWJsZSBlaXRoZXIgYXMgYHN0YXRlLnJvdXRpbmdgICcgKyAnb3IgYXMgdGhlIGN1c3RvbSBleHByZXNzaW9uIHlvdSBjYW4gc3BlY2lmeSBhcyBgc2VsZWN0TG9jYXRpb25TdGF0ZWAgJyArICdpbiB0aGUgYHN5bmNIaXN0b3J5V2l0aFN0b3JlKClgIG9wdGlvbnMuICcgKyAnRW5zdXJlIHlvdSBoYXZlIGFkZGVkIHRoZSBgcm91dGVyUmVkdWNlcmAgdG8geW91ciBzdG9yZVxcJ3MgJyArICdyZWR1Y2VycyB2aWEgYGNvbWJpbmVSZWR1Y2Vyc2Agb3Igd2hhdGV2ZXIgbWV0aG9kIHlvdSB1c2UgdG8gaXNvbGF0ZSAnICsgJ3lvdXIgcmVkdWNlcnMuJyk7XG4gIH1cblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gdm9pZCAwO1xuICB2YXIgaXNUaW1lVHJhdmVsaW5nID0gdm9pZCAwO1xuICB2YXIgdW5zdWJzY3JpYmVGcm9tU3RvcmUgPSB2b2lkIDA7XG4gIHZhciB1bnN1YnNjcmliZUZyb21IaXN0b3J5ID0gdm9pZCAwO1xuICB2YXIgY3VycmVudExvY2F0aW9uID0gdm9pZCAwO1xuXG4gIC8vIFdoYXQgZG9lcyB0aGUgc3RvcmUgc2F5IGFib3V0IGN1cnJlbnQgbG9jYXRpb24/XG4gIHZhciBnZXRMb2NhdGlvbkluU3RvcmUgPSBmdW5jdGlvbiBnZXRMb2NhdGlvbkluU3RvcmUodXNlSW5pdGlhbElmRW1wdHkpIHtcbiAgICB2YXIgbG9jYXRpb25TdGF0ZSA9IHNlbGVjdExvY2F0aW9uU3RhdGUoc3RvcmUuZ2V0U3RhdGUoKSk7XG4gICAgcmV0dXJuIGxvY2F0aW9uU3RhdGUubG9jYXRpb25CZWZvcmVUcmFuc2l0aW9ucyB8fCAodXNlSW5pdGlhbElmRW1wdHkgPyBpbml0aWFsTG9jYXRpb24gOiB1bmRlZmluZWQpO1xuICB9O1xuXG4gIC8vIEluaXQgaW5pdGlhbExvY2F0aW9uIHdpdGggcG90ZW50aWFsIGxvY2F0aW9uIGluIHN0b3JlXG4gIGluaXRpYWxMb2NhdGlvbiA9IGdldExvY2F0aW9uSW5TdG9yZSgpO1xuXG4gIC8vIElmIHRoZSBzdG9yZSBpcyByZXBsYXllZCwgdXBkYXRlIHRoZSBVUkwgaW4gdGhlIGJyb3dzZXIgdG8gbWF0Y2guXG4gIGlmIChhZGp1c3RVcmxPblJlcGxheSkge1xuICAgIHZhciBoYW5kbGVTdG9yZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZVN0b3JlQ2hhbmdlKCkge1xuICAgICAgdmFyIGxvY2F0aW9uSW5TdG9yZSA9IGdldExvY2F0aW9uSW5TdG9yZSh0cnVlKTtcbiAgICAgIGlmIChjdXJyZW50TG9jYXRpb24gPT09IGxvY2F0aW9uSW5TdG9yZSB8fCBpbml0aWFsTG9jYXRpb24gPT09IGxvY2F0aW9uSW5TdG9yZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFVwZGF0ZSBhZGRyZXNzIGJhciB0byByZWZsZWN0IHN0b3JlIHN0YXRlXG4gICAgICBpc1RpbWVUcmF2ZWxpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudExvY2F0aW9uID0gbG9jYXRpb25JblN0b3JlO1xuICAgICAgaGlzdG9yeS50cmFuc2l0aW9uVG8oX2V4dGVuZHMoe30sIGxvY2F0aW9uSW5TdG9yZSwge1xuICAgICAgICBhY3Rpb246ICdQVVNIJ1xuICAgICAgfSkpO1xuICAgICAgaXNUaW1lVHJhdmVsaW5nID0gZmFsc2U7XG4gICAgfTtcblxuICAgIHVuc3Vic2NyaWJlRnJvbVN0b3JlID0gc3RvcmUuc3Vic2NyaWJlKGhhbmRsZVN0b3JlQ2hhbmdlKTtcbiAgICBoYW5kbGVTdG9yZUNoYW5nZSgpO1xuICB9XG5cbiAgLy8gV2hlbmV2ZXIgbG9jYXRpb24gY2hhbmdlcywgZGlzcGF0Y2ggYW4gYWN0aW9uIHRvIGdldCBpdCBpbiB0aGUgc3RvcmVcbiAgdmFyIGhhbmRsZUxvY2F0aW9uQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9jYXRpb25DaGFuZ2UobG9jYXRpb24pIHtcbiAgICAvLyAuLi4gdW5sZXNzIHdlIGp1c3QgY2F1c2VkIHRoYXQgbG9jYXRpb24gY2hhbmdlXG4gICAgaWYgKGlzVGltZVRyYXZlbGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFJlbWVtYmVyIHdoZXJlIHdlIGFyZVxuICAgIGN1cnJlbnRMb2NhdGlvbiA9IGxvY2F0aW9uO1xuXG4gICAgLy8gQXJlIHdlIGJlaW5nIGNhbGxlZCBmb3IgdGhlIGZpcnN0IHRpbWU/XG4gICAgaWYgKCFpbml0aWFsTG9jYXRpb24pIHtcbiAgICAgIC8vIFJlbWVtYmVyIGFzIGEgZmFsbGJhY2sgaW4gY2FzZSBzdGF0ZSBpcyByZXNldFxuICAgICAgaW5pdGlhbExvY2F0aW9uID0gbG9jYXRpb247XG5cbiAgICAgIC8vIFJlc3BlY3QgcGVyc2lzdGVkIGxvY2F0aW9uLCBpZiBhbnlcbiAgICAgIGlmIChnZXRMb2NhdGlvbkluU3RvcmUoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVGVsbCB0aGUgc3RvcmUgdG8gdXBkYXRlIGJ5IGRpc3BhdGNoaW5nIGFuIGFjdGlvblxuICAgIHN0b3JlLmRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IF9yZWR1Y2VyLkxPQ0FUSU9OX0NIQU5HRSxcbiAgICAgIHBheWxvYWQ6IGxvY2F0aW9uXG4gICAgfSk7XG4gIH07XG4gIHVuc3Vic2NyaWJlRnJvbUhpc3RvcnkgPSBoaXN0b3J5Lmxpc3RlbihoYW5kbGVMb2NhdGlvbkNoYW5nZSk7XG5cbiAgLy8gSGlzdG9yeSAzLnggZG9lc24ndCBjYWxsIGxpc3RlbiBzeW5jaHJvbm91c2x5LCBzbyBmaXJlIHRoZSBpbml0aWFsIGxvY2F0aW9uIGNoYW5nZSBvdXJzZWx2ZXNcbiAgaWYgKGhpc3RvcnkuZ2V0Q3VycmVudExvY2F0aW9uKSB7XG4gICAgaGFuZGxlTG9jYXRpb25DaGFuZ2UoaGlzdG9yeS5nZXRDdXJyZW50TG9jYXRpb24oKSk7XG4gIH1cblxuICAvLyBUaGUgZW5oYW5jZWQgaGlzdG9yeSB1c2VzIHN0b3JlIGFzIHNvdXJjZSBvZiB0cnV0aFxuICByZXR1cm4gX2V4dGVuZHMoe30sIGhpc3RvcnksIHtcbiAgICAvLyBUaGUgbGlzdGVuZXJzIGFyZSBzdWJzY3JpYmVkIHRvIHRoZSBzdG9yZSBpbnN0ZWFkIG9mIGhpc3RvcnlcbiAgICBsaXN0ZW46IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgICAgLy8gQ29weSBvZiBsYXN0IGxvY2F0aW9uLlxuICAgICAgdmFyIGxhc3RQdWJsaXNoZWRMb2NhdGlvbiA9IGdldExvY2F0aW9uSW5TdG9yZSh0cnVlKTtcblxuICAgICAgLy8gS2VlcCB0cmFjayBvZiB3aGV0aGVyIHdlIHVuc3Vic2NyaWJlZCwgYXMgUmVkdXggc3RvcmVcbiAgICAgIC8vIG9ubHkgYXBwbGllcyBjaGFuZ2VzIGluIHN1YnNjcmlwdGlvbnMgb24gbmV4dCBkaXNwYXRjaFxuICAgICAgdmFyIHVuc3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgdmFyIHVuc3Vic2NyaWJlRnJvbVN0b3JlID0gc3RvcmUuc3Vic2NyaWJlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRMb2NhdGlvbiA9IGdldExvY2F0aW9uSW5TdG9yZSh0cnVlKTtcbiAgICAgICAgaWYgKGN1cnJlbnRMb2NhdGlvbiA9PT0gbGFzdFB1Ymxpc2hlZExvY2F0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RQdWJsaXNoZWRMb2NhdGlvbiA9IGN1cnJlbnRMb2NhdGlvbjtcbiAgICAgICAgaWYgKCF1bnN1YnNjcmliZWQpIHtcbiAgICAgICAgICBsaXN0ZW5lcihsYXN0UHVibGlzaGVkTG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gSGlzdG9yeSAyLnggbGlzdGVuZXJzIGV4cGVjdCBhIHN5bmNocm9ub3VzIGNhbGwuIE1ha2UgdGhlIGZpcnN0IGNhbGwgdG8gdGhlXG4gICAgICAvLyBsaXN0ZW5lciBhZnRlciBzdWJzY3JpYmluZyB0byB0aGUgc3RvcmUsIGluIGNhc2UgdGhlIGxpc3RlbmVyIGNhdXNlcyBhXG4gICAgICAvLyBsb2NhdGlvbiBjaGFuZ2UgKGUuZy4gd2hlbiBpdCByZWRpcmVjdHMpXG4gICAgICBpZiAoIWhpc3RvcnkuZ2V0Q3VycmVudExvY2F0aW9uKSB7XG4gICAgICAgIGxpc3RlbmVyKGxhc3RQdWJsaXNoZWRMb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIC8vIExldCB1c2VyIHVuc3Vic2NyaWJlIGxhdGVyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB1bnN1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgICB1bnN1YnNjcmliZUZyb21TdG9yZSgpO1xuICAgICAgfTtcbiAgICB9LFxuXG5cbiAgICAvLyBJdCBhbHNvIHByb3ZpZGVzIGEgd2F5IHRvIGRlc3Ryb3kgaW50ZXJuYWwgbGlzdGVuZXJzXG4gICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKGFkanVzdFVybE9uUmVwbGF5KSB7XG4gICAgICAgIHVuc3Vic2NyaWJlRnJvbVN0b3JlKCk7XG4gICAgICB9XG4gICAgICB1bnN1YnNjcmliZUZyb21IaXN0b3J5KCk7XG4gICAgfVxuICB9KTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzWydkZWZhdWx0J10gPSByb3V0ZXJNaWRkbGV3YXJlO1xuXG52YXIgX2FjdGlvbnMgPSByZXF1aXJlKCcuL2FjdGlvbnMnKTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbi8qKlxuICogVGhpcyBtaWRkbGV3YXJlIGNhcHR1cmVzIENBTExfSElTVE9SWV9NRVRIT0QgYWN0aW9ucyB0byByZWRpcmVjdCB0byB0aGVcbiAqIHByb3ZpZGVkIGhpc3Rvcnkgb2JqZWN0LiBUaGlzIHdpbGwgcHJldmVudCB0aGVzZSBhY3Rpb25zIGZyb20gcmVhY2hpbmcgeW91clxuICogcmVkdWNlciBvciBhbnkgbWlkZGxld2FyZSB0aGF0IGNvbWVzIGFmdGVyIHRoaXMgb25lLlxuICovXG5mdW5jdGlvbiByb3V0ZXJNaWRkbGV3YXJlKGhpc3RvcnkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmIChhY3Rpb24udHlwZSAhPT0gX2FjdGlvbnMuQ0FMTF9ISVNUT1JZX01FVEhPRCkge1xuICAgICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX2FjdGlvbiRwYXlsb2FkID0gYWN0aW9uLnBheWxvYWQsXG4gICAgICAgICAgICBtZXRob2QgPSBfYWN0aW9uJHBheWxvYWQubWV0aG9kLFxuICAgICAgICAgICAgYXJncyA9IF9hY3Rpb24kcGF5bG9hZC5hcmdzO1xuXG4gICAgICAgIGhpc3RvcnlbbWV0aG9kXS5hcHBseShoaXN0b3J5LCBfdG9Db25zdW1hYmxlQXJyYXkoYXJncykpO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufSIsInZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMTEtMSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTExLTIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTExLTMhLi9maWx0ZXIuc2Nzc1wiKTtcbmNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG5pZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbn1cblxudmFyIG9wdGlvbnMgPSB7fVxuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZiAoY29udGVudC5sb2NhbHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbn1cbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18odHJ1ZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5maWx0ZXItd3JhcHBlcnstd2Via2l0LWJveC1mbGV4OjE7ZmxleDoxO3BhZGRpbmc6MXJlbTtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoNDAsNDAsNDAsMC44KTttYXJnaW4tcmlnaHQ6MXJlbX0uZmlsdGVyLXdyYXBwZXIgaTpob3Zlcntjb2xvcjpncmVlbjtjdXJzb3I6cG9pbnRlcn0uZmlsdGVyLXdyYXBwZXIgLmZpbHRlci1ib2R5IGhlYWRlcntjb2xvcjp3aGl0ZX0uZmlsdGVyLXdyYXBwZXIgLmZpbHRlci1ib2R5IGhlYWRlciBwe2ZvbnQtd2VpZ2h0OmJvbGR9LmZpbHRlci13cmFwcGVyIC5maWx0ZXItYm9keSAuZmlsdGVyLXByZXZpZXd7bWFyZ2luLWJvdHRvbToxcmVtfS5maWx0ZXItd3JhcHBlciAuZmlsdGVyLWJvZHkgLmZpbHRlci1wcmV2aWV3IGJ1dHRvbntwYWRkaW5nOi4wNXJlbSAuNXJlbTtmb250LXNpemU6LjdyZW07bWFyZ2luLXJpZ2h0Oi43cmVtfVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIi9ob21lL2RlZXAvRGVza3RvcC9wcm9qZWN0cy9jcmF3bG1lL2Zyb250ZW5kL3NyYy9jb21wb25lbnRzL2hvbWUvZmlsdGVyL2ZpbHRlci5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLGdCQUNJLGtCQUFPLENBQVAsTUFBTyxDQUNQLFlBQWMsQ0FDZCxtQ0FBc0MsQ0FDdEMsaUJBQWtCLENBSnRCLHdCQU9RLFdBQWEsQ0FDYixjQUFnQixDQVJ4QixvQ0FlWSxXQUFhLENBZnpCLHNDQWlCZ0IsZ0JBQWlCLENBakJqQyw2Q0FzQlksa0JBQW9CLENBdEJoQyxvREF3QmdCLG9CQUFxQixDQUNyQixlQUFnQixDQUNoQixrQkFBb0JcIixcImZpbGVcIjpcImZpbHRlci5zY3NzXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5maWx0ZXItd3JhcHBlcntcXG4gICAgZmxleDogMTtcXG4gICAgcGFkZGluZyA6IDFyZW07XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNDAsIDQwLCA0MCwgLjgpO1xcbiAgICBtYXJnaW4tcmlnaHQ6IDFyZW07XFxuXFxuICAgIGk6aG92ZXJ7XFxuICAgICAgICBjb2xvciA6IGdyZWVuO1xcbiAgICAgICAgY3Vyc29yIDogcG9pbnRlcjtcXG4gICAgfVxcbiAgICAuZmlsdGVyLWJvZHl7XFxuICAgICAgICAuaW5wdXQtZmllbGRze1xcbiAgICAgICAgICAgIFxcbiAgICAgICAgfVxcbiAgICAgICAgaGVhZGVye1xcbiAgICAgICAgICAgIGNvbG9yIDogd2hpdGU7XFxuICAgICAgICAgICAgcHtcXG4gICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcblxcbiAgICAgICAgLmZpbHRlci1wcmV2aWV3e1xcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b20gOiAxcmVtO1xcbiAgICAgICAgICAgIGJ1dHRvbntcXG4gICAgICAgICAgICAgICAgcGFkZGluZzogLjA1cmVtIC41cmVtO1xcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IC43cmVtO1xcbiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQgOiAuN3JlbTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgXFxuICAgICAgICB9XFxuICAgIH1cXG59XCJdfV0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHBhcnNldXJpID0gcmVxdWlyZSgncGFyc2V1cmknKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1jbGllbnQ6dXJsJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB1cmw7XG5cbi8qKlxuICogVVJMIHBhcnNlci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge09iamVjdH0gQW4gb2JqZWN0IG1lYW50IHRvIG1pbWljIHdpbmRvdy5sb2NhdGlvbi5cbiAqICAgICAgICAgICAgICAgICBEZWZhdWx0cyB0byB3aW5kb3cubG9jYXRpb24uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHVybCAodXJpLCBsb2MpIHtcbiAgdmFyIG9iaiA9IHVyaTtcblxuICAvLyBkZWZhdWx0IHRvIHdpbmRvdy5sb2NhdGlvblxuICBsb2MgPSBsb2MgfHwgKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9jYXRpb24pO1xuICBpZiAobnVsbCA9PSB1cmkpIHVyaSA9IGxvYy5wcm90b2NvbCArICcvLycgKyBsb2MuaG9zdDtcblxuICAvLyByZWxhdGl2ZSBwYXRoIHN1cHBvcnRcbiAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgdXJpKSB7XG4gICAgaWYgKCcvJyA9PT0gdXJpLmNoYXJBdCgwKSkge1xuICAgICAgaWYgKCcvJyA9PT0gdXJpLmNoYXJBdCgxKSkge1xuICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyB1cmk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmkgPSBsb2MuaG9zdCArIHVyaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIS9eKGh0dHBzP3x3c3M/KTpcXC9cXC8vLnRlc3QodXJpKSkge1xuICAgICAgZGVidWcoJ3Byb3RvY29sLWxlc3MgdXJsICVzJywgdXJpKTtcbiAgICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIGxvYykge1xuICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyAnLy8nICsgdXJpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJpID0gJ2h0dHBzOi8vJyArIHVyaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBwYXJzZVxuICAgIGRlYnVnKCdwYXJzZSAlcycsIHVyaSk7XG4gICAgb2JqID0gcGFyc2V1cmkodXJpKTtcbiAgfVxuXG4gIC8vIG1ha2Ugc3VyZSB3ZSB0cmVhdCBgbG9jYWxob3N0OjgwYCBhbmQgYGxvY2FsaG9zdGAgZXF1YWxseVxuICBpZiAoIW9iai5wb3J0KSB7XG4gICAgaWYgKC9eKGh0dHB8d3MpJC8udGVzdChvYmoucHJvdG9jb2wpKSB7XG4gICAgICBvYmoucG9ydCA9ICc4MCc7XG4gICAgfSBlbHNlIGlmICgvXihodHRwfHdzKXMkLy50ZXN0KG9iai5wcm90b2NvbCkpIHtcbiAgICAgIG9iai5wb3J0ID0gJzQ0Myc7XG4gICAgfVxuICB9XG5cbiAgb2JqLnBhdGggPSBvYmoucGF0aCB8fCAnLyc7XG5cbiAgdmFyIGlwdjYgPSBvYmouaG9zdC5pbmRleE9mKCc6JykgIT09IC0xO1xuICB2YXIgaG9zdCA9IGlwdjYgPyAnWycgKyBvYmouaG9zdCArICddJyA6IG9iai5ob3N0O1xuXG4gIC8vIGRlZmluZSB1bmlxdWUgaWRcbiAgb2JqLmlkID0gb2JqLnByb3RvY29sICsgJzovLycgKyBob3N0ICsgJzonICsgb2JqLnBvcnQ7XG4gIC8vIGRlZmluZSBocmVmXG4gIG9iai5ocmVmID0gb2JqLnByb3RvY29sICsgJzovLycgKyBob3N0ICsgKGxvYyAmJiBsb2MucG9ydCA9PT0gb2JqLnBvcnQgPyAnJyA6ICgnOicgKyBvYmoucG9ydCkpO1xuXG4gIHJldHVybiBvYmo7XG59XG4iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5mdW5jdGlvbiBzZXR1cChlbnYpIHtcblx0Y3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Zztcblx0Y3JlYXRlRGVidWcuZGVmYXVsdCA9IGNyZWF0ZURlYnVnO1xuXHRjcmVhdGVEZWJ1Zy5jb2VyY2UgPSBjb2VyY2U7XG5cdGNyZWF0ZURlYnVnLmRpc2FibGUgPSBkaXNhYmxlO1xuXHRjcmVhdGVEZWJ1Zy5lbmFibGUgPSBlbmFibGU7XG5cdGNyZWF0ZURlYnVnLmVuYWJsZWQgPSBlbmFibGVkO1xuXHRjcmVhdGVEZWJ1Zy5odW1hbml6ZSA9IHJlcXVpcmUoJ21zJyk7XG5cblx0T2JqZWN0LmtleXMoZW52KS5mb3JFYWNoKGtleSA9PiB7XG5cdFx0Y3JlYXRlRGVidWdba2V5XSA9IGVudltrZXldO1xuXHR9KTtcblxuXHQvKipcblx0KiBBY3RpdmUgYGRlYnVnYCBpbnN0YW5jZXMuXG5cdCovXG5cdGNyZWF0ZURlYnVnLmluc3RhbmNlcyA9IFtdO1xuXG5cdC8qKlxuXHQqIFRoZSBjdXJyZW50bHkgYWN0aXZlIGRlYnVnIG1vZGUgbmFtZXMsIGFuZCBuYW1lcyB0byBza2lwLlxuXHQqL1xuXG5cdGNyZWF0ZURlYnVnLm5hbWVzID0gW107XG5cdGNyZWF0ZURlYnVnLnNraXBzID0gW107XG5cblx0LyoqXG5cdCogTWFwIG9mIHNwZWNpYWwgXCIlblwiIGhhbmRsaW5nIGZ1bmN0aW9ucywgZm9yIHRoZSBkZWJ1ZyBcImZvcm1hdFwiIGFyZ3VtZW50LlxuXHQqXG5cdCogVmFsaWQga2V5IG5hbWVzIGFyZSBhIHNpbmdsZSwgbG93ZXIgb3IgdXBwZXItY2FzZSBsZXR0ZXIsIGkuZS4gXCJuXCIgYW5kIFwiTlwiLlxuXHQqL1xuXHRjcmVhdGVEZWJ1Zy5mb3JtYXR0ZXJzID0ge307XG5cblx0LyoqXG5cdCogU2VsZWN0cyBhIGNvbG9yIGZvciBhIGRlYnVnIG5hbWVzcGFjZVxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2UgVGhlIG5hbWVzcGFjZSBzdHJpbmcgZm9yIHRoZSBmb3IgdGhlIGRlYnVnIGluc3RhbmNlIHRvIGJlIGNvbG9yZWRcblx0KiBAcmV0dXJuIHtOdW1iZXJ8U3RyaW5nfSBBbiBBTlNJIGNvbG9yIGNvZGUgZm9yIHRoZSBnaXZlbiBuYW1lc3BhY2Vcblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gc2VsZWN0Q29sb3IobmFtZXNwYWNlKSB7XG5cdFx0bGV0IGhhc2ggPSAwO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lc3BhY2UubGVuZ3RoOyBpKyspIHtcblx0XHRcdGhhc2ggPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIG5hbWVzcGFjZS5jaGFyQ29kZUF0KGkpO1xuXHRcdFx0aGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcblx0XHR9XG5cblx0XHRyZXR1cm4gY3JlYXRlRGVidWcuY29sb3JzW01hdGguYWJzKGhhc2gpICUgY3JlYXRlRGVidWcuY29sb3JzLmxlbmd0aF07XG5cdH1cblx0Y3JlYXRlRGVidWcuc2VsZWN0Q29sb3IgPSBzZWxlY3RDb2xvcjtcblxuXHQvKipcblx0KiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2Vcblx0KiBAcmV0dXJuIHtGdW5jdGlvbn1cblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBjcmVhdGVEZWJ1ZyhuYW1lc3BhY2UpIHtcblx0XHRsZXQgcHJldlRpbWU7XG5cblx0XHRmdW5jdGlvbiBkZWJ1ZyguLi5hcmdzKSB7XG5cdFx0XHQvLyBEaXNhYmxlZD9cblx0XHRcdGlmICghZGVidWcuZW5hYmxlZCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHNlbGYgPSBkZWJ1ZztcblxuXHRcdFx0Ly8gU2V0IGBkaWZmYCB0aW1lc3RhbXBcblx0XHRcdGNvbnN0IGN1cnIgPSBOdW1iZXIobmV3IERhdGUoKSk7XG5cdFx0XHRjb25zdCBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7XG5cdFx0XHRzZWxmLmRpZmYgPSBtcztcblx0XHRcdHNlbGYucHJldiA9IHByZXZUaW1lO1xuXHRcdFx0c2VsZi5jdXJyID0gY3Vycjtcblx0XHRcdHByZXZUaW1lID0gY3VycjtcblxuXHRcdFx0YXJnc1swXSA9IGNyZWF0ZURlYnVnLmNvZXJjZShhcmdzWzBdKTtcblxuXHRcdFx0aWYgKHR5cGVvZiBhcmdzWzBdICE9PSAnc3RyaW5nJykge1xuXHRcdFx0XHQvLyBBbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuXHRcdFx0XHRhcmdzLnVuc2hpZnQoJyVPJyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG5cdFx0XHRsZXQgaW5kZXggPSAwO1xuXHRcdFx0YXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIChtYXRjaCwgZm9ybWF0KSA9PiB7XG5cdFx0XHRcdC8vIElmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcblx0XHRcdFx0aWYgKG1hdGNoID09PSAnJSUnKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGluZGV4Kys7XG5cdFx0XHRcdGNvbnN0IGZvcm1hdHRlciA9IGNyZWF0ZURlYnVnLmZvcm1hdHRlcnNbZm9ybWF0XTtcblx0XHRcdFx0aWYgKHR5cGVvZiBmb3JtYXR0ZXIgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHRjb25zdCB2YWwgPSBhcmdzW2luZGV4XTtcblx0XHRcdFx0XHRtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG5cblx0XHRcdFx0XHQvLyBOb3cgd2UgbmVlZCB0byByZW1vdmUgYGFyZ3NbaW5kZXhdYCBzaW5jZSBpdCdzIGlubGluZWQgaW4gdGhlIGBmb3JtYXRgXG5cdFx0XHRcdFx0YXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0XHRcdGluZGV4LS07XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vIEFwcGx5IGVudi1zcGVjaWZpYyBmb3JtYXR0aW5nIChjb2xvcnMsIGV0Yy4pXG5cdFx0XHRjcmVhdGVEZWJ1Zy5mb3JtYXRBcmdzLmNhbGwoc2VsZiwgYXJncyk7XG5cblx0XHRcdGNvbnN0IGxvZ0ZuID0gc2VsZi5sb2cgfHwgY3JlYXRlRGVidWcubG9nO1xuXHRcdFx0bG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cdFx0fVxuXG5cdFx0ZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuXHRcdGRlYnVnLmVuYWJsZWQgPSBjcmVhdGVEZWJ1Zy5lbmFibGVkKG5hbWVzcGFjZSk7XG5cdFx0ZGVidWcudXNlQ29sb3JzID0gY3JlYXRlRGVidWcudXNlQ29sb3JzKCk7XG5cdFx0ZGVidWcuY29sb3IgPSBzZWxlY3RDb2xvcihuYW1lc3BhY2UpO1xuXHRcdGRlYnVnLmRlc3Ryb3kgPSBkZXN0cm95O1xuXHRcdGRlYnVnLmV4dGVuZCA9IGV4dGVuZDtcblx0XHQvLyBEZWJ1Zy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcblx0XHQvLyBkZWJ1Zy5yYXdMb2cgPSByYXdMb2c7XG5cblx0XHQvLyBlbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuXHRcdGlmICh0eXBlb2YgY3JlYXRlRGVidWcuaW5pdCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0Y3JlYXRlRGVidWcuaW5pdChkZWJ1Zyk7XG5cdFx0fVxuXG5cdFx0Y3JlYXRlRGVidWcuaW5zdGFuY2VzLnB1c2goZGVidWcpO1xuXG5cdFx0cmV0dXJuIGRlYnVnO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGVzdHJveSgpIHtcblx0XHRjb25zdCBpbmRleCA9IGNyZWF0ZURlYnVnLmluc3RhbmNlcy5pbmRleE9mKHRoaXMpO1xuXHRcdGlmIChpbmRleCAhPT0gLTEpIHtcblx0XHRcdGNyZWF0ZURlYnVnLmluc3RhbmNlcy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGZ1bmN0aW9uIGV4dGVuZChuYW1lc3BhY2UsIGRlbGltaXRlcikge1xuXHRcdGNvbnN0IG5ld0RlYnVnID0gY3JlYXRlRGVidWcodGhpcy5uYW1lc3BhY2UgKyAodHlwZW9mIGRlbGltaXRlciA9PT0gJ3VuZGVmaW5lZCcgPyAnOicgOiBkZWxpbWl0ZXIpICsgbmFtZXNwYWNlKTtcblx0XHRuZXdEZWJ1Zy5sb2cgPSB0aGlzLmxvZztcblx0XHRyZXR1cm4gbmV3RGVidWc7XG5cdH1cblxuXHQvKipcblx0KiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG5cdCogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZW5hYmxlKG5hbWVzcGFjZXMpIHtcblx0XHRjcmVhdGVEZWJ1Zy5zYXZlKG5hbWVzcGFjZXMpO1xuXG5cdFx0Y3JlYXRlRGVidWcubmFtZXMgPSBbXTtcblx0XHRjcmVhdGVEZWJ1Zy5za2lwcyA9IFtdO1xuXG5cdFx0bGV0IGk7XG5cdFx0Y29uc3Qgc3BsaXQgPSAodHlwZW9mIG5hbWVzcGFjZXMgPT09ICdzdHJpbmcnID8gbmFtZXNwYWNlcyA6ICcnKS5zcGxpdCgvW1xccyxdKy8pO1xuXHRcdGNvbnN0IGxlbiA9IHNwbGl0Lmxlbmd0aDtcblxuXHRcdGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKCFzcGxpdFtpXSkge1xuXHRcdFx0XHQvLyBpZ25vcmUgZW1wdHkgc3RyaW5nc1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0bmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG5cblx0XHRcdGlmIChuYW1lc3BhY2VzWzBdID09PSAnLScpIHtcblx0XHRcdFx0Y3JlYXRlRGVidWcuc2tpcHMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMuc3Vic3RyKDEpICsgJyQnKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjcmVhdGVEZWJ1Zy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAoaSA9IDA7IGkgPCBjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IGluc3RhbmNlID0gY3JlYXRlRGVidWcuaW5zdGFuY2VzW2ldO1xuXHRcdFx0aW5zdGFuY2UuZW5hYmxlZCA9IGNyZWF0ZURlYnVnLmVuYWJsZWQoaW5zdGFuY2UubmFtZXNwYWNlKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0KiBEaXNhYmxlIGRlYnVnIG91dHB1dC5cblx0KlxuXHQqIEByZXR1cm4ge1N0cmluZ30gbmFtZXNwYWNlc1xuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGRpc2FibGUoKSB7XG5cdFx0Y29uc3QgbmFtZXNwYWNlcyA9IFtcblx0XHRcdC4uLmNyZWF0ZURlYnVnLm5hbWVzLm1hcCh0b05hbWVzcGFjZSksXG5cdFx0XHQuLi5jcmVhdGVEZWJ1Zy5za2lwcy5tYXAodG9OYW1lc3BhY2UpLm1hcChuYW1lc3BhY2UgPT4gJy0nICsgbmFtZXNwYWNlKVxuXHRcdF0uam9pbignLCcpO1xuXHRcdGNyZWF0ZURlYnVnLmVuYWJsZSgnJyk7XG5cdFx0cmV0dXJuIG5hbWVzcGFjZXM7XG5cdH1cblxuXHQvKipcblx0KiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuXHQqIEByZXR1cm4ge0Jvb2xlYW59XG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG5cdFx0aWYgKG5hbWVbbmFtZS5sZW5ndGggLSAxXSA9PT0gJyonKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRsZXQgaTtcblx0XHRsZXQgbGVuO1xuXG5cdFx0Zm9yIChpID0gMCwgbGVuID0gY3JlYXRlRGVidWcuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmIChjcmVhdGVEZWJ1Zy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwLCBsZW4gPSBjcmVhdGVEZWJ1Zy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKGNyZWF0ZURlYnVnLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCogQ29udmVydCByZWdleHAgdG8gbmFtZXNwYWNlXG5cdCpcblx0KiBAcGFyYW0ge1JlZ0V4cH0gcmVneGVwXG5cdCogQHJldHVybiB7U3RyaW5nfSBuYW1lc3BhY2Vcblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gdG9OYW1lc3BhY2UocmVnZXhwKSB7XG5cdFx0cmV0dXJuIHJlZ2V4cC50b1N0cmluZygpXG5cdFx0XHQuc3Vic3RyaW5nKDIsIHJlZ2V4cC50b1N0cmluZygpLmxlbmd0aCAtIDIpXG5cdFx0XHQucmVwbGFjZSgvXFwuXFwqXFw/JC8sICcqJyk7XG5cdH1cblxuXHQvKipcblx0KiBDb2VyY2UgYHZhbGAuXG5cdCpcblx0KiBAcGFyYW0ge01peGVkfSB2YWxcblx0KiBAcmV0dXJuIHtNaXhlZH1cblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuXHRcdGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikge1xuXHRcdFx0cmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxuXG5cdGNyZWF0ZURlYnVnLmVuYWJsZShjcmVhdGVEZWJ1Zy5sb2FkKCkpO1xuXG5cdHJldHVybiBjcmVhdGVEZWJ1Zztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXR1cDtcbiIsIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgdyA9IGQgKiA3O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSh2YWwpKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigtPyg/OlxcZCspP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8d2Vla3M/fHd8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoXG4gICAgc3RyXG4gICk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ3dlZWtzJzpcbiAgICBjYXNlICd3ZWVrJzpcbiAgICBjYXNlICd3JzpcbiAgICAgIHJldHVybiBuICogdztcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGQpICsgJ2QnO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJztcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbSkgKyAnbSc7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIHMpICsgJ3MnO1xuICB9XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgZCwgJ2RheScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGgsICdob3VyJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgbSwgJ21pbnV0ZScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIHMsICdzZWNvbmQnKTtcbiAgfVxuICByZXR1cm4gbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG1zQWJzLCBuLCBuYW1lKSB7XG4gIHZhciBpc1BsdXJhbCA9IG1zQWJzID49IG4gKiAxLjU7XG4gIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbikgKyAnICcgKyBuYW1lICsgKGlzUGx1cmFsID8gJ3MnIDogJycpO1xufVxuIiwiLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lXG4gICAgICAgICAgICAgICAmJiAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lLnN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgID8gY2hyb21lLnN0b3JhZ2UubG9jYWxcbiAgICAgICAgICAgICAgICAgIDogbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnIzAwMDBDQycsICcjMDAwMEZGJywgJyMwMDMzQ0MnLCAnIzAwMzNGRicsICcjMDA2NkNDJywgJyMwMDY2RkYnLCAnIzAwOTlDQycsXG4gICcjMDA5OUZGJywgJyMwMENDMDAnLCAnIzAwQ0MzMycsICcjMDBDQzY2JywgJyMwMENDOTknLCAnIzAwQ0NDQycsICcjMDBDQ0ZGJyxcbiAgJyMzMzAwQ0MnLCAnIzMzMDBGRicsICcjMzMzM0NDJywgJyMzMzMzRkYnLCAnIzMzNjZDQycsICcjMzM2NkZGJywgJyMzMzk5Q0MnLFxuICAnIzMzOTlGRicsICcjMzNDQzAwJywgJyMzM0NDMzMnLCAnIzMzQ0M2NicsICcjMzNDQzk5JywgJyMzM0NDQ0MnLCAnIzMzQ0NGRicsXG4gICcjNjYwMENDJywgJyM2NjAwRkYnLCAnIzY2MzNDQycsICcjNjYzM0ZGJywgJyM2NkNDMDAnLCAnIzY2Q0MzMycsICcjOTkwMENDJyxcbiAgJyM5OTAwRkYnLCAnIzk5MzNDQycsICcjOTkzM0ZGJywgJyM5OUNDMDAnLCAnIzk5Q0MzMycsICcjQ0MwMDAwJywgJyNDQzAwMzMnLFxuICAnI0NDMDA2NicsICcjQ0MwMDk5JywgJyNDQzAwQ0MnLCAnI0NDMDBGRicsICcjQ0MzMzAwJywgJyNDQzMzMzMnLCAnI0NDMzM2NicsXG4gICcjQ0MzMzk5JywgJyNDQzMzQ0MnLCAnI0NDMzNGRicsICcjQ0M2NjAwJywgJyNDQzY2MzMnLCAnI0NDOTkwMCcsICcjQ0M5OTMzJyxcbiAgJyNDQ0NDMDAnLCAnI0NDQ0MzMycsICcjRkYwMDAwJywgJyNGRjAwMzMnLCAnI0ZGMDA2NicsICcjRkYwMDk5JywgJyNGRjAwQ0MnLFxuICAnI0ZGMDBGRicsICcjRkYzMzAwJywgJyNGRjMzMzMnLCAnI0ZGMzM2NicsICcjRkYzMzk5JywgJyNGRjMzQ0MnLCAnI0ZGMzNGRicsXG4gICcjRkY2NjAwJywgJyNGRjY2MzMnLCAnI0ZGOTkwMCcsICcjRkY5OTMzJywgJyNGRkNDMDAnLCAnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICAvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG4gIC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG4gIC8vIGV4cGxpY2l0bHlcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmIHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIEludGVybmV0IEV4cGxvcmVyIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0IGNvbG9ycy5cbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC8oZWRnZXx0cmlkZW50KVxcLyhcXGQrKS8pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gaXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcbiAgLy8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcbiAgcmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2UpIHx8XG4gICAgLy8gaXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUuZmlyZWJ1ZyB8fCAod2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSkpIHx8XG4gICAgLy8gaXMgZmlyZWZveCA+PSB2MzE/XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpIHx8XG4gICAgLy8gZG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSk7XG59XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24odikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVyci5tZXNzYWdlO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG4gIHZhciB1c2VDb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblxuICBhcmdzWzBdID0gKHVzZUNvbG9ycyA/ICclYycgOiAnJylcbiAgICArIHRoaXMubmFtZXNwYWNlXG4gICAgKyAodXNlQ29sb3JzID8gJyAlYycgOiAnICcpXG4gICAgKyBhcmdzWzBdXG4gICAgKyAodXNlQ29sb3JzID8gJyVjICcgOiAnICcpXG4gICAgKyAnKycgKyBleHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cbiAgaWYgKCF1c2VDb2xvcnMpIHJldHVybjtcblxuICB2YXIgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG4gIGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpXG5cbiAgLy8gdGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcbiAgLy8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3RDID0gMDtcbiAgYXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgaWYgKCclJScgPT09IG1hdGNoKSByZXR1cm47XG4gICAgaW5kZXgrKztcbiAgICBpZiAoJyVjJyA9PT0gbWF0Y2gpIHtcbiAgICAgIC8vIHdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuICAgICAgLy8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcbiAgICAgIGxhc3RDID0gaW5kZXg7XG4gICAgfVxuICB9KTtcblxuICBhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9nKCkge1xuICAvLyB0aGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuICAvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuICByZXR1cm4gJ29iamVjdCcgPT09IHR5cGVvZiBjb25zb2xlXG4gICAgJiYgY29uc29sZS5sb2dcbiAgICAmJiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChjb25zb2xlLmxvZywgY29uc29sZSwgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG4gIHRyeSB7XG4gICAgaWYgKG51bGwgPT0gbmFtZXNwYWNlcykge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZyA9IG5hbWVzcGFjZXM7XG4gICAgfVxuICB9IGNhdGNoKGUpIHt9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgdmFyIHI7XG4gIHRyeSB7XG4gICAgciA9IGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZztcbiAgfSBjYXRjaChlKSB7fVxuXG4gIC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcbiAgaWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG4gICAgciA9IHByb2Nlc3MuZW52LkRFQlVHO1xuICB9XG5cbiAgcmV0dXJuIHI7XG59XG5cbi8qKlxuICogRW5hYmxlIG5hbWVzcGFjZXMgbGlzdGVkIGluIGBsb2NhbFN0b3JhZ2UuZGVidWdgIGluaXRpYWxseS5cbiAqL1xuXG5leHBvcnRzLmVuYWJsZShsb2FkKCkpO1xuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgfSBjYXRjaCAoZSkge31cbn1cbiIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnWydkZWZhdWx0J10gPSBjcmVhdGVEZWJ1ZztcbmV4cG9ydHMuY29lcmNlID0gY29lcmNlO1xuZXhwb3J0cy5kaXNhYmxlID0gZGlzYWJsZTtcbmV4cG9ydHMuZW5hYmxlID0gZW5hYmxlO1xuZXhwb3J0cy5lbmFibGVkID0gZW5hYmxlZDtcbmV4cG9ydHMuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXG4vKipcbiAqIEFjdGl2ZSBgZGVidWdgIGluc3RhbmNlcy5cbiAqL1xuZXhwb3J0cy5pbnN0YW5jZXMgPSBbXTtcblxuLyoqXG4gKiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cbiAqL1xuXG5leHBvcnRzLm5hbWVzID0gW107XG5leHBvcnRzLnNraXBzID0gW107XG5cbi8qKlxuICogTWFwIG9mIHNwZWNpYWwgXCIlblwiIGhhbmRsaW5nIGZ1bmN0aW9ucywgZm9yIHRoZSBkZWJ1ZyBcImZvcm1hdFwiIGFyZ3VtZW50LlxuICpcbiAqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMgPSB7fTtcblxuLyoqXG4gKiBTZWxlY3QgYSBjb2xvci5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuICB2YXIgaGFzaCA9IDAsIGk7XG5cbiAgZm9yIChpIGluIG5hbWVzcGFjZSkge1xuICAgIGhhc2ggID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICB9XG5cbiAgcmV0dXJuIGV4cG9ydHMuY29sb3JzW01hdGguYWJzKGhhc2gpICUgZXhwb3J0cy5jb2xvcnMubGVuZ3RoXTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG5cbiAgdmFyIHByZXZUaW1lO1xuXG4gIGZ1bmN0aW9uIGRlYnVnKCkge1xuICAgIC8vIGRpc2FibGVkP1xuICAgIGlmICghZGVidWcuZW5hYmxlZCkgcmV0dXJuO1xuXG4gICAgdmFyIHNlbGYgPSBkZWJ1ZztcblxuICAgIC8vIHNldCBgZGlmZmAgdGltZXN0YW1wXG4gICAgdmFyIGN1cnIgPSArbmV3IERhdGUoKTtcbiAgICB2YXIgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuICAgIHNlbGYuZGlmZiA9IG1zO1xuICAgIHNlbGYucHJldiA9IHByZXZUaW1lO1xuICAgIHNlbGYuY3VyciA9IGN1cnI7XG4gICAgcHJldlRpbWUgPSBjdXJyO1xuXG4gICAgLy8gdHVybiB0aGUgYGFyZ3VtZW50c2AgaW50byBhIHByb3BlciBBcnJheVxuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG5cbiAgICBhcmdzWzBdID0gZXhwb3J0cy5jb2VyY2UoYXJnc1swXSk7XG5cbiAgICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBhcmdzWzBdKSB7XG4gICAgICAvLyBhbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuICAgICAgYXJncy51bnNoaWZ0KCclTycpO1xuICAgIH1cblxuICAgIC8vIGFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgZnVuY3Rpb24obWF0Y2gsIGZvcm1hdCkge1xuICAgICAgLy8gaWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuICAgICAgaWYgKG1hdGNoID09PSAnJSUnKSByZXR1cm4gbWF0Y2g7XG4gICAgICBpbmRleCsrO1xuICAgICAgdmFyIGZvcm1hdHRlciA9IGV4cG9ydHMuZm9ybWF0dGVyc1tmb3JtYXRdO1xuICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBmb3JtYXR0ZXIpIHtcbiAgICAgICAgdmFyIHZhbCA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICBtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG5cbiAgICAgICAgLy8gbm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuICAgICAgICBhcmdzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGluZGV4LS07XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG5cbiAgICAvLyBhcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuICAgIGV4cG9ydHMuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG4gICAgdmFyIGxvZ0ZuID0gZGVidWcubG9nIHx8IGV4cG9ydHMubG9nIHx8IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7XG4gICAgbG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gIH1cblxuICBkZWJ1Zy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gIGRlYnVnLmVuYWJsZWQgPSBleHBvcnRzLmVuYWJsZWQobmFtZXNwYWNlKTtcbiAgZGVidWcudXNlQ29sb3JzID0gZXhwb3J0cy51c2VDb2xvcnMoKTtcbiAgZGVidWcuY29sb3IgPSBzZWxlY3RDb2xvcihuYW1lc3BhY2UpO1xuICBkZWJ1Zy5kZXN0cm95ID0gZGVzdHJveTtcblxuICAvLyBlbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGV4cG9ydHMuaW5pdCkge1xuICAgIGV4cG9ydHMuaW5pdChkZWJ1Zyk7XG4gIH1cblxuICBleHBvcnRzLmluc3RhbmNlcy5wdXNoKGRlYnVnKTtcblxuICByZXR1cm4gZGVidWc7XG59XG5cbmZ1bmN0aW9uIGRlc3Ryb3kgKCkge1xuICB2YXIgaW5kZXggPSBleHBvcnRzLmluc3RhbmNlcy5pbmRleE9mKHRoaXMpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgZXhwb3J0cy5pbnN0YW5jZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG4gKiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG4gIGV4cG9ydHMuc2F2ZShuYW1lc3BhY2VzKTtcblxuICBleHBvcnRzLm5hbWVzID0gW107XG4gIGV4cG9ydHMuc2tpcHMgPSBbXTtcblxuICB2YXIgaTtcbiAgdmFyIHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcbiAgdmFyIGxlbiA9IHNwbGl0Lmxlbmd0aDtcblxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoIXNwbGl0W2ldKSBjb250aW51ZTsgLy8gaWdub3JlIGVtcHR5IHN0cmluZ3NcbiAgICBuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcbiAgICBpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG4gICAgICBleHBvcnRzLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG4gICAgfVxuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IGV4cG9ydHMuaW5zdGFuY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGluc3RhbmNlID0gZXhwb3J0cy5pbnN0YW5jZXNbaV07XG4gICAgaW5zdGFuY2UuZW5hYmxlZCA9IGV4cG9ydHMuZW5hYmxlZChpbnN0YW5jZS5uYW1lc3BhY2UpO1xuICB9XG59XG5cbi8qKlxuICogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkaXNhYmxlKCkge1xuICBleHBvcnRzLmVuYWJsZSgnJyk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcbiAgaWYgKG5hbWVbbmFtZS5sZW5ndGggLSAxXSA9PT0gJyonKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIGksIGxlbjtcbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ29lcmNlIGB2YWxgLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb2VyY2UodmFsKSB7XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcbiAgcmV0dXJuIHZhbDtcbn1cbiIsIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgeSA9IGQgKiAzNjUuMjU7XG5cbi8qKlxuICogUGFyc2Ugb3IgZm9ybWF0IHRoZSBnaXZlbiBgdmFsYC5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICAtIGBsb25nYCB2ZXJib3NlIGZvcm1hdHRpbmcgW2ZhbHNlXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdmFsXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzTmFOKHZhbCkgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigoPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIGlmIChtcyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtcyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICByZXR1cm4gcGx1cmFsKG1zLCBkLCAnZGF5JykgfHxcbiAgICBwbHVyYWwobXMsIGgsICdob3VyJykgfHxcbiAgICBwbHVyYWwobXMsIG0sICdtaW51dGUnKSB8fFxuICAgIHBsdXJhbChtcywgcywgJ3NlY29uZCcpIHx8XG4gICAgbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG4sIG5hbWUpIHtcbiAgaWYgKG1zIDwgbikge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAobXMgPCBuICogMS41KSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IobXMgLyBuKSArICcgJyArIG5hbWU7XG4gIH1cbiAgcmV0dXJuIE1hdGguY2VpbChtcyAvIG4pICsgJyAnICsgbmFtZSArICdzJztcbn1cbiIsIlxyXG4vKipcclxuICogRXhwb3NlIGBFbWl0dGVyYC5cclxuICovXHJcblxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICBtb2R1bGUuZXhwb3J0cyA9IEVtaXR0ZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbml0aWFsaXplIGEgbmV3IGBFbWl0dGVyYC5cclxuICpcclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5mdW5jdGlvbiBFbWl0dGVyKG9iaikge1xyXG4gIGlmIChvYmopIHJldHVybiBtaXhpbihvYmopO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIE1peGluIHRoZSBlbWl0dGVyIHByb3BlcnRpZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcclxuICogQHJldHVybiB7T2JqZWN0fVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5mdW5jdGlvbiBtaXhpbihvYmopIHtcclxuICBmb3IgKHZhciBrZXkgaW4gRW1pdHRlci5wcm90b3R5cGUpIHtcclxuICAgIG9ialtrZXldID0gRW1pdHRlci5wcm90b3R5cGVba2V5XTtcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufVxyXG5cclxuLyoqXHJcbiAqIExpc3RlbiBvbiB0aGUgZ2l2ZW4gYGV2ZW50YCB3aXRoIGBmbmAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9uID1cclxuRW1pdHRlci5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gICh0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXSlcclxuICAgIC5wdXNoKGZuKTtcclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBBZGRzIGFuIGBldmVudGAgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgYSBzaW5nbGVcclxuICogdGltZSB0aGVuIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgZnVuY3Rpb24gb24oKSB7XHJcbiAgICB0aGlzLm9mZihldmVudCwgb24pO1xyXG4gICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICB9XHJcblxyXG4gIG9uLmZuID0gZm47XHJcbiAgdGhpcy5vbihldmVudCwgb24pO1xyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSB0aGUgZ2l2ZW4gY2FsbGJhY2sgZm9yIGBldmVudGAgb3IgYWxsXHJcbiAqIHJlZ2lzdGVyZWQgY2FsbGJhY2tzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vZmYgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuXHJcbiAgLy8gYWxsXHJcbiAgaWYgKDAgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgdGhpcy5fY2FsbGJhY2tzID0ge307XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8vIHNwZWNpZmljIGV2ZW50XHJcbiAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcbiAgaWYgKCFjYWxsYmFja3MpIHJldHVybiB0aGlzO1xyXG5cclxuICAvLyByZW1vdmUgYWxsIGhhbmRsZXJzXHJcbiAgaWYgKDEgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8vIHJlbW92ZSBzcGVjaWZpYyBoYW5kbGVyXHJcbiAgdmFyIGNiO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjYiA9IGNhbGxiYWNrc1tpXTtcclxuICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7XHJcbiAgICAgIGNhbGxiYWNrcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBFbWl0IGBldmVudGAgd2l0aCB0aGUgZ2l2ZW4gYXJncy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7TWl4ZWR9IC4uLlxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpXHJcbiAgICAsIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcblxyXG4gIGlmIChjYWxsYmFja3MpIHtcclxuICAgIGNhbGxiYWNrcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcclxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcclxuICAgICAgY2FsbGJhY2tzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJuIGFycmF5IG9mIGNhbGxiYWNrcyBmb3IgYGV2ZW50YC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEByZXR1cm4ge0FycmF5fVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgcmV0dXJuIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW107XHJcbn07XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgdGhpcyBlbWl0dGVyIGhhcyBgZXZlbnRgIGhhbmRsZXJzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHJldHVybiB7Qm9vbGVhbn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5oYXNMaXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgcmV0dXJuICEhIHRoaXMubGlzdGVuZXJzKGV2ZW50KS5sZW5ndGg7XHJcbn07XHJcbiIsIi8qZ2xvYmFsIEJsb2IsRmlsZSovXG5cbi8qKlxuICogTW9kdWxlIHJlcXVpcmVtZW50c1xuICovXG5cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xudmFyIGlzQnVmID0gcmVxdWlyZSgnLi9pcy1idWZmZXInKTtcbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgd2l0aE5hdGl2ZUJsb2IgPSB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIHRvU3RyaW5nLmNhbGwoQmxvYikgPT09ICdbb2JqZWN0IEJsb2JDb25zdHJ1Y3Rvcl0nKTtcbnZhciB3aXRoTmF0aXZlRmlsZSA9IHR5cGVvZiBGaWxlID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgRmlsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdG9TdHJpbmcuY2FsbChGaWxlKSA9PT0gJ1tvYmplY3QgRmlsZUNvbnN0cnVjdG9yXScpO1xuXG4vKipcbiAqIFJlcGxhY2VzIGV2ZXJ5IEJ1ZmZlciB8IEFycmF5QnVmZmVyIGluIHBhY2tldCB3aXRoIGEgbnVtYmVyZWQgcGxhY2Vob2xkZXIuXG4gKiBBbnl0aGluZyB3aXRoIGJsb2JzIG9yIGZpbGVzIHNob3VsZCBiZSBmZWQgdGhyb3VnaCByZW1vdmVCbG9icyBiZWZvcmUgY29taW5nXG4gKiBoZXJlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQgLSBzb2NrZXQuaW8gZXZlbnQgcGFja2V0XG4gKiBAcmV0dXJuIHtPYmplY3R9IHdpdGggZGVjb25zdHJ1Y3RlZCBwYWNrZXQgYW5kIGxpc3Qgb2YgYnVmZmVyc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmRlY29uc3RydWN0UGFja2V0ID0gZnVuY3Rpb24ocGFja2V0KSB7XG4gIHZhciBidWZmZXJzID0gW107XG4gIHZhciBwYWNrZXREYXRhID0gcGFja2V0LmRhdGE7XG4gIHZhciBwYWNrID0gcGFja2V0O1xuICBwYWNrLmRhdGEgPSBfZGVjb25zdHJ1Y3RQYWNrZXQocGFja2V0RGF0YSwgYnVmZmVycyk7XG4gIHBhY2suYXR0YWNobWVudHMgPSBidWZmZXJzLmxlbmd0aDsgLy8gbnVtYmVyIG9mIGJpbmFyeSAnYXR0YWNobWVudHMnXG4gIHJldHVybiB7cGFja2V0OiBwYWNrLCBidWZmZXJzOiBidWZmZXJzfTtcbn07XG5cbmZ1bmN0aW9uIF9kZWNvbnN0cnVjdFBhY2tldChkYXRhLCBidWZmZXJzKSB7XG4gIGlmICghZGF0YSkgcmV0dXJuIGRhdGE7XG5cbiAgaWYgKGlzQnVmKGRhdGEpKSB7XG4gICAgdmFyIHBsYWNlaG9sZGVyID0geyBfcGxhY2Vob2xkZXI6IHRydWUsIG51bTogYnVmZmVycy5sZW5ndGggfTtcbiAgICBidWZmZXJzLnB1c2goZGF0YSk7XG4gICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkoZGF0YSkpIHtcbiAgICB2YXIgbmV3RGF0YSA9IG5ldyBBcnJheShkYXRhLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBuZXdEYXRhW2ldID0gX2RlY29uc3RydWN0UGFja2V0KGRhdGFbaV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3RGF0YTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgJiYgIShkYXRhIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICB2YXIgbmV3RGF0YSA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICBuZXdEYXRhW2tleV0gPSBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtrZXldLCBidWZmZXJzKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0RhdGE7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogUmVjb25zdHJ1Y3RzIGEgYmluYXJ5IHBhY2tldCBmcm9tIGl0cyBwbGFjZWhvbGRlciBwYWNrZXQgYW5kIGJ1ZmZlcnNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0IC0gZXZlbnQgcGFja2V0IHdpdGggcGxhY2Vob2xkZXJzXG4gKiBAcGFyYW0ge0FycmF5fSBidWZmZXJzIC0gYmluYXJ5IGJ1ZmZlcnMgdG8gcHV0IGluIHBsYWNlaG9sZGVyIHBvc2l0aW9uc1xuICogQHJldHVybiB7T2JqZWN0fSByZWNvbnN0cnVjdGVkIHBhY2tldFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnJlY29uc3RydWN0UGFja2V0ID0gZnVuY3Rpb24ocGFja2V0LCBidWZmZXJzKSB7XG4gIHBhY2tldC5kYXRhID0gX3JlY29uc3RydWN0UGFja2V0KHBhY2tldC5kYXRhLCBidWZmZXJzKTtcbiAgcGFja2V0LmF0dGFjaG1lbnRzID0gdW5kZWZpbmVkOyAvLyBubyBsb25nZXIgdXNlZnVsXG4gIHJldHVybiBwYWNrZXQ7XG59O1xuXG5mdW5jdGlvbiBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YSwgYnVmZmVycykge1xuICBpZiAoIWRhdGEpIHJldHVybiBkYXRhO1xuXG4gIGlmIChkYXRhICYmIGRhdGEuX3BsYWNlaG9sZGVyKSB7XG4gICAgcmV0dXJuIGJ1ZmZlcnNbZGF0YS5udW1dOyAvLyBhcHByb3ByaWF0ZSBidWZmZXIgKHNob3VsZCBiZSBuYXR1cmFsIG9yZGVyIGFueXdheSlcbiAgfSBlbHNlIGlmIChpc0FycmF5KGRhdGEpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkYXRhW2ldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFbaV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgZGF0YVtrZXldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFba2V5XSwgYnVmZmVycyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQXN5bmNocm9ub3VzbHkgcmVtb3ZlcyBCbG9icyBvciBGaWxlcyBmcm9tIGRhdGEgdmlhXG4gKiBGaWxlUmVhZGVyJ3MgcmVhZEFzQXJyYXlCdWZmZXIgbWV0aG9kLiBVc2VkIGJlZm9yZSBlbmNvZGluZ1xuICogZGF0YSBhcyBtc2dwYWNrLiBDYWxscyBjYWxsYmFjayB3aXRoIHRoZSBibG9ibGVzcyBkYXRhLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5yZW1vdmVCbG9icyA9IGZ1bmN0aW9uKGRhdGEsIGNhbGxiYWNrKSB7XG4gIGZ1bmN0aW9uIF9yZW1vdmVCbG9icyhvYmosIGN1cktleSwgY29udGFpbmluZ09iamVjdCkge1xuICAgIGlmICghb2JqKSByZXR1cm4gb2JqO1xuXG4gICAgLy8gY29udmVydCBhbnkgYmxvYlxuICAgIGlmICgod2l0aE5hdGl2ZUJsb2IgJiYgb2JqIGluc3RhbmNlb2YgQmxvYikgfHxcbiAgICAgICAgKHdpdGhOYXRpdmVGaWxlICYmIG9iaiBpbnN0YW5jZW9mIEZpbGUpKSB7XG4gICAgICBwZW5kaW5nQmxvYnMrKztcblxuICAgICAgLy8gYXN5bmMgZmlsZXJlYWRlclxuICAgICAgdmFyIGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHsgLy8gdGhpcy5yZXN1bHQgPT0gYXJyYXlidWZmZXJcbiAgICAgICAgaWYgKGNvbnRhaW5pbmdPYmplY3QpIHtcbiAgICAgICAgICBjb250YWluaW5nT2JqZWN0W2N1cktleV0gPSB0aGlzLnJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBibG9ibGVzc0RhdGEgPSB0aGlzLnJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIG5vdGhpbmcgcGVuZGluZyBpdHMgY2FsbGJhY2sgdGltZVxuICAgICAgICBpZighIC0tcGVuZGluZ0Jsb2JzKSB7XG4gICAgICAgICAgY2FsbGJhY2soYmxvYmxlc3NEYXRhKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZmlsZVJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihvYmopOyAvLyBibG9iIC0+IGFycmF5YnVmZmVyXG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG9iaikpIHsgLy8gaGFuZGxlIGFycmF5XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgICBfcmVtb3ZlQmxvYnMob2JqW2ldLCBpLCBvYmopO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgIWlzQnVmKG9iaikpIHsgLy8gYW5kIG9iamVjdFxuICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICBfcmVtb3ZlQmxvYnMob2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgcGVuZGluZ0Jsb2JzID0gMDtcbiAgdmFyIGJsb2JsZXNzRGF0YSA9IGRhdGE7XG4gIF9yZW1vdmVCbG9icyhibG9ibGVzc0RhdGEpO1xuICBpZiAoIXBlbmRpbmdCbG9icykge1xuICAgIGNhbGxiYWNrKGJsb2JsZXNzRGF0YSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICB2YXIgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsoXG4gICAgICB1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpXG4gICAgKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zb2NrZXQnKTtcblxuLyoqXG4gKiBFeHBvcnRzIHBhcnNlclxuICpcbiAqIEBhcGkgcHVibGljXG4gKlxuICovXG5tb2R1bGUuZXhwb3J0cy5wYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHRyYW5zcG9ydHMgPSByZXF1aXJlKCcuL3RyYW5zcG9ydHMvaW5kZXgnKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2VuZ2luZS5pby1jbGllbnQ6c29ja2V0Jyk7XG52YXIgaW5kZXggPSByZXF1aXJlKCdpbmRleG9mJyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xudmFyIHBhcnNldXJpID0gcmVxdWlyZSgncGFyc2V1cmknKTtcbnZhciBwYXJzZXFzID0gcmVxdWlyZSgncGFyc2VxcycpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gU29ja2V0O1xuXG4vKipcbiAqIFNvY2tldCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IHVyaSBvciBvcHRpb25zXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBTb2NrZXQgKHVyaSwgb3B0cykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU29ja2V0KSkgcmV0dXJuIG5ldyBTb2NrZXQodXJpLCBvcHRzKTtcblxuICBvcHRzID0gb3B0cyB8fCB7fTtcblxuICBpZiAodXJpICYmICdvYmplY3QnID09PSB0eXBlb2YgdXJpKSB7XG4gICAgb3B0cyA9IHVyaTtcbiAgICB1cmkgPSBudWxsO1xuICB9XG5cbiAgaWYgKHVyaSkge1xuICAgIHVyaSA9IHBhcnNldXJpKHVyaSk7XG4gICAgb3B0cy5ob3N0bmFtZSA9IHVyaS5ob3N0O1xuICAgIG9wdHMuc2VjdXJlID0gdXJpLnByb3RvY29sID09PSAnaHR0cHMnIHx8IHVyaS5wcm90b2NvbCA9PT0gJ3dzcyc7XG4gICAgb3B0cy5wb3J0ID0gdXJpLnBvcnQ7XG4gICAgaWYgKHVyaS5xdWVyeSkgb3B0cy5xdWVyeSA9IHVyaS5xdWVyeTtcbiAgfSBlbHNlIGlmIChvcHRzLmhvc3QpIHtcbiAgICBvcHRzLmhvc3RuYW1lID0gcGFyc2V1cmkob3B0cy5ob3N0KS5ob3N0O1xuICB9XG5cbiAgdGhpcy5zZWN1cmUgPSBudWxsICE9IG9wdHMuc2VjdXJlID8gb3B0cy5zZWN1cmVcbiAgICA6ICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnICYmICdodHRwczonID09PSBsb2NhdGlvbi5wcm90b2NvbCk7XG5cbiAgaWYgKG9wdHMuaG9zdG5hbWUgJiYgIW9wdHMucG9ydCkge1xuICAgIC8vIGlmIG5vIHBvcnQgaXMgc3BlY2lmaWVkIG1hbnVhbGx5LCB1c2UgdGhlIHByb3RvY29sIGRlZmF1bHRcbiAgICBvcHRzLnBvcnQgPSB0aGlzLnNlY3VyZSA/ICc0NDMnIDogJzgwJztcbiAgfVxuXG4gIHRoaXMuYWdlbnQgPSBvcHRzLmFnZW50IHx8IGZhbHNlO1xuICB0aGlzLmhvc3RuYW1lID0gb3B0cy5ob3N0bmFtZSB8fFxuICAgICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnID8gbG9jYXRpb24uaG9zdG5hbWUgOiAnbG9jYWxob3N0Jyk7XG4gIHRoaXMucG9ydCA9IG9wdHMucG9ydCB8fCAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJyAmJiBsb2NhdGlvbi5wb3J0XG4gICAgICA/IGxvY2F0aW9uLnBvcnRcbiAgICAgIDogKHRoaXMuc2VjdXJlID8gNDQzIDogODApKTtcbiAgdGhpcy5xdWVyeSA9IG9wdHMucXVlcnkgfHwge307XG4gIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHRoaXMucXVlcnkpIHRoaXMucXVlcnkgPSBwYXJzZXFzLmRlY29kZSh0aGlzLnF1ZXJ5KTtcbiAgdGhpcy51cGdyYWRlID0gZmFsc2UgIT09IG9wdHMudXBncmFkZTtcbiAgdGhpcy5wYXRoID0gKG9wdHMucGF0aCB8fCAnL2VuZ2luZS5pbycpLnJlcGxhY2UoL1xcLyQvLCAnJykgKyAnLyc7XG4gIHRoaXMuZm9yY2VKU09OUCA9ICEhb3B0cy5mb3JjZUpTT05QO1xuICB0aGlzLmpzb25wID0gZmFsc2UgIT09IG9wdHMuanNvbnA7XG4gIHRoaXMuZm9yY2VCYXNlNjQgPSAhIW9wdHMuZm9yY2VCYXNlNjQ7XG4gIHRoaXMuZW5hYmxlc1hEUiA9ICEhb3B0cy5lbmFibGVzWERSO1xuICB0aGlzLndpdGhDcmVkZW50aWFscyA9IGZhbHNlICE9PSBvcHRzLndpdGhDcmVkZW50aWFscztcbiAgdGhpcy50aW1lc3RhbXBQYXJhbSA9IG9wdHMudGltZXN0YW1wUGFyYW0gfHwgJ3QnO1xuICB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzID0gb3B0cy50aW1lc3RhbXBSZXF1ZXN0cztcbiAgdGhpcy50cmFuc3BvcnRzID0gb3B0cy50cmFuc3BvcnRzIHx8IFsncG9sbGluZycsICd3ZWJzb2NrZXQnXTtcbiAgdGhpcy50cmFuc3BvcnRPcHRpb25zID0gb3B0cy50cmFuc3BvcnRPcHRpb25zIHx8IHt9O1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnJztcbiAgdGhpcy53cml0ZUJ1ZmZlciA9IFtdO1xuICB0aGlzLnByZXZCdWZmZXJMZW4gPSAwO1xuICB0aGlzLnBvbGljeVBvcnQgPSBvcHRzLnBvbGljeVBvcnQgfHwgODQzO1xuICB0aGlzLnJlbWVtYmVyVXBncmFkZSA9IG9wdHMucmVtZW1iZXJVcGdyYWRlIHx8IGZhbHNlO1xuICB0aGlzLmJpbmFyeVR5cGUgPSBudWxsO1xuICB0aGlzLm9ubHlCaW5hcnlVcGdyYWRlcyA9IG9wdHMub25seUJpbmFyeVVwZ3JhZGVzO1xuICB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlID0gZmFsc2UgIT09IG9wdHMucGVyTWVzc2FnZURlZmxhdGUgPyAob3B0cy5wZXJNZXNzYWdlRGVmbGF0ZSB8fCB7fSkgOiBmYWxzZTtcblxuICBpZiAodHJ1ZSA9PT0gdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSkgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSA9IHt9O1xuICBpZiAodGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSAmJiBudWxsID09IHRoaXMucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkKSB7XG4gICAgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZS50aHJlc2hvbGQgPSAxMDI0O1xuICB9XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMucGZ4ID0gb3B0cy5wZnggfHwgbnVsbDtcbiAgdGhpcy5rZXkgPSBvcHRzLmtleSB8fCBudWxsO1xuICB0aGlzLnBhc3NwaHJhc2UgPSBvcHRzLnBhc3NwaHJhc2UgfHwgbnVsbDtcbiAgdGhpcy5jZXJ0ID0gb3B0cy5jZXJ0IHx8IG51bGw7XG4gIHRoaXMuY2EgPSBvcHRzLmNhIHx8IG51bGw7XG4gIHRoaXMuY2lwaGVycyA9IG9wdHMuY2lwaGVycyB8fCBudWxsO1xuICB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCA9IG9wdHMucmVqZWN0VW5hdXRob3JpemVkID09PSB1bmRlZmluZWQgPyB0cnVlIDogb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gIHRoaXMuZm9yY2VOb2RlID0gISFvcHRzLmZvcmNlTm9kZTtcblxuICAvLyBkZXRlY3QgUmVhY3ROYXRpdmUgZW52aXJvbm1lbnRcbiAgdGhpcy5pc1JlYWN0TmF0aXZlID0gKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ3N0cmluZycgJiYgbmF2aWdhdG9yLnByb2R1Y3QudG9Mb3dlckNhc2UoKSA9PT0gJ3JlYWN0bmF0aXZlJyk7XG5cbiAgLy8gb3RoZXIgb3B0aW9ucyBmb3IgTm9kZS5qcyBvciBSZWFjdE5hdGl2ZSBjbGllbnRcbiAgaWYgKHR5cGVvZiBzZWxmID09PSAndW5kZWZpbmVkJyB8fCB0aGlzLmlzUmVhY3ROYXRpdmUpIHtcbiAgICBpZiAob3B0cy5leHRyYUhlYWRlcnMgJiYgT2JqZWN0LmtleXMob3B0cy5leHRyYUhlYWRlcnMpLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuZXh0cmFIZWFkZXJzID0gb3B0cy5leHRyYUhlYWRlcnM7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMubG9jYWxBZGRyZXNzKSB7XG4gICAgICB0aGlzLmxvY2FsQWRkcmVzcyA9IG9wdHMubG9jYWxBZGRyZXNzO1xuICAgIH1cbiAgfVxuXG4gIC8vIHNldCBvbiBoYW5kc2hha2VcbiAgdGhpcy5pZCA9IG51bGw7XG4gIHRoaXMudXBncmFkZXMgPSBudWxsO1xuICB0aGlzLnBpbmdJbnRlcnZhbCA9IG51bGw7XG4gIHRoaXMucGluZ1RpbWVvdXQgPSBudWxsO1xuXG4gIC8vIHNldCBvbiBoZWFydGJlYXRcbiAgdGhpcy5waW5nSW50ZXJ2YWxUaW1lciA9IG51bGw7XG4gIHRoaXMucGluZ1RpbWVvdXRUaW1lciA9IG51bGw7XG5cbiAgdGhpcy5vcGVuKCk7XG59XG5cblNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoU29ja2V0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogUHJvdG9jb2wgdmVyc2lvbi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b2NvbCA9IHBhcnNlci5wcm90b2NvbDsgLy8gdGhpcyBpcyBhbiBpbnRcblxuLyoqXG4gKiBFeHBvc2UgZGVwcyBmb3IgbGVnYWN5IGNvbXBhdGliaWxpdHlcbiAqIGFuZCBzdGFuZGFsb25lIGJyb3dzZXIgYWNjZXNzLlxuICovXG5cblNvY2tldC5Tb2NrZXQgPSBTb2NrZXQ7XG5Tb2NrZXQuVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi90cmFuc3BvcnQnKTtcblNvY2tldC50cmFuc3BvcnRzID0gcmVxdWlyZSgnLi90cmFuc3BvcnRzL2luZGV4Jyk7XG5Tb2NrZXQucGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xuXG4vKipcbiAqIENyZWF0ZXMgdHJhbnNwb3J0IG9mIHRoZSBnaXZlbiB0eXBlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0cmFuc3BvcnQgbmFtZVxuICogQHJldHVybiB7VHJhbnNwb3J0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5jcmVhdGVUcmFuc3BvcnQgPSBmdW5jdGlvbiAobmFtZSkge1xuICBkZWJ1ZygnY3JlYXRpbmcgdHJhbnNwb3J0IFwiJXNcIicsIG5hbWUpO1xuICB2YXIgcXVlcnkgPSBjbG9uZSh0aGlzLnF1ZXJ5KTtcblxuICAvLyBhcHBlbmQgZW5naW5lLmlvIHByb3RvY29sIGlkZW50aWZpZXJcbiAgcXVlcnkuRUlPID0gcGFyc2VyLnByb3RvY29sO1xuXG4gIC8vIHRyYW5zcG9ydCBuYW1lXG4gIHF1ZXJ5LnRyYW5zcG9ydCA9IG5hbWU7XG5cbiAgLy8gcGVyLXRyYW5zcG9ydCBvcHRpb25zXG4gIHZhciBvcHRpb25zID0gdGhpcy50cmFuc3BvcnRPcHRpb25zW25hbWVdIHx8IHt9O1xuXG4gIC8vIHNlc3Npb24gaWQgaWYgd2UgYWxyZWFkeSBoYXZlIG9uZVxuICBpZiAodGhpcy5pZCkgcXVlcnkuc2lkID0gdGhpcy5pZDtcblxuICB2YXIgdHJhbnNwb3J0ID0gbmV3IHRyYW5zcG9ydHNbbmFtZV0oe1xuICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICBzb2NrZXQ6IHRoaXMsXG4gICAgYWdlbnQ6IG9wdGlvbnMuYWdlbnQgfHwgdGhpcy5hZ2VudCxcbiAgICBob3N0bmFtZTogb3B0aW9ucy5ob3N0bmFtZSB8fCB0aGlzLmhvc3RuYW1lLFxuICAgIHBvcnQ6IG9wdGlvbnMucG9ydCB8fCB0aGlzLnBvcnQsXG4gICAgc2VjdXJlOiBvcHRpb25zLnNlY3VyZSB8fCB0aGlzLnNlY3VyZSxcbiAgICBwYXRoOiBvcHRpb25zLnBhdGggfHwgdGhpcy5wYXRoLFxuICAgIGZvcmNlSlNPTlA6IG9wdGlvbnMuZm9yY2VKU09OUCB8fCB0aGlzLmZvcmNlSlNPTlAsXG4gICAganNvbnA6IG9wdGlvbnMuanNvbnAgfHwgdGhpcy5qc29ucCxcbiAgICBmb3JjZUJhc2U2NDogb3B0aW9ucy5mb3JjZUJhc2U2NCB8fCB0aGlzLmZvcmNlQmFzZTY0LFxuICAgIGVuYWJsZXNYRFI6IG9wdGlvbnMuZW5hYmxlc1hEUiB8fCB0aGlzLmVuYWJsZXNYRFIsXG4gICAgd2l0aENyZWRlbnRpYWxzOiBvcHRpb25zLndpdGhDcmVkZW50aWFscyB8fCB0aGlzLndpdGhDcmVkZW50aWFscyxcbiAgICB0aW1lc3RhbXBSZXF1ZXN0czogb3B0aW9ucy50aW1lc3RhbXBSZXF1ZXN0cyB8fCB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzLFxuICAgIHRpbWVzdGFtcFBhcmFtOiBvcHRpb25zLnRpbWVzdGFtcFBhcmFtIHx8IHRoaXMudGltZXN0YW1wUGFyYW0sXG4gICAgcG9saWN5UG9ydDogb3B0aW9ucy5wb2xpY3lQb3J0IHx8IHRoaXMucG9saWN5UG9ydCxcbiAgICBwZng6IG9wdGlvbnMucGZ4IHx8IHRoaXMucGZ4LFxuICAgIGtleTogb3B0aW9ucy5rZXkgfHwgdGhpcy5rZXksXG4gICAgcGFzc3BocmFzZTogb3B0aW9ucy5wYXNzcGhyYXNlIHx8IHRoaXMucGFzc3BocmFzZSxcbiAgICBjZXJ0OiBvcHRpb25zLmNlcnQgfHwgdGhpcy5jZXJ0LFxuICAgIGNhOiBvcHRpb25zLmNhIHx8IHRoaXMuY2EsXG4gICAgY2lwaGVyczogb3B0aW9ucy5jaXBoZXJzIHx8IHRoaXMuY2lwaGVycyxcbiAgICByZWplY3RVbmF1dGhvcml6ZWQ6IG9wdGlvbnMucmVqZWN0VW5hdXRob3JpemVkIHx8IHRoaXMucmVqZWN0VW5hdXRob3JpemVkLFxuICAgIHBlck1lc3NhZ2VEZWZsYXRlOiBvcHRpb25zLnBlck1lc3NhZ2VEZWZsYXRlIHx8IHRoaXMucGVyTWVzc2FnZURlZmxhdGUsXG4gICAgZXh0cmFIZWFkZXJzOiBvcHRpb25zLmV4dHJhSGVhZGVycyB8fCB0aGlzLmV4dHJhSGVhZGVycyxcbiAgICBmb3JjZU5vZGU6IG9wdGlvbnMuZm9yY2VOb2RlIHx8IHRoaXMuZm9yY2VOb2RlLFxuICAgIGxvY2FsQWRkcmVzczogb3B0aW9ucy5sb2NhbEFkZHJlc3MgfHwgdGhpcy5sb2NhbEFkZHJlc3MsXG4gICAgcmVxdWVzdFRpbWVvdXQ6IG9wdGlvbnMucmVxdWVzdFRpbWVvdXQgfHwgdGhpcy5yZXF1ZXN0VGltZW91dCxcbiAgICBwcm90b2NvbHM6IG9wdGlvbnMucHJvdG9jb2xzIHx8IHZvaWQgKDApLFxuICAgIGlzUmVhY3ROYXRpdmU6IHRoaXMuaXNSZWFjdE5hdGl2ZVxuICB9KTtcblxuICByZXR1cm4gdHJhbnNwb3J0O1xufTtcblxuZnVuY3Rpb24gY2xvbmUgKG9iaikge1xuICB2YXIgbyA9IHt9O1xuICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgIG9baV0gPSBvYmpbaV07XG4gICAgfVxuICB9XG4gIHJldHVybiBvO1xufVxuXG4vKipcbiAqIEluaXRpYWxpemVzIHRyYW5zcG9ydCB0byB1c2UgYW5kIHN0YXJ0cyBwcm9iZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuU29ja2V0LnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdHJhbnNwb3J0O1xuICBpZiAodGhpcy5yZW1lbWJlclVwZ3JhZGUgJiYgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyAmJiB0aGlzLnRyYW5zcG9ydHMuaW5kZXhPZignd2Vic29ja2V0JykgIT09IC0xKSB7XG4gICAgdHJhbnNwb3J0ID0gJ3dlYnNvY2tldCc7XG4gIH0gZWxzZSBpZiAoMCA9PT0gdGhpcy50cmFuc3BvcnRzLmxlbmd0aCkge1xuICAgIC8vIEVtaXQgZXJyb3Igb24gbmV4dCB0aWNrIHNvIGl0IGNhbiBiZSBsaXN0ZW5lZCB0b1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuZW1pdCgnZXJyb3InLCAnTm8gdHJhbnNwb3J0cyBhdmFpbGFibGUnKTtcbiAgICB9LCAwKTtcbiAgICByZXR1cm47XG4gIH0gZWxzZSB7XG4gICAgdHJhbnNwb3J0ID0gdGhpcy50cmFuc3BvcnRzWzBdO1xuICB9XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuaW5nJztcblxuICAvLyBSZXRyeSB3aXRoIHRoZSBuZXh0IHRyYW5zcG9ydCBpZiB0aGUgdHJhbnNwb3J0IGlzIGRpc2FibGVkIChqc29ucDogZmFsc2UpXG4gIHRyeSB7XG4gICAgdHJhbnNwb3J0ID0gdGhpcy5jcmVhdGVUcmFuc3BvcnQodHJhbnNwb3J0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRoaXMudHJhbnNwb3J0cy5zaGlmdCgpO1xuICAgIHRoaXMub3BlbigpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRyYW5zcG9ydC5vcGVuKCk7XG4gIHRoaXMuc2V0VHJhbnNwb3J0KHRyYW5zcG9ydCk7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGN1cnJlbnQgdHJhbnNwb3J0LiBEaXNhYmxlcyB0aGUgZXhpc3Rpbmcgb25lIChpZiBhbnkpLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuc2V0VHJhbnNwb3J0ID0gZnVuY3Rpb24gKHRyYW5zcG9ydCkge1xuICBkZWJ1Zygnc2V0dGluZyB0cmFuc3BvcnQgJXMnLCB0cmFuc3BvcnQubmFtZSk7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAodGhpcy50cmFuc3BvcnQpIHtcbiAgICBkZWJ1ZygnY2xlYXJpbmcgZXhpc3RpbmcgdHJhbnNwb3J0ICVzJywgdGhpcy50cmFuc3BvcnQubmFtZSk7XG4gICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIH1cblxuICAvLyBzZXQgdXAgdHJhbnNwb3J0XG4gIHRoaXMudHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuXG4gIC8vIHNldCB1cCB0cmFuc3BvcnQgbGlzdGVuZXJzXG4gIHRyYW5zcG9ydFxuICAub24oJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgIHNlbGYub25EcmFpbigpO1xuICB9KVxuICAub24oJ3BhY2tldCcsIGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgICBzZWxmLm9uUGFja2V0KHBhY2tldCk7XG4gIH0pXG4gIC5vbignZXJyb3InLCBmdW5jdGlvbiAoZSkge1xuICAgIHNlbGYub25FcnJvcihlKTtcbiAgfSlcbiAgLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uQ2xvc2UoJ3RyYW5zcG9ydCBjbG9zZScpO1xuICB9KTtcbn07XG5cbi8qKlxuICogUHJvYmVzIGEgdHJhbnNwb3J0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0cmFuc3BvcnQgbmFtZVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5wcm9iZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGRlYnVnKCdwcm9iaW5nIHRyYW5zcG9ydCBcIiVzXCInLCBuYW1lKTtcbiAgdmFyIHRyYW5zcG9ydCA9IHRoaXMuY3JlYXRlVHJhbnNwb3J0KG5hbWUsIHsgcHJvYmU6IDEgfSk7XG4gIHZhciBmYWlsZWQgPSBmYWxzZTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBvblRyYW5zcG9ydE9wZW4gKCkge1xuICAgIGlmIChzZWxmLm9ubHlCaW5hcnlVcGdyYWRlcykge1xuICAgICAgdmFyIHVwZ3JhZGVMb3Nlc0JpbmFyeSA9ICF0aGlzLnN1cHBvcnRzQmluYXJ5ICYmIHNlbGYudHJhbnNwb3J0LnN1cHBvcnRzQmluYXJ5O1xuICAgICAgZmFpbGVkID0gZmFpbGVkIHx8IHVwZ3JhZGVMb3Nlc0JpbmFyeTtcbiAgICB9XG4gICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuXG4gICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgb3BlbmVkJywgbmFtZSk7XG4gICAgdHJhbnNwb3J0LnNlbmQoW3sgdHlwZTogJ3BpbmcnLCBkYXRhOiAncHJvYmUnIH1dKTtcbiAgICB0cmFuc3BvcnQub25jZSgncGFja2V0JywgZnVuY3Rpb24gKG1zZykge1xuICAgICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuICAgICAgaWYgKCdwb25nJyA9PT0gbXNnLnR5cGUgJiYgJ3Byb2JlJyA9PT0gbXNnLmRhdGEpIHtcbiAgICAgICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgcG9uZycsIG5hbWUpO1xuICAgICAgICBzZWxmLnVwZ3JhZGluZyA9IHRydWU7XG4gICAgICAgIHNlbGYuZW1pdCgndXBncmFkaW5nJywgdHJhbnNwb3J0KTtcbiAgICAgICAgaWYgKCF0cmFuc3BvcnQpIHJldHVybjtcbiAgICAgICAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9ICd3ZWJzb2NrZXQnID09PSB0cmFuc3BvcnQubmFtZTtcblxuICAgICAgICBkZWJ1ZygncGF1c2luZyBjdXJyZW50IHRyYW5zcG9ydCBcIiVzXCInLCBzZWxmLnRyYW5zcG9ydC5uYW1lKTtcbiAgICAgICAgc2VsZi50cmFuc3BvcnQucGF1c2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChmYWlsZWQpIHJldHVybjtcbiAgICAgICAgICBpZiAoJ2Nsb3NlZCcgPT09IHNlbGYucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICAgICAgICAgIGRlYnVnKCdjaGFuZ2luZyB0cmFuc3BvcnQgYW5kIHNlbmRpbmcgdXBncmFkZSBwYWNrZXQnKTtcblxuICAgICAgICAgIGNsZWFudXAoKTtcblxuICAgICAgICAgIHNlbGYuc2V0VHJhbnNwb3J0KHRyYW5zcG9ydCk7XG4gICAgICAgICAgdHJhbnNwb3J0LnNlbmQoW3sgdHlwZTogJ3VwZ3JhZGUnIH1dKTtcbiAgICAgICAgICBzZWxmLmVtaXQoJ3VwZ3JhZGUnLCB0cmFuc3BvcnQpO1xuICAgICAgICAgIHRyYW5zcG9ydCA9IG51bGw7XG4gICAgICAgICAgc2VsZi51cGdyYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICBzZWxmLmZsdXNoKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgZmFpbGVkJywgbmFtZSk7XG4gICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ3Byb2JlIGVycm9yJyk7XG4gICAgICAgIGVyci50cmFuc3BvcnQgPSB0cmFuc3BvcnQubmFtZTtcbiAgICAgICAgc2VsZi5lbWl0KCd1cGdyYWRlRXJyb3InLCBlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZnJlZXplVHJhbnNwb3J0ICgpIHtcbiAgICBpZiAoZmFpbGVkKSByZXR1cm47XG5cbiAgICAvLyBBbnkgY2FsbGJhY2sgY2FsbGVkIGJ5IHRyYW5zcG9ydCBzaG91bGQgYmUgaWdub3JlZCBzaW5jZSBub3dcbiAgICBmYWlsZWQgPSB0cnVlO1xuXG4gICAgY2xlYW51cCgpO1xuXG4gICAgdHJhbnNwb3J0LmNsb3NlKCk7XG4gICAgdHJhbnNwb3J0ID0gbnVsbDtcbiAgfVxuXG4gIC8vIEhhbmRsZSBhbnkgZXJyb3IgdGhhdCBoYXBwZW5zIHdoaWxlIHByb2JpbmdcbiAgZnVuY3Rpb24gb25lcnJvciAoZXJyKSB7XG4gICAgdmFyIGVycm9yID0gbmV3IEVycm9yKCdwcm9iZSBlcnJvcjogJyArIGVycik7XG4gICAgZXJyb3IudHJhbnNwb3J0ID0gdHJhbnNwb3J0Lm5hbWU7XG5cbiAgICBmcmVlemVUcmFuc3BvcnQoKTtcblxuICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIGZhaWxlZCBiZWNhdXNlIG9mIGVycm9yOiAlcycsIG5hbWUsIGVycik7XG5cbiAgICBzZWxmLmVtaXQoJ3VwZ3JhZGVFcnJvcicsIGVycm9yKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVHJhbnNwb3J0Q2xvc2UgKCkge1xuICAgIG9uZXJyb3IoJ3RyYW5zcG9ydCBjbG9zZWQnKTtcbiAgfVxuXG4gIC8vIFdoZW4gdGhlIHNvY2tldCBpcyBjbG9zZWQgd2hpbGUgd2UncmUgcHJvYmluZ1xuICBmdW5jdGlvbiBvbmNsb3NlICgpIHtcbiAgICBvbmVycm9yKCdzb2NrZXQgY2xvc2VkJyk7XG4gIH1cblxuICAvLyBXaGVuIHRoZSBzb2NrZXQgaXMgdXBncmFkZWQgd2hpbGUgd2UncmUgcHJvYmluZ1xuICBmdW5jdGlvbiBvbnVwZ3JhZGUgKHRvKSB7XG4gICAgaWYgKHRyYW5zcG9ydCAmJiB0by5uYW1lICE9PSB0cmFuc3BvcnQubmFtZSkge1xuICAgICAgZGVidWcoJ1wiJXNcIiB3b3JrcyAtIGFib3J0aW5nIFwiJXNcIicsIHRvLm5hbWUsIHRyYW5zcG9ydC5uYW1lKTtcbiAgICAgIGZyZWV6ZVRyYW5zcG9ydCgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJlbW92ZSBhbGwgbGlzdGVuZXJzIG9uIHRoZSB0cmFuc3BvcnQgYW5kIG9uIHNlbGZcbiAgZnVuY3Rpb24gY2xlYW51cCAoKSB7XG4gICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKCdvcGVuJywgb25UcmFuc3BvcnRPcGVuKTtcbiAgICB0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uVHJhbnNwb3J0Q2xvc2UpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgc2VsZi5yZW1vdmVMaXN0ZW5lcigndXBncmFkaW5nJywgb251cGdyYWRlKTtcbiAgfVxuXG4gIHRyYW5zcG9ydC5vbmNlKCdvcGVuJywgb25UcmFuc3BvcnRPcGVuKTtcbiAgdHJhbnNwb3J0Lm9uY2UoJ2Vycm9yJywgb25lcnJvcik7XG4gIHRyYW5zcG9ydC5vbmNlKCdjbG9zZScsIG9uVHJhbnNwb3J0Q2xvc2UpO1xuXG4gIHRoaXMub25jZSgnY2xvc2UnLCBvbmNsb3NlKTtcbiAgdGhpcy5vbmNlKCd1cGdyYWRpbmcnLCBvbnVwZ3JhZGUpO1xuXG4gIHRyYW5zcG9ydC5vcGVuKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIGNvbm5lY3Rpb24gaXMgZGVlbWVkIG9wZW4uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ3NvY2tldCBvcGVuJyk7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuJztcbiAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9ICd3ZWJzb2NrZXQnID09PSB0aGlzLnRyYW5zcG9ydC5uYW1lO1xuICB0aGlzLmVtaXQoJ29wZW4nKTtcbiAgdGhpcy5mbHVzaCgpO1xuXG4gIC8vIHdlIGNoZWNrIGZvciBgcmVhZHlTdGF0ZWAgaW4gY2FzZSBhbiBgb3BlbmBcbiAgLy8gbGlzdGVuZXIgYWxyZWFkeSBjbG9zZWQgdGhlIHNvY2tldFxuICBpZiAoJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUgJiYgdGhpcy51cGdyYWRlICYmIHRoaXMudHJhbnNwb3J0LnBhdXNlKSB7XG4gICAgZGVidWcoJ3N0YXJ0aW5nIHVwZ3JhZGUgcHJvYmVzJyk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLnVwZ3JhZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdGhpcy5wcm9iZSh0aGlzLnVwZ3JhZGVzW2ldKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogSGFuZGxlcyBhIHBhY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uUGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICBpZiAoJ29wZW5pbmcnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUgfHxcbiAgICAgICdjbG9zaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgZGVidWcoJ3NvY2tldCByZWNlaXZlOiB0eXBlIFwiJXNcIiwgZGF0YSBcIiVzXCInLCBwYWNrZXQudHlwZSwgcGFja2V0LmRhdGEpO1xuXG4gICAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xuXG4gICAgLy8gU29ja2V0IGlzIGxpdmUgLSBhbnkgcGFja2V0IGNvdW50c1xuICAgIHRoaXMuZW1pdCgnaGVhcnRiZWF0Jyk7XG5cbiAgICBzd2l0Y2ggKHBhY2tldC50eXBlKSB7XG4gICAgICBjYXNlICdvcGVuJzpcbiAgICAgICAgdGhpcy5vbkhhbmRzaGFrZShKU09OLnBhcnNlKHBhY2tldC5kYXRhKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdwb25nJzpcbiAgICAgICAgdGhpcy5zZXRQaW5nKCk7XG4gICAgICAgIHRoaXMuZW1pdCgncG9uZycpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdzZXJ2ZXIgZXJyb3InKTtcbiAgICAgICAgZXJyLmNvZGUgPSBwYWNrZXQuZGF0YTtcbiAgICAgICAgdGhpcy5vbkVycm9yKGVycik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdtZXNzYWdlJzpcbiAgICAgICAgdGhpcy5lbWl0KCdkYXRhJywgcGFja2V0LmRhdGEpO1xuICAgICAgICB0aGlzLmVtaXQoJ21lc3NhZ2UnLCBwYWNrZXQuZGF0YSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBkZWJ1ZygncGFja2V0IHJlY2VpdmVkIHdpdGggc29ja2V0IHJlYWR5U3RhdGUgXCIlc1wiJywgdGhpcy5yZWFkeVN0YXRlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBoYW5kc2hha2UgY29tcGxldGlvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaGFuZHNoYWtlIG9ialxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbkhhbmRzaGFrZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuZW1pdCgnaGFuZHNoYWtlJywgZGF0YSk7XG4gIHRoaXMuaWQgPSBkYXRhLnNpZDtcbiAgdGhpcy50cmFuc3BvcnQucXVlcnkuc2lkID0gZGF0YS5zaWQ7XG4gIHRoaXMudXBncmFkZXMgPSB0aGlzLmZpbHRlclVwZ3JhZGVzKGRhdGEudXBncmFkZXMpO1xuICB0aGlzLnBpbmdJbnRlcnZhbCA9IGRhdGEucGluZ0ludGVydmFsO1xuICB0aGlzLnBpbmdUaW1lb3V0ID0gZGF0YS5waW5nVGltZW91dDtcbiAgdGhpcy5vbk9wZW4oKTtcbiAgLy8gSW4gY2FzZSBvcGVuIGhhbmRsZXIgY2xvc2VzIHNvY2tldFxuICBpZiAoJ2Nsb3NlZCcgPT09IHRoaXMucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICB0aGlzLnNldFBpbmcoKTtcblxuICAvLyBQcm9sb25nIGxpdmVuZXNzIG9mIHNvY2tldCBvbiBoZWFydGJlYXRcbiAgdGhpcy5yZW1vdmVMaXN0ZW5lcignaGVhcnRiZWF0JywgdGhpcy5vbkhlYXJ0YmVhdCk7XG4gIHRoaXMub24oJ2hlYXJ0YmVhdCcsIHRoaXMub25IZWFydGJlYXQpO1xufTtcblxuLyoqXG4gKiBSZXNldHMgcGluZyB0aW1lb3V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25IZWFydGJlYXQgPSBmdW5jdGlvbiAodGltZW91dCkge1xuICBjbGVhclRpbWVvdXQodGhpcy5waW5nVGltZW91dFRpbWVyKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBzZWxmLnBpbmdUaW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoJ2Nsb3NlZCcgPT09IHNlbGYucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICAgIHNlbGYub25DbG9zZSgncGluZyB0aW1lb3V0Jyk7XG4gIH0sIHRpbWVvdXQgfHwgKHNlbGYucGluZ0ludGVydmFsICsgc2VsZi5waW5nVGltZW91dCkpO1xufTtcblxuLyoqXG4gKiBQaW5ncyBzZXJ2ZXIgZXZlcnkgYHRoaXMucGluZ0ludGVydmFsYCBhbmQgZXhwZWN0cyByZXNwb25zZVxuICogd2l0aGluIGB0aGlzLnBpbmdUaW1lb3V0YCBvciBjbG9zZXMgY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnNldFBpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgY2xlYXJUaW1lb3V0KHNlbGYucGluZ0ludGVydmFsVGltZXIpO1xuICBzZWxmLnBpbmdJbnRlcnZhbFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgZGVidWcoJ3dyaXRpbmcgcGluZyBwYWNrZXQgLSBleHBlY3RpbmcgcG9uZyB3aXRoaW4gJXNtcycsIHNlbGYucGluZ1RpbWVvdXQpO1xuICAgIHNlbGYucGluZygpO1xuICAgIHNlbGYub25IZWFydGJlYXQoc2VsZi5waW5nVGltZW91dCk7XG4gIH0sIHNlbGYucGluZ0ludGVydmFsKTtcbn07XG5cbi8qKlxuKiBTZW5kcyBhIHBpbmcgcGFja2V0LlxuKlxuKiBAYXBpIHByaXZhdGVcbiovXG5cblNvY2tldC5wcm90b3R5cGUucGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnNlbmRQYWNrZXQoJ3BpbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5lbWl0KCdwaW5nJyk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgb24gYGRyYWluYCBldmVudFxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25EcmFpbiA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy53cml0ZUJ1ZmZlci5zcGxpY2UoMCwgdGhpcy5wcmV2QnVmZmVyTGVuKTtcblxuICAvLyBzZXR0aW5nIHByZXZCdWZmZXJMZW4gPSAwIGlzIHZlcnkgaW1wb3J0YW50XG4gIC8vIGZvciBleGFtcGxlLCB3aGVuIHVwZ3JhZGluZywgdXBncmFkZSBwYWNrZXQgaXMgc2VudCBvdmVyLFxuICAvLyBhbmQgYSBub256ZXJvIHByZXZCdWZmZXJMZW4gY291bGQgY2F1c2UgcHJvYmxlbXMgb24gYGRyYWluYFxuICB0aGlzLnByZXZCdWZmZXJMZW4gPSAwO1xuXG4gIGlmICgwID09PSB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCkge1xuICAgIHRoaXMuZW1pdCgnZHJhaW4nKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmZsdXNoKCk7XG4gIH1cbn07XG5cbi8qKlxuICogRmx1c2ggd3JpdGUgYnVmZmVycy5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ2Nsb3NlZCcgIT09IHRoaXMucmVhZHlTdGF0ZSAmJiB0aGlzLnRyYW5zcG9ydC53cml0YWJsZSAmJlxuICAgICF0aGlzLnVwZ3JhZGluZyAmJiB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCkge1xuICAgIGRlYnVnKCdmbHVzaGluZyAlZCBwYWNrZXRzIGluIHNvY2tldCcsIHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKTtcbiAgICB0aGlzLnRyYW5zcG9ydC5zZW5kKHRoaXMud3JpdGVCdWZmZXIpO1xuICAgIC8vIGtlZXAgdHJhY2sgb2YgY3VycmVudCBsZW5ndGggb2Ygd3JpdGVCdWZmZXJcbiAgICAvLyBzcGxpY2Ugd3JpdGVCdWZmZXIgYW5kIGNhbGxiYWNrQnVmZmVyIG9uIGBkcmFpbmBcbiAgICB0aGlzLnByZXZCdWZmZXJMZW4gPSB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aDtcbiAgICB0aGlzLmVtaXQoJ2ZsdXNoJyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2VuZHMgYSBtZXNzYWdlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAqIEByZXR1cm4ge1NvY2tldH0gZm9yIGNoYWluaW5nLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLndyaXRlID1cblNvY2tldC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChtc2csIG9wdGlvbnMsIGZuKSB7XG4gIHRoaXMuc2VuZFBhY2tldCgnbWVzc2FnZScsIG1zZywgb3B0aW9ucywgZm4pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZHMgYSBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHBhY2tldCB0eXBlLlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGEuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zZW5kUGFja2V0ID0gZnVuY3Rpb24gKHR5cGUsIGRhdGEsIG9wdGlvbnMsIGZuKSB7XG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZGF0YSkge1xuICAgIGZuID0gZGF0YTtcbiAgICBkYXRhID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBvcHRpb25zKSB7XG4gICAgZm4gPSBvcHRpb25zO1xuICAgIG9wdGlvbnMgPSBudWxsO1xuICB9XG5cbiAgaWYgKCdjbG9zaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdjbG9zZWQnID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5jb21wcmVzcyA9IGZhbHNlICE9PSBvcHRpb25zLmNvbXByZXNzO1xuXG4gIHZhciBwYWNrZXQgPSB7XG4gICAgdHlwZTogdHlwZSxcbiAgICBkYXRhOiBkYXRhLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfTtcbiAgdGhpcy5lbWl0KCdwYWNrZXRDcmVhdGUnLCBwYWNrZXQpO1xuICB0aGlzLndyaXRlQnVmZmVyLnB1c2gocGFja2V0KTtcbiAgaWYgKGZuKSB0aGlzLm9uY2UoJ2ZsdXNoJywgZm4pO1xuICB0aGlzLmZsdXNoKCk7XG59O1xuXG4vKipcbiAqIENsb3NlcyB0aGUgY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ29wZW5pbmcnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2luZyc7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgIHRoaXMub25jZSgnZHJhaW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnVwZ3JhZGluZykge1xuICAgICAgICAgIHdhaXRGb3JVcGdyYWRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnVwZ3JhZGluZykge1xuICAgICAgd2FpdEZvclVwZ3JhZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjbG9zZSAoKSB7XG4gICAgc2VsZi5vbkNsb3NlKCdmb3JjZWQgY2xvc2UnKTtcbiAgICBkZWJ1Zygnc29ja2V0IGNsb3NpbmcgLSB0ZWxsaW5nIHRyYW5zcG9ydCB0byBjbG9zZScpO1xuICAgIHNlbGYudHJhbnNwb3J0LmNsb3NlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBjbGVhbnVwQW5kQ2xvc2UgKCkge1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VwZ3JhZGUnLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VwZ3JhZGVFcnJvcicsIGNsZWFudXBBbmRDbG9zZSk7XG4gICAgY2xvc2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdhaXRGb3JVcGdyYWRlICgpIHtcbiAgICAvLyB3YWl0IGZvciB1cGdyYWRlIHRvIGZpbmlzaCBzaW5jZSB3ZSBjYW4ndCBzZW5kIHBhY2tldHMgd2hpbGUgcGF1c2luZyBhIHRyYW5zcG9ydFxuICAgIHNlbGYub25jZSgndXBncmFkZScsIGNsZWFudXBBbmRDbG9zZSk7XG4gICAgc2VsZi5vbmNlKCd1cGdyYWRlRXJyb3InLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBlcnJvclxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgZGVidWcoJ3NvY2tldCBlcnJvciAlaicsIGVycik7XG4gIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gIHRoaXMub25DbG9zZSgndHJhbnNwb3J0IGVycm9yJywgZXJyKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IGNsb3NlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uIChyZWFzb24sIGRlc2MpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdjbG9zaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgZGVidWcoJ3NvY2tldCBjbG9zZSB3aXRoIHJlYXNvbjogXCIlc1wiJywgcmVhc29uKTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAvLyBjbGVhciB0aW1lcnNcbiAgICBjbGVhclRpbWVvdXQodGhpcy5waW5nSW50ZXJ2YWxUaW1lcik7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1RpbWVvdXRUaW1lcik7XG5cbiAgICAvLyBzdG9wIGV2ZW50IGZyb20gZmlyaW5nIGFnYWluIGZvciB0cmFuc3BvcnRcbiAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoJ2Nsb3NlJyk7XG5cbiAgICAvLyBlbnN1cmUgdHJhbnNwb3J0IHdvbid0IHN0YXkgb3BlblxuICAgIHRoaXMudHJhbnNwb3J0LmNsb3NlKCk7XG5cbiAgICAvLyBpZ25vcmUgZnVydGhlciB0cmFuc3BvcnQgY29tbXVuaWNhdGlvblxuICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuXG4gICAgLy8gc2V0IHJlYWR5IHN0YXRlXG4gICAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG5cbiAgICAvLyBjbGVhciBzZXNzaW9uIGlkXG4gICAgdGhpcy5pZCA9IG51bGw7XG5cbiAgICAvLyBlbWl0IGNsb3NlIGV2ZW50XG4gICAgdGhpcy5lbWl0KCdjbG9zZScsIHJlYXNvbiwgZGVzYyk7XG5cbiAgICAvLyBjbGVhbiBidWZmZXJzIGFmdGVyLCBzbyB1c2VycyBjYW4gc3RpbGxcbiAgICAvLyBncmFiIHRoZSBidWZmZXJzIG9uIGBjbG9zZWAgZXZlbnRcbiAgICBzZWxmLndyaXRlQnVmZmVyID0gW107XG4gICAgc2VsZi5wcmV2QnVmZmVyTGVuID0gMDtcbiAgfVxufTtcblxuLyoqXG4gKiBGaWx0ZXJzIHVwZ3JhZGVzLCByZXR1cm5pbmcgb25seSB0aG9zZSBtYXRjaGluZyBjbGllbnQgdHJhbnNwb3J0cy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBzZXJ2ZXIgdXBncmFkZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICpcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmZpbHRlclVwZ3JhZGVzID0gZnVuY3Rpb24gKHVwZ3JhZGVzKSB7XG4gIHZhciBmaWx0ZXJlZFVwZ3JhZGVzID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBqID0gdXBncmFkZXMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgaWYgKH5pbmRleCh0aGlzLnRyYW5zcG9ydHMsIHVwZ3JhZGVzW2ldKSkgZmlsdGVyZWRVcGdyYWRlcy5wdXNoKHVwZ3JhZGVzW2ldKTtcbiAgfVxuICByZXR1cm4gZmlsdGVyZWRVcGdyYWRlcztcbn07XG4iLCJcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKlxuICogTG9naWMgYm9ycm93ZWQgZnJvbSBNb2Rlcm5penI6XG4gKlxuICogICAtIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9jb3JzLmpzXG4gKi9cblxudHJ5IHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnICYmXG4gICAgJ3dpdGhDcmVkZW50aWFscycgaW4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG59IGNhdGNoIChlcnIpIHtcbiAgLy8gaWYgWE1MSHR0cCBzdXBwb3J0IGlzIGRpc2FibGVkIGluIElFIHRoZW4gaXQgd2lsbCB0aHJvd1xuICAvLyB3aGVuIHRyeWluZyB0byBjcmVhdGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbn1cbiIsIi8qIGdsb2JhbCBhdHRhY2hFdmVudCAqL1xuXG4vKipcbiAqIE1vZHVsZSByZXF1aXJlbWVudHMuXG4gKi9cblxudmFyIFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZSgneG1saHR0cHJlcXVlc3Qtc3NsJyk7XG52YXIgUG9sbGluZyA9IHJlcXVpcmUoJy4vcG9sbGluZycpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb21wb25lbnQtaW5oZXJpdCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nLXhocicpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gWEhSO1xubW9kdWxlLmV4cG9ydHMuUmVxdWVzdCA9IFJlcXVlc3Q7XG5cbi8qKlxuICogRW1wdHkgZnVuY3Rpb25cbiAqL1xuXG5mdW5jdGlvbiBlbXB0eSAoKSB7fVxuXG4vKipcbiAqIFhIUiBQb2xsaW5nIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFhIUiAob3B0cykge1xuICBQb2xsaW5nLmNhbGwodGhpcywgb3B0cyk7XG4gIHRoaXMucmVxdWVzdFRpbWVvdXQgPSBvcHRzLnJlcXVlc3RUaW1lb3V0O1xuICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuXG4gIGlmICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIGlzU1NMID0gJ2h0dHBzOicgPT09IGxvY2F0aW9uLnByb3RvY29sO1xuICAgIHZhciBwb3J0ID0gbG9jYXRpb24ucG9ydDtcblxuICAgIC8vIHNvbWUgdXNlciBhZ2VudHMgaGF2ZSBlbXB0eSBgbG9jYXRpb24ucG9ydGBcbiAgICBpZiAoIXBvcnQpIHtcbiAgICAgIHBvcnQgPSBpc1NTTCA/IDQ0MyA6IDgwO1xuICAgIH1cblxuICAgIHRoaXMueGQgPSAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJyAmJiBvcHRzLmhvc3RuYW1lICE9PSBsb2NhdGlvbi5ob3N0bmFtZSkgfHxcbiAgICAgIHBvcnQgIT09IG9wdHMucG9ydDtcbiAgICB0aGlzLnhzID0gb3B0cy5zZWN1cmUgIT09IGlzU1NMO1xuICB9XG59XG5cbi8qKlxuICogSW5oZXJpdHMgZnJvbSBQb2xsaW5nLlxuICovXG5cbmluaGVyaXQoWEhSLCBQb2xsaW5nKTtcblxuLyoqXG4gKiBYSFIgc3VwcG9ydHMgYmluYXJ5XG4gKi9cblxuWEhSLnByb3RvdHlwZS5zdXBwb3J0c0JpbmFyeSA9IHRydWU7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHJlcXVlc3QuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuWEhSLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307XG4gIG9wdHMudXJpID0gdGhpcy51cmkoKTtcbiAgb3B0cy54ZCA9IHRoaXMueGQ7XG4gIG9wdHMueHMgPSB0aGlzLnhzO1xuICBvcHRzLmFnZW50ID0gdGhpcy5hZ2VudCB8fCBmYWxzZTtcbiAgb3B0cy5zdXBwb3J0c0JpbmFyeSA9IHRoaXMuc3VwcG9ydHNCaW5hcnk7XG4gIG9wdHMuZW5hYmxlc1hEUiA9IHRoaXMuZW5hYmxlc1hEUjtcbiAgb3B0cy53aXRoQ3JlZGVudGlhbHMgPSB0aGlzLndpdGhDcmVkZW50aWFscztcblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgb3B0cy5wZnggPSB0aGlzLnBmeDtcbiAgb3B0cy5rZXkgPSB0aGlzLmtleTtcbiAgb3B0cy5wYXNzcGhyYXNlID0gdGhpcy5wYXNzcGhyYXNlO1xuICBvcHRzLmNlcnQgPSB0aGlzLmNlcnQ7XG4gIG9wdHMuY2EgPSB0aGlzLmNhO1xuICBvcHRzLmNpcGhlcnMgPSB0aGlzLmNpcGhlcnM7XG4gIG9wdHMucmVqZWN0VW5hdXRob3JpemVkID0gdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gIG9wdHMucmVxdWVzdFRpbWVvdXQgPSB0aGlzLnJlcXVlc3RUaW1lb3V0O1xuXG4gIC8vIG90aGVyIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIG9wdHMuZXh0cmFIZWFkZXJzID0gdGhpcy5leHRyYUhlYWRlcnM7XG5cbiAgcmV0dXJuIG5ldyBSZXF1ZXN0KG9wdHMpO1xufTtcblxuLyoqXG4gKiBTZW5kcyBkYXRhLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhIHRvIHNlbmQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsZWQgdXBvbiBmbHVzaC5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblhIUi5wcm90b3R5cGUuZG9Xcml0ZSA9IGZ1bmN0aW9uIChkYXRhLCBmbikge1xuICB2YXIgaXNCaW5hcnkgPSB0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycgJiYgZGF0YSAhPT0gdW5kZWZpbmVkO1xuICB2YXIgcmVxID0gdGhpcy5yZXF1ZXN0KHsgbWV0aG9kOiAnUE9TVCcsIGRhdGE6IGRhdGEsIGlzQmluYXJ5OiBpc0JpbmFyeSB9KTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICByZXEub24oJ3N1Y2Nlc3MnLCBmbik7XG4gIHJlcS5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgc2VsZi5vbkVycm9yKCd4aHIgcG9zdCBlcnJvcicsIGVycik7XG4gIH0pO1xuICB0aGlzLnNlbmRYaHIgPSByZXE7XG59O1xuXG4vKipcbiAqIFN0YXJ0cyBhIHBvbGwgY3ljbGUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuWEhSLnByb3RvdHlwZS5kb1BvbGwgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCd4aHIgcG9sbCcpO1xuICB2YXIgcmVxID0gdGhpcy5yZXF1ZXN0KCk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgcmVxLm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBzZWxmLm9uRGF0YShkYXRhKTtcbiAgfSk7XG4gIHJlcS5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgc2VsZi5vbkVycm9yKCd4aHIgcG9sbCBlcnJvcicsIGVycik7XG4gIH0pO1xuICB0aGlzLnBvbGxYaHIgPSByZXE7XG59O1xuXG4vKipcbiAqIFJlcXVlc3QgY29uc3RydWN0b3JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBSZXF1ZXN0IChvcHRzKSB7XG4gIHRoaXMubWV0aG9kID0gb3B0cy5tZXRob2QgfHwgJ0dFVCc7XG4gIHRoaXMudXJpID0gb3B0cy51cmk7XG4gIHRoaXMueGQgPSAhIW9wdHMueGQ7XG4gIHRoaXMueHMgPSAhIW9wdHMueHM7XG4gIHRoaXMuYXN5bmMgPSBmYWxzZSAhPT0gb3B0cy5hc3luYztcbiAgdGhpcy5kYXRhID0gdW5kZWZpbmVkICE9PSBvcHRzLmRhdGEgPyBvcHRzLmRhdGEgOiBudWxsO1xuICB0aGlzLmFnZW50ID0gb3B0cy5hZ2VudDtcbiAgdGhpcy5pc0JpbmFyeSA9IG9wdHMuaXNCaW5hcnk7XG4gIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBvcHRzLnN1cHBvcnRzQmluYXJ5O1xuICB0aGlzLmVuYWJsZXNYRFIgPSBvcHRzLmVuYWJsZXNYRFI7XG4gIHRoaXMud2l0aENyZWRlbnRpYWxzID0gb3B0cy53aXRoQ3JlZGVudGlhbHM7XG4gIHRoaXMucmVxdWVzdFRpbWVvdXQgPSBvcHRzLnJlcXVlc3RUaW1lb3V0O1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLnBmeCA9IG9wdHMucGZ4O1xuICB0aGlzLmtleSA9IG9wdHMua2V5O1xuICB0aGlzLnBhc3NwaHJhc2UgPSBvcHRzLnBhc3NwaHJhc2U7XG4gIHRoaXMuY2VydCA9IG9wdHMuY2VydDtcbiAgdGhpcy5jYSA9IG9wdHMuY2E7XG4gIHRoaXMuY2lwaGVycyA9IG9wdHMuY2lwaGVycztcbiAgdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQgPSBvcHRzLnJlamVjdFVuYXV0aG9yaXplZDtcblxuICAvLyBvdGhlciBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuXG4gIHRoaXMuY3JlYXRlKCk7XG59XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKFJlcXVlc3QucHJvdG90eXBlKTtcblxuLyoqXG4gKiBDcmVhdGVzIHRoZSBYSFIgb2JqZWN0IGFuZCBzZW5kcyB0aGUgcmVxdWVzdC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBvcHRzID0geyBhZ2VudDogdGhpcy5hZ2VudCwgeGRvbWFpbjogdGhpcy54ZCwgeHNjaGVtZTogdGhpcy54cywgZW5hYmxlc1hEUjogdGhpcy5lbmFibGVzWERSIH07XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIG9wdHMucGZ4ID0gdGhpcy5wZng7XG4gIG9wdHMua2V5ID0gdGhpcy5rZXk7XG4gIG9wdHMucGFzc3BocmFzZSA9IHRoaXMucGFzc3BocmFzZTtcbiAgb3B0cy5jZXJ0ID0gdGhpcy5jZXJ0O1xuICBvcHRzLmNhID0gdGhpcy5jYTtcbiAgb3B0cy5jaXBoZXJzID0gdGhpcy5jaXBoZXJzO1xuICBvcHRzLnJlamVjdFVuYXV0aG9yaXplZCA9IHRoaXMucmVqZWN0VW5hdXRob3JpemVkO1xuXG4gIHZhciB4aHIgPSB0aGlzLnhociA9IG5ldyBYTUxIdHRwUmVxdWVzdChvcHRzKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRyeSB7XG4gICAgZGVidWcoJ3hociBvcGVuICVzOiAlcycsIHRoaXMubWV0aG9kLCB0aGlzLnVyaSk7XG4gICAgeGhyLm9wZW4odGhpcy5tZXRob2QsIHRoaXMudXJpLCB0aGlzLmFzeW5jKTtcbiAgICB0cnkge1xuICAgICAgaWYgKHRoaXMuZXh0cmFIZWFkZXJzKSB7XG4gICAgICAgIHhoci5zZXREaXNhYmxlSGVhZGVyQ2hlY2sgJiYgeGhyLnNldERpc2FibGVIZWFkZXJDaGVjayh0cnVlKTtcbiAgICAgICAgZm9yICh2YXIgaSBpbiB0aGlzLmV4dHJhSGVhZGVycykge1xuICAgICAgICAgIGlmICh0aGlzLmV4dHJhSGVhZGVycy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoaSwgdGhpcy5leHRyYUhlYWRlcnNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICBpZiAoJ1BPU1QnID09PSB0aGlzLm1ldGhvZCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHRoaXMuaXNCaW5hcnkpIHtcbiAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04Jyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCAnKi8qJyk7XG4gICAgfSBjYXRjaCAoZSkge31cblxuICAgIC8vIGllNiBjaGVja1xuICAgIGlmICgnd2l0aENyZWRlbnRpYWxzJyBpbiB4aHIpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0aGlzLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZXF1ZXN0VGltZW91dCkge1xuICAgICAgeGhyLnRpbWVvdXQgPSB0aGlzLnJlcXVlc3RUaW1lb3V0O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmhhc1hEUigpKSB7XG4gICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLm9uTG9hZCgpO1xuICAgICAgfTtcbiAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLm9uRXJyb3IoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDIpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGNvbnRlbnRUeXBlID0geGhyLmdldFJlc3BvbnNlSGVhZGVyKCdDb250ZW50LVR5cGUnKTtcbiAgICAgICAgICAgIGlmIChzZWxmLnN1cHBvcnRzQmluYXJ5ICYmIGNvbnRlbnRUeXBlID09PSAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyB8fCBjb250ZW50VHlwZSA9PT0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTsgY2hhcnNldD1VVEYtOCcpIHtcbiAgICAgICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdhcnJheWJ1ZmZlcic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgfVxuICAgICAgICBpZiAoNCAhPT0geGhyLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgICAgICAgaWYgKDIwMCA9PT0geGhyLnN0YXR1cyB8fCAxMjIzID09PSB4aHIuc3RhdHVzKSB7XG4gICAgICAgICAgc2VsZi5vbkxvYWQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBtYWtlIHN1cmUgdGhlIGBlcnJvcmAgZXZlbnQgaGFuZGxlciB0aGF0J3MgdXNlci1zZXRcbiAgICAgICAgICAvLyBkb2VzIG5vdCB0aHJvdyBpbiB0aGUgc2FtZSB0aWNrIGFuZCBnZXRzIGNhdWdodCBoZXJlXG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLm9uRXJyb3IodHlwZW9mIHhoci5zdGF0dXMgPT09ICdudW1iZXInID8geGhyLnN0YXR1cyA6IDApO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGRlYnVnKCd4aHIgZGF0YSAlcycsIHRoaXMuZGF0YSk7XG4gICAgeGhyLnNlbmQodGhpcy5kYXRhKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIE5lZWQgdG8gZGVmZXIgc2luY2UgLmNyZWF0ZSgpIGlzIGNhbGxlZCBkaXJlY3RseSBmaHJvbSB0aGUgY29uc3RydWN0b3JcbiAgICAvLyBhbmQgdGh1cyB0aGUgJ2Vycm9yJyBldmVudCBjYW4gb25seSBiZSBvbmx5IGJvdW5kICphZnRlciogdGhpcyBleGNlcHRpb25cbiAgICAvLyBvY2N1cnMuICBUaGVyZWZvcmUsIGFsc28sIHdlIGNhbm5vdCB0aHJvdyBoZXJlIGF0IGFsbC5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYub25FcnJvcihlKTtcbiAgICB9LCAwKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRoaXMuaW5kZXggPSBSZXF1ZXN0LnJlcXVlc3RzQ291bnQrKztcbiAgICBSZXF1ZXN0LnJlcXVlc3RzW3RoaXMuaW5kZXhdID0gdGhpcztcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzdWNjZXNzZnVsIHJlc3BvbnNlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uU3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0KCdzdWNjZXNzJyk7XG4gIHRoaXMuY2xlYW51cCgpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgaWYgd2UgaGF2ZSBkYXRhLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuZW1pdCgnZGF0YScsIGRhdGEpO1xuICB0aGlzLm9uU3VjY2VzcygpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBlcnJvci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgdGhpcy5jbGVhbnVwKHRydWUpO1xufTtcblxuLyoqXG4gKiBDbGVhbnMgdXAgaG91c2UuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuY2xlYW51cCA9IGZ1bmN0aW9uIChmcm9tRXJyb3IpIHtcbiAgaWYgKCd1bmRlZmluZWQnID09PSB0eXBlb2YgdGhpcy54aHIgfHwgbnVsbCA9PT0gdGhpcy54aHIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8geG1saHR0cHJlcXVlc3RcbiAgaWYgKHRoaXMuaGFzWERSKCkpIHtcbiAgICB0aGlzLnhoci5vbmxvYWQgPSB0aGlzLnhoci5vbmVycm9yID0gZW1wdHk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZW1wdHk7XG4gIH1cblxuICBpZiAoZnJvbUVycm9yKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMueGhyLmFib3J0KCk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZGVsZXRlIFJlcXVlc3QucmVxdWVzdHNbdGhpcy5pbmRleF07XG4gIH1cblxuICB0aGlzLnhociA9IG51bGw7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGxvYWQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUub25Mb2FkID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZGF0YTtcbiAgdHJ5IHtcbiAgICB2YXIgY29udGVudFR5cGU7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnRlbnRUeXBlID0gdGhpcy54aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ0NvbnRlbnQtVHlwZScpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgaWYgKGNvbnRlbnRUeXBlID09PSAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyB8fCBjb250ZW50VHlwZSA9PT0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTsgY2hhcnNldD1VVEYtOCcpIHtcbiAgICAgIGRhdGEgPSB0aGlzLnhoci5yZXNwb25zZSB8fCB0aGlzLnhoci5yZXNwb25zZVRleHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSB0aGlzLnhoci5yZXNwb25zZVRleHQ7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgdGhpcy5vbkVycm9yKGUpO1xuICB9XG4gIGlmIChudWxsICE9IGRhdGEpIHtcbiAgICB0aGlzLm9uRGF0YShkYXRhKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDaGVjayBpZiBpdCBoYXMgWERvbWFpblJlcXVlc3QuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuaGFzWERSID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHlwZW9mIFhEb21haW5SZXF1ZXN0ICE9PSAndW5kZWZpbmVkJyAmJiAhdGhpcy54cyAmJiB0aGlzLmVuYWJsZXNYRFI7XG59O1xuXG4vKipcbiAqIEFib3J0cyB0aGUgcmVxdWVzdC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmNsZWFudXAoKTtcbn07XG5cbi8qKlxuICogQWJvcnRzIHBlbmRpbmcgcmVxdWVzdHMgd2hlbiB1bmxvYWRpbmcgdGhlIHdpbmRvdy4gVGhpcyBpcyBuZWVkZWQgdG8gcHJldmVudFxuICogbWVtb3J5IGxlYWtzIChlLmcuIHdoZW4gdXNpbmcgSUUpIGFuZCB0byBlbnN1cmUgdGhhdCBubyBzcHVyaW91cyBlcnJvciBpc1xuICogZW1pdHRlZC5cbiAqL1xuXG5SZXF1ZXN0LnJlcXVlc3RzQ291bnQgPSAwO1xuUmVxdWVzdC5yZXF1ZXN0cyA9IHt9O1xuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICBpZiAodHlwZW9mIGF0dGFjaEV2ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgYXR0YWNoRXZlbnQoJ29udW5sb2FkJywgdW5sb2FkSGFuZGxlcik7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgdGVybWluYXRpb25FdmVudCA9ICdvbnBhZ2VoaWRlJyBpbiBzZWxmID8gJ3BhZ2VoaWRlJyA6ICd1bmxvYWQnO1xuICAgIGFkZEV2ZW50TGlzdGVuZXIodGVybWluYXRpb25FdmVudCwgdW5sb2FkSGFuZGxlciwgZmFsc2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVubG9hZEhhbmRsZXIgKCkge1xuICBmb3IgKHZhciBpIGluIFJlcXVlc3QucmVxdWVzdHMpIHtcbiAgICBpZiAoUmVxdWVzdC5yZXF1ZXN0cy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgUmVxdWVzdC5yZXF1ZXN0c1tpXS5hYm9ydCgpO1xuICAgIH1cbiAgfVxufVxuIiwiXG4vKipcbiAqIEdldHMgdGhlIGtleXMgZm9yIGFuIG9iamVjdC5cbiAqXG4gKiBAcmV0dXJuIHtBcnJheX0ga2V5c1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzIChvYmope1xuICB2YXIgYXJyID0gW107XG4gIHZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4gIGZvciAodmFyIGkgaW4gb2JqKSB7XG4gICAgaWYgKGhhcy5jYWxsKG9iaiwgaSkpIHtcbiAgICAgIGFyci5wdXNoKGkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLyoqXG4gKiBBbiBhYnN0cmFjdGlvbiBmb3Igc2xpY2luZyBhbiBhcnJheWJ1ZmZlciBldmVuIHdoZW5cbiAqIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZSBpcyBub3Qgc3VwcG9ydGVkXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGFycmF5YnVmZmVyLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGFycmF5YnVmZmVyLmJ5dGVMZW5ndGg7XG4gIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgZW5kID0gZW5kIHx8IGJ5dGVzO1xuXG4gIGlmIChhcnJheWJ1ZmZlci5zbGljZSkgeyByZXR1cm4gYXJyYXlidWZmZXIuc2xpY2Uoc3RhcnQsIGVuZCk7IH1cblxuICBpZiAoc3RhcnQgPCAwKSB7IHN0YXJ0ICs9IGJ5dGVzOyB9XG4gIGlmIChlbmQgPCAwKSB7IGVuZCArPSBieXRlczsgfVxuICBpZiAoZW5kID4gYnl0ZXMpIHsgZW5kID0gYnl0ZXM7IH1cblxuICBpZiAoc3RhcnQgPj0gYnl0ZXMgfHwgc3RhcnQgPj0gZW5kIHx8IGJ5dGVzID09PSAwKSB7XG4gICAgcmV0dXJuIG5ldyBBcnJheUJ1ZmZlcigwKTtcbiAgfVxuXG4gIHZhciBhYnYgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlcik7XG4gIHZhciByZXN1bHQgPSBuZXcgVWludDhBcnJheShlbmQgLSBzdGFydCk7XG4gIGZvciAodmFyIGkgPSBzdGFydCwgaWkgPSAwOyBpIDwgZW5kOyBpKyssIGlpKyspIHtcbiAgICByZXN1bHRbaWldID0gYWJ2W2ldO1xuICB9XG4gIHJldHVybiByZXN1bHQuYnVmZmVyO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gYWZ0ZXJcblxuZnVuY3Rpb24gYWZ0ZXIoY291bnQsIGNhbGxiYWNrLCBlcnJfY2IpIHtcbiAgICB2YXIgYmFpbCA9IGZhbHNlXG4gICAgZXJyX2NiID0gZXJyX2NiIHx8IG5vb3BcbiAgICBwcm94eS5jb3VudCA9IGNvdW50XG5cbiAgICByZXR1cm4gKGNvdW50ID09PSAwKSA/IGNhbGxiYWNrKCkgOiBwcm94eVxuXG4gICAgZnVuY3Rpb24gcHJveHkoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgaWYgKHByb3h5LmNvdW50IDw9IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYWZ0ZXIgY2FsbGVkIHRvbyBtYW55IHRpbWVzJylcbiAgICAgICAgfVxuICAgICAgICAtLXByb3h5LmNvdW50XG5cbiAgICAgICAgLy8gYWZ0ZXIgZmlyc3QgZXJyb3IsIHJlc3QgYXJlIHBhc3NlZCB0byBlcnJfY2JcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgYmFpbCA9IHRydWVcbiAgICAgICAgICAgIGNhbGxiYWNrKGVycilcbiAgICAgICAgICAgIC8vIGZ1dHVyZSBlcnJvciBjYWxsYmFja3Mgd2lsbCBnbyB0byBlcnJvciBoYW5kbGVyXG4gICAgICAgICAgICBjYWxsYmFjayA9IGVycl9jYlxuICAgICAgICB9IGVsc2UgaWYgKHByb3h5LmNvdW50ID09PSAwICYmICFiYWlsKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuIiwiLyohIGh0dHBzOi8vbXRocy5iZS91dGY4anMgdjIuMS4yIGJ5IEBtYXRoaWFzICovXG5cbnZhciBzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG4vLyBUYWtlbiBmcm9tIGh0dHBzOi8vbXRocy5iZS9wdW55Y29kZVxuZnVuY3Rpb24gdWNzMmRlY29kZShzdHJpbmcpIHtcblx0dmFyIG91dHB1dCA9IFtdO1xuXHR2YXIgY291bnRlciA9IDA7XG5cdHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuXHR2YXIgdmFsdWU7XG5cdHZhciBleHRyYTtcblx0d2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHR2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0aWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuXHRcdFx0Ly8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG5cdFx0XHRleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsgLy8gbG93IHN1cnJvZ2F0ZVxuXHRcdFx0XHRvdXRwdXQucHVzaCgoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlIG5leHRcblx0XHRcdFx0Ly8gY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdFx0Y291bnRlci0tO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBvdXRwdXQ7XG59XG5cbi8vIFRha2VuIGZyb20gaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlXG5mdW5jdGlvbiB1Y3MyZW5jb2RlKGFycmF5KSB7XG5cdHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cdHZhciBpbmRleCA9IC0xO1xuXHR2YXIgdmFsdWU7XG5cdHZhciBvdXRwdXQgPSAnJztcblx0d2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcblx0XHR2YWx1ZSA9IGFycmF5W2luZGV4XTtcblx0XHRpZiAodmFsdWUgPiAweEZGRkYpIHtcblx0XHRcdHZhbHVlIC09IDB4MTAwMDA7XG5cdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKTtcblx0XHRcdHZhbHVlID0gMHhEQzAwIHwgdmFsdWUgJiAweDNGRjtcblx0XHR9XG5cdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIG91dHB1dDtcbn1cblxuZnVuY3Rpb24gY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQsIHN0cmljdCkge1xuXHRpZiAoY29kZVBvaW50ID49IDB4RDgwMCAmJiBjb2RlUG9pbnQgPD0gMHhERkZGKSB7XG5cdFx0aWYgKHN0cmljdCkge1xuXHRcdFx0dGhyb3cgRXJyb3IoXG5cdFx0XHRcdCdMb25lIHN1cnJvZ2F0ZSBVKycgKyBjb2RlUG9pbnQudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkgK1xuXHRcdFx0XHQnIGlzIG5vdCBhIHNjYWxhciB2YWx1ZSdcblx0XHRcdCk7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRyZXR1cm4gdHJ1ZTtcbn1cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5mdW5jdGlvbiBjcmVhdGVCeXRlKGNvZGVQb2ludCwgc2hpZnQpIHtcblx0cmV0dXJuIHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiBzaGlmdCkgJiAweDNGKSB8IDB4ODApO1xufVxuXG5mdW5jdGlvbiBlbmNvZGVDb2RlUG9pbnQoY29kZVBvaW50LCBzdHJpY3QpIHtcblx0aWYgKChjb2RlUG9pbnQgJiAweEZGRkZGRjgwKSA9PSAwKSB7IC8vIDEtYnl0ZSBzZXF1ZW5jZVxuXHRcdHJldHVybiBzdHJpbmdGcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcblx0fVxuXHR2YXIgc3ltYm9sID0gJyc7XG5cdGlmICgoY29kZVBvaW50ICYgMHhGRkZGRjgwMCkgPT0gMCkgeyAvLyAyLWJ5dGUgc2VxdWVuY2Vcblx0XHRzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gNikgJiAweDFGKSB8IDB4QzApO1xuXHR9XG5cdGVsc2UgaWYgKChjb2RlUG9pbnQgJiAweEZGRkYwMDAwKSA9PSAwKSB7IC8vIDMtYnl0ZSBzZXF1ZW5jZVxuXHRcdGlmICghY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQsIHN0cmljdCkpIHtcblx0XHRcdGNvZGVQb2ludCA9IDB4RkZGRDtcblx0XHR9XG5cdFx0c3ltYm9sID0gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IDEyKSAmIDB4MEYpIHwgMHhFMCk7XG5cdFx0c3ltYm9sICs9IGNyZWF0ZUJ5dGUoY29kZVBvaW50LCA2KTtcblx0fVxuXHRlbHNlIGlmICgoY29kZVBvaW50ICYgMHhGRkUwMDAwMCkgPT0gMCkgeyAvLyA0LWJ5dGUgc2VxdWVuY2Vcblx0XHRzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gMTgpICYgMHgwNykgfCAweEYwKTtcblx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDEyKTtcblx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDYpO1xuXHR9XG5cdHN5bWJvbCArPSBzdHJpbmdGcm9tQ2hhckNvZGUoKGNvZGVQb2ludCAmIDB4M0YpIHwgMHg4MCk7XG5cdHJldHVybiBzeW1ib2w7XG59XG5cbmZ1bmN0aW9uIHV0ZjhlbmNvZGUoc3RyaW5nLCBvcHRzKSB7XG5cdG9wdHMgPSBvcHRzIHx8IHt9O1xuXHR2YXIgc3RyaWN0ID0gZmFsc2UgIT09IG9wdHMuc3RyaWN0O1xuXG5cdHZhciBjb2RlUG9pbnRzID0gdWNzMmRlY29kZShzdHJpbmcpO1xuXHR2YXIgbGVuZ3RoID0gY29kZVBvaW50cy5sZW5ndGg7XG5cdHZhciBpbmRleCA9IC0xO1xuXHR2YXIgY29kZVBvaW50O1xuXHR2YXIgYnl0ZVN0cmluZyA9ICcnO1xuXHR3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuXHRcdGNvZGVQb2ludCA9IGNvZGVQb2ludHNbaW5kZXhdO1xuXHRcdGJ5dGVTdHJpbmcgKz0gZW5jb2RlQ29kZVBvaW50KGNvZGVQb2ludCwgc3RyaWN0KTtcblx0fVxuXHRyZXR1cm4gYnl0ZVN0cmluZztcbn1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbmZ1bmN0aW9uIHJlYWRDb250aW51YXRpb25CeXRlKCkge1xuXHRpZiAoYnl0ZUluZGV4ID49IGJ5dGVDb3VudCkge1xuXHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGJ5dGUgaW5kZXgnKTtcblx0fVxuXG5cdHZhciBjb250aW51YXRpb25CeXRlID0gYnl0ZUFycmF5W2J5dGVJbmRleF0gJiAweEZGO1xuXHRieXRlSW5kZXgrKztcblxuXHRpZiAoKGNvbnRpbnVhdGlvbkJ5dGUgJiAweEMwKSA9PSAweDgwKSB7XG5cdFx0cmV0dXJuIGNvbnRpbnVhdGlvbkJ5dGUgJiAweDNGO1xuXHR9XG5cblx0Ly8gSWYgd2UgZW5kIHVwIGhlcmUsIGl04oCZcyBub3QgYSBjb250aW51YXRpb24gYnl0ZVxuXHR0aHJvdyBFcnJvcignSW52YWxpZCBjb250aW51YXRpb24gYnl0ZScpO1xufVxuXG5mdW5jdGlvbiBkZWNvZGVTeW1ib2woc3RyaWN0KSB7XG5cdHZhciBieXRlMTtcblx0dmFyIGJ5dGUyO1xuXHR2YXIgYnl0ZTM7XG5cdHZhciBieXRlNDtcblx0dmFyIGNvZGVQb2ludDtcblxuXHRpZiAoYnl0ZUluZGV4ID4gYnl0ZUNvdW50KSB7XG5cdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgYnl0ZSBpbmRleCcpO1xuXHR9XG5cblx0aWYgKGJ5dGVJbmRleCA9PSBieXRlQ291bnQpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBSZWFkIGZpcnN0IGJ5dGVcblx0Ynl0ZTEgPSBieXRlQXJyYXlbYnl0ZUluZGV4XSAmIDB4RkY7XG5cdGJ5dGVJbmRleCsrO1xuXG5cdC8vIDEtYnl0ZSBzZXF1ZW5jZSAobm8gY29udGludWF0aW9uIGJ5dGVzKVxuXHRpZiAoKGJ5dGUxICYgMHg4MCkgPT0gMCkge1xuXHRcdHJldHVybiBieXRlMTtcblx0fVxuXG5cdC8vIDItYnl0ZSBzZXF1ZW5jZVxuXHRpZiAoKGJ5dGUxICYgMHhFMCkgPT0gMHhDMCkge1xuXHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgxRikgPDwgNikgfCBieXRlMjtcblx0XHRpZiAoY29kZVBvaW50ID49IDB4ODApIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlJyk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gMy1ieXRlIHNlcXVlbmNlIChtYXkgaW5jbHVkZSB1bnBhaXJlZCBzdXJyb2dhdGVzKVxuXHRpZiAoKGJ5dGUxICYgMHhGMCkgPT0gMHhFMCkge1xuXHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRieXRlMyA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0Y29kZVBvaW50ID0gKChieXRlMSAmIDB4MEYpIDw8IDEyKSB8IChieXRlMiA8PCA2KSB8IGJ5dGUzO1xuXHRcdGlmIChjb2RlUG9pbnQgPj0gMHgwODAwKSB7XG5cdFx0XHRyZXR1cm4gY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQsIHN0cmljdCkgPyBjb2RlUG9pbnQgOiAweEZGRkQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlJyk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gNC1ieXRlIHNlcXVlbmNlXG5cdGlmICgoYnl0ZTEgJiAweEY4KSA9PSAweEYwKSB7XG5cdFx0Ynl0ZTIgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdGJ5dGUzID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRieXRlNCA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0Y29kZVBvaW50ID0gKChieXRlMSAmIDB4MDcpIDw8IDB4MTIpIHwgKGJ5dGUyIDw8IDB4MEMpIHxcblx0XHRcdChieXRlMyA8PCAweDA2KSB8IGJ5dGU0O1xuXHRcdGlmIChjb2RlUG9pbnQgPj0gMHgwMTAwMDAgJiYgY29kZVBvaW50IDw9IDB4MTBGRkZGKSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50O1xuXHRcdH1cblx0fVxuXG5cdHRocm93IEVycm9yKCdJbnZhbGlkIFVURi04IGRldGVjdGVkJyk7XG59XG5cbnZhciBieXRlQXJyYXk7XG52YXIgYnl0ZUNvdW50O1xudmFyIGJ5dGVJbmRleDtcbmZ1bmN0aW9uIHV0ZjhkZWNvZGUoYnl0ZVN0cmluZywgb3B0cykge1xuXHRvcHRzID0gb3B0cyB8fCB7fTtcblx0dmFyIHN0cmljdCA9IGZhbHNlICE9PSBvcHRzLnN0cmljdDtcblxuXHRieXRlQXJyYXkgPSB1Y3MyZGVjb2RlKGJ5dGVTdHJpbmcpO1xuXHRieXRlQ291bnQgPSBieXRlQXJyYXkubGVuZ3RoO1xuXHRieXRlSW5kZXggPSAwO1xuXHR2YXIgY29kZVBvaW50cyA9IFtdO1xuXHR2YXIgdG1wO1xuXHR3aGlsZSAoKHRtcCA9IGRlY29kZVN5bWJvbChzdHJpY3QpKSAhPT0gZmFsc2UpIHtcblx0XHRjb2RlUG9pbnRzLnB1c2godG1wKTtcblx0fVxuXHRyZXR1cm4gdWNzMmVuY29kZShjb2RlUG9pbnRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdHZlcnNpb246ICcyLjEuMicsXG5cdGVuY29kZTogdXRmOGVuY29kZSxcblx0ZGVjb2RlOiB1dGY4ZGVjb2RlXG59O1xuIiwiLypcbiAqIGJhc2U2NC1hcnJheWJ1ZmZlclxuICogaHR0cHM6Ly9naXRodWIuY29tL25pa2xhc3ZoL2Jhc2U2NC1hcnJheWJ1ZmZlclxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMiBOaWtsYXMgdm9uIEhlcnR6ZW5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqL1xuKGZ1bmN0aW9uKCl7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBjaGFycyA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO1xuXG4gIC8vIFVzZSBhIGxvb2t1cCB0YWJsZSB0byBmaW5kIHRoZSBpbmRleC5cbiAgdmFyIGxvb2t1cCA9IG5ldyBVaW50OEFycmF5KDI1Nik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICBsb29rdXBbY2hhcnMuY2hhckNvZGVBdChpKV0gPSBpO1xuICB9XG5cbiAgZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbihhcnJheWJ1ZmZlcikge1xuICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKSxcbiAgICBpLCBsZW4gPSBieXRlcy5sZW5ndGgsIGJhc2U2NCA9IFwiXCI7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKz0zKSB7XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbYnl0ZXNbaV0gPj4gMl07XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpXSAmIDMpIDw8IDQpIHwgKGJ5dGVzW2kgKyAxXSA+PiA0KV07XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpICsgMV0gJiAxNSkgPDwgMikgfCAoYnl0ZXNbaSArIDJdID4+IDYpXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1tieXRlc1tpICsgMl0gJiA2M107XG4gICAgfVxuXG4gICAgaWYgKChsZW4gJSAzKSA9PT0gMikge1xuICAgICAgYmFzZTY0ID0gYmFzZTY0LnN1YnN0cmluZygwLCBiYXNlNjQubGVuZ3RoIC0gMSkgKyBcIj1cIjtcbiAgICB9IGVsc2UgaWYgKGxlbiAlIDMgPT09IDEpIHtcbiAgICAgIGJhc2U2NCA9IGJhc2U2NC5zdWJzdHJpbmcoMCwgYmFzZTY0Lmxlbmd0aCAtIDIpICsgXCI9PVwiO1xuICAgIH1cblxuICAgIHJldHVybiBiYXNlNjQ7XG4gIH07XG5cbiAgZXhwb3J0cy5kZWNvZGUgPSAgZnVuY3Rpb24oYmFzZTY0KSB7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJhc2U2NC5sZW5ndGggKiAwLjc1LFxuICAgIGxlbiA9IGJhc2U2NC5sZW5ndGgsIGksIHAgPSAwLFxuICAgIGVuY29kZWQxLCBlbmNvZGVkMiwgZW5jb2RlZDMsIGVuY29kZWQ0O1xuXG4gICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMV0gPT09IFwiPVwiKSB7XG4gICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgIGlmIChiYXNlNjRbYmFzZTY0Lmxlbmd0aCAtIDJdID09PSBcIj1cIikge1xuICAgICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYXJyYXlidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoYnVmZmVyTGVuZ3RoKSxcbiAgICBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrPTQpIHtcbiAgICAgIGVuY29kZWQxID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkpXTtcbiAgICAgIGVuY29kZWQyID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkrMSldO1xuICAgICAgZW5jb2RlZDMgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSsyKV07XG4gICAgICBlbmNvZGVkNCA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpKzMpXTtcblxuICAgICAgYnl0ZXNbcCsrXSA9IChlbmNvZGVkMSA8PCAyKSB8IChlbmNvZGVkMiA+PiA0KTtcbiAgICAgIGJ5dGVzW3ArK10gPSAoKGVuY29kZWQyICYgMTUpIDw8IDQpIHwgKGVuY29kZWQzID4+IDIpO1xuICAgICAgYnl0ZXNbcCsrXSA9ICgoZW5jb2RlZDMgJiAzKSA8PCA2KSB8IChlbmNvZGVkNCAmIDYzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXlidWZmZXI7XG4gIH07XG59KSgpO1xuIiwiLyoqXHJcbiAqIENyZWF0ZSBhIGJsb2IgYnVpbGRlciBldmVuIHdoZW4gdmVuZG9yIHByZWZpeGVzIGV4aXN0XHJcbiAqL1xyXG5cclxudmFyIEJsb2JCdWlsZGVyID0gdHlwZW9mIEJsb2JCdWlsZGVyICE9PSAndW5kZWZpbmVkJyA/IEJsb2JCdWlsZGVyIDpcclxuICB0eXBlb2YgV2ViS2l0QmxvYkJ1aWxkZXIgIT09ICd1bmRlZmluZWQnID8gV2ViS2l0QmxvYkJ1aWxkZXIgOlxyXG4gIHR5cGVvZiBNU0Jsb2JCdWlsZGVyICE9PSAndW5kZWZpbmVkJyA/IE1TQmxvYkJ1aWxkZXIgOlxyXG4gIHR5cGVvZiBNb3pCbG9iQnVpbGRlciAhPT0gJ3VuZGVmaW5lZCcgPyBNb3pCbG9iQnVpbGRlciA6IFxyXG4gIGZhbHNlO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIEJsb2IgY29uc3RydWN0b3IgaXMgc3VwcG9ydGVkXHJcbiAqL1xyXG5cclxudmFyIGJsb2JTdXBwb3J0ZWQgPSAoZnVuY3Rpb24oKSB7XHJcbiAgdHJ5IHtcclxuICAgIHZhciBhID0gbmV3IEJsb2IoWydoaSddKTtcclxuICAgIHJldHVybiBhLnNpemUgPT09IDI7XHJcbiAgfSBjYXRjaChlKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59KSgpO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIEJsb2IgY29uc3RydWN0b3Igc3VwcG9ydHMgQXJyYXlCdWZmZXJWaWV3c1xyXG4gKiBGYWlscyBpbiBTYWZhcmkgNiwgc28gd2UgbmVlZCB0byBtYXAgdG8gQXJyYXlCdWZmZXJzIHRoZXJlLlxyXG4gKi9cclxuXHJcbnZhciBibG9iU3VwcG9ydHNBcnJheUJ1ZmZlclZpZXcgPSBibG9iU3VwcG9ydGVkICYmIChmdW5jdGlvbigpIHtcclxuICB0cnkge1xyXG4gICAgdmFyIGIgPSBuZXcgQmxvYihbbmV3IFVpbnQ4QXJyYXkoWzEsMl0pXSk7XHJcbiAgICByZXR1cm4gYi5zaXplID09PSAyO1xyXG4gIH0gY2F0Y2goZSkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxufSkoKTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiBCbG9iQnVpbGRlciBpcyBzdXBwb3J0ZWRcclxuICovXHJcblxyXG52YXIgYmxvYkJ1aWxkZXJTdXBwb3J0ZWQgPSBCbG9iQnVpbGRlclxyXG4gICYmIEJsb2JCdWlsZGVyLnByb3RvdHlwZS5hcHBlbmRcclxuICAmJiBCbG9iQnVpbGRlci5wcm90b3R5cGUuZ2V0QmxvYjtcclxuXHJcbi8qKlxyXG4gKiBIZWxwZXIgZnVuY3Rpb24gdGhhdCBtYXBzIEFycmF5QnVmZmVyVmlld3MgdG8gQXJyYXlCdWZmZXJzXHJcbiAqIFVzZWQgYnkgQmxvYkJ1aWxkZXIgY29uc3RydWN0b3IgYW5kIG9sZCBicm93c2VycyB0aGF0IGRpZG4ndFxyXG4gKiBzdXBwb3J0IGl0IGluIHRoZSBCbG9iIGNvbnN0cnVjdG9yLlxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KSB7XHJcbiAgcmV0dXJuIGFyeS5tYXAoZnVuY3Rpb24oY2h1bmspIHtcclxuICAgIGlmIChjaHVuay5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xyXG4gICAgICB2YXIgYnVmID0gY2h1bmsuYnVmZmVyO1xyXG5cclxuICAgICAgLy8gaWYgdGhpcyBpcyBhIHN1YmFycmF5LCBtYWtlIGEgY29weSBzbyB3ZSBvbmx5XHJcbiAgICAgIC8vIGluY2x1ZGUgdGhlIHN1YmFycmF5IHJlZ2lvbiBmcm9tIHRoZSB1bmRlcmx5aW5nIGJ1ZmZlclxyXG4gICAgICBpZiAoY2h1bmsuYnl0ZUxlbmd0aCAhPT0gYnVmLmJ5dGVMZW5ndGgpIHtcclxuICAgICAgICB2YXIgY29weSA9IG5ldyBVaW50OEFycmF5KGNodW5rLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgIGNvcHkuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZiwgY2h1bmsuYnl0ZU9mZnNldCwgY2h1bmsuYnl0ZUxlbmd0aCkpO1xyXG4gICAgICAgIGJ1ZiA9IGNvcHkuYnVmZmVyO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gYnVmO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjaHVuaztcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvcihhcnksIG9wdGlvbnMpIHtcclxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHJcbiAgdmFyIGJiID0gbmV3IEJsb2JCdWlsZGVyKCk7XHJcbiAgbWFwQXJyYXlCdWZmZXJWaWV3cyhhcnkpLmZvckVhY2goZnVuY3Rpb24ocGFydCkge1xyXG4gICAgYmIuYXBwZW5kKHBhcnQpO1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gKG9wdGlvbnMudHlwZSkgPyBiYi5nZXRCbG9iKG9wdGlvbnMudHlwZSkgOiBiYi5nZXRCbG9iKCk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBCbG9iQ29uc3RydWN0b3IoYXJ5LCBvcHRpb25zKSB7XHJcbiAgcmV0dXJuIG5ldyBCbG9iKG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KSwgb3B0aW9ucyB8fCB7fSk7XHJcbn07XHJcblxyXG5pZiAodHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgQmxvYkJ1aWxkZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBCbG9iLnByb3RvdHlwZTtcclxuICBCbG9iQ29uc3RydWN0b3IucHJvdG90eXBlID0gQmxvYi5wcm90b3R5cGU7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkge1xyXG4gIGlmIChibG9iU3VwcG9ydGVkKSB7XHJcbiAgICByZXR1cm4gYmxvYlN1cHBvcnRzQXJyYXlCdWZmZXJWaWV3ID8gQmxvYiA6IEJsb2JDb25zdHJ1Y3RvcjtcclxuICB9IGVsc2UgaWYgKGJsb2JCdWlsZGVyU3VwcG9ydGVkKSB7XHJcbiAgICByZXR1cm4gQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvcjtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICB9XHJcbn0pKCk7XHJcbiIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICovXG5cbmZ1bmN0aW9uIHNldHVwKGVudikge1xuXHRjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnO1xuXHRjcmVhdGVEZWJ1Zy5kZWZhdWx0ID0gY3JlYXRlRGVidWc7XG5cdGNyZWF0ZURlYnVnLmNvZXJjZSA9IGNvZXJjZTtcblx0Y3JlYXRlRGVidWcuZGlzYWJsZSA9IGRpc2FibGU7XG5cdGNyZWF0ZURlYnVnLmVuYWJsZSA9IGVuYWJsZTtcblx0Y3JlYXRlRGVidWcuZW5hYmxlZCA9IGVuYWJsZWQ7XG5cdGNyZWF0ZURlYnVnLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblxuXHRPYmplY3Qua2V5cyhlbnYpLmZvckVhY2goa2V5ID0+IHtcblx0XHRjcmVhdGVEZWJ1Z1trZXldID0gZW52W2tleV07XG5cdH0pO1xuXG5cdC8qKlxuXHQqIEFjdGl2ZSBgZGVidWdgIGluc3RhbmNlcy5cblx0Ki9cblx0Y3JlYXRlRGVidWcuaW5zdGFuY2VzID0gW107XG5cblx0LyoqXG5cdCogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG5cdCovXG5cblx0Y3JlYXRlRGVidWcubmFtZXMgPSBbXTtcblx0Y3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcblxuXHQvKipcblx0KiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG5cdCpcblx0KiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG5cdCovXG5cdGNyZWF0ZURlYnVnLmZvcm1hdHRlcnMgPSB7fTtcblxuXHQvKipcblx0KiBTZWxlY3RzIGEgY29sb3IgZm9yIGEgZGVidWcgbmFtZXNwYWNlXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSBUaGUgbmFtZXNwYWNlIHN0cmluZyBmb3IgdGhlIGZvciB0aGUgZGVidWcgaW5zdGFuY2UgdG8gYmUgY29sb3JlZFxuXHQqIEByZXR1cm4ge051bWJlcnxTdHJpbmd9IEFuIEFOU0kgY29sb3IgY29kZSBmb3IgdGhlIGdpdmVuIG5hbWVzcGFjZVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcblx0XHRsZXQgaGFzaCA9IDA7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzcGFjZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0aGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG5cdFx0XHRoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuXHRcdH1cblxuXHRcdHJldHVybiBjcmVhdGVEZWJ1Zy5jb2xvcnNbTWF0aC5hYnMoaGFzaCkgJSBjcmVhdGVEZWJ1Zy5jb2xvcnMubGVuZ3RoXTtcblx0fVxuXHRjcmVhdGVEZWJ1Zy5zZWxlY3RDb2xvciA9IHNlbGVjdENvbG9yO1xuXG5cdC8qKlxuXHQqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuXHQqIEByZXR1cm4ge0Z1bmN0aW9ufVxuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuXHRcdGxldCBwcmV2VGltZTtcblxuXHRcdGZ1bmN0aW9uIGRlYnVnKC4uLmFyZ3MpIHtcblx0XHRcdC8vIERpc2FibGVkP1xuXHRcdFx0aWYgKCFkZWJ1Zy5lbmFibGVkKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3Qgc2VsZiA9IGRlYnVnO1xuXG5cdFx0XHQvLyBTZXQgYGRpZmZgIHRpbWVzdGFtcFxuXHRcdFx0Y29uc3QgY3VyciA9IE51bWJlcihuZXcgRGF0ZSgpKTtcblx0XHRcdGNvbnN0IG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcblx0XHRcdHNlbGYuZGlmZiA9IG1zO1xuXHRcdFx0c2VsZi5wcmV2ID0gcHJldlRpbWU7XG5cdFx0XHRzZWxmLmN1cnIgPSBjdXJyO1xuXHRcdFx0cHJldlRpbWUgPSBjdXJyO1xuXG5cdFx0XHRhcmdzWzBdID0gY3JlYXRlRGVidWcuY29lcmNlKGFyZ3NbMF0pO1xuXG5cdFx0XHRpZiAodHlwZW9mIGFyZ3NbMF0gIT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdC8vIEFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVPXG5cdFx0XHRcdGFyZ3MudW5zaGlmdCgnJU8nKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXBwbHkgYW55IGBmb3JtYXR0ZXJzYCB0cmFuc2Zvcm1hdGlvbnNcblx0XHRcdGxldCBpbmRleCA9IDA7XG5cdFx0XHRhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgKG1hdGNoLCBmb3JtYXQpID0+IHtcblx0XHRcdFx0Ly8gSWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuXHRcdFx0XHRpZiAobWF0Y2ggPT09ICclJScpIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0XHRcdH1cblx0XHRcdFx0aW5kZXgrKztcblx0XHRcdFx0Y29uc3QgZm9ybWF0dGVyID0gY3JlYXRlRGVidWcuZm9ybWF0dGVyc1tmb3JtYXRdO1xuXHRcdFx0XHRpZiAodHlwZW9mIGZvcm1hdHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdGNvbnN0IHZhbCA9IGFyZ3NbaW5kZXhdO1xuXHRcdFx0XHRcdG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTtcblxuXHRcdFx0XHRcdC8vIE5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcblx0XHRcdFx0XHRhcmdzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdFx0aW5kZXgtLTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gQXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcblx0XHRcdGNyZWF0ZURlYnVnLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcblxuXHRcdFx0Y29uc3QgbG9nRm4gPSBzZWxmLmxvZyB8fCBjcmVhdGVEZWJ1Zy5sb2c7XG5cdFx0XHRsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcblx0XHR9XG5cblx0XHRkZWJ1Zy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG5cdFx0ZGVidWcuZW5hYmxlZCA9IGNyZWF0ZURlYnVnLmVuYWJsZWQobmFtZXNwYWNlKTtcblx0XHRkZWJ1Zy51c2VDb2xvcnMgPSBjcmVhdGVEZWJ1Zy51c2VDb2xvcnMoKTtcblx0XHRkZWJ1Zy5jb2xvciA9IHNlbGVjdENvbG9yKG5hbWVzcGFjZSk7XG5cdFx0ZGVidWcuZGVzdHJveSA9IGRlc3Ryb3k7XG5cdFx0ZGVidWcuZXh0ZW5kID0gZXh0ZW5kO1xuXHRcdC8vIERlYnVnLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuXHRcdC8vIGRlYnVnLnJhd0xvZyA9IHJhd0xvZztcblxuXHRcdC8vIGVudi1zcGVjaWZpYyBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgZGVidWcgaW5zdGFuY2VzXG5cdFx0aWYgKHR5cGVvZiBjcmVhdGVEZWJ1Zy5pbml0ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRjcmVhdGVEZWJ1Zy5pbml0KGRlYnVnKTtcblx0XHR9XG5cblx0XHRjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMucHVzaChkZWJ1Zyk7XG5cblx0XHRyZXR1cm4gZGVidWc7XG5cdH1cblxuXHRmdW5jdGlvbiBkZXN0cm95KCkge1xuXHRcdGNvbnN0IGluZGV4ID0gY3JlYXRlRGVidWcuaW5zdGFuY2VzLmluZGV4T2YodGhpcyk7XG5cdFx0aWYgKGluZGV4ICE9PSAtMSkge1xuXHRcdFx0Y3JlYXRlRGVidWcuaW5zdGFuY2VzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0ZnVuY3Rpb24gZXh0ZW5kKG5hbWVzcGFjZSwgZGVsaW1pdGVyKSB7XG5cdFx0Y29uc3QgbmV3RGVidWcgPSBjcmVhdGVEZWJ1Zyh0aGlzLm5hbWVzcGFjZSArICh0eXBlb2YgZGVsaW1pdGVyID09PSAndW5kZWZpbmVkJyA/ICc6JyA6IGRlbGltaXRlcikgKyBuYW1lc3BhY2UpO1xuXHRcdG5ld0RlYnVnLmxvZyA9IHRoaXMubG9nO1xuXHRcdHJldHVybiBuZXdEZWJ1Zztcblx0fVxuXG5cdC8qKlxuXHQqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcblx0KiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuXHRcdGNyZWF0ZURlYnVnLnNhdmUobmFtZXNwYWNlcyk7XG5cblx0XHRjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuXHRcdGNyZWF0ZURlYnVnLnNraXBzID0gW107XG5cblx0XHRsZXQgaTtcblx0XHRjb25zdCBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG5cdFx0Y29uc3QgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoIXNwbGl0W2ldKSB7XG5cdFx0XHRcdC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcblxuXHRcdFx0aWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuXHRcdFx0XHRjcmVhdGVEZWJ1Zy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNyZWF0ZURlYnVnLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMDsgaSA8IGNyZWF0ZURlYnVnLmluc3RhbmNlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgaW5zdGFuY2UgPSBjcmVhdGVEZWJ1Zy5pbnN0YW5jZXNbaV07XG5cdFx0XHRpbnN0YW5jZS5lbmFibGVkID0gY3JlYXRlRGVidWcuZW5hYmxlZChpbnN0YW5jZS5uYW1lc3BhY2UpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuXHQqXG5cdCogQHJldHVybiB7U3RyaW5nfSBuYW1lc3BhY2VzXG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZGlzYWJsZSgpIHtcblx0XHRjb25zdCBuYW1lc3BhY2VzID0gW1xuXHRcdFx0Li4uY3JlYXRlRGVidWcubmFtZXMubWFwKHRvTmFtZXNwYWNlKSxcblx0XHRcdC4uLmNyZWF0ZURlYnVnLnNraXBzLm1hcCh0b05hbWVzcGFjZSkubWFwKG5hbWVzcGFjZSA9PiAnLScgKyBuYW1lc3BhY2UpXG5cdFx0XS5qb2luKCcsJyk7XG5cdFx0Y3JlYXRlRGVidWcuZW5hYmxlKCcnKTtcblx0XHRyZXR1cm4gbmFtZXNwYWNlcztcblx0fVxuXG5cdC8qKlxuXHQqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG5cdCogQHJldHVybiB7Qm9vbGVhbn1cblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcblx0XHRpZiAobmFtZVtuYW1lLmxlbmd0aCAtIDFdID09PSAnKicpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGxldCBpO1xuXHRcdGxldCBsZW47XG5cblx0XHRmb3IgKGkgPSAwLCBsZW4gPSBjcmVhdGVEZWJ1Zy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKGNyZWF0ZURlYnVnLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGNyZWF0ZURlYnVnLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoY3JlYXRlRGVidWcubmFtZXNbaV0udGVzdChuYW1lKSkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvKipcblx0KiBDb252ZXJ0IHJlZ2V4cCB0byBuYW1lc3BhY2Vcblx0KlxuXHQqIEBwYXJhbSB7UmVnRXhwfSByZWd4ZXBcblx0KiBAcmV0dXJuIHtTdHJpbmd9IG5hbWVzcGFjZVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiB0b05hbWVzcGFjZShyZWdleHApIHtcblx0XHRyZXR1cm4gcmVnZXhwLnRvU3RyaW5nKClcblx0XHRcdC5zdWJzdHJpbmcoMiwgcmVnZXhwLnRvU3RyaW5nKCkubGVuZ3RoIC0gMilcblx0XHRcdC5yZXBsYWNlKC9cXC5cXCpcXD8kLywgJyonKTtcblx0fVxuXG5cdC8qKlxuXHQqIENvZXJjZSBgdmFsYC5cblx0KlxuXHQqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuXHQqIEByZXR1cm4ge01peGVkfVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiBjb2VyY2UodmFsKSB7XG5cdFx0aWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSB7XG5cdFx0XHRyZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG5cblx0Y3JlYXRlRGVidWcuZW5hYmxlKGNyZWF0ZURlYnVnLmxvYWQoKSk7XG5cblx0cmV0dXJuIGNyZWF0ZURlYnVnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldHVwO1xuIiwiLyoqXG4gKiBIZWxwZXJzLlxuICovXG5cbnZhciBzID0gMTAwMDtcbnZhciBtID0gcyAqIDYwO1xudmFyIGggPSBtICogNjA7XG52YXIgZCA9IGggKiAyNDtcbnZhciB3ID0gZCAqIDc7XG52YXIgeSA9IGQgKiAzNjUuMjU7XG5cbi8qKlxuICogUGFyc2Ugb3IgZm9ybWF0IHRoZSBnaXZlbiBgdmFsYC5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICAtIGBsb25nYCB2ZXJib3NlIGZvcm1hdHRpbmcgW2ZhbHNlXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdmFsXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzRmluaXRlKHZhbCkpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5sb25nID8gZm10TG9uZyh2YWwpIDogZm10U2hvcnQodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICk7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtYXRjaCA9IC9eKC0/KD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx3ZWVrcz98d3x5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnd2Vla3MnOlxuICAgIGNhc2UgJ3dlZWsnOlxuICAgIGNhc2UgJ3cnOlxuICAgICAgcmV0dXJuIG4gKiB3O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBkLCAnZGF5Jyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgaCwgJ2hvdXInKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBtLCAnbWludXRlJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgcywgJ3NlY29uZCcpO1xuICB9XG4gIHJldHVybiBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbXNBYnMsIG4sIG5hbWUpIHtcbiAgdmFyIGlzUGx1cmFsID0gbXNBYnMgPj0gbiAqIDEuNTtcbiAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBuKSArICcgJyArIG5hbWUgKyAoaXNQbHVyYWwgPyAncycgOiAnJyk7XG59XG4iLCIvKipcbiAqIE1vZHVsZSByZXF1aXJlbWVudHMuXG4gKi9cblxudmFyIFBvbGxpbmcgPSByZXF1aXJlKCcuL3BvbGxpbmcnKTtcbnZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29tcG9uZW50LWluaGVyaXQnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEpTT05QUG9sbGluZztcblxuLyoqXG4gKiBDYWNoZWQgcmVndWxhciBleHByZXNzaW9ucy5cbiAqL1xuXG52YXIgck5ld2xpbmUgPSAvXFxuL2c7XG52YXIgckVzY2FwZWROZXdsaW5lID0gL1xcXFxuL2c7XG5cbi8qKlxuICogR2xvYmFsIEpTT05QIGNhbGxiYWNrcy5cbiAqL1xuXG52YXIgY2FsbGJhY2tzO1xuXG4vKipcbiAqIE5vb3AuXG4gKi9cblxuZnVuY3Rpb24gZW1wdHkgKCkgeyB9XG5cbi8qKlxuICogVW50aWwgaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsIGlzIHNoaXBwZWQuXG4gKi9cbmZ1bmN0aW9uIGdsb2IgKCkge1xuICByZXR1cm4gdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZlxuICAgICAgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvd1xuICAgICAgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHt9O1xufVxuXG4vKipcbiAqIEpTT05QIFBvbGxpbmcgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEpTT05QUG9sbGluZyAob3B0cykge1xuICBQb2xsaW5nLmNhbGwodGhpcywgb3B0cyk7XG5cbiAgdGhpcy5xdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG5cbiAgLy8gZGVmaW5lIGdsb2JhbCBjYWxsYmFja3MgYXJyYXkgaWYgbm90IHByZXNlbnRcbiAgLy8gd2UgZG8gdGhpcyBoZXJlIChsYXppbHkpIHRvIGF2b2lkIHVubmVlZGVkIGdsb2JhbCBwb2xsdXRpb25cbiAgaWYgKCFjYWxsYmFja3MpIHtcbiAgICAvLyB3ZSBuZWVkIHRvIGNvbnNpZGVyIG11bHRpcGxlIGVuZ2luZXMgaW4gdGhlIHNhbWUgcGFnZVxuICAgIHZhciBnbG9iYWwgPSBnbG9iKCk7XG4gICAgY2FsbGJhY2tzID0gZ2xvYmFsLl9fX2VpbyA9IChnbG9iYWwuX19fZWlvIHx8IFtdKTtcbiAgfVxuXG4gIC8vIGNhbGxiYWNrIGlkZW50aWZpZXJcbiAgdGhpcy5pbmRleCA9IGNhbGxiYWNrcy5sZW5ndGg7XG5cbiAgLy8gYWRkIGNhbGxiYWNrIHRvIGpzb25wIGdsb2JhbFxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGNhbGxiYWNrcy5wdXNoKGZ1bmN0aW9uIChtc2cpIHtcbiAgICBzZWxmLm9uRGF0YShtc2cpO1xuICB9KTtcblxuICAvLyBhcHBlbmQgdG8gcXVlcnkgc3RyaW5nXG4gIHRoaXMucXVlcnkuaiA9IHRoaXMuaW5kZXg7XG5cbiAgLy8gcHJldmVudCBzcHVyaW91cyBlcnJvcnMgZnJvbSBiZWluZyBlbWl0dGVkIHdoZW4gdGhlIHdpbmRvdyBpcyB1bmxvYWRlZFxuICBpZiAodHlwZW9mIGFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBhZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5zY3JpcHQpIHNlbGYuc2NyaXB0Lm9uZXJyb3IgPSBlbXB0eTtcbiAgICB9LCBmYWxzZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFBvbGxpbmcuXG4gKi9cblxuaW5oZXJpdChKU09OUFBvbGxpbmcsIFBvbGxpbmcpO1xuXG4vKlxuICogSlNPTlAgb25seSBzdXBwb3J0cyBiaW5hcnkgYXMgYmFzZTY0IGVuY29kZWQgc3RyaW5nc1xuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIHNvY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5KU09OUFBvbGxpbmcucHJvdG90eXBlLmRvQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnNjcmlwdCkge1xuICAgIHRoaXMuc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5zY3JpcHQpO1xuICAgIHRoaXMuc2NyaXB0ID0gbnVsbDtcbiAgfVxuXG4gIGlmICh0aGlzLmZvcm0pIHtcbiAgICB0aGlzLmZvcm0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmZvcm0pO1xuICAgIHRoaXMuZm9ybSA9IG51bGw7XG4gICAgdGhpcy5pZnJhbWUgPSBudWxsO1xuICB9XG5cbiAgUG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZS5jYWxsKHRoaXMpO1xufTtcblxuLyoqXG4gKiBTdGFydHMgYSBwb2xsIGN5Y2xlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuZG9Qb2xsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblxuICBpZiAodGhpcy5zY3JpcHQpIHtcbiAgICB0aGlzLnNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuc2NyaXB0KTtcbiAgICB0aGlzLnNjcmlwdCA9IG51bGw7XG4gIH1cblxuICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuICBzY3JpcHQuc3JjID0gdGhpcy51cmkoKTtcbiAgc2NyaXB0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoZSkge1xuICAgIHNlbGYub25FcnJvcignanNvbnAgcG9sbCBlcnJvcicsIGUpO1xuICB9O1xuXG4gIHZhciBpbnNlcnRBdCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTtcbiAgaWYgKGluc2VydEF0KSB7XG4gICAgaW5zZXJ0QXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2NyaXB0LCBpbnNlcnRBdCk7XG4gIH0gZWxzZSB7XG4gICAgKGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuYm9keSkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgfVxuICB0aGlzLnNjcmlwdCA9IHNjcmlwdDtcblxuICB2YXIgaXNVQWdlY2tvID0gJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBuYXZpZ2F0b3IgJiYgL2dlY2tvL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuICBpZiAoaXNVQWdlY2tvKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gICAgfSwgMTAwKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXcml0ZXMgd2l0aCBhIGhpZGRlbiBpZnJhbWUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgdG8gc2VuZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGVkIHVwb24gZmx1c2guXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5KU09OUFBvbGxpbmcucHJvdG90eXBlLmRvV3JpdGUgPSBmdW5jdGlvbiAoZGF0YSwgZm4pIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGlmICghdGhpcy5mb3JtKSB7XG4gICAgdmFyIGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7XG4gICAgdmFyIGFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgIHZhciBpZCA9IHRoaXMuaWZyYW1lSWQgPSAnZWlvX2lmcmFtZV8nICsgdGhpcy5pbmRleDtcbiAgICB2YXIgaWZyYW1lO1xuXG4gICAgZm9ybS5jbGFzc05hbWUgPSAnc29ja2V0aW8nO1xuICAgIGZvcm0uc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgIGZvcm0uc3R5bGUudG9wID0gJy0xMDAwcHgnO1xuICAgIGZvcm0uc3R5bGUubGVmdCA9ICctMTAwMHB4JztcbiAgICBmb3JtLnRhcmdldCA9IGlkO1xuICAgIGZvcm0ubWV0aG9kID0gJ1BPU1QnO1xuICAgIGZvcm0uc2V0QXR0cmlidXRlKCdhY2NlcHQtY2hhcnNldCcsICd1dGYtOCcpO1xuICAgIGFyZWEubmFtZSA9ICdkJztcbiAgICBmb3JtLmFwcGVuZENoaWxkKGFyZWEpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZm9ybSk7XG5cbiAgICB0aGlzLmZvcm0gPSBmb3JtO1xuICAgIHRoaXMuYXJlYSA9IGFyZWE7XG4gIH1cblxuICB0aGlzLmZvcm0uYWN0aW9uID0gdGhpcy51cmkoKTtcblxuICBmdW5jdGlvbiBjb21wbGV0ZSAoKSB7XG4gICAgaW5pdElmcmFtZSgpO1xuICAgIGZuKCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0SWZyYW1lICgpIHtcbiAgICBpZiAoc2VsZi5pZnJhbWUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNlbGYuZm9ybS5yZW1vdmVDaGlsZChzZWxmLmlmcmFtZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHNlbGYub25FcnJvcignanNvbnAgcG9sbGluZyBpZnJhbWUgcmVtb3ZhbCBlcnJvcicsIGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAvLyBpZTYgZHluYW1pYyBpZnJhbWVzIHdpdGggdGFyZ2V0PVwiXCIgc3VwcG9ydCAodGhhbmtzIENocmlzIExhbWJhY2hlcilcbiAgICAgIHZhciBodG1sID0gJzxpZnJhbWUgc3JjPVwiamF2YXNjcmlwdDowXCIgbmFtZT1cIicgKyBzZWxmLmlmcmFtZUlkICsgJ1wiPic7XG4gICAgICBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGh0bWwpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgICAgaWZyYW1lLm5hbWUgPSBzZWxmLmlmcmFtZUlkO1xuICAgICAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0OjAnO1xuICAgIH1cblxuICAgIGlmcmFtZS5pZCA9IHNlbGYuaWZyYW1lSWQ7XG5cbiAgICBzZWxmLmZvcm0uYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICBzZWxmLmlmcmFtZSA9IGlmcmFtZTtcbiAgfVxuXG4gIGluaXRJZnJhbWUoKTtcblxuICAvLyBlc2NhcGUgXFxuIHRvIHByZXZlbnQgaXQgZnJvbSBiZWluZyBjb252ZXJ0ZWQgaW50byBcXHJcXG4gYnkgc29tZSBVQXNcbiAgLy8gZG91YmxlIGVzY2FwaW5nIGlzIHJlcXVpcmVkIGZvciBlc2NhcGVkIG5ldyBsaW5lcyBiZWNhdXNlIHVuZXNjYXBpbmcgb2YgbmV3IGxpbmVzIGNhbiBiZSBkb25lIHNhZmVseSBvbiBzZXJ2ZXItc2lkZVxuICBkYXRhID0gZGF0YS5yZXBsYWNlKHJFc2NhcGVkTmV3bGluZSwgJ1xcXFxcXG4nKTtcbiAgdGhpcy5hcmVhLnZhbHVlID0gZGF0YS5yZXBsYWNlKHJOZXdsaW5lLCAnXFxcXG4nKTtcblxuICB0cnkge1xuICAgIHRoaXMuZm9ybS5zdWJtaXQoKTtcbiAgfSBjYXRjaCAoZSkge31cblxuICBpZiAodGhpcy5pZnJhbWUuYXR0YWNoRXZlbnQpIHtcbiAgICB0aGlzLmlmcmFtZS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5pZnJhbWUucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgfVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5pZnJhbWUub25sb2FkID0gY29tcGxldGU7XG4gIH1cbn07XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIFRyYW5zcG9ydCA9IHJlcXVpcmUoJy4uL3RyYW5zcG9ydCcpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcbnZhciBwYXJzZXFzID0gcmVxdWlyZSgncGFyc2VxcycpO1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb21wb25lbnQtaW5oZXJpdCcpO1xudmFyIHllYXN0ID0gcmVxdWlyZSgneWVhc3QnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2VuZ2luZS5pby1jbGllbnQ6d2Vic29ja2V0Jyk7XG5cbnZhciBCcm93c2VyV2ViU29ja2V0LCBOb2RlV2ViU29ja2V0O1xuXG5pZiAodHlwZW9mIFdlYlNvY2tldCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgQnJvd3NlcldlYlNvY2tldCA9IFdlYlNvY2tldDtcbn0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIEJyb3dzZXJXZWJTb2NrZXQgPSBzZWxmLldlYlNvY2tldCB8fCBzZWxmLk1veldlYlNvY2tldDtcbn1cblxuaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gIHRyeSB7XG4gICAgTm9kZVdlYlNvY2tldCA9IHJlcXVpcmUoJ3dzJyk7XG4gIH0gY2F0Y2ggKGUpIHsgfVxufVxuXG4vKipcbiAqIEdldCBlaXRoZXIgdGhlIGBXZWJTb2NrZXRgIG9yIGBNb3pXZWJTb2NrZXRgIGdsb2JhbHNcbiAqIGluIHRoZSBicm93c2VyIG9yIHRyeSB0byByZXNvbHZlIFdlYlNvY2tldC1jb21wYXRpYmxlXG4gKiBpbnRlcmZhY2UgZXhwb3NlZCBieSBgd3NgIGZvciBOb2RlLWxpa2UgZW52aXJvbm1lbnQuXG4gKi9cblxudmFyIFdlYlNvY2tldEltcGwgPSBCcm93c2VyV2ViU29ja2V0IHx8IE5vZGVXZWJTb2NrZXQ7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBXUztcblxuLyoqXG4gKiBXZWJTb2NrZXQgdHJhbnNwb3J0IGNvbnN0cnVjdG9yLlxuICpcbiAqIEBhcGkge09iamVjdH0gY29ubmVjdGlvbiBvcHRpb25zXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFdTIChvcHRzKSB7XG4gIHZhciBmb3JjZUJhc2U2NCA9IChvcHRzICYmIG9wdHMuZm9yY2VCYXNlNjQpO1xuICBpZiAoZm9yY2VCYXNlNjQpIHtcbiAgICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7XG4gIH1cbiAgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSA9IG9wdHMucGVyTWVzc2FnZURlZmxhdGU7XG4gIHRoaXMudXNpbmdCcm93c2VyV2ViU29ja2V0ID0gQnJvd3NlcldlYlNvY2tldCAmJiAhb3B0cy5mb3JjZU5vZGU7XG4gIHRoaXMucHJvdG9jb2xzID0gb3B0cy5wcm90b2NvbHM7XG4gIGlmICghdGhpcy51c2luZ0Jyb3dzZXJXZWJTb2NrZXQpIHtcbiAgICBXZWJTb2NrZXRJbXBsID0gTm9kZVdlYlNvY2tldDtcbiAgfVxuICBUcmFuc3BvcnQuY2FsbCh0aGlzLCBvcHRzKTtcbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFRyYW5zcG9ydC5cbiAqL1xuXG5pbmhlcml0KFdTLCBUcmFuc3BvcnQpO1xuXG4vKipcbiAqIFRyYW5zcG9ydCBuYW1lLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuV1MucHJvdG90eXBlLm5hbWUgPSAnd2Vic29ja2V0JztcblxuLypcbiAqIFdlYlNvY2tldHMgc3VwcG9ydCBiaW5hcnlcbiAqL1xuXG5XUy5wcm90b3R5cGUuc3VwcG9ydHNCaW5hcnkgPSB0cnVlO1xuXG4vKipcbiAqIE9wZW5zIHNvY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUuZG9PcGVuID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuY2hlY2soKSkge1xuICAgIC8vIGxldCBwcm9iZSB0aW1lb3V0XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHVyaSA9IHRoaXMudXJpKCk7XG4gIHZhciBwcm90b2NvbHMgPSB0aGlzLnByb3RvY29scztcbiAgdmFyIG9wdHMgPSB7XG4gICAgYWdlbnQ6IHRoaXMuYWdlbnQsXG4gICAgcGVyTWVzc2FnZURlZmxhdGU6IHRoaXMucGVyTWVzc2FnZURlZmxhdGVcbiAgfTtcblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgb3B0cy5wZnggPSB0aGlzLnBmeDtcbiAgb3B0cy5rZXkgPSB0aGlzLmtleTtcbiAgb3B0cy5wYXNzcGhyYXNlID0gdGhpcy5wYXNzcGhyYXNlO1xuICBvcHRzLmNlcnQgPSB0aGlzLmNlcnQ7XG4gIG9wdHMuY2EgPSB0aGlzLmNhO1xuICBvcHRzLmNpcGhlcnMgPSB0aGlzLmNpcGhlcnM7XG4gIG9wdHMucmVqZWN0VW5hdXRob3JpemVkID0gdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gIGlmICh0aGlzLmV4dHJhSGVhZGVycykge1xuICAgIG9wdHMuaGVhZGVycyA9IHRoaXMuZXh0cmFIZWFkZXJzO1xuICB9XG4gIGlmICh0aGlzLmxvY2FsQWRkcmVzcykge1xuICAgIG9wdHMubG9jYWxBZGRyZXNzID0gdGhpcy5sb2NhbEFkZHJlc3M7XG4gIH1cblxuICB0cnkge1xuICAgIHRoaXMud3MgPVxuICAgICAgdGhpcy51c2luZ0Jyb3dzZXJXZWJTb2NrZXQgJiYgIXRoaXMuaXNSZWFjdE5hdGl2ZVxuICAgICAgICA/IHByb3RvY29sc1xuICAgICAgICAgID8gbmV3IFdlYlNvY2tldEltcGwodXJpLCBwcm90b2NvbHMpXG4gICAgICAgICAgOiBuZXcgV2ViU29ja2V0SW1wbCh1cmkpXG4gICAgICAgIDogbmV3IFdlYlNvY2tldEltcGwodXJpLCBwcm90b2NvbHMsIG9wdHMpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gIH1cblxuICBpZiAodGhpcy53cy5iaW5hcnlUeXBlID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7XG4gIH1cblxuICBpZiAodGhpcy53cy5zdXBwb3J0cyAmJiB0aGlzLndzLnN1cHBvcnRzLmJpbmFyeSkge1xuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSB0cnVlO1xuICAgIHRoaXMud3MuYmluYXJ5VHlwZSA9ICdub2RlYnVmZmVyJztcbiAgfSBlbHNlIHtcbiAgICB0aGlzLndzLmJpbmFyeVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICB9XG5cbiAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xufTtcblxuLyoqXG4gKiBBZGRzIGV2ZW50IGxpc3RlbmVycyB0byB0aGUgc29ja2V0XG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV1MucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdGhpcy53cy5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbk9wZW4oKTtcbiAgfTtcbiAgdGhpcy53cy5vbmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgIHNlbGYub25DbG9zZSgpO1xuICB9O1xuICB0aGlzLndzLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldikge1xuICAgIHNlbGYub25EYXRhKGV2LmRhdGEpO1xuICB9O1xuICB0aGlzLndzLm9uZXJyb3IgPSBmdW5jdGlvbiAoZSkge1xuICAgIHNlbGYub25FcnJvcignd2Vic29ja2V0IGVycm9yJywgZSk7XG4gIH07XG59O1xuXG4vKipcbiAqIFdyaXRlcyBkYXRhIHRvIHNvY2tldC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBvZiBwYWNrZXRzLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV1MucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKHBhY2tldHMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG5cbiAgLy8gZW5jb2RlUGFja2V0IGVmZmljaWVudCBhcyBpdCB1c2VzIFdTIGZyYW1pbmdcbiAgLy8gbm8gbmVlZCBmb3IgZW5jb2RlUGF5bG9hZFxuICB2YXIgdG90YWwgPSBwYWNrZXRzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB0b3RhbDsgaSA8IGw7IGkrKykge1xuICAgIChmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgICBwYXJzZXIuZW5jb2RlUGFja2V0KHBhY2tldCwgc2VsZi5zdXBwb3J0c0JpbmFyeSwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgaWYgKCFzZWxmLnVzaW5nQnJvd3NlcldlYlNvY2tldCkge1xuICAgICAgICAgIC8vIGFsd2F5cyBjcmVhdGUgYSBuZXcgb2JqZWN0IChHSC00MzcpXG4gICAgICAgICAgdmFyIG9wdHMgPSB7fTtcbiAgICAgICAgICBpZiAocGFja2V0Lm9wdGlvbnMpIHtcbiAgICAgICAgICAgIG9wdHMuY29tcHJlc3MgPSBwYWNrZXQub3B0aW9ucy5jb21wcmVzcztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VsZi5wZXJNZXNzYWdlRGVmbGF0ZSkge1xuICAgICAgICAgICAgdmFyIGxlbiA9ICdzdHJpbmcnID09PSB0eXBlb2YgZGF0YSA/IEJ1ZmZlci5ieXRlTGVuZ3RoKGRhdGEpIDogZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICBpZiAobGVuIDwgc2VsZi5wZXJNZXNzYWdlRGVmbGF0ZS50aHJlc2hvbGQpIHtcbiAgICAgICAgICAgICAgb3B0cy5jb21wcmVzcyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNvbWV0aW1lcyB0aGUgd2Vic29ja2V0IGhhcyBhbHJlYWR5IGJlZW4gY2xvc2VkIGJ1dCB0aGUgYnJvd3NlciBkaWRuJ3RcbiAgICAgICAgLy8gaGF2ZSBhIGNoYW5jZSBvZiBpbmZvcm1pbmcgdXMgYWJvdXQgaXQgeWV0LCBpbiB0aGF0IGNhc2Ugc2VuZCB3aWxsXG4gICAgICAgIC8vIHRocm93IGFuIGVycm9yXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKHNlbGYudXNpbmdCcm93c2VyV2ViU29ja2V0KSB7XG4gICAgICAgICAgICAvLyBUeXBlRXJyb3IgaXMgdGhyb3duIHdoZW4gcGFzc2luZyB0aGUgc2Vjb25kIGFyZ3VtZW50IG9uIFNhZmFyaVxuICAgICAgICAgICAgc2VsZi53cy5zZW5kKGRhdGEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxmLndzLnNlbmQoZGF0YSwgb3B0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgZGVidWcoJ3dlYnNvY2tldCBjbG9zZWQgYmVmb3JlIG9uY2xvc2UgZXZlbnQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC0tdG90YWwgfHwgZG9uZSgpO1xuICAgICAgfSk7XG4gICAgfSkocGFja2V0c1tpXSk7XG4gIH1cblxuICBmdW5jdGlvbiBkb25lICgpIHtcbiAgICBzZWxmLmVtaXQoJ2ZsdXNoJyk7XG5cbiAgICAvLyBmYWtlIGRyYWluXG4gICAgLy8gZGVmZXIgdG8gbmV4dCB0aWNrIHRvIGFsbG93IFNvY2tldCB0byBjbGVhciB3cml0ZUJ1ZmZlclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi53cml0YWJsZSA9IHRydWU7XG4gICAgICBzZWxmLmVtaXQoJ2RyYWluJyk7XG4gICAgfSwgMCk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gY2xvc2VcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgVHJhbnNwb3J0LnByb3RvdHlwZS5vbkNsb3NlLmNhbGwodGhpcyk7XG59O1xuXG4vKipcbiAqIENsb3NlcyBzb2NrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV1MucHJvdG90eXBlLmRvQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0eXBlb2YgdGhpcy53cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aGlzLndzLmNsb3NlKCk7XG4gIH1cbn07XG5cbi8qKlxuICogR2VuZXJhdGVzIHVyaSBmb3IgY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUudXJpID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJ5IHx8IHt9O1xuICB2YXIgc2NoZW1hID0gdGhpcy5zZWN1cmUgPyAnd3NzJyA6ICd3cyc7XG4gIHZhciBwb3J0ID0gJyc7XG5cbiAgLy8gYXZvaWQgcG9ydCBpZiBkZWZhdWx0IGZvciBzY2hlbWFcbiAgaWYgKHRoaXMucG9ydCAmJiAoKCd3c3MnID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMucG9ydCkgIT09IDQ0MykgfHxcbiAgICAoJ3dzJyA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLnBvcnQpICE9PSA4MCkpKSB7XG4gICAgcG9ydCA9ICc6JyArIHRoaXMucG9ydDtcbiAgfVxuXG4gIC8vIGFwcGVuZCB0aW1lc3RhbXAgdG8gVVJJXG4gIGlmICh0aGlzLnRpbWVzdGFtcFJlcXVlc3RzKSB7XG4gICAgcXVlcnlbdGhpcy50aW1lc3RhbXBQYXJhbV0gPSB5ZWFzdCgpO1xuICB9XG5cbiAgLy8gY29tbXVuaWNhdGUgYmluYXJ5IHN1cHBvcnQgY2FwYWJpbGl0aWVzXG4gIGlmICghdGhpcy5zdXBwb3J0c0JpbmFyeSkge1xuICAgIHF1ZXJ5LmI2NCA9IDE7XG4gIH1cblxuICBxdWVyeSA9IHBhcnNlcXMuZW5jb2RlKHF1ZXJ5KTtcblxuICAvLyBwcmVwZW5kID8gdG8gcXVlcnlcbiAgaWYgKHF1ZXJ5Lmxlbmd0aCkge1xuICAgIHF1ZXJ5ID0gJz8nICsgcXVlcnk7XG4gIH1cblxuICB2YXIgaXB2NiA9IHRoaXMuaG9zdG5hbWUuaW5kZXhPZignOicpICE9PSAtMTtcbiAgcmV0dXJuIHNjaGVtYSArICc6Ly8nICsgKGlwdjYgPyAnWycgKyB0aGlzLmhvc3RuYW1lICsgJ10nIDogdGhpcy5ob3N0bmFtZSkgKyBwb3J0ICsgdGhpcy5wYXRoICsgcXVlcnk7XG59O1xuXG4vKipcbiAqIEZlYXR1cmUgZGV0ZWN0aW9uIGZvciBXZWJTb2NrZXQuXG4gKlxuICogQHJldHVybiB7Qm9vbGVhbn0gd2hldGhlciB0aGlzIHRyYW5zcG9ydCBpcyBhdmFpbGFibGUuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbldTLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEhV2ViU29ja2V0SW1wbCAmJiAhKCdfX2luaXRpYWxpemUnIGluIFdlYlNvY2tldEltcGwgJiYgdGhpcy5uYW1lID09PSBXUy5wcm90b3R5cGUubmFtZSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB0b0FycmF5XG5cbmZ1bmN0aW9uIHRvQXJyYXkobGlzdCwgaW5kZXgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXVxuXG4gICAgaW5kZXggPSBpbmRleCB8fCAwXG5cbiAgICBmb3IgKHZhciBpID0gaW5kZXggfHwgMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXJyYXlbaSAtIGluZGV4XSA9IGxpc3RbaV1cbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXlcbn1cbiIsIlxuLyoqXG4gKiBFeHBvc2UgYEJhY2tvZmZgLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gQmFja29mZjtcblxuLyoqXG4gKiBJbml0aWFsaXplIGJhY2tvZmYgdGltZXIgd2l0aCBgb3B0c2AuXG4gKlxuICogLSBgbWluYCBpbml0aWFsIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIFsxMDBdXG4gKiAtIGBtYXhgIG1heCB0aW1lb3V0IFsxMDAwMF1cbiAqIC0gYGppdHRlcmAgWzBdXG4gKiAtIGBmYWN0b3JgIFsyXVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEJhY2tvZmYob3B0cykge1xuICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgdGhpcy5tcyA9IG9wdHMubWluIHx8IDEwMDtcbiAgdGhpcy5tYXggPSBvcHRzLm1heCB8fCAxMDAwMDtcbiAgdGhpcy5mYWN0b3IgPSBvcHRzLmZhY3RvciB8fCAyO1xuICB0aGlzLmppdHRlciA9IG9wdHMuaml0dGVyID4gMCAmJiBvcHRzLmppdHRlciA8PSAxID8gb3B0cy5qaXR0ZXIgOiAwO1xuICB0aGlzLmF0dGVtcHRzID0gMDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGJhY2tvZmYgZHVyYXRpb24uXG4gKlxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5kdXJhdGlvbiA9IGZ1bmN0aW9uKCl7XG4gIHZhciBtcyA9IHRoaXMubXMgKiBNYXRoLnBvdyh0aGlzLmZhY3RvciwgdGhpcy5hdHRlbXB0cysrKTtcbiAgaWYgKHRoaXMuaml0dGVyKSB7XG4gICAgdmFyIHJhbmQgPSAgTWF0aC5yYW5kb20oKTtcbiAgICB2YXIgZGV2aWF0aW9uID0gTWF0aC5mbG9vcihyYW5kICogdGhpcy5qaXR0ZXIgKiBtcyk7XG4gICAgbXMgPSAoTWF0aC5mbG9vcihyYW5kICogMTApICYgMSkgPT0gMCAgPyBtcyAtIGRldmlhdGlvbiA6IG1zICsgZGV2aWF0aW9uO1xuICB9XG4gIHJldHVybiBNYXRoLm1pbihtcywgdGhpcy5tYXgpIHwgMDtcbn07XG5cbi8qKlxuICogUmVzZXQgdGhlIG51bWJlciBvZiBhdHRlbXB0cy5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5hdHRlbXB0cyA9IDA7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgbWluaW11bSBkdXJhdGlvblxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuc2V0TWluID0gZnVuY3Rpb24obWluKXtcbiAgdGhpcy5tcyA9IG1pbjtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBtYXhpbXVtIGR1cmF0aW9uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRNYXggPSBmdW5jdGlvbihtYXgpe1xuICB0aGlzLm1heCA9IG1heDtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBqaXR0ZXJcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnNldEppdHRlciA9IGZ1bmN0aW9uKGppdHRlcil7XG4gIHRoaXMuaml0dGVyID0gaml0dGVyO1xufTtcblxuIiwiZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFycjJbaV0gPSBhcnJbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycjI7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlXaXRob3V0SG9sZXM7IiwiZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2l0ZXJhYmxlVG9BcnJheTsiLCJmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfbm9uSXRlcmFibGVTcHJlYWQ7IiwidmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0xMS0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tMTEtMiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMTEtMyEuL2hvbWUuc2Nzc1wiKTtcbmNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG5pZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbn1cblxudmFyIG9wdGlvbnMgPSB7fVxuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZiAoY29udGVudC5sb2NhbHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbn1cbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18odHJ1ZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5ob21lLXdyYXBwZXJ7aGVpZ2h0OmNhbGMoMTAwdmggLSA1NnB4KTtvdmVyZmxvdzphdXRvfS5ob21lLXdyYXBwZXIgLmhvbWUtYm9keXtoZWlnaHQ6MTAwJTtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1vcmllbnQ6aG9yaXpvbnRhbDstd2Via2l0LWJveC1kaXJlY3Rpb246bm9ybWFsO2ZsZXgtZGlyZWN0aW9uOnJvdzstd2Via2l0LWJveC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59QG1lZGlhIChtYXgtd2lkdGg6IDk1MHB4KXsuaG9tZS13cmFwcGVye21hcmdpbjowIDB9fUBtZWRpYSAobWluLXdpZHRoOiA5NTBweCl7LmhvbWUtd3JhcHBlcnttYXJnaW46MCAxMHZ3fX1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCIvaG9tZS9kZWVwL0Rlc2t0b3AvcHJvamVjdHMvY3Jhd2xtZS9mcm9udGVuZC9zcmMvY29tcG9uZW50cy9ob21lL2hvbWUuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxjQUNJLHlCQUEyQixDQUMzQixhQUFlLENBRm5CLHlCQU1RLFdBQVksQ0FDWixtQkFBYSxDQUFiLFlBQWEsQ0FDYiw2QkFBbUIsQ0FBbkIsNEJBQW1CLENBQW5CLGtCQUFtQixDQUNuQix3QkFBaUIsQ0FBakIsNkJBQThCLENBRWpDLDBCQUlELGNBQ0ksVUFBWSxDQUNmLENBR0wsMEJBRUksY0FDSSxhQUFlLENBQ2xCXCIsXCJmaWxlXCI6XCJob21lLnNjc3NcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmhvbWUtd3JhcHBlcntcXG4gICAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gNTZweCApO1xcbiAgICBvdmVyZmxvdyA6IGF1dG87XFxuXFxuICAgIFxcbiAgICAuaG9tZS1ib2R5e1xcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xcbiAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuXFxuICAgIH1cXG59XFxuXFxuQG1lZGlhICAobWF4LXdpZHRoOiA5NTBweCkge1xcbiAgICAuaG9tZS13cmFwcGVye1xcbiAgICAgICAgbWFyZ2luIDogMCAwO1xcbiAgICB9XFxufVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA5NTBweCkgIHtcXG5cXG4gICAgLmhvbWUtd3JhcHBlcntcXG4gICAgICAgIG1hcmdpbiA6IDAgMTB2dztcXG4gICAgfVxcbn1cIl19XSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJ2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTExLTEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS0xMS0yIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0xMS0zIS4vbWFpbi5zY3NzXCIpO1xuY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbmlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xufVxuXG52YXIgb3B0aW9ucyA9IHt9XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmIChjb250ZW50LmxvY2Fscykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xufVxuIiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyh0cnVlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLm1haW4td3JhcHBlcnstd2Via2l0LWJveC1mbGV4OjM7ZmxleDozO292ZXJmbG93OmF1dG87cGFkZGluZzoxcmVtO2JhY2tncm91bmQtY29sb3I6cmdiYSg0MCw0MCw0MCwwLjgpfS5tYWluLXdyYXBwZXIgLmNhcmQtYm9keXtwYWRkaW5nOi41cmVtIDFyZW07Zm9udC1zaXplOi44cmVtfS5tYWluLXdyYXBwZXIgcHJle2ZvbnQtc2l6ZTouOHJlbX0ubWFpbi13cmFwcGVyIHB7bWFyZ2luLWJvdHRvbTowfS5tYWluLXdyYXBwZXIgLmNvbnRyb2wtd3JhcHBlciAuY29udHJvbC1ib2R5e2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LW9yaWVudDp2ZXJ0aWNhbDstd2Via2l0LWJveC1kaXJlY3Rpb246bm9ybWFsO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtwb3NpdGlvbjpyZWxhdGl2ZX0ubWFpbi13cmFwcGVyIC5jb250cm9sLXdyYXBwZXIgLmNvbnRyb2wtYm9keSAuaW5wdXQtZ3JvdXB7LXdlYmtpdC1ib3gtZmxleDoxO2ZsZXg6MTtjdXJzb3I6cG9pbnRlcn0ubWFpbi13cmFwcGVyIC5jb250cm9sLXdyYXBwZXIgLmNvbnRyb2wtYm9keSAuc3VnZ2VzdGlvbnN7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtb3JpZW50OnZlcnRpY2FsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2ZsZXgtd3JhcDpub3dyYXA7bWF4LWhlaWdodDoxNXJlbTtwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjEwO3RvcDoxMDAlO292ZXJmbG93OmF1dG99Lm1haW4td3JhcHBlciAuY29udHJvbC13cmFwcGVyIC5jb250cm9sLWJvZHkgLnN1Z2dlc3Rpb25zIC5hY3Rpdml0eU1hcHtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Zm9udC1zaXplOi43cmVtO3BhZGRpbmc6LjJyZW07Ym9yZGVyOjFweCBzb2xpZCBncmF5O2JvcmRlci10b3A6bm9uZX0ubWFpbi13cmFwcGVyIC5jb250cm9sLXdyYXBwZXIgLmNvbnRyb2wtYm9keSAuaGlkZGVue2Rpc3BsYXk6bm9uZX0ubWFpbi13cmFwcGVyIC5hdmFpbGFibGUtdGFncy13cmFwcGVye21hcmdpbi1ib3R0b206MXJlbTttYXJnaW4tdG9wOjFyZW19Lm1haW4td3JhcHBlciAuYXZhaWxhYmxlLXRhZ3Mtd3JhcHBlciBzcGFue2NvbG9yOndoaXRlfS5tYWluLXdyYXBwZXIgLmF2YWlsYWJsZS10YWdzLXdyYXBwZXIgLmF2YWlsYWJsZS10YWdzLWJvZHl7Zm9udC1zaXplOi44cmVtfS5tYWluLXdyYXBwZXIgLmF2YWlsYWJsZS10YWdzLXdyYXBwZXIgLmF2YWlsYWJsZS10YWdzLWJvZHkgLmJ0bntwYWRkaW5nOi4xcmVtIC40cmVtO2ZvbnQtc2l6ZTouN3JlbTttYXJnaW4tcmlnaHQ6LjVyZW07bWFyZ2luLWJvdHRvbTouM3JlbX0ubWFpbi13cmFwcGVyIC5wb3N0LXdyYXBwZXIgLnBvc3QtYm9keT5kaXZ7bWFyZ2luLWJvdHRvbToxcmVtfS5tYWluLXdyYXBwZXIgLnBvc3Qtd3JhcHBlciAucG9zdC1ib2R5IC5wb3N0LWJvZHktdGFic3tjb2xvcjp3aGl0ZTtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1vcmllbnQ6aG9yaXpvbnRhbDstd2Via2l0LWJveC1kaXJlY3Rpb246bm9ybWFsO2ZsZXgtZGlyZWN0aW9uOnJvdzttYXJnaW4tYm90dG9tOi4zcmVtO21hcmdpbi10b3A6LjVyZW19Lm1haW4td3JhcHBlciAucG9zdC13cmFwcGVyIC5wb3N0LWJvZHkgLnBvc3QtYm9keS10YWJzIHNwYW57cGFkZGluZzouMnJlbSAuN3JlbTtmb250LXNpemU6LjhyZW07bWFyZ2luLXJpZ2h0OjFyZW07Zm9udC13ZWlnaHQ6Ym9sZDtjdXJzb3I6cG9pbnRlcjtiYWNrZ3JvdW5kLWNvbG9yOiMyMDIwMjA7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czouMnJlbTtib3JkZXItdG9wLXJpZ2h0LXJhZGl1czouMnJlbTtib3JkZXItYm90dG9tOjNweCBzb2xpZCAjMjAyMDIwfS5tYWluLXdyYXBwZXIgLnBvc3Qtd3JhcHBlciAucG9zdC1ib2R5IC5wb3N0LWJvZHktdGFicyBzcGFuOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2ZmZjtjb2xvcjojMjAyMDIwO2JvcmRlci10b3AtbGVmdC1yYWRpdXM6LjJyZW07Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6LjJyZW19Lm1haW4td3JhcHBlciAucG9zdC13cmFwcGVyIC5wb3N0LWJvZHkgLnBvc3QtYm9keS10YWJzIC5hY3RpdmV7Ym9yZGVyLWJvdHRvbTozcHggc29saWQgIzM3RUY1MH0ubWFpbi13cmFwcGVyIC5wb3N0LXdyYXBwZXIgLnBvc3QtYm9keSAuaGVyby1zZWN0aW9ue2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LW9yaWVudDpob3Jpem9udGFsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7ZmxleC1kaXJlY3Rpb246cm93O21hcmdpbi1ib3R0b206LjVyZW19Lm1haW4td3JhcHBlciAucG9zdC13cmFwcGVyIC5wb3N0LWJvZHkgLmhlcm8tc2VjdGlvbiAuaW1hZ2V7cGFkZGluZy1yaWdodDoxcmVtOy13ZWJraXQtYm94LWZsZXg6MTtmbGV4OjF9Lm1haW4td3JhcHBlciAucG9zdC13cmFwcGVyIC5wb3N0LWJvZHkgLmhlcm8tc2VjdGlvbiAuaW1hZ2UgaW1ne3dpZHRoOjEwMCV9Lm1haW4td3JhcHBlciAucG9zdC13cmFwcGVyIC5wb3N0LWJvZHkgLmhlcm8tc2VjdGlvbiAuaGVhZGVyVGV4dHstd2Via2l0LWJveC1mbGV4OjQ7ZmxleDo0fS5tYWluLXdyYXBwZXIgLnBvc3Qtd3JhcHBlciAucG9zdC1ib2R5IC5oZXJvLXNlY3Rpb24gLmhlYWRlclRleHQgLmhlYWRpbmd7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtb3JpZW50Omhvcml6b250YWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOm5vcm1hbDtmbGV4LWRpcmVjdGlvbjpyb3c7LXdlYmtpdC1ib3gtcGFjazpqdXN0aWZ5O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVufS5tYWluLXdyYXBwZXIgLnBvc3Qtd3JhcHBlciAucG9zdC1ib2R5IC5oZXJvLXNlY3Rpb24gLmhlYWRlclRleHQgLmhlYWRpbmcgYTpob3Zlcntjb2xvcjpncmVlbjtjdXJzb3I6cG9pbnRlcn0ubWFpbi13cmFwcGVyIC5wb3N0LXdyYXBwZXIgLnBvc3QtYm9keSAuaGVyby1zZWN0aW9uIC5oZWFkZXJUZXh0IC5oZWFkaW5nIHNwYW57Y29sb3I6Z3JheX0ubWFpbi13cmFwcGVyIC5wb3N0LXdyYXBwZXIgLnBvc3QtYm9keSAuaGVyby1zZWN0aW9uIC5oZWFkZXJUZXh0IC5oZWFkaW5nIHNwYW46aG92ZXJ7Y3Vyc29yOnBvaW50ZXI7Y29sb3I6YmxhY2t9Lm1haW4td3JhcHBlciAucG9zdC13cmFwcGVyIC5wb3N0LWJvZHkgLmhlcm8tc2VjdGlvbiAuaGVhZGVyVGV4dCAubWV0YS1kZXRhaWxzIHNtYWxse21hcmdpbi1yaWdodDoxcmVtfS5tYWluLXdyYXBwZXIgLnBvc3Qtd3JhcHBlciAucG9zdC1ib2R5IC5oZXJvLXNlY3Rpb24gLmhlYWRlclRleHQgLmhlcm8tZGV0YWlscyBwe21hcmdpbi1ib3R0b206LjRyZW19Lm1haW4td3JhcHBlciAucG9zdC13cmFwcGVyIC5wb3N0LWJvZHkgLmhlcm8tc2VjdGlvbiAuaGVhZGVyVGV4dCAuaGVyby1kZXRhaWxzIC5hcnRpY2xlLWRlc2NyaXB0aW9ue2ZvbnQtc2l6ZTouOXJlbX0ubWFpbi13cmFwcGVyIC5wb3N0LXdyYXBwZXIgLnBvc3QtYm9keSAuaGVyby1zZWN0aW9uIC5oZWFkZXJUZXh0IC5oZXJvLWRldGFpbHMgLmFydGljbGUtdGFnc3tmb250LXNpemU6LjhyZW19Lm1haW4td3JhcHBlciAucG9zdC13cmFwcGVyIC5wb3N0LWJvZHkgLmhlcm8tc2VjdGlvbiAuaGVhZGVyVGV4dCAuaGVyby1kZXRhaWxzIC5hcnRpY2xlLXRhZ3MgYnV0dG9ue3BhZGRpbmc6LjFyZW0gLjRyZW07Zm9udC1zaXplOi43cmVtO21hcmdpbi1yaWdodDouNXJlbX0ubWFpbi13cmFwcGVyIC5wb3N0LXdyYXBwZXIgLnBvc3QtYm9keSAuZCAubm8tYXJ0aWNsZXt0ZXh0LWFsaWduOmNlbnRlcn0ubWFpbi13cmFwcGVyIC5wb3N0LXdyYXBwZXIgLnBvc3QtYm9keSAubG9hZC1tb3Jle3RleHQtYWxpZ246Y2VudGVyO2ZvbnQtd2VpZ2h0OmJvbGQ7bWFyZ2luLWJvdHRvbTowO2N1cnNvcjpwb2ludGVyfS5tYWluLXdyYXBwZXIgLnBvc3Qtd3JhcHBlciAucG9zdC1ib2R5IC5sb2FkLW1vcmUgcHttYXJnaW4tYm90dG9tOjB9Lm1haW4td3JhcHBlciAucG9zdC13cmFwcGVyIC5wb3N0LWJvZHkgLmxvYWQtbW9yZTpob3Zlcntjb2xvcjpncmVlbjt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lfS5tYWluLXdyYXBwZXIgLnBvc3Qtd3JhcHBlciAucG9zdC1ib2R5IC5sb2FkZXJ7dGV4dC1hbGlnbjpjZW50ZXJ9Lm1haW4td3JhcHBlciAuaGlnaGxpZ2h0e2JhY2tncm91bmQtY29sb3I6eWVsbG93fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIi9ob21lL2RlZXAvRGVza3RvcC9wcm9qZWN0cy9jcmF3bG1lL2Zyb250ZW5kL3NyYy9jb21wb25lbnRzL2hvbWUvbWFpbi9tYWluLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUEsY0FDSSxrQkFBVyxDQUFYLE1BQVcsQ0FDWCxhQUFjLENBQ2QsWUFBYyxDQUNkLG1DQUFxQyxDQUp6Qyx5QkFPUSxrQkFBbUIsQ0FDbkIsZUFBZ0IsQ0FSeEIsa0JBWVEsZUFBZ0IsQ0FaeEIsZ0JBZ0JRLGVBQWlCLENBaEJ6Qiw2Q0FzQlksbUJBQW9CLENBQXBCLFlBQW9CLENBQ3BCLDJCQUFzQixDQUF0Qiw0QkFBc0IsQ0FBdEIscUJBQXNCLENBQ3RCLGlCQUFrQixDQXhCOUIsMERBMkJnQixrQkFBa0IsQ0FBbEIsTUFBa0IsQ0FFbEIsY0FBd0IsQ0E3QnhDLDBEQWdDZ0IsbUJBQWEsQ0FBYixZQUFhLENBQ2IsMkJBQXNCLENBQXRCLDRCQUFzQixDQUF0QixxQkFBc0IsQ0FDdEIsZ0JBQWlCLENBQ2pCLGdCQUFpQixDQUNqQixpQkFBbUIsQ0FDbkIsVUFBWSxDQUNaLFFBQVUsQ0FDVixhQUFjLENBdkM5Qix1RUEwQ29CLHFCQUF1QyxDQUN2QyxlQUFpQixDQUNqQixhQUFlLENBQ2YscUJBQXVCLENBQ3ZCLGVBQWlCLENBOUNyQyxxREFrRGdCLFlBQWEsQ0FsRDdCLHNDQXdEUSxrQkFBbUIsQ0FDbkIsZUFBZ0IsQ0F6RHhCLDJDQTREWSxXQUFZLENBNUR4QiwyREFnRVksZUFBZ0IsQ0FoRTVCLGdFQW1FZ0IsbUJBQTBCLENBQzFCLGVBQW9CLENBQ3BCLGtCQUFvQixDQUNwQixtQkFBb0IsQ0F0RXBDLDJDQThFZ0Isa0JBQW1CLENBOUVuQyx1REFrRmdCLFdBQXFCLENBQ3JCLG1CQUFvQixDQUFwQixZQUFvQixDQUNwQiw2QkFBbUIsQ0FBbkIsNEJBQW1CLENBQW5CLGtCQUFtQixDQUNuQixtQkFBcUIsQ0FDckIsZ0JBQWlCLENBdEZqQyw0REF5Rm9CLG1CQUF5QixDQUN6QixlQUFtQixDQUNuQixpQkFBa0IsQ0FDbEIsZ0JBQWlCLENBQ2pCLGNBQWUsQ0FDZix3QkFBa0MsQ0FDbEMsNEJBQTZCLENBQzdCLDZCQUE4QixDQUU5QiwrQkFBd0MsQ0FsRzVELGtFQXFHd0IscUJBQW9DLENBQ3BDLGFBQWlDLENBQ2pDLDRCQUE2QixDQUM3Qiw2QkFBK0IsQ0F4R3ZELCtEQTZHb0IsK0JBQWdDLENBN0dwRCxxREFtSGdCLG1CQUFvQixDQUFwQixZQUFvQixDQUNwQiw2QkFBbUIsQ0FBbkIsNEJBQW1CLENBQW5CLGtCQUFtQixDQUNuQixtQkFBcUIsQ0FySHJDLDREQXdIb0Isa0JBQW1CLENBQ25CLGtCQUFlLENBQWYsTUFBZ0IsQ0F6SHBDLGdFQTRId0IsVUFBVyxDQTVIbkMsaUVBaUlvQixrQkFBTSxDQUFOLE1BQU8sQ0FqSTNCLDBFQW9Jd0IsbUJBQXFCLENBQXJCLFlBQXFCLENBQ3JCLDZCQUFvQixDQUFwQiw0QkFBb0IsQ0FBcEIsa0JBQW9CLENBQ3BCLHdCQUFpQixDQUFqQiw2QkFBOEIsQ0F0SXRELGtGQXdJNEIsV0FBYSxDQUNiLGNBQWUsQ0F6STNDLCtFQTRJNEIsVUFBVyxDQTVJdkMscUZBK0lnQyxjQUFlLENBQ2YsV0FBYSxDQWhKN0MscUZBdUo0QixpQkFBa0IsQ0F2SjlDLGlGQTZKNEIsbUJBQW9CLENBN0poRCxvR0FrSzRCLGVBQWdCLENBbEs1Qyw2RkFzSzRCLGVBQWdCLENBdEs1QyxvR0F5S2dDLG1CQUF5QixDQUN6QixlQUFtQixDQUNuQixrQkFBbUIsQ0EzS25ELHNEQW9MZ0IsaUJBQW1CLENBcExuQyxrREF1TGdCLGlCQUFxQixDQUNyQixnQkFBbUIsQ0FDbkIsZUFBZ0IsQ0FDaEIsY0FBc0IsQ0ExTHRDLG9EQTRMb0IsZUFBZ0IsQ0E1THBDLHdEQWdNb0IsV0FBYSxDQUNiLHlCQUEwQixDQWpNOUMsK0NBdU1nQixpQkFBa0IsQ0F2TWxDLHlCQWdOUSx1QkFBd0JcIixcImZpbGVcIjpcIm1haW4uc2Nzc1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCJcXG5cXG4ubWFpbi13cmFwcGVyIHtcXG4gICAgZmxleCAgICA6IDM7XFxuICAgIG92ZXJmbG93OiBhdXRvO1xcbiAgICBwYWRkaW5nIDogMXJlbTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSg0MCwgNDAsIDQwLC44KTtcXG5cXG4gICAgLmNhcmQtYm9keSB7XFxuICAgICAgICBwYWRkaW5nOiAuNXJlbSAxcmVtO1xcbiAgICAgICAgZm9udC1zaXplOiAuOHJlbTtcXG4gICAgfVxcblxcbiAgICBwcmUge1xcbiAgICAgICAgZm9udC1zaXplOiAuOHJlbTtcXG4gICAgfVxcblxcbiAgICBwe1xcbiAgICAgICAgbWFyZ2luLWJvdHRvbSA6IDA7XFxuICAgIH1cXG5cXG5cXG4gICAgLmNvbnRyb2wtd3JhcHBlciB7XFxuICAgICAgICAuY29udHJvbC1ib2R5IHtcXG4gICAgICAgICAgICBkaXNwbGF5ICAgICAgIDogZmxleDtcXG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG5cXG4gICAgICAgICAgICAuaW5wdXQtZ3JvdXAge1xcbiAgICAgICAgICAgICAgICBmbGV4ICAgICAgICAgICA6IDE7XFxuICAgICAgICAgICAgICAgIC8vIG1hcmdpbi1yaWdodDogMXJlbTtcXG4gICAgICAgICAgICAgICAgY3Vyc29yICAgICAgICAgOiBwb2ludGVyO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAuc3VnZ2VzdGlvbnN7XFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAgICAgICAgICAgIGZsZXgtd3JhcDogbm93cmFwO1xcbiAgICAgICAgICAgICAgICBtYXgtaGVpZ2h0OiAxNXJlbTtcXG4gICAgICAgICAgICAgICAgcG9zaXRpb24gOiBhYnNvbHV0ZTtcXG4gICAgICAgICAgICAgICAgei1pbmRleCA6IDEwO1xcbiAgICAgICAgICAgICAgICB0b3AgOiAxMDAlO1xcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogYXV0bztcXG5cXG4gICAgICAgICAgICAgICAgLmFjdGl2aXR5TWFwe1xcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LDEpO1xcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplIDogLjdyZW07XFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nIDogLjJyZW07XFxuICAgICAgICAgICAgICAgICAgICBib3JkZXIgOiAxcHggc29saWQgZ3JheTtcXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci10b3AgOiBub25lO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIC5oaWRkZW57XFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICB9XFxuXFxuICAgIC5hdmFpbGFibGUtdGFncy13cmFwcGVyIHtcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDFyZW07XFxuICAgICAgICBtYXJnaW4tdG9wOiAxcmVtO1xcblxcbiAgICAgICAgc3BhbiB7XFxuICAgICAgICAgICAgY29sb3I6IHdoaXRlO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgLmF2YWlsYWJsZS10YWdzLWJvZHkge1xcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogLjhyZW07XFxuXFxuICAgICAgICAgICAgLmJ0biB7XFxuICAgICAgICAgICAgICAgIHBhZGRpbmcgICAgICA6IC4xcmVtIC40cmVtO1xcbiAgICAgICAgICAgICAgICBmb250LXNpemUgICAgOiAuN3JlbTtcXG4gICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0IDogLjVyZW07XFxuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IC4zcmVtO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICAucG9zdC13cmFwcGVyIHtcXG4gICAgICAgIC5wb3N0LWJvZHkge1xcbiAgICAgICAgICAgICY+ZGl2IHtcXG4gICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgLnBvc3QtYm9keS10YWJzIHtcXG4gICAgICAgICAgICAgICAgY29sb3IgICAgICAgICA6IHdoaXRlO1xcbiAgICAgICAgICAgICAgICBkaXNwbGF5ICAgICAgIDogZmxleDtcXG4gICAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbSA6IC4zcmVtO1xcbiAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAuNXJlbTtcXG5cXG4gICAgICAgICAgICAgICAgc3BhbiB7XFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nICAgICA6IC4ycmVtIC43cmVtO1xcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplICAgOiAuOHJlbTtcXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMXJlbTtcXG4gICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0IDpib2xkO1xcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvciA6IHJnYigzMiwgMzIsIDMyKTtcXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IC4ycmVtO1xcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IC4ycmVtO1xcblxcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogM3B4IHNvbGlkIHJnYigzMiwgMzIsIDMyKTtcXG5cXG4gICAgICAgICAgICAgICAgICAgICY6aG92ZXIge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTUsIDI1NSwgMjU1KTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvciAgICAgICAgICAgOiByZ2IoMzIsIDMyLCAzMik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogLjJyZW07XFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6ICAuMnJlbTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICAuYWN0aXZlIHtcXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci1ib3R0b206IDNweCBzb2xpZCAjMzdFRjUwO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcblxcblxcbiAgICAgICAgICAgIC5oZXJvLXNlY3Rpb24ge1xcbiAgICAgICAgICAgICAgICBkaXNwbGF5ICAgICAgIDogZmxleDtcXG4gICAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbSA6IC41cmVtO1xcblxcbiAgICAgICAgICAgICAgICAuaW1hZ2Uge1xcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMXJlbTtcXG4gICAgICAgICAgICAgICAgICAgIGZsZXggICAgICAgICA6IDE7XFxuXFxuICAgICAgICAgICAgICAgICAgICBpbWcge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIC5oZWFkZXJUZXh0IHtcXG4gICAgICAgICAgICAgICAgICAgIGZsZXg6IDQ7XFxuXFxuICAgICAgICAgICAgICAgICAgICAuaGVhZGluZyB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheSAgICAgICAgOiBmbGV4O1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uIDogcm93O1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gICAgICAgICAgICAgICAgICAgICAgICBhOmhvdmVye1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvciA6IGdyZWVuO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwYW4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogZ3JheTtcXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJjpob3ZlciB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvciA6IGJsYWNrO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICAgICAgLm1ldGEtZGV0YWlscyB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgc21hbGwge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDFyZW07XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICAgICAgLmhlcm8tZGV0YWlscyB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcCB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IC40cmVtO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXJ0aWNsZS1kZXNjcmlwdGlvbiB7XFxuXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogLjlyZW07XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcnRpY2xlLXRhZ3Mge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IC44cmVtO1xcblxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZyAgICAgOiAuMXJlbSAuNHJlbTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZSAgIDogLjdyZW07XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IC41cmVtO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIC5kIC5uby1hcnRpY2xle1xcbiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduIDogY2VudGVyO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAubG9hZC1tb3JlIHtcXG4gICAgICAgICAgICAgICAgdGV4dC1hbGlnbiAgIDogY2VudGVyO1xcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodCAgOiBib2xkO1xcbiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwO1xcbiAgICAgICAgICAgICAgICBjdXJzb3IgICAgICAgOiBwb2ludGVyO1xcbiAgICAgICAgICAgICAgICBwe1xcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMDtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAmOmhvdmVyIHtcXG4gICAgICAgICAgICAgICAgICAgIC8vIGZvbnQtc2l6ZTogMS4xcmVtO1xcbiAgICAgICAgICAgICAgICAgICAgY29sb3IgOiBncmVlbjtcXG4gICAgICAgICAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIC53aXRobG9hZGVye1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAubG9hZGVye1xcbiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgICAgICAgICAgICAgIC8vIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICAgICAgICAgIC8vIGZsZXgtZGlyZWN0aW9uOiByb3ctcmV2ZXJzZTtcXG4gICAgICAgICAgICAgICAgLy8gbWFyZ2luIDowIGF1dG87XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICB9XFxuXFxuICAgIC5oaWdobGlnaHQge1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogeWVsbG93O1xcbiAgICB9XFxufVwiXX1dKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzRW1wdHlUZXh0Tm9kZTtcbi8qKlxuICogVGVzdHMgYSBodG1scGFyc2VyMiBub2RlIGFuZCByZXR1cm5zIHdoZXRoZXIgaXMgaXQgYSB0ZXh0IG5vZGUgYXQgdGhlIHN0YXJ0IGFuZCBlbmQgb2YgdGhlIGxpbmUgY29udGFpbmluZyBvbmx5XG4gKiB3aGl0ZSBzcGFjZS4gVGhpcyBhbGxvd3MgdGhlc2Ugbm9kZSB0eXBlcyB0byBiZSBleGNsdWRlZCBmcm9tIHRoZSByZW5kZXJpbmcgYmVjYXVzZSB0aGV5IGFyZSB1bm5lY2Vzc2FyeS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbm9kZSBUaGUgZWxlbWVudCBvYmplY3QgYXMgY3JlYXRlZCBieSBodG1scGFyc2VyMlxuICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgdGhlIG5vZGUgaXMgYW4gZW1wdHkgdGV4dCBub2RlXG4gKi9cbmZ1bmN0aW9uIGlzRW1wdHlUZXh0Tm9kZShub2RlKSB7XG4gIHJldHVybiBub2RlLnR5cGUgPT09ICd0ZXh0JyAmJiAvXFxyP1xcbi8udGVzdChub2RlLmRhdGEpICYmIG5vZGUuZGF0YS50cmltKCkgPT09ICcnO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9FbGVtZW50VHlwZSRUZXh0JEVsZTtcblxudmFyIF9odG1scGFyc2VyID0gcmVxdWlyZSgnaHRtbHBhcnNlcjInKTtcblxudmFyIF9UZXh0RWxlbWVudFR5cGUgPSByZXF1aXJlKCcuL1RleHRFbGVtZW50VHlwZScpO1xuXG52YXIgX1RleHRFbGVtZW50VHlwZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9UZXh0RWxlbWVudFR5cGUpO1xuXG52YXIgX1RhZ0VsZW1lbnRUeXBlID0gcmVxdWlyZSgnLi9UYWdFbGVtZW50VHlwZScpO1xuXG52YXIgX1RhZ0VsZW1lbnRUeXBlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RhZ0VsZW1lbnRUeXBlKTtcblxudmFyIF9TdHlsZUVsZW1lbnRUeXBlID0gcmVxdWlyZSgnLi9TdHlsZUVsZW1lbnRUeXBlJyk7XG5cbnZhciBfU3R5bGVFbGVtZW50VHlwZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdHlsZUVsZW1lbnRUeXBlKTtcblxudmFyIF9VbnN1cHBvcnRlZEVsZW1lbnRUeXBlID0gcmVxdWlyZSgnLi9VbnN1cHBvcnRlZEVsZW1lbnRUeXBlJyk7XG5cbnZhciBfVW5zdXBwb3J0ZWRFbGVtZW50VHlwZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9VbnN1cHBvcnRlZEVsZW1lbnRUeXBlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0gLypcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIE1hcCBlYWNoIGh0bWxwYXJzZXIyIGVsZW1lbnQgdHlwZSB0byBhIGZ1bmN0aW9uIHdoaWNoIHdpbGwgY29udmVydCB0aGF0IGVsZW1lbnQgdHlwZSB0byBhIFJlYWN0IGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIE5vdCBhbGwgb2YgdGhlIGVsZW1lbnQgdHlwZXMgYXJlIHN1cHBvcnRlZCBzbyB0aGUgVW5zdXBwb3J0ZWRFbGVtZW50VHlwZSBpcyB1c2VkIGZvciB0aGVtIHdoaWNoIHdpbGwgbm90IHJldHVybiBhbnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cblxuZXhwb3J0cy5kZWZhdWx0ID0gKF9FbGVtZW50VHlwZSRUZXh0JEVsZSA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX0VsZW1lbnRUeXBlJFRleHQkRWxlLCBfaHRtbHBhcnNlci5FbGVtZW50VHlwZS5UZXh0LCBfVGV4dEVsZW1lbnRUeXBlMi5kZWZhdWx0KSwgX2RlZmluZVByb3BlcnR5KF9FbGVtZW50VHlwZSRUZXh0JEVsZSwgX2h0bWxwYXJzZXIuRWxlbWVudFR5cGUuVGFnLCBfVGFnRWxlbWVudFR5cGUyLmRlZmF1bHQpLCBfZGVmaW5lUHJvcGVydHkoX0VsZW1lbnRUeXBlJFRleHQkRWxlLCBfaHRtbHBhcnNlci5FbGVtZW50VHlwZS5TdHlsZSwgX1N0eWxlRWxlbWVudFR5cGUyLmRlZmF1bHQpLCBfZGVmaW5lUHJvcGVydHkoX0VsZW1lbnRUeXBlJFRleHQkRWxlLCBfaHRtbHBhcnNlci5FbGVtZW50VHlwZS5EaXJlY3RpdmUsIF9VbnN1cHBvcnRlZEVsZW1lbnRUeXBlMi5kZWZhdWx0KSwgX2RlZmluZVByb3BlcnR5KF9FbGVtZW50VHlwZSRUZXh0JEVsZSwgX2h0bWxwYXJzZXIuRWxlbWVudFR5cGUuQ29tbWVudCwgX1Vuc3VwcG9ydGVkRWxlbWVudFR5cGUyLmRlZmF1bHQpLCBfZGVmaW5lUHJvcGVydHkoX0VsZW1lbnRUeXBlJFRleHQkRWxlLCBfaHRtbHBhcnNlci5FbGVtZW50VHlwZS5TY3JpcHQsIF9VbnN1cHBvcnRlZEVsZW1lbnRUeXBlMi5kZWZhdWx0KSwgX2RlZmluZVByb3BlcnR5KF9FbGVtZW50VHlwZSRUZXh0JEVsZSwgX2h0bWxwYXJzZXIuRWxlbWVudFR5cGUuQ0RBVEEsIF9VbnN1cHBvcnRlZEVsZW1lbnRUeXBlMi5kZWZhdWx0KSwgX2RlZmluZVByb3BlcnR5KF9FbGVtZW50VHlwZSRUZXh0JEVsZSwgX2h0bWxwYXJzZXIuRWxlbWVudFR5cGUuRG9jdHlwZSwgX1Vuc3VwcG9ydGVkRWxlbWVudFR5cGUyLmRlZmF1bHQpLCBfRWxlbWVudFR5cGUkVGV4dCRFbGUpOyIsInZhciBkZWNvZGVNYXAgPSByZXF1aXJlKFwiLi4vbWFwcy9kZWNvZGUuanNvblwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWNvZGVDb2RlUG9pbnQ7XG5cbi8vIG1vZGlmaWVkIHZlcnNpb24gb2YgaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvaGUvYmxvYi9tYXN0ZXIvc3JjL2hlLmpzI0w5NC1MMTE5XG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnQoY29kZVBvaW50KSB7XG4gICAgaWYgKChjb2RlUG9pbnQgPj0gMHhkODAwICYmIGNvZGVQb2ludCA8PSAweGRmZmYpIHx8IGNvZGVQb2ludCA+IDB4MTBmZmZmKSB7XG4gICAgICAgIHJldHVybiBcIlxcdUZGRkRcIjtcbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50IGluIGRlY29kZU1hcCkge1xuICAgICAgICBjb2RlUG9pbnQgPSBkZWNvZGVNYXBbY29kZVBvaW50XTtcbiAgICB9XG5cbiAgICB2YXIgb3V0cHV0ID0gXCJcIjtcblxuICAgIGlmIChjb2RlUG9pbnQgPiAweGZmZmYpIHtcbiAgICAgICAgY29kZVBvaW50IC09IDB4MTAwMDA7XG4gICAgICAgIG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+PiAxMCkgJiAweDNmZikgfCAweGQ4MDApO1xuICAgICAgICBjb2RlUG9pbnQgPSAweGRjMDAgfCAoY29kZVBvaW50ICYgMHgzZmYpO1xuICAgIH1cblxuICAgIG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGVQb2ludCk7XG4gICAgcmV0dXJuIG91dHB1dDtcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSID0gdHlwZW9mIFJlZmxlY3QgPT09ICdvYmplY3QnID8gUmVmbGVjdCA6IG51bGxcbnZhciBSZWZsZWN0QXBwbHkgPSBSICYmIHR5cGVvZiBSLmFwcGx5ID09PSAnZnVuY3Rpb24nXG4gID8gUi5hcHBseVxuICA6IGZ1bmN0aW9uIFJlZmxlY3RBcHBseSh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpO1xuICB9XG5cbnZhciBSZWZsZWN0T3duS2V5c1xuaWYgKFIgJiYgdHlwZW9mIFIub3duS2V5cyA9PT0gJ2Z1bmN0aW9uJykge1xuICBSZWZsZWN0T3duS2V5cyA9IFIub3duS2V5c1xufSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldClcbiAgICAgIC5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0YXJnZXQpKTtcbiAgfTtcbn0gZWxzZSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFByb2Nlc3NFbWl0V2FybmluZyh3YXJuaW5nKSB7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUud2FybikgY29uc29sZS53YXJuKHdhcm5pbmcpO1xufVxuXG52YXIgTnVtYmVySXNOYU4gPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gTnVtYmVySXNOYU4odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICBFdmVudEVtaXR0ZXIuaW5pdC5jYWxsKHRoaXMpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpO1xuICAgIH1cbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICB9XG59KTtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcblxuICBpZiAodGhpcy5fZXZlbnRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHtcbiAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59O1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgbiArICcuJyk7XG4gIH1cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiAkZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiAkZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT09IHVuZGVmaW5lZCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgdmFyIGVyO1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApXG4gICAgICBlciA9IGFyZ3NbMF07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi5cbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH1cbiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIGVycm9yLicgKyAoZXIgPyAnICgnICsgZXIubWVzc2FnZSArICcpJyA6ICcnKSk7XG4gICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcblxuICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIFJlZmxlY3RBcHBseShsaXN0ZW5lcnNbaV0sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKGV4aXN0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID1cbiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgfSBlbHNlIGlmIChwcmVwZW5kKSB7XG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBtID0gJGdldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgIGlmIChtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtICYmICFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZ1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIG9uY2VXcmFwcGVyKCkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIGlmICghdGhpcy5maXJlZCkge1xuICAgIHRoaXMudGFyZ2V0LnJlbW92ZUxpc3RlbmVyKHRoaXMudHlwZSwgdGhpcy53cmFwRm4pO1xuICAgIHRoaXMuZmlyZWQgPSB0cnVlO1xuICAgIFJlZmxlY3RBcHBseSh0aGlzLmxpc3RlbmVyLCB0aGlzLnRhcmdldCwgYXJncyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX29uY2VXcmFwKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIHN0YXRlID0geyBmaXJlZDogZmFsc2UsIHdyYXBGbjogdW5kZWZpbmVkLCB0YXJnZXQ6IHRhcmdldCwgdHlwZTogdHlwZSwgbGlzdGVuZXI6IGxpc3RlbmVyIH07XG4gIHZhciB3cmFwcGVkID0gb25jZVdyYXBwZXIuYmluZChzdGF0ZSk7XG4gIHdyYXBwZWQubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgc3RhdGUud3JhcEZuID0gd3JhcHBlZDtcbiAgcmV0dXJuIHdyYXBwZWQ7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UodHlwZSwgbGlzdGVuZXIpIHtcbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICB9XG4gIHRoaXMub24odHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kT25jZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kT25jZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgdGhpcy5wcmVwZW5kTGlzdGVuZXIodHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4vLyBFbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWYgYW5kIG9ubHkgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGxpc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBsaXN0WzBdO1xuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzLCBldmVudHMsIGk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gIGlmIChldmxpc3RlbmVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdW53cmFwID8gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl0gOiBbZXZsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHVud3JhcCA/XG4gICAgdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICg7IGluZGV4ICsgMSA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKVxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuIiwiLy8gRE9NLUxldmVsLTEtY29tcGxpYW50IHN0cnVjdHVyZVxudmFyIE5vZGVQcm90b3R5cGUgPSByZXF1aXJlKCcuL25vZGUnKTtcbnZhciBFbGVtZW50UHJvdG90eXBlID0gbW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlKE5vZGVQcm90b3R5cGUpO1xuXG52YXIgZG9tTHZsMSA9IHtcblx0dGFnTmFtZTogXCJuYW1lXCJcbn07XG5cbk9iamVjdC5rZXlzKGRvbUx2bDEpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdHZhciBzaG9ydGhhbmQgPSBkb21MdmwxW2tleV07XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFbGVtZW50UHJvdG90eXBlLCBrZXksIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXNbc2hvcnRoYW5kXSB8fCBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbih2YWwpIHtcblx0XHRcdHRoaXNbc2hvcnRoYW5kXSA9IHZhbDtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHR9KTtcbn0pO1xuIiwidmFyIERvbUhhbmRsZXIgPSByZXF1aXJlKFwiZG9taGFuZGxlclwiKTtcbnZhciBEb21VdGlscyA9IHJlcXVpcmUoXCJkb211dGlsc1wiKTtcblxuLy9UT0RPOiBtYWtlIHRoaXMgYSBzdHJlYW1hYmxlIGhhbmRsZXJcbmZ1bmN0aW9uIEZlZWRIYW5kbGVyKGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgdGhpcy5pbml0KGNhbGxiYWNrLCBvcHRpb25zKTtcbn1cblxucmVxdWlyZShcImluaGVyaXRzXCIpKEZlZWRIYW5kbGVyLCBEb21IYW5kbGVyKTtcblxuRmVlZEhhbmRsZXIucHJvdG90eXBlLmluaXQgPSBEb21IYW5kbGVyO1xuXG5mdW5jdGlvbiBnZXRFbGVtZW50cyh3aGF0LCB3aGVyZSkge1xuICAgIHJldHVybiBEb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZSh3aGF0LCB3aGVyZSwgdHJ1ZSk7XG59XG5mdW5jdGlvbiBnZXRPbmVFbGVtZW50KHdoYXQsIHdoZXJlKSB7XG4gICAgcmV0dXJuIERvbVV0aWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKHdoYXQsIHdoZXJlLCB0cnVlLCAxKVswXTtcbn1cbmZ1bmN0aW9uIGZldGNoKHdoYXQsIHdoZXJlLCByZWN1cnNlKSB7XG4gICAgcmV0dXJuIERvbVV0aWxzLmdldFRleHQoXG4gICAgICAgIERvbVV0aWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKHdoYXQsIHdoZXJlLCByZWN1cnNlLCAxKVxuICAgICkudHJpbSgpO1xufVxuXG5mdW5jdGlvbiBhZGRDb25kaXRpb25hbGx5KG9iaiwgcHJvcCwgd2hhdCwgd2hlcmUsIHJlY3Vyc2UpIHtcbiAgICB2YXIgdG1wID0gZmV0Y2god2hhdCwgd2hlcmUsIHJlY3Vyc2UpO1xuICAgIGlmICh0bXApIG9ialtwcm9wXSA9IHRtcDtcbn1cblxudmFyIGlzVmFsaWRGZWVkID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IFwicnNzXCIgfHwgdmFsdWUgPT09IFwiZmVlZFwiIHx8IHZhbHVlID09PSBcInJkZjpSREZcIjtcbn07XG5cbkZlZWRIYW5kbGVyLnByb3RvdHlwZS5vbmVuZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmZWVkID0ge30sXG4gICAgICAgIGZlZWRSb290ID0gZ2V0T25lRWxlbWVudChpc1ZhbGlkRmVlZCwgdGhpcy5kb20pLFxuICAgICAgICB0bXAsXG4gICAgICAgIGNoaWxkcztcblxuICAgIGlmIChmZWVkUm9vdCkge1xuICAgICAgICBpZiAoZmVlZFJvb3QubmFtZSA9PT0gXCJmZWVkXCIpIHtcbiAgICAgICAgICAgIGNoaWxkcyA9IGZlZWRSb290LmNoaWxkcmVuO1xuXG4gICAgICAgICAgICBmZWVkLnR5cGUgPSBcImF0b21cIjtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJpZFwiLCBcImlkXCIsIGNoaWxkcyk7XG4gICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGZlZWQsIFwidGl0bGVcIiwgXCJ0aXRsZVwiLCBjaGlsZHMpO1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICh0bXAgPSBnZXRPbmVFbGVtZW50KFwibGlua1wiLCBjaGlsZHMpKSAmJlxuICAgICAgICAgICAgICAgICh0bXAgPSB0bXAuYXR0cmlicykgJiZcbiAgICAgICAgICAgICAgICAodG1wID0gdG1wLmhyZWYpXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgZmVlZC5saW5rID0gdG1wO1xuICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcImRlc2NyaXB0aW9uXCIsIFwic3VidGl0bGVcIiwgY2hpbGRzKTtcbiAgICAgICAgICAgIGlmICgodG1wID0gZmV0Y2goXCJ1cGRhdGVkXCIsIGNoaWxkcykpKSBmZWVkLnVwZGF0ZWQgPSBuZXcgRGF0ZSh0bXApO1xuICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcImF1dGhvclwiLCBcImVtYWlsXCIsIGNoaWxkcywgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGZlZWQuaXRlbXMgPSBnZXRFbGVtZW50cyhcImVudHJ5XCIsIGNoaWxkcykubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgZW50cnkgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgdG1wO1xuXG4gICAgICAgICAgICAgICAgaXRlbSA9IGl0ZW0uY2hpbGRyZW47XG5cbiAgICAgICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGVudHJ5LCBcImlkXCIsIFwiaWRcIiwgaXRlbSk7XG4gICAgICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShlbnRyeSwgXCJ0aXRsZVwiLCBcInRpdGxlXCIsIGl0ZW0pO1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgKHRtcCA9IGdldE9uZUVsZW1lbnQoXCJsaW5rXCIsIGl0ZW0pKSAmJlxuICAgICAgICAgICAgICAgICAgICAodG1wID0gdG1wLmF0dHJpYnMpICYmXG4gICAgICAgICAgICAgICAgICAgICh0bXAgPSB0bXAuaHJlZilcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIGVudHJ5LmxpbmsgPSB0bXA7XG4gICAgICAgICAgICAgICAgaWYgKCh0bXAgPSBmZXRjaChcInN1bW1hcnlcIiwgaXRlbSkgfHwgZmV0Y2goXCJjb250ZW50XCIsIGl0ZW0pKSlcbiAgICAgICAgICAgICAgICAgICAgZW50cnkuZGVzY3JpcHRpb24gPSB0bXA7XG4gICAgICAgICAgICAgICAgaWYgKCh0bXAgPSBmZXRjaChcInVwZGF0ZWRcIiwgaXRlbSkpKVxuICAgICAgICAgICAgICAgICAgICBlbnRyeS5wdWJEYXRlID0gbmV3IERhdGUodG1wKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoaWxkcyA9IGdldE9uZUVsZW1lbnQoXCJjaGFubmVsXCIsIGZlZWRSb290LmNoaWxkcmVuKS5jaGlsZHJlbjtcblxuICAgICAgICAgICAgZmVlZC50eXBlID0gZmVlZFJvb3QubmFtZS5zdWJzdHIoMCwgMyk7XG4gICAgICAgICAgICBmZWVkLmlkID0gXCJcIjtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJ0aXRsZVwiLCBcInRpdGxlXCIsIGNoaWxkcyk7XG4gICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGZlZWQsIFwibGlua1wiLCBcImxpbmtcIiwgY2hpbGRzKTtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJkZXNjcmlwdGlvblwiLCBcImRlc2NyaXB0aW9uXCIsIGNoaWxkcyk7XG4gICAgICAgICAgICBpZiAoKHRtcCA9IGZldGNoKFwibGFzdEJ1aWxkRGF0ZVwiLCBjaGlsZHMpKSlcbiAgICAgICAgICAgICAgICBmZWVkLnVwZGF0ZWQgPSBuZXcgRGF0ZSh0bXApO1xuICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcImF1dGhvclwiLCBcIm1hbmFnaW5nRWRpdG9yXCIsIGNoaWxkcywgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGZlZWQuaXRlbXMgPSBnZXRFbGVtZW50cyhcIml0ZW1cIiwgZmVlZFJvb3QuY2hpbGRyZW4pLm1hcChmdW5jdGlvbihcbiAgICAgICAgICAgICAgICBpdGVtXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB2YXIgZW50cnkgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgdG1wO1xuXG4gICAgICAgICAgICAgICAgaXRlbSA9IGl0ZW0uY2hpbGRyZW47XG5cbiAgICAgICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGVudHJ5LCBcImlkXCIsIFwiZ3VpZFwiLCBpdGVtKTtcbiAgICAgICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGVudHJ5LCBcInRpdGxlXCIsIFwidGl0bGVcIiwgaXRlbSk7XG4gICAgICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShlbnRyeSwgXCJsaW5rXCIsIFwibGlua1wiLCBpdGVtKTtcbiAgICAgICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGVudHJ5LCBcImRlc2NyaXB0aW9uXCIsIFwiZGVzY3JpcHRpb25cIiwgaXRlbSk7XG4gICAgICAgICAgICAgICAgaWYgKCh0bXAgPSBmZXRjaChcInB1YkRhdGVcIiwgaXRlbSkpKVxuICAgICAgICAgICAgICAgICAgICBlbnRyeS5wdWJEYXRlID0gbmV3IERhdGUodG1wKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmRvbSA9IGZlZWQ7XG4gICAgRG9tSGFuZGxlci5wcm90b3R5cGUuX2hhbmRsZUNhbGxiYWNrLmNhbGwoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIGZlZWRSb290ID8gbnVsbCA6IEVycm9yKFwiY291bGRuJ3QgZmluZCByb290IG9mIGZlZWRcIilcbiAgICApO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGZWVkSGFuZGxlcjtcbiIsInZhciBFbGVtZW50VHlwZSA9IHJlcXVpcmUoXCJkb21lbGVtZW50dHlwZVwiKSxcbiAgICBnZXRPdXRlckhUTUwgPSByZXF1aXJlKFwiZG9tLXNlcmlhbGl6ZXJcIiksXG4gICAgaXNUYWcgPSBFbGVtZW50VHlwZS5pc1RhZztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGdldElubmVySFRNTDogZ2V0SW5uZXJIVE1MLFxuXHRnZXRPdXRlckhUTUw6IGdldE91dGVySFRNTCxcblx0Z2V0VGV4dDogZ2V0VGV4dFxufTtcblxuZnVuY3Rpb24gZ2V0SW5uZXJIVE1MKGVsZW0sIG9wdHMpe1xuXHRyZXR1cm4gZWxlbS5jaGlsZHJlbiA/IGVsZW0uY2hpbGRyZW4ubWFwKGZ1bmN0aW9uKGVsZW0pe1xuXHRcdHJldHVybiBnZXRPdXRlckhUTUwoZWxlbSwgb3B0cyk7XG5cdH0pLmpvaW4oXCJcIikgOiBcIlwiO1xufVxuXG5mdW5jdGlvbiBnZXRUZXh0KGVsZW0pe1xuXHRpZihBcnJheS5pc0FycmF5KGVsZW0pKSByZXR1cm4gZWxlbS5tYXAoZ2V0VGV4dCkuam9pbihcIlwiKTtcblx0aWYoaXNUYWcoZWxlbSkgfHwgZWxlbS50eXBlID09PSBFbGVtZW50VHlwZS5DREFUQSkgcmV0dXJuIGdldFRleHQoZWxlbS5jaGlsZHJlbik7XG5cdGlmKGVsZW0udHlwZSA9PT0gRWxlbWVudFR5cGUuVGV4dCkgcmV0dXJuIGVsZW0uZGF0YTtcblx0cmV0dXJuIFwiXCI7XG59XG4iLCIvKlxuICBNb2R1bGUgZGVwZW5kZW5jaWVzXG4qL1xudmFyIEVsZW1lbnRUeXBlID0gcmVxdWlyZSgnZG9tZWxlbWVudHR5cGUnKTtcbnZhciBlbnRpdGllcyA9IHJlcXVpcmUoJ2VudGl0aWVzJyk7XG5cbi8qIG1peGVkLWNhc2UgU1ZHIGFuZCBNYXRoTUwgdGFncyAmIGF0dHJpYnV0ZXNcbiAgIHJlY29nbml6ZWQgYnkgdGhlIEhUTUwgcGFyc2VyLCBzZWVcbiAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3BhcnNpbmcuaHRtbCNwYXJzaW5nLW1haW4taW5mb3JlaWduXG4qL1xudmFyIGZvcmVpZ25OYW1lcyA9IHJlcXVpcmUoJy4vZm9yZWlnbk5hbWVzLmpzb24nKTtcbmZvcmVpZ25OYW1lcy5lbGVtZW50TmFtZXMuX19wcm90b19fID0gbnVsbDsgLyogdXNlIGFzIGEgc2ltcGxlIGRpY3Rpb25hcnkgKi9cbmZvcmVpZ25OYW1lcy5hdHRyaWJ1dGVOYW1lcy5fX3Byb3RvX18gPSBudWxsO1xuXG52YXIgdW5lbmNvZGVkRWxlbWVudHMgPSB7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgc3R5bGU6IHRydWUsXG4gIHNjcmlwdDogdHJ1ZSxcbiAgeG1wOiB0cnVlLFxuICBpZnJhbWU6IHRydWUsXG4gIG5vZW1iZWQ6IHRydWUsXG4gIG5vZnJhbWVzOiB0cnVlLFxuICBwbGFpbnRleHQ6IHRydWUsXG4gIG5vc2NyaXB0OiB0cnVlXG59O1xuXG4vKlxuICBGb3JtYXQgYXR0cmlidXRlc1xuKi9cbmZ1bmN0aW9uIGZvcm1hdEF0dHJzKGF0dHJpYnV0ZXMsIG9wdHMpIHtcbiAgaWYgKCFhdHRyaWJ1dGVzKSByZXR1cm47XG5cbiAgdmFyIG91dHB1dCA9ICcnO1xuICB2YXIgdmFsdWU7XG5cbiAgLy8gTG9vcCB0aHJvdWdoIHRoZSBhdHRyaWJ1dGVzXG4gIGZvciAodmFyIGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgdmFsdWUgPSBhdHRyaWJ1dGVzW2tleV07XG4gICAgaWYgKG91dHB1dCkge1xuICAgICAgb3V0cHV0ICs9ICcgJztcbiAgICB9XG5cbiAgICBpZiAob3B0cy54bWxNb2RlID09PSAnZm9yZWlnbicpIHtcbiAgICAgIC8qIGZpeCB1cCBtaXhlZC1jYXNlIGF0dHJpYnV0ZSBuYW1lcyAqL1xuICAgICAga2V5ID0gZm9yZWlnbk5hbWVzLmF0dHJpYnV0ZU5hbWVzW2tleV0gfHwga2V5O1xuICAgIH1cbiAgICBvdXRwdXQgKz0ga2V5O1xuICAgIGlmICgodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09ICcnKSB8fCBvcHRzLnhtbE1vZGUpIHtcbiAgICAgIG91dHB1dCArPVxuICAgICAgICAnPVwiJyArXG4gICAgICAgIChvcHRzLmRlY29kZUVudGl0aWVzXG4gICAgICAgICAgPyBlbnRpdGllcy5lbmNvZGVYTUwodmFsdWUpXG4gICAgICAgICAgOiB2YWx1ZS5yZXBsYWNlKC9cXFwiL2csICcmcXVvdDsnKSkgK1xuICAgICAgICAnXCInO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbi8qXG4gIFNlbGYtZW5jbG9zaW5nIHRhZ3MgKHN0b2xlbiBmcm9tIG5vZGUtaHRtbHBhcnNlcilcbiovXG52YXIgc2luZ2xlVGFnID0ge1xuICBfX3Byb3RvX186IG51bGwsXG4gIGFyZWE6IHRydWUsXG4gIGJhc2U6IHRydWUsXG4gIGJhc2Vmb250OiB0cnVlLFxuICBicjogdHJ1ZSxcbiAgY29sOiB0cnVlLFxuICBjb21tYW5kOiB0cnVlLFxuICBlbWJlZDogdHJ1ZSxcbiAgZnJhbWU6IHRydWUsXG4gIGhyOiB0cnVlLFxuICBpbWc6IHRydWUsXG4gIGlucHV0OiB0cnVlLFxuICBpc2luZGV4OiB0cnVlLFxuICBrZXlnZW46IHRydWUsXG4gIGxpbms6IHRydWUsXG4gIG1ldGE6IHRydWUsXG4gIHBhcmFtOiB0cnVlLFxuICBzb3VyY2U6IHRydWUsXG4gIHRyYWNrOiB0cnVlLFxuICB3YnI6IHRydWVcbn07XG5cbnZhciByZW5kZXIgPSAobW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihkb20sIG9wdHMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGRvbSkgJiYgIWRvbS5jaGVlcmlvKSBkb20gPSBbZG9tXTtcbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgdmFyIG91dHB1dCA9ICcnO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGVsZW0gPSBkb21baV07XG5cbiAgICBpZiAoZWxlbS50eXBlID09PSAncm9vdCcpIG91dHB1dCArPSByZW5kZXIoZWxlbS5jaGlsZHJlbiwgb3B0cyk7XG4gICAgZWxzZSBpZiAoRWxlbWVudFR5cGUuaXNUYWcoZWxlbSkpIG91dHB1dCArPSByZW5kZXJUYWcoZWxlbSwgb3B0cyk7XG4gICAgZWxzZSBpZiAoZWxlbS50eXBlID09PSBFbGVtZW50VHlwZS5EaXJlY3RpdmUpXG4gICAgICBvdXRwdXQgKz0gcmVuZGVyRGlyZWN0aXZlKGVsZW0pO1xuICAgIGVsc2UgaWYgKGVsZW0udHlwZSA9PT0gRWxlbWVudFR5cGUuQ29tbWVudCkgb3V0cHV0ICs9IHJlbmRlckNvbW1lbnQoZWxlbSk7XG4gICAgZWxzZSBpZiAoZWxlbS50eXBlID09PSBFbGVtZW50VHlwZS5DREFUQSkgb3V0cHV0ICs9IHJlbmRlckNkYXRhKGVsZW0pO1xuICAgIGVsc2Ugb3V0cHV0ICs9IHJlbmRlclRleHQoZWxlbSwgb3B0cyk7XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufSk7XG5cbmNvbnN0IGZvcmVpZ25Nb2RlSW50ZWdyYXRpb25Qb2ludHMgPSBbXG4gICdtaScsXG4gICdtbycsXG4gICdtbicsXG4gICdtcycsXG4gICdtdGV4dCcsXG4gICdhbm5vdGF0aW9uLXhtbCcsXG4gICdmb3JlaWduT2JqZWN0JyxcbiAgJ2Rlc2MnLFxuICAndGl0bGUnXG5dO1xuXG5mdW5jdGlvbiByZW5kZXJUYWcoZWxlbSwgb3B0cykge1xuICAvLyBIYW5kbGUgU1ZHIC8gTWF0aE1MIGluIEhUTUxcbiAgaWYgKG9wdHMueG1sTW9kZSA9PT0gJ2ZvcmVpZ24nKSB7XG4gICAgLyogZml4IHVwIG1peGVkLWNhc2UgZWxlbWVudCBuYW1lcyAqL1xuICAgIGVsZW0ubmFtZSA9IGZvcmVpZ25OYW1lcy5lbGVtZW50TmFtZXNbZWxlbS5uYW1lXSB8fCBlbGVtLm5hbWU7XG4gICAgLyogZXhpdCBmb3JlaWduIG1vZGUgYXQgaW50ZWdyYXRpb24gcG9pbnRzICovXG4gICAgaWYgKFxuICAgICAgZWxlbS5wYXJlbnQgJiZcbiAgICAgIGZvcmVpZ25Nb2RlSW50ZWdyYXRpb25Qb2ludHMuaW5kZXhPZihlbGVtLnBhcmVudC5uYW1lKSA+PSAwXG4gICAgKVxuICAgICAgb3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdHMsIHsgeG1sTW9kZTogZmFsc2UgfSk7XG4gIH1cbiAgaWYgKCFvcHRzLnhtbE1vZGUgJiYgWydzdmcnLCAnbWF0aCddLmluZGV4T2YoZWxlbS5uYW1lKSA+PSAwKSB7XG4gICAgb3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdHMsIHsgeG1sTW9kZTogJ2ZvcmVpZ24nIH0pO1xuICB9XG5cbiAgdmFyIHRhZyA9ICc8JyArIGVsZW0ubmFtZTtcbiAgdmFyIGF0dHJpYnMgPSBmb3JtYXRBdHRycyhlbGVtLmF0dHJpYnMsIG9wdHMpO1xuXG4gIGlmIChhdHRyaWJzKSB7XG4gICAgdGFnICs9ICcgJyArIGF0dHJpYnM7XG4gIH1cblxuICBpZiAob3B0cy54bWxNb2RlICYmICghZWxlbS5jaGlsZHJlbiB8fCBlbGVtLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkpIHtcbiAgICB0YWcgKz0gJy8+JztcbiAgfSBlbHNlIHtcbiAgICB0YWcgKz0gJz4nO1xuICAgIGlmIChlbGVtLmNoaWxkcmVuKSB7XG4gICAgICB0YWcgKz0gcmVuZGVyKGVsZW0uY2hpbGRyZW4sIG9wdHMpO1xuICAgIH1cblxuICAgIGlmICghc2luZ2xlVGFnW2VsZW0ubmFtZV0gfHwgb3B0cy54bWxNb2RlKSB7XG4gICAgICB0YWcgKz0gJzwvJyArIGVsZW0ubmFtZSArICc+JztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFnO1xufVxuXG5mdW5jdGlvbiByZW5kZXJEaXJlY3RpdmUoZWxlbSkge1xuICByZXR1cm4gJzwnICsgZWxlbS5kYXRhICsgJz4nO1xufVxuXG5mdW5jdGlvbiByZW5kZXJUZXh0KGVsZW0sIG9wdHMpIHtcbiAgdmFyIGRhdGEgPSBlbGVtLmRhdGEgfHwgJyc7XG5cbiAgLy8gaWYgZW50aXRpZXMgd2VyZW4ndCBkZWNvZGVkLCBubyBuZWVkIHRvIGVuY29kZSB0aGVtIGJhY2tcbiAgaWYgKFxuICAgIG9wdHMuZGVjb2RlRW50aXRpZXMgJiZcbiAgICAhKGVsZW0ucGFyZW50ICYmIGVsZW0ucGFyZW50Lm5hbWUgaW4gdW5lbmNvZGVkRWxlbWVudHMpXG4gICkge1xuICAgIGRhdGEgPSBlbnRpdGllcy5lbmNvZGVYTUwoZGF0YSk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gcmVuZGVyQ2RhdGEoZWxlbSkge1xuICByZXR1cm4gJzwhW0NEQVRBWycgKyBlbGVtLmNoaWxkcmVuWzBdLmRhdGEgKyAnXV0+Jztcbn1cblxuZnVuY3Rpb24gcmVuZGVyQ29tbWVudChlbGVtKSB7XG4gIHJldHVybiAnPCEtLScgKyBlbGVtLmRhdGEgKyAnLS0+Jztcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBUZXN0cyB3aGV0aGVyIGFuIGVsZW1lbnQgaXMgYSB0YWcgb3Igbm90LlxuICpcbiAqIEBwYXJhbSBlbGVtIEVsZW1lbnQgdG8gdGVzdFxuICovXG5mdW5jdGlvbiBpc1RhZyhlbGVtKSB7XG4gICAgcmV0dXJuIChlbGVtLnR5cGUgPT09IFwidGFnXCIgLyogVGFnICovIHx8XG4gICAgICAgIGVsZW0udHlwZSA9PT0gXCJzY3JpcHRcIiAvKiBTY3JpcHQgKi8gfHxcbiAgICAgICAgZWxlbS50eXBlID09PSBcInN0eWxlXCIgLyogU3R5bGUgKi8pO1xufVxuZXhwb3J0cy5pc1RhZyA9IGlzVGFnO1xuLy8gRXhwb3J0cyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbmV4cG9ydHMuVGV4dCA9IFwidGV4dFwiIC8qIFRleHQgKi87IC8vVGV4dFxuZXhwb3J0cy5EaXJlY3RpdmUgPSBcImRpcmVjdGl2ZVwiIC8qIERpcmVjdGl2ZSAqLzsgLy88PyAuLi4gPz5cbmV4cG9ydHMuQ29tbWVudCA9IFwiY29tbWVudFwiIC8qIENvbW1lbnQgKi87IC8vPCEtLSAuLi4gLS0+XG5leHBvcnRzLlNjcmlwdCA9IFwic2NyaXB0XCIgLyogU2NyaXB0ICovOyAvLzxzY3JpcHQ+IHRhZ3NcbmV4cG9ydHMuU3R5bGUgPSBcInN0eWxlXCIgLyogU3R5bGUgKi87IC8vPHN0eWxlPiB0YWdzXG5leHBvcnRzLlRhZyA9IFwidGFnXCIgLyogVGFnICovOyAvL0FueSB0YWdcbmV4cG9ydHMuQ0RBVEEgPSBcImNkYXRhXCIgLyogQ0RBVEEgKi87IC8vPCFbQ0RBVEFbIC4uLiBdXT5cbmV4cG9ydHMuRG9jdHlwZSA9IFwiZG9jdHlwZVwiIC8qIERvY3R5cGUgKi87XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBkZWNvZGVfMSA9IHJlcXVpcmUoXCIuL2RlY29kZVwiKTtcbnZhciBlbmNvZGVfMSA9IHJlcXVpcmUoXCIuL2VuY29kZVwiKTtcbmZ1bmN0aW9uIGRlY29kZShkYXRhLCBsZXZlbCkge1xuICAgIHJldHVybiAoIWxldmVsIHx8IGxldmVsIDw9IDAgPyBkZWNvZGVfMS5kZWNvZGVYTUwgOiBkZWNvZGVfMS5kZWNvZGVIVE1MKShkYXRhKTtcbn1cbmV4cG9ydHMuZGVjb2RlID0gZGVjb2RlO1xuZnVuY3Rpb24gZGVjb2RlU3RyaWN0KGRhdGEsIGxldmVsKSB7XG4gICAgcmV0dXJuICghbGV2ZWwgfHwgbGV2ZWwgPD0gMCA/IGRlY29kZV8xLmRlY29kZVhNTCA6IGRlY29kZV8xLmRlY29kZUhUTUxTdHJpY3QpKGRhdGEpO1xufVxuZXhwb3J0cy5kZWNvZGVTdHJpY3QgPSBkZWNvZGVTdHJpY3Q7XG5mdW5jdGlvbiBlbmNvZGUoZGF0YSwgbGV2ZWwpIHtcbiAgICByZXR1cm4gKCFsZXZlbCB8fCBsZXZlbCA8PSAwID8gZW5jb2RlXzEuZW5jb2RlWE1MIDogZW5jb2RlXzEuZW5jb2RlSFRNTCkoZGF0YSk7XG59XG5leHBvcnRzLmVuY29kZSA9IGVuY29kZTtcbnZhciBlbmNvZGVfMiA9IHJlcXVpcmUoXCIuL2VuY29kZVwiKTtcbmV4cG9ydHMuZW5jb2RlWE1MID0gZW5jb2RlXzIuZW5jb2RlWE1MO1xuZXhwb3J0cy5lbmNvZGVIVE1MID0gZW5jb2RlXzIuZW5jb2RlSFRNTDtcbmV4cG9ydHMuZXNjYXBlID0gZW5jb2RlXzIuZXNjYXBlO1xuLy8gTGVnYWN5IGFsaWFzZXNcbmV4cG9ydHMuZW5jb2RlSFRNTDQgPSBlbmNvZGVfMi5lbmNvZGVIVE1MO1xuZXhwb3J0cy5lbmNvZGVIVE1MNSA9IGVuY29kZV8yLmVuY29kZUhUTUw7XG52YXIgZGVjb2RlXzIgPSByZXF1aXJlKFwiLi9kZWNvZGVcIik7XG5leHBvcnRzLmRlY29kZVhNTCA9IGRlY29kZV8yLmRlY29kZVhNTDtcbmV4cG9ydHMuZGVjb2RlSFRNTCA9IGRlY29kZV8yLmRlY29kZUhUTUw7XG5leHBvcnRzLmRlY29kZUhUTUxTdHJpY3QgPSBkZWNvZGVfMi5kZWNvZGVIVE1MU3RyaWN0O1xuLy8gTGVnYWN5IGFsaWFzZXNcbmV4cG9ydHMuZGVjb2RlSFRNTDQgPSBkZWNvZGVfMi5kZWNvZGVIVE1MO1xuZXhwb3J0cy5kZWNvZGVIVE1MNSA9IGRlY29kZV8yLmRlY29kZUhUTUw7XG5leHBvcnRzLmRlY29kZUhUTUw0U3RyaWN0ID0gZGVjb2RlXzIuZGVjb2RlSFRNTFN0cmljdDtcbmV4cG9ydHMuZGVjb2RlSFRNTDVTdHJpY3QgPSBkZWNvZGVfMi5kZWNvZGVIVE1MU3RyaWN0O1xuZXhwb3J0cy5kZWNvZGVYTUxTdHJpY3QgPSBkZWNvZGVfMi5kZWNvZGVYTUw7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBkZWNvZGVfanNvbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21hcHMvZGVjb2RlLmpzb25cIikpO1xuLy8gbW9kaWZpZWQgdmVyc2lvbiBvZiBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9oZS9ibG9iL21hc3Rlci9zcmMvaGUuanMjTDk0LUwxMTlcbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludChjb2RlUG9pbnQpIHtcbiAgICBpZiAoKGNvZGVQb2ludCA+PSAweGQ4MDAgJiYgY29kZVBvaW50IDw9IDB4ZGZmZikgfHwgY29kZVBvaW50ID4gMHgxMGZmZmYpIHtcbiAgICAgICAgcmV0dXJuIFwiXFx1RkZGRFwiO1xuICAgIH1cbiAgICBpZiAoY29kZVBvaW50IGluIGRlY29kZV9qc29uXzEuZGVmYXVsdCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNvZGVQb2ludCA9IGRlY29kZV9qc29uXzEuZGVmYXVsdFtjb2RlUG9pbnRdO1xuICAgIH1cbiAgICB2YXIgb3V0cHV0ID0gXCJcIjtcbiAgICBpZiAoY29kZVBvaW50ID4gMHhmZmZmKSB7XG4gICAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwO1xuICAgICAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+Pj4gMTApICYgMHgzZmYpIHwgMHhkODAwKTtcbiAgICAgICAgY29kZVBvaW50ID0gMHhkYzAwIHwgKGNvZGVQb2ludCAmIDB4M2ZmKTtcbiAgICB9XG4gICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcbiAgICByZXR1cm4gb3V0cHV0O1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gZGVjb2RlQ29kZVBvaW50O1xuIiwidmFyIGdldENoaWxkcmVuID0gZXhwb3J0cy5nZXRDaGlsZHJlbiA9IGZ1bmN0aW9uKGVsZW0pe1xuXHRyZXR1cm4gZWxlbS5jaGlsZHJlbjtcbn07XG5cbnZhciBnZXRQYXJlbnQgPSBleHBvcnRzLmdldFBhcmVudCA9IGZ1bmN0aW9uKGVsZW0pe1xuXHRyZXR1cm4gZWxlbS5wYXJlbnQ7XG59O1xuXG5leHBvcnRzLmdldFNpYmxpbmdzID0gZnVuY3Rpb24oZWxlbSl7XG5cdHZhciBwYXJlbnQgPSBnZXRQYXJlbnQoZWxlbSk7XG5cdHJldHVybiBwYXJlbnQgPyBnZXRDaGlsZHJlbihwYXJlbnQpIDogW2VsZW1dO1xufTtcblxuZXhwb3J0cy5nZXRBdHRyaWJ1dGVWYWx1ZSA9IGZ1bmN0aW9uKGVsZW0sIG5hbWUpe1xuXHRyZXR1cm4gZWxlbS5hdHRyaWJzICYmIGVsZW0uYXR0cmlic1tuYW1lXTtcbn07XG5cbmV4cG9ydHMuaGFzQXR0cmliID0gZnVuY3Rpb24oZWxlbSwgbmFtZSl7XG5cdHJldHVybiAhIWVsZW0uYXR0cmlicyAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGVsZW0uYXR0cmlicywgbmFtZSk7XG59O1xuXG5leHBvcnRzLmdldE5hbWUgPSBmdW5jdGlvbihlbGVtKXtcblx0cmV0dXJuIGVsZW0ubmFtZTtcbn07XG4iLCJleHBvcnRzLnJlbW92ZUVsZW1lbnQgPSBmdW5jdGlvbihlbGVtKXtcblx0aWYoZWxlbS5wcmV2KSBlbGVtLnByZXYubmV4dCA9IGVsZW0ubmV4dDtcblx0aWYoZWxlbS5uZXh0KSBlbGVtLm5leHQucHJldiA9IGVsZW0ucHJldjtcblxuXHRpZihlbGVtLnBhcmVudCl7XG5cdFx0dmFyIGNoaWxkcyA9IGVsZW0ucGFyZW50LmNoaWxkcmVuO1xuXHRcdGNoaWxkcy5zcGxpY2UoY2hpbGRzLmxhc3RJbmRleE9mKGVsZW0pLCAxKTtcblx0fVxufTtcblxuZXhwb3J0cy5yZXBsYWNlRWxlbWVudCA9IGZ1bmN0aW9uKGVsZW0sIHJlcGxhY2VtZW50KXtcblx0dmFyIHByZXYgPSByZXBsYWNlbWVudC5wcmV2ID0gZWxlbS5wcmV2O1xuXHRpZihwcmV2KXtcblx0XHRwcmV2Lm5leHQgPSByZXBsYWNlbWVudDtcblx0fVxuXG5cdHZhciBuZXh0ID0gcmVwbGFjZW1lbnQubmV4dCA9IGVsZW0ubmV4dDtcblx0aWYobmV4dCl7XG5cdFx0bmV4dC5wcmV2ID0gcmVwbGFjZW1lbnQ7XG5cdH1cblxuXHR2YXIgcGFyZW50ID0gcmVwbGFjZW1lbnQucGFyZW50ID0gZWxlbS5wYXJlbnQ7XG5cdGlmKHBhcmVudCl7XG5cdFx0dmFyIGNoaWxkcyA9IHBhcmVudC5jaGlsZHJlbjtcblx0XHRjaGlsZHNbY2hpbGRzLmxhc3RJbmRleE9mKGVsZW0pXSA9IHJlcGxhY2VtZW50O1xuXHR9XG59O1xuXG5leHBvcnRzLmFwcGVuZENoaWxkID0gZnVuY3Rpb24oZWxlbSwgY2hpbGQpe1xuXHRjaGlsZC5wYXJlbnQgPSBlbGVtO1xuXG5cdGlmKGVsZW0uY2hpbGRyZW4ucHVzaChjaGlsZCkgIT09IDEpe1xuXHRcdHZhciBzaWJsaW5nID0gZWxlbS5jaGlsZHJlbltlbGVtLmNoaWxkcmVuLmxlbmd0aCAtIDJdO1xuXHRcdHNpYmxpbmcubmV4dCA9IGNoaWxkO1xuXHRcdGNoaWxkLnByZXYgPSBzaWJsaW5nO1xuXHRcdGNoaWxkLm5leHQgPSBudWxsO1xuXHR9XG59O1xuXG5leHBvcnRzLmFwcGVuZCA9IGZ1bmN0aW9uKGVsZW0sIG5leHQpe1xuXHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnQsXG5cdFx0Y3Vyck5leHQgPSBlbGVtLm5leHQ7XG5cblx0bmV4dC5uZXh0ID0gY3Vyck5leHQ7XG5cdG5leHQucHJldiA9IGVsZW07XG5cdGVsZW0ubmV4dCA9IG5leHQ7XG5cdG5leHQucGFyZW50ID0gcGFyZW50O1xuXG5cdGlmKGN1cnJOZXh0KXtcblx0XHRjdXJyTmV4dC5wcmV2ID0gbmV4dDtcblx0XHRpZihwYXJlbnQpe1xuXHRcdFx0dmFyIGNoaWxkcyA9IHBhcmVudC5jaGlsZHJlbjtcblx0XHRcdGNoaWxkcy5zcGxpY2UoY2hpbGRzLmxhc3RJbmRleE9mKGN1cnJOZXh0KSwgMCwgbmV4dCk7XG5cdFx0fVxuXHR9IGVsc2UgaWYocGFyZW50KXtcblx0XHRwYXJlbnQuY2hpbGRyZW4ucHVzaChuZXh0KTtcblx0fVxufTtcblxuZXhwb3J0cy5wcmVwZW5kID0gZnVuY3Rpb24oZWxlbSwgcHJldil7XG5cdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudDtcblx0aWYocGFyZW50KXtcblx0XHR2YXIgY2hpbGRzID0gcGFyZW50LmNoaWxkcmVuO1xuXHRcdGNoaWxkcy5zcGxpY2UoY2hpbGRzLmxhc3RJbmRleE9mKGVsZW0pLCAwLCBwcmV2KTtcblx0fVxuXG5cdGlmKGVsZW0ucHJldil7XG5cdFx0ZWxlbS5wcmV2Lm5leHQgPSBwcmV2O1xuXHR9XG5cdFxuXHRwcmV2LnBhcmVudCA9IHBhcmVudDtcblx0cHJldi5wcmV2ID0gZWxlbS5wcmV2O1xuXHRwcmV2Lm5leHQgPSBlbGVtO1xuXHRlbGVtLnByZXYgPSBwcmV2O1xufTtcblxuXG4iLCJ2YXIgaXNUYWcgPSByZXF1aXJlKFwiZG9tZWxlbWVudHR5cGVcIikuaXNUYWc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRmaWx0ZXI6IGZpbHRlcixcblx0ZmluZDogZmluZCxcblx0ZmluZE9uZUNoaWxkOiBmaW5kT25lQ2hpbGQsXG5cdGZpbmRPbmU6IGZpbmRPbmUsXG5cdGV4aXN0c09uZTogZXhpc3RzT25lLFxuXHRmaW5kQWxsOiBmaW5kQWxsXG59O1xuXG5mdW5jdGlvbiBmaWx0ZXIodGVzdCwgZWxlbWVudCwgcmVjdXJzZSwgbGltaXQpe1xuXHRpZighQXJyYXkuaXNBcnJheShlbGVtZW50KSkgZWxlbWVudCA9IFtlbGVtZW50XTtcblxuXHRpZih0eXBlb2YgbGltaXQgIT09IFwibnVtYmVyXCIgfHwgIWlzRmluaXRlKGxpbWl0KSl7XG5cdFx0bGltaXQgPSBJbmZpbml0eTtcblx0fVxuXHRyZXR1cm4gZmluZCh0ZXN0LCBlbGVtZW50LCByZWN1cnNlICE9PSBmYWxzZSwgbGltaXQpO1xufVxuXG5mdW5jdGlvbiBmaW5kKHRlc3QsIGVsZW1zLCByZWN1cnNlLCBsaW1pdCl7XG5cdHZhciByZXN1bHQgPSBbXSwgY2hpbGRzO1xuXG5cdGZvcih2YXIgaSA9IDAsIGogPSBlbGVtcy5sZW5ndGg7IGkgPCBqOyBpKyspe1xuXHRcdGlmKHRlc3QoZWxlbXNbaV0pKXtcblx0XHRcdHJlc3VsdC5wdXNoKGVsZW1zW2ldKTtcblx0XHRcdGlmKC0tbGltaXQgPD0gMCkgYnJlYWs7XG5cdFx0fVxuXG5cdFx0Y2hpbGRzID0gZWxlbXNbaV0uY2hpbGRyZW47XG5cdFx0aWYocmVjdXJzZSAmJiBjaGlsZHMgJiYgY2hpbGRzLmxlbmd0aCA+IDApe1xuXHRcdFx0Y2hpbGRzID0gZmluZCh0ZXN0LCBjaGlsZHMsIHJlY3Vyc2UsIGxpbWl0KTtcblx0XHRcdHJlc3VsdCA9IHJlc3VsdC5jb25jYXQoY2hpbGRzKTtcblx0XHRcdGxpbWl0IC09IGNoaWxkcy5sZW5ndGg7XG5cdFx0XHRpZihsaW1pdCA8PSAwKSBicmVhaztcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBmaW5kT25lQ2hpbGQodGVzdCwgZWxlbXMpe1xuXHRmb3IodmFyIGkgPSAwLCBsID0gZWxlbXMubGVuZ3RoOyBpIDwgbDsgaSsrKXtcblx0XHRpZih0ZXN0KGVsZW1zW2ldKSkgcmV0dXJuIGVsZW1zW2ldO1xuXHR9XG5cblx0cmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGZpbmRPbmUodGVzdCwgZWxlbXMpe1xuXHR2YXIgZWxlbSA9IG51bGw7XG5cblx0Zm9yKHZhciBpID0gMCwgbCA9IGVsZW1zLmxlbmd0aDsgaSA8IGwgJiYgIWVsZW07IGkrKyl7XG5cdFx0aWYoIWlzVGFnKGVsZW1zW2ldKSl7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9IGVsc2UgaWYodGVzdChlbGVtc1tpXSkpe1xuXHRcdFx0ZWxlbSA9IGVsZW1zW2ldO1xuXHRcdH0gZWxzZSBpZihlbGVtc1tpXS5jaGlsZHJlbi5sZW5ndGggPiAwKXtcblx0XHRcdGVsZW0gPSBmaW5kT25lKHRlc3QsIGVsZW1zW2ldLmNoaWxkcmVuKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gZXhpc3RzT25lKHRlc3QsIGVsZW1zKXtcblx0Zm9yKHZhciBpID0gMCwgbCA9IGVsZW1zLmxlbmd0aDsgaSA8IGw7IGkrKyl7XG5cdFx0aWYoXG5cdFx0XHRpc1RhZyhlbGVtc1tpXSkgJiYgKFxuXHRcdFx0XHR0ZXN0KGVsZW1zW2ldKSB8fCAoXG5cdFx0XHRcdFx0ZWxlbXNbaV0uY2hpbGRyZW4ubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdGV4aXN0c09uZSh0ZXN0LCBlbGVtc1tpXS5jaGlsZHJlbilcblx0XHRcdFx0KVxuXHRcdFx0KVxuXHRcdCl7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGZpbmRBbGwodGVzdCwgZWxlbXMpe1xuXHR2YXIgcmVzdWx0ID0gW107XG5cdGZvcih2YXIgaSA9IDAsIGogPSBlbGVtcy5sZW5ndGg7IGkgPCBqOyBpKyspe1xuXHRcdGlmKCFpc1RhZyhlbGVtc1tpXSkpIGNvbnRpbnVlO1xuXHRcdGlmKHRlc3QoZWxlbXNbaV0pKSByZXN1bHQucHVzaChlbGVtc1tpXSk7XG5cblx0XHRpZihlbGVtc1tpXS5jaGlsZHJlbi5sZW5ndGggPiAwKXtcblx0XHRcdHJlc3VsdCA9IHJlc3VsdC5jb25jYXQoZmluZEFsbCh0ZXN0LCBlbGVtc1tpXS5jaGlsZHJlbikpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuIiwidmFyIEVsZW1lbnRUeXBlID0gcmVxdWlyZShcImRvbWVsZW1lbnR0eXBlXCIpO1xudmFyIGlzVGFnID0gZXhwb3J0cy5pc1RhZyA9IEVsZW1lbnRUeXBlLmlzVGFnO1xuXG5leHBvcnRzLnRlc3RFbGVtZW50ID0gZnVuY3Rpb24ob3B0aW9ucywgZWxlbWVudCl7XG5cdGZvcih2YXIga2V5IGluIG9wdGlvbnMpe1xuXHRcdGlmKCFvcHRpb25zLmhhc093blByb3BlcnR5KGtleSkpO1xuXHRcdGVsc2UgaWYoa2V5ID09PSBcInRhZ19uYW1lXCIpe1xuXHRcdFx0aWYoIWlzVGFnKGVsZW1lbnQpIHx8ICFvcHRpb25zLnRhZ19uYW1lKGVsZW1lbnQubmFtZSkpe1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmKGtleSA9PT0gXCJ0YWdfdHlwZVwiKXtcblx0XHRcdGlmKCFvcHRpb25zLnRhZ190eXBlKGVsZW1lbnQudHlwZSkpIHJldHVybiBmYWxzZTtcblx0XHR9IGVsc2UgaWYoa2V5ID09PSBcInRhZ19jb250YWluc1wiKXtcblx0XHRcdGlmKGlzVGFnKGVsZW1lbnQpIHx8ICFvcHRpb25zLnRhZ19jb250YWlucyhlbGVtZW50LmRhdGEpKXtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZighZWxlbWVudC5hdHRyaWJzIHx8ICFvcHRpb25zW2tleV0oZWxlbWVudC5hdHRyaWJzW2tleV0pKXtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHRydWU7XG59O1xuXG52YXIgQ2hlY2tzID0ge1xuXHR0YWdfbmFtZTogZnVuY3Rpb24obmFtZSl7XG5cdFx0aWYodHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oZWxlbSl7IHJldHVybiBpc1RhZyhlbGVtKSAmJiBuYW1lKGVsZW0ubmFtZSk7IH07XG5cdFx0fSBlbHNlIGlmKG5hbWUgPT09IFwiKlwiKXtcblx0XHRcdHJldHVybiBpc1RhZztcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKGVsZW0peyByZXR1cm4gaXNUYWcoZWxlbSkgJiYgZWxlbS5uYW1lID09PSBuYW1lOyB9O1xuXHRcdH1cblx0fSxcblx0dGFnX3R5cGU6IGZ1bmN0aW9uKHR5cGUpe1xuXHRcdGlmKHR5cGVvZiB0eXBlID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKGVsZW0peyByZXR1cm4gdHlwZShlbGVtLnR5cGUpOyB9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oZWxlbSl7IHJldHVybiBlbGVtLnR5cGUgPT09IHR5cGU7IH07XG5cdFx0fVxuXHR9LFxuXHR0YWdfY29udGFpbnM6IGZ1bmN0aW9uKGRhdGEpe1xuXHRcdGlmKHR5cGVvZiBkYXRhID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKGVsZW0peyByZXR1cm4gIWlzVGFnKGVsZW0pICYmIGRhdGEoZWxlbS5kYXRhKTsgfTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKGVsZW0peyByZXR1cm4gIWlzVGFnKGVsZW0pICYmIGVsZW0uZGF0YSA9PT0gZGF0YTsgfTtcblx0XHR9XG5cdH1cbn07XG5cbmZ1bmN0aW9uIGdldEF0dHJpYkNoZWNrKGF0dHJpYiwgdmFsdWUpe1xuXHRpZih0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uKGVsZW0peyByZXR1cm4gZWxlbS5hdHRyaWJzICYmIHZhbHVlKGVsZW0uYXR0cmlic1thdHRyaWJdKTsgfTtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24oZWxlbSl7IHJldHVybiBlbGVtLmF0dHJpYnMgJiYgZWxlbS5hdHRyaWJzW2F0dHJpYl0gPT09IHZhbHVlOyB9O1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNvbWJpbmVGdW5jcyhhLCBiKXtcblx0cmV0dXJuIGZ1bmN0aW9uKGVsZW0pe1xuXHRcdHJldHVybiBhKGVsZW0pIHx8IGIoZWxlbSk7XG5cdH07XG59XG5cbmV4cG9ydHMuZ2V0RWxlbWVudHMgPSBmdW5jdGlvbihvcHRpb25zLCBlbGVtZW50LCByZWN1cnNlLCBsaW1pdCl7XG5cdHZhciBmdW5jcyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpLm1hcChmdW5jdGlvbihrZXkpe1xuXHRcdHZhciB2YWx1ZSA9IG9wdGlvbnNba2V5XTtcblx0XHRyZXR1cm4ga2V5IGluIENoZWNrcyA/IENoZWNrc1trZXldKHZhbHVlKSA6IGdldEF0dHJpYkNoZWNrKGtleSwgdmFsdWUpO1xuXHR9KTtcblxuXHRyZXR1cm4gZnVuY3MubGVuZ3RoID09PSAwID8gW10gOiB0aGlzLmZpbHRlcihcblx0XHRmdW5jcy5yZWR1Y2UoY29tYmluZUZ1bmNzKSxcblx0XHRlbGVtZW50LCByZWN1cnNlLCBsaW1pdFxuXHQpO1xufTtcblxuZXhwb3J0cy5nZXRFbGVtZW50QnlJZCA9IGZ1bmN0aW9uKGlkLCBlbGVtZW50LCByZWN1cnNlKXtcblx0aWYoIUFycmF5LmlzQXJyYXkoZWxlbWVudCkpIGVsZW1lbnQgPSBbZWxlbWVudF07XG5cdHJldHVybiB0aGlzLmZpbmRPbmUoZ2V0QXR0cmliQ2hlY2soXCJpZFwiLCBpZCksIGVsZW1lbnQsIHJlY3Vyc2UgIT09IGZhbHNlKTtcbn07XG5cbmV4cG9ydHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBmdW5jdGlvbihuYW1lLCBlbGVtZW50LCByZWN1cnNlLCBsaW1pdCl7XG5cdHJldHVybiB0aGlzLmZpbHRlcihDaGVja3MudGFnX25hbWUobmFtZSksIGVsZW1lbnQsIHJlY3Vyc2UsIGxpbWl0KTtcbn07XG5cbmV4cG9ydHMuZ2V0RWxlbWVudHNCeVRhZ1R5cGUgPSBmdW5jdGlvbih0eXBlLCBlbGVtZW50LCByZWN1cnNlLCBsaW1pdCl7XG5cdHJldHVybiB0aGlzLmZpbHRlcihDaGVja3MudGFnX3R5cGUodHlwZSksIGVsZW1lbnQsIHJlY3Vyc2UsIGxpbWl0KTtcbn07XG4iLCIvLyByZW1vdmVTdWJzZXRzXG4vLyBHaXZlbiBhbiBhcnJheSBvZiBub2RlcywgcmVtb3ZlIGFueSBtZW1iZXIgdGhhdCBpcyBjb250YWluZWQgYnkgYW5vdGhlci5cbmV4cG9ydHMucmVtb3ZlU3Vic2V0cyA9IGZ1bmN0aW9uKG5vZGVzKSB7XG5cdHZhciBpZHggPSBub2Rlcy5sZW5ndGgsIG5vZGUsIGFuY2VzdG9yLCByZXBsYWNlO1xuXG5cdC8vIENoZWNrIGlmIGVhY2ggbm9kZSAob3Igb25lIG9mIGl0cyBhbmNlc3RvcnMpIGlzIGFscmVhZHkgY29udGFpbmVkIGluIHRoZVxuXHQvLyBhcnJheS5cblx0d2hpbGUgKC0taWR4ID4gLTEpIHtcblx0XHRub2RlID0gYW5jZXN0b3IgPSBub2Rlc1tpZHhdO1xuXG5cdFx0Ly8gVGVtcG9yYXJpbHkgcmVtb3ZlIHRoZSBub2RlIHVuZGVyIGNvbnNpZGVyYXRpb25cblx0XHRub2Rlc1tpZHhdID0gbnVsbDtcblx0XHRyZXBsYWNlID0gdHJ1ZTtcblxuXHRcdHdoaWxlIChhbmNlc3Rvcikge1xuXHRcdFx0aWYgKG5vZGVzLmluZGV4T2YoYW5jZXN0b3IpID4gLTEpIHtcblx0XHRcdFx0cmVwbGFjZSA9IGZhbHNlO1xuXHRcdFx0XHRub2Rlcy5zcGxpY2UoaWR4LCAxKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGUgbm9kZSBoYXMgYmVlbiBmb3VuZCB0byBiZSB1bmlxdWUsIHJlLWluc2VydCBpdC5cblx0XHRpZiAocmVwbGFjZSkge1xuXHRcdFx0bm9kZXNbaWR4XSA9IG5vZGU7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5vZGVzO1xufTtcblxuLy8gU291cmNlOiBodHRwOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLW5vZGUtY29tcGFyZWRvY3VtZW50cG9zaXRpb25cbnZhciBQT1NJVElPTiA9IHtcblx0RElTQ09OTkVDVEVEOiAxLFxuXHRQUkVDRURJTkc6IDIsXG5cdEZPTExPV0lORzogNCxcblx0Q09OVEFJTlM6IDgsXG5cdENPTlRBSU5FRF9CWTogMTZcbn07XG5cbi8vIENvbXBhcmUgdGhlIHBvc2l0aW9uIG9mIG9uZSBub2RlIGFnYWluc3QgYW5vdGhlciBub2RlIGluIGFueSBvdGhlciBkb2N1bWVudC5cbi8vIFRoZSByZXR1cm4gdmFsdWUgaXMgYSBiaXRtYXNrIHdpdGggdGhlIGZvbGxvd2luZyB2YWx1ZXM6XG4vL1xuLy8gZG9jdW1lbnQgb3JkZXI6XG4vLyA+IFRoZXJlIGlzIGFuIG9yZGVyaW5nLCBkb2N1bWVudCBvcmRlciwgZGVmaW5lZCBvbiBhbGwgdGhlIG5vZGVzIGluIHRoZVxuLy8gPiBkb2N1bWVudCBjb3JyZXNwb25kaW5nIHRvIHRoZSBvcmRlciBpbiB3aGljaCB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIHRoZVxuLy8gPiBYTUwgcmVwcmVzZW50YXRpb24gb2YgZWFjaCBub2RlIG9jY3VycyBpbiB0aGUgWE1MIHJlcHJlc2VudGF0aW9uIG9mIHRoZVxuLy8gPiBkb2N1bWVudCBhZnRlciBleHBhbnNpb24gb2YgZ2VuZXJhbCBlbnRpdGllcy4gVGh1cywgdGhlIGRvY3VtZW50IGVsZW1lbnRcbi8vID4gbm9kZSB3aWxsIGJlIHRoZSBmaXJzdCBub2RlLiBFbGVtZW50IG5vZGVzIG9jY3VyIGJlZm9yZSB0aGVpciBjaGlsZHJlbi5cbi8vID4gVGh1cywgZG9jdW1lbnQgb3JkZXIgb3JkZXJzIGVsZW1lbnQgbm9kZXMgaW4gb3JkZXIgb2YgdGhlIG9jY3VycmVuY2Ugb2Zcbi8vID4gdGhlaXIgc3RhcnQtdGFnIGluIHRoZSBYTUwgKGFmdGVyIGV4cGFuc2lvbiBvZiBlbnRpdGllcykuIFRoZSBhdHRyaWJ1dGVcbi8vID4gbm9kZXMgb2YgYW4gZWxlbWVudCBvY2N1ciBhZnRlciB0aGUgZWxlbWVudCBhbmQgYmVmb3JlIGl0cyBjaGlsZHJlbi4gVGhlXG4vLyA+IHJlbGF0aXZlIG9yZGVyIG9mIGF0dHJpYnV0ZSBub2RlcyBpcyBpbXBsZW1lbnRhdGlvbi1kZXBlbmRlbnQuL1xuLy8gU291cmNlOlxuLy8gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtQ29yZS9nbG9zc2FyeS5odG1sI2R0LWRvY3VtZW50LW9yZGVyXG4vL1xuLy8gQGFyZ3VtZW50IHtOb2RlfSBub2RhQSBUaGUgZmlyc3Qgbm9kZSB0byB1c2UgaW4gdGhlIGNvbXBhcmlzb25cbi8vIEBhcmd1bWVudCB7Tm9kZX0gbm9kZUIgVGhlIHNlY29uZCBub2RlIHRvIHVzZSBpbiB0aGUgY29tcGFyaXNvblxuLy9cbi8vIEByZXR1cm4ge051bWJlcn0gQSBiaXRtYXNrIGRlc2NyaWJpbmcgdGhlIGlucHV0IG5vZGVzJyByZWxhdGl2ZSBwb3NpdGlvbi5cbi8vICAgICAgICAgU2VlIGh0dHA6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tbm9kZS1jb21wYXJlZG9jdW1lbnRwb3NpdGlvbiBmb3Jcbi8vICAgICAgICAgYSBkZXNjcmlwdGlvbiBvZiB0aGVzZSB2YWx1ZXMuXG52YXIgY29tcGFyZVBvcyA9IGV4cG9ydHMuY29tcGFyZURvY3VtZW50UG9zaXRpb24gPSBmdW5jdGlvbihub2RlQSwgbm9kZUIpIHtcblx0dmFyIGFQYXJlbnRzID0gW107XG5cdHZhciBiUGFyZW50cyA9IFtdO1xuXHR2YXIgY3VycmVudCwgc2hhcmVkUGFyZW50LCBzaWJsaW5ncywgYVNpYmxpbmcsIGJTaWJsaW5nLCBpZHg7XG5cblx0aWYgKG5vZGVBID09PSBub2RlQikge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0Y3VycmVudCA9IG5vZGVBO1xuXHR3aGlsZSAoY3VycmVudCkge1xuXHRcdGFQYXJlbnRzLnVuc2hpZnQoY3VycmVudCk7XG5cdFx0Y3VycmVudCA9IGN1cnJlbnQucGFyZW50O1xuXHR9XG5cdGN1cnJlbnQgPSBub2RlQjtcblx0d2hpbGUgKGN1cnJlbnQpIHtcblx0XHRiUGFyZW50cy51bnNoaWZ0KGN1cnJlbnQpO1xuXHRcdGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudDtcblx0fVxuXG5cdGlkeCA9IDA7XG5cdHdoaWxlIChhUGFyZW50c1tpZHhdID09PSBiUGFyZW50c1tpZHhdKSB7XG5cdFx0aWR4Kys7XG5cdH1cblxuXHRpZiAoaWR4ID09PSAwKSB7XG5cdFx0cmV0dXJuIFBPU0lUSU9OLkRJU0NPTk5FQ1RFRDtcblx0fVxuXG5cdHNoYXJlZFBhcmVudCA9IGFQYXJlbnRzW2lkeCAtIDFdO1xuXHRzaWJsaW5ncyA9IHNoYXJlZFBhcmVudC5jaGlsZHJlbjtcblx0YVNpYmxpbmcgPSBhUGFyZW50c1tpZHhdO1xuXHRiU2libGluZyA9IGJQYXJlbnRzW2lkeF07XG5cblx0aWYgKHNpYmxpbmdzLmluZGV4T2YoYVNpYmxpbmcpID4gc2libGluZ3MuaW5kZXhPZihiU2libGluZykpIHtcblx0XHRpZiAoc2hhcmVkUGFyZW50ID09PSBub2RlQikge1xuXHRcdFx0cmV0dXJuIFBPU0lUSU9OLkZPTExPV0lORyB8IFBPU0lUSU9OLkNPTlRBSU5FRF9CWTtcblx0XHR9XG5cdFx0cmV0dXJuIFBPU0lUSU9OLkZPTExPV0lORztcblx0fSBlbHNlIHtcblx0XHRpZiAoc2hhcmVkUGFyZW50ID09PSBub2RlQSkge1xuXHRcdFx0cmV0dXJuIFBPU0lUSU9OLlBSRUNFRElORyB8IFBPU0lUSU9OLkNPTlRBSU5TO1xuXHRcdH1cblx0XHRyZXR1cm4gUE9TSVRJT04uUFJFQ0VESU5HO1xuXHR9XG59O1xuXG4vLyBTb3J0IGFuIGFycmF5IG9mIG5vZGVzIGJhc2VkIG9uIHRoZWlyIHJlbGF0aXZlIHBvc2l0aW9uIGluIHRoZSBkb2N1bWVudCBhbmRcbi8vIHJlbW92ZSBhbnkgZHVwbGljYXRlIG5vZGVzLiBJZiB0aGUgYXJyYXkgY29udGFpbnMgbm9kZXMgdGhhdCBkbyBub3QgYmVsb25nXG4vLyB0byB0aGUgc2FtZSBkb2N1bWVudCwgc29ydCBvcmRlciBpcyB1bnNwZWNpZmllZC5cbi8vXG4vLyBAYXJndW1lbnQge0FycmF5fSBub2RlcyBBcnJheSBvZiBET00gbm9kZXNcbi8vXG4vLyBAcmV0dXJucyB7QXJyYXl9IGNvbGxlY3Rpb24gb2YgdW5pcXVlIG5vZGVzLCBzb3J0ZWQgaW4gZG9jdW1lbnQgb3JkZXJcbmV4cG9ydHMudW5pcXVlU29ydCA9IGZ1bmN0aW9uKG5vZGVzKSB7XG5cdHZhciBpZHggPSBub2Rlcy5sZW5ndGgsIG5vZGUsIHBvc2l0aW9uO1xuXG5cdG5vZGVzID0gbm9kZXMuc2xpY2UoKTtcblxuXHR3aGlsZSAoLS1pZHggPiAtMSkge1xuXHRcdG5vZGUgPSBub2Rlc1tpZHhdO1xuXHRcdHBvc2l0aW9uID0gbm9kZXMuaW5kZXhPZihub2RlKTtcblx0XHRpZiAocG9zaXRpb24gPiAtMSAmJiBwb3NpdGlvbiA8IGlkeCkge1xuXHRcdFx0bm9kZXMuc3BsaWNlKGlkeCwgMSk7XG5cdFx0fVxuXHR9XG5cdG5vZGVzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuXHRcdHZhciByZWxhdGl2ZSA9IGNvbXBhcmVQb3MoYSwgYik7XG5cdFx0aWYgKHJlbGF0aXZlICYgUE9TSVRJT04uUFJFQ0VESU5HKSB7XG5cdFx0XHRyZXR1cm4gLTE7XG5cdFx0fSBlbHNlIGlmIChyZWxhdGl2ZSAmIFBPU0lUSU9OLkZPTExPV0lORykge1xuXHRcdFx0cmV0dXJuIDE7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9KTtcblxuXHRyZXR1cm4gbm9kZXM7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBTdHJlYW07XG5cbnZhciBQYXJzZXIgPSByZXF1aXJlKFwiLi9Xcml0YWJsZVN0cmVhbS5qc1wiKTtcblxuZnVuY3Rpb24gU3RyZWFtKG9wdGlvbnMpIHtcbiAgICBQYXJzZXIuY2FsbCh0aGlzLCBuZXcgQ2JzKHRoaXMpLCBvcHRpb25zKTtcbn1cblxucmVxdWlyZShcImluaGVyaXRzXCIpKFN0cmVhbSwgUGFyc2VyKTtcblxuU3RyZWFtLnByb3RvdHlwZS5yZWFkYWJsZSA9IHRydWU7XG5cbmZ1bmN0aW9uIENicyhzY29wZSkge1xuICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbn1cblxudmFyIEVWRU5UUyA9IHJlcXVpcmUoXCIuLi9cIikuRVZFTlRTO1xuXG5PYmplY3Qua2V5cyhFVkVOVFMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgIGlmIChFVkVOVFNbbmFtZV0gPT09IDApIHtcbiAgICAgICAgQ2JzLnByb3RvdHlwZVtcIm9uXCIgKyBuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5zY29wZS5lbWl0KG5hbWUpO1xuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoRVZFTlRTW25hbWVdID09PSAxKSB7XG4gICAgICAgIENicy5wcm90b3R5cGVbXCJvblwiICsgbmFtZV0gPSBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICB0aGlzLnNjb3BlLmVtaXQobmFtZSwgYSk7XG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmIChFVkVOVFNbbmFtZV0gPT09IDIpIHtcbiAgICAgICAgQ2JzLnByb3RvdHlwZVtcIm9uXCIgKyBuYW1lXSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHRoaXMuc2NvcGUuZW1pdChuYW1lLCBhLCBiKTtcbiAgICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBFcnJvcihcIndyb25nIG51bWJlciBvZiBhcmd1bWVudHMhXCIpO1xuICAgIH1cbn0pO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBpc0VuY29kaW5nID0gQnVmZmVyLmlzRW5jb2RpbmcgfHwgZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gIGVuY29kaW5nID0gJycgKyBlbmNvZGluZztcbiAgc3dpdGNoIChlbmNvZGluZyAmJiBlbmNvZGluZy50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpjYXNlICd1dGY4JzpjYXNlICd1dGYtOCc6Y2FzZSAnYXNjaWknOmNhc2UgJ2JpbmFyeSc6Y2FzZSAnYmFzZTY0JzpjYXNlICd1Y3MyJzpjYXNlICd1Y3MtMic6Y2FzZSAndXRmMTZsZSc6Y2FzZSAndXRmLTE2bGUnOmNhc2UgJ3Jhdyc6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5mdW5jdGlvbiBfbm9ybWFsaXplRW5jb2RpbmcoZW5jKSB7XG4gIGlmICghZW5jKSByZXR1cm4gJ3V0ZjgnO1xuICB2YXIgcmV0cmllZDtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuYykge1xuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiAndXRmOCc7XG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gJ3V0ZjE2bGUnO1xuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiAnbGF0aW4xJztcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gZW5jO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKHJldHJpZWQpIHJldHVybjsgLy8gdW5kZWZpbmVkXG4gICAgICAgIGVuYyA9ICgnJyArIGVuYykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0cmllZCA9IHRydWU7XG4gICAgfVxuICB9XG59O1xuXG4vLyBEbyBub3QgY2FjaGUgYEJ1ZmZlci5pc0VuY29kaW5nYCB3aGVuIGNoZWNraW5nIGVuY29kaW5nIG5hbWVzIGFzIHNvbWVcbi8vIG1vZHVsZXMgbW9ua2V5LXBhdGNoIGl0IHRvIHN1cHBvcnQgYWRkaXRpb25hbCBlbmNvZGluZ3NcbmZ1bmN0aW9uIG5vcm1hbGl6ZUVuY29kaW5nKGVuYykge1xuICB2YXIgbmVuYyA9IF9ub3JtYWxpemVFbmNvZGluZyhlbmMpO1xuICBpZiAodHlwZW9mIG5lbmMgIT09ICdzdHJpbmcnICYmIChCdWZmZXIuaXNFbmNvZGluZyA9PT0gaXNFbmNvZGluZyB8fCAhaXNFbmNvZGluZyhlbmMpKSkgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jKTtcbiAgcmV0dXJuIG5lbmMgfHwgZW5jO1xufVxuXG4vLyBTdHJpbmdEZWNvZGVyIHByb3ZpZGVzIGFuIGludGVyZmFjZSBmb3IgZWZmaWNpZW50bHkgc3BsaXR0aW5nIGEgc2VyaWVzIG9mXG4vLyBidWZmZXJzIGludG8gYSBzZXJpZXMgb2YgSlMgc3RyaW5ncyB3aXRob3V0IGJyZWFraW5nIGFwYXJ0IG11bHRpLWJ5dGVcbi8vIGNoYXJhY3RlcnMuXG5leHBvcnRzLlN0cmluZ0RlY29kZXIgPSBTdHJpbmdEZWNvZGVyO1xuZnVuY3Rpb24gU3RyaW5nRGVjb2RlcihlbmNvZGluZykge1xuICB0aGlzLmVuY29kaW5nID0gbm9ybWFsaXplRW5jb2RpbmcoZW5jb2RpbmcpO1xuICB2YXIgbmI7XG4gIHN3aXRjaCAodGhpcy5lbmNvZGluZykge1xuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgdGhpcy50ZXh0ID0gdXRmMTZUZXh0O1xuICAgICAgdGhpcy5lbmQgPSB1dGYxNkVuZDtcbiAgICAgIG5iID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgdGhpcy5maWxsTGFzdCA9IHV0ZjhGaWxsTGFzdDtcbiAgICAgIG5iID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICB0aGlzLnRleHQgPSBiYXNlNjRUZXh0O1xuICAgICAgdGhpcy5lbmQgPSBiYXNlNjRFbmQ7XG4gICAgICBuYiA9IDM7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhpcy53cml0ZSA9IHNpbXBsZVdyaXRlO1xuICAgICAgdGhpcy5lbmQgPSBzaW1wbGVFbmQ7XG4gICAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5sYXN0TmVlZCA9IDA7XG4gIHRoaXMubGFzdFRvdGFsID0gMDtcbiAgdGhpcy5sYXN0Q2hhciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuYik7XG59XG5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGJ1Zikge1xuICBpZiAoYnVmLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnO1xuICB2YXIgcjtcbiAgdmFyIGk7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSB7XG4gICAgciA9IHRoaXMuZmlsbExhc3QoYnVmKTtcbiAgICBpZiAociA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJyc7XG4gICAgaSA9IHRoaXMubGFzdE5lZWQ7XG4gICAgdGhpcy5sYXN0TmVlZCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgaSA9IDA7XG4gIH1cbiAgaWYgKGkgPCBidWYubGVuZ3RoKSByZXR1cm4gciA/IHIgKyB0aGlzLnRleHQoYnVmLCBpKSA6IHRoaXMudGV4dChidWYsIGkpO1xuICByZXR1cm4gciB8fCAnJztcbn07XG5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmVuZCA9IHV0ZjhFbmQ7XG5cbi8vIFJldHVybnMgb25seSBjb21wbGV0ZSBjaGFyYWN0ZXJzIGluIGEgQnVmZmVyXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS50ZXh0ID0gdXRmOFRleHQ7XG5cbi8vIEF0dGVtcHRzIHRvIGNvbXBsZXRlIGEgcGFydGlhbCBub24tVVRGLTggY2hhcmFjdGVyIHVzaW5nIGJ5dGVzIGZyb20gYSBCdWZmZXJcblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmZpbGxMYXN0ID0gZnVuY3Rpb24gKGJ1Zikge1xuICBpZiAodGhpcy5sYXN0TmVlZCA8PSBidWYubGVuZ3RoKSB7XG4gICAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkLCAwLCB0aGlzLmxhc3ROZWVkKTtcbiAgICByZXR1cm4gdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCB0aGlzLmxhc3RUb3RhbCk7XG4gIH1cbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkLCAwLCBidWYubGVuZ3RoKTtcbiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoO1xufTtcblxuLy8gQ2hlY2tzIHRoZSB0eXBlIG9mIGEgVVRGLTggYnl0ZSwgd2hldGhlciBpdCdzIEFTQ0lJLCBhIGxlYWRpbmcgYnl0ZSwgb3IgYVxuLy8gY29udGludWF0aW9uIGJ5dGUuIElmIGFuIGludmFsaWQgYnl0ZSBpcyBkZXRlY3RlZCwgLTIgaXMgcmV0dXJuZWQuXG5mdW5jdGlvbiB1dGY4Q2hlY2tCeXRlKGJ5dGUpIHtcbiAgaWYgKGJ5dGUgPD0gMHg3RikgcmV0dXJuIDA7ZWxzZSBpZiAoYnl0ZSA+PiA1ID09PSAweDA2KSByZXR1cm4gMjtlbHNlIGlmIChieXRlID4+IDQgPT09IDB4MEUpIHJldHVybiAzO2Vsc2UgaWYgKGJ5dGUgPj4gMyA9PT0gMHgxRSkgcmV0dXJuIDQ7XG4gIHJldHVybiBieXRlID4+IDYgPT09IDB4MDIgPyAtMSA6IC0yO1xufVxuXG4vLyBDaGVja3MgYXQgbW9zdCAzIGJ5dGVzIGF0IHRoZSBlbmQgb2YgYSBCdWZmZXIgaW4gb3JkZXIgdG8gZGV0ZWN0IGFuXG4vLyBpbmNvbXBsZXRlIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyLiBUaGUgdG90YWwgbnVtYmVyIG9mIGJ5dGVzICgyLCAzLCBvciA0KVxuLy8gbmVlZGVkIHRvIGNvbXBsZXRlIHRoZSBVVEYtOCBjaGFyYWN0ZXIgKGlmIGFwcGxpY2FibGUpIGFyZSByZXR1cm5lZC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0luY29tcGxldGUoc2VsZiwgYnVmLCBpKSB7XG4gIHZhciBqID0gYnVmLmxlbmd0aCAtIDE7XG4gIGlmIChqIDwgaSkgcmV0dXJuIDA7XG4gIHZhciBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSBzZWxmLmxhc3ROZWVkID0gbmIgLSAxO1xuICAgIHJldHVybiBuYjtcbiAgfVxuICBpZiAoLS1qIDwgaSB8fCBuYiA9PT0gLTIpIHJldHVybiAwO1xuICBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSBzZWxmLmxhc3ROZWVkID0gbmIgLSAyO1xuICAgIHJldHVybiBuYjtcbiAgfVxuICBpZiAoLS1qIDwgaSB8fCBuYiA9PT0gLTIpIHJldHVybiAwO1xuICBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSB7XG4gICAgICBpZiAobmIgPT09IDIpIG5iID0gMDtlbHNlIHNlbGYubGFzdE5lZWQgPSBuYiAtIDM7XG4gICAgfVxuICAgIHJldHVybiBuYjtcbiAgfVxuICByZXR1cm4gMDtcbn1cblxuLy8gVmFsaWRhdGVzIGFzIG1hbnkgY29udGludWF0aW9uIGJ5dGVzIGZvciBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIGFzXG4vLyBuZWVkZWQgb3IgYXJlIGF2YWlsYWJsZS4gSWYgd2Ugc2VlIGEgbm9uLWNvbnRpbnVhdGlvbiBieXRlIHdoZXJlIHdlIGV4cGVjdFxuLy8gb25lLCB3ZSBcInJlcGxhY2VcIiB0aGUgdmFsaWRhdGVkIGNvbnRpbnVhdGlvbiBieXRlcyB3ZSd2ZSBzZWVuIHNvIGZhciB3aXRoXG4vLyBhIHNpbmdsZSBVVEYtOCByZXBsYWNlbWVudCBjaGFyYWN0ZXIgKCdcXHVmZmZkJyksIHRvIG1hdGNoIHY4J3MgVVRGLTggZGVjb2Rpbmdcbi8vIGJlaGF2aW9yLiBUaGUgY29udGludWF0aW9uIGJ5dGUgY2hlY2sgaXMgaW5jbHVkZWQgdGhyZWUgdGltZXMgaW4gdGhlIGNhc2Vcbi8vIHdoZXJlIGFsbCBvZiB0aGUgY29udGludWF0aW9uIGJ5dGVzIGZvciBhIGNoYXJhY3RlciBleGlzdCBpbiB0aGUgc2FtZSBidWZmZXIuXG4vLyBJdCBpcyBhbHNvIGRvbmUgdGhpcyB3YXkgYXMgYSBzbGlnaHQgcGVyZm9ybWFuY2UgaW5jcmVhc2UgaW5zdGVhZCBvZiB1c2luZyBhXG4vLyBsb29wLlxuZnVuY3Rpb24gdXRmOENoZWNrRXh0cmFCeXRlcyhzZWxmLCBidWYsIHApIHtcbiAgaWYgKChidWZbMF0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgIHNlbGYubGFzdE5lZWQgPSAwO1xuICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gIH1cbiAgaWYgKHNlbGYubGFzdE5lZWQgPiAxICYmIGJ1Zi5sZW5ndGggPiAxKSB7XG4gICAgaWYgKChidWZbMV0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgICAgc2VsZi5sYXN0TmVlZCA9IDE7XG4gICAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICAgIH1cbiAgICBpZiAoc2VsZi5sYXN0TmVlZCA+IDIgJiYgYnVmLmxlbmd0aCA+IDIpIHtcbiAgICAgIGlmICgoYnVmWzJdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgICAgc2VsZi5sYXN0TmVlZCA9IDI7XG4gICAgICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIEF0dGVtcHRzIHRvIGNvbXBsZXRlIGEgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIgdXNpbmcgYnl0ZXMgZnJvbSBhIEJ1ZmZlci5cbmZ1bmN0aW9uIHV0ZjhGaWxsTGFzdChidWYpIHtcbiAgdmFyIHAgPSB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQ7XG4gIHZhciByID0gdXRmOENoZWNrRXh0cmFCeXRlcyh0aGlzLCBidWYsIHApO1xuICBpZiAociAhPT0gdW5kZWZpbmVkKSByZXR1cm4gcjtcbiAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHAsIDAsIHRoaXMubGFzdE5lZWQpO1xuICAgIHJldHVybiB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIHRoaXMubGFzdFRvdGFsKTtcbiAgfVxuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCBidWYubGVuZ3RoKTtcbiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoO1xufVxuXG4vLyBSZXR1cm5zIGFsbCBjb21wbGV0ZSBVVEYtOCBjaGFyYWN0ZXJzIGluIGEgQnVmZmVyLiBJZiB0aGUgQnVmZmVyIGVuZGVkIG9uIGFcbi8vIHBhcnRpYWwgY2hhcmFjdGVyLCB0aGUgY2hhcmFjdGVyJ3MgYnl0ZXMgYXJlIGJ1ZmZlcmVkIHVudGlsIHRoZSByZXF1aXJlZFxuLy8gbnVtYmVyIG9mIGJ5dGVzIGFyZSBhdmFpbGFibGUuXG5mdW5jdGlvbiB1dGY4VGV4dChidWYsIGkpIHtcbiAgdmFyIHRvdGFsID0gdXRmOENoZWNrSW5jb21wbGV0ZSh0aGlzLCBidWYsIGkpO1xuICBpZiAoIXRoaXMubGFzdE5lZWQpIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjgnLCBpKTtcbiAgdGhpcy5sYXN0VG90YWwgPSB0b3RhbDtcbiAgdmFyIGVuZCA9IGJ1Zi5sZW5ndGggLSAodG90YWwgLSB0aGlzLmxhc3ROZWVkKTtcbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgMCwgZW5kKTtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmOCcsIGksIGVuZCk7XG59XG5cbi8vIEZvciBVVEYtOCwgYSByZXBsYWNlbWVudCBjaGFyYWN0ZXIgaXMgYWRkZWQgd2hlbiBlbmRpbmcgb24gYSBwYXJ0aWFsXG4vLyBjaGFyYWN0ZXIuXG5mdW5jdGlvbiB1dGY4RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSByZXR1cm4gciArICdcXHVmZmZkJztcbiAgcmV0dXJuIHI7XG59XG5cbi8vIFVURi0xNkxFIHR5cGljYWxseSBuZWVkcyB0d28gYnl0ZXMgcGVyIGNoYXJhY3RlciwgYnV0IGV2ZW4gaWYgd2UgaGF2ZSBhbiBldmVuXG4vLyBudW1iZXIgb2YgYnl0ZXMgYXZhaWxhYmxlLCB3ZSBuZWVkIHRvIGNoZWNrIGlmIHdlIGVuZCBvbiBhIGxlYWRpbmcvaGlnaFxuLy8gc3Vycm9nYXRlLiBJbiB0aGF0IGNhc2UsIHdlIG5lZWQgdG8gd2FpdCBmb3IgdGhlIG5leHQgdHdvIGJ5dGVzIGluIG9yZGVyIHRvXG4vLyBkZWNvZGUgdGhlIGxhc3QgY2hhcmFjdGVyIHByb3Blcmx5LlxuZnVuY3Rpb24gdXRmMTZUZXh0KGJ1ZiwgaSkge1xuICBpZiAoKGJ1Zi5sZW5ndGggLSBpKSAlIDIgPT09IDApIHtcbiAgICB2YXIgciA9IGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGkpO1xuICAgIGlmIChyKSB7XG4gICAgICB2YXIgYyA9IHIuY2hhckNvZGVBdChyLmxlbmd0aCAtIDEpO1xuICAgICAgaWYgKGMgPj0gMHhEODAwICYmIGMgPD0gMHhEQkZGKSB7XG4gICAgICAgIHRoaXMubGFzdE5lZWQgPSAyO1xuICAgICAgICB0aGlzLmxhc3RUb3RhbCA9IDQ7XG4gICAgICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDJdO1xuICAgICAgICB0aGlzLmxhc3RDaGFyWzFdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgICAgICAgcmV0dXJuIHIuc2xpY2UoMCwgLTEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuICB0aGlzLmxhc3ROZWVkID0gMTtcbiAgdGhpcy5sYXN0VG90YWwgPSAyO1xuICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGksIGJ1Zi5sZW5ndGggLSAxKTtcbn1cblxuLy8gRm9yIFVURi0xNkxFIHdlIGRvIG5vdCBleHBsaWNpdGx5IGFwcGVuZCBzcGVjaWFsIHJlcGxhY2VtZW50IGNoYXJhY3RlcnMgaWYgd2Vcbi8vIGVuZCBvbiBhIHBhcnRpYWwgY2hhcmFjdGVyLCB3ZSBzaW1wbHkgbGV0IHY4IGhhbmRsZSB0aGF0LlxuZnVuY3Rpb24gdXRmMTZFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHtcbiAgICB2YXIgZW5kID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkO1xuICAgIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygndXRmMTZsZScsIDAsIGVuZCk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRleHQoYnVmLCBpKSB7XG4gIHZhciBuID0gKGJ1Zi5sZW5ndGggLSBpKSAlIDM7XG4gIGlmIChuID09PSAwKSByZXR1cm4gYnVmLnRvU3RyaW5nKCdiYXNlNjQnLCBpKTtcbiAgdGhpcy5sYXN0TmVlZCA9IDMgLSBuO1xuICB0aGlzLmxhc3RUb3RhbCA9IDM7XG4gIGlmIChuID09PSAxKSB7XG4gICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMl07XG4gICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIH1cbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0JywgaSwgYnVmLmxlbmd0aCAtIG4pO1xufVxuXG5mdW5jdGlvbiBiYXNlNjRFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygnYmFzZTY0JywgMCwgMyAtIHRoaXMubGFzdE5lZWQpO1xuICByZXR1cm4gcjtcbn1cblxuLy8gUGFzcyBieXRlcyBvbiB0aHJvdWdoIGZvciBzaW5nbGUtYnl0ZSBlbmNvZGluZ3MgKGUuZy4gYXNjaWksIGxhdGluMSwgaGV4KVxuZnVuY3Rpb24gc2ltcGxlV3JpdGUoYnVmKSB7XG4gIHJldHVybiBidWYudG9TdHJpbmcodGhpcy5lbmNvZGluZyk7XG59XG5cbmZ1bmN0aW9uIHNpbXBsZUVuZChidWYpIHtcbiAgcmV0dXJuIGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG59IiwiLyogZXNsaW50LWRpc2FibGUgbm9kZS9uby1kZXByZWNhdGVkLWFwaSAqL1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpXG52YXIgQnVmZmVyID0gYnVmZmVyLkJ1ZmZlclxuXG4vLyBhbHRlcm5hdGl2ZSB0byB1c2luZyBPYmplY3Qua2V5cyBmb3Igb2xkIGJyb3dzZXJzXG5mdW5jdGlvbiBjb3B5UHJvcHMgKHNyYywgZHN0KSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICBkc3Rba2V5XSA9IHNyY1trZXldXG4gIH1cbn1cbmlmIChCdWZmZXIuZnJvbSAmJiBCdWZmZXIuYWxsb2MgJiYgQnVmZmVyLmFsbG9jVW5zYWZlICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBidWZmZXJcbn0gZWxzZSB7XG4gIC8vIENvcHkgcHJvcGVydGllcyBmcm9tIHJlcXVpcmUoJ2J1ZmZlcicpXG4gIGNvcHlQcm9wcyhidWZmZXIsIGV4cG9ydHMpXG4gIGV4cG9ydHMuQnVmZmVyID0gU2FmZUJ1ZmZlclxufVxuXG5mdW5jdGlvbiBTYWZlQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG4vLyBDb3B5IHN0YXRpYyBtZXRob2RzIGZyb20gQnVmZmVyXG5jb3B5UHJvcHMoQnVmZmVyLCBTYWZlQnVmZmVyKVxuXG5TYWZlQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cblNhZmVCdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHZhciBidWYgPSBCdWZmZXIoc2l6ZSlcbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBidWYuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmLmZpbGwoZmlsbClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYnVmLmZpbGwoMClcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihzaXplKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gYnVmZmVyLlNsb3dCdWZmZXIoc2l6ZSlcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gUHJveHlIYW5kbGVyO1xuXG5mdW5jdGlvbiBQcm94eUhhbmRsZXIoY2JzKSB7XG4gICAgdGhpcy5fY2JzID0gY2JzIHx8IHt9O1xufVxuXG52YXIgRVZFTlRTID0gcmVxdWlyZShcIi4vXCIpLkVWRU5UUztcbk9iamVjdC5rZXlzKEVWRU5UUykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgaWYgKEVWRU5UU1tuYW1lXSA9PT0gMCkge1xuICAgICAgICBuYW1lID0gXCJvblwiICsgbmFtZTtcbiAgICAgICAgUHJveHlIYW5kbGVyLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Nic1tuYW1lXSkgdGhpcy5fY2JzW25hbWVdKCk7XG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmIChFVkVOVFNbbmFtZV0gPT09IDEpIHtcbiAgICAgICAgbmFtZSA9IFwib25cIiArIG5hbWU7XG4gICAgICAgIFByb3h5SGFuZGxlci5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2JzW25hbWVdKSB0aGlzLl9jYnNbbmFtZV0oYSk7XG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmIChFVkVOVFNbbmFtZV0gPT09IDIpIHtcbiAgICAgICAgbmFtZSA9IFwib25cIiArIG5hbWU7XG4gICAgICAgIFByb3h5SGFuZGxlci5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2JzW25hbWVdKSB0aGlzLl9jYnNbbmFtZV0oYSwgYik7XG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJ3cm9uZyBudW1iZXIgb2YgYXJndW1lbnRzXCIpO1xuICAgIH1cbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBDb2xsZWN0aW5nSGFuZGxlcjtcblxuZnVuY3Rpb24gQ29sbGVjdGluZ0hhbmRsZXIoY2JzKSB7XG4gICAgdGhpcy5fY2JzID0gY2JzIHx8IHt9O1xuICAgIHRoaXMuZXZlbnRzID0gW107XG59XG5cbnZhciBFVkVOVFMgPSByZXF1aXJlKFwiLi9cIikuRVZFTlRTO1xuT2JqZWN0LmtleXMoRVZFTlRTKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBpZiAoRVZFTlRTW25hbWVdID09PSAwKSB7XG4gICAgICAgIG5hbWUgPSBcIm9uXCIgKyBuYW1lO1xuICAgICAgICBDb2xsZWN0aW5nSGFuZGxlci5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzLnB1c2goW25hbWVdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jYnNbbmFtZV0pIHRoaXMuX2Nic1tuYW1lXSgpO1xuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoRVZFTlRTW25hbWVdID09PSAxKSB7XG4gICAgICAgIG5hbWUgPSBcIm9uXCIgKyBuYW1lO1xuICAgICAgICBDb2xsZWN0aW5nSGFuZGxlci5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50cy5wdXNoKFtuYW1lLCBhXSk7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2JzW25hbWVdKSB0aGlzLl9jYnNbbmFtZV0oYSk7XG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmIChFVkVOVFNbbmFtZV0gPT09IDIpIHtcbiAgICAgICAgbmFtZSA9IFwib25cIiArIG5hbWU7XG4gICAgICAgIENvbGxlY3RpbmdIYW5kbGVyLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzLnB1c2goW25hbWUsIGEsIGJdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jYnNbbmFtZV0pIHRoaXMuX2Nic1tuYW1lXShhLCBiKTtcbiAgICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBFcnJvcihcIndyb25nIG51bWJlciBvZiBhcmd1bWVudHNcIik7XG4gICAgfVxufSk7XG5cbkNvbGxlY3RpbmdIYW5kbGVyLnByb3RvdHlwZS5vbnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5ldmVudHMgPSBbXTtcbiAgICBpZiAodGhpcy5fY2JzLm9ucmVzZXQpIHRoaXMuX2Nicy5vbnJlc2V0KCk7XG59O1xuXG5Db2xsZWN0aW5nSGFuZGxlci5wcm90b3R5cGUucmVzdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9jYnMub25yZXNldCkgdGhpcy5fY2JzLm9ucmVzZXQoKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLmV2ZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAodGhpcy5fY2JzW3RoaXMuZXZlbnRzW2ldWzBdXSkge1xuICAgICAgICAgICAgdmFyIG51bSA9IHRoaXMuZXZlbnRzW2ldLmxlbmd0aDtcblxuICAgICAgICAgICAgaWYgKG51bSA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Nic1t0aGlzLmV2ZW50c1tpXVswXV0oKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtID09PSAyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2JzW3RoaXMuZXZlbnRzW2ldWzBdXSh0aGlzLmV2ZW50c1tpXVsxXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Nic1t0aGlzLmV2ZW50c1tpXVswXV0oXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRzW2ldWzFdLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmV2ZW50c1tpXVsyXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBUZXh0RWxlbWVudFR5cGU7XG4vKipcbiAqIENvbnZlcnRzIGEgdGV4dCBub2RlIHRvIGEgUmVhY3QgdGV4dCBlbGVtZW50XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG5vZGUgVGhlIHRleHQgbm9kZVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIHRleHRcbiAqL1xuZnVuY3Rpb24gVGV4dEVsZW1lbnRUeXBlKG5vZGUpIHtcblxuICAvLyBSZWFjdCB3aWxsIGFjY2VwdCBwbGFpbiB0ZXh0IGZvciByZW5kZXJpbmcgc28ganVzdCByZXR1cm4gdGhlIG5vZGUgZGF0YVxuICByZXR1cm4gbm9kZS5kYXRhO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IFRhZ0VsZW1lbnRUeXBlO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvY2Vzc05vZGVzID0gcmVxdWlyZSgnLi4vcHJvY2Vzc05vZGVzJyk7XG5cbnZhciBfcHJvY2Vzc05vZGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb2Nlc3NOb2Rlcyk7XG5cbnZhciBfZ2VuZXJhdGVQcm9wc0Zyb21BdHRyaWJ1dGVzID0gcmVxdWlyZSgnLi4vdXRpbHMvZ2VuZXJhdGVQcm9wc0Zyb21BdHRyaWJ1dGVzJyk7XG5cbnZhciBfZ2VuZXJhdGVQcm9wc0Zyb21BdHRyaWJ1dGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dlbmVyYXRlUHJvcHNGcm9tQXR0cmlidXRlcyk7XG5cbnZhciBfVm9pZEVsZW1lbnRzID0gcmVxdWlyZSgnLi4vZG9tL2VsZW1lbnRzL1ZvaWRFbGVtZW50cycpO1xuXG52YXIgX1ZvaWRFbGVtZW50czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Wb2lkRWxlbWVudHMpO1xuXG52YXIgX2lzVmFsaWRUYWdPckF0dHJpYnV0ZU5hbWUgPSByZXF1aXJlKCcuLi91dGlscy9pc1ZhbGlkVGFnT3JBdHRyaWJ1dGVOYW1lJyk7XG5cbnZhciBfaXNWYWxpZFRhZ09yQXR0cmlidXRlTmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1ZhbGlkVGFnT3JBdHRyaWJ1dGVOYW1lKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBDb252ZXJ0cyBhbnkgZWxlbWVudCAoZXhjbHVkaW5nIHN0eWxlIC0gc2VlIFN0eWxlRWxlbWVudFR5cGUgLSBhbmQgc2NyaXB0KSB0byBhIHJlYWN0IGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG5vZGUgVGhlIHRhZyBub2RlXG4gKiBAcGFyYW0ge1N0cmluZ30gaW5kZXggVGhlIGluZGV4IG9mIHRoZSBSZWFjdCBlbGVtZW50IHJlbGF0aXZlIHRvIGl0J3MgcGFyZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIHRyYW5zZm9ybSBmdW5jdGlvbiB0byBhcHBseSB0byBhbGwgY2hpbGRyZW5cbiAqIEByZXR1cm5zIHtSZWFjdC5FbGVtZW50fSBUaGUgUmVhY3QgdGFnIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gVGFnRWxlbWVudFR5cGUobm9kZSwgaW5kZXgsIHRyYW5zZm9ybSkge1xuXG4gIHZhciB0YWdOYW1lID0gbm9kZS5uYW1lO1xuXG4gIC8vIHZhbGlkYXRlIHRhZyBuYW1lXG4gIGlmICghKDAsIF9pc1ZhbGlkVGFnT3JBdHRyaWJ1dGVOYW1lMi5kZWZhdWx0KSh0YWdOYW1lKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gZ2VuZXJhdGUgcHJvcHNcbiAgdmFyIHByb3BzID0gKDAsIF9nZW5lcmF0ZVByb3BzRnJvbUF0dHJpYnV0ZXMyLmRlZmF1bHQpKG5vZGUuYXR0cmlicywgaW5kZXgpO1xuXG4gIC8vIElmIHRoZSBub2RlIGlzIG5vdCBhIHZvaWQgZWxlbWVudCBhbmQgaGFzIGNoaWxkcmVuIHRoZW4gcHJvY2VzcyB0aGVtXG4gIHZhciBjaGlsZHJlbiA9IG51bGw7XG4gIGlmIChfVm9pZEVsZW1lbnRzMi5kZWZhdWx0LmluZGV4T2YodGFnTmFtZSkgPT09IC0xKSB7XG4gICAgY2hpbGRyZW4gPSAoMCwgX3Byb2Nlc3NOb2RlczIuZGVmYXVsdCkobm9kZS5jaGlsZHJlbiwgdHJhbnNmb3JtKTtcbiAgfVxuXG4gIC8vIGNyZWF0ZSBhbmQgcmV0dXJuIHRoZSBlbGVtZW50XG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCh0YWdOYW1lLCBwcm9wcywgY2hpbGRyZW4pO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGh0bWxBdHRyaWJ1dGVzVG9SZWFjdDtcblxudmFyIF9Cb29sZWFuQXR0cmlidXRlcyA9IHJlcXVpcmUoJy4uL2RvbS9hdHRyaWJ1dGVzL0Jvb2xlYW5BdHRyaWJ1dGVzJyk7XG5cbnZhciBfQm9vbGVhbkF0dHJpYnV0ZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQm9vbGVhbkF0dHJpYnV0ZXMpO1xuXG52YXIgX1JlYWN0QXR0cmlidXRlcyA9IHJlcXVpcmUoJy4uL2RvbS9hdHRyaWJ1dGVzL1JlYWN0QXR0cmlidXRlcycpO1xuXG52YXIgX1JlYWN0QXR0cmlidXRlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SZWFjdEF0dHJpYnV0ZXMpO1xuXG52YXIgX2lzVmFsaWRUYWdPckF0dHJpYnV0ZU5hbWUgPSByZXF1aXJlKCcuL2lzVmFsaWRUYWdPckF0dHJpYnV0ZU5hbWUnKTtcblxudmFyIF9pc1ZhbGlkVGFnT3JBdHRyaWJ1dGVOYW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzVmFsaWRUYWdPckF0dHJpYnV0ZU5hbWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHBhcnNlZCBhdHRyaWJ1dGUgdmFsdWUgdGFraW5nIGludG8gYWNjb3VudCB0aGluZ3MgbGlrZSBib29sZWFuIGF0dHJpYnV0ZXNcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cmlidXRlIFRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBhdHRyaWJ1dGUgZnJvbSB0aGUgSFRNTFxuICogQHJldHVybnMgeyp9IFRoZSBwYXJzZWQgYXR0cmlidXRlIHZhbHVlXG4gKi9cbnZhciBnZXRQYXJzZWRBdHRyaWJ1dGVWYWx1ZSA9IGZ1bmN0aW9uIGdldFBhcnNlZEF0dHJpYnV0ZVZhbHVlKGF0dHJpYnV0ZSwgdmFsdWUpIHtcblxuICAvLyBpZiB0aGUgYXR0cmlidXRlIGlmIGEgYm9vbGVhbiB0aGVuIGl0J3MgdmFsdWUgc2hvdWxkIGJlIHRoZSBzYW1lIGFzIGl0J3MgbmFtZVxuICAvLyBlLmcuIGRpc2FibGVkPVwiZGlzYWJsZWRcIlxuICB2YXIgbG93ZXJCb29sZWFuQXR0cmlidXRlcyA9IF9Cb29sZWFuQXR0cmlidXRlczIuZGVmYXVsdC5tYXAoZnVuY3Rpb24gKGF0dHIpIHtcbiAgICByZXR1cm4gYXR0ci50b0xvd2VyQ2FzZSgpO1xuICB9KTtcbiAgaWYgKGxvd2VyQm9vbGVhbkF0dHJpYnV0ZXMuaW5kZXhPZihhdHRyaWJ1dGUudG9Mb3dlckNhc2UoKSkgPj0gMCkge1xuICAgIHZhbHVlID0gYXR0cmlidXRlO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuLyoqXG4gKiBUYWtlcyBhbiBvYmplY3Qgb2Ygc3RhbmRhcmQgSFRNTCBwcm9wZXJ0eSBuYW1lcyBhbmQgY29udmVydHMgdGhlbSB0byB0aGVpciBSZWFjdCBjb3VudGVycGFydC4gSWYgdGhlIHJlYWN0XG4gKiB2ZXJzaW9uIGRvZXMgbm90IGV4aXN0IGZvciBhbiBhdHRyaWJ1dGUgdGhlbiBqdXN0IHVzZSBpdCBhcyBpdCBpc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhdHRyaWJ1dGVzIFRoZSBIVE1MIGF0dHJpYnV0ZXMgdG8gY29udmVydFxuICogQHJldHVybnMge09iamVjdH0gVGhlIFJlYWN0IGF0dHJpYnV0ZXNcbiAqL1xuZnVuY3Rpb24gaHRtbEF0dHJpYnV0ZXNUb1JlYWN0KGF0dHJpYnV0ZXMpIHtcblxuICByZXR1cm4gT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZmlsdGVyKGZ1bmN0aW9uIChhdHRyKSB7XG4gICAgcmV0dXJuICgwLCBfaXNWYWxpZFRhZ09yQXR0cmlidXRlTmFtZTIuZGVmYXVsdCkoYXR0cik7XG4gIH0pLnJlZHVjZShmdW5jdGlvbiAobWFwcGVkQXR0cmlidXRlcywgYXR0cmlidXRlKSB7XG5cbiAgICAvLyBsb3dlcmNhc2UgdGhlIGF0dHJpYnV0ZSBuYW1lIGFuZCBmaW5kIGl0IGluIHRoZSByZWFjdCBhdHRyaWJ1dGUgbWFwXG4gICAgdmFyIGxvd2VyQ2FzZUF0dHJpYnV0ZSA9IGF0dHJpYnV0ZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgLy8gZm9ybWF0IHRoZSBhdHRyaWJ1dGUgbmFtZVxuICAgIHZhciBuYW1lID0gX1JlYWN0QXR0cmlidXRlczIuZGVmYXVsdFtsb3dlckNhc2VBdHRyaWJ1dGVdIHx8IGxvd2VyQ2FzZUF0dHJpYnV0ZTtcblxuICAgIC8vIGFkZCB0aGUgcGFyc2VkIGF0dHJpYnV0ZSB2YWx1ZSB0byB0aGUgbWFwcGVkIGF0dHJpYnV0ZXNcbiAgICBtYXBwZWRBdHRyaWJ1dGVzW25hbWVdID0gZ2V0UGFyc2VkQXR0cmlidXRlVmFsdWUobmFtZSwgYXR0cmlidXRlc1thdHRyaWJ1dGVdKTtcblxuICAgIHJldHVybiBtYXBwZWRBdHRyaWJ1dGVzO1xuICB9LCB7fSk7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuLyoqXG4gKiBMaXN0IG9mIGJvb2xlYW4gYXR0cmlidXRlc1xuICogVGhlc2UgYXR0cmlidXRlcyBzaG91bGQgaGF2ZSB0aGVpciBSZWFjdCBhdHRyaWJ1dGUgdmFsdWUgc2V0IHRvIGJlIHRoZSBzYW1lIGFzIHRoZWlyIG5hbWVcbiAqIEUuZy4gPGlucHV0IGRpc2FibGVkPiA9IDxpbnB1dCBkaXNhYmxlZD5cbiAqICAgICAgPGlucHV0IGRpc2FibGVkPVwiXCI+ID0gPGlucHV0IGRpc2FibGVkPlxuICogICAgICA8aW5wdXQgZGlzYWJsZWQ9XCJkaXNhYmxlZFwiPiA9IDxpbnB1dCBkaXNhYmxlZD5cbiAqIEB0eXBlIHtBcnJheX1cbiAqL1xuZXhwb3J0cy5kZWZhdWx0ID0gWydhbGxvd2Z1bGxTY3JlZW4nLCAnYXN5bmMnLCAnYXV0b3BsYXknLCAnY2FwdHVyZScsICdjaGVja2VkJywgJ2NvbnRyb2xzJywgJ2RlZmF1bHQnLCAnZGVmZXInLCAnZGlzYWJsZWQnLCAnZm9ybW5vdmFsaWRhdGUnLCAnaGlkZGVuJywgJ2xvb3AnLCAnbXVsdGlwbGUnLCAnbXV0ZWQnLCAnbm92YWxpZGF0ZScsICdvcGVuJywgJ3BsYXlzaW5saW5lJywgJ3JlYWRvbmx5JywgJ3JlcXVpcmVkJywgJ3JldmVyc2VkJywgJ3Njb3BlZCcsICdzZWFtbGVzcycsICdzZWxlY3RlZCcsICdpdGVtc2NvcGUnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG4vKipcbiAqIE1hcHBpbmcgb2Ygc3RhbmRhcmQgSFRNTCBhdHRyaWJ1dGVzIHRvIHRoZWlyIFJlYWN0IGNvdW50ZXJwYXJ0c1xuICogTGlzdCB0YWtlbiBhbmQgcmV2ZXJzZWQgZnJvbSByZWFjdC9zcmMvcmVuZGVyZXJzL2RvbS9zaGFyZWQvSFRNTERPTVByb3BlcnR5Q29uZmlnLmpzXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi9jOWMzYzMzOWI3NTc2ODJmMTE1NGYxYzkxNWViNTVlNmE4NzY2OTMzL3NyYy9yZW5kZXJlcnMvZG9tL3NoYXJlZC9IVE1MRE9NUHJvcGVydHlDb25maWcuanNcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmV4cG9ydHMuZGVmYXVsdCA9IHtcbiAgLyoqXG4gICAqIFN0YW5kYXJkIFByb3BlcnRpZXNcbiAgICovXG4gIGFjY2VwdDogJ2FjY2VwdCcsXG4gICdhY2NlcHQtY2hhcnNldCc6ICdhY2NlcHRDaGFyc2V0JyxcbiAgYWNjZXNza2V5OiAnYWNjZXNzS2V5JyxcbiAgYWN0aW9uOiAnYWN0aW9uJyxcbiAgYWxsb3dmdWxsc2NyZWVuOiAnYWxsb3dGdWxsU2NyZWVuJyxcbiAgYWxsb3d0cmFuc3BhcmVuY3k6ICdhbGxvd1RyYW5zcGFyZW5jeScsXG4gIGFsdDogJ2FsdCcsXG4gIGFzOiAnYXMnLFxuICBhc3luYzogJ2FzeW5jJyxcbiAgYXV0b2NvbXBsZXRlOiAnYXV0b0NvbXBsZXRlJyxcbiAgYXV0b3BsYXk6ICdhdXRvUGxheScsXG4gIGNhcHR1cmU6ICdjYXB0dXJlJyxcbiAgY2VsbHBhZGRpbmc6ICdjZWxsUGFkZGluZycsXG4gIGNlbGxzcGFjaW5nOiAnY2VsbFNwYWNpbmcnLFxuICBjaGFyc2V0OiAnY2hhclNldCcsXG4gIGNoYWxsZW5nZTogJ2NoYWxsZW5nZScsXG4gIGNoZWNrZWQ6ICdjaGVja2VkJyxcbiAgY2l0ZTogJ2NpdGUnLFxuICBjbGFzc2lkOiAnY2xhc3NJRCcsXG4gIGNsYXNzOiAnY2xhc3NOYW1lJyxcbiAgY29sczogJ2NvbHMnLFxuICBjb2xzcGFuOiAnY29sU3BhbicsXG4gIGNvbnRlbnQ6ICdjb250ZW50JyxcbiAgY29udGVudGVkaXRhYmxlOiAnY29udGVudEVkaXRhYmxlJyxcbiAgY29udGV4dG1lbnU6ICdjb250ZXh0TWVudScsXG4gIGNvbnRyb2xzOiAnY29udHJvbHMnLFxuICBjb250cm9sc0xpc3Q6ICdjb250cm9sc0xpc3QnLFxuICBjb29yZHM6ICdjb29yZHMnLFxuICBjcm9zc29yaWdpbjogJ2Nyb3NzT3JpZ2luJyxcbiAgZGF0YTogJ2RhdGEnLFxuICBkYXRldGltZTogJ2RhdGVUaW1lJyxcbiAgZGVmYXVsdDogJ2RlZmF1bHQnLFxuICBkZWZlcjogJ2RlZmVyJyxcbiAgZGlyOiAnZGlyJyxcbiAgZGlzYWJsZWQ6ICdkaXNhYmxlZCcsXG4gIGRvd25sb2FkOiAnZG93bmxvYWQnLFxuICBkcmFnZ2FibGU6ICdkcmFnZ2FibGUnLFxuICBlbmN0eXBlOiAnZW5jVHlwZScsXG4gIGZvcm06ICdmb3JtJyxcbiAgZm9ybWFjdGlvbjogJ2Zvcm1BY3Rpb24nLFxuICBmb3JtZW5jdHlwZTogJ2Zvcm1FbmNUeXBlJyxcbiAgZm9ybW1ldGhvZDogJ2Zvcm1NZXRob2QnLFxuICBmb3Jtbm92YWxpZGF0ZTogJ2Zvcm1Ob1ZhbGlkYXRlJyxcbiAgZm9ybXRhcmdldDogJ2Zvcm1UYXJnZXQnLFxuICBmcmFtZWJvcmRlcjogJ2ZyYW1lQm9yZGVyJyxcbiAgaGVhZGVyczogJ2hlYWRlcnMnLFxuICBoZWlnaHQ6ICdoZWlnaHQnLFxuICBoaWRkZW46ICdoaWRkZW4nLFxuICBoaWdoOiAnaGlnaCcsXG4gIGhyZWY6ICdocmVmJyxcbiAgaHJlZmxhbmc6ICdocmVmTGFuZycsXG4gIGZvcjogJ2h0bWxGb3InLFxuICAnaHR0cC1lcXVpdic6ICdodHRwRXF1aXYnLFxuICBpY29uOiAnaWNvbicsXG4gIGlkOiAnaWQnLFxuICBpbnB1dG1vZGU6ICdpbnB1dE1vZGUnLFxuICBpbnRlZ3JpdHk6ICdpbnRlZ3JpdHknLFxuICBpczogJ2lzJyxcbiAga2V5cGFyYW1zOiAna2V5UGFyYW1zJyxcbiAga2V5dHlwZTogJ2tleVR5cGUnLFxuICBraW5kOiAna2luZCcsXG4gIGxhYmVsOiAnbGFiZWwnLFxuICBsYW5nOiAnbGFuZycsXG4gIGxpc3Q6ICdsaXN0JyxcbiAgbG9vcDogJ2xvb3AnLFxuICBsb3c6ICdsb3cnLFxuICBtYW5pZmVzdDogJ21hbmlmZXN0JyxcbiAgbWFyZ2luaGVpZ2h0OiAnbWFyZ2luSGVpZ2h0JyxcbiAgbWFyZ2lud2lkdGg6ICdtYXJnaW5XaWR0aCcsXG4gIG1heDogJ21heCcsXG4gIG1heGxlbmd0aDogJ21heExlbmd0aCcsXG4gIG1lZGlhOiAnbWVkaWEnLFxuICBtZWRpYWdyb3VwOiAnbWVkaWFHcm91cCcsXG4gIG1ldGhvZDogJ21ldGhvZCcsXG4gIG1pbjogJ21pbicsXG4gIG1pbmxlbmd0aDogJ21pbkxlbmd0aCcsXG4gIG11bHRpcGxlOiAnbXVsdGlwbGUnLFxuICBtdXRlZDogJ211dGVkJyxcbiAgbmFtZTogJ25hbWUnLFxuICBub25jZTogJ25vbmNlJyxcbiAgbm92YWxpZGF0ZTogJ25vVmFsaWRhdGUnLFxuICBvcGVuOiAnb3BlbicsXG4gIG9wdGltdW06ICdvcHRpbXVtJyxcbiAgcGF0dGVybjogJ3BhdHRlcm4nLFxuICBwbGFjZWhvbGRlcjogJ3BsYWNlaG9sZGVyJyxcbiAgcGxheXNpbmxpbmU6ICdwbGF5c0lubGluZScsXG4gIHBvc3RlcjogJ3Bvc3RlcicsXG4gIHByZWxvYWQ6ICdwcmVsb2FkJyxcbiAgcHJvZmlsZTogJ3Byb2ZpbGUnLFxuICByYWRpb2dyb3VwOiAncmFkaW9Hcm91cCcsXG4gIHJlYWRvbmx5OiAncmVhZE9ubHknLFxuICByZWZlcnJlcnBvbGljeTogJ3JlZmVycmVyUG9saWN5JyxcbiAgcmVsOiAncmVsJyxcbiAgcmVxdWlyZWQ6ICdyZXF1aXJlZCcsXG4gIHJldmVyc2VkOiAncmV2ZXJzZWQnLFxuICByb2xlOiAncm9sZScsXG4gIHJvd3M6ICdyb3dzJyxcbiAgcm93c3BhbjogJ3Jvd1NwYW4nLFxuICBzYW5kYm94OiAnc2FuZGJveCcsXG4gIHNjb3BlOiAnc2NvcGUnLFxuICBzY29wZWQ6ICdzY29wZWQnLFxuICBzY3JvbGxpbmc6ICdzY3JvbGxpbmcnLFxuICBzZWFtbGVzczogJ3NlYW1sZXNzJyxcbiAgc2VsZWN0ZWQ6ICdzZWxlY3RlZCcsXG4gIHNoYXBlOiAnc2hhcGUnLFxuICBzaXplOiAnc2l6ZScsXG4gIHNpemVzOiAnc2l6ZXMnLFxuICBzbG90OiAnc2xvdCcsXG4gIHNwYW46ICdzcGFuJyxcbiAgc3BlbGxjaGVjazogJ3NwZWxsQ2hlY2snLFxuICBzcmM6ICdzcmMnLFxuICBzcmNkb2M6ICdzcmNEb2MnLFxuICBzcmNsYW5nOiAnc3JjTGFuZycsXG4gIHNyY3NldDogJ3NyY1NldCcsXG4gIHN0YXJ0OiAnc3RhcnQnLFxuICBzdGVwOiAnc3RlcCcsXG4gIHN0eWxlOiAnc3R5bGUnLFxuICBzdW1tYXJ5OiAnc3VtbWFyeScsXG4gIHRhYmluZGV4OiAndGFiSW5kZXgnLFxuICB0YXJnZXQ6ICd0YXJnZXQnLFxuICB0aXRsZTogJ3RpdGxlJyxcbiAgdHlwZTogJ3R5cGUnLFxuICB1c2VtYXA6ICd1c2VNYXAnLFxuICB2YWx1ZTogJ3ZhbHVlJyxcbiAgd2lkdGg6ICd3aWR0aCcsXG4gIHdtb2RlOiAnd21vZGUnLFxuICB3cmFwOiAnd3JhcCcsXG4gIC8qKlxuICAgKiBSREZhIFByb3BlcnRpZXNcbiAgICovXG4gIGFib3V0OiAnYWJvdXQnLFxuICBkYXRhdHlwZTogJ2RhdGF0eXBlJyxcbiAgaW5saXN0OiAnaW5saXN0JyxcbiAgcHJlZml4OiAncHJlZml4JyxcbiAgcHJvcGVydHk6ICdwcm9wZXJ0eScsXG4gIHJlc291cmNlOiAncmVzb3VyY2UnLFxuICB0eXBlb2Y6ICd0eXBlb2YnLFxuICB2b2NhYjogJ3ZvY2FiJyxcbiAgLyoqXG4gICAqIE5vbi1zdGFuZGFyZCBQcm9wZXJ0aWVzXG4gICAqL1xuICBhdXRvY2FwaXRhbGl6ZTogJ2F1dG9DYXBpdGFsaXplJyxcbiAgYXV0b2NvcnJlY3Q6ICdhdXRvQ29ycmVjdCcsXG4gIGF1dG9zYXZlOiAnYXV0b1NhdmUnLFxuICBjb2xvcjogJ2NvbG9yJyxcbiAgaXRlbXByb3A6ICdpdGVtUHJvcCcsXG4gIGl0ZW1zY29wZTogJ2l0ZW1TY29wZScsXG4gIGl0ZW10eXBlOiAnaXRlbVR5cGUnLFxuICBpdGVtaWQ6ICdpdGVtSUQnLFxuICBpdGVtcmVmOiAnaXRlbVJlZicsXG4gIHJlc3VsdHM6ICdyZXN1bHRzJyxcbiAgc2VjdXJpdHk6ICdzZWN1cml0eScsXG4gIHVuc2VsZWN0YWJsZTogJ3Vuc2VsZWN0YWJsZSdcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IElubGluZVN0eWxlVG9PYmplY3Q7XG4vKipcbiAqIENvbnZlcnRzIGFuIGlubGluZSBzdHlsZSBzdHJpbmcgaW50byBhbiBvYmplY3Qgb2YgUmVhY3Qgc3R5bGUgcHJvcGVydGllc1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBpbmxpbmVTdHlsZT0nJyBUaGUgaW5saW5lIHN0eWxlIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBjb252ZXJ0ZWQgc3R5bGVcbiAqL1xuZnVuY3Rpb24gSW5saW5lU3R5bGVUb09iamVjdCgpIHtcbiAgdmFyIGlubGluZVN0eWxlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnJztcblxuXG4gIC8vIGp1c3QgcmV0dXJuIGVtcHR5IG9iamVjdCBpZiB0aGUgaW5saW5lU3R5bGUgaXMgZW1wdHlcbiAgaWYgKGlubGluZVN0eWxlID09PSAnJykge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIHJldHVybiBpbmxpbmVTdHlsZS5zcGxpdCgnOycpLnJlZHVjZShmdW5jdGlvbiAoc3R5bGVPYmplY3QsIHN0eWxlUHJvcGVydHlWYWx1ZSkge1xuXG4gICAgLy8gZXh0cmFjdCB0aGUgc3R5bGUgcHJvcGVydHkgbmFtZSBhbmQgdmFsdWVcbiAgICB2YXIgX3N0eWxlUHJvcGVydHlWYWx1ZSRzID0gc3R5bGVQcm9wZXJ0eVZhbHVlLnNwbGl0KC9eKFteOl0rKTovKS5maWx0ZXIoZnVuY3Rpb24gKHZhbCwgaSkge1xuICAgICAgcmV0dXJuIGkgPiAwO1xuICAgIH0pLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW0udHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgfSksXG4gICAgICAgIF9zdHlsZVByb3BlcnR5VmFsdWUkczIgPSBfc2xpY2VkVG9BcnJheShfc3R5bGVQcm9wZXJ0eVZhbHVlJHMsIDIpLFxuICAgICAgICBwcm9wZXJ0eSA9IF9zdHlsZVByb3BlcnR5VmFsdWUkczJbMF0sXG4gICAgICAgIHZhbHVlID0gX3N0eWxlUHJvcGVydHlWYWx1ZSRzMlsxXTtcblxuICAgIC8vIGlmIHRoZXJlIGlzIG5vIHZhbHVlIChpLmUuIG5vIDogaW4gdGhlIHN0eWxlKSB0aGVuIGlnbm9yZSBpdFxuXG5cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHN0eWxlT2JqZWN0O1xuICAgIH1cblxuICAgIC8vIGNvbnZlcnQgdGhlIHByb3BlcnR5IG5hbWUgaW50byB0aGUgY29ycmVjdCBSZWFjdCBmb3JtYXRcbiAgICAvLyByZW1vdmUgYWxsIGh5cGhlbnMgYW5kIGNvbnZlcnQgdGhlIGxldHRlciBpbW1lZGlhdGVseSBhZnRlciBlYWNoIGh5cGhlbiB0byB1cHBlciBjYXNlXG4gICAgLy8gYWRkaXRpb25hbGx5IGRvbid0IHVwcGVyY2FzZSBhbnkgLW1zLSBwcmVmaXhcbiAgICAvLyBlLmcuIC1tcy1zdHlsZS1wcm9wZXJ0eSA9IG1zU3R5bGVQcm9wZXJ0eVxuICAgIC8vICAgICAgLXdlYmtpdC1zdHlsZS1wcm9wZXJ0eSA9IFdlYmtpdFN0eWxlUHJvcGVydHlcbiAgICBwcm9wZXJ0eSA9IHByb3BlcnR5LnJlcGxhY2UoL14tbXMtLywgJ21zLScpLnJlcGxhY2UoLy0oLikvZywgZnVuY3Rpb24gKF8sIGNoYXJhY3Rlcikge1xuICAgICAgcmV0dXJuIGNoYXJhY3Rlci50b1VwcGVyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLy8gYWRkIHRoZSBuZXcgc3R5bGUgcHJvcGVydHkgYW5kIHZhbHVlIHRvIHRoZSBzdHlsZSBvYmplY3RcbiAgICBzdHlsZU9iamVjdFtwcm9wZXJ0eV0gPSB2YWx1ZTtcblxuICAgIHJldHVybiBzdHlsZU9iamVjdDtcbiAgfSwge30pO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbi8qKlxuICogTGlzdCBvZiB2b2lkIGVsZW1lbnRzXG4gKiBUaGVzZSBlbGVtZW50cyBhcmUgbm90IGFsbG93ZWQgdG8gaGF2ZSBjaGlsZHJlblxuICogQHR5cGUge0FycmF5fVxuICovXG5leHBvcnRzLmRlZmF1bHQgPSBbJ2FyZWEnLCAnYmFzZScsICdicicsICdjb2wnLCAnY29tbWFuZCcsICdlbWJlZCcsICdocicsICdpbWcnLCAnaW5wdXQnLCAna2V5Z2VuJywgJ2xpbmsnLCAnbWV0YScsICdwYXJhbScsICdzb3VyY2UnLCAndHJhY2snLCAnd2JyJ107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gU3R5bGVFbGVtZW50VHlwZTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX2dlbmVyYXRlUHJvcHNGcm9tQXR0cmlidXRlcyA9IHJlcXVpcmUoJy4uL3V0aWxzL2dlbmVyYXRlUHJvcHNGcm9tQXR0cmlidXRlcycpO1xuXG52YXIgX2dlbmVyYXRlUHJvcHNGcm9tQXR0cmlidXRlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZW5lcmF0ZVByb3BzRnJvbUF0dHJpYnV0ZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIENvbnZlcnRzIGEgPHN0eWxlPiBlbGVtZW50IHRvIGEgUmVhY3QgZWxlbWVudFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBub2RlIFRoZSBzdHlsZSBub2RlXG4gKiBAcGFyYW0ge1N0cmluZ30gaW5kZXggVGhlIGluZGV4IG9mIHRoZSBSZWFjdCBlbGVtZW50IHJlbGF0aXZlIHRvIGl0J3MgcGFyZW50XG4gKiBAcmV0dXJucyB7UmVhY3QuRWxlbWVudH0gVGhlIFJlYWN0IHN0eWxlIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gU3R5bGVFbGVtZW50VHlwZShub2RlLCBpbmRleCkge1xuXG4gIC8vIFRoZSBzdHlsZSBlbGVtZW50IG9ubHkgZXZlciBoYXMgYSBzaW5nbGUgY2hpbGQgd2hpY2ggaXMgdGhlIHN0eWxlcyBzbyB0cnkgYW5kIGZpbmQgdGhpcyB0byBhZGQgYXNcbiAgLy8gYSBjaGlsZCB0byB0aGUgc3R5bGUgZWxlbWVudCB0aGF0IHdpbGwgYmUgY3JlYXRlZFxuICB2YXIgc3R5bGVzID0gdm9pZCAwO1xuICBpZiAobm9kZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgc3R5bGVzID0gbm9kZS5jaGlsZHJlblswXS5kYXRhO1xuICB9XG5cbiAgLy8gZ2VuZXJhdGUgcHJvcHNcbiAgdmFyIHByb3BzID0gKDAsIF9nZW5lcmF0ZVByb3BzRnJvbUF0dHJpYnV0ZXMyLmRlZmF1bHQpKG5vZGUuYXR0cmlicywgaW5kZXgpO1xuXG4gIC8vIGNyZWF0ZSBhbmQgcmV0dXJuIHRoZSBlbGVtZW50XG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnc3R5bGUnLCBwcm9wcywgc3R5bGVzKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IFVuc3VwcG9ydGVkRWxlbWVudFR5cGU7XG4vKipcbiAqIEhhbmRsZXMgYW4gdW5zdXBwb3J0ZWQgZWxlbWVudCB0eXBlIGJ5IHJldHVybmluZyBudWxsIHNvIG5vdGhpbmcgaXMgcmVuZGVyZWRcbiAqIEByZXR1cm5zIHtudWxsfVxuICovXG5mdW5jdGlvbiBVbnN1cHBvcnRlZEVsZW1lbnRUeXBlKCkge1xuXG4gIC8vIGRvIG5vdGhpbmcgYmVjYXVzZSB0aGUgZWxlbWVudCB0eXBlIGlzIHVuc3VwcG9ydGVkXG4gIC8vIGNvbW1lbnQsIGRpcmVjdGl2ZSwgc2NyaXB0LCBjZGF0YSwgZG9jdHlwZSBhcmUgYWxsIGN1cnJlbnRseSB1bnN1cHBvcnRlZFxuICByZXR1cm4gbnVsbDtcbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBIdG1sUGFyc2VyO1xuXG52YXIgX2h0bWxwYXJzZXIgPSByZXF1aXJlKCdodG1scGFyc2VyMicpO1xuXG52YXIgX2h0bWxwYXJzZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaHRtbHBhcnNlcik7XG5cbnZhciBfcHJvY2Vzc05vZGVzID0gcmVxdWlyZSgnLi9wcm9jZXNzTm9kZXMnKTtcblxudmFyIF9wcm9jZXNzTm9kZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvY2Vzc05vZGVzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBQYXJzZXMgYSBIVE1MIHN0cmluZyBhbmQgcmV0dXJucyBhIGxpc3Qgb2YgUmVhY3QgY29tcG9uZW50cyBnZW5lcmF0ZWQgZnJvbSBpdFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBodG1sIFRoZSBIVE1MIHRvIGNvbnZlcnQgaW50byBSZWFjdCBjb21wb25lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIE9wdGlvbnMgdG8gcGFzc1xuICogQHJldHVybnMge0FycmF5fSBMaXN0IG9mIHRvcCBsZXZlbCBSZWFjdCBlbGVtZW50c1xuICovXG5mdW5jdGlvbiBIdG1sUGFyc2VyKGh0bWwpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgICAgX3JlZiRkZWNvZGVFbnRpdGllcyA9IF9yZWYuZGVjb2RlRW50aXRpZXMsXG4gICAgICBkZWNvZGVFbnRpdGllcyA9IF9yZWYkZGVjb2RlRW50aXRpZXMgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBfcmVmJGRlY29kZUVudGl0aWVzLFxuICAgICAgdHJhbnNmb3JtID0gX3JlZi50cmFuc2Zvcm0sXG4gICAgICBfcmVmJHByZXByb2Nlc3NOb2RlcyA9IF9yZWYucHJlcHJvY2Vzc05vZGVzLFxuICAgICAgcHJlcHJvY2Vzc05vZGVzID0gX3JlZiRwcmVwcm9jZXNzTm9kZXMgPT09IHVuZGVmaW5lZCA/IGZ1bmN0aW9uIChub2Rlcykge1xuICAgIHJldHVybiBub2RlcztcbiAgfSA6IF9yZWYkcHJlcHJvY2Vzc05vZGVzO1xuXG4gIHZhciBub2RlcyA9IHByZXByb2Nlc3NOb2RlcyhfaHRtbHBhcnNlcjIuZGVmYXVsdC5wYXJzZURPTShodG1sLCB7IGRlY29kZUVudGl0aWVzOiBkZWNvZGVFbnRpdGllcyB9KSk7XG4gIHJldHVybiAoMCwgX3Byb2Nlc3NOb2RlczIuZGVmYXVsdCkobm9kZXMsIHRyYW5zZm9ybSk7XG59IiwidmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0xMS0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tMTEtMiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMTEtMyEuL2xvYWRlci5zY3NzXCIpO1xuY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbmlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xufVxuXG52YXIgb3B0aW9ucyA9IHt9XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmIChjb250ZW50LmxvY2Fscykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xufVxuIiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyh0cnVlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmxvYWRlci13cmFwcGVye2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtwYWRkaW5nOi4zcmVtfS5sb2FkZXItd3JhcHBlciAudGhyZWVfZG90X2xvYWRlcntwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDouNXJlbTtoZWlnaHQ6LjVyZW07bWFyZ2luOjAgLjc1cmVtO2JvcmRlci1yYWRpdXM6NTAlO2JhY2tncm91bmQtY29sb3I6Y3VycmVudENvbG9yOy13ZWJraXQtYW5pbWF0aW9uLW5hbWU6ZmFkZTthbmltYXRpb24tbmFtZTpmYWRlOy13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOi44czthbmltYXRpb24tZHVyYXRpb246LjhzOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoMC40NSwgMC4wNSwgMC41NSwgMC45NSk7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoMC40NSwgMC4wNSwgMC41NSwgMC45NSk7LXdlYmtpdC1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50OmluZmluaXRlO2FuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6aW5maW5pdGU7YW5pbWF0aW9uLWRpcmVjdGlvbjphbHRlcm5hdGUtcmV2ZXJzZTstd2Via2l0LWFuaW1hdGlvbi1kZWxheTouMjY2NjdzO2FuaW1hdGlvbi1kZWxheTouMjY2NjdzfS5sb2FkZXItd3JhcHBlciAudGhyZWVfZG90X2xvYWRlcjo6YmVmb3JlLC5sb2FkZXItd3JhcHBlciAudGhyZWVfZG90X2xvYWRlcjo6YWZ0ZXJ7Y29udGVudDonJztwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtyaWdodDowO2JvdHRvbTowO2xlZnQ6MDt3aWR0aDppbmhlcml0O2hlaWdodDppbmhlcml0O2JvcmRlci1yYWRpdXM6aW5oZXJpdDtiYWNrZ3JvdW5kLWNvbG9yOmluaGVyaXQ7LXdlYmtpdC1hbmltYXRpb246aW5oZXJpdDthbmltYXRpb246aW5oZXJpdH0ubG9hZGVyLXdyYXBwZXIgLnRocmVlX2RvdF9sb2FkZXI6OmJlZm9yZXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGV4KC0xNTAlKTt0cmFuc2Zvcm06dHJhbnNsYXRleCgtMTUwJSk7LXdlYmtpdC1hbmltYXRpb24tZGVsYXk6MHM7YW5pbWF0aW9uLWRlbGF5OjBzfS5sb2FkZXItd3JhcHBlciAudGhyZWVfZG90X2xvYWRlcjo6YWZ0ZXJ7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRleCgxNTAlKTt0cmFuc2Zvcm06dHJhbnNsYXRleCgxNTAlKTstd2Via2l0LWFuaW1hdGlvbi1kZWxheTouNTMzMzNzO2FuaW1hdGlvbi1kZWxheTouNTMzMzNzfUAtd2Via2l0LWtleWZyYW1lcyBmYWRle2Zyb217b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZXkoMSk7dHJhbnNmb3JtOnRyYW5zbGF0ZXkoMSl9dG97b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZXkoMik7dHJhbnNmb3JtOnRyYW5zbGF0ZXkoMil9fUBrZXlmcmFtZXMgZmFkZXtmcm9te29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGV5KDEpO3RyYW5zZm9ybTp0cmFuc2xhdGV5KDEpfXRve29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGV5KDIpO3RyYW5zZm9ybTp0cmFuc2xhdGV5KDIpfX1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCIvaG9tZS9kZWVwL0Rlc2t0b3AvcHJvamVjdHMvY3Jhd2xtZS9mcm9udGVuZC9zcmMvY29tcG9uZW50cy9jb21tb24vbG9hZGVyLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBSUEsZ0JBQ0ksbUJBQWEsQ0FBYixZQUFhLENBQ2IsdUJBQXVCLENBQXZCLHNCQUF1QixDQUN2Qix3QkFBbUIsQ0FBbkIsa0JBQW1CLENBQ25CLGFBQWUsQ0FKbkIsa0NBTVEsaUJBQWtCLENBQ2xCLFdBWFEsQ0FZUixZQVpRLENBYVIsZUFBeUIsQ0FDekIsaUJBQWtCLENBQ2xCLDZCQUE4QixDQUM5QiwyQkFBb0IsQ0FBcEIsbUJBQW9CLENBQ3BCLDhCQUFvQixDQUFwQixzQkFBb0IsQ0FDcEIsc0VBQStELENBQS9ELDhEQUErRCxDQUMvRCwwQ0FBbUMsQ0FBbkMsa0NBQW1DLENBQ25DLHFDQUFzQyxDQXNCdEMsK0JBQWdCLENBQWhCLHVCQUFpQixDQXRDekIsbUZBb0JVLFVBQVcsQ0FDWCxpQkFBa0IsQ0FDbEIsS0FBTSxDQUNOLE9BQVEsQ0FDUixRQUFTLENBQ1QsTUFBTyxDQUNQLGFBQWMsQ0FDZCxjQUFlLENBQ2YscUJBQXNCLENBQ3RCLHdCQUF5QixDQUN6Qix5QkFBVyxDQUFYLGlCQUFrQixDQTlCNUIsMENBa0NVLG1DQUE0QixDQUE1QiwyQkFBNEIsQ0FDNUIsMEJBQWdCLENBQWhCLGtCQUFpQixDQW5DM0IseUNBeUNVLGtDQUEyQixDQUEzQiwwQkFBMkIsQ0FDM0IsK0JBQWdCLENBQWhCLHVCQUFpQixDQUNsQix3QkFNUCxLQUNFLFNBQVUsQ0FDViwrQkFBVyxDQUFYLHVCQUF3QixDQUUxQixHQUNFLFNBQVUsQ0FDViwrQkFBVyxDQUFYLHVCQUF3QixDQUFBLENBWm5CLGdCQU1QLEtBQ0UsU0FBVSxDQUNWLCtCQUFXLENBQVgsdUJBQXdCLENBRTFCLEdBQ0UsU0FBVSxDQUNWLCtCQUFXLENBQVgsdUJBQXdCLENBQUFcIixcImZpbGVcIjpcImxvYWRlci5zY3NzXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIiRkb3Qtc2l6ZTogLjVyZW07XFxuJGFuaW1hdGlvbi1kdXJhdGlvbjogMC44cztcXG5cXG5cXG4ubG9hZGVyLXdyYXBwZXJ7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBwYWRkaW5nIDogLjNyZW07XFxuICAgIC50aHJlZV9kb3RfbG9hZGVyIHtcXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgICAgIHdpZHRoOiAkZG90LXNpemU7XFxuICAgICAgICBoZWlnaHQ6ICRkb3Qtc2l6ZTtcXG4gICAgICAgIG1hcmdpbjogMCAkZG90LXNpemUgKiAxLjU7XFxuICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBjdXJyZW50Q29sb3I7XFxuICAgICAgICBhbmltYXRpb24tbmFtZTogZmFkZTtcXG4gICAgICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogI3skYW5pbWF0aW9uLWR1cmF0aW9ufTtcXG4gICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjQ1LCAwLjA1LCAwLjU1LCAwLjk1KTtcXG4gICAgICAgIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IGluZmluaXRlO1xcbiAgICAgICAgYW5pbWF0aW9uLWRpcmVjdGlvbjogYWx0ZXJuYXRlLXJldmVyc2U7XFxuICAgICAgXFxuICAgICAgICAmOjpiZWZvcmUsXFxuICAgICAgICAmOjphZnRlciB7XFxuICAgICAgICAgIGNvbnRlbnQ6ICcnO1xcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICAgIHRvcDogMDtcXG4gICAgICAgICAgcmlnaHQ6IDA7XFxuICAgICAgICAgIGJvdHRvbTogMDtcXG4gICAgICAgICAgbGVmdDogMDtcXG4gICAgICAgICAgd2lkdGg6IGluaGVyaXQ7XFxuICAgICAgICAgIGhlaWdodDogaW5oZXJpdDtcXG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogaW5oZXJpdDtcXG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogaW5oZXJpdDtcXG4gICAgICAgICAgYW5pbWF0aW9uOiBpbmhlcml0O1xcbiAgICAgICAgfVxcbiAgICAgIFxcbiAgICAgICAgJjo6YmVmb3JlIHtcXG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGV4KC0xNTAlKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLWRlbGF5OiAjeyRhbmltYXRpb24tZHVyYXRpb24gKiAwfTtcXG4gICAgICAgIH1cXG4gICAgICBcXG4gICAgICAgIGFuaW1hdGlvbi1kZWxheTogI3skYW5pbWF0aW9uLWR1cmF0aW9uICogKDEvMyl9O1xcbiAgICAgIFxcbiAgICAgICAgJjo6YWZ0ZXIge1xcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZXgoMTUwJSk7XFxuICAgICAgICAgIGFuaW1hdGlvbi1kZWxheTogI3skYW5pbWF0aW9uLWR1cmF0aW9uICogKDIvMyl9O1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG59XFxuXFxuXFxuQGtleWZyYW1lcyBmYWRlIHtcXG4gIGZyb20ge1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZXkoMSk7XFxuICB9XFxuICB0byB7XFxuICAgIG9wYWNpdHk6IDE7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRleSgyKTtcXG4gIH1cXG59XCJdfV0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwidmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0xMS0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tMTEtMiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMTEtMyEuL2Jsb2cuc2Nzc1wiKTtcbmNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG5pZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbn1cblxudmFyIG9wdGlvbnMgPSB7fVxuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZiAoY29udGVudC5sb2NhbHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbn1cbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18odHJ1ZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5ibG9nLXdyYXBwZXJ7bWluLWhlaWdodDoxMDB2aDtiYWNrZ3JvdW5kLWNvbG9yOndoaXRlfS5ibG9nLXdyYXBwZXIgLm5vdC1mb3VuZHtwYWRkaW5nOjVyZW0gMH0uYmxvZy13cmFwcGVyIC5ub3QtZm91bmQgaDV7dGV4dC1hbGlnbjpjZW50ZXJ9LmJsb2ctd3JhcHBlciAuYmxvZy1ib2R5e3BhZGRpbmctYm90dG9tOjEwcmVtfS5ibG9nLXdyYXBwZXIgLmJsb2ctYm9keSAuYmFzaWMtaW5mb3t0ZXh0LWFsaWduOmNlbnRlcjtwYWRkaW5nOi43cmVtIDA7YmFja2dyb3VuZC1jb2xvcjpnYWluc2Jvcm87Zm9udC1zaXplOi44cmVtfS5ibG9nLXdyYXBwZXIgLmJsb2ctYm9keSAjYmxvZy1ib2R5LXJlc3BvbnNlc3ttYXJnaW46MCBhdXRvO3BhZGRpbmc6MTB2d30uYmxvZy13cmFwcGVyIC5ibG9nLWJvZHkgI2Jsb2ctYm9keS1yZXNwb25zZXMgLmpzLXJlc3BvbnNlc1N0cmVhbU90aGVye21heC13aWR0aDo0NXJlbTttYXJnaW46MCBhdXRvfS5ibG9nLXdyYXBwZXIgLmJsb2ctYm9keSAjYmxvZy1ib2R5LXJlc3BvbnNlcyAubG9hZGVye3RleHQtYWxpZ246Y2VudGVyfS5ibG9nLXdyYXBwZXIgLmhpZGRlbntkaXNwbGF5Om5vbmV9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wiL2hvbWUvZGVlcC9EZXNrdG9wL3Byb2plY3RzL2NyYXdsbWUvZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvYmxvZy9ibG9nLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsY0FDSSxnQkFBdUIsQ0FDdkIsc0JBQXVCLENBRjNCLHlCQUtRLGNBQWUsQ0FMdkIsNEJBT1ksaUJBQWtCLENBUDlCLHlCQVdRLG9CQUFxQixDQVg3QixxQ0FjWSxpQkFBd0IsQ0FDeEIsZUFBeUIsQ0FDekIsMEJBQTJCLENBQzNCLGVBQXVCLENBakJuQyw4Q0FxQlksYUFBZSxDQUNmLFlBQWEsQ0F0QnpCLHVFQXlCZ0IsZUFBZ0IsQ0FDaEIsYUFBYyxDQTFCOUIsc0RBNkJnQixpQkFBa0IsQ0E3QmxDLHNCQWtDUSxZQUFhXCIsXCJmaWxlXCI6XCJibG9nLnNjc3NcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmJsb2ctd3JhcHBlciB7XFxuICAgIG1pbi1oZWlnaHQgICAgICA6IDEwMHZoO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG5cXG4gICAgLm5vdC1mb3VuZHtcXG4gICAgICAgIHBhZGRpbmc6IDVyZW0gMDtcXG4gICAgICAgIGg1e1xcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICAuYmxvZy1ib2R5IHtcXG4gICAgICAgIHBhZGRpbmctYm90dG9tOiAxMHJlbTtcXG5cXG4gICAgICAgIC5iYXNpYy1pbmZvIHtcXG4gICAgICAgICAgICB0ZXh0LWFsaWduICAgICAgOiBjZW50ZXI7XFxuICAgICAgICAgICAgcGFkZGluZyAgICAgICAgIDogLjdyZW0gMDtcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBnYWluc2Jvcm87XFxuICAgICAgICAgICAgZm9udC1zaXplICAgICAgIDogLjhyZW07XFxuICAgICAgICB9XFxuXFxuICAgICAgICAjYmxvZy1ib2R5LXJlc3BvbnNlcyB7XFxuICAgICAgICAgICAgbWFyZ2luIDogMCBhdXRvO1xcbiAgICAgICAgICAgIHBhZGRpbmc6IDEwdnc7XFxuICAgICAgICAgICAgXFxuICAgICAgICAgICAgLmpzLXJlc3BvbnNlc1N0cmVhbU90aGVye1xcbiAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IDQ1cmVtO1xcbiAgICAgICAgICAgICAgICBtYXJnaW46IDAgYXV0bztcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgLmxvYWRlcntcXG4gICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICAuaGlkZGVuIHtcXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgIH1cXG59XCJdfV0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwiLy8gSW4gcHJvZHVjdGlvbiwgd2UgcmVnaXN0ZXIgYSBzZXJ2aWNlIHdvcmtlciB0byBzZXJ2ZSBhc3NldHMgZnJvbSBsb2NhbCBjYWNoZS5cblxuLy8gVGhpcyBsZXRzIHRoZSBhcHAgbG9hZCBmYXN0ZXIgb24gc3Vic2VxdWVudCB2aXNpdHMgaW4gcHJvZHVjdGlvbiwgYW5kIGdpdmVzXG4vLyBpdCBvZmZsaW5lIGNhcGFiaWxpdGllcy4gSG93ZXZlciwgaXQgYWxzbyBtZWFucyB0aGF0IGRldmVsb3BlcnMgKGFuZCB1c2Vycylcbi8vIHdpbGwgb25seSBzZWUgZGVwbG95ZWQgdXBkYXRlcyBvbiB0aGUgXCJOKzFcIiB2aXNpdCB0byBhIHBhZ2UsIHNpbmNlIHByZXZpb3VzbHlcbi8vIGNhY2hlZCByZXNvdXJjZXMgYXJlIHVwZGF0ZWQgaW4gdGhlIGJhY2tncm91bmQuXG5cbi8vIFRvIGxlYXJuIG1vcmUgYWJvdXQgdGhlIGJlbmVmaXRzIG9mIHRoaXMgbW9kZWwsIHJlYWQgaHR0cHM6Ly9nb28uZ2wvS3d2RE55LlxuLy8gVGhpcyBsaW5rIGFsc28gaW5jbHVkZXMgaW5zdHJ1Y3Rpb25zIG9uIG9wdGluZyBvdXQgb2YgdGhpcyBiZWhhdmlvci5cblxuY29uc3QgaXNMb2NhbGhvc3QgPSBCb29sZWFuKFxuICB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgPT09ICdsb2NhbGhvc3QnIHx8XG4gICAgLy8gWzo6MV0gaXMgdGhlIElQdjYgbG9jYWxob3N0IGFkZHJlc3MuXG4gICAgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lID09PSAnWzo6MV0nIHx8XG4gICAgLy8gMTI3LjAuMC4xLzggaXMgY29uc2lkZXJlZCBsb2NhbGhvc3QgZm9yIElQdjQuXG4gICAgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lLm1hdGNoKFxuICAgICAgL14xMjcoPzpcXC4oPzoyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pKXszfSQvXG4gICAgKVxuKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVnaXN0ZXIoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nICYmICdzZXJ2aWNlV29ya2VyJyBpbiBuYXZpZ2F0b3IpIHtcbiAgICAvLyBUaGUgVVJMIGNvbnN0cnVjdG9yIGlzIGF2YWlsYWJsZSBpbiBhbGwgYnJvd3NlcnMgdGhhdCBzdXBwb3J0IFNXLlxuICAgIGNvbnN0IHB1YmxpY1VybCA9IG5ldyBVUkwocHJvY2Vzcy5lbnYuUFVCTElDX1VSTCwgd2luZG93LmxvY2F0aW9uKTtcbiAgICBpZiAocHVibGljVXJsLm9yaWdpbiAhPT0gd2luZG93LmxvY2F0aW9uLm9yaWdpbikge1xuICAgICAgLy8gT3VyIHNlcnZpY2Ugd29ya2VyIHdvbid0IHdvcmsgaWYgUFVCTElDX1VSTCBpcyBvbiBhIGRpZmZlcmVudCBvcmlnaW5cbiAgICAgIC8vIGZyb20gd2hhdCBvdXIgcGFnZSBpcyBzZXJ2ZWQgb24uIFRoaXMgbWlnaHQgaGFwcGVuIGlmIGEgQ0ROIGlzIHVzZWQgdG9cbiAgICAgIC8vIHNlcnZlIGFzc2V0czsgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9va2luY3ViYXRvci9jcmVhdGUtcmVhY3QtYXBwL2lzc3Vlcy8yMzc0XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBzd1VybCA9IGAke3Byb2Nlc3MuZW52LlBVQkxJQ19VUkx9L3NlcnZpY2Utd29ya2VyLmpzYDtcblxuICAgICAgaWYgKGlzTG9jYWxob3N0KSB7XG4gICAgICAgIC8vIFRoaXMgaXMgcnVubmluZyBvbiBsb2NhbGhvc3QuIExldHMgY2hlY2sgaWYgYSBzZXJ2aWNlIHdvcmtlciBzdGlsbCBleGlzdHMgb3Igbm90LlxuICAgICAgICBjaGVja1ZhbGlkU2VydmljZVdvcmtlcihzd1VybCk7XG5cbiAgICAgICAgLy8gQWRkIHNvbWUgYWRkaXRpb25hbCBsb2dnaW5nIHRvIGxvY2FsaG9zdCwgcG9pbnRpbmcgZGV2ZWxvcGVycyB0byB0aGVcbiAgICAgICAgLy8gc2VydmljZSB3b3JrZXIvUFdBIGRvY3VtZW50YXRpb24uXG4gICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlYWR5LnRoZW4oKCkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgJ1RoaXMgd2ViIGFwcCBpcyBiZWluZyBzZXJ2ZWQgY2FjaGUtZmlyc3QgYnkgYSBzZXJ2aWNlICcgK1xuICAgICAgICAgICAgICAnd29ya2VyLiBUbyBsZWFybiBtb3JlLCB2aXNpdCBodHRwczovL2dvby5nbC9TQzdjZ1EnXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJcyBub3QgbG9jYWwgaG9zdC4gSnVzdCByZWdpc3RlciBzZXJ2aWNlIHdvcmtlclxuICAgICAgICByZWdpc3RlclZhbGlkU1coc3dVcmwpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyVmFsaWRTVyhzd1VybCkge1xuICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlclxuICAgIC5yZWdpc3Rlcihzd1VybClcbiAgICAudGhlbihyZWdpc3RyYXRpb24gPT4ge1xuICAgICAgcmVnaXN0cmF0aW9uLm9udXBkYXRlZm91bmQgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGluc3RhbGxpbmdXb3JrZXIgPSByZWdpc3RyYXRpb24uaW5zdGFsbGluZztcbiAgICAgICAgaW5zdGFsbGluZ1dvcmtlci5vbnN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgIGlmIChpbnN0YWxsaW5nV29ya2VyLnN0YXRlID09PSAnaW5zdGFsbGVkJykge1xuICAgICAgICAgICAgaWYgKG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgLy8gQXQgdGhpcyBwb2ludCwgdGhlIG9sZCBjb250ZW50IHdpbGwgaGF2ZSBiZWVuIHB1cmdlZCBhbmRcbiAgICAgICAgICAgICAgLy8gdGhlIGZyZXNoIGNvbnRlbnQgd2lsbCBoYXZlIGJlZW4gYWRkZWQgdG8gdGhlIGNhY2hlLlxuICAgICAgICAgICAgICAvLyBJdCdzIHRoZSBwZXJmZWN0IHRpbWUgdG8gZGlzcGxheSBhIFwiTmV3IGNvbnRlbnQgaXNcbiAgICAgICAgICAgICAgLy8gYXZhaWxhYmxlOyBwbGVhc2UgcmVmcmVzaC5cIiBtZXNzYWdlIGluIHlvdXIgd2ViIGFwcC5cbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ05ldyBjb250ZW50IGlzIGF2YWlsYWJsZTsgcGxlYXNlIHJlZnJlc2guJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50LCBldmVyeXRoaW5nIGhhcyBiZWVuIHByZWNhY2hlZC5cbiAgICAgICAgICAgICAgLy8gSXQncyB0aGUgcGVyZmVjdCB0aW1lIHRvIGRpc3BsYXkgYVxuICAgICAgICAgICAgICAvLyBcIkNvbnRlbnQgaXMgY2FjaGVkIGZvciBvZmZsaW5lIHVzZS5cIiBtZXNzYWdlLlxuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQ29udGVudCBpcyBjYWNoZWQgZm9yIG9mZmxpbmUgdXNlLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgfSlcbiAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZHVyaW5nIHNlcnZpY2Ugd29ya2VyIHJlZ2lzdHJhdGlvbjonLCBlcnJvcik7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrVmFsaWRTZXJ2aWNlV29ya2VyKHN3VXJsKSB7XG4gIC8vIENoZWNrIGlmIHRoZSBzZXJ2aWNlIHdvcmtlciBjYW4gYmUgZm91bmQuIElmIGl0IGNhbid0IHJlbG9hZCB0aGUgcGFnZS5cbiAgZmV0Y2goc3dVcmwpXG4gICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgLy8gRW5zdXJlIHNlcnZpY2Ugd29ya2VyIGV4aXN0cywgYW5kIHRoYXQgd2UgcmVhbGx5IGFyZSBnZXR0aW5nIGEgSlMgZmlsZS5cbiAgICAgIGlmIChcbiAgICAgICAgcmVzcG9uc2Uuc3RhdHVzID09PSA0MDQgfHxcbiAgICAgICAgcmVzcG9uc2UuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpLmluZGV4T2YoJ2phdmFzY3JpcHQnKSA9PT0gLTFcbiAgICAgICkge1xuICAgICAgICAvLyBObyBzZXJ2aWNlIHdvcmtlciBmb3VuZC4gUHJvYmFibHkgYSBkaWZmZXJlbnQgYXBwLiBSZWxvYWQgdGhlIHBhZ2UuXG4gICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlYWR5LnRoZW4ocmVnaXN0cmF0aW9uID0+IHtcbiAgICAgICAgICByZWdpc3RyYXRpb24udW5yZWdpc3RlcigpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFNlcnZpY2Ugd29ya2VyIGZvdW5kLiBQcm9jZWVkIGFzIG5vcm1hbC5cbiAgICAgICAgcmVnaXN0ZXJWYWxpZFNXKHN3VXJsKTtcbiAgICAgIH1cbiAgICB9KVxuICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgJ05vIGludGVybmV0IGNvbm5lY3Rpb24gZm91bmQuIEFwcCBpcyBydW5uaW5nIGluIG9mZmxpbmUgbW9kZS4nXG4gICAgICApO1xuICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5yZWdpc3RlcigpIHtcbiAgaWYgKCdzZXJ2aWNlV29ya2VyJyBpbiBuYXZpZ2F0b3IpIHtcbiAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWFkeS50aGVuKHJlZ2lzdHJhdGlvbiA9PiB7XG4gICAgICByZWdpc3RyYXRpb24udW5yZWdpc3RlcigpO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IHZhciBSZWFjdFJlZHV4Q29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5leHBvcnQgZGVmYXVsdCBSZWFjdFJlZHV4Q29udGV4dDsiLCIvLyBEZWZhdWx0IHRvIGEgZHVtbXkgXCJiYXRjaFwiIGltcGxlbWVudGF0aW9uIHRoYXQganVzdCBydW5zIHRoZSBjYWxsYmFja1xuZnVuY3Rpb24gZGVmYXVsdE5vb3BCYXRjaChjYWxsYmFjaykge1xuICBjYWxsYmFjaygpO1xufVxuXG52YXIgYmF0Y2ggPSBkZWZhdWx0Tm9vcEJhdGNoOyAvLyBBbGxvdyBpbmplY3RpbmcgYW5vdGhlciBiYXRjaGluZyBmdW5jdGlvbiBsYXRlclxuXG5leHBvcnQgdmFyIHNldEJhdGNoID0gZnVuY3Rpb24gc2V0QmF0Y2gobmV3QmF0Y2gpIHtcbiAgcmV0dXJuIGJhdGNoID0gbmV3QmF0Y2g7XG59OyAvLyBTdXBwbHkgYSBnZXR0ZXIganVzdCB0byBza2lwIGRlYWxpbmcgd2l0aCBFU00gYmluZGluZ3NcblxuZXhwb3J0IHZhciBnZXRCYXRjaCA9IGZ1bmN0aW9uIGdldEJhdGNoKCkge1xuICByZXR1cm4gYmF0Y2g7XG59OyIsImltcG9ydCB7IGdldEJhdGNoIH0gZnJvbSAnLi9iYXRjaCc7IC8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG5cbnZhciBDTEVBUkVEID0gbnVsbDtcbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIHZhciBiYXRjaCA9IGdldEJhdGNoKCk7IC8vIHRoZSBjdXJyZW50L25leHQgcGF0dGVybiBpcyBjb3BpZWQgZnJvbSByZWR1eCdzIGNyZWF0ZVN0b3JlIGNvZGUuXG4gIC8vIFRPRE86IHJlZmFjdG9yK2V4cG9zZSB0aGF0IGNvZGUgdG8gYmUgcmV1c2FibGUgaGVyZT9cblxuICB2YXIgY3VycmVudCA9IFtdO1xuICB2YXIgbmV4dCA9IFtdO1xuICByZXR1cm4ge1xuICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIG5leHQgPSBDTEVBUkVEO1xuICAgICAgY3VycmVudCA9IENMRUFSRUQ7XG4gICAgfSxcbiAgICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50ID0gbmV4dDtcbiAgICAgIGJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsaXN0ZW5lcnNbaV0oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH0sXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgaWYgKG5leHQgPT09IGN1cnJlbnQpIG5leHQgPSBjdXJyZW50LnNsaWNlKCk7XG4gICAgICBuZXh0LnB1c2gobGlzdGVuZXIpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBjdXJyZW50ID09PSBDTEVBUkVEKSByZXR1cm47XG4gICAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgICBpZiAobmV4dCA9PT0gY3VycmVudCkgbmV4dCA9IGN1cnJlbnQuc2xpY2UoKTtcbiAgICAgICAgbmV4dC5zcGxpY2UobmV4dC5pbmRleE9mKGxpc3RlbmVyKSwgMSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxudmFyIFN1YnNjcmlwdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihzdG9yZSwgcGFyZW50U3ViKSB7XG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMucGFyZW50U3ViID0gcGFyZW50U3ViO1xuICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIgPSB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdWJzY3JpcHRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGROZXN0ZWRTdWIgPSBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9O1xuXG4gIF9wcm90by5ub3RpZnlOZXN0ZWRTdWJzID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3VicygpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlQ2hhbmdlV3JhcHBlciA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZVdyYXBwZXIoKSB7XG4gICAgaWYgKHRoaXMub25TdGF0ZUNoYW5nZSkge1xuICAgICAgdGhpcy5vblN0YXRlQ2hhbmdlKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy51bnN1YnNjcmliZSk7XG4gIH07XG5cbiAgX3Byb3RvLnRyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSB0aGlzLnBhcmVudFN1YiA/IHRoaXMucGFyZW50U3ViLmFkZE5lc3RlZFN1Yih0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIpIDogdGhpcy5zdG9yZS5zdWJzY3JpYmUodGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by50cnlVbnN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVVuc3Vic2NyaWJlKCkge1xuICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICAgIHRoaXMubGlzdGVuZXJzLmNsZWFyKCk7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTdWJzY3JpcHRpb247XG59KCk7XG5cbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8sIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5cbmZ1bmN0aW9uIFByb3ZpZGVyKF9yZWYpIHtcbiAgdmFyIHN0b3JlID0gX3JlZi5zdG9yZSxcbiAgICAgIGNvbnRleHQgPSBfcmVmLmNvbnRleHQsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG4gIHZhciBjb250ZXh0VmFsdWUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSk7XG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicztcbiAgICByZXR1cm4ge1xuICAgICAgc3RvcmU6IHN0b3JlLFxuICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICB9O1xuICB9LCBbc3RvcmVdKTtcbiAgdmFyIHByZXZpb3VzU3RhdGUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgfSwgW3N0b3JlXSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IGNvbnRleHRWYWx1ZS5zdWJzY3JpcHRpb247XG4gICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuXG4gICAgaWYgKHByZXZpb3VzU3RhdGUgIT09IHN0b3JlLmdldFN0YXRlKCkpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBudWxsO1xuICAgIH07XG4gIH0sIFtjb250ZXh0VmFsdWUsIHByZXZpb3VzU3RhdGVdKTtcbiAgdmFyIENvbnRleHQgPSBjb250ZXh0IHx8IFJlYWN0UmVkdXhDb250ZXh0O1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICB9LCBjaGlsZHJlbik7XG59XG5cblByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgc3RvcmU6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGdldFN0YXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gIH0pLFxuICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueVxufTtcbmV4cG9ydCBkZWZhdWx0IFByb3ZpZGVyOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICdyZWFjdCc7IC8vIFJlYWN0IGN1cnJlbnRseSB0aHJvd3MgYSB3YXJuaW5nIHdoZW4gdXNpbmcgdXNlTGF5b3V0RWZmZWN0IG9uIHRoZSBzZXJ2ZXIuXG4vLyBUbyBnZXQgYXJvdW5kIGl0LCB3ZSBjYW4gY29uZGl0aW9uYWxseSB1c2VFZmZlY3Qgb24gdGhlIHNlcnZlciAobm8tb3ApIGFuZFxuLy8gdXNlTGF5b3V0RWZmZWN0IGluIHRoZSBicm93c2VyLiBXZSBuZWVkIHVzZUxheW91dEVmZmVjdCB0byBlbnN1cmUgdGhlIHN0b3JlXG4vLyBzdWJzY3JpcHRpb24gY2FsbGJhY2sgYWx3YXlzIGhhcyB0aGUgc2VsZWN0b3IgZnJvbSB0aGUgbGF0ZXN0IHJlbmRlciBjb21taXRcbi8vIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBoYXBwZW4gYmV0d2VlbiByZW5kZXIgYW5kIHRoZSBlZmZlY3QsXG4vLyB3aGljaCBtYXkgY2F1c2UgbWlzc2VkIHVwZGF0ZXM7IHdlIGFsc28gbXVzdCBlbnN1cmUgdGhlIHN0b3JlIHN1YnNjcmlwdGlvblxuLy8gaXMgY3JlYXRlZCBzeW5jaHJvbm91c2x5LCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IG9jY3VyIGJlZm9yZSB0aGVcbi8vIHN1YnNjcmlwdGlvbiBpcyBjcmVhdGVkIGFuZCBhbiBpbmNvbnNpc3RlbnQgc3RhdGUgbWF5IGJlIG9ic2VydmVkXG5cbnZhciBpc0hvcGVmdWxseURvbUVudmlyb25tZW50ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSAndW5kZWZpbmVkJztcbmV4cG9ydCB2YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IGlzSG9wZWZ1bGx5RG9tRW52aXJvbm1lbnQgPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQsIHVzZU1lbW8sIHVzZVJlZiwgdXNlUmVkdWNlciB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSwgaXNDb250ZXh0Q29uc3VtZXIgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi4vdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7IC8vIERlZmluZSBzb21lIGNvbnN0YW50IGFycmF5cyBqdXN0IHRvIGF2b2lkIHJlLWNyZWF0aW5nIHRoZXNlXG5cbnZhciBFTVBUWV9BUlJBWSA9IFtdO1xudmFyIE5PX1NVQlNDUklQVElPTl9BUlJBWSA9IFtudWxsLCBudWxsXTtcblxudmFyIHN0cmluZ2lmeUNvbXBvbmVudCA9IGZ1bmN0aW9uIHN0cmluZ2lmeUNvbXBvbmVudChDb21wKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KENvbXApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gU3RyaW5nKENvbXApO1xuICB9XG59O1xuXG5mdW5jdGlvbiBzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xuICB2YXIgdXBkYXRlQ291bnQgPSBzdGF0ZVsxXTtcbiAgcmV0dXJuIFthY3Rpb24ucGF5bG9hZCwgdXBkYXRlQ291bnQgKyAxXTtcbn1cblxudmFyIGluaXRTdGF0ZVVwZGF0ZXMgPSBmdW5jdGlvbiBpbml0U3RhdGVVcGRhdGVzKCkge1xuICByZXR1cm4gW251bGwsIDBdO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29ubmVjdEFkdmFuY2VkKFxuLypcclxuICBzZWxlY3RvckZhY3RvcnkgaXMgYSBmdW5jIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIHJldHVybmluZyB0aGUgc2VsZWN0b3IgZnVuY3Rpb24gdXNlZCB0b1xyXG4gIGNvbXB1dGUgbmV3IHByb3BzIGZyb20gc3RhdGUsIHByb3BzLCBhbmQgZGlzcGF0Y2guIEZvciBleGFtcGxlOlxyXG4gICAgICBleHBvcnQgZGVmYXVsdCBjb25uZWN0QWR2YW5jZWQoKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAoc3RhdGUsIHByb3BzKSA9PiAoe1xyXG4gICAgICB0aGluZzogc3RhdGUudGhpbmdzW3Byb3BzLnRoaW5nSWRdLFxyXG4gICAgICBzYXZlVGhpbmc6IGZpZWxkcyA9PiBkaXNwYXRjaChhY3Rpb25DcmVhdG9ycy5zYXZlVGhpbmcocHJvcHMudGhpbmdJZCwgZmllbGRzKSksXHJcbiAgICB9KSkoWW91ckNvbXBvbmVudClcclxuICAgIEFjY2VzcyB0byBkaXNwYXRjaCBpcyBwcm92aWRlZCB0byB0aGUgZmFjdG9yeSBzbyBzZWxlY3RvckZhY3RvcmllcyBjYW4gYmluZCBhY3Rpb25DcmVhdG9yc1xyXG4gIG91dHNpZGUgb2YgdGhlaXIgc2VsZWN0b3IgYXMgYW4gb3B0aW1pemF0aW9uLiBPcHRpb25zIHBhc3NlZCB0byBjb25uZWN0QWR2YW5jZWQgYXJlIHBhc3NlZCB0b1xyXG4gIHRoZSBzZWxlY3RvckZhY3RvcnksIGFsb25nIHdpdGggZGlzcGxheU5hbWUgYW5kIFdyYXBwZWRDb21wb25lbnQsIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuXHJcbiAgICBOb3RlIHRoYXQgc2VsZWN0b3JGYWN0b3J5IGlzIHJlc3BvbnNpYmxlIGZvciBhbGwgY2FjaGluZy9tZW1vaXphdGlvbiBvZiBpbmJvdW5kIGFuZCBvdXRib3VuZFxyXG4gIHByb3BzLiBEbyBub3QgdXNlIGNvbm5lY3RBZHZhbmNlZCBkaXJlY3RseSB3aXRob3V0IG1lbW9pemluZyByZXN1bHRzIGJldHdlZW4gY2FsbHMgdG8geW91clxyXG4gIHNlbGVjdG9yLCBvdGhlcndpc2UgdGhlIENvbm5lY3QgY29tcG9uZW50IHdpbGwgcmUtcmVuZGVyIG9uIGV2ZXJ5IHN0YXRlIG9yIHByb3BzIGNoYW5nZS5cclxuKi9cbnNlbGVjdG9yRmFjdG9yeSwgLy8gb3B0aW9ucyBvYmplY3Q6XG5fcmVmKSB7XG4gIGlmIChfcmVmID09PSB2b2lkIDApIHtcbiAgICBfcmVmID0ge307XG4gIH1cblxuICB2YXIgX3JlZjIgPSBfcmVmLFxuICAgICAgX3JlZjIkZ2V0RGlzcGxheU5hbWUgPSBfcmVmMi5nZXREaXNwbGF5TmFtZSxcbiAgICAgIGdldERpc3BsYXlOYW1lID0gX3JlZjIkZ2V0RGlzcGxheU5hbWUgPT09IHZvaWQgMCA/IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIFwiQ29ubmVjdEFkdmFuY2VkKFwiICsgbmFtZSArIFwiKVwiO1xuICB9IDogX3JlZjIkZ2V0RGlzcGxheU5hbWUsXG4gICAgICBfcmVmMiRtZXRob2ROYW1lID0gX3JlZjIubWV0aG9kTmFtZSxcbiAgICAgIG1ldGhvZE5hbWUgPSBfcmVmMiRtZXRob2ROYW1lID09PSB2b2lkIDAgPyAnY29ubmVjdEFkdmFuY2VkJyA6IF9yZWYyJG1ldGhvZE5hbWUsXG4gICAgICBfcmVmMiRyZW5kZXJDb3VudFByb3AgPSBfcmVmMi5yZW5kZXJDb3VudFByb3AsXG4gICAgICByZW5kZXJDb3VudFByb3AgPSBfcmVmMiRyZW5kZXJDb3VudFByb3AgPT09IHZvaWQgMCA/IHVuZGVmaW5lZCA6IF9yZWYyJHJlbmRlckNvdW50UHJvcCxcbiAgICAgIF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9IF9yZWYyLnNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYyJHNob3VsZEhhbmRsZVN0YSxcbiAgICAgIF9yZWYyJHN0b3JlS2V5ID0gX3JlZjIuc3RvcmVLZXksXG4gICAgICBzdG9yZUtleSA9IF9yZWYyJHN0b3JlS2V5ID09PSB2b2lkIDAgPyAnc3RvcmUnIDogX3JlZjIkc3RvcmVLZXksXG4gICAgICBfcmVmMiR3aXRoUmVmID0gX3JlZjIud2l0aFJlZixcbiAgICAgIHdpdGhSZWYgPSBfcmVmMiR3aXRoUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJHdpdGhSZWYsXG4gICAgICBfcmVmMiRmb3J3YXJkUmVmID0gX3JlZjIuZm9yd2FyZFJlZixcbiAgICAgIGZvcndhcmRSZWYgPSBfcmVmMiRmb3J3YXJkUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJGZvcndhcmRSZWYsXG4gICAgICBfcmVmMiRjb250ZXh0ID0gX3JlZjIuY29udGV4dCxcbiAgICAgIGNvbnRleHQgPSBfcmVmMiRjb250ZXh0ID09PSB2b2lkIDAgPyBSZWFjdFJlZHV4Q29udGV4dCA6IF9yZWYyJGNvbnRleHQsXG4gICAgICBjb25uZWN0T3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJnZXREaXNwbGF5TmFtZVwiLCBcIm1ldGhvZE5hbWVcIiwgXCJyZW5kZXJDb3VudFByb3BcIiwgXCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXNcIiwgXCJzdG9yZUtleVwiLCBcIndpdGhSZWZcIiwgXCJmb3J3YXJkUmVmXCIsIFwiY29udGV4dFwiXSk7XG5cbiAgaW52YXJpYW50KHJlbmRlckNvdW50UHJvcCA9PT0gdW5kZWZpbmVkLCBcInJlbmRlckNvdW50UHJvcCBpcyByZW1vdmVkLiByZW5kZXIgY291bnRpbmcgaXMgYnVpbHQgaW50byB0aGUgbGF0ZXN0IFJlYWN0IERldiBUb29scyBwcm9maWxpbmcgZXh0ZW5zaW9uXCIpO1xuICBpbnZhcmlhbnQoIXdpdGhSZWYsICd3aXRoUmVmIGlzIHJlbW92ZWQuIFRvIGFjY2VzcyB0aGUgd3JhcHBlZCBpbnN0YW5jZSwgdXNlIGEgcmVmIG9uIHRoZSBjb25uZWN0ZWQgY29tcG9uZW50Jyk7XG4gIHZhciBjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlID0gJ1RvIHVzZSBhIGN1c3RvbSBSZWR1eCBzdG9yZSBmb3Igc3BlY2lmaWMgY29tcG9uZW50cywgY3JlYXRlIGEgY3VzdG9tIFJlYWN0IGNvbnRleHQgd2l0aCAnICsgXCJSZWFjdC5jcmVhdGVDb250ZXh0KCksIGFuZCBwYXNzIHRoZSBjb250ZXh0IG9iamVjdCB0byBSZWFjdCBSZWR1eCdzIFByb3ZpZGVyIGFuZCBzcGVjaWZpYyBjb21wb25lbnRzXCIgKyAnIGxpa2U6IDxQcm92aWRlciBjb250ZXh0PXtNeUNvbnRleHR9PjxDb25uZWN0ZWRDb21wb25lbnQgY29udGV4dD17TXlDb250ZXh0fSAvPjwvUHJvdmlkZXI+LiAnICsgJ1lvdSBtYXkgYWxzbyBwYXNzIGEge2NvbnRleHQgOiBNeUNvbnRleHR9IG9wdGlvbiB0byBjb25uZWN0JztcbiAgaW52YXJpYW50KHN0b3JlS2V5ID09PSAnc3RvcmUnLCAnc3RvcmVLZXkgaGFzIGJlZW4gcmVtb3ZlZCBhbmQgZG9lcyBub3QgZG8gYW55dGhpbmcuICcgKyBjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlKTtcbiAgdmFyIENvbnRleHQgPSBjb250ZXh0O1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcFdpdGhDb25uZWN0KFdyYXBwZWRDb21wb25lbnQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaW52YXJpYW50KGlzVmFsaWRFbGVtZW50VHlwZShXcmFwcGVkQ29tcG9uZW50KSwgXCJZb3UgbXVzdCBwYXNzIGEgY29tcG9uZW50IHRvIHRoZSBmdW5jdGlvbiByZXR1cm5lZCBieSBcIiArIChtZXRob2ROYW1lICsgXCIuIEluc3RlYWQgcmVjZWl2ZWQgXCIgKyBzdHJpbmdpZnlDb21wb25lbnQoV3JhcHBlZENvbXBvbmVudCkpKTtcbiAgICB9XG5cbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudE5hbWUgPSBXcmFwcGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IFdyYXBwZWRDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JztcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZSh3cmFwcGVkQ29tcG9uZW50TmFtZSk7XG5cbiAgICB2YXIgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyA9IF9leHRlbmRzKHt9LCBjb25uZWN0T3B0aW9ucywge1xuICAgICAgZ2V0RGlzcGxheU5hbWU6IGdldERpc3BsYXlOYW1lLFxuICAgICAgbWV0aG9kTmFtZTogbWV0aG9kTmFtZSxcbiAgICAgIHJlbmRlckNvdW50UHJvcDogcmVuZGVyQ291bnRQcm9wLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzdG9yZUtleTogc3RvcmVLZXksXG4gICAgICBkaXNwbGF5TmFtZTogZGlzcGxheU5hbWUsXG4gICAgICB3cmFwcGVkQ29tcG9uZW50TmFtZTogd3JhcHBlZENvbXBvbmVudE5hbWUsXG4gICAgICBXcmFwcGVkQ29tcG9uZW50OiBXcmFwcGVkQ29tcG9uZW50XG4gICAgfSk7XG5cbiAgICB2YXIgcHVyZSA9IGNvbm5lY3RPcHRpb25zLnB1cmU7XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVDaGlsZFNlbGVjdG9yKHN0b3JlKSB7XG4gICAgICByZXR1cm4gc2VsZWN0b3JGYWN0b3J5KHN0b3JlLmRpc3BhdGNoLCBzZWxlY3RvckZhY3RvcnlPcHRpb25zKTtcbiAgICB9IC8vIElmIHdlIGFyZW4ndCBydW5uaW5nIGluIFwicHVyZVwiIG1vZGUsIHdlIGRvbid0IHdhbnQgdG8gbWVtb2l6ZSB2YWx1ZXMuXG4gICAgLy8gVG8gYXZvaWQgY29uZGl0aW9uYWxseSBjYWxsaW5nIGhvb2tzLCB3ZSBmYWxsIGJhY2sgdG8gYSB0aW55IHdyYXBwZXJcbiAgICAvLyB0aGF0IGp1c3QgZXhlY3V0ZXMgdGhlIGdpdmVuIGNhbGxiYWNrIGltbWVkaWF0ZWx5LlxuXG5cbiAgICB2YXIgdXNlUHVyZU9ubHlNZW1vID0gcHVyZSA/IHVzZU1lbW8gOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBDb25uZWN0RnVuY3Rpb24ocHJvcHMpIHtcbiAgICAgIHZhciBfdXNlTWVtbyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBEaXN0aW5ndWlzaCBiZXR3ZWVuIGFjdHVhbCBcImRhdGFcIiBwcm9wcyB0aGF0IHdlcmUgcGFzc2VkIHRvIHRoZSB3cmFwcGVyIGNvbXBvbmVudCxcbiAgICAgICAgLy8gYW5kIHZhbHVlcyBuZWVkZWQgdG8gY29udHJvbCBiZWhhdmlvciAoZm9yd2FyZGVkIHJlZnMsIGFsdGVybmF0ZSBjb250ZXh0IGluc3RhbmNlcykuXG4gICAgICAgIC8vIFRvIG1haW50YWluIHRoZSB3cmFwcGVyUHJvcHMgb2JqZWN0IHJlZmVyZW5jZSwgbWVtb2l6ZSB0aGlzIGRlc3RydWN0dXJpbmcuXG4gICAgICAgIHZhciBmb3J3YXJkZWRSZWYgPSBwcm9wcy5mb3J3YXJkZWRSZWYsXG4gICAgICAgICAgICB3cmFwcGVyUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wiZm9yd2FyZGVkUmVmXCJdKTtcblxuICAgICAgICByZXR1cm4gW3Byb3BzLmNvbnRleHQsIGZvcndhcmRlZFJlZiwgd3JhcHBlclByb3BzXTtcbiAgICAgIH0sIFtwcm9wc10pLFxuICAgICAgICAgIHByb3BzQ29udGV4dCA9IF91c2VNZW1vWzBdLFxuICAgICAgICAgIGZvcndhcmRlZFJlZiA9IF91c2VNZW1vWzFdLFxuICAgICAgICAgIHdyYXBwZXJQcm9wcyA9IF91c2VNZW1vWzJdO1xuXG4gICAgICB2YXIgQ29udGV4dFRvVXNlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFVzZXJzIG1heSBvcHRpb25hbGx5IHBhc3MgaW4gYSBjdXN0b20gY29udGV4dCBpbnN0YW5jZSB0byB1c2UgaW5zdGVhZCBvZiBvdXIgUmVhY3RSZWR1eENvbnRleHQuXG4gICAgICAgIC8vIE1lbW9pemUgdGhlIGNoZWNrIHRoYXQgZGV0ZXJtaW5lcyB3aGljaCBjb250ZXh0IGluc3RhbmNlIHdlIHNob3VsZCB1c2UuXG4gICAgICAgIHJldHVybiBwcm9wc0NvbnRleHQgJiYgcHJvcHNDb250ZXh0LkNvbnN1bWVyICYmIGlzQ29udGV4dENvbnN1bWVyKFJlYWN0LmNyZWF0ZUVsZW1lbnQocHJvcHNDb250ZXh0LkNvbnN1bWVyLCBudWxsKSkgPyBwcm9wc0NvbnRleHQgOiBDb250ZXh0O1xuICAgICAgfSwgW3Byb3BzQ29udGV4dCwgQ29udGV4dF0pOyAvLyBSZXRyaWV2ZSB0aGUgc3RvcmUgYW5kIGFuY2VzdG9yIHN1YnNjcmlwdGlvbiB2aWEgY29udGV4dCwgaWYgYXZhaWxhYmxlXG5cbiAgICAgIHZhciBjb250ZXh0VmFsdWUgPSB1c2VDb250ZXh0KENvbnRleHRUb1VzZSk7IC8vIFRoZSBzdG9yZSBfbXVzdF8gZXhpc3QgYXMgZWl0aGVyIGEgcHJvcCBvciBpbiBjb250ZXh0LlxuICAgICAgLy8gV2UnbGwgY2hlY2sgdG8gc2VlIGlmIGl0IF9sb29rc18gbGlrZSBhIFJlZHV4IHN0b3JlIGZpcnN0LlxuICAgICAgLy8gVGhpcyBhbGxvd3MgdXMgdG8gcGFzcyB0aHJvdWdoIGEgYHN0b3JlYCBwcm9wIHRoYXQgaXMganVzdCBhIHBsYWluIHZhbHVlLlxuXG4gICAgICB2YXIgZGlkU3RvcmVDb21lRnJvbVByb3BzID0gQm9vbGVhbihwcm9wcy5zdG9yZSkgJiYgQm9vbGVhbihwcm9wcy5zdG9yZS5nZXRTdGF0ZSkgJiYgQm9vbGVhbihwcm9wcy5zdG9yZS5kaXNwYXRjaCk7XG4gICAgICB2YXIgZGlkU3RvcmVDb21lRnJvbUNvbnRleHQgPSBCb29sZWFuKGNvbnRleHRWYWx1ZSkgJiYgQm9vbGVhbihjb250ZXh0VmFsdWUuc3RvcmUpO1xuICAgICAgaW52YXJpYW50KGRpZFN0b3JlQ29tZUZyb21Qcm9wcyB8fCBkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCwgXCJDb3VsZCBub3QgZmluZCBcXFwic3RvcmVcXFwiIGluIHRoZSBjb250ZXh0IG9mIFwiICsgKFwiXFxcIlwiICsgZGlzcGxheU5hbWUgKyBcIlxcXCIuIEVpdGhlciB3cmFwIHRoZSByb290IGNvbXBvbmVudCBpbiBhIDxQcm92aWRlcj4sIFwiKSArIFwib3IgcGFzcyBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHByb3ZpZGVyIHRvIDxQcm92aWRlcj4gYW5kIHRoZSBjb3JyZXNwb25kaW5nIFwiICsgKFwiUmVhY3QgY29udGV4dCBjb25zdW1lciB0byBcIiArIGRpc3BsYXlOYW1lICsgXCIgaW4gY29ubmVjdCBvcHRpb25zLlwiKSk7IC8vIEJhc2VkIG9uIHRoZSBwcmV2aW91cyBjaGVjaywgb25lIG9mIHRoZXNlIG11c3QgYmUgdHJ1ZVxuXG4gICAgICB2YXIgc3RvcmUgPSBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPyBwcm9wcy5zdG9yZSA6IGNvbnRleHRWYWx1ZS5zdG9yZTtcbiAgICAgIHZhciBjaGlsZFByb3BzU2VsZWN0b3IgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVGhlIGNoaWxkIHByb3BzIHNlbGVjdG9yIG5lZWRzIHRoZSBzdG9yZSByZWZlcmVuY2UgYXMgYW4gaW5wdXQuXG4gICAgICAgIC8vIFJlLWNyZWF0ZSB0aGlzIHNlbGVjdG9yIHdoZW5ldmVyIHRoZSBzdG9yZSBjaGFuZ2VzLlxuICAgICAgICByZXR1cm4gY3JlYXRlQ2hpbGRTZWxlY3RvcihzdG9yZSk7XG4gICAgICB9LCBbc3RvcmVdKTtcblxuICAgICAgdmFyIF91c2VNZW1vMiA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuIE5PX1NVQlNDUklQVElPTl9BUlJBWTsgLy8gVGhpcyBTdWJzY3JpcHRpb24ncyBzb3VyY2Ugc2hvdWxkIG1hdGNoIHdoZXJlIHN0b3JlIGNhbWUgZnJvbTogcHJvcHMgdnMuIGNvbnRleHQuIEEgY29tcG9uZW50XG4gICAgICAgIC8vIGNvbm5lY3RlZCB0byB0aGUgc3RvcmUgdmlhIHByb3BzIHNob3VsZG4ndCB1c2Ugc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dCwgb3IgdmljZSB2ZXJzYS5cblxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzID8gbnVsbCA6IGNvbnRleHRWYWx1ZS5zdWJzY3JpcHRpb24pOyAvLyBgbm90aWZ5TmVzdGVkU3Vic2AgaXMgZHVwbGljYXRlZCB0byBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgaW5cbiAgICAgICAgLy8gdGhlIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AsIHdoZXJlIGBzdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBUaGlzIGNhblxuICAgICAgICAvLyBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVyc1xuICAgICAgICAvLyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlICBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLlxuXG4gICAgICAgIHZhciBub3RpZnlOZXN0ZWRTdWJzID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMuYmluZChzdWJzY3JpcHRpb24pO1xuICAgICAgICByZXR1cm4gW3N1YnNjcmlwdGlvbiwgbm90aWZ5TmVzdGVkU3Vic107XG4gICAgICB9LCBbc3RvcmUsIGRpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlXSksXG4gICAgICAgICAgc3Vic2NyaXB0aW9uID0gX3VzZU1lbW8yWzBdLFxuICAgICAgICAgIG5vdGlmeU5lc3RlZFN1YnMgPSBfdXNlTWVtbzJbMV07IC8vIERldGVybWluZSB3aGF0IHtzdG9yZSwgc3Vic2NyaXB0aW9ufSB2YWx1ZSBzaG91bGQgYmUgcHV0IGludG8gbmVzdGVkIGNvbnRleHQsIGlmIG5lY2Vzc2FyeSxcbiAgICAgIC8vIGFuZCBtZW1vaXplIHRoYXQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgY29udGV4dCB1cGRhdGVzLlxuXG5cbiAgICAgIHZhciBvdmVycmlkZGVuQ29udGV4dFZhbHVlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChkaWRTdG9yZUNvbWVGcm9tUHJvcHMpIHtcbiAgICAgICAgICAvLyBUaGlzIGNvbXBvbmVudCBpcyBkaXJlY3RseSBzdWJzY3JpYmVkIHRvIGEgc3RvcmUgZnJvbSBwcm9wcy5cbiAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IGRlc2NlbmRhbnRzIHJlYWRpbmcgZnJvbSB0aGlzIHN0b3JlIC0gcGFzcyBkb3duIHdoYXRldmVyXG4gICAgICAgICAgLy8gdGhlIGV4aXN0aW5nIGNvbnRleHQgdmFsdWUgaXMgZnJvbSB0aGUgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IuXG4gICAgICAgICAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbiAgICAgICAgfSAvLyBPdGhlcndpc2UsIHB1dCB0aGlzIGNvbXBvbmVudCdzIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBpbnRvIGNvbnRleHQsIHNvIHRoYXRcbiAgICAgICAgLy8gY29ubmVjdGVkIGRlc2NlbmRhbnRzIHdvbid0IHVwZGF0ZSB1bnRpbCBhZnRlciB0aGlzIGNvbXBvbmVudCBpcyBkb25lXG5cblxuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHRWYWx1ZSwge1xuICAgICAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSwgW2RpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlLCBzdWJzY3JpcHRpb25dKTsgLy8gV2UgbmVlZCB0byBmb3JjZSB0aGlzIHdyYXBwZXIgY29tcG9uZW50IHRvIHJlLXJlbmRlciB3aGVuZXZlciBhIFJlZHV4IHN0b3JlIHVwZGF0ZVxuICAgICAgLy8gY2F1c2VzIGEgY2hhbmdlIHRvIHRoZSBjYWxjdWxhdGVkIGNoaWxkIGNvbXBvbmVudCBwcm9wcyAob3Igd2UgY2F1Z2h0IGFuIGVycm9yIGluIG1hcFN0YXRlKVxuXG4gICAgICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKHN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlciwgRU1QVFlfQVJSQVksIGluaXRTdGF0ZVVwZGF0ZXMpLFxuICAgICAgICAgIF91c2VSZWR1Y2VyJCA9IF91c2VSZWR1Y2VyWzBdLFxuICAgICAgICAgIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgPSBfdXNlUmVkdWNlciRbMF0sXG4gICAgICAgICAgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCA9IF91c2VSZWR1Y2VyWzFdOyAvLyBQcm9wYWdhdGUgYW55IG1hcFN0YXRlL21hcERpc3BhdGNoIGVycm9ycyB1cHdhcmRzXG5cblxuICAgICAgaWYgKHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgJiYgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdC5lcnJvcikge1xuICAgICAgICB0aHJvdyBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LmVycm9yO1xuICAgICAgfSAvLyBTZXQgdXAgcmVmcyB0byBjb29yZGluYXRlIHZhbHVlcyBiZXR3ZWVuIHRoZSBzdWJzY3JpcHRpb24gZWZmZWN0IGFuZCB0aGUgcmVuZGVyIGxvZ2ljXG5cblxuICAgICAgdmFyIGxhc3RDaGlsZFByb3BzID0gdXNlUmVmKCk7XG4gICAgICB2YXIgbGFzdFdyYXBwZXJQcm9wcyA9IHVzZVJlZih3cmFwcGVyUHJvcHMpO1xuICAgICAgdmFyIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUgPSB1c2VSZWYoKTtcbiAgICAgIHZhciByZW5kZXJJc1NjaGVkdWxlZCA9IHVzZVJlZihmYWxzZSk7XG4gICAgICB2YXIgYWN0dWFsQ2hpbGRQcm9wcyA9IHVzZVB1cmVPbmx5TWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRyaWNreSBsb2dpYyBoZXJlOlxuICAgICAgICAvLyAtIFRoaXMgcmVuZGVyIG1heSBoYXZlIGJlZW4gdHJpZ2dlcmVkIGJ5IGEgUmVkdXggc3RvcmUgdXBkYXRlIHRoYXQgcHJvZHVjZWQgbmV3IGNoaWxkIHByb3BzXG4gICAgICAgIC8vIC0gSG93ZXZlciwgd2UgbWF5IGhhdmUgZ290dGVuIG5ldyB3cmFwcGVyIHByb3BzIGFmdGVyIHRoYXRcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBuZXcgY2hpbGQgcHJvcHMsIGFuZCB0aGUgc2FtZSB3cmFwcGVyIHByb3BzLCB3ZSBrbm93IHdlIHNob3VsZCB1c2UgdGhlIG5ldyBjaGlsZCBwcm9wcyBhcy1pcy5cbiAgICAgICAgLy8gQnV0LCBpZiB3ZSBoYXZlIG5ldyB3cmFwcGVyIHByb3BzLCB0aG9zZSBtaWdodCBjaGFuZ2UgdGhlIGNoaWxkIHByb3BzLCBzbyB3ZSBoYXZlIHRvIHJlY2FsY3VsYXRlIHRoaW5ncy5cbiAgICAgICAgLy8gU28sIHdlJ2xsIHVzZSB0aGUgY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGUgb25seSBpZiB0aGUgd3JhcHBlciBwcm9wcyBhcmUgdGhlIHNhbWUgYXMgbGFzdCB0aW1lLlxuICAgICAgICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ICYmIHdyYXBwZXJQcm9wcyA9PT0gbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudDtcbiAgICAgICAgfSAvLyBUT0RPIFdlJ3JlIHJlYWRpbmcgdGhlIHN0b3JlIGRpcmVjdGx5IGluIHJlbmRlcigpIGhlcmUuIEJhZCBpZGVhP1xuICAgICAgICAvLyBUaGlzIHdpbGwgbGlrZWx5IGNhdXNlIEJhZCBUaGluZ3MgKFRNKSB0byBoYXBwZW4gaW4gQ29uY3VycmVudCBNb2RlLlxuICAgICAgICAvLyBOb3RlIHRoYXQgd2UgZG8gdGhpcyBiZWNhdXNlIG9uIHJlbmRlcnMgX25vdF8gY2F1c2VkIGJ5IHN0b3JlIHVwZGF0ZXMsIHdlIG5lZWQgdGhlIGxhdGVzdCBzdG9yZSBzdGF0ZVxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlLlxuXG5cbiAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCB3cmFwcGVyUHJvcHMpO1xuICAgICAgfSwgW3N0b3JlLCBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LCB3cmFwcGVyUHJvcHNdKTsgLy8gV2UgbmVlZCB0aGlzIHRvIGV4ZWN1dGUgc3luY2hyb25vdXNseSBldmVyeSB0aW1lIHdlIHJlLXJlbmRlci4gSG93ZXZlciwgUmVhY3Qgd2FybnNcbiAgICAgIC8vIGFib3V0IHVzZUxheW91dEVmZmVjdCBpbiBTU1IsIHNvIHdlIHRyeSB0byBkZXRlY3QgZW52aXJvbm1lbnQgYW5kIGZhbGwgYmFjayB0b1xuICAgICAgLy8ganVzdCB1c2VFZmZlY3QgaW5zdGVhZCB0byBhdm9pZCB0aGUgd2FybmluZywgc2luY2UgbmVpdGhlciB3aWxsIHJ1biBhbnl3YXkuXG5cbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBXZSB3YW50IHRvIGNhcHR1cmUgdGhlIHdyYXBwZXIgcHJvcHMgYW5kIGNoaWxkIHByb3BzIHdlIHVzZWQgZm9yIGxhdGVyIGNvbXBhcmlzb25zXG4gICAgICAgIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCA9IHdyYXBwZXJQcm9wcztcbiAgICAgICAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IGFjdHVhbENoaWxkUHJvcHM7XG4gICAgICAgIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSBmYWxzZTsgLy8gSWYgdGhlIHJlbmRlciB3YXMgZnJvbSBhIHN0b3JlIHVwZGF0ZSwgY2xlYXIgb3V0IHRoYXQgcmVmZXJlbmNlIGFuZCBjYXNjYWRlIHRoZSBzdWJzY3JpYmVyIHVwZGF0ZVxuXG4gICAgICAgIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQpIHtcbiAgICAgICAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7IC8vIE91ciByZS1zdWJzY3JpYmUgbG9naWMgb25seSBydW5zIHdoZW4gdGhlIHN0b3JlL3N1YnNjcmlwdGlvbiBzZXR1cCBjaGFuZ2VzXG5cbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBJZiB3ZSdyZSBub3Qgc3Vic2NyaWJlZCB0byB0aGUgc3RvcmUsIG5vdGhpbmcgdG8gZG8gaGVyZVxuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuOyAvLyBDYXB0dXJlIHZhbHVlcyBmb3IgY2hlY2tpbmcgaWYgYW5kIHdoZW4gdGhpcyBjb21wb25lbnQgdW5tb3VudHNcblxuICAgICAgICB2YXIgZGlkVW5zdWJzY3JpYmUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGxhc3RUaHJvd25FcnJvciA9IG51bGw7IC8vIFdlJ2xsIHJ1biB0aGlzIGNhbGxiYWNrIGV2ZXJ5IHRpbWUgYSBzdG9yZSBzdWJzY3JpcHRpb24gdXBkYXRlIHByb3BhZ2F0ZXMgdG8gdGhpcyBjb21wb25lbnRcblxuICAgICAgICB2YXIgY2hlY2tGb3JVcGRhdGVzID0gZnVuY3Rpb24gY2hlY2tGb3JVcGRhdGVzKCkge1xuICAgICAgICAgIGlmIChkaWRVbnN1YnNjcmliZSkge1xuICAgICAgICAgICAgLy8gRG9uJ3QgcnVuIHN0YWxlIGxpc3RlbmVycy5cbiAgICAgICAgICAgIC8vIFJlZHV4IGRvZXNuJ3QgZ3VhcmFudGVlIHVuc3Vic2NyaXB0aW9ucyBoYXBwZW4gdW50aWwgbmV4dCBkaXNwYXRjaC5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgbGF0ZXN0U3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgICAgICAgdmFyIG5ld0NoaWxkUHJvcHMsIGVycm9yO1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEFjdHVhbGx5IHJ1biB0aGUgc2VsZWN0b3Igd2l0aCB0aGUgbW9zdCByZWNlbnQgc3RvcmUgc3RhdGUgYW5kIHdyYXBwZXIgcHJvcHNcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB3aGF0IHRoZSBjaGlsZCBwcm9wcyBzaG91bGQgYmVcbiAgICAgICAgICAgIG5ld0NoaWxkUHJvcHMgPSBjaGlsZFByb3BzU2VsZWN0b3IobGF0ZXN0U3RvcmVTdGF0ZSwgbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBlcnJvciA9IGU7XG4gICAgICAgICAgICBsYXN0VGhyb3duRXJyb3IgPSBlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgIGxhc3RUaHJvd25FcnJvciA9IG51bGw7XG4gICAgICAgICAgfSAvLyBJZiB0aGUgY2hpbGQgcHJvcHMgaGF2ZW4ndCBjaGFuZ2VkLCBub3RoaW5nIHRvIGRvIGhlcmUgLSBjYXNjYWRlIHRoZSBzdWJzY3JpcHRpb24gdXBkYXRlXG5cblxuICAgICAgICAgIGlmIChuZXdDaGlsZFByb3BzID09PSBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50KSB7XG4gICAgICAgICAgICBpZiAoIXJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgbm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBTYXZlIHJlZmVyZW5jZXMgdG8gdGhlIG5ldyBjaGlsZCBwcm9wcy4gIE5vdGUgdGhhdCB3ZSB0cmFjayB0aGUgXCJjaGlsZCBwcm9wcyBmcm9tIHN0b3JlIHVwZGF0ZVwiXG4gICAgICAgICAgICAvLyBhcyBhIHJlZiBpbnN0ZWFkIG9mIGEgdXNlU3RhdGUvdXNlUmVkdWNlciBiZWNhdXNlIHdlIG5lZWQgYSB3YXkgdG8gZGV0ZXJtaW5lIGlmIHRoYXQgdmFsdWUgaGFzXG4gICAgICAgICAgICAvLyBiZWVuIHByb2Nlc3NlZC4gIElmIHRoaXMgd2VudCBpbnRvIHVzZVN0YXRlL3VzZVJlZHVjZXIsIHdlIGNvdWxkbid0IGNsZWFyIG91dCB0aGUgdmFsdWUgd2l0aG91dFxuICAgICAgICAgICAgLy8gZm9yY2luZyBhbm90aGVyIHJlLXJlbmRlciwgd2hpY2ggd2UgZG9uJ3Qgd2FudC5cbiAgICAgICAgICAgIGxhc3RDaGlsZFByb3BzLmN1cnJlbnQgPSBuZXdDaGlsZFByb3BzO1xuICAgICAgICAgICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gbmV3Q2hpbGRQcm9wcztcbiAgICAgICAgICAgIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSB0cnVlOyAvLyBJZiB0aGUgY2hpbGQgcHJvcHMgX2RpZF8gY2hhbmdlIChvciB3ZSBjYXVnaHQgYW4gZXJyb3IpLCB0aGlzIHdyYXBwZXIgY29tcG9uZW50IG5lZWRzIHRvIHJlLXJlbmRlclxuXG4gICAgICAgICAgICBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoKHtcbiAgICAgICAgICAgICAgdHlwZTogJ1NUT1JFX1VQREFURUQnLFxuICAgICAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTsgLy8gQWN0dWFsbHkgc3Vic2NyaWJlIHRvIHRoZSBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3RvciAob3Igc3RvcmUpXG5cblxuICAgICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgICAgICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpOyAvLyBQdWxsIGRhdGEgZnJvbSB0aGUgc3RvcmUgYWZ0ZXIgZmlyc3QgcmVuZGVyIGluIGNhc2UgdGhlIHN0b3JlIGhhc1xuICAgICAgICAvLyBjaGFuZ2VkIHNpbmNlIHdlIGJlZ2FuLlxuXG4gICAgICAgIGNoZWNrRm9yVXBkYXRlcygpO1xuXG4gICAgICAgIHZhciB1bnN1YnNjcmliZVdyYXBwZXIgPSBmdW5jdGlvbiB1bnN1YnNjcmliZVdyYXBwZXIoKSB7XG4gICAgICAgICAgZGlkVW5zdWJzY3JpYmUgPSB0cnVlO1xuICAgICAgICAgIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gbnVsbDtcblxuICAgICAgICAgIGlmIChsYXN0VGhyb3duRXJyb3IpIHtcbiAgICAgICAgICAgIC8vIEl0J3MgcG9zc2libGUgdGhhdCB3ZSBjYXVnaHQgYW4gZXJyb3IgZHVlIHRvIGEgYmFkIG1hcFN0YXRlIGZ1bmN0aW9uLCBidXQgdGhlXG4gICAgICAgICAgICAvLyBwYXJlbnQgcmUtcmVuZGVyZWQgd2l0aG91dCB0aGlzIGNvbXBvbmVudCBhbmQgd2UncmUgYWJvdXQgdG8gdW5tb3VudC5cbiAgICAgICAgICAgIC8vIFRoaXMgc2hvdWxkbid0IGhhcHBlbiBhcyBsb25nIGFzIHdlIGRvIHRvcC1kb3duIHN1YnNjcmlwdGlvbnMgY29ycmVjdGx5LCBidXRcbiAgICAgICAgICAgIC8vIGlmIHdlIGV2ZXIgZG8gdGhvc2Ugd3JvbmcsIHRoaXMgdGhyb3cgd2lsbCBzdXJmYWNlIHRoZSBlcnJvciBpbiBvdXIgdGVzdHMuXG4gICAgICAgICAgICAvLyBJbiB0aGF0IGNhc2UsIHRocm93IHRoZSBlcnJvciBmcm9tIGhlcmUgc28gaXQgZG9lc24ndCBnZXQgbG9zdC5cbiAgICAgICAgICAgIHRocm93IGxhc3RUaHJvd25FcnJvcjtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHVuc3Vic2NyaWJlV3JhcHBlcjtcbiAgICAgIH0sIFtzdG9yZSwgc3Vic2NyaXB0aW9uLCBjaGlsZFByb3BzU2VsZWN0b3JdKTsgLy8gTm93IHRoYXQgYWxsIHRoYXQncyBkb25lLCB3ZSBjYW4gZmluYWxseSB0cnkgdG8gYWN0dWFsbHkgcmVuZGVyIHRoZSBjaGlsZCBjb21wb25lbnQuXG4gICAgICAvLyBXZSBtZW1vaXplIHRoZSBlbGVtZW50cyBmb3IgdGhlIHJlbmRlcmVkIGNoaWxkIGNvbXBvbmVudCBhcyBhbiBvcHRpbWl6YXRpb24uXG5cbiAgICAgIHZhciByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgX2V4dGVuZHMoe30sIGFjdHVhbENoaWxkUHJvcHMsIHtcbiAgICAgICAgICByZWY6IGZvcndhcmRlZFJlZlxuICAgICAgICB9KSk7XG4gICAgICB9LCBbZm9yd2FyZGVkUmVmLCBXcmFwcGVkQ29tcG9uZW50LCBhY3R1YWxDaGlsZFByb3BzXSk7IC8vIElmIFJlYWN0IHNlZXMgdGhlIGV4YWN0IHNhbWUgZWxlbWVudCByZWZlcmVuY2UgYXMgbGFzdCB0aW1lLCBpdCBiYWlscyBvdXQgb2YgcmUtcmVuZGVyaW5nXG4gICAgICAvLyB0aGF0IGNoaWxkLCBzYW1lIGFzIGlmIGl0IHdhcyB3cmFwcGVkIGluIFJlYWN0Lm1lbW8oKSBvciByZXR1cm5lZCBmYWxzZSBmcm9tIHNob3VsZENvbXBvbmVudFVwZGF0ZS5cblxuICAgICAgdmFyIHJlbmRlcmVkQ2hpbGQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykge1xuICAgICAgICAgIC8vIElmIHRoaXMgY29tcG9uZW50IGlzIHN1YnNjcmliZWQgdG8gc3RvcmUgdXBkYXRlcywgd2UgbmVlZCB0byBwYXNzIGl0cyBvd25cbiAgICAgICAgICAvLyBzdWJzY3JpcHRpb24gaW5zdGFuY2UgZG93biB0byBvdXIgZGVzY2VuZGFudHMuIFRoYXQgbWVhbnMgcmVuZGVyaW5nIHRoZSBzYW1lXG4gICAgICAgICAgLy8gQ29udGV4dCBpbnN0YW5jZSwgYW5kIHB1dHRpbmcgYSBkaWZmZXJlbnQgdmFsdWUgaW50byB0aGUgY29udGV4dC5cbiAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0VG9Vc2UuUHJvdmlkZXIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBvdmVycmlkZGVuQ29udGV4dFZhbHVlXG4gICAgICAgICAgfSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICB9LCBbQ29udGV4dFRvVXNlLCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQsIG92ZXJyaWRkZW5Db250ZXh0VmFsdWVdKTtcbiAgICAgIHJldHVybiByZW5kZXJlZENoaWxkO1xuICAgIH0gLy8gSWYgd2UncmUgaW4gXCJwdXJlXCIgbW9kZSwgZW5zdXJlIG91ciB3cmFwcGVyIGNvbXBvbmVudCBvbmx5IHJlLXJlbmRlcnMgd2hlbiBpbmNvbWluZyBwcm9wcyBoYXZlIGNoYW5nZWQuXG5cblxuICAgIHZhciBDb25uZWN0ID0gcHVyZSA/IFJlYWN0Lm1lbW8oQ29ubmVjdEZ1bmN0aW9uKSA6IENvbm5lY3RGdW5jdGlvbjtcbiAgICBDb25uZWN0LldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgIENvbm5lY3QuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcblxuICAgIGlmIChmb3J3YXJkUmVmKSB7XG4gICAgICB2YXIgZm9yd2FyZGVkID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBmb3J3YXJkQ29ubmVjdFJlZihwcm9wcywgcmVmKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbm5lY3QsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgIGZvcndhcmRlZFJlZjogcmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgICAgZm9yd2FyZGVkLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgICBmb3J3YXJkZWQuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICByZXR1cm4gaG9pc3RTdGF0aWNzKGZvcndhcmRlZCwgV3JhcHBlZENvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhvaXN0U3RhdGljcyhDb25uZWN0LCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgfTtcbn0iLCJ2YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gaXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093bi5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSIsImltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNDb25zdGFudChnZXRDb25zdGFudCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdENvbnN0YW50U2VsZWN0b3IoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29uc3RhbnQgPSBnZXRDb25zdGFudChkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgICBmdW5jdGlvbiBjb25zdGFudFNlbGVjdG9yKCkge1xuICAgICAgcmV0dXJuIGNvbnN0YW50O1xuICAgIH1cblxuICAgIGNvbnN0YW50U2VsZWN0b3IuZGVwZW5kc09uT3duUHJvcHMgPSBmYWxzZTtcbiAgICByZXR1cm4gY29uc3RhbnRTZWxlY3RvcjtcbiAgfTtcbn0gLy8gZGVwZW5kc09uT3duUHJvcHMgaXMgdXNlZCBieSBjcmVhdGVNYXBUb1Byb3BzUHJveHkgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcGFzcyBwcm9wcyBhcyBhcmdzXG4vLyB0byB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyB3cmFwcGVkLiBJdCBpcyBhbHNvIHVzZWQgYnkgbWFrZVB1cmVQcm9wc1NlbGVjdG9yIHRvIGRldGVybWluZVxuLy8gd2hldGhlciBtYXBUb1Byb3BzIG5lZWRzIHRvIGJlIGludm9rZWQgd2hlbiBwcm9wcyBoYXZlIGNoYW5nZWQuXG4vL1xuLy8gQSBsZW5ndGggb2Ygb25lIHNpZ25hbHMgdGhhdCBtYXBUb1Byb3BzIGRvZXMgbm90IGRlcGVuZCBvbiBwcm9wcyBmcm9tIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuLy8gQSBsZW5ndGggb2YgemVybyBpcyBhc3N1bWVkIHRvIG1lYW4gbWFwVG9Qcm9wcyBpcyBnZXR0aW5nIGFyZ3MgdmlhIGFyZ3VtZW50cyBvciAuLi5hcmdzIGFuZFxuLy8gdGhlcmVmb3JlIG5vdCByZXBvcnRpbmcgaXRzIGxlbmd0aCBhY2N1cmF0ZWx5Li5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IG51bGwgJiYgbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gdW5kZWZpbmVkID8gQm9vbGVhbihtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSA6IG1hcFRvUHJvcHMubGVuZ3RoICE9PSAxO1xufSAvLyBVc2VkIGJ5IHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uIGFuZCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbixcbi8vIHRoaXMgZnVuY3Rpb24gd3JhcHMgbWFwVG9Qcm9wcyBpbiBhIHByb3h5IGZ1bmN0aW9uIHdoaWNoIGRvZXMgc2V2ZXJhbCB0aGluZ3M6XG4vL1xuLy8gICogRGV0ZWN0cyB3aGV0aGVyIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIGNhbGxlZCBkZXBlbmRzIG9uIHByb3BzLCB3aGljaFxuLy8gICAgaXMgdXNlZCBieSBzZWxlY3RvckZhY3RvcnkgdG8gZGVjaWRlIGlmIGl0IHNob3VsZCByZWludm9rZSBvbiBwcm9wcyBjaGFuZ2VzLlxuLy9cbi8vICAqIE9uIGZpcnN0IGNhbGwsIGhhbmRsZXMgbWFwVG9Qcm9wcyBpZiByZXR1cm5zIGFub3RoZXIgZnVuY3Rpb24sIGFuZCB0cmVhdHMgdGhhdFxuLy8gICAgbmV3IGZ1bmN0aW9uIGFzIHRoZSB0cnVlIG1hcFRvUHJvcHMgZm9yIHN1YnNlcXVlbnQgY2FsbHMuXG4vL1xuLy8gICogT24gZmlyc3QgY2FsbCwgdmVyaWZpZXMgdGhlIGZpcnN0IHJlc3VsdCBpcyBhIHBsYWluIG9iamVjdCwgaW4gb3JkZXIgdG8gd2FyblxuLy8gICAgdGhlIGRldmVsb3BlciB0aGF0IHRoZWlyIG1hcFRvUHJvcHMgZnVuY3Rpb24gaXMgbm90IHJldHVybmluZyBhIHZhbGlkIHJlc3VsdC5cbi8vXG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwVG9Qcm9wcywgbWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdFByb3h5U2VsZWN0b3IoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lO1xuXG4gICAgdmFyIHByb3h5ID0gZnVuY3Rpb24gbWFwVG9Qcm9wc1Byb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHJldHVybiBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA/IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykgOiBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCk7XG4gICAgfTsgLy8gYWxsb3cgZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeSB0byBnZXQgb3duUHJvcHNcblxuXG4gICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSB0cnVlO1xuXG4gICAgcHJveHkubWFwVG9Qcm9wcyA9IGZ1bmN0aW9uIGRldGVjdEZhY3RvcnlBbmRWZXJpZnkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IG1hcFRvUHJvcHM7XG4gICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpO1xuICAgICAgdmFyIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmICh0eXBlb2YgcHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IHByb3BzO1xuICAgICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKHByb3BzKTtcbiAgICAgICAgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KHByb3BzLCBkaXNwbGF5TmFtZSwgbWV0aG9kTmFtZSk7XG4gICAgICByZXR1cm4gcHJvcHM7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm94eTtcbiAgfTtcbn0iLCJpbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbihtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwRGlzcGF0Y2hUb1Byb3BzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZyhtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBEaXNwYXRjaFRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiB7XG4gICAgICBkaXNwYXRjaDogZGlzcGF0Y2hcbiAgICB9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3QobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBEaXNwYXRjaFRvUHJvcHMgJiYgdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ29iamVjdCcgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcnMobWFwRGlzcGF0Y2hUb1Byb3BzLCBkaXNwYXRjaCk7XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3RdOyIsImltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcFN0YXRlVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBTdGF0ZVRvUHJvcHMsICdtYXBTdGF0ZVRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcFN0YXRlVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmddOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG93blByb3BzLCB7fSwgc3RhdGVQcm9wcywge30sIGRpc3BhdGNoUHJvcHMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0TWVyZ2VQcm9wc1Byb3h5KGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZSxcbiAgICAgICAgcHVyZSA9IF9yZWYucHVyZSxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYuYXJlTWVyZ2VkUHJvcHNFcXVhbDtcbiAgICB2YXIgaGFzUnVuT25jZSA9IGZhbHNlO1xuICAgIHZhciBtZXJnZWRQcm9wcztcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VQcm9wc1Byb3h5KHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gICAgICB2YXIgbmV4dE1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmIChoYXNSdW5PbmNlKSB7XG4gICAgICAgIGlmICghcHVyZSB8fCAhYXJlTWVyZ2VkUHJvcHNFcXVhbChuZXh0TWVyZ2VkUHJvcHMsIG1lcmdlZFByb3BzKSkgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYXNSdW5PbmNlID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChtZXJnZWRQcm9wcywgZGlzcGxheU5hbWUsICdtZXJnZVByb3BzJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgICB9O1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNGdW5jdGlvbihtZXJnZVByb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWVyZ2VQcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZChtZXJnZVByb3BzKSB7XG4gIHJldHVybiAhbWVyZ2VQcm9wcyA/IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1lcmdlUHJvcHM7XG4gIH0gOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZF07IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgdmVyaWZ5U3Vic2VsZWN0b3JzIGZyb20gJy4vdmVyaWZ5U3Vic2VsZWN0b3JzJztcbmV4cG9ydCBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykge1xuICAgIHJldHVybiBtZXJnZVByb3BzKG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpLCBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKSwgb3duUHJvcHMpO1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgX3JlZikge1xuICB2YXIgYXJlU3RhdGVzRXF1YWwgPSBfcmVmLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYuYXJlU3RhdGVQcm9wc0VxdWFsO1xuICB2YXIgaGFzUnVuQXRMZWFzdE9uY2UgPSBmYWxzZTtcbiAgdmFyIHN0YXRlO1xuICB2YXIgb3duUHJvcHM7XG4gIHZhciBzdGF0ZVByb3BzO1xuICB2YXIgZGlzcGF0Y2hQcm9wcztcbiAgdmFyIG1lcmdlZFByb3BzO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUZpcnN0Q2FsbChmaXJzdFN0YXRlLCBmaXJzdE93blByb3BzKSB7XG4gICAgc3RhdGUgPSBmaXJzdFN0YXRlO1xuICAgIG93blByb3BzID0gZmlyc3RPd25Qcm9wcztcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgaGFzUnVuQXRMZWFzdE9uY2UgPSB0cnVlO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKSB7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzKCkge1xuICAgIGlmIChtYXBTdGF0ZVRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdTdGF0ZSgpIHtcbiAgICB2YXIgbmV4dFN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVQcm9wc0NoYW5nZWQgPSAhYXJlU3RhdGVQcm9wc0VxdWFsKG5leHRTdGF0ZVByb3BzLCBzdGF0ZVByb3BzKTtcbiAgICBzdGF0ZVByb3BzID0gbmV4dFN0YXRlUHJvcHM7XG4gICAgaWYgKHN0YXRlUHJvcHNDaGFuZ2VkKSBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHZhciBwcm9wc0NoYW5nZWQgPSAhYXJlT3duUHJvcHNFcXVhbChuZXh0T3duUHJvcHMsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVDaGFuZ2VkID0gIWFyZVN0YXRlc0VxdWFsKG5leHRTdGF0ZSwgc3RhdGUpO1xuICAgIHN0YXRlID0gbmV4dFN0YXRlO1xuICAgIG93blByb3BzID0gbmV4dE93blByb3BzO1xuICAgIGlmIChwcm9wc0NoYW5nZWQgJiYgc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpO1xuICAgIGlmIChwcm9wc0NoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wcygpO1xuICAgIGlmIChzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdTdGF0ZSgpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgcmV0dXJuIGhhc1J1bkF0TGVhc3RPbmNlID8gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA6IGhhbmRsZUZpcnN0Q2FsbChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcyk7XG4gIH07XG59IC8vIFRPRE86IEFkZCBtb3JlIGNvbW1lbnRzXG4vLyBJZiBwdXJlIGlzIHRydWUsIHRoZSBzZWxlY3RvciByZXR1cm5lZCBieSBzZWxlY3RvckZhY3Rvcnkgd2lsbCBtZW1vaXplIGl0cyByZXN1bHRzLFxuLy8gYWxsb3dpbmcgY29ubmVjdEFkdmFuY2VkJ3Mgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHRvIHJldHVybiBmYWxzZSBpZiBmaW5hbFxuLy8gcHJvcHMgaGF2ZSBub3QgY2hhbmdlZC4gSWYgZmFsc2UsIHRoZSBzZWxlY3RvciB3aWxsIGFsd2F5cyByZXR1cm4gYSBuZXdcbi8vIG9iamVjdCBhbmQgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHdpbGwgYWx3YXlzIHJldHVybiB0cnVlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KGRpc3BhdGNoLCBfcmVmMikge1xuICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gX3JlZjIuaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzID0gX3JlZjIuaW5pdE1lcmdlUHJvcHMsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImluaXRNYXBTdGF0ZVRvUHJvcHNcIiwgXCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzXCIsIFwiaW5pdE1lcmdlUHJvcHNcIl0pO1xuXG4gIHZhciBtYXBTdGF0ZVRvUHJvcHMgPSBpbml0TWFwU3RhdGVUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWVyZ2VQcm9wcyA9IGluaXRNZXJnZVByb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZlcmlmeVN1YnNlbGVjdG9ycyhtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgb3B0aW9ucy5kaXNwbGF5TmFtZSk7XG4gIH1cblxuICB2YXIgc2VsZWN0b3JGYWN0b3J5ID0gb3B0aW9ucy5wdXJlID8gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkgOiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5O1xuICByZXR1cm4gc2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgb3B0aW9ucyk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi4vY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICcuLi91dGlscy9zaGFsbG93RXF1YWwnO1xuaW1wb3J0IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBEaXNwYXRjaFRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBTdGF0ZVRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIGZyb20gJy4vbWVyZ2VQcm9wcyc7XG5pbXBvcnQgZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSBmcm9tICcuL3NlbGVjdG9yRmFjdG9yeSc7XG4vKlxyXG4gIGNvbm5lY3QgaXMgYSBmYWNhZGUgb3ZlciBjb25uZWN0QWR2YW5jZWQuIEl0IHR1cm5zIGl0cyBhcmdzIGludG8gYSBjb21wYXRpYmxlXHJcbiAgc2VsZWN0b3JGYWN0b3J5LCB3aGljaCBoYXMgdGhlIHNpZ25hdHVyZTpcclxuXHJcbiAgICAoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgPT4gbmV4dEZpbmFsUHJvcHNcclxuICBcclxuICBjb25uZWN0IHBhc3NlcyBpdHMgYXJncyB0byBjb25uZWN0QWR2YW5jZWQgYXMgb3B0aW9ucywgd2hpY2ggd2lsbCBpbiB0dXJuIHBhc3MgdGhlbSB0b1xyXG4gIHNlbGVjdG9yRmFjdG9yeSBlYWNoIHRpbWUgYSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSBpcyBpbnN0YW50aWF0ZWQgb3IgaG90IHJlbG9hZGVkLlxyXG5cclxuICBzZWxlY3RvckZhY3RvcnkgcmV0dXJucyBhIGZpbmFsIHByb3BzIHNlbGVjdG9yIGZyb20gaXRzIG1hcFN0YXRlVG9Qcm9wcyxcclxuICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCBtZXJnZVByb3BzLFxyXG4gIG1lcmdlUHJvcHNGYWN0b3JpZXMsIGFuZCBwdXJlIGFyZ3MuXHJcblxyXG4gIFRoZSByZXN1bHRpbmcgZmluYWwgcHJvcHMgc2VsZWN0b3IgaXMgY2FsbGVkIGJ5IHRoZSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSB3aGVuZXZlclxyXG4gIGl0IHJlY2VpdmVzIG5ldyBwcm9wcyBvciBzdG9yZSBzdGF0ZS5cclxuICovXG5cbmZ1bmN0aW9uIG1hdGNoKGFyZywgZmFjdG9yaWVzLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSBmYWN0b3JpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcmVzdWx0ID0gZmFjdG9yaWVzW2ldKGFyZyk7XG4gICAgaWYgKHJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZhbHVlIG9mIHR5cGUgXCIgKyB0eXBlb2YgYXJnICsgXCIgZm9yIFwiICsgbmFtZSArIFwiIGFyZ3VtZW50IHdoZW4gY29ubmVjdGluZyBjb21wb25lbnQgXCIgKyBvcHRpb25zLndyYXBwZWRDb21wb25lbnROYW1lICsgXCIuXCIpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHJpY3RFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufSAvLyBjcmVhdGVDb25uZWN0IHdpdGggZGVmYXVsdCBhcmdzIGJ1aWxkcyB0aGUgJ29mZmljaWFsJyBjb25uZWN0IGJlaGF2aW9yLiBDYWxsaW5nIGl0IHdpdGhcbi8vIGRpZmZlcmVudCBvcHRpb25zIG9wZW5zIHVwIHNvbWUgdGVzdGluZyBhbmQgZXh0ZW5zaWJpbGl0eSBzY2VuYXJpb3NcblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29ubmVjdChfdGVtcCkge1xuICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgX3JlZiRjb25uZWN0SE9DID0gX3JlZi5jb25uZWN0SE9DLFxuICAgICAgY29ubmVjdEhPQyA9IF9yZWYkY29ubmVjdEhPQyA9PT0gdm9pZCAwID8gY29ubmVjdEFkdmFuY2VkIDogX3JlZiRjb25uZWN0SE9DLFxuICAgICAgX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID0gX3JlZi5tYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPT09IHZvaWQgMCA/IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YsXG4gICAgICBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPSBfcmVmLm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9PT0gdm9pZCAwID8gZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyxcbiAgICAgIF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9IF9yZWYubWVyZ2VQcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1lcmdlUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPT09IHZvaWQgMCA/IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIDogX3JlZiRtZXJnZVByb3BzRmFjdG9yLFxuICAgICAgX3JlZiRzZWxlY3RvckZhY3RvcnkgPSBfcmVmLnNlbGVjdG9yRmFjdG9yeSxcbiAgICAgIHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYkc2VsZWN0b3JGYWN0b3J5ID09PSB2b2lkIDAgPyBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IDogX3JlZiRzZWxlY3RvckZhY3Rvcnk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIF9yZWYyKSB7XG4gICAgaWYgKF9yZWYyID09PSB2b2lkIDApIHtcbiAgICAgIF9yZWYyID0ge307XG4gICAgfVxuXG4gICAgdmFyIF9yZWYzID0gX3JlZjIsXG4gICAgICAgIF9yZWYzJHB1cmUgPSBfcmVmMy5wdXJlLFxuICAgICAgICBwdXJlID0gX3JlZjMkcHVyZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYzJHB1cmUsXG4gICAgICAgIF9yZWYzJGFyZVN0YXRlc0VxdWFsID0gX3JlZjMuYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlc0VxdWFsID0gX3JlZjMkYXJlU3RhdGVzRXF1YWwgPT09IHZvaWQgMCA/IHN0cmljdEVxdWFsIDogX3JlZjMkYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIF9yZWYzJGFyZU93blByb3BzRXF1YSA9IF9yZWYzLmFyZU93blByb3BzRXF1YWwsXG4gICAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmMyRhcmVPd25Qcm9wc0VxdWEgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZU93blByb3BzRXF1YSxcbiAgICAgICAgX3JlZjMkYXJlU3RhdGVQcm9wc0VxID0gX3JlZjMuYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmMyRhcmVTdGF0ZVByb3BzRXEgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZVN0YXRlUHJvcHNFcSxcbiAgICAgICAgX3JlZjMkYXJlTWVyZ2VkUHJvcHNFID0gX3JlZjMuYXJlTWVyZ2VkUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYzJGFyZU1lcmdlZFByb3BzRSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlTWVyZ2VkUHJvcHNFLFxuICAgICAgICBleHRyYU9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMywgW1wicHVyZVwiLCBcImFyZVN0YXRlc0VxdWFsXCIsIFwiYXJlT3duUHJvcHNFcXVhbFwiLCBcImFyZVN0YXRlUHJvcHNFcXVhbFwiLCBcImFyZU1lcmdlZFByb3BzRXF1YWxcIl0pO1xuXG4gICAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBtYXRjaChtYXBTdGF0ZVRvUHJvcHMsIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgJ21hcFN0YXRlVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gbWF0Y2gobWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1lcmdlUHJvcHMgPSBtYXRjaChtZXJnZVByb3BzLCBtZXJnZVByb3BzRmFjdG9yaWVzLCAnbWVyZ2VQcm9wcycpO1xuICAgIHJldHVybiBjb25uZWN0SE9DKHNlbGVjdG9yRmFjdG9yeSwgX2V4dGVuZHMoe1xuICAgICAgLy8gdXNlZCBpbiBlcnJvciBtZXNzYWdlc1xuICAgICAgbWV0aG9kTmFtZTogJ2Nvbm5lY3QnLFxuICAgICAgLy8gdXNlZCB0byBjb21wdXRlIENvbm5lY3QncyBkaXNwbGF5TmFtZSBmcm9tIHRoZSB3cmFwcGVkIGNvbXBvbmVudCdzIGRpc3BsYXlOYW1lLlxuICAgICAgZ2V0RGlzcGxheU5hbWU6IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIFwiQ29ubmVjdChcIiArIG5hbWUgKyBcIilcIjtcbiAgICAgIH0sXG4gICAgICAvLyBpZiBtYXBTdGF0ZVRvUHJvcHMgaXMgZmFsc3ksIHRoZSBDb25uZWN0IGNvbXBvbmVudCBkb2Vzbid0IHN1YnNjcmliZSB0byBzdG9yZSBzdGF0ZSBjaGFuZ2VzXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IEJvb2xlYW4obWFwU3RhdGVUb1Byb3BzKSxcbiAgICAgIC8vIHBhc3NlZCB0aHJvdWdoIHRvIHNlbGVjdG9yRmFjdG9yeVxuICAgICAgaW5pdE1hcFN0YXRlVG9Qcm9wczogaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHM6IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wczogaW5pdE1lcmdlUHJvcHMsXG4gICAgICBwdXJlOiBwdXJlLFxuICAgICAgYXJlU3RhdGVzRXF1YWw6IGFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbDogYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbDogYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbDogYXJlTWVyZ2VkUHJvcHNFcXVhbFxuICAgIH0sIGV4dHJhT3B0aW9ucykpO1xuICB9O1xufVxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29ubmVjdCgpOyIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGAuIFRoaXMgaXMgYSBsb3ctbGV2ZWxcclxuICogaG9vayB0aGF0IHlvdSBzaG91bGQgdXN1YWxseSBub3QgbmVlZCB0byBjYWxsIGRpcmVjdGx5LlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGBcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuICpcclxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoeyB2YWx1ZSB9KSA9PiB7XHJcbiAqICAgY29uc3QgeyBzdG9yZSB9ID0gdXNlUmVkdXhDb250ZXh0KClcclxuICogICByZXR1cm4gPGRpdj57c3RvcmUuZ2V0U3RhdGUoKX08L2Rpdj5cclxuICogfVxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlZHV4Q29udGV4dCgpIHtcbiAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZUNvbnRleHQoUmVhY3RSZWR1eENvbnRleHQpO1xuICBpbnZhcmlhbnQoY29udGV4dFZhbHVlLCAnY291bGQgbm90IGZpbmQgcmVhY3QtcmVkdXggY29udGV4dCB2YWx1ZTsgcGxlYXNlIGVuc3VyZSB0aGUgY29tcG9uZW50IGlzIHdyYXBwZWQgaW4gYSA8UHJvdmlkZXI+Jyk7XG4gIHJldHVybiBjb250ZXh0VmFsdWU7XG59IiwiaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCBhcyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi91c2VSZWR1eENvbnRleHQnO1xuLyoqXHJcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VTdG9yZWAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cclxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VTdG9yZWAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RvcmVIb29rKGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dDtcbiAgfVxuXG4gIHZhciB1c2VSZWR1eENvbnRleHQgPSBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRSZWR1eENvbnRleHQgOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCk7XG4gIH07XG4gIHJldHVybiBmdW5jdGlvbiB1c2VTdG9yZSgpIHtcbiAgICB2YXIgX3VzZVJlZHV4Q29udGV4dCA9IHVzZVJlZHV4Q29udGV4dCgpLFxuICAgICAgICBzdG9yZSA9IF91c2VSZWR1eENvbnRleHQuc3RvcmU7XG5cbiAgICByZXR1cm4gc3RvcmU7XG4gIH07XG59XG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggc3RvcmUuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl9IHRoZSByZWR1eCBzdG9yZVxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZVN0b3JlIH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBFeGFtcGxlQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gKiAgIGNvbnN0IHN0b3JlID0gdXNlU3RvcmUoKVxyXG4gKiAgIHJldHVybiA8ZGl2PntzdG9yZS5nZXRTdGF0ZSgpfTwvZGl2PlxyXG4gKiB9XHJcbiAqL1xuXG5leHBvcnQgdmFyIHVzZVN0b3JlID0gY3JlYXRlU3RvcmVIb29rKCk7IiwiaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IHsgdXNlU3RvcmUgYXMgdXNlRGVmYXVsdFN0b3JlLCBjcmVhdGVTdG9yZUhvb2sgfSBmcm9tICcuL3VzZVN0b3JlJztcbi8qKlxyXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlRGlzcGF0Y2hgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlRGlzcGF0Y2hgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURpc3BhdGNoSG9vayhjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQ7XG4gIH1cblxuICB2YXIgdXNlU3RvcmUgPSBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRTdG9yZSA6IGNyZWF0ZVN0b3JlSG9vayhjb250ZXh0KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZURpc3BhdGNoKCkge1xuICAgIHZhciBzdG9yZSA9IHVzZVN0b3JlKCk7XG4gICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IGBkaXNwYXRjaGAgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl8ZnVuY3Rpb259IHJlZHV4IHN0b3JlJ3MgYGRpc3BhdGNoYCBmdW5jdGlvblxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCdcclxuICogaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuICpcclxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoeyB2YWx1ZSB9KSA9PiB7XHJcbiAqICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXHJcbiAqICAgY29uc3QgaW5jcmVhc2VDb3VudGVyID0gdXNlQ2FsbGJhY2soKCkgPT4gZGlzcGF0Y2goeyB0eXBlOiAnaW5jcmVhc2UtY291bnRlcicgfSksIFtdKVxyXG4gKiAgIHJldHVybiAoXHJcbiAqICAgICA8ZGl2PlxyXG4gKiAgICAgICA8c3Bhbj57dmFsdWV9PC9zcGFuPlxyXG4gKiAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2luY3JlYXNlQ291bnRlcn0+SW5jcmVhc2UgY291bnRlcjwvYnV0dG9uPlxyXG4gKiAgICAgPC9kaXY+XHJcbiAqICAgKVxyXG4gKiB9XHJcbiAqL1xuXG5leHBvcnQgdmFyIHVzZURpc3BhdGNoID0gY3JlYXRlRGlzcGF0Y2hIb29rKCk7IiwiaW1wb3J0IHsgdXNlUmVkdWNlciwgdXNlUmVmLCB1c2VNZW1vLCB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IGFzIHVzZURlZmF1bHRSZWR1eENvbnRleHQgfSBmcm9tICcuL3VzZVJlZHV4Q29udGV4dCc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi4vdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG5cbnZhciByZWZFcXVhbGl0eSA9IGZ1bmN0aW9uIHJlZkVxdWFsaXR5KGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59O1xuXG5mdW5jdGlvbiB1c2VTZWxlY3RvcldpdGhTdG9yZUFuZFN1YnNjcmlwdGlvbihzZWxlY3RvciwgZXF1YWxpdHlGbiwgc3RvcmUsIGNvbnRleHRTdWIpIHtcbiAgdmFyIF91c2VSZWR1Y2VyID0gdXNlUmVkdWNlcihmdW5jdGlvbiAocykge1xuICAgIHJldHVybiBzICsgMTtcbiAgfSwgMCksXG4gICAgICBmb3JjZVJlbmRlciA9IF91c2VSZWR1Y2VyWzFdO1xuXG4gIHZhciBzdWJzY3JpcHRpb24gPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSwgY29udGV4dFN1Yik7XG4gIH0sIFtzdG9yZSwgY29udGV4dFN1Yl0pO1xuICB2YXIgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvciA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U2VsZWN0b3IgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFNlbGVjdGVkU3RhdGUgPSB1c2VSZWYoKTtcbiAgdmFyIHNlbGVjdGVkU3RhdGU7XG5cbiAgdHJ5IHtcbiAgICBpZiAoc2VsZWN0b3IgIT09IGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQgfHwgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50KSB7XG4gICAgICBzZWxlY3RlZFN0YXRlID0gc2VsZWN0b3Ioc3RvcmUuZ2V0U3RhdGUoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQ7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICB2YXIgZXJyb3JNZXNzYWdlID0gXCJBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBzZWxlY3RpbmcgdGhlIHN0b3JlIHN0YXRlOiBcIiArIGVyci5tZXNzYWdlICsgXCIuXCI7XG5cbiAgICBpZiAobGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50KSB7XG4gICAgICBlcnJvck1lc3NhZ2UgKz0gXCJcXG5UaGUgZXJyb3IgbWF5IGJlIGNvcnJlbGF0ZWQgd2l0aCB0aGlzIHByZXZpb3VzIGVycm9yOlxcblwiICsgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50LnN0YWNrICsgXCJcXG5cXG5PcmlnaW5hbCBzdGFjayB0cmFjZTpcIjtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgfVxuXG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQgPSBzZWxlY3RvcjtcbiAgICBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPSBzZWxlY3RlZFN0YXRlO1xuICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgfSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGNoZWNrRm9yVXBkYXRlcygpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXdTZWxlY3RlZFN0YXRlID0gbGF0ZXN0U2VsZWN0b3IuY3VycmVudChzdG9yZS5nZXRTdGF0ZSgpKTtcblxuICAgICAgICBpZiAoZXF1YWxpdHlGbihuZXdTZWxlY3RlZFN0YXRlLCBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID0gbmV3U2VsZWN0ZWRTdGF0ZTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyB3ZSBpZ25vcmUgYWxsIGVycm9ycyBoZXJlLCBzaW5jZSB3aGVuIHRoZSBjb21wb25lbnRcbiAgICAgICAgLy8gaXMgcmUtcmVuZGVyZWQsIHRoZSBzZWxlY3RvcnMgYXJlIGNhbGxlZCBhZ2FpbiwgYW5kXG4gICAgICAgIC8vIHdpbGwgdGhyb3cgYWdhaW4sIGlmIG5laXRoZXIgcHJvcHMgbm9yIHN0b3JlIHN0YXRlXG4gICAgICAgIC8vIGNoYW5nZWRcbiAgICAgICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gZXJyO1xuICAgICAgfVxuXG4gICAgICBmb3JjZVJlbmRlcih7fSk7XG4gICAgfVxuXG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBjaGVja0ZvclVwZGF0ZXM7XG4gICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuICAgIGNoZWNrRm9yVXBkYXRlcygpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgW3N0b3JlLCBzdWJzY3JpcHRpb25dKTtcbiAgcmV0dXJuIHNlbGVjdGVkU3RhdGU7XG59XG4vKipcclxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZVNlbGVjdG9yYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cclxuICpcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZVNlbGVjdG9yYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cclxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9ySG9vayhjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQ7XG4gIH1cblxuICB2YXIgdXNlUmVkdXhDb250ZXh0ID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpO1xuICB9O1xuICByZXR1cm4gZnVuY3Rpb24gdXNlU2VsZWN0b3Ioc2VsZWN0b3IsIGVxdWFsaXR5Rm4pIHtcbiAgICBpZiAoZXF1YWxpdHlGbiA9PT0gdm9pZCAwKSB7XG4gICAgICBlcXVhbGl0eUZuID0gcmVmRXF1YWxpdHk7XG4gICAgfVxuXG4gICAgaW52YXJpYW50KHNlbGVjdG9yLCBcIllvdSBtdXN0IHBhc3MgYSBzZWxlY3RvciB0byB1c2VTZWxlY3RvcnNcIik7XG5cbiAgICB2YXIgX3VzZVJlZHV4Q29udGV4dCA9IHVzZVJlZHV4Q29udGV4dCgpLFxuICAgICAgICBzdG9yZSA9IF91c2VSZWR1eENvbnRleHQuc3RvcmUsXG4gICAgICAgIGNvbnRleHRTdWIgPSBfdXNlUmVkdXhDb250ZXh0LnN1YnNjcmlwdGlvbjtcblxuICAgIHJldHVybiB1c2VTZWxlY3RvcldpdGhTdG9yZUFuZFN1YnNjcmlwdGlvbihzZWxlY3RvciwgZXF1YWxpdHlGbiwgc3RvcmUsIGNvbnRleHRTdWIpO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlJ3Mgc3RhdGUuIFRoaXMgaG9vayB0YWtlcyBhIHNlbGVjdG9yIGZ1bmN0aW9uXHJcbiAqIGFzIGFuIGFyZ3VtZW50LiBUaGUgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIHN0b3JlIHN0YXRlLlxyXG4gKlxyXG4gKiBUaGlzIGhvb2sgdGFrZXMgYW4gb3B0aW9uYWwgZXF1YWxpdHkgY29tcGFyaXNvbiBmdW5jdGlvbiBhcyB0aGUgc2Vjb25kIHBhcmFtZXRlclxyXG4gKiB0aGF0IGFsbG93cyB5b3UgdG8gY3VzdG9taXplIHRoZSB3YXkgdGhlIHNlbGVjdGVkIHN0YXRlIGlzIGNvbXBhcmVkIHRvIGRldGVybWluZVxyXG4gKiB3aGV0aGVyIHRoZSBjb21wb25lbnQgbmVlZHMgdG8gYmUgcmUtcmVuZGVyZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNlbGVjdG9yIHRoZSBzZWxlY3RvciBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXF1YWxpdHlGbiB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGVxdWFsaXR5XHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl9IHRoZSBzZWxlY3RlZCBzdGF0ZVxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gKiAgIGNvbnN0IGNvdW50ZXIgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5jb3VudGVyKVxyXG4gKiAgIHJldHVybiA8ZGl2Pntjb3VudGVyfTwvZGl2PlxyXG4gKiB9XHJcbiAqL1xuXG5leHBvcnQgdmFyIHVzZVNlbGVjdG9yID0gY3JlYXRlU2VsZWN0b3JIb29rKCk7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufSIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8sIGZyb20pIHtcbiAgaWYgKGZyb20gPT09IHVuZGVmaW5lZCkgZnJvbSA9ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gKHRvICYmIHRvLnNwbGl0KCcvJykpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gKGZyb20gJiYgZnJvbS5zcGxpdCgnLycpKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuXG4gIGlmIChcbiAgICBtdXN0RW5kQWJzICYmXG4gICAgZnJvbVBhcnRzWzBdICE9PSAnJyAmJlxuICAgICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpXG4gIClcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7XG4iLCJpbXBvcnQgUHJvdmlkZXIgZnJvbSAnLi9jb21wb25lbnRzL1Byb3ZpZGVyJztcbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCBjb25uZWN0IGZyb20gJy4vY29ubmVjdC9jb25uZWN0JztcbmltcG9ydCB7IHVzZURpc3BhdGNoLCBjcmVhdGVEaXNwYXRjaEhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZURpc3BhdGNoJztcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCBjcmVhdGVTZWxlY3Rvckhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZVNlbGVjdG9yJztcbmltcG9ydCB7IHVzZVN0b3JlLCBjcmVhdGVTdG9yZUhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZVN0b3JlJztcbmltcG9ydCB7IHNldEJhdGNoIH0gZnJvbSAnLi91dGlscy9iYXRjaCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyBhcyBiYXRjaCB9IGZyb20gJy4vdXRpbHMvcmVhY3RCYXRjaGVkVXBkYXRlcyc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbnNldEJhdGNoKGJhdGNoKTtcbmV4cG9ydCB7IFByb3ZpZGVyLCBjb25uZWN0QWR2YW5jZWQsIFJlYWN0UmVkdXhDb250ZXh0LCBjb25uZWN0LCBiYXRjaCwgdXNlRGlzcGF0Y2gsIGNyZWF0ZURpc3BhdGNoSG9vaywgdXNlU2VsZWN0b3IsIGNyZWF0ZVNlbGVjdG9ySG9vaywgdXNlU3RvcmUsIGNyZWF0ZVN0b3JlSG9vaywgc2hhbGxvd0VxdWFsIH07IiwiZnVuY3Rpb24gdmFsdWVPZihvYmopIHtcbiAgcmV0dXJuIG9iai52YWx1ZU9mID8gb2JqLnZhbHVlT2YoKSA6IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZi5jYWxsKG9iaik7XG59XG5cbmZ1bmN0aW9uIHZhbHVlRXF1YWwoYSwgYikge1xuICAvLyBUZXN0IGZvciBzdHJpY3QgZXF1YWxpdHkgZmlyc3QuXG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICAvLyBPdGhlcndpc2UsIGlmIGVpdGhlciBvZiB0aGVtID09IG51bGwgdGhleSBhcmUgbm90IGVxdWFsLlxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIEFycmF5LmlzQXJyYXkoYikgJiZcbiAgICAgIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJlxuICAgICAgYS5ldmVyeShmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gdmFsdWVFcXVhbChpdGVtLCBiW2luZGV4XSk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBpZiAodHlwZW9mIGEgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBiID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBhVmFsdWUgPSB2YWx1ZU9mKGEpO1xuICAgIHZhciBiVmFsdWUgPSB2YWx1ZU9mKGIpO1xuXG4gICAgaWYgKGFWYWx1ZSAhPT0gYSB8fCBiVmFsdWUgIT09IGIpIHJldHVybiB2YWx1ZUVxdWFsKGFWYWx1ZSwgYlZhbHVlKTtcblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCBhLCBiKSkuZXZlcnkoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChhW2tleV0sIGJba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbHVlRXF1YWw7XG4iLCJ2YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbnZhciBwcmVmaXggPSAnSW52YXJpYW50IGZhaWxlZCc7XG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmIChjb25kaXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCArIFwiOiBcIiArIChtZXNzYWdlIHx8ICcnKSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgaW52YXJpYW50O1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHJlc29sdmVQYXRobmFtZSBmcm9tICdyZXNvbHZlLXBhdGhuYW1lJztcbmltcG9ydCB2YWx1ZUVxdWFsIGZyb20gJ3ZhbHVlLWVxdWFsJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcblxuZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn1cbmZ1bmN0aW9uIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIHBhdGgudG9Mb3dlckNhc2UoKS5pbmRleE9mKHByZWZpeC50b0xvd2VyQ2FzZSgpKSA9PT0gMCAmJiAnLz8jJy5pbmRleE9mKHBhdGguY2hhckF0KHByZWZpeC5sZW5ndGgpKSAhPT0gLTE7XG59XG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSA/IHBhdGguc3Vic3RyKHByZWZpeC5sZW5ndGgpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHN0cmlwVHJhaWxpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdChwYXRoLmxlbmd0aCAtIDEpID09PSAnLycgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuICB2YXIgaGFzaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignIycpO1xuXG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG5cbiAgaWYgKHNlYXJjaEluZGV4ICE9PSAtMSkge1xuICAgIHNlYXJjaCA9IHBhdGhuYW1lLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2ggPT09ICc/JyA/ICcnIDogc2VhcmNoLFxuICAgIGhhc2g6IGhhc2ggPT09ICcjJyA/ICcnIDogaGFzaFxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuICB2YXIgcGF0aCA9IHBhdGhuYW1lIHx8ICcvJztcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09ICc/JykgcGF0aCArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gJyMnKSBwYXRoICs9IGhhc2guY2hhckF0KDApID09PSAnIycgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuICByZXR1cm4gcGF0aDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciBsb2NhdGlvbjtcblxuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gVHdvLWFyZyBmb3JtOiBwdXNoKHBhdGgsIHN0YXRlKVxuICAgIGxvY2F0aW9uID0gcGFyc2VQYXRoKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuICAgIGlmIChsb2NhdGlvbi5wYXRobmFtZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5wYXRobmFtZSA9ICcnO1xuXG4gICAgaWYgKGxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLnNlYXJjaC5jaGFyQXQoMCkgIT09ICc/JykgbG9jYXRpb24uc2VhcmNoID0gJz8nICsgbG9jYXRpb24uc2VhcmNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5zZWFyY2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLmhhc2guY2hhckF0KDApICE9PSAnIycpIGxvY2F0aW9uLmhhc2ggPSAnIycgKyBsb2NhdGlvbi5oYXNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5oYXNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlICE9PSB1bmRlZmluZWQgJiYgbG9jYXRpb24uc3RhdGUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgbG9jYXRpb24ucGF0aG5hbWUgPSBkZWNvZGVVUkkobG9jYXRpb24ucGF0aG5hbWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBVUklFcnJvcikge1xuICAgICAgdGhyb3cgbmV3IFVSSUVycm9yKCdQYXRobmFtZSBcIicgKyBsb2NhdGlvbi5wYXRobmFtZSArICdcIiBjb3VsZCBub3QgYmUgZGVjb2RlZC4gJyArICdUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgYW4gaW52YWxpZCBwZXJjZW50LWVuY29kaW5nLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChrZXkpIGxvY2F0aW9uLmtleSA9IGtleTtcblxuICBpZiAoY3VycmVudExvY2F0aW9uKSB7XG4gICAgLy8gUmVzb2x2ZSBpbmNvbXBsZXRlL3JlbGF0aXZlIHBhdGhuYW1lIHJlbGF0aXZlIHRvIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWU7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSByZXNvbHZlUGF0aG5hbWUobG9jYXRpb24ucGF0aG5hbWUsIGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gcHJpb3IgbG9jYXRpb24gYW5kIHBhdGhuYW1lIGlzIGVtcHR5LCBzZXQgaXQgdG8gL1xuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gJy8nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsb2NhdGlvbjtcbn1cbmZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoICYmIGEua2V5ID09PSBiLmtleSAmJiB2YWx1ZUVxdWFsKGEuc3RhdGUsIGIuc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpIHtcbiAgdmFyIHByb21wdCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gc2V0UHJvbXB0KG5leHRQcm9tcHQpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByb21wdCA9PSBudWxsLCAnQSBoaXN0b3J5IHN1cHBvcnRzIG9ubHkgb25lIHByb21wdCBhdCBhIHRpbWUnKSA6IHZvaWQgMDtcbiAgICBwcm9tcHQgPSBuZXh0UHJvbXB0O1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvbXB0ID09PSBuZXh0UHJvbXB0KSBwcm9tcHQgPSBudWxsO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETzogSWYgYW5vdGhlciB0cmFuc2l0aW9uIHN0YXJ0cyB3aGlsZSB3ZSdyZSBzdGlsbCBjb25maXJtaW5nXG4gICAgLy8gdGhlIHByZXZpb3VzIG9uZSwgd2UgbWF5IGVuZCB1cCBpbiBhIHdlaXJkIHN0YXRlLiBGaWd1cmUgb3V0IHRoZVxuICAgIC8vIGJlc3Qgd2F5IHRvIGhhbmRsZSB0aGlzLlxuICAgIGlmIChwcm9tcHQgIT0gbnVsbCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHR5cGVvZiBwcm9tcHQgPT09ICdmdW5jdGlvbicgPyBwcm9tcHQobG9jYXRpb24sIGFjdGlvbikgOiBwcm9tcHQ7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGdldFVzZXJDb25maXJtYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBnZXRVc2VyQ29uZmlybWF0aW9uKHJlc3VsdCwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdBIGhpc3RvcnkgbmVlZHMgYSBnZXRVc2VyQ29uZmlybWF0aW9uIGZ1bmN0aW9uIGluIG9yZGVyIHRvIHVzZSBhIHByb21wdCBtZXNzYWdlJykgOiB2b2lkIDA7XG4gICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHVybiBmYWxzZSBmcm9tIGEgdHJhbnNpdGlvbiBob29rIHRvIGNhbmNlbCB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAgY2FsbGJhY2socmVzdWx0ICE9PSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICBmdW5jdGlvbiBhcHBlbmRMaXN0ZW5lcihmbikge1xuICAgIHZhciBpc0FjdGl2ZSA9IHRydWU7XG5cbiAgICBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgIGlmIChpc0FjdGl2ZSkgZm4uYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVycygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2V0UHJvbXB0OiBzZXRQcm9tcHQsXG4gICAgY29uZmlybVRyYW5zaXRpb25UbzogY29uZmlybVRyYW5zaXRpb25UbyxcbiAgICBhcHBlbmRMaXN0ZW5lcjogYXBwZW5kTGlzdGVuZXIsXG4gICAgbm90aWZ5TGlzdGVuZXJzOiBub3RpZnlMaXN0ZW5lcnNcbiAgfTtcbn1cblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5mdW5jdGlvbiBnZXRDb25maXJtYXRpb24obWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgY2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWFsZXJ0XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICogY2hhbmdlZCB0byBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMgZm9yIFdpbmRvd3MgUGhvbmVzOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgJ3B1c2hTdGF0ZScgaW4gd2luZG93Lmhpc3Rvcnk7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBicm93c2VyIGZpcmVzIHBvcHN0YXRlIG9uIGhhc2ggY2hhbmdlLlxuICogSUUxMCBhbmQgSUUxMSBkbyBub3QuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKSA9PT0gLTE7XG59XG4vKipcbiAqIFJldHVybnMgZmFsc2UgaWYgdXNpbmcgZ28obikgd2l0aCBoYXNoIGhpc3RvcnkgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIHBvcHN0YXRlIGV2ZW50IGlzIGFuIGV4dHJhbmVvdXMgV2ViS2l0IGV2ZW50LlxuICogQWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgQ2hyb21lIG9uIGlPUyBmaXJlcyByZWFsIHBvcHN0YXRlIGV2ZW50c1xuICogY29udGFpbmluZyB1bmRlZmluZWQgc3RhdGUgd2hlbiBwcmVzc2luZyB0aGUgYmFjayBidXR0b24uXG4gKi9cblxuZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufVxuXG52YXIgUG9wU3RhdGVFdmVudCA9ICdwb3BzdGF0ZSc7XG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG5mdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUgMTEgc29tZXRpbWVzIHRocm93cyB3aGVuIGFjY2Vzc2luZyB3aW5kb3cuaGlzdG9yeS5zdGF0ZVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RUcmFpbmluZy9oaXN0b3J5L3B1bGwvMjg5XG4gICAgcmV0dXJuIHt9O1xuICB9XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHVzZXMgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGluY2x1ZGluZ1xuICogcHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9IHN1cHBvcnRzSGlzdG9yeSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpO1xuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBfcHJvcHMkZm9yY2VSZWZyZXNoID0gX3Byb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcbiAgICB2YXIgX3JlZiA9IGhpc3RvcnlTdGF0ZSB8fCB7fSxcbiAgICAgICAga2V5ID0gX3JlZi5rZXksXG4gICAgICAgIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcFN0YXRlKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cbiAgICBpZiAoaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkpIHJldHVybjtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGZyb21Mb2NhdGlvbi5rZXkpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIHZhciBuZXh0S2V5cyA9IGFsbEtleXMuc2xpY2UoMCwgcHJldkluZGV4ICsgMSk7XG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsS2V5c1twcmV2SW5kZXhdID0gbG9jYXRpb24ua2V5O1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbnZhciBIYXNoQ2hhbmdlRXZlbnQkMSA9ICdoYXNoY2hhbmdlJztcbnZhciBIYXNoUGF0aENvZGVycyA9IHtcbiAgaGFzaGJhbmc6IHtcbiAgICBlbmNvZGVQYXRoOiBmdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aCA6ICchLycgKyBzdHJpcExlYWRpbmdTbGFzaChwYXRoKTtcbiAgICB9LFxuICAgIGRlY29kZVBhdGg6IGZ1bmN0aW9uIGRlY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG4gICAgfVxuICB9LFxuICBub3NsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogc3RyaXBMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9XG59O1xuXG5mdW5jdGlvbiBzdHJpcEhhc2godXJsKSB7XG4gIHZhciBoYXNoSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zbGljZSgwLCBoYXNoSW5kZXgpO1xufVxuXG5mdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gJycgOiBocmVmLnN1YnN0cmluZyhoYXNoSW5kZXggKyAxKTtcbn1cblxuZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpICsgJyMnICsgcGF0aCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdIYXNoIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Hb1dpdGhvdXRSZWxvYWQgPSBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpO1xuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRoYXNoVHlwZSA9IF9wcm9wcy5oYXNoVHlwZSxcbiAgICAgIGhhc2hUeXBlID0gX3Byb3BzJGhhc2hUeXBlID09PSB2b2lkIDAgPyAnc2xhc2gnIDogX3Byb3BzJGhhc2hUeXBlO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuICB2YXIgX0hhc2hQYXRoQ29kZXJzJGhhc2hUID0gSGFzaFBhdGhDb2RlcnNbaGFzaFR5cGVdLFxuICAgICAgZW5jb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5lbmNvZGVQYXRoLFxuICAgICAgZGVjb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5kZWNvZGVQYXRoO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoKTtcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgdmFyIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsJCQxKGEsIGIpIHtcbiAgICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2g7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG4gICAgICBpZiAoIWZvcmNlTmV4dFBvcCAmJiBsb2NhdGlvbnNBcmVFcXVhbCQkMShwcmV2TG9jYXRpb24sIGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBBIGhhc2hjaGFuZ2UgZG9lc24ndCBhbHdheXMgPT0gbG9jYXRpb24gY2hhbmdlLlxuXG4gICAgICBpZiAoaWdub3JlUGF0aCA9PT0gY3JlYXRlUGF0aChsb2NhdGlvbikpIHJldHVybjsgLy8gSWdub3JlIHRoaXMgY2hhbmdlOyB3ZSBhbHJlYWR5IHNldFN0YXRlIGluIHB1c2gvcmVwbGFjZS5cblxuICAgICAgaWdub3JlUGF0aCA9IG51bGw7XG4gICAgICBoYW5kbGVQb3AobG9jYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIHBhdGhzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIHBhdGhzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgodG9Mb2NhdGlvbikpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoZnJvbUxvY2F0aW9uKSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH0gLy8gRW5zdXJlIHRoZSBoYXNoIGlzIGVuY29kZWQgcHJvcGVybHkgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2UuXG5cblxuICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG4gIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gIHZhciBhbGxQYXRocyA9IFtjcmVhdGVQYXRoKGluaXRpYWxMb2NhdGlvbildOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHZhciBiYXNlVGFnID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYmFzZScpO1xuICAgIHZhciBocmVmID0gJyc7XG5cbiAgICBpZiAoYmFzZVRhZyAmJiBiYXNlVGFnLmdldEF0dHJpYnV0ZSgnaHJlZicpKSB7XG4gICAgICBocmVmID0gc3RyaXBIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaHJlZiArICcjJyArIGVuY29kZVBhdGgoYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKSk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgICB2YXIgbmV4dFBhdGhzID0gYWxsUGF0aHMuc2xpY2UoMCwgcHJldkluZGV4ICsgMSk7XG4gICAgICAgIG5leHRQYXRocy5wdXNoKHBhdGgpO1xuICAgICAgICBhbGxQYXRocyA9IG5leHRQYXRocztcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdIYXNoIGhpc3RvcnkgY2Fubm90IFBVU0ggdGhlIHNhbWUgcGF0aDsgYSBuZXcgZW50cnkgd2lsbCBub3QgYmUgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2snKSA6IHZvaWQgMDtcbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBSRVBMQUNFLCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMuaW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxQYXRoc1twcmV2SW5kZXhdID0gcGF0aDtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKSA6IHZvaWQgMDtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50JDEsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50JDEsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCBzdG9yZXMgbG9jYXRpb25zIGluIG1lbW9yeS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgX3Byb3BzJGluaXRpYWxFbnRyaWVzID0gX3Byb3BzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPT09IHZvaWQgMCA/IFsnLyddIDogX3Byb3BzJGluaXRpYWxFbnRyaWVzLFxuICAgICAgX3Byb3BzJGluaXRpYWxJbmRleCA9IF9wcm9wcy5pbml0aWFsSW5kZXgsXG4gICAgICBpbml0aWFsSW5kZXggPSBfcHJvcHMkaW5pdGlhbEluZGV4ID09PSB2b2lkIDAgPyAwIDogX3Byb3BzJGluaXRpYWxJbmRleCxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfVxuXG4gIHZhciBpbmRleCA9IGNsYW1wKGluaXRpYWxJbmRleCwgMCwgaW5pdGlhbEVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiB0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnID8gY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgY3JlYXRlS2V5KCkpIDogY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgZW50cnkua2V5IHx8IGNyZWF0ZUtleSgpKTtcbiAgfSk7IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGNyZWF0ZVBhdGg7XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwcmV2SW5kZXggPSBoaXN0b3J5LmluZGV4O1xuICAgICAgdmFyIG5leHRJbmRleCA9IHByZXZJbmRleCArIDE7XG4gICAgICB2YXIgbmV4dEVudHJpZXMgPSBoaXN0b3J5LmVudHJpZXMuc2xpY2UoMCk7XG5cbiAgICAgIGlmIChuZXh0RW50cmllcy5sZW5ndGggPiBuZXh0SW5kZXgpIHtcbiAgICAgICAgbmV4dEVudHJpZXMuc3BsaWNlKG5leHRJbmRleCwgbmV4dEVudHJpZXMubGVuZ3RoIC0gbmV4dEluZGV4LCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBpbmRleDogbmV4dEluZGV4LFxuICAgICAgICBlbnRyaWVzOiBuZXh0RW50cmllc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgaGlzdG9yeS5lbnRyaWVzW2hpc3RvcnkuaW5kZXhdID0gbG9jYXRpb247XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBjbGFtcChoaXN0b3J5LmluZGV4ICsgbiwgMCwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aCAtIDEpO1xuICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICB2YXIgbG9jYXRpb24gPSBoaXN0b3J5LmVudHJpZXNbbmV4dEluZGV4XTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKG9rKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgaW5kZXg6IG5leHRJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1pbWljIHRoZSBiZWhhdmlvciBvZiBET00gaGlzdG9yaWVzIGJ5XG4gICAgICAgIC8vIGNhdXNpbmcgYSByZW5kZXIgYWZ0ZXIgYSBjYW5jZWxsZWQgUE9QLlxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbkdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gaGlzdG9yeS5pbmRleCArIG47XG4gICAgcmV0dXJuIG5leHRJbmRleCA+PSAwICYmIG5leHRJbmRleCA8IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGVudHJpZXMubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGVudHJpZXNbaW5kZXhdLFxuICAgIGluZGV4OiBpbmRleCxcbiAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBjYW5HbzogY2FuR28sXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5leHBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCwgcGFyc2VQYXRoLCBjcmVhdGVQYXRoIH07XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGd1ZCBmcm9tICdndWQnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcblxudmFyIE1BWF9TSUdORURfMzFfQklUX0lOVCA9IDEwNzM3NDE4MjM7XG5cbmZ1bmN0aW9uIG9iamVjdElzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gaCAhPT0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKHZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWFjdENvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4LCBfQ29uc3VtZXIkY29udGV4dFR5cGU7XG5cbiAgdmFyIGNvbnRleHRQcm9wID0gJ19fY3JlYXRlLXJlYWN0LWNvbnRleHQtJyArIGd1ZCgpICsgJ19fJztcblxuICB2YXIgUHJvdmlkZXIgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzTG9vc2UoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIoKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5lbWl0dGVyID0gY3JlYXRlRXZlbnRFbWl0dGVyKF90aGlzLnByb3BzLnZhbHVlKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gUHJvdmlkZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW2NvbnRleHRQcm9wXSA9IHRoaXMuZW1pdHRlciwgX3JlZjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMudmFsdWUgIT09IG5leHRQcm9wcy52YWx1ZSkge1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBuZXh0UHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBjaGFuZ2VkQml0cztcblxuICAgICAgICBpZiAob2JqZWN0SXMob2xkVmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IHR5cGVvZiBjYWxjdWxhdGVDaGFuZ2VkQml0cyA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGN1bGF0ZUNoYW5nZWRCaXRzKG9sZFZhbHVlLCBuZXdWYWx1ZSkgOiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQ7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgd2FybmluZygoY2hhbmdlZEJpdHMgJiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQpID09PSBjaGFuZ2VkQml0cywgJ2NhbGN1bGF0ZUNoYW5nZWRCaXRzOiBFeHBlY3RlZCB0aGUgcmV0dXJuIHZhbHVlIHRvIGJlIGEgJyArICczMS1iaXQgaW50ZWdlci4gSW5zdGVhZCByZWNlaXZlZDogJyArIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGFuZ2VkQml0cyB8PSAwO1xuXG4gICAgICAgICAgaWYgKGNoYW5nZWRCaXRzICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuc2V0KG5leHRQcm9wcy52YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfTtcblxuICAgIHJldHVybiBQcm92aWRlcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuXG4gIHZhciBDb25zdW1lciA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoQ29uc3VtZXIsIF9Db21wb25lbnQyKTtcblxuICAgIGZ1bmN0aW9uIENvbnN1bWVyKCkge1xuICAgICAgdmFyIF90aGlzMjtcblxuICAgICAgX3RoaXMyID0gX0NvbXBvbmVudDIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMyLnN0YXRlID0ge1xuICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgIH07XG5cbiAgICAgIF90aGlzMi5vblVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgICAgdmFyIG9ic2VydmVkQml0cyA9IF90aGlzMi5vYnNlcnZlZEJpdHMgfCAwO1xuXG4gICAgICAgIGlmICgob2JzZXJ2ZWRCaXRzICYgY2hhbmdlZEJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXMyO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8yID0gQ29uc3VtZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBuZXh0UHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub24odGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSB0aGlzLnByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9mZih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0uZ2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBvbmx5Q2hpbGQodGhpcy5wcm9wcy5jaGlsZHJlbikodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIENvbnN1bWVyLmNvbnRleHRUeXBlcyA9IChfQ29uc3VtZXIkY29udGV4dFR5cGUgPSB7fSwgX0NvbnN1bWVyJGNvbnRleHRUeXBlW2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QsIF9Db25zdW1lciRjb250ZXh0VHlwZSk7XG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgIENvbnN1bWVyOiBDb25zdW1lclxuICB9O1xufVxuXG52YXIgaW5kZXggPSBSZWFjdC5jcmVhdGVDb250ZXh0IHx8IGNyZWF0ZVJlYWN0Q29udGV4dDtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iLCJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCwgY3JlYXRlUGF0aCB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBjcmVhdGVDb250ZXh0IGZyb20gJ21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gJ3BhdGgtdG8tcmVnZXhwJztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuXG4vLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5cbnZhciBjcmVhdGVOYW1lZENvbnRleHQgPSBmdW5jdGlvbiBjcmVhdGVOYW1lZENvbnRleHQobmFtZSkge1xuICB2YXIgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgY29udGV4dC5kaXNwbGF5TmFtZSA9IG5hbWU7XG4gIHJldHVybiBjb250ZXh0O1xufTtcblxudmFyIGNvbnRleHQgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlTmFtZWRDb250ZXh0KFwiUm91dGVyXCIpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgUm91dGVyLmNvbXB1dGVSb290TWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlUm9vdE1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgdXJsOiBcIi9cIixcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBpc0V4YWN0OiBwYXRobmFtZSA9PT0gXCIvXCJcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIFJvdXRlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmhpc3RvcnkubG9jYXRpb25cbiAgICB9OyAvLyBUaGlzIGlzIGEgYml0IG9mIGEgaGFjay4gV2UgaGF2ZSB0byBzdGFydCBsaXN0ZW5pbmcgZm9yIGxvY2F0aW9uXG4gICAgLy8gY2hhbmdlcyBoZXJlIGluIHRoZSBjb25zdHJ1Y3RvciBpbiBjYXNlIHRoZXJlIGFyZSBhbnkgPFJlZGlyZWN0PnNcbiAgICAvLyBvbiB0aGUgaW5pdGlhbCByZW5kZXIuIElmIHRoZXJlIGFyZSwgdGhleSB3aWxsIHJlcGxhY2UvcHVzaCB3aGVuXG4gICAgLy8gdGhleSBtb3VudCBhbmQgc2luY2UgY0RNIGZpcmVzIGluIGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLCB3ZSBtYXlcbiAgICAvLyBnZXQgYSBuZXcgbG9jYXRpb24gYmVmb3JlIHRoZSA8Um91dGVyPiBpcyBtb3VudGVkLlxuXG4gICAgX3RoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuXG4gICAgaWYgKCFwcm9wcy5zdGF0aWNDb250ZXh0KSB7XG4gICAgICBfdGhpcy51bmxpc3RlbiA9IHByb3BzLmhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICBpZiAoX3RoaXMuX2lzTW91bnRlZCkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl9wZW5kaW5nTG9jYXRpb24pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBsb2NhdGlvbjogdGhpcy5fcGVuZGluZ0xvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudW5saXN0ZW4pIHRoaXMudW5saXN0ZW4oKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIHx8IG51bGwsXG4gICAgICB2YWx1ZToge1xuICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLnN0YXRlLmxvY2F0aW9uLFxuICAgICAgICBtYXRjaDogUm91dGVyLmNvbXB1dGVSb290TWF0Y2godGhpcy5zdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSksXG4gICAgICAgIHN0YXRpY0NvbnRleHQ6IHRoaXMucHJvcHMuc3RhdGljQ29udGV4dFxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByZXZQcm9wcy5oaXN0b3J5ID09PSB0aGlzLnByb3BzLmhpc3RvcnksIFwiWW91IGNhbm5vdCBjaGFuZ2UgPFJvdXRlciBoaXN0b3J5PlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHN0b3JlcyBsb2NhdGlvbiBpbiBtZW1vcnkuXG4gKi9cblxudmFyIE1lbW9yeVJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShNZW1vcnlSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lbW9yeVJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlTWVtb3J5SGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1lbW9yeVJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbW9yeVJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBNZW1vcnlSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGluaXRpYWxFbnRyaWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbiAgfTtcblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciBMaWZlY3ljbGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTGlmZWN5Y2xlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaWZlY3ljbGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IExpZmVjeWNsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VudCkgdGhpcy5wcm9wcy5vbk1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVwZGF0ZSkgdGhpcy5wcm9wcy5vblVwZGF0ZS5jYWxsKHRoaXMsIHRoaXMsIHByZXZQcm9wcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Vbm1vdW50KSB0aGlzLnByb3BzLm9uVW5tb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIExpZmVjeWNsZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXkgZnJvbSBhIHNjcmVlbi5cbiAqL1xuXG5mdW5jdGlvbiBQcm9tcHQoX3JlZikge1xuICB2YXIgbWVzc2FnZSA9IF9yZWYubWVzc2FnZSxcbiAgICAgIF9yZWYkd2hlbiA9IF9yZWYud2hlbixcbiAgICAgIHdoZW4gPSBfcmVmJHdoZW4gPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJHdoZW47XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxQcm9tcHQ+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgaWYgKCF3aGVuIHx8IGNvbnRleHQuc3RhdGljQ29udGV4dCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG1ldGhvZCA9IGNvbnRleHQuaGlzdG9yeS5ibG9jaztcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoc2VsZikge1xuICAgICAgICBzZWxmLnJlbGVhc2UgPSBtZXRob2QobWVzc2FnZSk7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICBpZiAocHJldlByb3BzLm1lc3NhZ2UgIT09IG1lc3NhZ2UpIHtcbiAgICAgICAgICBzZWxmLnJlbGVhc2UoKTtcbiAgICAgICAgICBzZWxmLnJlbGVhc2UgPSBtZXRob2QobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvblVubW91bnQ6IGZ1bmN0aW9uIG9uVW5tb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgfSxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICB9KTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIG1lc3NhZ2VUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zdHJpbmddKTtcbiAgUHJvbXB0LnByb3BUeXBlcyA9IHtcbiAgICB3aGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBtZXNzYWdlOiBtZXNzYWdlVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBjYWNoZSA9IHt9O1xudmFyIGNhY2hlTGltaXQgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50ID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgocGF0aCkge1xuICBpZiAoY2FjaGVbcGF0aF0pIHJldHVybiBjYWNoZVtwYXRoXTtcbiAgdmFyIGdlbmVyYXRvciA9IHBhdGhUb1JlZ2V4cC5jb21waWxlKHBhdGgpO1xuXG4gIGlmIChjYWNoZUNvdW50IDwgY2FjaGVMaW1pdCkge1xuICAgIGNhY2hlW3BhdGhdID0gZ2VuZXJhdG9yO1xuICAgIGNhY2hlQ291bnQrKztcbiAgfVxuXG4gIHJldHVybiBnZW5lcmF0b3I7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIGdlbmVyYXRpbmcgYSBVUkwgcGF0aG5hbWUgZnJvbSBhIHBhdGggYW5kIHBhcmFtZXRlcnMuXG4gKi9cblxuXG5mdW5jdGlvbiBnZW5lcmF0ZVBhdGgocGF0aCwgcGFyYW1zKSB7XG4gIGlmIChwYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXRoID0gXCIvXCI7XG4gIH1cblxuICBpZiAocGFyYW1zID09PSB2b2lkIDApIHtcbiAgICBwYXJhbXMgPSB7fTtcbiAgfVxuXG4gIHJldHVybiBwYXRoID09PSBcIi9cIiA/IHBhdGggOiBjb21waWxlUGF0aChwYXRoKShwYXJhbXMsIHtcbiAgICBwcmV0dHk6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG5hdmlnYXRpbmcgcHJvZ3JhbW1hdGljYWxseSB3aXRoIGEgY29tcG9uZW50LlxuICovXG5cbmZ1bmN0aW9uIFJlZGlyZWN0KF9yZWYpIHtcbiAgdmFyIGNvbXB1dGVkTWF0Y2ggPSBfcmVmLmNvbXB1dGVkTWF0Y2gsXG4gICAgICB0byA9IF9yZWYudG8sXG4gICAgICBfcmVmJHB1c2ggPSBfcmVmLnB1c2gsXG4gICAgICBwdXNoID0gX3JlZiRwdXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkcHVzaDtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJlZGlyZWN0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoaXN0b3J5ID0gY29udGV4dC5oaXN0b3J5LFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gY29udGV4dC5zdGF0aWNDb250ZXh0O1xuICAgIHZhciBtZXRob2QgPSBwdXNoID8gaGlzdG9yeS5wdXNoIDogaGlzdG9yeS5yZXBsYWNlO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGNvbXB1dGVkTWF0Y2ggPyB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBnZW5lcmF0ZVBhdGgodG8sIGNvbXB1dGVkTWF0Y2gucGFyYW1zKSA6IF9leHRlbmRzKHt9LCB0bywge1xuICAgICAgcGF0aG5hbWU6IGdlbmVyYXRlUGF0aCh0by5wYXRobmFtZSwgY29tcHV0ZWRNYXRjaC5wYXJhbXMpXG4gICAgfSkgOiB0byk7IC8vIFdoZW4gcmVuZGVyaW5nIGluIGEgc3RhdGljIGNvbnRleHQsXG4gICAgLy8gc2V0IHRoZSBuZXcgbG9jYXRpb24gaW1tZWRpYXRlbHkuXG5cbiAgICBpZiAoc3RhdGljQ29udGV4dCkge1xuICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudCgpIHtcbiAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwcmV2UHJvcHMudG8pO1xuXG4gICAgICAgIGlmICghbG9jYXRpb25zQXJlRXF1YWwocHJldkxvY2F0aW9uLCBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICAgICAgICBrZXk6IHByZXZMb2NhdGlvbi5rZXlcbiAgICAgICAgfSkpKSB7XG4gICAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRvOiB0b1xuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSZWRpcmVjdC5wcm9wVHlwZXMgPSB7XG4gICAgcHVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZnJvbTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlJDEgPSB7fTtcbnZhciBjYWNoZUxpbWl0JDEgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50JDEgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aCQxKHBhdGgsIG9wdGlvbnMpIHtcbiAgdmFyIGNhY2hlS2V5ID0gXCJcIiArIG9wdGlvbnMuZW5kICsgb3B0aW9ucy5zdHJpY3QgKyBvcHRpb25zLnNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhDYWNoZSA9IGNhY2hlJDFbY2FjaGVLZXldIHx8IChjYWNoZSQxW2NhY2hlS2V5XSA9IHt9KTtcbiAgaWYgKHBhdGhDYWNoZVtwYXRoXSkgcmV0dXJuIHBhdGhDYWNoZVtwYXRoXTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlZ2V4cCA9IHBhdGhUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICByZWdleHA6IHJlZ2V4cCxcbiAgICBrZXlzOiBrZXlzXG4gIH07XG5cbiAgaWYgKGNhY2hlQ291bnQkMSA8IGNhY2hlTGltaXQkMSkge1xuICAgIHBhdGhDYWNoZVtwYXRoXSA9IHJlc3VsdDtcbiAgICBjYWNoZUNvdW50JDErKztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgVVJMIHBhdGhuYW1lIHRvIGEgcGF0aC5cbiAqL1xuXG5cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkob3B0aW9ucykpIHtcbiAgICBvcHRpb25zID0ge1xuICAgICAgcGF0aDogb3B0aW9uc1xuICAgIH07XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgcGF0aCA9IF9vcHRpb25zLnBhdGgsXG4gICAgICBfb3B0aW9ucyRleGFjdCA9IF9vcHRpb25zLmV4YWN0LFxuICAgICAgZXhhY3QgPSBfb3B0aW9ucyRleGFjdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRleGFjdCxcbiAgICAgIF9vcHRpb25zJHN0cmljdCA9IF9vcHRpb25zLnN0cmljdCxcbiAgICAgIHN0cmljdCA9IF9vcHRpb25zJHN0cmljdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRzdHJpY3QsXG4gICAgICBfb3B0aW9ucyRzZW5zaXRpdmUgPSBfb3B0aW9ucy5zZW5zaXRpdmUsXG4gICAgICBzZW5zaXRpdmUgPSBfb3B0aW9ucyRzZW5zaXRpdmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc2Vuc2l0aXZlO1xuICB2YXIgcGF0aHMgPSBbXS5jb25jYXQocGF0aCk7XG4gIHJldHVybiBwYXRocy5yZWR1Y2UoZnVuY3Rpb24gKG1hdGNoZWQsIHBhdGgpIHtcbiAgICBpZiAoIXBhdGggJiYgcGF0aCAhPT0gXCJcIikgcmV0dXJuIG51bGw7XG4gICAgaWYgKG1hdGNoZWQpIHJldHVybiBtYXRjaGVkO1xuXG4gICAgdmFyIF9jb21waWxlUGF0aCA9IGNvbXBpbGVQYXRoJDEocGF0aCwge1xuICAgICAgZW5kOiBleGFjdCxcbiAgICAgIHN0cmljdDogc3RyaWN0LFxuICAgICAgc2Vuc2l0aXZlOiBzZW5zaXRpdmVcbiAgICB9KSxcbiAgICAgICAgcmVnZXhwID0gX2NvbXBpbGVQYXRoLnJlZ2V4cCxcbiAgICAgICAga2V5cyA9IF9jb21waWxlUGF0aC5rZXlzO1xuXG4gICAgdmFyIG1hdGNoID0gcmVnZXhwLmV4ZWMocGF0aG5hbWUpO1xuICAgIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICAgIHZhciB1cmwgPSBtYXRjaFswXSxcbiAgICAgICAgdmFsdWVzID0gbWF0Y2guc2xpY2UoMSk7XG4gICAgdmFyIGlzRXhhY3QgPSBwYXRobmFtZSA9PT0gdXJsO1xuICAgIGlmIChleGFjdCAmJiAhaXNFeGFjdCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAvLyB0aGUgcGF0aCB1c2VkIHRvIG1hdGNoXG4gICAgICB1cmw6IHBhdGggPT09IFwiL1wiICYmIHVybCA9PT0gXCJcIiA/IFwiL1wiIDogdXJsLFxuICAgICAgLy8gdGhlIG1hdGNoZWQgcG9ydGlvbiBvZiB0aGUgVVJMXG4gICAgICBpc0V4YWN0OiBpc0V4YWN0LFxuICAgICAgLy8gd2hldGhlciBvciBub3Qgd2UgbWF0Y2hlZCBleGFjdGx5XG4gICAgICBwYXJhbXM6IGtleXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBrZXksIGluZGV4KSB7XG4gICAgICAgIG1lbW9ba2V5Lm5hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICB9LCB7fSlcbiAgICB9O1xuICB9LCBudWxsKTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIHJldHVybiBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIHBhdGgpIHtcbiAgdmFyIHZhbHVlID0gY2hpbGRyZW4ocHJvcHMpO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHZhbHVlICE9PSB1bmRlZmluZWQsIFwiWW91IHJldHVybmVkIGB1bmRlZmluZWRgIGZyb20gdGhlIGBjaGlsZHJlbmAgZnVuY3Rpb24gb2YgXCIgKyAoXCI8Um91dGVcIiArIChwYXRoID8gXCIgcGF0aD1cXFwiXCIgKyBwYXRoICsgXCJcXFwiXCIgOiBcIlwiKSArIFwiPiwgYnV0IHlvdSBcIikgKyBcInNob3VsZCBoYXZlIHJldHVybmVkIGEgUmVhY3QgZWxlbWVudCBvciBgbnVsbGBcIikgOiB2b2lkIDA7XG4gIHJldHVybiB2YWx1ZSB8fCBudWxsO1xufVxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBzaW5nbGUgcGF0aCBhbmQgcmVuZGVyaW5nLlxuICovXG5cblxudmFyIFJvdXRlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUm91dGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0JDEpIHtcbiAgICAgICFjb250ZXh0JDEgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZT4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF90aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQkMS5sb2NhdGlvbjtcbiAgICAgIHZhciBtYXRjaCA9IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggPyBfdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoIC8vIDxTd2l0Y2g+IGFscmVhZHkgY29tcHV0ZWQgdGhlIG1hdGNoIGZvciB1c1xuICAgICAgOiBfdGhpcy5wcm9wcy5wYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfdGhpcy5wcm9wcykgOiBjb250ZXh0JDEubWF0Y2g7XG5cbiAgICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCBjb250ZXh0JDEsIHtcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBtYXRjaDogbWF0Y2hcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudCxcbiAgICAgICAgICByZW5kZXIgPSBfdGhpcyRwcm9wcy5yZW5kZXI7IC8vIFByZWFjdCB1c2VzIGFuIGVtcHR5IGFycmF5IGFzIGNoaWxkcmVuIGJ5XG4gICAgICAvLyBkZWZhdWx0LCBzbyB1c2UgbnVsbCBpZiB0aGF0J3MgdGhlIGNhc2UuXG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJiBjaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY2hpbGRyZW4gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9wc1xuICAgICAgfSwgcHJvcHMubWF0Y2ggPyBjaGlsZHJlbiA/IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgX3RoaXMucHJvcHMucGF0aCkgOiBjaGlsZHJlbihwcm9wcykgOiBjaGlsZHJlbiA6IGNvbXBvbmVudCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcykgOiByZW5kZXIgPyByZW5kZXIocHJvcHMpIDogbnVsbCA6IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgX3RoaXMucHJvcHMucGF0aCkgOiBjaGlsZHJlbihwcm9wcykgOiBudWxsKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUm91dGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGUucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudChwcm9wcywgcHJvcE5hbWUpIHtcbiAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gJiYgIWlzVmFsaWRFbGVtZW50VHlwZShwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJJbnZhbGlkIHByb3AgJ2NvbXBvbmVudCcgc3VwcGxpZWQgdG8gJ1JvdXRlJzogdGhlIHByb3AgaXMgbm90IGEgdmFsaWQgUmVhY3QgY29tcG9uZW50XCIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHBhdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpXSksXG4gICAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2xcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSAmJiB0aGlzLnByb3BzLmNvbXBvbmVudCksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgY29tcG9uZW50PiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSByZW5kZXI+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSByZW5kZXI+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5sb2NhdGlvbiAmJiAhcHJldlByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09IFwiL1wiID8gcGF0aCA6IFwiL1wiICsgcGF0aDtcbn1cblxuZnVuY3Rpb24gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpICsgbG9jYXRpb24ucGF0aG5hbWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcbiAgdmFyIGJhc2UgPSBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpO1xuICBpZiAobG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZihiYXNlKSAhPT0gMCkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLnN1YnN0cihiYXNlLmxlbmd0aClcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVSTChsb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIGxvY2F0aW9uID09PSBcInN0cmluZ1wiID8gbG9jYXRpb24gOiBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbn1cblxuZnVuY3Rpb24gc3RhdGljSGFuZGxlcihtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90ICVzIHdpdGggPFN0YXRpY1JvdXRlcj5cIiwgbWV0aG9kTmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG4vKipcbiAqIFRoZSBwdWJsaWMgdG9wLWxldmVsIEFQSSBmb3IgYSBcInN0YXRpY1wiIDxSb3V0ZXI+LCBzby1jYWxsZWQgYmVjYXVzZSBpdFxuICogY2FuJ3QgYWN0dWFsbHkgY2hhbmdlIHRoZSBjdXJyZW50IGxvY2F0aW9uLiBJbnN0ZWFkLCBpdCBqdXN0IHJlY29yZHNcbiAqIGxvY2F0aW9uIGNoYW5nZXMgaW4gYSBjb250ZXh0IG9iamVjdC4gVXNlZnVsIG1haW5seSBpbiB0ZXN0aW5nIGFuZFxuICogc2VydmVyLXJlbmRlcmluZyBzY2VuYXJpb3MuXG4gKi9cblxuXG52YXIgU3RhdGljUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFN0YXRpY1JvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3RhdGljUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuaGFuZGxlUHVzaCA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIF90aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sIFwiUFVTSFwiKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlUmVwbGFjZSA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIF90aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sIFwiUkVQTEFDRVwiKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTGlzdGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUJsb2NrID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdGF0aWNSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5uYXZpZ2F0ZVRvID0gZnVuY3Rpb24gbmF2aWdhdGVUbyhsb2NhdGlvbiwgYWN0aW9uKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgX3RoaXMkcHJvcHMkYmFzZW5hbWUgPSBfdGhpcyRwcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9PT0gdm9pZCAwID8gXCJcIiA6IF90aGlzJHByb3BzJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wcyRjb250ZXh0ID0gX3RoaXMkcHJvcHMuY29udGV4dCxcbiAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMkY29udGV4dDtcbiAgICBjb250ZXh0LmFjdGlvbiA9IGFjdGlvbjtcbiAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzMiRiYXNlbmFtZSA9PT0gdm9pZCAwID8gXCJcIiA6IF90aGlzJHByb3BzMiRiYXNlbmFtZSxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGNvbnRleHQgPSBfdGhpcyRwcm9wczIuY29udGV4dCxcbiAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzMiRjb250ZXh0ID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJHByb3BzMiRjb250ZXh0LFxuICAgICAgICBfdGhpcyRwcm9wczIkbG9jYXRpb24gPSBfdGhpcyRwcm9wczIubG9jYXRpb24sXG4gICAgICAgIGxvY2F0aW9uID0gX3RoaXMkcHJvcHMyJGxvY2F0aW9uID09PSB2b2lkIDAgPyBcIi9cIiA6IF90aGlzJHByb3BzMiRsb2NhdGlvbixcbiAgICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzMiwgW1wiYmFzZW5hbWVcIiwgXCJjb250ZXh0XCIsIFwibG9jYXRpb25cIl0pO1xuXG4gICAgdmFyIGhpc3RvcnkgPSB7XG4gICAgICBjcmVhdGVIcmVmOiBmdW5jdGlvbiBjcmVhdGVIcmVmKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSArIGNyZWF0ZVVSTChwYXRoKSk7XG4gICAgICB9LFxuICAgICAgYWN0aW9uOiBcIlBPUFwiLFxuICAgICAgbG9jYXRpb246IHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSksXG4gICAgICBwdXNoOiB0aGlzLmhhbmRsZVB1c2gsXG4gICAgICByZXBsYWNlOiB0aGlzLmhhbmRsZVJlcGxhY2UsXG4gICAgICBnbzogc3RhdGljSGFuZGxlcihcImdvXCIpLFxuICAgICAgZ29CYWNrOiBzdGF0aWNIYW5kbGVyKFwiZ29CYWNrXCIpLFxuICAgICAgZ29Gb3J3YXJkOiBzdGF0aWNIYW5kbGVyKFwiZ29Gb3J3YXJkXCIpLFxuICAgICAgbGlzdGVuOiB0aGlzLmhhbmRsZUxpc3RlbixcbiAgICAgIGJsb2NrOiB0aGlzLmhhbmRsZUJsb2NrXG4gICAgfTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBoaXN0b3J5OiBoaXN0b3J5LFxuICAgICAgc3RhdGljQ29udGV4dDogY29udGV4dFxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gU3RhdGljUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPFN0YXRpY1JvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IFN0YXRpY1JvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN3aXRjaC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8U3dpdGNoPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dC5sb2NhdGlvbjtcbiAgICAgIHZhciBlbGVtZW50LCBtYXRjaDsgLy8gV2UgdXNlIFJlYWN0LkNoaWxkcmVuLmZvckVhY2ggaW5zdGVhZCBvZiBSZWFjdC5DaGlsZHJlbi50b0FycmF5KCkuZmluZCgpXG4gICAgICAvLyBoZXJlIGJlY2F1c2UgdG9BcnJheSBhZGRzIGtleXMgdG8gYWxsIGNoaWxkIGVsZW1lbnRzIGFuZCB3ZSBkbyBub3Qgd2FudFxuICAgICAgLy8gdG8gdHJpZ2dlciBhbiB1bm1vdW50L3JlbW91bnQgZm9yIHR3byA8Um91dGU+cyB0aGF0IHJlbmRlciB0aGUgc2FtZVxuICAgICAgLy8gY29tcG9uZW50IGF0IGRpZmZlcmVudCBVUkxzLlxuXG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKF90aGlzLnByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKG1hdGNoID09IG51bGwgJiYgUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgICAgZWxlbWVudCA9IGNoaWxkO1xuICAgICAgICAgIHZhciBwYXRoID0gY2hpbGQucHJvcHMucGF0aCB8fCBjaGlsZC5wcm9wcy5mcm9tO1xuICAgICAgICAgIG1hdGNoID0gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgX2V4dGVuZHMoe30sIGNoaWxkLnByb3BzLCB7XG4gICAgICAgICAgICBwYXRoOiBwYXRoXG4gICAgICAgICAgfSkpIDogY29udGV4dC5tYXRjaDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jbG9uZUVsZW1lbnQoZWxlbWVudCwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGNvbXB1dGVkTWF0Y2g6IG1hdGNoXG4gICAgICB9KSA6IG51bGw7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTd2l0Y2gucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBBIHB1YmxpYyBoaWdoZXItb3JkZXIgY29tcG9uZW50IHRvIGFjY2VzcyB0aGUgaW1wZXJhdGl2ZSBBUElcbiAqL1xuXG5mdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvbmVudCkge1xuICB2YXIgZGlzcGxheU5hbWUgPSBcIndpdGhSb3V0ZXIoXCIgKyAoQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lKSArIFwiKVwiO1xuXG4gIHZhciBDID0gZnVuY3Rpb24gQyhwcm9wcykge1xuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50UmVmID0gcHJvcHMud3JhcHBlZENvbXBvbmVudFJlZixcbiAgICAgICAgcmVtYWluaW5nUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wid3JhcHBlZENvbXBvbmVudFJlZlwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxcIiArIGRpc3BsYXlOYW1lICsgXCIgLz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHJlbWFpbmluZ1Byb3BzLCBjb250ZXh0LCB7XG4gICAgICAgIHJlZjogd3JhcHBlZENvbXBvbmVudFJlZlxuICAgICAgfSkpO1xuICAgIH0pO1xuICB9O1xuXG4gIEMuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgQy5XcmFwcGVkQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBDLnByb3BUeXBlcyA9IHtcbiAgICAgIHdyYXBwZWRDb21wb25lbnRSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGhvaXN0U3RhdGljcyhDLCBDb21wb25lbnQpO1xufVxuXG52YXIgdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQ7XG5mdW5jdGlvbiB1c2VIaXN0b3J5KCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlSGlzdG9yeSgpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpLmhpc3Rvcnk7XG59XG5mdW5jdGlvbiB1c2VMb2NhdGlvbigpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZUxvY2F0aW9uKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCkubG9jYXRpb247XG59XG5mdW5jdGlvbiB1c2VQYXJhbXMoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VQYXJhbXMoKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICB2YXIgbWF0Y2ggPSB1c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaC5wYXJhbXMgOiB7fTtcbn1cbmZ1bmN0aW9uIHVzZVJvdXRlTWF0Y2gocGF0aCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUm91dGVNYXRjaCgpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiBwYXRoID8gbWF0Y2hQYXRoKHVzZUxvY2F0aW9uKCkucGF0aG5hbWUsIHBhdGgpIDogdXNlQ29udGV4dChjb250ZXh0KS5tYXRjaDtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBnbG9iYWwgPSB3aW5kb3c7XG4gICAgdmFyIGtleSA9IFwiX19yZWFjdF9yb3V0ZXJfYnVpbGRfX1wiO1xuICAgIHZhciBidWlsZE5hbWVzID0ge1xuICAgICAgY2pzOiBcIkNvbW1vbkpTXCIsXG4gICAgICBlc206IFwiRVMgbW9kdWxlc1wiLFxuICAgICAgdW1kOiBcIlVNRFwiXG4gICAgfTtcblxuICAgIGlmIChnbG9iYWxba2V5XSAmJiBnbG9iYWxba2V5XSAhPT0gXCJlc21cIikge1xuICAgICAgdmFyIGluaXRpYWxCdWlsZE5hbWUgPSBidWlsZE5hbWVzW2dsb2JhbFtrZXldXTtcbiAgICAgIHZhciBzZWNvbmRhcnlCdWlsZE5hbWUgPSBidWlsZE5hbWVzW1wiZXNtXCJdOyAvLyBUT0RPOiBBZGQgbGluayB0byBhcnRpY2xlIHRoYXQgZXhwbGFpbnMgaW4gZGV0YWlsIGhvdyB0byBhdm9pZFxuICAgICAgLy8gbG9hZGluZyAyIGRpZmZlcmVudCBidWlsZHMuXG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBhcmUgbG9hZGluZyB0aGUgXCIgKyBzZWNvbmRhcnlCdWlsZE5hbWUgKyBcIiBidWlsZCBvZiBSZWFjdCBSb3V0ZXIgXCIgKyAoXCJvbiBhIHBhZ2UgdGhhdCBpcyBhbHJlYWR5IHJ1bm5pbmcgdGhlIFwiICsgaW5pdGlhbEJ1aWxkTmFtZSArIFwiIFwiKSArIFwiYnVpbGQsIHNvIHRoaW5ncyB3b24ndCB3b3JrIHJpZ2h0LlwiKTtcbiAgICB9XG5cbiAgICBnbG9iYWxba2V5XSA9IFwiZXNtXCI7XG4gIH1cbn1cblxuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBQcm9tcHQsIFJlZGlyZWN0LCBSb3V0ZSwgUm91dGVyLCBTdGF0aWNSb3V0ZXIsIFN3aXRjaCwgY29udGV4dCBhcyBfX1JvdXRlckNvbnRleHQsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXIuanMubWFwXG4iLCIvKipcbiAqIFRoaXMgYWN0aW9uIHR5cGUgd2lsbCBiZSBkaXNwYXRjaGVkIHdoZW4geW91ciBoaXN0b3J5XG4gKiByZWNlaXZlcyBhIGxvY2F0aW9uIGNoYW5nZS5cbiAqL1xuZXhwb3J0IHZhciBMT0NBVElPTl9DSEFOR0UgPSAnQEByb3V0ZXIvTE9DQVRJT05fQ0hBTkdFJztcbmV4cG9ydCB2YXIgb25Mb2NhdGlvbkNoYW5nZWQgPSBmdW5jdGlvbiBvbkxvY2F0aW9uQ2hhbmdlZChsb2NhdGlvbiwgYWN0aW9uKSB7XG4gIHZhciBpc0ZpcnN0UmVuZGVyaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBMT0NBVElPTl9DSEFOR0UsXG4gICAgcGF5bG9hZDoge1xuICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICBpc0ZpcnN0UmVuZGVyaW5nOiBpc0ZpcnN0UmVuZGVyaW5nXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogVGhpcyBhY3Rpb24gdHlwZSB3aWxsIGJlIGRpc3BhdGNoZWQgYnkgdGhlIGhpc3RvcnkgYWN0aW9ucyBiZWxvdy5cbiAqIElmIHlvdSdyZSB3cml0aW5nIGEgbWlkZGxld2FyZSB0byB3YXRjaCBmb3IgbmF2aWdhdGlvbiBldmVudHMsIGJlIHN1cmUgdG9cbiAqIGxvb2sgZm9yIGFjdGlvbnMgb2YgdGhpcyB0eXBlLlxuICovXG5cbmV4cG9ydCB2YXIgQ0FMTF9ISVNUT1JZX01FVEhPRCA9ICdAQHJvdXRlci9DQUxMX0hJU1RPUllfTUVUSE9EJztcblxudmFyIHVwZGF0ZUxvY2F0aW9uID0gZnVuY3Rpb24gdXBkYXRlTG9jYXRpb24obWV0aG9kKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBDQUxMX0hJU1RPUllfTUVUSE9ELFxuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgYXJnczogYXJnc1xuICAgICAgfVxuICAgIH07XG4gIH07XG59O1xuLyoqXG4gKiBUaGVzZSBhY3Rpb25zIGNvcnJlc3BvbmQgdG8gdGhlIGhpc3RvcnkgQVBJLlxuICogVGhlIGFzc29jaWF0ZWQgcm91dGVyTWlkZGxld2FyZSB3aWxsIGNhcHR1cmUgdGhlc2UgZXZlbnRzIGJlZm9yZSB0aGV5IGdldCB0b1xuICogeW91ciByZWR1Y2VyIGFuZCByZWlzc3VlIHRoZW0gYXMgdGhlIG1hdGNoaW5nIGZ1bmN0aW9uIG9uIHlvdXIgaGlzdG9yeS5cbiAqL1xuXG5cbmV4cG9ydCB2YXIgcHVzaCA9IHVwZGF0ZUxvY2F0aW9uKCdwdXNoJyk7XG5leHBvcnQgdmFyIHJlcGxhY2UgPSB1cGRhdGVMb2NhdGlvbigncmVwbGFjZScpO1xuZXhwb3J0IHZhciBnbyA9IHVwZGF0ZUxvY2F0aW9uKCdnbycpO1xuZXhwb3J0IHZhciBnb0JhY2sgPSB1cGRhdGVMb2NhdGlvbignZ29CYWNrJyk7XG5leHBvcnQgdmFyIGdvRm9yd2FyZCA9IHVwZGF0ZUxvY2F0aW9uKCdnb0ZvcndhcmQnKTtcbmV4cG9ydCB2YXIgcm91dGVyQWN0aW9ucyA9IHtcbiAgcHVzaDogcHVzaCxcbiAgcmVwbGFjZTogcmVwbGFjZSxcbiAgZ286IGdvLFxuICBnb0JhY2s6IGdvQmFjayxcbiAgZ29Gb3J3YXJkOiBnb0ZvcndhcmRcbn07IiwiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuaW1wb3J0IHsgbWF0Y2hQYXRoIH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xuXG52YXIgY3JlYXRlU2VsZWN0b3JzID0gZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JzKHN0cnVjdHVyZSkge1xuICB2YXIgZ2V0SW4gPSBzdHJ1Y3R1cmUuZ2V0SW4sXG4gICAgICB0b0pTID0gc3RydWN0dXJlLnRvSlM7XG5cbiAgdmFyIGlzUm91dGVyID0gZnVuY3Rpb24gaXNSb3V0ZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBfdHlwZW9mKHZhbHVlKSA9PT0gJ29iamVjdCcgJiYgZ2V0SW4odmFsdWUsIFsnbG9jYXRpb24nXSkgJiYgZ2V0SW4odmFsdWUsIFsnYWN0aW9uJ10pO1xuICB9O1xuXG4gIHZhciBnZXRSb3V0ZXIgPSBmdW5jdGlvbiBnZXRSb3V0ZXIoc3RhdGUpIHtcbiAgICB2YXIgcm91dGVyID0gdG9KUyhnZXRJbihzdGF0ZSwgWydyb3V0ZXInXSkpO1xuXG4gICAgaWYgKCFpc1JvdXRlcihyb3V0ZXIpKSB7XG4gICAgICB0aHJvdyAnQ291bGQgbm90IGZpbmQgcm91dGVyIHJlZHVjZXIgaW4gc3RhdGUgdHJlZSwgaXQgbXVzdCBiZSBtb3VudGVkIHVuZGVyIFwicm91dGVyXCInO1xuICAgIH1cblxuICAgIHJldHVybiByb3V0ZXI7XG4gIH07XG5cbiAgdmFyIGdldExvY2F0aW9uID0gZnVuY3Rpb24gZ2V0TG9jYXRpb24oc3RhdGUpIHtcbiAgICByZXR1cm4gdG9KUyhnZXRJbihnZXRSb3V0ZXIoc3RhdGUpLCBbJ2xvY2F0aW9uJ10pKTtcbiAgfTtcblxuICB2YXIgZ2V0QWN0aW9uID0gZnVuY3Rpb24gZ2V0QWN0aW9uKHN0YXRlKSB7XG4gICAgcmV0dXJuIHRvSlMoZ2V0SW4oZ2V0Um91dGVyKHN0YXRlKSwgWydhY3Rpb24nXSkpO1xuICB9O1xuXG4gIHZhciBnZXRTZWFyY2ggPSBmdW5jdGlvbiBnZXRTZWFyY2goc3RhdGUpIHtcbiAgICByZXR1cm4gdG9KUyhnZXRJbihnZXRSb3V0ZXIoc3RhdGUpLCBbJ2xvY2F0aW9uJywgJ3NlYXJjaCddKSk7XG4gIH07XG5cbiAgdmFyIGdldEhhc2ggPSBmdW5jdGlvbiBnZXRIYXNoKHN0YXRlKSB7XG4gICAgcmV0dXJuIHRvSlMoZ2V0SW4oZ2V0Um91dGVyKHN0YXRlKSwgWydsb2NhdGlvbicsICdoYXNoJ10pKTtcbiAgfTsgLy8gSXQgb25seSBtYWtlcyBzZW5zZSB0byByZWNhbGN1bGF0ZSB0aGUgYG1hdGNoUGF0aGAgd2hlbmV2ZXIgdGhlIHBhdGhuYW1lXG4gIC8vIG9mIHRoZSBsb2NhdGlvbiBjaGFuZ2VzLiBUaGF0J3Mgd2h5IGBjcmVhdGVNYXRjaFNlbGVjdG9yYCBtZW1vaXplc1xuICAvLyB0aGUgbGF0ZXN0IHJlc3VsdCBiYXNlZCBvbiB0aGUgbG9jYXRpb24ncyBwYXRobmFtZS5cblxuXG4gIHZhciBjcmVhdGVNYXRjaFNlbGVjdG9yID0gZnVuY3Rpb24gY3JlYXRlTWF0Y2hTZWxlY3RvcihwYXRoKSB7XG4gICAgdmFyIGxhc3RQYXRobmFtZSA9IG51bGw7XG4gICAgdmFyIGxhc3RNYXRjaCA9IG51bGw7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgdmFyIF9yZWYgPSBnZXRMb2NhdGlvbihzdGF0ZSkgfHwge30sXG4gICAgICAgICAgcGF0aG5hbWUgPSBfcmVmLnBhdGhuYW1lO1xuXG4gICAgICBpZiAocGF0aG5hbWUgPT09IGxhc3RQYXRobmFtZSkge1xuICAgICAgICByZXR1cm4gbGFzdE1hdGNoO1xuICAgICAgfVxuXG4gICAgICBsYXN0UGF0aG5hbWUgPSBwYXRobmFtZTtcbiAgICAgIHZhciBtYXRjaCA9IG1hdGNoUGF0aChwYXRobmFtZSwgcGF0aCk7XG5cbiAgICAgIGlmICghbWF0Y2ggfHwgIWxhc3RNYXRjaCB8fCBtYXRjaC51cmwgIT09IGxhc3RNYXRjaC51cmwpIHtcbiAgICAgICAgbGFzdE1hdGNoID0gbWF0Y2g7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsYXN0TWF0Y2g7XG4gICAgfTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGdldExvY2F0aW9uOiBnZXRMb2NhdGlvbixcbiAgICBnZXRBY3Rpb246IGdldEFjdGlvbixcbiAgICBnZXRSb3V0ZXI6IGdldFJvdXRlcixcbiAgICBnZXRTZWFyY2g6IGdldFNlYXJjaCxcbiAgICBnZXRIYXNoOiBnZXRIYXNoLFxuICAgIGNyZWF0ZU1hdGNoU2VsZWN0b3I6IGNyZWF0ZU1hdGNoU2VsZWN0b3JcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVNlbGVjdG9yczsiLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY29ubmVjdCwgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuaW1wb3J0IHsgb25Mb2NhdGlvbkNoYW5nZWQgYXMgX29uTG9jYXRpb25DaGFuZ2VkIH0gZnJvbSAnLi9hY3Rpb25zJztcbmltcG9ydCBjcmVhdGVTZWxlY3RvcnMgZnJvbSAnLi9zZWxlY3RvcnMnO1xuXG52YXIgY3JlYXRlQ29ubmVjdGVkUm91dGVyID0gZnVuY3Rpb24gY3JlYXRlQ29ubmVjdGVkUm91dGVyKHN0cnVjdHVyZSkge1xuICB2YXIgX2NyZWF0ZVNlbGVjdG9ycyA9IGNyZWF0ZVNlbGVjdG9ycyhzdHJ1Y3R1cmUpLFxuICAgICAgZ2V0TG9jYXRpb24gPSBfY3JlYXRlU2VsZWN0b3JzLmdldExvY2F0aW9uO1xuICAvKlxuICAgKiBDb25uZWN0ZWRSb3V0ZXIgbGlzdGVucyB0byBhIGhpc3Rvcnkgb2JqZWN0IHBhc3NlZCBmcm9tIHByb3BzLlxuICAgKiBXaGVuIGhpc3RvcnkgaXMgY2hhbmdlZCwgaXQgZGlzcGF0Y2hlcyBhY3Rpb24gdG8gcmVkdXggc3RvcmUuXG4gICAqIFRoZW4sIHN0b3JlIHdpbGwgcGFzcyBwcm9wcyB0byBjb21wb25lbnQgdG8gcmVuZGVyLlxuICAgKiBUaGlzIGNyZWF0ZXMgdW5pLWRpcmVjdGlvbmFsIGZsb3cgZnJvbSBoaXN0b3J5LT5zdG9yZS0+cm91dGVyLT5jb21wb25lbnRzLlxuICAgKi9cblxuXG4gIHZhciBDb25uZWN0ZWRSb3V0ZXIgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfUHVyZUNvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhDb25uZWN0ZWRSb3V0ZXIsIF9QdXJlQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIENvbm5lY3RlZFJvdXRlcihwcm9wcykge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29ubmVjdGVkUm91dGVyKTtcblxuICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQ29ubmVjdGVkUm91dGVyKS5jYWxsKHRoaXMsIHByb3BzKSk7XG4gICAgICB2YXIgc3RvcmUgPSBwcm9wcy5zdG9yZSxcbiAgICAgICAgICBoaXN0b3J5ID0gcHJvcHMuaGlzdG9yeSxcbiAgICAgICAgICBvbkxvY2F0aW9uQ2hhbmdlZCA9IHByb3BzLm9uTG9jYXRpb25DaGFuZ2VkO1xuICAgICAgX3RoaXMuaW5UaW1lVHJhdmVsbGluZyA9IGZhbHNlOyAvLyBTdWJzY3JpYmUgdG8gc3RvcmUgY2hhbmdlcyB0byBjaGVjayBpZiB3ZSBhcmUgaW4gdGltZSB0cmF2ZWxsaW5nXG5cbiAgICAgIF90aGlzLnVuc3Vic2NyaWJlID0gc3RvcmUuc3Vic2NyaWJlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRXh0cmFjdCBzdG9yZSdzIGxvY2F0aW9uXG4gICAgICAgIHZhciBfZ2V0TG9jYXRpb24gPSBnZXRMb2NhdGlvbihzdG9yZS5nZXRTdGF0ZSgpKSxcbiAgICAgICAgICAgIHBhdGhuYW1lSW5TdG9yZSA9IF9nZXRMb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgICAgIHNlYXJjaEluU3RvcmUgPSBfZ2V0TG9jYXRpb24uc2VhcmNoLFxuICAgICAgICAgICAgaGFzaEluU3RvcmUgPSBfZ2V0TG9jYXRpb24uaGFzaDsgLy8gRXh0cmFjdCBoaXN0b3J5J3MgbG9jYXRpb25cblxuXG4gICAgICAgIHZhciBfaGlzdG9yeSRsb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb24sXG4gICAgICAgICAgICBwYXRobmFtZUluSGlzdG9yeSA9IF9oaXN0b3J5JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICAgICAgc2VhcmNoSW5IaXN0b3J5ID0gX2hpc3RvcnkkbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICAgICAgaGFzaEluSGlzdG9yeSA9IF9oaXN0b3J5JGxvY2F0aW9uLmhhc2g7IC8vIElmIHdlIGRvIHRpbWUgdHJhdmVsbGluZywgdGhlIGxvY2F0aW9uIGluIHN0b3JlIGlzIGNoYW5nZWQgYnV0IGxvY2F0aW9uIGluIGhpc3RvcnkgaXMgbm90IGNoYW5nZWRcblxuICAgICAgICBpZiAocHJvcHMuaGlzdG9yeS5hY3Rpb24gPT09ICdQVVNIJyAmJiAocGF0aG5hbWVJbkhpc3RvcnkgIT09IHBhdGhuYW1lSW5TdG9yZSB8fCBzZWFyY2hJbkhpc3RvcnkgIT09IHNlYXJjaEluU3RvcmUgfHwgaGFzaEluSGlzdG9yeSAhPT0gaGFzaEluU3RvcmUpKSB7XG4gICAgICAgICAgX3RoaXMuaW5UaW1lVHJhdmVsbGluZyA9IHRydWU7IC8vIFVwZGF0ZSBoaXN0b3J5J3MgbG9jYXRpb24gdG8gbWF0Y2ggc3RvcmUncyBsb2NhdGlvblxuXG4gICAgICAgICAgaGlzdG9yeS5wdXNoKHtcbiAgICAgICAgICAgIHBhdGhuYW1lOiBwYXRobmFtZUluU3RvcmUsXG4gICAgICAgICAgICBzZWFyY2g6IHNlYXJjaEluU3RvcmUsXG4gICAgICAgICAgICBoYXNoOiBoYXNoSW5TdG9yZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgdmFyIGhhbmRsZUxvY2F0aW9uQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9jYXRpb25DaGFuZ2UobG9jYXRpb24sIGFjdGlvbikge1xuICAgICAgICB2YXIgaXNGaXJzdFJlbmRlcmluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG5cbiAgICAgICAgLy8gRGlzcGF0Y2ggb25Mb2NhdGlvbkNoYW5nZWQgZXhjZXB0IHdoZW4gd2UncmUgaW4gdGltZSB0cmF2ZWxsaW5nXG4gICAgICAgIGlmICghX3RoaXMuaW5UaW1lVHJhdmVsbGluZykge1xuICAgICAgICAgIG9uTG9jYXRpb25DaGFuZ2VkKGxvY2F0aW9uLCBhY3Rpb24sIGlzRmlyc3RSZW5kZXJpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLmluVGltZVRyYXZlbGxpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfTsgLy8gTGlzdGVuIHRvIGhpc3RvcnkgY2hhbmdlc1xuXG5cbiAgICAgIF90aGlzLnVubGlzdGVuID0gaGlzdG9yeS5saXN0ZW4oaGFuZGxlTG9jYXRpb25DaGFuZ2UpOyAvLyBEaXNwYXRjaCBhIGxvY2F0aW9uIGNoYW5nZSBhY3Rpb24gZm9yIHRoZSBpbml0aWFsIGxvY2F0aW9uLlxuICAgICAgLy8gVGhpcyBtYWtlcyBpdCBiYWNrd2FyZC1jb21wYXRpYmxlIHdpdGggcmVhY3Qtcm91dGVyLXJlZHV4LlxuICAgICAgLy8gQnV0LCB3ZSBhZGQgYGlzRmlyc3RSZW5kZXJpbmdgIHRvIGB0cnVlYCB0byBwcmV2ZW50IGRvdWJsZS1yZW5kZXJpbmcuXG5cbiAgICAgIGhhbmRsZUxvY2F0aW9uQ2hhbmdlKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uLCB0cnVlKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoQ29ubmVjdGVkUm91dGVyLCBbe1xuICAgICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIHRoaXMudW5saXN0ZW4oKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJyZW5kZXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBoaXN0b3J5ID0gX3RoaXMkcHJvcHMuaGlzdG9yeSxcbiAgICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW47XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgICAgIGhpc3Rvcnk6IGhpc3RvcnlcbiAgICAgICAgfSwgY2hpbGRyZW4pO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBDb25uZWN0ZWRSb3V0ZXI7XG4gIH0oUHVyZUNvbXBvbmVudCk7XG5cbiAgQ29ubmVjdGVkUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBzdG9yZTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGdldFN0YXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSkuaXNSZXF1aXJlZCxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgYWN0aW9uOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICBsaXN0ZW46IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgICAgcHVzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWQsXG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICAgIG9uTG9jYXRpb25DaGFuZ2VkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gIH07XG5cbiAgdmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IGZ1bmN0aW9uIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCkge1xuICAgIHJldHVybiB7XG4gICAgICBvbkxvY2F0aW9uQ2hhbmdlZDogZnVuY3Rpb24gb25Mb2NhdGlvbkNoYW5nZWQobG9jYXRpb24sIGFjdGlvbiwgaXNGaXJzdFJlbmRlcmluZykge1xuICAgICAgICByZXR1cm4gZGlzcGF0Y2goX29uTG9jYXRpb25DaGFuZ2VkKGxvY2F0aW9uLCBhY3Rpb24sIGlzRmlyc3RSZW5kZXJpbmcpKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBDb25uZWN0ZWRSb3V0ZXJXaXRoQ29udGV4dCA9IGZ1bmN0aW9uIENvbm5lY3RlZFJvdXRlcldpdGhDb250ZXh0KHByb3BzKSB7XG4gICAgdmFyIENvbnRleHQgPSBwcm9wcy5jb250ZXh0IHx8IFJlYWN0UmVkdXhDb250ZXh0O1xuXG4gICAgaWYgKENvbnRleHQgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgJ1BsZWFzZSB1cGdyYWRlIHRvIHJlYWN0LXJlZHV4IHY2JztcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIHN0b3JlID0gX3JlZi5zdG9yZTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbm5lY3RlZFJvdXRlciwgX2V4dGVuZHMoe1xuICAgICAgICBzdG9yZTogc3RvcmVcbiAgICAgIH0sIHByb3BzKSk7XG4gICAgfSk7XG4gIH07XG5cbiAgQ29ubmVjdGVkUm91dGVyV2l0aENvbnRleHQucHJvcFR5cGVzID0ge1xuICAgIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcbiAgcmV0dXJuIGNvbm5lY3QobnVsbCwgbWFwRGlzcGF0Y2hUb1Byb3BzKShDb25uZWN0ZWRSb3V0ZXJXaXRoQ29udGV4dCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDb25uZWN0ZWRSb3V0ZXI7IiwiZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykgeyBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlOyB9KSk7IH0gb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IHsgTE9DQVRJT05fQ0hBTkdFIH0gZnJvbSAnLi9hY3Rpb25zJztcbi8qKlxuICogQWRkcyBxdWVyeSB0byBsb2NhdGlvbi5cbiAqIFV0aWxpc2VzIHRoZSBzZWFyY2ggcHJvcCBvZiBsb2NhdGlvbiB0byBjb25zdHJ1Y3QgcXVlcnkuXG4gKi9cblxudmFyIGluamVjdFF1ZXJ5ID0gZnVuY3Rpb24gaW5qZWN0UXVlcnkobG9jYXRpb24pIHtcbiAgdmFyIHNlYXJjaFF1ZXJ5ID0gbG9jYXRpb24gJiYgbG9jYXRpb24uc2VhcmNoO1xuXG4gIGlmICh0eXBlb2Ygc2VhcmNoUXVlcnkgIT09ICdzdHJpbmcnIHx8IHNlYXJjaFF1ZXJ5Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBsb2NhdGlvbiwge1xuICAgICAgcXVlcnk6IHt9XG4gICAgfSk7XG4gIH0gLy8gSWdub3JlIHRoZSBgP2AgcGFydCBvZiB0aGUgc2VhcmNoIHN0cmluZyBlLmcuID91c2VybmFtZT1jb2Rlam9ja2llXG5cblxuICB2YXIgc2VhcmNoID0gc2VhcmNoUXVlcnkuc3Vic3RyaW5nKDEpOyAvLyBTcGxpdCB0aGUgcXVlcnkgc3RyaW5nIG9uIGAmYCBlLmcuID91c2VybmFtZT1jb2Rlam9ja2llJm5hbWU9S2VubmVkeVxuXG4gIHZhciBxdWVyaWVzID0gc2VhcmNoLnNwbGl0KCcmJyk7IC8vIENvbnRydWN0IHF1ZXJ5XG5cbiAgdmFyIHF1ZXJ5ID0gcXVlcmllcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgY3VycmVudFF1ZXJ5KSB7XG4gICAgLy8gU3BsaXQgb24gYD1gLCB0byBnZXQga2V5IGFuZCB2YWx1ZVxuICAgIHZhciBfY3VycmVudFF1ZXJ5JHNwbGl0ID0gY3VycmVudFF1ZXJ5LnNwbGl0KCc9JyksXG4gICAgICAgIF9jdXJyZW50UXVlcnkkc3BsaXQyID0gX3NsaWNlZFRvQXJyYXkoX2N1cnJlbnRRdWVyeSRzcGxpdCwgMiksXG4gICAgICAgIHF1ZXJ5S2V5ID0gX2N1cnJlbnRRdWVyeSRzcGxpdDJbMF0sXG4gICAgICAgIHF1ZXJ5VmFsdWUgPSBfY3VycmVudFF1ZXJ5JHNwbGl0MlsxXTtcblxuICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBhY2MsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgcXVlcnlLZXksIHF1ZXJ5VmFsdWUpKTtcbiAgfSwge30pO1xuICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgbG9jYXRpb24sIHtcbiAgICBxdWVyeTogcXVlcnlcbiAgfSk7XG59O1xuXG52YXIgY3JlYXRlQ29ubmVjdFJvdXRlciA9IGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3RSb3V0ZXIoc3RydWN0dXJlKSB7XG4gIHZhciBmcm9tSlMgPSBzdHJ1Y3R1cmUuZnJvbUpTLFxuICAgICAgbWVyZ2UgPSBzdHJ1Y3R1cmUubWVyZ2U7XG5cbiAgdmFyIGNyZWF0ZVJvdXRlclJlZHVjZXIgPSBmdW5jdGlvbiBjcmVhdGVSb3V0ZXJSZWR1Y2VyKGhpc3RvcnkpIHtcbiAgICB2YXIgaW5pdGlhbFJvdXRlclN0YXRlID0gZnJvbUpTKHtcbiAgICAgIGxvY2F0aW9uOiBpbmplY3RRdWVyeShoaXN0b3J5LmxvY2F0aW9uKSxcbiAgICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb25cbiAgICB9KTtcbiAgICAvKlxuICAgICogVGhpcyByZWR1Y2VyIHdpbGwgdXBkYXRlIHRoZSBzdGF0ZSB3aXRoIHRoZSBtb3N0IHJlY2VudCBsb2NhdGlvbiBoaXN0b3J5XG4gICAgKiBoYXMgdHJhbnNpdGlvbmVkIHRvLlxuICAgICovXG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0YXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBpbml0aWFsUm91dGVyU3RhdGU7XG5cbiAgICAgIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcbiAgICAgICAgICB0eXBlID0gX3JlZi50eXBlLFxuICAgICAgICAgIHBheWxvYWQgPSBfcmVmLnBheWxvYWQ7XG5cbiAgICAgIGlmICh0eXBlID09PSBMT0NBVElPTl9DSEFOR0UpIHtcbiAgICAgICAgdmFyIGxvY2F0aW9uID0gcGF5bG9hZC5sb2NhdGlvbixcbiAgICAgICAgICAgIGFjdGlvbiA9IHBheWxvYWQuYWN0aW9uLFxuICAgICAgICAgICAgaXNGaXJzdFJlbmRlcmluZyA9IHBheWxvYWQuaXNGaXJzdFJlbmRlcmluZzsgLy8gRG9uJ3QgdXBkYXRlIHRoZSBzdGF0ZSByZWYgZm9yIHRoZSBmaXJzdCByZW5kZXJpbmdcbiAgICAgICAgLy8gdG8gcHJldmVudCB0aGUgZG91YmxlLXJlbmRlcmluZyBpc3N1ZSBvbiBpbml0aWxpemF0aW9uXG5cbiAgICAgICAgcmV0dXJuIGlzRmlyc3RSZW5kZXJpbmcgPyBzdGF0ZSA6IG1lcmdlKHN0YXRlLCB7XG4gICAgICAgICAgbG9jYXRpb246IGZyb21KUyhpbmplY3RRdWVyeShsb2NhdGlvbikpLFxuICAgICAgICAgIGFjdGlvbjogYWN0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfTtcbiAgfTtcblxuICByZXR1cm4gY3JlYXRlUm91dGVyUmVkdWNlcjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbm5lY3RSb3V0ZXI7IiwiZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgZ2V0SW4gZnJvbSAnLi9nZXRJbic7XG52YXIgc3RydWN0dXJlID0ge1xuICBmcm9tSlM6IGZ1bmN0aW9uIGZyb21KUyh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgZ2V0SW46IGdldEluLFxuICBtZXJnZTogZnVuY3Rpb24gbWVyZ2Uoc3RhdGUsIHBheWxvYWQpIHtcbiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgc3RhdGUsIHBheWxvYWQpO1xuICB9LFxuICB0b0pTOiBmdW5jdGlvbiB0b0pTKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgc3RydWN0dXJlOyIsIi8qIENvZGUgZnJvbSBnaXRodWIuY29tL2VyaWtyYXMvcmVkdXgtZm9ybSBieSBFcmlrIFJhc211c3NlbiAqL1xudmFyIGdldEluID0gZnVuY3Rpb24gZ2V0SW4oc3RhdGUsIHBhdGgpIHtcbiAgaWYgKCFzdGF0ZSkge1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICBpZiAoIWxlbmd0aCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gc3RhdGU7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGggJiYgISFyZXN1bHQ7ICsraSkge1xuICAgIHJlc3VsdCA9IHJlc3VsdFtwYXRoW2ldXTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBnZXRJbjsiLCJpbXBvcnQgY3JlYXRlQ29ubmVjdGVkUm91dGVyIGZyb20gXCIuL0Nvbm5lY3RlZFJvdXRlclwiO1xuaW1wb3J0IGNyZWF0ZUNvbm5lY3RSb3V0ZXIgZnJvbSBcIi4vcmVkdWNlclwiO1xuaW1wb3J0IGNyZWF0ZVNlbGVjdG9ycyBmcm9tIFwiLi9zZWxlY3RvcnNcIjtcbmltcG9ydCBwbGFpblN0cnVjdHVyZSBmcm9tIFwiLi9zdHJ1Y3R1cmUvcGxhaW5cIjtcbmV4cG9ydCB7IExPQ0FUSU9OX0NIQU5HRSwgQ0FMTF9ISVNUT1JZX01FVEhPRCwgb25Mb2NhdGlvbkNoYW5nZWQsIHB1c2gsIHJlcGxhY2UsIGdvLCBnb0JhY2ssIGdvRm9yd2FyZCwgcm91dGVyQWN0aW9ucyB9IGZyb20gXCIuL2FjdGlvbnNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcm91dGVyTWlkZGxld2FyZSB9IGZyb20gXCIuL21pZGRsZXdhcmVcIjtcbmV4cG9ydCB2YXIgQ29ubmVjdGVkUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZUNvbm5lY3RlZFJvdXRlcihwbGFpblN0cnVjdHVyZSk7XG5leHBvcnQgdmFyIGNvbm5lY3RSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlQ29ubmVjdFJvdXRlcihwbGFpblN0cnVjdHVyZSk7XG5cbnZhciBfY3JlYXRlU2VsZWN0b3JzID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZVNlbGVjdG9ycyhwbGFpblN0cnVjdHVyZSksXG4gICAgZ2V0TG9jYXRpb24gPSBfY3JlYXRlU2VsZWN0b3JzLmdldExvY2F0aW9uLFxuICAgIGdldEFjdGlvbiA9IF9jcmVhdGVTZWxlY3RvcnMuZ2V0QWN0aW9uLFxuICAgIGdldEhhc2ggPSBfY3JlYXRlU2VsZWN0b3JzLmdldEhhc2gsXG4gICAgZ2V0U2VhcmNoID0gX2NyZWF0ZVNlbGVjdG9ycy5nZXRTZWFyY2gsXG4gICAgY3JlYXRlTWF0Y2hTZWxlY3RvciA9IF9jcmVhdGVTZWxlY3RvcnMuY3JlYXRlTWF0Y2hTZWxlY3RvcjtcblxuZXhwb3J0IHsgZ2V0TG9jYXRpb24sIGdldEFjdGlvbiwgZ2V0SGFzaCwgZ2V0U2VhcmNoLCBjcmVhdGVNYXRjaFNlbGVjdG9yIH07IiwiaW1wb3J0IHsgUm91dGVyLCBfX1JvdXRlckNvbnRleHQsIG1hdGNoUGF0aCB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5leHBvcnQgKiBmcm9tICdyZWFjdC1yb3V0ZXInO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTG9jYXRpb24gfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIEhUTUw1IGhpc3RvcnkuXG4gKi9cblxudmFyIEJyb3dzZXJSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQnJvd3NlclJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnJvd3NlclJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlQnJvd3Nlckhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBCcm93c2VyUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gQnJvd3NlclJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBCcm93c2VyUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZm9yY2VSZWZyZXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXJcbiAgfTtcblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEJyb3dzZXJSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIHdpbmRvdy5sb2NhdGlvbi5oYXNoLlxuICovXG5cbnZhciBIYXNoUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEhhc2hSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEhhc2hSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhhc2hIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gSGFzaFJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEhhc2hSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgSGFzaFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhc2hUeXBlOiBQcm9wVHlwZXMub25lT2YoW1wiaGFzaGJhbmdcIiwgXCJub3NsYXNoXCIsIFwic2xhc2hcIl0pXG4gIH07XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxIYXNoUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG52YXIgcmVzb2x2ZVRvTG9jYXRpb24gPSBmdW5jdGlvbiByZXNvbHZlVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgdG8gPT09IFwiZnVuY3Rpb25cIiA/IHRvKGN1cnJlbnRMb2NhdGlvbikgOiB0bztcbn07XG52YXIgbm9ybWFsaXplVG9Mb2NhdGlvbiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gY3JlYXRlTG9jYXRpb24odG8sIG51bGwsIG51bGwsIGN1cnJlbnRMb2NhdGlvbikgOiB0bztcbn07XG5cbnZhciBmb3J3YXJkUmVmU2hpbSA9IGZ1bmN0aW9uIGZvcndhcmRSZWZTaGltKEMpIHtcbiAgcmV0dXJuIEM7XG59O1xuXG52YXIgZm9yd2FyZFJlZiA9IFJlYWN0LmZvcndhcmRSZWY7XG5cbmlmICh0eXBlb2YgZm9yd2FyZFJlZiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmID0gZm9yd2FyZFJlZlNoaW07XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG5cbnZhciBMaW5rQW5jaG9yID0gZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICBuYXZpZ2F0ZSA9IF9yZWYubmF2aWdhdGUsXG4gICAgICBfb25DbGljayA9IF9yZWYub25DbGljayxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJpbm5lclJlZlwiLCBcIm5hdmlnYXRlXCIsIFwib25DbGlja1wiXSk7XG5cbiAgdmFyIHRhcmdldCA9IHJlc3QudGFyZ2V0O1xuXG4gIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhldmVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKF9vbkNsaWNrKSBfb25DbGljayhldmVudCk7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aHJvdyBleDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmIC8vIG9uQ2xpY2sgcHJldmVudGVkIGRlZmF1bHRcbiAgICAgIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAoIC8vIGlnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAgICAgIXRhcmdldCB8fCB0YXJnZXQgPT09IFwiX3NlbGZcIikgJiYgLy8gbGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICApIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIG5hdmlnYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gIGlmIChmb3J3YXJkUmVmU2hpbSAhPT0gZm9yd2FyZFJlZikge1xuICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgfSBlbHNlIHtcbiAgICBwcm9wcy5yZWYgPSBpbm5lclJlZjtcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCBwcm9wcyk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBMaW5rQW5jaG9yLmRpc3BsYXlOYW1lID0gXCJMaW5rQW5jaG9yXCI7XG59XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuXG5cbnZhciBMaW5rID0gZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZjIsIGZvcndhcmRlZFJlZikge1xuICB2YXIgX3JlZjIkY29tcG9uZW50ID0gX3JlZjIuY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50ID0gX3JlZjIkY29tcG9uZW50ID09PSB2b2lkIDAgPyBMaW5rQW5jaG9yIDogX3JlZjIkY29tcG9uZW50LFxuICAgICAgcmVwbGFjZSA9IF9yZWYyLnJlcGxhY2UsXG4gICAgICB0byA9IF9yZWYyLnRvLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmMi5pbm5lclJlZixcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiY29tcG9uZW50XCIsIFwicmVwbGFjZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3Rvcnk7XG4gICAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplVG9Mb2NhdGlvbihyZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbiksIGNvbnRleHQubG9jYXRpb24pO1xuICAgIHZhciBocmVmID0gbG9jYXRpb24gPyBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pIDogXCJcIjtcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBocmVmOiBocmVmLFxuICAgICAgbmF2aWdhdGU6IGZ1bmN0aW9uIG5hdmlnYXRlKCkge1xuICAgICAgICB2YXIgbG9jYXRpb24gPSByZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbik7XG4gICAgICAgIHZhciBtZXRob2QgPSByZXBsYWNlID8gaGlzdG9yeS5yZXBsYWNlIDogaGlzdG9yeS5wdXNoO1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfVxuICAgIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcyk7XG4gIH0pO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIHRvVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSk7XG4gIHZhciByZWZUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogUHJvcFR5cGVzLmFueVxuICB9KV0pO1xuICBMaW5rLmRpc3BsYXlOYW1lID0gXCJMaW5rXCI7XG4gIExpbmsucHJvcFR5cGVzID0ge1xuICAgIGlubmVyUmVmOiByZWZUeXBlLFxuICAgIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIHJlcGxhY2U6IFByb3BUeXBlcy5ib29sLFxuICAgIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogdG9UeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGZvcndhcmRSZWZTaGltJDEgPSBmdW5jdGlvbiBmb3J3YXJkUmVmU2hpbShDKSB7XG4gIHJldHVybiBDO1xufTtcblxudmFyIGZvcndhcmRSZWYkMSA9IFJlYWN0LmZvcndhcmRSZWY7XG5cbmlmICh0eXBlb2YgZm9yd2FyZFJlZiQxID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYkMSA9IGZvcndhcmRSZWZTaGltJDE7XG59XG5cbmZ1bmN0aW9uIGpvaW5DbGFzc25hbWVzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgY2xhc3NuYW1lcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBjbGFzc25hbWVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGNsYXNzbmFtZXMuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgcmV0dXJuIGk7XG4gIH0pLmpvaW4oXCIgXCIpO1xufVxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuXG5cbnZhciBOYXZMaW5rID0gZm9yd2FyZFJlZiQxKGZ1bmN0aW9uIChfcmVmLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIF9yZWYkYXJpYUN1cnJlbnQgPSBfcmVmW1wiYXJpYS1jdXJyZW50XCJdLFxuICAgICAgYXJpYUN1cnJlbnQgPSBfcmVmJGFyaWFDdXJyZW50ID09PSB2b2lkIDAgPyBcInBhZ2VcIiA6IF9yZWYkYXJpYUN1cnJlbnQsXG4gICAgICBfcmVmJGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYuYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3JlZiRhY3RpdmVDbGFzc05hbWUgPT09IHZvaWQgMCA/IFwiYWN0aXZlXCIgOiBfcmVmJGFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZVN0eWxlID0gX3JlZi5hY3RpdmVTdHlsZSxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgIGlzQWN0aXZlUHJvcCA9IF9yZWYuaXNBY3RpdmUsXG4gICAgICBsb2NhdGlvblByb3AgPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgc3RyaWN0ID0gX3JlZi5zdHJpY3QsXG4gICAgICBzdHlsZVByb3AgPSBfcmVmLnN0eWxlLFxuICAgICAgdG8gPSBfcmVmLnRvLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImFyaWEtY3VycmVudFwiLCBcImFjdGl2ZUNsYXNzTmFtZVwiLCBcImFjdGl2ZVN0eWxlXCIsIFwiY2xhc3NOYW1lXCIsIFwiZXhhY3RcIiwgXCJpc0FjdGl2ZVwiLCBcImxvY2F0aW9uXCIsIFwic3RyaWN0XCIsIFwic3R5bGVcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfX1JvdXRlckNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxOYXZMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBjdXJyZW50TG9jYXRpb24gPSBsb2NhdGlvblByb3AgfHwgY29udGV4dC5sb2NhdGlvbjtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IG5vcm1hbGl6ZVRvTG9jYXRpb24ocmVzb2x2ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbiksIGN1cnJlbnRMb2NhdGlvbik7XG4gICAgdmFyIHBhdGggPSB0b0xvY2F0aW9uLnBhdGhuYW1lOyAvLyBSZWdleCB0YWtlbiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vcGlsbGFyanMvcGF0aC10by1yZWdleHAvYmxvYi9tYXN0ZXIvaW5kZXguanMjTDIwMlxuXG4gICAgdmFyIGVzY2FwZWRQYXRoID0gcGF0aCAmJiBwYXRoLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18L1xcXFxdKS9nLCBcIlxcXFwkMVwiKTtcbiAgICB2YXIgbWF0Y2ggPSBlc2NhcGVkUGF0aCA/IG1hdGNoUGF0aChjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUsIHtcbiAgICAgIHBhdGg6IGVzY2FwZWRQYXRoLFxuICAgICAgZXhhY3Q6IGV4YWN0LFxuICAgICAgc3RyaWN0OiBzdHJpY3RcbiAgICB9KSA6IG51bGw7XG4gICAgdmFyIGlzQWN0aXZlID0gISEoaXNBY3RpdmVQcm9wID8gaXNBY3RpdmVQcm9wKG1hdGNoLCBjdXJyZW50TG9jYXRpb24pIDogbWF0Y2gpO1xuICAgIHZhciBjbGFzc05hbWUgPSBpc0FjdGl2ZSA/IGpvaW5DbGFzc25hbWVzKGNsYXNzTmFtZVByb3AsIGFjdGl2ZUNsYXNzTmFtZSkgOiBjbGFzc05hbWVQcm9wO1xuICAgIHZhciBzdHlsZSA9IGlzQWN0aXZlID8gX2V4dGVuZHMoe30sIHN0eWxlUHJvcCwge30sIGFjdGl2ZVN0eWxlKSA6IHN0eWxlUHJvcDtcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHtcbiAgICAgIFwiYXJpYS1jdXJyZW50XCI6IGlzQWN0aXZlICYmIGFyaWFDdXJyZW50IHx8IG51bGwsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIHRvOiB0b0xvY2F0aW9uXG4gICAgfSwgcmVzdCk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgICBpZiAoZm9yd2FyZFJlZlNoaW0kMSAhPT0gZm9yd2FyZFJlZiQxKSB7XG4gICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbiAgdmFyIGFyaWFDdXJyZW50VHlwZSA9IFByb3BUeXBlcy5vbmVPZihbXCJwYWdlXCIsIFwic3RlcFwiLCBcImxvY2F0aW9uXCIsIFwiZGF0ZVwiLCBcInRpbWVcIiwgXCJ0cnVlXCJdKTtcbiAgTmF2TGluay5wcm9wVHlwZXMgPSBfZXh0ZW5kcyh7fSwgTGluay5wcm9wVHlwZXMsIHtcbiAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudFR5cGUsXG4gICAgYWN0aXZlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNBY3RpdmU6IFByb3BUeXBlcy5mdW5jLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3RcbiAgfSk7XG59XG5cbmV4cG9ydCB7IEJyb3dzZXJSb3V0ZXIsIEhhc2hSb3V0ZXIsIExpbmssIE5hdkxpbmsgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXJvdXRlci1kb20uanMubWFwXG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIGRpc2FibGVkOiBmYWxzZVxufTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGRlZmF1bHQgUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBjb25maWcgZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgdGltZW91dHNTaGFwZSB9IGZyb20gJy4vdXRpbHMvUHJvcFR5cGVzJztcbmltcG9ydCBUcmFuc2l0aW9uR3JvdXBDb250ZXh0IGZyb20gJy4vVHJhbnNpdGlvbkdyb3VwQ29udGV4dCc7XG5leHBvcnQgdmFyIFVOTU9VTlRFRCA9ICd1bm1vdW50ZWQnO1xuZXhwb3J0IHZhciBFWElURUQgPSAnZXhpdGVkJztcbmV4cG9ydCB2YXIgRU5URVJJTkcgPSAnZW50ZXJpbmcnO1xuZXhwb3J0IHZhciBFTlRFUkVEID0gJ2VudGVyZWQnO1xuZXhwb3J0IHZhciBFWElUSU5HID0gJ2V4aXRpbmcnO1xuLyoqXG4gKiBUaGUgVHJhbnNpdGlvbiBjb21wb25lbnQgbGV0cyB5b3UgZGVzY3JpYmUgYSB0cmFuc2l0aW9uIGZyb20gb25lIGNvbXBvbmVudFxuICogc3RhdGUgdG8gYW5vdGhlciBfb3ZlciB0aW1lXyB3aXRoIGEgc2ltcGxlIGRlY2xhcmF0aXZlIEFQSS4gTW9zdCBjb21tb25seVxuICogaXQncyB1c2VkIHRvIGFuaW1hdGUgdGhlIG1vdW50aW5nIGFuZCB1bm1vdW50aW5nIG9mIGEgY29tcG9uZW50LCBidXQgY2FuIGFsc29cbiAqIGJlIHVzZWQgdG8gZGVzY3JpYmUgaW4tcGxhY2UgdHJhbnNpdGlvbiBzdGF0ZXMgYXMgd2VsbC5cbiAqXG4gKiAtLS1cbiAqXG4gKiAqKk5vdGUqKjogYFRyYW5zaXRpb25gIGlzIGEgcGxhdGZvcm0tYWdub3N0aWMgYmFzZSBjb21wb25lbnQuIElmIHlvdSdyZSB1c2luZ1xuICogdHJhbnNpdGlvbnMgaW4gQ1NTLCB5b3UnbGwgcHJvYmFibHkgd2FudCB0byB1c2VcbiAqIFtgQ1NTVHJhbnNpdGlvbmBdKGh0dHBzOi8vcmVhY3Rjb21tdW5pdHkub3JnL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvY3NzLXRyYW5zaXRpb24pXG4gKiBpbnN0ZWFkLiBJdCBpbmhlcml0cyBhbGwgdGhlIGZlYXR1cmVzIG9mIGBUcmFuc2l0aW9uYCwgYnV0IGNvbnRhaW5zXG4gKiBhZGRpdGlvbmFsIGZlYXR1cmVzIG5lY2Vzc2FyeSB0byBwbGF5IG5pY2Ugd2l0aCBDU1MgdHJhbnNpdGlvbnMgKGhlbmNlIHRoZVxuICogbmFtZSBvZiB0aGUgY29tcG9uZW50KS5cbiAqXG4gKiAtLS1cbiAqXG4gKiBCeSBkZWZhdWx0IHRoZSBgVHJhbnNpdGlvbmAgY29tcG9uZW50IGRvZXMgbm90IGFsdGVyIHRoZSBiZWhhdmlvciBvZiB0aGVcbiAqIGNvbXBvbmVudCBpdCByZW5kZXJzLCBpdCBvbmx5IHRyYWNrcyBcImVudGVyXCIgYW5kIFwiZXhpdFwiIHN0YXRlcyBmb3IgdGhlXG4gKiBjb21wb25lbnRzLiBJdCdzIHVwIHRvIHlvdSB0byBnaXZlIG1lYW5pbmcgYW5kIGVmZmVjdCB0byB0aG9zZSBzdGF0ZXMuIEZvclxuICogZXhhbXBsZSB3ZSBjYW4gYWRkIHN0eWxlcyB0byBhIGNvbXBvbmVudCB3aGVuIGl0IGVudGVycyBvciBleGl0czpcbiAqXG4gKiBgYGBqc3hcbiAqIGltcG9ydCB7IFRyYW5zaXRpb24gfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbiAqXG4gKiBjb25zdCBkdXJhdGlvbiA9IDMwMDtcbiAqXG4gKiBjb25zdCBkZWZhdWx0U3R5bGUgPSB7XG4gKiAgIHRyYW5zaXRpb246IGBvcGFjaXR5ICR7ZHVyYXRpb259bXMgZWFzZS1pbi1vdXRgLFxuICogICBvcGFjaXR5OiAwLFxuICogfVxuICpcbiAqIGNvbnN0IHRyYW5zaXRpb25TdHlsZXMgPSB7XG4gKiAgIGVudGVyaW5nOiB7IG9wYWNpdHk6IDEgfSxcbiAqICAgZW50ZXJlZDogIHsgb3BhY2l0eTogMSB9LFxuICogICBleGl0aW5nOiAgeyBvcGFjaXR5OiAwIH0sXG4gKiAgIGV4aXRlZDogIHsgb3BhY2l0eTogMCB9LFxuICogfTtcbiAqXG4gKiBjb25zdCBGYWRlID0gKHsgaW46IGluUHJvcCB9KSA9PiAoXG4gKiAgIDxUcmFuc2l0aW9uIGluPXtpblByb3B9IHRpbWVvdXQ9e2R1cmF0aW9ufT5cbiAqICAgICB7c3RhdGUgPT4gKFxuICogICAgICAgPGRpdiBzdHlsZT17e1xuICogICAgICAgICAuLi5kZWZhdWx0U3R5bGUsXG4gKiAgICAgICAgIC4uLnRyYW5zaXRpb25TdHlsZXNbc3RhdGVdXG4gKiAgICAgICB9fT5cbiAqICAgICAgICAgSSdtIGEgZmFkZSBUcmFuc2l0aW9uIVxuICogICAgICAgPC9kaXY+XG4gKiAgICAgKX1cbiAqICAgPC9UcmFuc2l0aW9uPlxuICogKTtcbiAqIGBgYFxuICpcbiAqIFRoZXJlIGFyZSA0IG1haW4gc3RhdGVzIGEgVHJhbnNpdGlvbiBjYW4gYmUgaW46XG4gKiAgLSBgJ2VudGVyaW5nJ2BcbiAqICAtIGAnZW50ZXJlZCdgXG4gKiAgLSBgJ2V4aXRpbmcnYFxuICogIC0gYCdleGl0ZWQnYFxuICpcbiAqIFRyYW5zaXRpb24gc3RhdGUgaXMgdG9nZ2xlZCB2aWEgdGhlIGBpbmAgcHJvcC4gV2hlbiBgdHJ1ZWAgdGhlIGNvbXBvbmVudFxuICogYmVnaW5zIHRoZSBcIkVudGVyXCIgc3RhZ2UuIER1cmluZyB0aGlzIHN0YWdlLCB0aGUgY29tcG9uZW50IHdpbGwgc2hpZnQgZnJvbVxuICogaXRzIGN1cnJlbnQgdHJhbnNpdGlvbiBzdGF0ZSwgdG8gYCdlbnRlcmluZydgIGZvciB0aGUgZHVyYXRpb24gb2YgdGhlXG4gKiB0cmFuc2l0aW9uIGFuZCB0aGVuIHRvIHRoZSBgJ2VudGVyZWQnYCBzdGFnZSBvbmNlIGl0J3MgY29tcGxldGUuIExldCdzIHRha2VcbiAqIHRoZSBmb2xsb3dpbmcgZXhhbXBsZSAod2UnbGwgdXNlIHRoZVxuICogW3VzZVN0YXRlXShodHRwczovL3JlYWN0anMub3JnL2RvY3MvaG9va3MtcmVmZXJlbmNlLmh0bWwjdXNlc3RhdGUpIGhvb2spOlxuICpcbiAqIGBgYGpzeFxuICogZnVuY3Rpb24gQXBwKCkge1xuICogICBjb25zdCBbaW5Qcm9wLCBzZXRJblByb3BdID0gdXNlU3RhdGUoZmFsc2UpO1xuICogICByZXR1cm4gKFxuICogICAgIDxkaXY+XG4gKiAgICAgICA8VHJhbnNpdGlvbiBpbj17aW5Qcm9wfSB0aW1lb3V0PXs1MDB9PlxuICogICAgICAgICB7c3RhdGUgPT4gKFxuICogICAgICAgICAgIC8vIC4uLlxuICogICAgICAgICApfVxuICogICAgICAgPC9UcmFuc2l0aW9uPlxuICogICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBzZXRJblByb3AodHJ1ZSl9PlxuICogICAgICAgICBDbGljayB0byBFbnRlclxuICogICAgICAgPC9idXR0b24+XG4gKiAgICAgPC9kaXY+XG4gKiAgICk7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBXaGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZCB0aGUgY29tcG9uZW50IHdpbGwgc2hpZnQgdG8gdGhlIGAnZW50ZXJpbmcnYCBzdGF0ZVxuICogYW5kIHN0YXkgdGhlcmUgZm9yIDUwMG1zICh0aGUgdmFsdWUgb2YgYHRpbWVvdXRgKSBiZWZvcmUgaXQgZmluYWxseSBzd2l0Y2hlc1xuICogdG8gYCdlbnRlcmVkJ2AuXG4gKlxuICogV2hlbiBgaW5gIGlzIGBmYWxzZWAgdGhlIHNhbWUgdGhpbmcgaGFwcGVucyBleGNlcHQgdGhlIHN0YXRlIG1vdmVzIGZyb21cbiAqIGAnZXhpdGluZydgIHRvIGAnZXhpdGVkJ2AuXG4gKi9cblxudmFyIFRyYW5zaXRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHJhbnNpdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbihwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSB8fCB0aGlzO1xuICAgIHZhciBwYXJlbnRHcm91cCA9IGNvbnRleHQ7IC8vIEluIHRoZSBjb250ZXh0IG9mIGEgVHJhbnNpdGlvbkdyb3VwIGFsbCBlbnRlcnMgYXJlIHJlYWxseSBhcHBlYXJzXG5cbiAgICB2YXIgYXBwZWFyID0gcGFyZW50R3JvdXAgJiYgIXBhcmVudEdyb3VwLmlzTW91bnRpbmcgPyBwcm9wcy5lbnRlciA6IHByb3BzLmFwcGVhcjtcbiAgICB2YXIgaW5pdGlhbFN0YXR1cztcbiAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByb3BzLmluKSB7XG4gICAgICBpZiAoYXBwZWFyKSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICAgIF90aGlzLmFwcGVhclN0YXR1cyA9IEVOVEVSSU5HO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVOVEVSRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9wcy51bm1vdW50T25FeGl0IHx8IHByb3BzLm1vdW50T25FbnRlcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gVU5NT1VOVEVEO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVYSVRFRDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHN0YXR1czogaW5pdGlhbFN0YXR1c1xuICAgIH07XG4gICAgX3RoaXMubmV4dENhbGxiYWNrID0gbnVsbDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBUcmFuc2l0aW9uLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhfcmVmLCBwcmV2U3RhdGUpIHtcbiAgICB2YXIgbmV4dEluID0gX3JlZi5pbjtcblxuICAgIGlmIChuZXh0SW4gJiYgcHJldlN0YXRlLnN0YXR1cyA9PT0gVU5NT1VOVEVEKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTsgLy8gZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUocHJldlByb3BzKSB7XG4gIC8vICAgbGV0IG5leHRTdGF0dXMgPSBudWxsXG4gIC8vICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAvLyAgICAgY29uc3QgeyBzdGF0dXMgfSA9IHRoaXMuc3RhdGVcbiAgLy8gICAgIGlmICh0aGlzLnByb3BzLmluKSB7XG4gIC8vICAgICAgIGlmIChzdGF0dXMgIT09IEVOVEVSSU5HICYmIHN0YXR1cyAhPT0gRU5URVJFRCkge1xuICAvLyAgICAgICAgIG5leHRTdGF0dXMgPSBFTlRFUklOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9IGVsc2Uge1xuICAvLyAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyAgIHJldHVybiB7IG5leHRTdGF0dXMgfVxuICAvLyB9XG5cblxuICB2YXIgX3Byb3RvID0gVHJhbnNpdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy51cGRhdGVTdGF0dXModHJ1ZSwgdGhpcy5hcHBlYXJTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIG5leHRTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAgICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzdGF0dXMgPT09IEVOVEVSSU5HIHx8IHN0YXR1cyA9PT0gRU5URVJFRCkge1xuICAgICAgICAgIG5leHRTdGF0dXMgPSBFWElUSU5HO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVTdGF0dXMoZmFsc2UsIG5leHRTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldFRpbWVvdXRzID0gZnVuY3Rpb24gZ2V0VGltZW91dHMoKSB7XG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzLnByb3BzLnRpbWVvdXQ7XG4gICAgdmFyIGV4aXQsIGVudGVyLCBhcHBlYXI7XG4gICAgZXhpdCA9IGVudGVyID0gYXBwZWFyID0gdGltZW91dDtcblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwgJiYgdHlwZW9mIHRpbWVvdXQgIT09ICdudW1iZXInKSB7XG4gICAgICBleGl0ID0gdGltZW91dC5leGl0O1xuICAgICAgZW50ZXIgPSB0aW1lb3V0LmVudGVyOyAvLyBUT0RPOiByZW1vdmUgZmFsbGJhY2sgZm9yIG5leHQgbWFqb3JcblxuICAgICAgYXBwZWFyID0gdGltZW91dC5hcHBlYXIgIT09IHVuZGVmaW5lZCA/IHRpbWVvdXQuYXBwZWFyIDogZW50ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGV4aXQ6IGV4aXQsXG4gICAgICBlbnRlcjogZW50ZXIsXG4gICAgICBhcHBlYXI6IGFwcGVhclxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZVN0YXR1cyA9IGZ1bmN0aW9uIHVwZGF0ZVN0YXR1cyhtb3VudGluZywgbmV4dFN0YXR1cykge1xuICAgIGlmIChtb3VudGluZyA9PT0gdm9pZCAwKSB7XG4gICAgICBtb3VudGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChuZXh0U3RhdHVzICE9PSBudWxsKSB7XG4gICAgICAvLyBuZXh0U3RhdHVzIHdpbGwgYWx3YXlzIGJlIEVOVEVSSU5HIG9yIEVYSVRJTkcuXG4gICAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuICAgICAgdmFyIG5vZGUgPSBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKTtcblxuICAgICAgaWYgKG5leHRTdGF0dXMgPT09IEVOVEVSSU5HKSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUVudGVyKG5vZGUsIG1vdW50aW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUV4aXQobm9kZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnVubW91bnRPbkV4aXQgJiYgdGhpcy5zdGF0ZS5zdGF0dXMgPT09IEVYSVRFRCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHN0YXR1czogVU5NT1VOVEVEXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnBlcmZvcm1FbnRlciA9IGZ1bmN0aW9uIHBlcmZvcm1FbnRlcihub2RlLCBtb3VudGluZykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIGVudGVyID0gdGhpcy5wcm9wcy5lbnRlcjtcbiAgICB2YXIgYXBwZWFyaW5nID0gdGhpcy5jb250ZXh0ID8gdGhpcy5jb250ZXh0LmlzTW91bnRpbmcgOiBtb3VudGluZztcbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7XG4gICAgdmFyIGVudGVyVGltZW91dCA9IGFwcGVhcmluZyA/IHRpbWVvdXRzLmFwcGVhciA6IHRpbWVvdXRzLmVudGVyOyAvLyBubyBlbnRlciBhbmltYXRpb24gc2tpcCByaWdodCB0byBFTlRFUkVEXG4gICAgLy8gaWYgd2UgYXJlIG1vdW50aW5nIGFuZCBydW5uaW5nIHRoaXMgaXQgbWVhbnMgYXBwZWFyIF9tdXN0XyBiZSBzZXRcblxuICAgIGlmICghbW91bnRpbmcgJiYgIWVudGVyIHx8IGNvbmZpZy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChub2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FbnRlcihub2RlLCBhcHBlYXJpbmcpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRU5URVJJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIucHJvcHMub25FbnRlcmluZyhub2RlLCBhcHBlYXJpbmcpO1xuXG4gICAgICBfdGhpczIub25UcmFuc2l0aW9uRW5kKG5vZGUsIGVudGVyVGltZW91dCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczIuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyZWQobm9kZSwgYXBwZWFyaW5nKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUV4aXQgPSBmdW5jdGlvbiBwZXJmb3JtRXhpdChub2RlKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgZXhpdCA9IHRoaXMucHJvcHMuZXhpdDtcbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7IC8vIG5vIGV4aXQgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRVhJVEVEXG5cbiAgICBpZiAoIWV4aXQgfHwgY29uZmlnLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FeGl0KG5vZGUpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRVhJVElOR1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRpbmcobm9kZSk7XG5cbiAgICAgIF90aGlzMy5vblRyYW5zaXRpb25FbmQobm9kZSwgdGltZW91dHMuZXhpdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jYW5jZWxOZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiBjYW5jZWxOZXh0Q2FsbGJhY2soKSB7XG4gICAgaWYgKHRoaXMubmV4dENhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgICB0aGlzLm5leHRDYWxsYmFjay5jYW5jZWwoKTtcbiAgICAgIHRoaXMubmV4dENhbGxiYWNrID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnNhZmVTZXRTdGF0ZSA9IGZ1bmN0aW9uIHNhZmVTZXRTdGF0ZShuZXh0U3RhdGUsIGNhbGxiYWNrKSB7XG4gICAgLy8gVGhpcyBzaG91bGRuJ3QgYmUgbmVjZXNzYXJ5LCBidXQgdGhlcmUgYXJlIHdlaXJkIHJhY2UgY29uZGl0aW9ucyB3aXRoXG4gICAgLy8gc2V0U3RhdGUgY2FsbGJhY2tzIGFuZCB1bm1vdW50aW5nIGluIHRlc3RpbmcsIHNvIGFsd2F5cyBtYWtlIHN1cmUgdGhhdFxuICAgIC8vIHdlIGNhbiBjYW5jZWwgYW55IHBlbmRpbmcgc2V0U3RhdGUgY2FsbGJhY2tzIGFmdGVyIHdlIHVubW91bnQuXG4gICAgY2FsbGJhY2sgPSB0aGlzLnNldE5leHRDYWxsYmFjayhjYWxsYmFjayk7XG4gICAgdGhpcy5zZXRTdGF0ZShuZXh0U3RhdGUsIGNhbGxiYWNrKTtcbiAgfTtcblxuICBfcHJvdG8uc2V0TmV4dENhbGxiYWNrID0gZnVuY3Rpb24gc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICB2YXIgYWN0aXZlID0gdHJ1ZTtcblxuICAgIHRoaXMubmV4dENhbGxiYWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoYWN0aXZlKSB7XG4gICAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBfdGhpczQubmV4dENhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgY2FsbGJhY2soZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLm5leHRDYWxsYmFjay5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMubmV4dENhbGxiYWNrO1xuICB9O1xuXG4gIF9wcm90by5vblRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiBvblRyYW5zaXRpb25FbmQobm9kZSwgdGltZW91dCwgaGFuZGxlcikge1xuICAgIHRoaXMuc2V0TmV4dENhbGxiYWNrKGhhbmRsZXIpO1xuICAgIHZhciBkb2VzTm90SGF2ZVRpbWVvdXRPckxpc3RlbmVyID0gdGltZW91dCA9PSBudWxsICYmICF0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyO1xuXG4gICAgaWYgKCFub2RlIHx8IGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIDApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKSB7XG4gICAgICB0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKG5vZGUsIHRoaXMubmV4dENhbGxiYWNrKTtcbiAgICB9XG5cbiAgICBpZiAodGltZW91dCAhPSBudWxsKSB7XG4gICAgICBzZXRUaW1lb3V0KHRoaXMubmV4dENhbGxiYWNrLCB0aW1lb3V0KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgc3RhdHVzID0gdGhpcy5zdGF0ZS5zdGF0dXM7XG5cbiAgICBpZiAoc3RhdHVzID09PSBVTk1PVU5URUQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGNoaWxkUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2hpbGRyZW5cIl0pOyAvLyBmaWx0ZXIgcHJvcHMgZm9yIFRyYW5zdGl0aW9uXG5cblxuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmluO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm1vdW50T25FbnRlcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy51bm1vdW50T25FeGl0O1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmFwcGVhcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5lbnRlcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5leGl0O1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLnRpbWVvdXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuYWRkRW5kTGlzdGVuZXI7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FbnRlcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkVudGVyaW5nO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRW50ZXJlZDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkV4aXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FeGl0aW5nO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRXhpdGVkO1xuXG4gICAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gYWxsb3dzIGZvciBuZXN0ZWQgVHJhbnNpdGlvbnNcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Hcm91cENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IG51bGxcbiAgICAgIH0sIGNoaWxkcmVuKHN0YXR1cywgY2hpbGRQcm9wcykpO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pO1xuICAgIHJldHVybiAoLy8gYWxsb3dzIGZvciBuZXN0ZWQgVHJhbnNpdGlvbnNcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogbnVsbFxuICAgICAgfSwgUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCBjaGlsZFByb3BzKSlcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uLmNvbnRleHRUeXBlID0gVHJhbnNpdGlvbkdyb3VwQ29udGV4dDtcblRyYW5zaXRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQSBgZnVuY3Rpb25gIGNoaWxkIGNhbiBiZSB1c2VkIGluc3RlYWQgb2YgYSBSZWFjdCBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uIGlzXG4gICAqIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IHRyYW5zaXRpb24gc3RhdHVzIChgJ2VudGVyaW5nJ2AsIGAnZW50ZXJlZCdgLFxuICAgKiBgJ2V4aXRpbmcnYCwgYCdleGl0ZWQnYCksIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGFwcGx5IGNvbnRleHRcbiAgICogc3BlY2lmaWMgcHJvcHMgdG8gYSBjb21wb25lbnQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiA8VHJhbnNpdGlvbiBpbj17dGhpcy5zdGF0ZS5pbn0gdGltZW91dD17MTUwfT5cbiAgICogICB7c3RhdGUgPT4gKFxuICAgKiAgICAgPE15Q29tcG9uZW50IGNsYXNzTmFtZT17YGZhZGUgZmFkZS0ke3N0YXRlfWB9IC8+XG4gICAqICAgKX1cbiAgICogPC9UcmFuc2l0aW9uPlxuICAgKiBgYGBcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLCBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXSkuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogU2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBzdGF0ZXNcbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGlzIG1vdW50ZWQgaW1tZWRpYXRlbHkgYWxvbmcgd2l0aFxuICAgKiB0aGUgcGFyZW50IGBUcmFuc2l0aW9uYCBjb21wb25lbnQuIElmIHlvdSB3YW50IHRvIFwibGF6eSBtb3VudFwiIHRoZSBjb21wb25lbnQgb24gdGhlXG4gICAqIGZpcnN0IGBpbj17dHJ1ZX1gIHlvdSBjYW4gc2V0IGBtb3VudE9uRW50ZXJgLiBBZnRlciB0aGUgZmlyc3QgZW50ZXIgdHJhbnNpdGlvbiB0aGUgY29tcG9uZW50IHdpbGwgc3RheVxuICAgKiBtb3VudGVkLCBldmVuIG9uIFwiZXhpdGVkXCIsIHVubGVzcyB5b3UgYWxzbyBzcGVjaWZ5IGB1bm1vdW50T25FeGl0YC5cbiAgICovXG4gIG1vdW50T25FbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBzdGF5cyBtb3VudGVkIGFmdGVyIGl0IHJlYWNoZXMgdGhlIGAnZXhpdGVkJ2Agc3RhdGUuXG4gICAqIFNldCBgdW5tb3VudE9uRXhpdGAgaWYgeW91J2QgcHJlZmVyIHRvIHVubW91bnQgdGhlIGNvbXBvbmVudCBhZnRlciBpdCBmaW5pc2hlcyBleGl0aW5nLlxuICAgKi9cbiAgdW5tb3VudE9uRXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5vcm1hbGx5IGEgY29tcG9uZW50IGlzIG5vdCB0cmFuc2l0aW9uZWQgaWYgaXQgaXMgc2hvd24gd2hlbiB0aGVcbiAgICogYDxUcmFuc2l0aW9uPmAgY29tcG9uZW50IG1vdW50cy4gSWYgeW91IHdhbnQgdG8gdHJhbnNpdGlvbiBvbiB0aGUgZmlyc3RcbiAgICogbW91bnQgc2V0IGBhcHBlYXJgIHRvIGB0cnVlYCwgYW5kIHRoZSBjb21wb25lbnQgd2lsbCB0cmFuc2l0aW9uIGluIGFzIHNvb25cbiAgICogYXMgdGhlIGA8VHJhbnNpdGlvbj5gIG1vdW50cy5cbiAgICpcbiAgICogPiAqKk5vdGUqKjogdGhlcmUgYXJlIG5vIHNwZWNpYWwgYXBwZWFyIHN0YXRlcyBsaWtlIGBhcHBlYXJpbmdgL2BhcHBlYXJlZGAsIHRoaXMgcHJvcFxuICAgKiA+IG9ubHkgYWRkcyBhbiBhZGRpdGlvbmFsIGVudGVyIHRyYW5zaXRpb24uIEhvd2V2ZXIsIGluIHRoZVxuICAgKiA+IGA8Q1NTVHJhbnNpdGlvbj5gIGNvbXBvbmVudCB0aGF0IGZpcnN0IGVudGVyIHRyYW5zaXRpb24gZG9lcyByZXN1bHQgaW5cbiAgICogPiBhZGRpdGlvbmFsIGAuYXBwZWFyLSpgIGNsYXNzZXMsIHRoYXQgd2F5IHlvdSBjYW4gY2hvb3NlIHRvIHN0eWxlIGl0XG4gICAqID4gZGlmZmVyZW50bHkuXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBlbnRlciB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZXhpdCB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogUmVxdWlyZWQgdW5sZXNzIGBhZGRFbmRMaXN0ZW5lcmAgaXMgcHJvdmlkZWQuXG4gICAqXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnM6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXs1MDB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBvciBpbmRpdmlkdWFsbHk6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXt7XG4gICAqICBhcHBlYXI6IDUwMCxcbiAgICogIGVudGVyOiAzMDAsXG4gICAqICBleGl0OiA1MDAsXG4gICAqIH19XG4gICAqIGBgYFxuICAgKlxuICAgKiAtIGBhcHBlYXJgIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSBvZiBgZW50ZXJgXG4gICAqIC0gYGVudGVyYCBkZWZhdWx0cyB0byBgMGBcbiAgICogLSBgZXhpdGAgZGVmYXVsdHMgdG8gYDBgXG4gICAqXG4gICAqIEB0eXBlIHtudW1iZXIgfCB7IGVudGVyPzogbnVtYmVyLCBleGl0PzogbnVtYmVyLCBhcHBlYXI/OiBudW1iZXIgfX1cbiAgICovXG4gIHRpbWVvdXQ6IGZ1bmN0aW9uIHRpbWVvdXQocHJvcHMpIHtcbiAgICB2YXIgcHQgPSB0aW1lb3V0c1NoYXBlO1xuICAgIGlmICghcHJvcHMuYWRkRW5kTGlzdGVuZXIpIHB0ID0gcHQuaXNSZXF1aXJlZDtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBwdC5hcHBseSh2b2lkIDAsIFtwcm9wc10uY29uY2F0KGFyZ3MpKTtcbiAgfSxcblxuICAvKipcbiAgICogQWRkIGEgY3VzdG9tIHRyYW5zaXRpb24gZW5kIHRyaWdnZXIuIENhbGxlZCB3aXRoIHRoZSB0cmFuc2l0aW9uaW5nXG4gICAqIERPTSBub2RlIGFuZCBhIGBkb25lYCBjYWxsYmFjay4gQWxsb3dzIGZvciBtb3JlIGZpbmUgZ3JhaW5lZCB0cmFuc2l0aW9uIGVuZFxuICAgKiBsb2dpYy4gKipOb3RlOioqIFRpbWVvdXRzIGFyZSBzdGlsbCB1c2VkIGFzIGEgZmFsbGJhY2sgaWYgcHJvdmlkZWQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiBhZGRFbmRMaXN0ZW5lcj17KG5vZGUsIGRvbmUpID0+IHtcbiAgICogICAvLyB1c2UgdGhlIGNzcyB0cmFuc2l0aW9uZW5kIGV2ZW50IHRvIG1hcmsgdGhlIGZpbmlzaCBvZiBhIHRyYW5zaXRpb25cbiAgICogICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBkb25lLCBmYWxzZSk7XG4gICAqIH19XG4gICAqIGBgYFxuICAgKi9cbiAgYWRkRW5kTGlzdGVuZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIFwiZW50ZXJpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbClcbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJlbnRlcmVkXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKSAtPiB2b2lkXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIFwiZXhpdGluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZXhpdGluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZXhpdGVkXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMgLy8gTmFtZSB0aGUgZnVuY3Rpb24gc28gaXQgaXMgY2xlYXJlciBpbiB0aGUgZG9jdW1lbnRhdGlvblxuXG59IDoge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5UcmFuc2l0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgaW46IGZhbHNlLFxuICBtb3VudE9uRW50ZXI6IGZhbHNlLFxuICB1bm1vdW50T25FeGl0OiBmYWxzZSxcbiAgYXBwZWFyOiBmYWxzZSxcbiAgZW50ZXI6IHRydWUsXG4gIGV4aXQ6IHRydWUsXG4gIG9uRW50ZXI6IG5vb3AsXG4gIG9uRW50ZXJpbmc6IG5vb3AsXG4gIG9uRW50ZXJlZDogbm9vcCxcbiAgb25FeGl0OiBub29wLFxuICBvbkV4aXRpbmc6IG5vb3AsXG4gIG9uRXhpdGVkOiBub29wXG59O1xuVHJhbnNpdGlvbi5VTk1PVU5URUQgPSAwO1xuVHJhbnNpdGlvbi5FWElURUQgPSAxO1xuVHJhbnNpdGlvbi5FTlRFUklORyA9IDI7XG5UcmFuc2l0aW9uLkVOVEVSRUQgPSAzO1xuVHJhbnNpdGlvbi5FWElUSU5HID0gNDtcbmV4cG9ydCBkZWZhdWx0IFRyYW5zaXRpb247IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn0iLCJpbXBvcnQgeyBDaGlsZHJlbiwgY2xvbmVFbGVtZW50LCBpc1ZhbGlkRWxlbWVudCB9IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogR2l2ZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gLCByZXR1cm4gYW4gb2JqZWN0IG1hcHBpbmcga2V5IHRvIGNoaWxkLlxuICpcbiAqIEBwYXJhbSB7Kn0gY2hpbGRyZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gXG4gKiBAcmV0dXJuIHtvYmplY3R9IE1hcHBpbmcgb2Yga2V5IHRvIGNoaWxkXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENoaWxkTWFwcGluZyhjaGlsZHJlbiwgbWFwRm4pIHtcbiAgdmFyIG1hcHBlciA9IGZ1bmN0aW9uIG1hcHBlcihjaGlsZCkge1xuICAgIHJldHVybiBtYXBGbiAmJiBpc1ZhbGlkRWxlbWVudChjaGlsZCkgPyBtYXBGbihjaGlsZCkgOiBjaGlsZDtcbiAgfTtcblxuICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKGNoaWxkcmVuKSBDaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGM7XG4gIH0pLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgLy8gcnVuIHRoZSBtYXAgZnVuY3Rpb24gaGVyZSBpbnN0ZWFkIHNvIHRoYXQgdGhlIGtleSBpcyB0aGUgY29tcHV0ZWQgb25lXG4gICAgcmVzdWx0W2NoaWxkLmtleV0gPSBtYXBwZXIoY2hpbGQpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogV2hlbiB5b3UncmUgYWRkaW5nIG9yIHJlbW92aW5nIGNoaWxkcmVuIHNvbWUgbWF5IGJlIGFkZGVkIG9yIHJlbW92ZWQgaW4gdGhlXG4gKiBzYW1lIHJlbmRlciBwYXNzLiBXZSB3YW50IHRvIHNob3cgKmJvdGgqIHNpbmNlIHdlIHdhbnQgdG8gc2ltdWx0YW5lb3VzbHlcbiAqIGFuaW1hdGUgZWxlbWVudHMgaW4gYW5kIG91dC4gVGhpcyBmdW5jdGlvbiB0YWtlcyBhIHByZXZpb3VzIHNldCBvZiBrZXlzXG4gKiBhbmQgYSBuZXcgc2V0IG9mIGtleXMgYW5kIG1lcmdlcyB0aGVtIHdpdGggaXRzIGJlc3QgZ3Vlc3Mgb2YgdGhlIGNvcnJlY3RcbiAqIG9yZGVyaW5nLiBJbiB0aGUgZnV0dXJlIHdlIG1heSBleHBvc2Ugc29tZSBvZiB0aGUgdXRpbGl0aWVzIGluXG4gKiBSZWFjdE11bHRpQ2hpbGQgdG8gbWFrZSB0aGlzIGVhc3ksIGJ1dCBmb3Igbm93IFJlYWN0IGl0c2VsZiBkb2VzIG5vdFxuICogZGlyZWN0bHkgaGF2ZSB0aGlzIGNvbmNlcHQgb2YgdGhlIHVuaW9uIG9mIHByZXZDaGlsZHJlbiBhbmQgbmV4dENoaWxkcmVuXG4gKiBzbyB3ZSBpbXBsZW1lbnQgaXQgaGVyZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcHJldiBwcmV2IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHBhcmFtIHtvYmplY3R9IG5leHQgbmV4dCBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAqIEByZXR1cm4ge29iamVjdH0gYSBrZXkgc2V0IHRoYXQgY29udGFpbnMgYWxsIGtleXMgaW4gYHByZXZgIGFuZCBhbGwga2V5c1xuICogaW4gYG5leHRgIGluIGEgcmVhc29uYWJsZSBvcmRlci5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VDaGlsZE1hcHBpbmdzKHByZXYsIG5leHQpIHtcbiAgcHJldiA9IHByZXYgfHwge307XG4gIG5leHQgPSBuZXh0IHx8IHt9O1xuXG4gIGZ1bmN0aW9uIGdldFZhbHVlRm9yS2V5KGtleSkge1xuICAgIHJldHVybiBrZXkgaW4gbmV4dCA/IG5leHRba2V5XSA6IHByZXZba2V5XTtcbiAgfSAvLyBGb3IgZWFjaCBrZXkgb2YgYG5leHRgLCB0aGUgbGlzdCBvZiBrZXlzIHRvIGluc2VydCBiZWZvcmUgdGhhdCBrZXkgaW5cbiAgLy8gdGhlIGNvbWJpbmVkIGxpc3RcblxuXG4gIHZhciBuZXh0S2V5c1BlbmRpbmcgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgcGVuZGluZ0tleXMgPSBbXTtcblxuICBmb3IgKHZhciBwcmV2S2V5IGluIHByZXYpIHtcbiAgICBpZiAocHJldktleSBpbiBuZXh0KSB7XG4gICAgICBpZiAocGVuZGluZ0tleXMubGVuZ3RoKSB7XG4gICAgICAgIG5leHRLZXlzUGVuZGluZ1twcmV2S2V5XSA9IHBlbmRpbmdLZXlzO1xuICAgICAgICBwZW5kaW5nS2V5cyA9IFtdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZW5kaW5nS2V5cy5wdXNoKHByZXZLZXkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpO1xuICB2YXIgY2hpbGRNYXBwaW5nID0ge307XG5cbiAgZm9yICh2YXIgbmV4dEtleSBpbiBuZXh0KSB7XG4gICAgaWYgKG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGVuZGluZ05leHRLZXkgPSBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV07XG4gICAgICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ05leHRLZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5XSA9IGdldFZhbHVlRm9yS2V5KG5leHRLZXkpO1xuICB9IC8vIEZpbmFsbHksIGFkZCB0aGUga2V5cyB3aGljaCBkaWRuJ3QgYXBwZWFyIGJlZm9yZSBhbnkga2V5IGluIGBuZXh0YFxuXG5cbiAgZm9yIChpID0gMDsgaSA8IHBlbmRpbmdLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2hpbGRNYXBwaW5nW3BlbmRpbmdLZXlzW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdLZXlzW2ldKTtcbiAgfVxuXG4gIHJldHVybiBjaGlsZE1hcHBpbmc7XG59XG5cbmZ1bmN0aW9uIGdldFByb3AoY2hpbGQsIHByb3AsIHByb3BzKSB7XG4gIHJldHVybiBwcm9wc1twcm9wXSAhPSBudWxsID8gcHJvcHNbcHJvcF0gOiBjaGlsZC5wcm9wc1twcm9wXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEluaXRpYWxDaGlsZE1hcHBpbmcocHJvcHMsIG9uRXhpdGVkKSB7XG4gIHJldHVybiBnZXRDaGlsZE1hcHBpbmcocHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJldHVybiBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgIGluOiB0cnVlLFxuICAgICAgYXBwZWFyOiBnZXRQcm9wKGNoaWxkLCAnYXBwZWFyJywgcHJvcHMpLFxuICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIHByb3BzKSxcbiAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgcHJvcHMpXG4gICAgfSk7XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE5leHRDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBwcmV2Q2hpbGRNYXBwaW5nLCBvbkV4aXRlZCkge1xuICB2YXIgbmV4dENoaWxkTWFwcGluZyA9IGdldENoaWxkTWFwcGluZyhuZXh0UHJvcHMuY2hpbGRyZW4pO1xuICB2YXIgY2hpbGRyZW4gPSBtZXJnZUNoaWxkTWFwcGluZ3MocHJldkNoaWxkTWFwcGluZywgbmV4dENoaWxkTWFwcGluZyk7XG4gIE9iamVjdC5rZXlzKGNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltrZXldO1xuICAgIGlmICghaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSByZXR1cm47XG4gICAgdmFyIGhhc1ByZXYgPSBrZXkgaW4gcHJldkNoaWxkTWFwcGluZztcbiAgICB2YXIgaGFzTmV4dCA9IGtleSBpbiBuZXh0Q2hpbGRNYXBwaW5nO1xuICAgIHZhciBwcmV2Q2hpbGQgPSBwcmV2Q2hpbGRNYXBwaW5nW2tleV07XG4gICAgdmFyIGlzTGVhdmluZyA9IGlzVmFsaWRFbGVtZW50KHByZXZDaGlsZCkgJiYgIXByZXZDaGlsZC5wcm9wcy5pbjsgLy8gaXRlbSBpcyBuZXcgKGVudGVyaW5nKVxuXG4gICAgaWYgKGhhc05leHQgJiYgKCFoYXNQcmV2IHx8IGlzTGVhdmluZykpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdlbnRlcmluZycsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgICBpbjogdHJ1ZSxcbiAgICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBuZXh0UHJvcHMpLFxuICAgICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgbmV4dFByb3BzKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghaGFzTmV4dCAmJiBoYXNQcmV2ICYmICFpc0xlYXZpbmcpIHtcbiAgICAgIC8vIGl0ZW0gaXMgb2xkIChleGl0aW5nKVxuICAgICAgLy8gY29uc29sZS5sb2coJ2xlYXZpbmcnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIGluOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChoYXNOZXh0ICYmIGhhc1ByZXYgJiYgaXNWYWxpZEVsZW1lbnQocHJldkNoaWxkKSkge1xuICAgICAgLy8gaXRlbSBoYXNuJ3QgY2hhbmdlZCB0cmFuc2l0aW9uIHN0YXRlc1xuICAgICAgLy8gY29weSBvdmVyIHRoZSBsYXN0IHRyYW5zaXRpb24gcHJvcHM7XG4gICAgICAvLyBjb25zb2xlLmxvZygndW5jaGFuZ2VkJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9IGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICAgIGluOiBwcmV2Q2hpbGQucHJvcHMuaW4sXG4gICAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgbmV4dFByb3BzKSxcbiAgICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIG5leHRQcm9wcylcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjaGlsZHJlbjtcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUcmFuc2l0aW9uR3JvdXBDb250ZXh0IGZyb20gJy4vVHJhbnNpdGlvbkdyb3VwQ29udGV4dCc7XG5pbXBvcnQgeyBnZXRDaGlsZE1hcHBpbmcsIGdldEluaXRpYWxDaGlsZE1hcHBpbmcsIGdldE5leHRDaGlsZE1hcHBpbmcgfSBmcm9tICcuL3V0aWxzL0NoaWxkTWFwcGluZyc7XG5cbnZhciB2YWx1ZXMgPSBPYmplY3QudmFsdWVzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIG9ialtrXTtcbiAgfSk7XG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnQ6ICdkaXYnLFxuICBjaGlsZEZhY3Rvcnk6IGZ1bmN0aW9uIGNoaWxkRmFjdG9yeShjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZDtcbiAgfVxuICAvKipcbiAgICogVGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAgY29tcG9uZW50IG1hbmFnZXMgYSBzZXQgb2YgdHJhbnNpdGlvbiBjb21wb25lbnRzXG4gICAqIChgPFRyYW5zaXRpb24+YCBhbmQgYDxDU1NUcmFuc2l0aW9uPmApIGluIGEgbGlzdC4gTGlrZSB3aXRoIHRoZSB0cmFuc2l0aW9uXG4gICAqIGNvbXBvbmVudHMsIGA8VHJhbnNpdGlvbkdyb3VwPmAgaXMgYSBzdGF0ZSBtYWNoaW5lIGZvciBtYW5hZ2luZyB0aGUgbW91bnRpbmdcbiAgICogYW5kIHVubW91bnRpbmcgb2YgY29tcG9uZW50cyBvdmVyIHRpbWUuXG4gICAqXG4gICAqIENvbnNpZGVyIHRoZSBleGFtcGxlIGJlbG93LiBBcyBpdGVtcyBhcmUgcmVtb3ZlZCBvciBhZGRlZCB0byB0aGUgVG9kb0xpc3QgdGhlXG4gICAqIGBpbmAgcHJvcCBpcyB0b2dnbGVkIGF1dG9tYXRpY2FsbHkgYnkgdGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBgPFRyYW5zaXRpb25Hcm91cD5gICBkb2VzIG5vdCBkZWZpbmUgYW55IGFuaW1hdGlvbiBiZWhhdmlvciFcbiAgICogRXhhY3RseSBfaG93XyBhIGxpc3QgaXRlbSBhbmltYXRlcyBpcyB1cCB0byB0aGUgaW5kaXZpZHVhbCB0cmFuc2l0aW9uXG4gICAqIGNvbXBvbmVudC4gVGhpcyBtZWFucyB5b3UgY2FuIG1peCBhbmQgbWF0Y2ggYW5pbWF0aW9ucyBhY3Jvc3MgZGlmZmVyZW50IGxpc3RcbiAgICogaXRlbXMuXG4gICAqL1xuXG59O1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb25Hcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbkdyb3VwKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG5cbiAgICB2YXIgaGFuZGxlRXhpdGVkID0gX3RoaXMuaGFuZGxlRXhpdGVkLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpOyAvLyBJbml0aWFsIGNoaWxkcmVuIHNob3VsZCBhbGwgYmUgZW50ZXJpbmcsIGRlcGVuZGVudCBvbiBhcHBlYXJcblxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBjb250ZXh0VmFsdWU6IHtcbiAgICAgICAgaXNNb3VudGluZzogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGhhbmRsZUV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgICAgZmlyc3RSZW5kZXI6IHRydWVcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUcmFuc2l0aW9uR3JvdXAucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMubW91bnRlZCA9IHRydWU7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjb250ZXh0VmFsdWU6IHtcbiAgICAgICAgaXNNb3VudGluZzogZmFsc2VcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLm1vdW50ZWQgPSBmYWxzZTtcbiAgfTtcblxuICBUcmFuc2l0aW9uR3JvdXAuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgX3JlZikge1xuICAgIHZhciBwcmV2Q2hpbGRNYXBwaW5nID0gX3JlZi5jaGlsZHJlbixcbiAgICAgICAgaGFuZGxlRXhpdGVkID0gX3JlZi5oYW5kbGVFeGl0ZWQsXG4gICAgICAgIGZpcnN0UmVuZGVyID0gX3JlZi5maXJzdFJlbmRlcjtcbiAgICByZXR1cm4ge1xuICAgICAgY2hpbGRyZW46IGZpcnN0UmVuZGVyID8gZ2V0SW5pdGlhbENoaWxkTWFwcGluZyhuZXh0UHJvcHMsIGhhbmRsZUV4aXRlZCkgOiBnZXROZXh0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcywgcHJldkNoaWxkTWFwcGluZywgaGFuZGxlRXhpdGVkKSxcbiAgICAgIGZpcnN0UmVuZGVyOiBmYWxzZVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZUV4aXRlZCA9IGZ1bmN0aW9uIGhhbmRsZUV4aXRlZChjaGlsZCwgbm9kZSkge1xuICAgIHZhciBjdXJyZW50Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nKHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIGlmIChjaGlsZC5rZXkgaW4gY3VycmVudENoaWxkTWFwcGluZykgcmV0dXJuO1xuXG4gICAgaWYgKGNoaWxkLnByb3BzLm9uRXhpdGVkKSB7XG4gICAgICBjaGlsZC5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5tb3VudGVkKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBfZXh0ZW5kcyh7fSwgc3RhdGUuY2hpbGRyZW4pO1xuXG4gICAgICAgIGRlbGV0ZSBjaGlsZHJlbltjaGlsZC5rZXldO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICBjaGlsZEZhY3RvcnkgPSBfdGhpcyRwcm9wcy5jaGlsZEZhY3RvcnksXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNvbXBvbmVudFwiLCBcImNoaWxkRmFjdG9yeVwiXSk7XG5cbiAgICB2YXIgY29udGV4dFZhbHVlID0gdGhpcy5zdGF0ZS5jb250ZXh0VmFsdWU7XG4gICAgdmFyIGNoaWxkcmVuID0gdmFsdWVzKHRoaXMuc3RhdGUuY2hpbGRyZW4pLm1hcChjaGlsZEZhY3RvcnkpO1xuICAgIGRlbGV0ZSBwcm9wcy5hcHBlYXI7XG4gICAgZGVsZXRlIHByb3BzLmVudGVyO1xuICAgIGRlbGV0ZSBwcm9wcy5leGl0O1xuXG4gICAgaWYgKENvbXBvbmVudCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gICAgICB9LCBjaGlsZHJlbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBwcm9wcywgY2hpbGRyZW4pKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbkdyb3VwO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uR3JvdXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogYDxUcmFuc2l0aW9uR3JvdXA+YCByZW5kZXJzIGEgYDxkaXY+YCBieSBkZWZhdWx0LiBZb3UgY2FuIGNoYW5nZSB0aGlzXG4gICAqIGJlaGF2aW9yIGJ5IHByb3ZpZGluZyBhIGBjb21wb25lbnRgIHByb3AuXG4gICAqIElmIHlvdSB1c2UgUmVhY3QgdjE2KyBhbmQgd291bGQgbGlrZSB0byBhdm9pZCBhIHdyYXBwaW5nIGA8ZGl2PmAgZWxlbWVudFxuICAgKiB5b3UgY2FuIHBhc3MgaW4gYGNvbXBvbmVudD17bnVsbH1gLiBUaGlzIGlzIHVzZWZ1bCBpZiB0aGUgd3JhcHBpbmcgZGl2XG4gICAqIGJvcmtzIHlvdXIgY3NzIHN0eWxlcy5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogQSBzZXQgb2YgYDxUcmFuc2l0aW9uPmAgY29tcG9uZW50cywgdGhhdCBhcmUgdG9nZ2xlZCBgaW5gIGFuZCBvdXQgYXMgdGhleVxuICAgKiBsZWF2ZS4gdGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAgd2lsbCBpbmplY3Qgc3BlY2lmaWMgdHJhbnNpdGlvbiBwcm9wcywgc29cbiAgICogcmVtZW1iZXIgdG8gc3ByZWFkIHRoZW0gdGhyb3VnaCBpZiB5b3UgYXJlIHdyYXBwaW5nIHRoZSBgPFRyYW5zaXRpb24+YCBhc1xuICAgKiB3aXRoIG91ciBgPEZhZGU+YCBleGFtcGxlLlxuICAgKlxuICAgKiBXaGlsZSB0aGlzIGNvbXBvbmVudCBpcyBtZWFudCBmb3IgbXVsdGlwbGUgYFRyYW5zaXRpb25gIG9yIGBDU1NUcmFuc2l0aW9uYFxuICAgKiBjaGlsZHJlbiwgc29tZXRpbWVzIHlvdSBtYXkgd2FudCB0byBoYXZlIGEgc2luZ2xlIHRyYW5zaXRpb24gY2hpbGQgd2l0aFxuICAgKiBjb250ZW50IHRoYXQgeW91IHdhbnQgdG8gYmUgdHJhbnNpdGlvbmVkIG91dCBhbmQgaW4gd2hlbiB5b3UgY2hhbmdlIGl0XG4gICAqIChlLmcuIHJvdXRlcywgaW1hZ2VzIGV0Yy4pIEluIHRoYXQgY2FzZSB5b3UgY2FuIGNoYW5nZSB0aGUgYGtleWAgcHJvcCBvZlxuICAgKiB0aGUgdHJhbnNpdGlvbiBjaGlsZCBhcyB5b3UgY2hhbmdlIGl0cyBjb250ZW50LCB0aGlzIHdpbGwgY2F1c2VcbiAgICogYFRyYW5zaXRpb25Hcm91cGAgdG8gdHJhbnNpdGlvbiB0aGUgY2hpbGQgb3V0IGFuZCBiYWNrIGluLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGFwcGVhciBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGVudGVyIGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBleGl0IGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBZb3UgbWF5IG5lZWQgdG8gYXBwbHkgcmVhY3RpdmUgdXBkYXRlcyB0byBhIGNoaWxkIGFzIGl0IGlzIGV4aXRpbmcuXG4gICAqIFRoaXMgaXMgZ2VuZXJhbGx5IGRvbmUgYnkgdXNpbmcgYGNsb25lRWxlbWVudGAgaG93ZXZlciBpbiB0aGUgY2FzZSBvZiBhbiBleGl0aW5nXG4gICAqIGNoaWxkIHRoZSBlbGVtZW50IGhhcyBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBhbmQgbm90IGFjY2Vzc2libGUgdG8gdGhlIGNvbnN1bWVyLlxuICAgKlxuICAgKiBJZiB5b3UgZG8gbmVlZCB0byB1cGRhdGUgYSBjaGlsZCBhcyBpdCBsZWF2ZXMgeW91IGNhbiBwcm92aWRlIGEgYGNoaWxkRmFjdG9yeWBcbiAgICogdG8gd3JhcCBldmVyeSBjaGlsZCwgZXZlbiB0aGUgb25lcyB0aGF0IGFyZSBsZWF2aW5nLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihjaGlsZDogUmVhY3RFbGVtZW50KSAtPiBSZWFjdEVsZW1lbnRcbiAgICovXG4gIGNoaWxkRmFjdG9yeTogUHJvcFR5cGVzLmZ1bmNcbn0gOiB7fTtcblRyYW5zaXRpb25Hcm91cC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBUcmFuc2l0aW9uR3JvdXA7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgaXNWYWxpZEVsZW1lbnQsIGNsb25lRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uLCBUcmFuc2l0aW9uR3JvdXAgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ3JlYWN0LWRvbSc7XG5cbnZhciBQT1NJVElPTiA9IHtcbiAgVE9QX0xFRlQ6ICd0b3AtbGVmdCcsXG4gIFRPUF9SSUdIVDogJ3RvcC1yaWdodCcsXG4gIFRPUF9DRU5URVI6ICd0b3AtY2VudGVyJyxcbiAgQk9UVE9NX0xFRlQ6ICdib3R0b20tbGVmdCcsXG4gIEJPVFRPTV9SSUdIVDogJ2JvdHRvbS1yaWdodCcsXG4gIEJPVFRPTV9DRU5URVI6ICdib3R0b20tY2VudGVyJ1xufTtcbnZhciBUWVBFID0ge1xuICBJTkZPOiAnaW5mbycsXG4gIFNVQ0NFU1M6ICdzdWNjZXNzJyxcbiAgV0FSTklORzogJ3dhcm5pbmcnLFxuICBFUlJPUjogJ2Vycm9yJyxcbiAgREVGQVVMVDogJ2RlZmF1bHQnXG59O1xudmFyIEFDVElPTiA9IHtcbiAgU0hPVzogMCxcbiAgQ0xFQVI6IDEsXG4gIERJRF9NT1VOVDogMixcbiAgV0lMTF9VTk1PVU5UOiAzLFxuICBPTl9DSEFOR0U6IDRcbn07XG52YXIgTk9PUCA9IGZ1bmN0aW9uIE5PT1AoKSB7fTtcbnZhciBSVF9OQU1FU1BBQ0UgPSAnVG9hc3RpZnknO1xuXG5mdW5jdGlvbiBpc1ZhbGlkRGVsYXkodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsKSAmJiB2YWwgPiAwO1xufVxuZnVuY3Rpb24gb2JqZWN0VmFsdWVzKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfSk7XG59XG52YXIgY2FuVXNlRG9tID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuZnVuY3Rpb24gd2l0aFJlcXVpcmVkKGZuKSB7XG4gIGZuLmlzUmVxdWlyZWQgPSBmdW5jdGlvbiAocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gICAgdmFyIHByb3AgPSBwcm9wc1twcm9wTmFtZV07XG5cbiAgICBpZiAodHlwZW9mIHByb3AgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFwiVGhlIHByb3AgXCIgKyBwcm9wTmFtZSArIFwiIGlzIG1hcmtlZCBhcyByZXF1aXJlZCBpbiBcXG4gICAgICBcIiArIGNvbXBvbmVudE5hbWUgKyBcIiwgYnV0IGl0cyB2YWx1ZSBpcyB1bmRlZmluZWQuXCIpO1xuICAgIH1cblxuICAgIGZuKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSk7XG4gIH07XG5cbiAgcmV0dXJuIGZuO1xufVxuXG52YXIgZmFsc2VPckRlbGF5ID0gd2l0aFJlcXVpcmVkKGZ1bmN0aW9uIChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcbiAgdmFyIHByb3AgPSBwcm9wc1twcm9wTmFtZV07XG5cbiAgaWYgKHByb3AgIT09IGZhbHNlICYmICFpc1ZhbGlkRGVsYXkocHJvcCkpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKGNvbXBvbmVudE5hbWUgKyBcIiBleHBlY3QgXCIgKyBwcm9wTmFtZSArIFwiIFxcbiAgICAgIHRvIGJlIGEgdmFsaWQgTnVtYmVyID4gMCBvciBlcXVhbCB0byBmYWxzZS4gXCIgKyBwcm9wICsgXCIgZ2l2ZW4uXCIpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59KTtcblxudmFyIGV2ZW50TWFuYWdlciA9IHtcbiAgbGlzdDogbmV3IE1hcCgpLFxuICBvbjogZnVuY3Rpb24gb24oZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5saXN0LmhhcyhldmVudCkgfHwgdGhpcy5saXN0LnNldChldmVudCwgW10pO1xuICAgIHRoaXMubGlzdC5nZXQoZXZlbnQpLnB1c2goY2FsbGJhY2spO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBvZmY6IGZ1bmN0aW9uIG9mZihldmVudCkge1xuICAgIHRoaXMubGlzdC5kZWxldGUoZXZlbnQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBFbnF1ZXVlIHRoZSBldmVudCBhdCB0aGUgZW5kIG9mIHRoZSBjYWxsIHN0YWNrXG4gICAqIERvaW5nIHNvIGxldCB0aGUgdXNlciBjYWxsIHRvYXN0IGFzIGZvbGxvdzpcbiAgICogdG9hc3QoJzEnKVxuICAgKiB0b2FzdCgnMicpXG4gICAqIHRvYXN0KCczJylcbiAgICogV2l0aG91dCBzZXRUaW1lbW91dCB0aGUgY29kZSBhYm92ZSB3aWxsIG5vdCB3b3JrXG4gICAqL1xuICBlbWl0OiBmdW5jdGlvbiBlbWl0KGV2ZW50KSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdGhpcy5saXN0LmhhcyhldmVudCkgJiYgdGhpcy5saXN0LmdldChldmVudCkuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2FsbGJhY2suYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICAgIH0sIDApO1xuICAgIH0pO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjc3NUcmFuc2l0aW9uKF9yZWYpIHtcbiAgdmFyIGVudGVyID0gX3JlZi5lbnRlcixcbiAgICAgIGV4aXQgPSBfcmVmLmV4aXQsXG4gICAgICBfcmVmJGR1cmF0aW9uID0gX3JlZi5kdXJhdGlvbixcbiAgICAgIGR1cmF0aW9uID0gX3JlZiRkdXJhdGlvbiA9PT0gdm9pZCAwID8gNzUwIDogX3JlZiRkdXJhdGlvbixcbiAgICAgIF9yZWYkYXBwZW5kUG9zaXRpb24gPSBfcmVmLmFwcGVuZFBvc2l0aW9uLFxuICAgICAgYXBwZW5kUG9zaXRpb24gPSBfcmVmJGFwcGVuZFBvc2l0aW9uID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkYXBwZW5kUG9zaXRpb247XG4gIHJldHVybiBmdW5jdGlvbiBBbmltYXRpb24oX3JlZjIpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBfcmVmMi5jaGlsZHJlbixcbiAgICAgICAgcG9zaXRpb24gPSBfcmVmMi5wb3NpdGlvbixcbiAgICAgICAgcHJldmVudEV4aXRUcmFuc2l0aW9uID0gX3JlZjIucHJldmVudEV4aXRUcmFuc2l0aW9uLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJjaGlsZHJlblwiLCBcInBvc2l0aW9uXCIsIFwicHJldmVudEV4aXRUcmFuc2l0aW9uXCJdKTtcblxuICAgIHZhciBlbnRlckNsYXNzTmFtZSA9IGFwcGVuZFBvc2l0aW9uID8gZW50ZXIgKyBcIi0tXCIgKyBwb3NpdGlvbiA6IGVudGVyO1xuICAgIHZhciBleGl0Q2xhc3NOYW1lID0gYXBwZW5kUG9zaXRpb24gPyBleGl0ICsgXCItLVwiICsgcG9zaXRpb24gOiBleGl0O1xuICAgIHZhciBlbnRlckR1cmF0aW9uLCBleGl0RHVyYXRpb247XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShkdXJhdGlvbikgJiYgZHVyYXRpb24ubGVuZ3RoID09PSAyKSB7XG4gICAgICBlbnRlckR1cmF0aW9uID0gZHVyYXRpb25bMF07XG4gICAgICBleGl0RHVyYXRpb24gPSBkdXJhdGlvblsxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW50ZXJEdXJhdGlvbiA9IGV4aXREdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgIH1cblxuICAgIHZhciBvbkVudGVyID0gZnVuY3Rpb24gb25FbnRlcihub2RlKSB7XG4gICAgICBub2RlLmNsYXNzTGlzdC5hZGQoZW50ZXJDbGFzc05hbWUpO1xuICAgICAgbm9kZS5zdHlsZS5hbmltYXRpb25GaWxsTW9kZSA9ICdmb3J3YXJkcyc7XG4gICAgICBub2RlLnN0eWxlLmFuaW1hdGlvbkR1cmF0aW9uID0gZW50ZXJEdXJhdGlvbiAqIDAuMDAxICsgXCJzXCI7XG4gICAgfTtcblxuICAgIHZhciBvbkVudGVyZWQgPSBmdW5jdGlvbiBvbkVudGVyZWQobm9kZSkge1xuICAgICAgbm9kZS5jbGFzc0xpc3QucmVtb3ZlKGVudGVyQ2xhc3NOYW1lKTtcbiAgICAgIG5vZGUuc3R5bGUuY3NzVGV4dCA9ICcnO1xuICAgIH07XG5cbiAgICB2YXIgb25FeGl0ID0gZnVuY3Rpb24gb25FeGl0KG5vZGUpIHtcbiAgICAgIG5vZGUuY2xhc3NMaXN0LmFkZChleGl0Q2xhc3NOYW1lKTtcbiAgICAgIG5vZGUuc3R5bGUuYW5pbWF0aW9uRmlsbE1vZGUgPSAnZm9yd2FyZHMnO1xuICAgICAgbm9kZS5zdHlsZS5hbmltYXRpb25EdXJhdGlvbiA9IGV4aXREdXJhdGlvbiAqIDAuMDAxICsgXCJzXCI7XG4gICAgfTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb24sIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgdGltZW91dDogcHJldmVudEV4aXRUcmFuc2l0aW9uID8gMCA6IHtcbiAgICAgICAgZW50ZXI6IGVudGVyRHVyYXRpb24sXG4gICAgICAgIGV4aXQ6IGV4aXREdXJhdGlvblxuICAgICAgfSxcbiAgICAgIG9uRW50ZXI6IG9uRW50ZXIsXG4gICAgICBvbkVudGVyZWQ6IG9uRW50ZXJlZCxcbiAgICAgIG9uRXhpdDogcHJldmVudEV4aXRUcmFuc2l0aW9uID8gTk9PUCA6IG9uRXhpdFxuICAgIH0pLCBjaGlsZHJlbik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFByb2dyZXNzQmFyKF9yZWYpIHtcbiAgdmFyIF9jeCwgX2FuaW1hdGlvbkV2ZW50O1xuXG4gIHZhciBkZWxheSA9IF9yZWYuZGVsYXksXG4gICAgICBpc1J1bm5pbmcgPSBfcmVmLmlzUnVubmluZyxcbiAgICAgIGNsb3NlVG9hc3QgPSBfcmVmLmNsb3NlVG9hc3QsXG4gICAgICB0eXBlID0gX3JlZi50eXBlLFxuICAgICAgaGlkZSA9IF9yZWYuaGlkZSxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgdXNlclN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgIGNvbnRyb2xsZWRQcm9ncmVzcyA9IF9yZWYuY29udHJvbGxlZFByb2dyZXNzLFxuICAgICAgcHJvZ3Jlc3MgPSBfcmVmLnByb2dyZXNzLFxuICAgICAgcnRsID0gX3JlZi5ydGw7XG5cbiAgdmFyIHN0eWxlID0gX2V4dGVuZHMoe30sIHVzZXJTdHlsZSwge1xuICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBkZWxheSArIFwibXNcIixcbiAgICBhbmltYXRpb25QbGF5U3RhdGU6IGlzUnVubmluZyA/ICdydW5uaW5nJyA6ICdwYXVzZWQnLFxuICAgIG9wYWNpdHk6IGhpZGUgPyAwIDogMSxcbiAgICB0cmFuc2Zvcm06IGNvbnRyb2xsZWRQcm9ncmVzcyA/IFwic2NhbGVYKFwiICsgcHJvZ3Jlc3MgKyBcIilcIiA6IG51bGxcbiAgfSk7XG5cbiAgdmFyIGNsYXNzTmFtZXMgPSBjeChSVF9OQU1FU1BBQ0UgKyBcIl9fcHJvZ3Jlc3MtYmFyXCIsIGNvbnRyb2xsZWRQcm9ncmVzcyA/IFJUX05BTUVTUEFDRSArIFwiX19wcm9ncmVzcy1iYXItLWNvbnRyb2xsZWRcIiA6IFJUX05BTUVTUEFDRSArIFwiX19wcm9ncmVzcy1iYXItLWFuaW1hdGVkXCIsIFJUX05BTUVTUEFDRSArIFwiX19wcm9ncmVzcy1iYXItLVwiICsgdHlwZSwgKF9jeCA9IHt9LCBfY3hbUlRfTkFNRVNQQUNFICsgXCJfX3Byb2dyZXNzLWJhci0tcnRsXCJdID0gcnRsLCBfY3gpLCBjbGFzc05hbWUpO1xuICB2YXIgYW5pbWF0aW9uRXZlbnQgPSAoX2FuaW1hdGlvbkV2ZW50ID0ge30sIF9hbmltYXRpb25FdmVudFtjb250cm9sbGVkUHJvZ3Jlc3MgJiYgcHJvZ3Jlc3MgPj0gMSA/ICdvblRyYW5zaXRpb25FbmQnIDogJ29uQW5pbWF0aW9uRW5kJ10gPSBjb250cm9sbGVkUHJvZ3Jlc3MgJiYgcHJvZ3Jlc3MgPCAxID8gbnVsbCA6IGNsb3NlVG9hc3QsIF9hbmltYXRpb25FdmVudCk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMsXG4gICAgc3R5bGU6IHN0eWxlXG4gIH0sIGFuaW1hdGlvbkV2ZW50KSk7XG59XG5cblByb2dyZXNzQmFyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBhbmltYXRpb24gZGVsYXkgd2hpY2ggZGV0ZXJtaW5lIHdoZW4gdG8gY2xvc2UgdGhlIHRvYXN0XG4gICAqL1xuICBkZWxheTogZmFsc2VPckRlbGF5LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgb3Igbm90IHRoZSBhbmltYXRpb24gaXMgcnVubmluZyBvciBwYXVzZWRcbiAgICovXG4gIGlzUnVubmluZzogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogRnVuYyB0byBjbG9zZSB0aGUgY3VycmVudCB0b2FzdFxuICAgKi9cbiAgY2xvc2VUb2FzdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogU3VwcG9ydCBydGwgY29udGVudFxuICAgKi9cbiAgcnRsOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPcHRpb25hbCB0eXBlIDogaW5mbywgc3VjY2VzcyAuLi5cbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEhpZGUgb3Igbm90IHRoZSBwcm9ncmVzcyBiYXJcbiAgICovXG4gIGhpZGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPcHRpb25uYWwgY2xhc3NOYW1lXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogQ29udHJvbGxlZCBwcm9ncmVzcyB2YWx1ZVxuICAgKi9cbiAgcHJvZ3Jlc3M6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRlbGwgd2V0aGVyIG9yIG5vdCBjb250cm9sbGVkIHByb2dyZXNzIGJhciBpcyB1c2VkXG4gICAqL1xuICBjb250cm9sbGVkUHJvZ3Jlc3M6IFByb3BUeXBlcy5ib29sXG59O1xuUHJvZ3Jlc3NCYXIuZGVmYXVsdFByb3BzID0ge1xuICB0eXBlOiBUWVBFLkRFRkFVTFQsXG4gIGhpZGU6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBnZXRYKGUpIHtcbiAgcmV0dXJuIGUudGFyZ2V0VG91Y2hlcyAmJiBlLnRhcmdldFRvdWNoZXMubGVuZ3RoID49IDEgPyBlLnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WCA6IGUuY2xpZW50WDtcbn1cblxuZnVuY3Rpb24gZ2V0WShlKSB7XG4gIHJldHVybiBlLnRhcmdldFRvdWNoZXMgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA+PSAxID8gZS50YXJnZXRUb3VjaGVzWzBdLmNsaWVudFkgOiBlLmNsaWVudFk7XG59XG5cbnZhciBpTG92ZUludGVybmV0RXhwbG9yZXIgPSBjYW5Vc2VEb20gJiYgLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxudmFyIFRvYXN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRvYXN0LCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUb2FzdCgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfQ29tcG9uZW50LmNhbGwuYXBwbHkoX0NvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzUnVubmluZzogdHJ1ZSxcbiAgICAgIHByZXZlbnRFeGl0VHJhbnNpdGlvbjogZmFsc2VcbiAgICB9O1xuICAgIF90aGlzLmZsYWcgPSB7XG4gICAgICBjYW5DbG9zZU9uQ2xpY2s6IHRydWUsXG4gICAgICBjYW5EcmFnOiBmYWxzZVxuICAgIH07XG4gICAgX3RoaXMuZHJhZyA9IHtcbiAgICAgIHN0YXJ0OiAwLFxuICAgICAgeDogMCxcbiAgICAgIHk6IDAsXG4gICAgICBkZWx0YVg6IDAsXG4gICAgICByZW1vdmFsRGlzdGFuY2U6IDBcbiAgICB9O1xuICAgIF90aGlzLmJvdW5kaW5nUmVjdCA9IG51bGw7XG4gICAgX3RoaXMucmVmID0gbnVsbDtcblxuICAgIF90aGlzLnBhdXNlVG9hc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuYXV0b0Nsb3NlKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBpc1J1bm5pbmc6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5wbGF5VG9hc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuYXV0b0Nsb3NlKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBpc1J1bm5pbmc6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLm9uRHJhZ1N0YXJ0ID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLmZsYWcuY2FuQ2xvc2VPbkNsaWNrID0gdHJ1ZTtcbiAgICAgIF90aGlzLmZsYWcuY2FuRHJhZyA9IHRydWU7XG4gICAgICBfdGhpcy5ib3VuZGluZ1JlY3QgPSBfdGhpcy5yZWYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBfdGhpcy5yZWYuc3R5bGUudHJhbnNpdGlvbiA9ICcnO1xuICAgICAgX3RoaXMuZHJhZy5zdGFydCA9IF90aGlzLmRyYWcueCA9IGdldFgoZS5uYXRpdmVFdmVudCk7XG4gICAgICBfdGhpcy5kcmFnLnJlbW92YWxEaXN0YW5jZSA9IF90aGlzLnJlZi5vZmZzZXRXaWR0aCAqIChfdGhpcy5wcm9wcy5kcmFnZ2FibGVQZXJjZW50IC8gMTAwKTtcbiAgICB9O1xuXG4gICAgX3RoaXMub25EcmFnTW92ZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoX3RoaXMuZmxhZy5jYW5EcmFnKSB7XG4gICAgICAgIGlmIChfdGhpcy5zdGF0ZS5pc1J1bm5pbmcpIHtcbiAgICAgICAgICBfdGhpcy5wYXVzZVRvYXN0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5kcmFnLnggPSBnZXRYKGUpO1xuICAgICAgICBfdGhpcy5kcmFnLmRlbHRhWCA9IF90aGlzLmRyYWcueCAtIF90aGlzLmRyYWcuc3RhcnQ7XG4gICAgICAgIF90aGlzLmRyYWcueSA9IGdldFkoZSk7IC8vIHByZXZlbnQgZmFsc2UgcG9zaXRpZiBkdXJpbmcgYSB0b2FzdCBjbGlja1xuXG4gICAgICAgIF90aGlzLmRyYWcuc3RhcnQgIT09IF90aGlzLmRyYWcueCAmJiAoX3RoaXMuZmxhZy5jYW5DbG9zZU9uQ2xpY2sgPSBmYWxzZSk7XG4gICAgICAgIF90aGlzLnJlZi5zdHlsZS50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZVgoXCIgKyBfdGhpcy5kcmFnLmRlbHRhWCArIFwicHgpXCI7XG4gICAgICAgIF90aGlzLnJlZi5zdHlsZS5vcGFjaXR5ID0gMSAtIE1hdGguYWJzKF90aGlzLmRyYWcuZGVsdGFYIC8gX3RoaXMuZHJhZy5yZW1vdmFsRGlzdGFuY2UpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5vbkRyYWdFbmQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKF90aGlzLmZsYWcuY2FuRHJhZykge1xuICAgICAgICBfdGhpcy5mbGFnLmNhbkRyYWcgPSBmYWxzZTtcblxuICAgICAgICBpZiAoTWF0aC5hYnMoX3RoaXMuZHJhZy5kZWx0YVgpID4gX3RoaXMuZHJhZy5yZW1vdmFsRGlzdGFuY2UpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBwcmV2ZW50RXhpdFRyYW5zaXRpb246IHRydWVcbiAgICAgICAgICB9LCBfdGhpcy5wcm9wcy5jbG9zZVRvYXN0KTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzLnJlZi5zdHlsZS50cmFuc2l0aW9uID0gJ3RyYW5zZm9ybSAwLjJzLCBvcGFjaXR5IDAuMnMnO1xuICAgICAgICBfdGhpcy5yZWYuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVgoMCknO1xuICAgICAgICBfdGhpcy5yZWYuc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLm9uRHJhZ1RyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMuYm91bmRpbmdSZWN0KSB7XG4gICAgICAgIHZhciBfdGhpcyRib3VuZGluZ1JlY3QgPSBfdGhpcy5ib3VuZGluZ1JlY3QsXG4gICAgICAgICAgICB0b3AgPSBfdGhpcyRib3VuZGluZ1JlY3QudG9wLFxuICAgICAgICAgICAgYm90dG9tID0gX3RoaXMkYm91bmRpbmdSZWN0LmJvdHRvbSxcbiAgICAgICAgICAgIGxlZnQgPSBfdGhpcyRib3VuZGluZ1JlY3QubGVmdCxcbiAgICAgICAgICAgIHJpZ2h0ID0gX3RoaXMkYm91bmRpbmdSZWN0LnJpZ2h0O1xuXG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5wYXVzZU9uSG92ZXIgJiYgX3RoaXMuZHJhZy54ID49IGxlZnQgJiYgX3RoaXMuZHJhZy54IDw9IHJpZ2h0ICYmIF90aGlzLmRyYWcueSA+PSB0b3AgJiYgX3RoaXMuZHJhZy55IDw9IGJvdHRvbSkge1xuICAgICAgICAgIF90aGlzLnBhdXNlVG9hc3QoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5wbGF5VG9hc3QoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5vbkV4aXRUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlMb3ZlSW50ZXJuZXRFeHBsb3Jlcikge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkV4aXRlZCgpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGhlaWdodCA9IF90aGlzLnJlZi5zY3JvbGxIZWlnaHQ7XG4gICAgICB2YXIgc3R5bGUgPSBfdGhpcy5yZWYuc3R5bGU7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICBzdHlsZS5taW5IZWlnaHQgPSAnaW5pdGlhbCc7XG4gICAgICAgIHN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XG4gICAgICAgIHN0eWxlLnRyYW5zaXRpb24gPSAnYWxsIDAuNHMgJztcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdHlsZS5oZWlnaHQgPSAwO1xuICAgICAgICAgIHN0eWxlLnBhZGRpbmcgPSAwO1xuICAgICAgICAgIHN0eWxlLm1hcmdpbiA9IDA7XG4gICAgICAgIH0pO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMucHJvcHMub25FeGl0ZWQoKTtcbiAgICAgICAgfSwgNDAwKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVG9hc3QucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucHJvcHMub25PcGVuKHRoaXMucHJvcHMuY2hpbGRyZW4ucHJvcHMpO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuZHJhZ2dhYmxlKSB7XG4gICAgICB0aGlzLmJpbmREcmFnRXZlbnRzKCk7XG4gICAgfSAvLyBNYXliZSBJIGNvdWxkIGJpbmQgdGhlIGV2ZW50IGluIHRoZSBUb2FzdENvbnRhaW5lciBhbmQgcmVseSBvbiBkZWxlZ2F0aW9uXG5cblxuICAgIGlmICh0aGlzLnByb3BzLnBhdXNlT25Gb2N1c0xvc3MpIHtcbiAgICAgIHRoaXMuYmluZEZvY3VzRXZlbnRzKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKHByZXZQcm9wcy5kcmFnZ2FibGUgIT09IHRoaXMucHJvcHMuZHJhZ2dhYmxlKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5kcmFnZ2FibGUpIHtcbiAgICAgICAgdGhpcy5iaW5kRHJhZ0V2ZW50cygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy51bmJpbmREcmFnRXZlbnRzKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByZXZQcm9wcy5wYXVzZU9uRm9jdXNMb3NzICE9PSB0aGlzLnByb3BzLnBhdXNlT25Gb2N1c0xvc3MpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnBhdXNlT25Gb2N1c0xvc3MpIHtcbiAgICAgICAgdGhpcy5iaW5kRm9jdXNFdmVudHMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudW5iaW5kRm9jdXNFdmVudHMoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5wcm9wcy5vbkNsb3NlKHRoaXMucHJvcHMuY2hpbGRyZW4ucHJvcHMpO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuZHJhZ2dhYmxlKSB7XG4gICAgICB0aGlzLnVuYmluZERyYWdFdmVudHMoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5wYXVzZU9uRm9jdXNMb3NzKSB7XG4gICAgICB0aGlzLnVuYmluZEZvY3VzRXZlbnRzKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5iaW5kRm9jdXNFdmVudHMgPSBmdW5jdGlvbiBiaW5kRm9jdXNFdmVudHMoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgdGhpcy5wbGF5VG9hc3QpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgdGhpcy5wYXVzZVRvYXN0KTtcbiAgfTtcblxuICBfcHJvdG8udW5iaW5kRm9jdXNFdmVudHMgPSBmdW5jdGlvbiB1bmJpbmRGb2N1c0V2ZW50cygpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLnBsYXlUb2FzdCk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JsdXInLCB0aGlzLnBhdXNlVG9hc3QpO1xuICB9O1xuXG4gIF9wcm90by5iaW5kRHJhZ0V2ZW50cyA9IGZ1bmN0aW9uIGJpbmREcmFnRXZlbnRzKCkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMub25EcmFnTW92ZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMub25EcmFnRW5kKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLm9uRHJhZ01vdmUpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5vbkRyYWdFbmQpO1xuICB9O1xuXG4gIF9wcm90by51bmJpbmREcmFnRXZlbnRzID0gZnVuY3Rpb24gdW5iaW5kRHJhZ0V2ZW50cygpIHtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm9uRHJhZ01vdmUpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLm9uRHJhZ0VuZCk7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5vbkRyYWdNb3ZlKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMub25EcmFnRW5kKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfY3gsXG4gICAgICAgIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjbG9zZUJ1dHRvbiA9IF90aGlzJHByb3BzLmNsb3NlQnV0dG9uLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBhdXRvQ2xvc2UgPSBfdGhpcyRwcm9wcy5hdXRvQ2xvc2UsXG4gICAgICAgIHBhdXNlT25Ib3ZlciA9IF90aGlzJHByb3BzLnBhdXNlT25Ib3ZlcixcbiAgICAgICAgb25DbGljayA9IF90aGlzJHByb3BzLm9uQ2xpY2ssXG4gICAgICAgIGNsb3NlT25DbGljayA9IF90aGlzJHByb3BzLmNsb3NlT25DbGljayxcbiAgICAgICAgdHlwZSA9IF90aGlzJHByb3BzLnR5cGUsXG4gICAgICAgIGhpZGVQcm9ncmVzc0JhciA9IF90aGlzJHByb3BzLmhpZGVQcm9ncmVzc0JhcixcbiAgICAgICAgY2xvc2VUb2FzdCA9IF90aGlzJHByb3BzLmNsb3NlVG9hc3QsXG4gICAgICAgIFRyYW5zaXRpb24gPSBfdGhpcyRwcm9wcy50cmFuc2l0aW9uLFxuICAgICAgICBwb3NpdGlvbiA9IF90aGlzJHByb3BzLnBvc2l0aW9uLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGJvZHlDbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5ib2R5Q2xhc3NOYW1lLFxuICAgICAgICBwcm9ncmVzc0NsYXNzTmFtZSA9IF90aGlzJHByb3BzLnByb2dyZXNzQ2xhc3NOYW1lLFxuICAgICAgICBwcm9ncmVzc1N0eWxlID0gX3RoaXMkcHJvcHMucHJvZ3Jlc3NTdHlsZSxcbiAgICAgICAgdXBkYXRlSWQgPSBfdGhpcyRwcm9wcy51cGRhdGVJZCxcbiAgICAgICAgcm9sZSA9IF90aGlzJHByb3BzLnJvbGUsXG4gICAgICAgIHByb2dyZXNzID0gX3RoaXMkcHJvcHMucHJvZ3Jlc3MsXG4gICAgICAgIHJ0bCA9IF90aGlzJHByb3BzLnJ0bDtcbiAgICB2YXIgdG9hc3RQcm9wcyA9IHtcbiAgICAgIGNsYXNzTmFtZTogY3goUlRfTkFNRVNQQUNFICsgXCJfX3RvYXN0XCIsIFJUX05BTUVTUEFDRSArIFwiX190b2FzdC0tXCIgKyB0eXBlLCAoX2N4ID0ge30sIF9jeFtSVF9OQU1FU1BBQ0UgKyBcIl9fdG9hc3QtLXJ0bFwiXSA9IHJ0bCwgX2N4KSwgY2xhc3NOYW1lKVxuICAgIH07XG5cbiAgICBpZiAoYXV0b0Nsb3NlICYmIHBhdXNlT25Ib3Zlcikge1xuICAgICAgdG9hc3RQcm9wcy5vbk1vdXNlRW50ZXIgPSB0aGlzLnBhdXNlVG9hc3Q7XG4gICAgICB0b2FzdFByb3BzLm9uTW91c2VMZWF2ZSA9IHRoaXMucGxheVRvYXN0O1xuICAgIH0gLy8gcHJldmVudCB0b2FzdCBmcm9tIGNsb3Npbmcgd2hlbiB1c2VyIGRyYWdzIHRoZSB0b2FzdFxuXG5cbiAgICBpZiAoY2xvc2VPbkNsaWNrKSB7XG4gICAgICB0b2FzdFByb3BzLm9uQ2xpY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBvbkNsaWNrICYmIG9uQ2xpY2soZSk7XG4gICAgICAgIF90aGlzMi5mbGFnLmNhbkNsb3NlT25DbGljayAmJiBjbG9zZVRvYXN0KCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBjb250cm9sbGVkUHJvZ3Jlc3MgPSBwYXJzZUZsb2F0KHByb2dyZXNzKSA9PT0gcHJvZ3Jlc3M7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbiwge1xuICAgICAgaW46IHRoaXMucHJvcHMuaW4sXG4gICAgICBhcHBlYXI6IHRydWUsXG4gICAgICBvbkV4aXRlZDogdGhpcy5vbkV4aXRUcmFuc2l0aW9uRW5kLFxuICAgICAgcG9zaXRpb246IHBvc2l0aW9uLFxuICAgICAgcHJldmVudEV4aXRUcmFuc2l0aW9uOiB0aGlzLnN0YXRlLnByZXZlbnRFeGl0VHJhbnNpdGlvblxuICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgICAgb25DbGljazogb25DbGlja1xuICAgIH0sIHRvYXN0UHJvcHMsIHtcbiAgICAgIHJlZjogZnVuY3Rpb24gcmVmKF9yZWYpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5yZWYgPSBfcmVmO1xuICAgICAgfSxcbiAgICAgIG9uTW91c2VEb3duOiB0aGlzLm9uRHJhZ1N0YXJ0LFxuICAgICAgb25Ub3VjaFN0YXJ0OiB0aGlzLm9uRHJhZ1N0YXJ0LFxuICAgICAgb25Nb3VzZVVwOiB0aGlzLm9uRHJhZ1RyYW5zaXRpb25FbmQsXG4gICAgICBvblRvdWNoRW5kOiB0aGlzLm9uRHJhZ1RyYW5zaXRpb25FbmRcbiAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcy5pbiAmJiB7XG4gICAgICByb2xlOiByb2xlXG4gICAgfSwge1xuICAgICAgY2xhc3NOYW1lOiBjeChSVF9OQU1FU1BBQ0UgKyBcIl9fdG9hc3QtYm9keVwiLCBib2R5Q2xhc3NOYW1lKVxuICAgIH0pLCBjaGlsZHJlbiksIGNsb3NlQnV0dG9uICYmIGNsb3NlQnV0dG9uLCAoYXV0b0Nsb3NlIHx8IGNvbnRyb2xsZWRQcm9ncmVzcykgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChQcm9ncmVzc0JhciwgX2V4dGVuZHMoe30sIHVwZGF0ZUlkICYmICFjb250cm9sbGVkUHJvZ3Jlc3MgPyB7XG4gICAgICBrZXk6IFwicGItXCIgKyB1cGRhdGVJZFxuICAgIH0gOiB7fSwge1xuICAgICAgcnRsOiBydGwsXG4gICAgICBkZWxheTogYXV0b0Nsb3NlLFxuICAgICAgaXNSdW5uaW5nOiB0aGlzLnN0YXRlLmlzUnVubmluZyxcbiAgICAgIGNsb3NlVG9hc3Q6IGNsb3NlVG9hc3QsXG4gICAgICBoaWRlOiBoaWRlUHJvZ3Jlc3NCYXIsXG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgc3R5bGU6IHByb2dyZXNzU3R5bGUsXG4gICAgICBjbGFzc05hbWU6IHByb2dyZXNzQ2xhc3NOYW1lLFxuICAgICAgY29udHJvbGxlZFByb2dyZXNzOiBjb250cm9sbGVkUHJvZ3Jlc3MsXG4gICAgICBwcm9ncmVzczogcHJvZ3Jlc3NcbiAgICB9KSkpKTtcbiAgfTtcblxuICByZXR1cm4gVG9hc3Q7XG59KENvbXBvbmVudCk7XG5cblRvYXN0LnByb3BUeXBlcyA9IHtcbiAgY2xvc2VCdXR0b246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ub2RlLCBQcm9wVHlwZXMuYm9vbF0pLmlzUmVxdWlyZWQsXG4gIGF1dG9DbG9zZTogZmFsc2VPckRlbGF5LmlzUmVxdWlyZWQsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuICBjbG9zZVRvYXN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBwb3NpdGlvbjogUHJvcFR5cGVzLm9uZU9mKG9iamVjdFZhbHVlcyhQT1NJVElPTikpLmlzUmVxdWlyZWQsXG4gIHBhdXNlT25Ib3ZlcjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgcGF1c2VPbkZvY3VzTG9zczogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgY2xvc2VPbkNsaWNrOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICB0cmFuc2l0aW9uOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBydGw6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIGhpZGVQcm9ncmVzc0JhcjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgZHJhZ2dhYmxlOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICBkcmFnZ2FibGVQZXJjZW50OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuICBvbk9wZW46IFByb3BUeXBlcy5mdW5jLFxuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcbiAgdHlwZTogUHJvcFR5cGVzLm9uZU9mKG9iamVjdFZhbHVlcyhUWVBFKSksXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICBib2R5Q2xhc3NOYW1lOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIHByb2dyZXNzQ2xhc3NOYW1lOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIHByb2dyZXNzU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIHByb2dyZXNzOiBQcm9wVHlwZXMubnVtYmVyLFxuICB1cGRhdGVJZDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuICBhcmlhTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNvbnRhaW5lcklkOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gIHJvbGU6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5Ub2FzdC5kZWZhdWx0UHJvcHMgPSB7XG4gIHR5cGU6IFRZUEUuREVGQVVMVCxcbiAgaW46IHRydWUsXG4gIG9uT3BlbjogTk9PUCxcbiAgb25DbG9zZTogTk9PUCxcbiAgY2xhc3NOYW1lOiBudWxsLFxuICBib2R5Q2xhc3NOYW1lOiBudWxsLFxuICBwcm9ncmVzc0NsYXNzTmFtZTogbnVsbCxcbiAgdXBkYXRlSWQ6IG51bGxcbn07XG5cbmZ1bmN0aW9uIENsb3NlQnV0dG9uKF9yZWYpIHtcbiAgdmFyIGNsb3NlVG9hc3QgPSBfcmVmLmNsb3NlVG9hc3QsXG4gICAgICB0eXBlID0gX3JlZi50eXBlLFxuICAgICAgYXJpYUxhYmVsID0gX3JlZi5hcmlhTGFiZWw7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHtcbiAgICBjbGFzc05hbWU6IFJUX05BTUVTUEFDRSArIFwiX19jbG9zZS1idXR0b24gXCIgKyBSVF9OQU1FU1BBQ0UgKyBcIl9fY2xvc2UtYnV0dG9uLS1cIiArIHR5cGUsXG4gICAgdHlwZTogXCJidXR0b25cIixcbiAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBjbG9zZVRvYXN0KGUpO1xuICAgIH0sXG4gICAgXCJhcmlhLWxhYmVsXCI6IGFyaWFMYWJlbFxuICB9LCBcIlxcdTI3MTZcIik7XG59XG5cbkNsb3NlQnV0dG9uLnByb3BUeXBlcyA9IHtcbiAgY2xvc2VUb2FzdDogUHJvcFR5cGVzLmZ1bmMsXG4gIGFyaWFsTGFiZWw6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5DbG9zZUJ1dHRvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGFyaWFMYWJlbDogJ2Nsb3NlJ1xufTtcblxudmFyIEJvdW5jZSA9IGNzc1RyYW5zaXRpb24oe1xuICBlbnRlcjogUlRfTkFNRVNQQUNFICsgXCJfX2JvdW5jZS1lbnRlclwiLFxuICBleGl0OiBSVF9OQU1FU1BBQ0UgKyBcIl9fYm91bmNlLWV4aXRcIixcbiAgYXBwZW5kUG9zaXRpb246IHRydWVcbn0pO1xudmFyIFNsaWRlID0gY3NzVHJhbnNpdGlvbih7XG4gIGVudGVyOiBSVF9OQU1FU1BBQ0UgKyBcIl9fc2xpZGUtZW50ZXJcIixcbiAgZXhpdDogUlRfTkFNRVNQQUNFICsgXCJfX3NsaWRlLWV4aXRcIixcbiAgZHVyYXRpb246IFs0NTAsIDc1MF0sXG4gIGFwcGVuZFBvc2l0aW9uOiB0cnVlXG59KTtcbnZhciBab29tID0gY3NzVHJhbnNpdGlvbih7XG4gIGVudGVyOiBSVF9OQU1FU1BBQ0UgKyBcIl9fem9vbS1lbnRlclwiLFxuICBleGl0OiBSVF9OQU1FU1BBQ0UgKyBcIl9fem9vbS1leGl0XCJcbn0pO1xudmFyIEZsaXAgPSBjc3NUcmFuc2l0aW9uKHtcbiAgZW50ZXI6IFJUX05BTUVTUEFDRSArIFwiX19mbGlwLWVudGVyXCIsXG4gIGV4aXQ6IFJUX05BTUVTUEFDRSArIFwiX19mbGlwLWV4aXRcIlxufSk7XG5cbnZhciBUb2FzdENvbnRhaW5lciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUb2FzdENvbnRhaW5lciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVG9hc3RDb250YWluZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX0NvbXBvbmVudC5jYWxsLmFwcGx5KF9Db21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICB0b2FzdDogW11cbiAgICB9O1xuICAgIF90aGlzLnRvYXN0S2V5ID0gMTtcbiAgICBfdGhpcy5jb2xsZWN0aW9uID0ge307XG5cbiAgICBfdGhpcy5pc1RvYXN0QWN0aXZlID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICByZXR1cm4gX3RoaXMuc3RhdGUudG9hc3QuaW5kZXhPZihpZCkgIT09IC0xO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVG9hc3RDb250YWluZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgZXZlbnRNYW5hZ2VyLm9uKEFDVElPTi5TSE9XLCBmdW5jdGlvbiAoY29udGVudCwgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIF90aGlzMi5idWlsZFRvYXN0KGNvbnRlbnQsIG9wdGlvbnMpO1xuICAgIH0pLm9uKEFDVElPTi5DTEVBUiwgZnVuY3Rpb24gKGlkKSB7XG4gICAgICByZXR1cm4gaWQgPT0gbnVsbCA/IF90aGlzMi5jbGVhcigpIDogX3RoaXMyLnJlbW92ZVRvYXN0KGlkKTtcbiAgICB9KS5lbWl0KEFDVElPTi5ESURfTU9VTlQsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGV2ZW50TWFuYWdlci5lbWl0KEFDVElPTi5XSUxMX1VOTU9VTlQsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5yZW1vdmVUb2FzdCA9IGZ1bmN0aW9uIHJlbW92ZVRvYXN0KGlkKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICB0b2FzdDogdGhpcy5zdGF0ZS50b2FzdC5maWx0ZXIoZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgcmV0dXJuIHYgIT09IGlkO1xuICAgICAgfSlcbiAgICB9LCB0aGlzLmRpc3BhdGNoQ2hhbmdlKTtcbiAgfTtcblxuICBfcHJvdG8uZGlzcGF0Y2hDaGFuZ2UgPSBmdW5jdGlvbiBkaXNwYXRjaENoYW5nZSgpIHtcbiAgICBldmVudE1hbmFnZXIuZW1pdChBQ1RJT04uT05fQ0hBTkdFLCB0aGlzLnN0YXRlLnRvYXN0Lmxlbmd0aCk7XG4gIH07XG5cbiAgX3Byb3RvLm1ha2VDbG9zZUJ1dHRvbiA9IGZ1bmN0aW9uIG1ha2VDbG9zZUJ1dHRvbih0b2FzdENsb3NlLCB0b2FzdElkLCB0eXBlKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgY2xvc2VCdXR0b24gPSB0aGlzLnByb3BzLmNsb3NlQnV0dG9uO1xuXG4gICAgaWYgKGlzVmFsaWRFbGVtZW50KHRvYXN0Q2xvc2UpIHx8IHRvYXN0Q2xvc2UgPT09IGZhbHNlKSB7XG4gICAgICBjbG9zZUJ1dHRvbiA9IHRvYXN0Q2xvc2U7XG4gICAgfSBlbHNlIGlmICh0b2FzdENsb3NlID09PSB0cnVlKSB7XG4gICAgICBjbG9zZUJ1dHRvbiA9IHRoaXMucHJvcHMuY2xvc2VCdXR0b24gJiYgdHlwZW9mIHRoaXMucHJvcHMuY2xvc2VCdXR0b24gIT09ICdib29sZWFuJyA/IHRoaXMucHJvcHMuY2xvc2VCdXR0b24gOiBSZWFjdC5jcmVhdGVFbGVtZW50KENsb3NlQnV0dG9uLCBudWxsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xvc2VCdXR0b24gPT09IGZhbHNlID8gZmFsc2UgOiBjbG9uZUVsZW1lbnQoY2xvc2VCdXR0b24sIHtcbiAgICAgIGNsb3NlVG9hc3Q6IGZ1bmN0aW9uIGNsb3NlVG9hc3QoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczMucmVtb3ZlVG9hc3QodG9hc3RJZCk7XG4gICAgICB9LFxuICAgICAgdHlwZTogdHlwZVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5nZXRBdXRvQ2xvc2VEZWxheSA9IGZ1bmN0aW9uIGdldEF1dG9DbG9zZURlbGF5KHRvYXN0QXV0b0Nsb3NlKSB7XG4gICAgcmV0dXJuIHRvYXN0QXV0b0Nsb3NlID09PSBmYWxzZSB8fCBpc1ZhbGlkRGVsYXkodG9hc3RBdXRvQ2xvc2UpID8gdG9hc3RBdXRvQ2xvc2UgOiB0aGlzLnByb3BzLmF1dG9DbG9zZTtcbiAgfTtcblxuICBfcHJvdG8uY2FuQmVSZW5kZXJlZCA9IGZ1bmN0aW9uIGNhbkJlUmVuZGVyZWQoY29udGVudCkge1xuICAgIHJldHVybiBpc1ZhbGlkRWxlbWVudChjb250ZW50KSB8fCB0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGNvbnRlbnQgPT09ICdudW1iZXInIHx8IHR5cGVvZiBjb250ZW50ID09PSAnZnVuY3Rpb24nO1xuICB9O1xuXG4gIF9wcm90by5wYXJzZUNsYXNzTmFtZSA9IGZ1bmN0aW9uIHBhcnNlQ2xhc3NOYW1lKHByb3ApIHtcbiAgICBpZiAodHlwZW9mIHByb3AgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gcHJvcDtcbiAgICB9IGVsc2UgaWYgKHByb3AgIT09IG51bGwgJiYgdHlwZW9mIHByb3AgPT09ICdvYmplY3QnICYmICd0b1N0cmluZycgaW4gcHJvcCkge1xuICAgICAgcmV0dXJuIHByb3AudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBfcHJvdG8uYmVsb25nVG9Db250YWluZXIgPSBmdW5jdGlvbiBiZWxvbmdUb0NvbnRhaW5lcihfcmVmKSB7XG4gICAgdmFyIGNvbnRhaW5lcklkID0gX3JlZi5jb250YWluZXJJZDtcbiAgICByZXR1cm4gY29udGFpbmVySWQgPT09IHRoaXMucHJvcHMuY29udGFpbmVySWQ7XG4gIH07XG5cbiAgX3Byb3RvLmJ1aWxkVG9hc3QgPSBmdW5jdGlvbiBidWlsZFRvYXN0KGNvbnRlbnQsIF9yZWYyKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICB2YXIgZGVsYXkgPSBfcmVmMi5kZWxheSxcbiAgICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJkZWxheVwiXSk7XG5cbiAgICBpZiAoIXRoaXMuY2FuQmVSZW5kZXJlZChjb250ZW50KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGVsZW1lbnQgeW91IHByb3ZpZGVkIGNhbm5vdCBiZSByZW5kZXJlZC4gWW91IHByb3ZpZGVkIGFuIGVsZW1lbnQgb2YgdHlwZSBcIiArIHR5cGVvZiBjb250ZW50KTtcbiAgICB9XG5cbiAgICB2YXIgdG9hc3RJZCA9IG9wdGlvbnMudG9hc3RJZCxcbiAgICAgICAgdXBkYXRlSWQgPSBvcHRpb25zLnVwZGF0ZUlkOyAvLyBDaGVjayBmb3IgbXVsdGktY29udGFpbmVyIGFuZCBhbHNvIGZvciBkdXBsaWNhdGUgdG9hc3RJZFxuICAgIC8vIE1heWJlIGl0IHdvdWxkIGJlIGJldHRlciB0byBleHRyYWN0IGl0XG5cbiAgICBpZiAodGhpcy5wcm9wcy5lbmFibGVNdWx0aUNvbnRhaW5lciAmJiAhdGhpcy5iZWxvbmdUb0NvbnRhaW5lcihvcHRpb25zKSB8fCB0aGlzLmlzVG9hc3RBY3RpdmUodG9hc3RJZCkgJiYgdXBkYXRlSWQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjbG9zZVRvYXN0ID0gZnVuY3Rpb24gY2xvc2VUb2FzdCgpIHtcbiAgICAgIHJldHVybiBfdGhpczQucmVtb3ZlVG9hc3QodG9hc3RJZCk7XG4gICAgfTtcblxuICAgIHZhciB0b2FzdE9wdGlvbnMgPSB7XG4gICAgICBpZDogdG9hc3RJZCxcbiAgICAgIC8vIOKaoO+4jyBpZiBubyBvcHRpb25zLmtleSwgdGhpcy50b2FzdEtleSAtIDEgaXMgYXNzaWduZWRcbiAgICAgIGtleTogb3B0aW9ucy5rZXkgfHwgdGhpcy50b2FzdEtleSsrLFxuICAgICAgdHlwZTogb3B0aW9ucy50eXBlLFxuICAgICAgY2xvc2VUb2FzdDogY2xvc2VUb2FzdCxcbiAgICAgIHVwZGF0ZUlkOiBvcHRpb25zLnVwZGF0ZUlkLFxuICAgICAgcnRsOiB0aGlzLnByb3BzLnJ0bCxcbiAgICAgIHBvc2l0aW9uOiBvcHRpb25zLnBvc2l0aW9uIHx8IHRoaXMucHJvcHMucG9zaXRpb24sXG4gICAgICB0cmFuc2l0aW9uOiBvcHRpb25zLnRyYW5zaXRpb24gfHwgdGhpcy5wcm9wcy50cmFuc2l0aW9uLFxuICAgICAgY2xhc3NOYW1lOiB0aGlzLnBhcnNlQ2xhc3NOYW1lKG9wdGlvbnMuY2xhc3NOYW1lIHx8IHRoaXMucHJvcHMudG9hc3RDbGFzc05hbWUpLFxuICAgICAgYm9keUNsYXNzTmFtZTogdGhpcy5wYXJzZUNsYXNzTmFtZShvcHRpb25zLmJvZHlDbGFzc05hbWUgfHwgdGhpcy5wcm9wcy5ib2R5Q2xhc3NOYW1lKSxcbiAgICAgIG9uQ2xpY2s6IG9wdGlvbnMub25DbGljayB8fCB0aGlzLnByb3BzLm9uQ2xpY2ssXG4gICAgICBjbG9zZUJ1dHRvbjogdGhpcy5tYWtlQ2xvc2VCdXR0b24ob3B0aW9ucy5jbG9zZUJ1dHRvbiwgdG9hc3RJZCwgb3B0aW9ucy50eXBlKSxcbiAgICAgIHBhdXNlT25Ib3ZlcjogdHlwZW9mIG9wdGlvbnMucGF1c2VPbkhvdmVyID09PSAnYm9vbGVhbicgPyBvcHRpb25zLnBhdXNlT25Ib3ZlciA6IHRoaXMucHJvcHMucGF1c2VPbkhvdmVyLFxuICAgICAgcGF1c2VPbkZvY3VzTG9zczogdHlwZW9mIG9wdGlvbnMucGF1c2VPbkZvY3VzTG9zcyA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5wYXVzZU9uRm9jdXNMb3NzIDogdGhpcy5wcm9wcy5wYXVzZU9uRm9jdXNMb3NzLFxuICAgICAgZHJhZ2dhYmxlOiB0eXBlb2Ygb3B0aW9ucy5kcmFnZ2FibGUgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuZHJhZ2dhYmxlIDogdGhpcy5wcm9wcy5kcmFnZ2FibGUsXG4gICAgICBkcmFnZ2FibGVQZXJjZW50OiB0eXBlb2Ygb3B0aW9ucy5kcmFnZ2FibGVQZXJjZW50ID09PSAnbnVtYmVyJyAmJiAhaXNOYU4ob3B0aW9ucy5kcmFnZ2FibGVQZXJjZW50KSA/IG9wdGlvbnMuZHJhZ2dhYmxlUGVyY2VudCA6IHRoaXMucHJvcHMuZHJhZ2dhYmxlUGVyY2VudCxcbiAgICAgIGNsb3NlT25DbGljazogdHlwZW9mIG9wdGlvbnMuY2xvc2VPbkNsaWNrID09PSAnYm9vbGVhbicgPyBvcHRpb25zLmNsb3NlT25DbGljayA6IHRoaXMucHJvcHMuY2xvc2VPbkNsaWNrLFxuICAgICAgcHJvZ3Jlc3NDbGFzc05hbWU6IHRoaXMucGFyc2VDbGFzc05hbWUob3B0aW9ucy5wcm9ncmVzc0NsYXNzTmFtZSB8fCB0aGlzLnByb3BzLnByb2dyZXNzQ2xhc3NOYW1lKSxcbiAgICAgIHByb2dyZXNzU3R5bGU6IHRoaXMucHJvcHMucHJvZ3Jlc3NTdHlsZSxcbiAgICAgIGF1dG9DbG9zZTogdGhpcy5nZXRBdXRvQ2xvc2VEZWxheShvcHRpb25zLmF1dG9DbG9zZSksXG4gICAgICBoaWRlUHJvZ3Jlc3NCYXI6IHR5cGVvZiBvcHRpb25zLmhpZGVQcm9ncmVzc0JhciA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5oaWRlUHJvZ3Jlc3NCYXIgOiB0aGlzLnByb3BzLmhpZGVQcm9ncmVzc0JhcixcbiAgICAgIHByb2dyZXNzOiBwYXJzZUZsb2F0KG9wdGlvbnMucHJvZ3Jlc3MpLFxuICAgICAgcm9sZTogdHlwZW9mIG9wdGlvbnMucm9sZSA9PT0gJ3N0cmluZycgPyBvcHRpb25zLnJvbGUgOiB0aGlzLnByb3BzLnJvbGVcbiAgICB9O1xuICAgIHR5cGVvZiBvcHRpb25zLm9uT3BlbiA9PT0gJ2Z1bmN0aW9uJyAmJiAodG9hc3RPcHRpb25zLm9uT3BlbiA9IG9wdGlvbnMub25PcGVuKTtcbiAgICB0eXBlb2Ygb3B0aW9ucy5vbkNsb3NlID09PSAnZnVuY3Rpb24nICYmICh0b2FzdE9wdGlvbnMub25DbG9zZSA9IG9wdGlvbnMub25DbG9zZSk7IC8vIGFkZCBjbG9zZVRvYXN0IGZ1bmN0aW9uIHRvIHJlYWN0IGNvbXBvbmVudCBvbmx5XG5cbiAgICBpZiAoaXNWYWxpZEVsZW1lbnQoY29udGVudCkgJiYgdHlwZW9mIGNvbnRlbnQudHlwZSAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIGNvbnRlbnQudHlwZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIGNvbnRlbnQgPSBjbG9uZUVsZW1lbnQoY29udGVudCwge1xuICAgICAgICBjbG9zZVRvYXN0OiBjbG9zZVRvYXN0XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb250ZW50ID0gY29udGVudCh7XG4gICAgICAgIGNsb3NlVG9hc3Q6IGNsb3NlVG9hc3RcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChpc1ZhbGlkRGVsYXkoZGVsYXkpKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXM0LmFwcGVuZFRvYXN0KHRvYXN0T3B0aW9ucywgY29udGVudCwgb3B0aW9ucy5zdGFsZVRvYXN0SWQpO1xuICAgICAgfSwgZGVsYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFwcGVuZFRvYXN0KHRvYXN0T3B0aW9ucywgY29udGVudCwgb3B0aW9ucy5zdGFsZVRvYXN0SWQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uYXBwZW5kVG9hc3QgPSBmdW5jdGlvbiBhcHBlbmRUb2FzdChvcHRpb25zLCBjb250ZW50LCBzdGFsZVRvYXN0SWQpIHtcbiAgICB2YXIgX2V4dGVuZHMyO1xuXG4gICAgdmFyIGlkID0gb3B0aW9ucy5pZCxcbiAgICAgICAgdXBkYXRlSWQgPSBvcHRpb25zLnVwZGF0ZUlkO1xuICAgIHRoaXMuY29sbGVjdGlvbiA9IF9leHRlbmRzKHt9LCB0aGlzLmNvbGxlY3Rpb24sIChfZXh0ZW5kczIgPSB7fSwgX2V4dGVuZHMyW2lkXSA9IHtcbiAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXG4gICAgICBjb250ZW50OiBjb250ZW50LFxuICAgICAgcG9zaXRpb246IG9wdGlvbnMucG9zaXRpb25cbiAgICB9LCBfZXh0ZW5kczIpKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHRvYXN0OiAodXBkYXRlSWQgPyBbXS5jb25jYXQodGhpcy5zdGF0ZS50b2FzdCkgOiBbXS5jb25jYXQodGhpcy5zdGF0ZS50b2FzdCwgW2lkXSkpLmZpbHRlcihmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgcmV0dXJuIGlkICE9PSBzdGFsZVRvYXN0SWQ7XG4gICAgICB9KVxuICAgIH0sIHRoaXMuZGlzcGF0Y2hDaGFuZ2UpO1xuICB9O1xuXG4gIF9wcm90by5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgdG9hc3Q6IFtdXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlclRvYXN0ID0gZnVuY3Rpb24gcmVuZGVyVG9hc3QoKSB7XG4gICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICB2YXIgdG9hc3RUb1JlbmRlciA9IHt9O1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGUgPSBfdGhpcyRwcm9wcy5zdHlsZSxcbiAgICAgICAgbmV3ZXN0T25Ub3AgPSBfdGhpcyRwcm9wcy5uZXdlc3RPblRvcDtcbiAgICB2YXIgY29sbGVjdGlvbiA9IG5ld2VzdE9uVG9wID8gT2JqZWN0LmtleXModGhpcy5jb2xsZWN0aW9uKS5yZXZlcnNlKCkgOiBPYmplY3Qua2V5cyh0aGlzLmNvbGxlY3Rpb24pOyAvLyBncm91cCB0b2FzdCBieSBwb3NpdGlvblxuXG4gICAgY29sbGVjdGlvbi5mb3JFYWNoKGZ1bmN0aW9uICh0b2FzdElkKSB7XG4gICAgICB2YXIgX3RoaXM1JGNvbGxlY3Rpb24kdG9hID0gX3RoaXM1LmNvbGxlY3Rpb25bdG9hc3RJZF0sXG4gICAgICAgICAgcG9zaXRpb24gPSBfdGhpczUkY29sbGVjdGlvbiR0b2EucG9zaXRpb24sXG4gICAgICAgICAgb3B0aW9ucyA9IF90aGlzNSRjb2xsZWN0aW9uJHRvYS5vcHRpb25zLFxuICAgICAgICAgIGNvbnRlbnQgPSBfdGhpczUkY29sbGVjdGlvbiR0b2EuY29udGVudDtcbiAgICAgIHRvYXN0VG9SZW5kZXJbcG9zaXRpb25dIHx8ICh0b2FzdFRvUmVuZGVyW3Bvc2l0aW9uXSA9IFtdKTtcblxuICAgICAgaWYgKF90aGlzNS5zdGF0ZS50b2FzdC5pbmRleE9mKG9wdGlvbnMuaWQpICE9PSAtMSkge1xuICAgICAgICB0b2FzdFRvUmVuZGVyW3Bvc2l0aW9uXS5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoVG9hc3QsIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICAgICAgaXNEb2N1bWVudEhpZGRlbjogX3RoaXM1LnN0YXRlLmlzRG9jdW1lbnRIaWRkZW4sXG4gICAgICAgICAga2V5OiBcInRvYXN0LVwiICsgb3B0aW9ucy5rZXlcbiAgICAgICAgfSksIGNvbnRlbnQpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRvYXN0VG9SZW5kZXJbcG9zaXRpb25dLnB1c2gobnVsbCk7XG4gICAgICAgIGRlbGV0ZSBfdGhpczUuY29sbGVjdGlvblt0b2FzdElkXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModG9hc3RUb1JlbmRlcikubWFwKGZ1bmN0aW9uIChwb3NpdGlvbikge1xuICAgICAgdmFyIF9jeDtcblxuICAgICAgdmFyIGRpc2FibGVQb2ludGVyID0gdG9hc3RUb1JlbmRlcltwb3NpdGlvbl0ubGVuZ3RoID09PSAxICYmIHRvYXN0VG9SZW5kZXJbcG9zaXRpb25dWzBdID09PSBudWxsO1xuICAgICAgdmFyIHByb3BzID0ge1xuICAgICAgICBjbGFzc05hbWU6IGN4KFJUX05BTUVTUEFDRSArIFwiX190b2FzdC1jb250YWluZXJcIiwgUlRfTkFNRVNQQUNFICsgXCJfX3RvYXN0LWNvbnRhaW5lci0tXCIgKyBwb3NpdGlvbiwgKF9jeCA9IHt9LCBfY3hbUlRfTkFNRVNQQUNFICsgXCJfX3RvYXN0LWNvbnRhaW5lci0tcnRsXCJdID0gX3RoaXM1LnByb3BzLnJ0bCwgX2N4KSwgX3RoaXM1LnBhcnNlQ2xhc3NOYW1lKGNsYXNzTmFtZSkpLFxuICAgICAgICBzdHlsZTogZGlzYWJsZVBvaW50ZXIgPyBfZXh0ZW5kcyh7fSwgc3R5bGUsIHtcbiAgICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZSdcbiAgICAgICAgfSkgOiBfZXh0ZW5kcyh7fSwgc3R5bGUpXG4gICAgICB9O1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAga2V5OiBcImNvbnRhaW5lci1cIiArIHBvc2l0aW9uXG4gICAgICB9KSwgdG9hc3RUb1JlbmRlcltwb3NpdGlvbl0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBcIlwiICsgUlRfTkFNRVNQQUNFXG4gICAgfSwgdGhpcy5yZW5kZXJUb2FzdCgpKTtcbiAgfTtcblxuICByZXR1cm4gVG9hc3RDb250YWluZXI7XG59KENvbXBvbmVudCk7XG5cblRvYXN0Q29udGFpbmVyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFNldCB0b2FzdCBwb3NpdGlvblxuICAgKi9cbiAgcG9zaXRpb246IFByb3BUeXBlcy5vbmVPZihvYmplY3RWYWx1ZXMoUE9TSVRJT04pKSxcblxuICAvKipcbiAgICogRGlzYWJsZSBvciBzZXQgYXV0b0Nsb3NlIGRlbGF5XG4gICAqL1xuICBhdXRvQ2xvc2U6IGZhbHNlT3JEZWxheSxcblxuICAvKipcbiAgICogRGlzYWJsZSBvciBzZXQgYSBjdXN0b20gcmVhY3QgZWxlbWVudCBmb3IgdGhlIGNsb3NlIGJ1dHRvblxuICAgKi9cbiAgY2xvc2VCdXR0b246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ub2RlLCBQcm9wVHlwZXMuYm9vbF0pLFxuXG4gIC8qKlxuICAgKiBIaWRlIG9yIG5vdCBwcm9ncmVzcyBiYXIgd2hlbiBhdXRvQ2xvc2UgaXMgZW5hYmxlZFxuICAgKi9cbiAgaGlkZVByb2dyZXNzQmFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogUGF1c2UgdG9hc3QgZHVyYXRpb24gb24gaG92ZXJcbiAgICovXG4gIHBhdXNlT25Ib3ZlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIERpc21pc3MgdG9hc3Qgb24gY2xpY2tcbiAgICovXG4gIGNsb3NlT25DbGljazogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5ld2VzdCBvbiB0b3BcbiAgICovXG4gIG5ld2VzdE9uVG9wOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQW4gb3B0aW9uYWwgY2xhc3NOYW1lXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogQW4gb3B0aW9uYWwgc3R5bGVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBBbiBvcHRpb25hbCBjbGFzc05hbWUgZm9yIHRoZSB0b2FzdFxuICAgKi9cbiAgdG9hc3RDbGFzc05hbWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogQW4gb3B0aW9uYWwgY2xhc3NOYW1lIGZvciB0aGUgdG9hc3QgYm9keVxuICAgKi9cbiAgYm9keUNsYXNzTmFtZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBBbiBvcHRpb25hbCBjbGFzc05hbWUgZm9yIHRoZSB0b2FzdCBwcm9ncmVzcyBiYXJcbiAgICovXG4gIHByb2dyZXNzQ2xhc3NOYW1lOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIEFuIG9wdGlvbmFsIHN0eWxlIGZvciB0aGUgdG9hc3QgcHJvZ3Jlc3MgYmFyXG4gICAqL1xuICBwcm9ncmVzc1N0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBEZWZpbmUgZW50ZXIgYW5kIGV4aXQgdHJhbnNpdGlvbiB1c2luZyByZWFjdC10cmFuc2l0aW9uLWdyb3VwXG4gICAqL1xuICB0cmFuc2l0aW9uOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogU3VwcG9ydCBydGwgZGlzcGxheVxuICAgKi9cbiAgcnRsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQWxsb3cgdG9hc3QgdG8gYmUgZHJhZ2dhYmxlXG4gICAqL1xuICBkcmFnZ2FibGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgcGVyY2VudGFnZSBvZiB0aGUgdG9hc3QncyB3aWR0aCBpdCB0YWtlcyBmb3IgYSBkcmFnIHRvIGRpc21pc3MgYSB0b2FzdFxuICAgKi9cbiAgZHJhZ2dhYmxlUGVyY2VudDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogUGF1c2UgdGhlIHRvYXN0IG9uIGZvY3VzIGxvc3NcbiAgICovXG4gIHBhdXNlT25Gb2N1c0xvc3M6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBTaG93IHRoZSB0b2FzdCBvbmx5IGlmIGl0IGluY2x1ZGVzIGNvbnRhaW5lcklkIGFuZCBpdCdzIHRoZSBzYW1lIGFzIGNvbnRhaW5lcklkXG4gICAqL1xuICBlbmFibGVNdWx0aUNvbnRhaW5lcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFNldCBpZCB0byBoYW5kbGUgbXVsdGlwbGUgY29udGFpbmVyXG4gICAqL1xuICBjb250YWluZXJJZDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuXG4gIC8qKlxuICAgKiBTZXQgcm9sZSBhdHRyaWJ1dGUgZm9yIHRoZSB0b2FzdCBib2R5XG4gICAqL1xuICByb2xlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBGaXJlZCB3aGVuIGNsaWNraW5nIGluc2lkZSB0b2FzdGVyXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuY1xufTtcblRvYXN0Q29udGFpbmVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgcG9zaXRpb246IFBPU0lUSU9OLlRPUF9SSUdIVCxcbiAgdHJhbnNpdGlvbjogQm91bmNlLFxuICBydGw6IGZhbHNlLFxuICBhdXRvQ2xvc2U6IDUwMDAsXG4gIGhpZGVQcm9ncmVzc0JhcjogZmFsc2UsXG4gIGNsb3NlQnV0dG9uOiBSZWFjdC5jcmVhdGVFbGVtZW50KENsb3NlQnV0dG9uLCBudWxsKSxcbiAgcGF1c2VPbkhvdmVyOiB0cnVlLFxuICBwYXVzZU9uRm9jdXNMb3NzOiB0cnVlLFxuICBjbG9zZU9uQ2xpY2s6IHRydWUsXG4gIG5ld2VzdE9uVG9wOiBmYWxzZSxcbiAgZHJhZ2dhYmxlOiB0cnVlLFxuICBkcmFnZ2FibGVQZXJjZW50OiA4MCxcbiAgY2xhc3NOYW1lOiBudWxsLFxuICBzdHlsZTogbnVsbCxcbiAgdG9hc3RDbGFzc05hbWU6IG51bGwsXG4gIGJvZHlDbGFzc05hbWU6IG51bGwsXG4gIHByb2dyZXNzQ2xhc3NOYW1lOiBudWxsLFxuICBwcm9ncmVzc1N0eWxlOiBudWxsLFxuICByb2xlOiAnYWxlcnQnXG59O1xuXG52YXIgY29udGFpbmVycyA9IG5ldyBNYXAoKTtcbnZhciBsYXRlc3RJbnN0YW5jZSA9IG51bGw7XG52YXIgY29udGFpbmVyRG9tTm9kZSA9IG51bGw7XG52YXIgY29udGFpbmVyQ29uZmlnID0ge307XG52YXIgcXVldWUgPSBbXTtcbnZhciBsYXp5ID0gZmFsc2U7XG4vKipcbiAqIENoZWNrIHdoZXRoZXIgYW55IGNvbnRhaW5lciBpcyBjdXJyZW50bHkgbW91bnRlZCBpbiB0aGUgRE9NXG4gKi9cblxuZnVuY3Rpb24gaXNBbnlDb250YWluZXJNb3VudGVkKCkge1xuICByZXR1cm4gY29udGFpbmVycy5zaXplID4gMDtcbn1cbi8qKlxuICogR2V0IHRoZSBjb250YWluZXIgYnkgaWQuIFJldHVybnMgdGhlIGxhc3QgY29udGFpbmVyIGRlY2xhcmVkIHdoZW4gbm8gaWQgaXMgZ2l2ZW4uXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRDb250YWluZXIoY29udGFpbmVySWQpIHtcbiAgaWYgKCFpc0FueUNvbnRhaW5lck1vdW50ZWQoKSkgcmV0dXJuIG51bGw7XG4gIGlmICghY29udGFpbmVySWQpIHJldHVybiBjb250YWluZXJzLmdldChsYXRlc3RJbnN0YW5jZSk7XG4gIHJldHVybiBjb250YWluZXJzLmdldChjb250YWluZXJJZCk7XG59XG4vKipcbiAqIEdldCB0aGUgdG9hc3QgYnkgaWQsIGdpdmVuIGl0J3MgaW4gdGhlIERPTSwgb3RoZXJ3aXNlIHJldHVybnMgbnVsbFxuICovXG5cblxuZnVuY3Rpb24gZ2V0VG9hc3QodG9hc3RJZCwgX3JlZikge1xuICB2YXIgY29udGFpbmVySWQgPSBfcmVmLmNvbnRhaW5lcklkO1xuICB2YXIgY29udGFpbmVyID0gZ2V0Q29udGFpbmVyKGNvbnRhaW5lcklkKTtcbiAgaWYgKCFjb250YWluZXIpIHJldHVybiBudWxsO1xuICB2YXIgdG9hc3QgPSBjb250YWluZXIuY29sbGVjdGlvblt0b2FzdElkXTtcbiAgaWYgKHR5cGVvZiB0b2FzdCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiBudWxsO1xuICByZXR1cm4gdG9hc3Q7XG59XG4vKipcbiAqIE1lcmdlIHByb3ZpZGVkIG9wdGlvbnMgd2l0aCB0aGUgZGVmYXVsdHMgc2V0dGluZ3MgYW5kIGdlbmVyYXRlIHRoZSB0b2FzdElkXG4gKi9cblxuXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMob3B0aW9ucywgdHlwZSkge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHRvYXN0SWQ6IGdldFRvYXN0SWQob3B0aW9ucylcbiAgfSk7XG59XG4vKipcbiAqIEdlbmVyYXRlIGEgcmFuZG9tIHRvYXN0SWRcbiAqL1xuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlVG9hc3RJZCgpIHtcbiAgcmV0dXJuIChNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KSArIERhdGUubm93KCkudG9TdHJpbmcoMzYpKS5zdWJzdHIoMiwgMTApO1xufVxuLyoqXG4gKiBHZW5lcmF0ZSBhIHRvYXN0SWQgb3IgdXNlIHRoZSBvbmUgcHJvdmlkZWRcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFRvYXN0SWQob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyAmJiAodHlwZW9mIG9wdGlvbnMudG9hc3RJZCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG9wdGlvbnMudG9hc3RJZCA9PT0gJ251bWJlcicgJiYgIWlzTmFOKG9wdGlvbnMudG9hc3RJZCkpKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMudG9hc3RJZDtcbiAgfVxuXG4gIHJldHVybiBnZW5lcmF0ZVRvYXN0SWQoKTtcbn1cbi8qKlxuICogSWYgdGhlIGNvbnRhaW5lciBpcyBub3QgbW91bnRlZCwgdGhlIHRvYXN0IGlzIGVucXVldWVkIGFuZFxuICogdGhlIGNvbnRhaW5lciBsYXp5IG1vdW50ZWRcbiAqL1xuXG5cbmZ1bmN0aW9uIGRpc3BhdGNoVG9hc3QoY29udGVudCwgb3B0aW9ucykge1xuICBpZiAoaXNBbnlDb250YWluZXJNb3VudGVkKCkpIHtcbiAgICBldmVudE1hbmFnZXIuZW1pdChBQ1RJT04uU0hPVywgY29udGVudCwgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgcXVldWUucHVzaCh7XG4gICAgICBhY3Rpb246IEFDVElPTi5TSE9XLFxuICAgICAgY29udGVudDogY29udGVudCxcbiAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICB9KTtcblxuICAgIGlmIChsYXp5ICYmIGNhblVzZURvbSkge1xuICAgICAgbGF6eSA9IGZhbHNlO1xuICAgICAgY29udGFpbmVyRG9tTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXJEb21Ob2RlKTtcbiAgICAgIHJlbmRlcihSZWFjdC5jcmVhdGVFbGVtZW50KFRvYXN0Q29udGFpbmVyLCBjb250YWluZXJDb25maWcpLCBjb250YWluZXJEb21Ob2RlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3B0aW9ucy50b2FzdElkO1xufVxuXG52YXIgdG9hc3QgPSBmdW5jdGlvbiB0b2FzdChjb250ZW50LCBvcHRpb25zKSB7XG4gIHJldHVybiBkaXNwYXRjaFRvYXN0KGNvbnRlbnQsIG1lcmdlT3B0aW9ucyhvcHRpb25zLCBvcHRpb25zICYmIG9wdGlvbnMudHlwZSB8fCBUWVBFLkRFRkFVTFQpKTtcbn07XG4vKipcbiAqIEZvciBlYWNoIGF2YWlsYWJsZSB0eXBlIGNyZWF0ZSBhIHNob3J0Y3V0XG4gKi9cblxuXG52YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcCh0KSB7XG4gIGlmIChUWVBFW3RdICE9PSBUWVBFLkRFRkFVTFQpIHtcbiAgICB0b2FzdFtUWVBFW3RdLnRvTG93ZXJDYXNlKCldID0gZnVuY3Rpb24gKGNvbnRlbnQsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBkaXNwYXRjaFRvYXN0KGNvbnRlbnQsIG1lcmdlT3B0aW9ucyhvcHRpb25zLCBvcHRpb25zICYmIG9wdGlvbnMudHlwZSB8fCBUWVBFW3RdKSk7XG4gICAgfTtcbiAgfVxufTtcblxuZm9yICh2YXIgdCBpbiBUWVBFKSB7XG4gIF9sb29wKHQpO1xufVxuLyoqXG4gKiBNYXliZSBJIHNob3VsZCByZW1vdmUgd2FybmluZyBpbiBmYXZvciBvZiB3YXJuLCBJIGRvbid0IGtub3dcbiAqL1xuXG5cbnRvYXN0Lndhcm4gPSB0b2FzdC53YXJuaW5nO1xuLyoqXG4gKiBSZW1vdmUgdG9hc3QgcHJvZ3JhbW1hdGljYWx5XG4gKi9cblxudG9hc3QuZGlzbWlzcyA9IGZ1bmN0aW9uIChpZCkge1xuICBpZiAoaWQgPT09IHZvaWQgMCkge1xuICAgIGlkID0gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBpc0FueUNvbnRhaW5lck1vdW50ZWQoKSAmJiBldmVudE1hbmFnZXIuZW1pdChBQ1RJT04uQ0xFQVIsIGlkKTtcbn07XG4vKipcbiAqIHJldHVybiB0cnVlIGlmIG9uZSBjb250YWluZXIgaXMgZGlzcGxheWluZyB0aGUgdG9hc3RcbiAqL1xuXG5cbnRvYXN0LmlzQWN0aXZlID0gZnVuY3Rpb24gKGlkKSB7XG4gIHZhciBpc1RvYXN0QWN0aXZlID0gZmFsc2U7XG5cbiAgaWYgKGNvbnRhaW5lcnMuc2l6ZSA+IDApIHtcbiAgICBjb250YWluZXJzLmZvckVhY2goZnVuY3Rpb24gKGNvbnRhaW5lcikge1xuICAgICAgaWYgKGNvbnRhaW5lci5pc1RvYXN0QWN0aXZlKGlkKSkge1xuICAgICAgICBpc1RvYXN0QWN0aXZlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBpc1RvYXN0QWN0aXZlO1xufTtcblxudG9hc3QudXBkYXRlID0gZnVuY3Rpb24gKHRvYXN0SWQsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIC8vIGlmIHlvdSBjYWxsIHRvYXN0IGFuZCB0b2FzdC51cGRhdGUgZGlyZWN0bHkgbm90aGluZyB3aWxsIGJlIGRpc3BsYXllZFxuICAvLyB0aGlzIGlzIHdoeSBJIGRlZmVyZWQgdGhlIHVwZGF0ZVxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdG9hc3QgPSBnZXRUb2FzdCh0b2FzdElkLCBvcHRpb25zKTtcblxuICAgIGlmICh0b2FzdCkge1xuICAgICAgdmFyIG9sZE9wdGlvbnMgPSB0b2FzdC5vcHRpb25zLFxuICAgICAgICAgIG9sZENvbnRlbnQgPSB0b2FzdC5jb250ZW50O1xuXG4gICAgICB2YXIgbmV4dE9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb2xkT3B0aW9ucywge30sIG9wdGlvbnMsIHtcbiAgICAgICAgdG9hc3RJZDogb3B0aW9ucy50b2FzdElkIHx8IHRvYXN0SWRcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIW9wdGlvbnMudG9hc3RJZCB8fCBvcHRpb25zLnRvYXN0SWQgPT09IHRvYXN0SWQpIHtcbiAgICAgICAgbmV4dE9wdGlvbnMudXBkYXRlSWQgPSBnZW5lcmF0ZVRvYXN0SWQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRPcHRpb25zLnN0YWxlVG9hc3RJZCA9IHRvYXN0SWQ7XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZW50ID0gdHlwZW9mIG5leHRPcHRpb25zLnJlbmRlciAhPT0gJ3VuZGVmaW5lZCcgPyBuZXh0T3B0aW9ucy5yZW5kZXIgOiBvbGRDb250ZW50O1xuICAgICAgZGVsZXRlIG5leHRPcHRpb25zLnJlbmRlcjtcbiAgICAgIGRpc3BhdGNoVG9hc3QoY29udGVudCwgbmV4dE9wdGlvbnMpO1xuICAgIH1cbiAgfSwgMCk7XG59O1xuLyoqXG4gKiBVc2VkIGZvciBjb250cm9sbGVkIHByb2dyZXNzIGJhci5cbiAqL1xuXG5cbnRvYXN0LmRvbmUgPSBmdW5jdGlvbiAoaWQpIHtcbiAgdG9hc3QudXBkYXRlKGlkLCB7XG4gICAgcHJvZ3Jlc3M6IDFcbiAgfSk7XG59O1xuLyoqXG4gKiBUcmFjayBjaGFuZ2VzLiBUaGUgY2FsbGJhY2sgZ2V0IHRoZSBudW1iZXIgb2YgdG9hc3QgZGlzcGxheWVkXG4gKi9cblxuXG50b2FzdC5vbkNoYW5nZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXZlbnRNYW5hZ2VyLm9uKEFDVElPTi5PTl9DSEFOR0UsIGNhbGxiYWNrKTtcbiAgfVxufTtcbi8qKlxuICogQ29uZmlndXJlIHRoZSBUb2FzdENvbnRhaW5lciB3aGVuIGxhenkgbW91bnRlZFxuICovXG5cblxudG9hc3QuY29uZmlndXJlID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICBsYXp5ID0gdHJ1ZTtcbiAgY29udGFpbmVyQ29uZmlnID0gY29uZmlnO1xufTtcblxudG9hc3QuUE9TSVRJT04gPSBQT1NJVElPTjtcbnRvYXN0LlRZUEUgPSBUWVBFO1xuLyoqXG4gKiBXYWl0IHVudGlsIHRoZSBUb2FzdENvbnRhaW5lciBpcyBtb3VudGVkIHRvIGRpc3BhdGNoIHRoZSB0b2FzdFxuICogYW5kIGF0dGFjaCBpc0FjdGl2ZSBtZXRob2RcbiAqL1xuXG5ldmVudE1hbmFnZXIub24oQUNUSU9OLkRJRF9NT1VOVCwgZnVuY3Rpb24gKGNvbnRhaW5lckluc3RhbmNlKSB7XG4gIGxhdGVzdEluc3RhbmNlID0gY29udGFpbmVySW5zdGFuY2UucHJvcHMuY29udGFpbmVySWQgfHwgY29udGFpbmVySW5zdGFuY2U7XG4gIGNvbnRhaW5lcnMuc2V0KGxhdGVzdEluc3RhbmNlLCBjb250YWluZXJJbnN0YW5jZSk7XG4gIHF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBldmVudE1hbmFnZXIuZW1pdChpdGVtLmFjdGlvbiwgaXRlbS5jb250ZW50LCBpdGVtLm9wdGlvbnMpO1xuICB9KTtcbiAgcXVldWUgPSBbXTtcbn0pLm9uKEFDVElPTi5XSUxMX1VOTU9VTlQsIGZ1bmN0aW9uIChjb250YWluZXJJbnN0YW5jZSkge1xuICBpZiAoY29udGFpbmVySW5zdGFuY2UpIGNvbnRhaW5lcnMuZGVsZXRlKGNvbnRhaW5lckluc3RhbmNlLnByb3BzLmNvbnRhaW5lcklkIHx8IGNvbnRhaW5lckluc3RhbmNlKTtlbHNlIGNvbnRhaW5lcnMuY2xlYXIoKTtcblxuICBpZiAoY29udGFpbmVycy5zaXplID09PSAwKSB7XG4gICAgZXZlbnRNYW5hZ2VyLm9mZihBQ1RJT04uU0hPVykub2ZmKEFDVElPTi5DTEVBUik7XG4gIH1cblxuICBpZiAoY2FuVXNlRG9tICYmIGNvbnRhaW5lckRvbU5vZGUpIHtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGNvbnRhaW5lckRvbU5vZGUpO1xuICB9XG59KTtcblxuZXhwb3J0IHsgQm91bmNlLCBGbGlwLCBTbGlkZSwgVG9hc3RDb250YWluZXIsIFBPU0lUSU9OIGFzIFRvYXN0UG9zaXRpb24sIFRZUEUgYXMgVG9hc3RUeXBlLCBab29tLCBjc3NUcmFuc2l0aW9uLCB0b2FzdCB9O1xuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInNwaWRlcjUucG5nXCI7IiwiZXhwb3J0IGNvbnN0IGxzX2dldCA9IChrZXkpID0+IHtcbiAgICAvLyBjb25zb2xlLmxvZyhcImdldFwiLCBrZXkpO1xuICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpXG59XG5cbmV4cG9ydCBjb25zdCBsc19zZXQgPSAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgIC8vIGNvbnNvbGUubG9nKFwic2V0XCIsIGtleSwgdmFsdWUpO1xuICAgIHJldHVybiBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIHZhbHVlKVxufVxuZXhwb3J0IGNvbnN0IGxzX3JlbW92ZSA9IChrZXkpID0+IHtcbiAgICByZXR1cm4gbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KVxufVxuXG5leHBvcnQgY29uc3QgbHNfY2xlYXIgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5jbGVhcigpXG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCAnLi9uYXZiYXIuc2Nzcyc7XG5pbXBvcnQgeyBGbGlwLCBUb2FzdENvbnRhaW5lciB9IGZyb20gJ3JlYWN0LXRvYXN0aWZ5JztcbmltcG9ydCAncmVhY3QtdG9hc3RpZnkvZGlzdC9SZWFjdFRvYXN0aWZ5LmNzcyc7XG5pbXBvcnQgbG9nbyBmcm9tICcuLi8uLi8uLi8uLi9wdWJsaWMvaW1hZ2VzL3NwaWRlcjUucG5nJztcbmltcG9ydCB7IGxzX2dldCB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2xzLXNlcnZpY2UnO1xuaW1wb3J0IGNvbmZpZyBmcm9tICcuLi8uLi8uLi8uLi9jb25maWcnO1xuXG5jbGFzcyBOYXZiYXIgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG5cbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgbmF2SXRlbXM6IFtdXG4gICAgICAgIH1cblxuICAgIH1cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBuYXZJdGVtczogW1xuICAgICAgICAgICAgICAgIHsgJ25hbWUnOiAnSG9tZScsICdyb3V0ZSc6ICcvaG9tZScgfSxcbiAgICAgICAgICAgICAgICB7ICduYW1lJzogJ1NpZ24gSW4nLCAncm91dGUnOiAnL3NpZ25pbicgfSxcbiAgICAgICAgICAgICAgICB7ICduYW1lJzogJ1NpZ24gT3V0JywgJ3JvdXRlJzogJy9zaWdub3V0JyB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiAgY2xhc3NOYW1lPVwibmF2YmFyLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxUb2FzdENvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb249XCJ0b3AtY2VudGVyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9DbG9zZT17NTAwMH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGhpZGVQcm9ncmVzc0JhclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3ZXN0T25Ub3BcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlT25DbGlja1xuICAgICAgICAgICAgICAgICAgICAgICAgcnRsPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdXNlT25WaXNpYmlsaXR5Q2hhbmdlXG4gICAgICAgICAgICAgICAgICAgICAgICBkcmFnZ2FibGU9e2ZhbHNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgcGF1c2VPbkhvdmVyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uPXtGbGlwfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwibmF2XCIgaWQ9XCJuYXZcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwibmF2LWl0ZW0gbG9nb1wiID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPExpbmsgY2xhc3NOYW1lPVwibmF2LWxpbmtcIiB0bz0nL2hvbWUnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz17bG9nb30gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD1cImxvZ28taWRlbnRpZmllclwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwibmF2LWl0ZW0gbG9nby1uYW1lXCIgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGluayBjbGFzc05hbWU9XCJuYXYtbGlua1wiIHRvPScvaG9tZSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD1cImxvZ28tZGVzY1wiID5TcGlkeSAtIE5lZ2FuPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbHNfZ2V0KCFjb25maWcuVE9LRU4pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IDxsaSBjbGFzc05hbWU9XCJuYXYtaXRlbVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIGNsYXNzTmFtZT1cIm5hdi1saW5rXCIgdG89Jy9zaWduaW4nPlNpZ24gSW48L0xpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiA8bGkgY2xhc3NOYW1lPVwibmF2LWl0ZW1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGluayBjbGFzc05hbWU9XCJuYXYtbGlua1wiIHRvPScvc2lnbm91dCc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLXNpZ24tb3V0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cblxuXG5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTmF2YmFyOyIsImNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcbmltcG9ydCBjb25maWcgZnJvbSAnLi4vLi4vLi4vLi4vY29uZmlnJztcbmltcG9ydCB7IGxzX2dldCB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2xzLXNlcnZpY2UnO1xuXG5jb25zdCBzZXJ2ZXJfdXJsID0gYCR7Y29uZmlnLlNFUlZFUl9VUkx9OiR7Y29uZmlnLlNFUlZFUl9QT1JUfWA7XG5cbmNvbnN0IGNhbGxBUEkgPSBhc3luYyBmdW5jdGlvbihtZXRob2QsIHVybCAsIGRhdGE9e30pe1xuICBcbiAgICBjb25zdCB0b2tlbiA9IGxzX2dldChjb25maWcuVE9LRU4pO1xuICAgIC8vIGNvbnNvbGUubG9nKCd0b2tlbjogJywgdG9rZW4pO1xuXG4gICAgY29uc3QgY29uZmlnT2JqID0ge307XG4gICAgY29uZmlnT2JqLm1ldGhvZCA9IG1ldGhvZDtcbiAgICBjb25maWdPYmoudXJsID0gdXJsO1xuICAgIGNvbmZpZ09iai5iYXNlVVJMID0gc2VydmVyX3VybDtcbiAgICBjb25maWdPYmouaGVhZGVycz0ge1xuICAgICAgW2NvbmZpZy5UT0tFTl0gOiB0b2tlblxuICAgIH1cbiAgICBpZihtZXRob2QgIT09IFwiZ2V0XCIpe1xuICAgICAgY29uZmlnT2JqLmRhdGEgPSBkYXRhO1xuICAgIH1cblxuICAgIHJldHVybiBheGlvcyhjb25maWdPYmopO1xuXG59O1xuXG5cbmV4cG9ydCBjb25zdCBzaWduVXAgPSAoe2VtYWlsLCBwYXNzd29yZCwgbmFtZX0pID0+IGNhbGxBUEkoJ3Bvc3QnLCAnL3NpZ251cCcsIHtlbWFpbCwgcGFzc3dvcmQsIG5hbWV9KTsgXG5leHBvcnQgY29uc3Qgc2lnbkluID0gKHtlbWFpbCwgcGFzc3dvcmR9KSA9PiBjYWxsQVBJKCdwb3N0JywgJy9zaWduaW4nLCB7ZW1haWwsIHBhc3N3b3JkfSk7ICAgXG5leHBvcnQgY29uc3QgZ2V0QWxsVXNlcnMgPSAoKSA9PiBjYWxsQVBJKCdnZXQnLCAnL2FsbHVzZXJzJyk7ICBcblxuXG5cbmV4cG9ydCBjb25zdCBnZXRVc2VyQWN0aXZpdHkgPSAoKSA9PiBjYWxsQVBJKCdnZXQnLCAnL2FjdGl2aXR5Jywge30gKTsgICBcbmV4cG9ydCBjb25zdCBzZXRVc2VyQWN0aXZpdHkgPSAoe3RhZ30pID0+IGNhbGxBUEkoJ3Bvc3QnLCAnL2FjdGl2aXR5Jywge3RhZ30gKTsgICAiLCJpbXBvcnQgeyB0b2FzdCB9IGZyb20gJ3JlYWN0LXRvYXN0aWZ5JztcblxuZXhwb3J0IGNvbnN0IE5vdGlmeU1lID0gZnVuY3Rpb24gKHN0YXR1cywgbXNnKSB7XG4gICAgY29uc3Qgc3R5bGVPYmogPSB7XG4gICAgICAgIHBvc2l0aW9uOiBcInRvcC1yaWdodFwiLFxuICAgICAgICBhdXRvQ2xvc2U6IDUwMDAsXG4gICAgICAgIGhpZGVQcm9ncmVzc0JhcjogdHJ1ZSxcbiAgICAgICAgY2xvc2VPbkNsaWNrOiB0cnVlLFxuICAgICAgICBwYXVzZU9uSG92ZXI6IHRydWUsXG4gICAgICAgIGRyYWdnYWJsZTogZmFsc2VcbiAgICB9O1xuICAgIFxuICAgIGlmIChzdGF0dXMgPT09ICdzdWNjZXNzJykge1xuICAgICAgICByZXR1cm4gdG9hc3Quc3VjY2Vzcyhtc2csIHN0eWxlT2JqKTtcbiAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gJ2luZm8nKSB7XG4gICAgICAgIHJldHVybiB0b2FzdC5pbmZvKG1zZywgc3R5bGVPYmopO1xuICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSAnd2FybmluZycpIHtcbiAgICAgICAgcmV0dXJuIHRvYXN0Lndhcm5pbmcobXNnLCBzdHlsZU9iaik7XG4gICAgfSBlbHNlIGlmIChzdGF0dXMgPT09ICdlcnJvcicpIHtcbiAgICAgICAgcmV0dXJuIHRvYXN0LmVycm9yKG1zZywgc3R5bGVPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0b2FzdChtc2csIHN0eWxlT2JqKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgcmVwbGFjZSB9IGZyb20gXCJjb25uZWN0ZWQtcmVhY3Qtcm91dGVyXCI7XG5pbXBvcnQgY29uZmlnIGZyb20gJy4uLy4uLy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBnZXRBbGxVc2Vycywgc2lnbkluLCBzaWduVXAgfSBmcm9tIFwiLi4vY29tbW9uL2FwaS9hcGlcIjtcbmltcG9ydCB7IE5vdGlmeU1lIH0gZnJvbSBcIi4uL2NvbW1vbi9ub3RpZnlNZVwiO1xuaW1wb3J0IHsgbHNfY2xlYXIsIGxzX3NldCB9IGZyb20gXCIuLi9zZXJ2aWNlcy9scy1zZXJ2aWNlXCI7XG5pbXBvcnQgeyBwdXNoIH0gZnJvbSAncmVhY3Qtcm91dGVyLXJlZHV4JztcblxuZXhwb3J0IGNvbnN0IGdvVG8gPSAoe3JvdXRlfSkgPT4ge1xuICAgIHJldHVybiBkaXNwYXRjaCA9PiB7XG4gICAgICAgIGRpc3BhdGNoKHB1c2gocm91dGUpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBzaWduaW4gPSAoe2VtYWlsLCBwYXNzd29yZH0pID0+IHtcbiAgICByZXR1cm4gYXN5bmMgZGlzcGF0Y2ggPT4ge1xuICAgICAgICB0cnl7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHNpZ25Jbih7ZW1haWwsIHBhc3N3b3JkfSk7XG4gICAgICAgICAgICBjb25zdCB7ZGF0YSwgbXNnLCBzdGF0dXN9ID0gcmVzcG9uc2VbJ2RhdGEnXTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbc2lnbkluXSByZXNwb25zZTogJywgZGF0YSk7XG4gICAgICAgICAgICBpZighc3RhdHVzKSB0aHJvdyBtc2c7XG5cbiAgICAgICAgICAgIE5vdGlmeU1lKCdzdWNjZXNzJywgbXNnKTtcbiAgICAgICAgICAgIGxzX3NldChjb25maWcuVE9LRU4sIGRhdGEudG9rZW4pO1xuICAgICAgICAgICAgZGlzcGF0Y2gocmVwbGFjZShcIi9cIikpO1xuICAgICAgICB9Y2F0Y2goZXJyKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbZXJyXVtzaWduaW5dOiAnLCBlcnIpO1xuICAgICAgICAgICAgTm90aWZ5TWUoJ2Vycm9yJywgZXJyLnRvU3RyaW5nKCkgKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IHNpZ251cCA9ICh7ZW1haWwsIHBhc3N3b3JkLCBuYW1lfSkgPT4ge1xuICAgIHJldHVybiBhc3luYyBkaXNwYXRjaCA9PiB7XG4gICAgICAgIHRyeXtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc2lnblVwKHtlbWFpbCwgcGFzc3dvcmQsIG5hbWV9KTtcbiAgICAgICAgICAgIGNvbnN0IHtkYXRhLCBtc2csIHN0YXR1c30gPSByZXNwb25zZVsnZGF0YSddO1xuXG4gICAgICAgICAgICBpZighc3RhdHVzKSB0aHJvdyBtc2c7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW3NpZ25Jbl0gcmVzcG9uc2U6ICcsIGRhdGEpO1xuICAgICAgICAgICAgTm90aWZ5TWUoJ3N1Y2Nlc3MnLCBtc2cpO1xuXG4gICAgICAgIH1jYXRjaChlcnIpe1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tlcnJdW3NpZ25VcF06ICcsIGVycik7XG4gICAgICAgICAgICBOb3RpZnlNZSgnZXJyb3InLCBlcnIudG9TdHJpbmcoKSApO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3Qgc2lnbm91dCA9ICgpID0+IHtcbiAgICByZXR1cm4gYXN5bmMgZGlzcGF0Y2ggPT4ge1xuICAgICAgICB0cnl7XG4gICAgICAgICAgICBsc19jbGVhcigpO1xuICAgICAgICAgICAgLy8gTm90aWZ5TWUoJ3N1Y2Nlc3MnLCBcIlN1Y2Nlc3NmdWxseSBsb2dnZWQgb3V0LlwiKTtcbiAgICAgICAgICAgIGRpc3BhdGNoKHJlcGxhY2UoXCIvc2lnbmluXCIpKTtcbiAgICAgICAgfWNhdGNoKGVycil7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW2Vycl1bc2lnbm91dF06ICcsIGVycik7XG4gICAgICAgICAgICBOb3RpZnlNZSgnZXJyb3InLCBlcnIudG9TdHJpbmcoKSApO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgYWxsVXNlcnMgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGFzeW5jIGRpc3BhdGNoID0+IHtcbiAgICAgICAgdHJ5e1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBnZXRBbGxVc2VycygpO1xuICAgICAgICAgICAgY29uc3Qge2RhdGEsIG1zZywgc3RhdHVzfSA9IHJlc3BvbnNlWydkYXRhJ107XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW3NpZ25Jbl0gcmVzcG9uc2U6ICcsIGRhdGEpO1xuXG4gICAgICAgICAgICBpZighc3RhdHVzKSB0aHJvdyBtc2c7XG4gICAgICAgICAgICBOb3RpZnlNZSgnc3VjY2VzcycsIG1zZyk7XG5cbiAgICAgICAgfWNhdGNoKGVycil7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW2Vycl1bYWxsVXNlcnNdOiAnLCBlcnIpO1xuICAgICAgICAgICAgTm90aWZ5TWUoJ2Vycm9yJywgZXJyLnRvU3RyaW5nKCkgKTtcblxuICAgICAgICB9XG4gICAgfVxufVxuXG5cbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgJy4vYXV0aC5zY3NzJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycyB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi9hdXRoLWFjdGlvbnMnO1xuXG5jbGFzcyBBdXRoIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBlbWFpbDogJycsXG4gICAgICAgICAgICBwYXNzd29yZDogJycsXG4gICAgICAgICAgICBuYW1lOiAnZGVmYXVsdCdcbiAgICAgICAgfTtcbiAgICB9XG4gICAgb25DaGFuZ2UgPSBlID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IFtlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKFwidHlwZVwiKV06IGUudGFyZ2V0LnZhbHVlIH0pO1xuICAgIH1cbiAgICBvblNpZ25JbiA9IGUgPT4ge1xuICAgICAgICB0aGlzLnByb3BzLmFjdGlvbnMuc2lnbmluKHtcbiAgICAgICAgICAgIGVtYWlsOiB0aGlzLnN0YXRlLmVtYWlsLFxuICAgICAgICAgICAgcGFzc3dvcmQ6IHRoaXMuc3RhdGUucGFzc3dvcmRcbiAgICAgICAgfSlcbiAgICB9XG4gICAgb25TaWduVXAgPSBlID0+IHtcbiAgICAgICAgdGhpcy5wcm9wcy5hY3Rpb25zLnNpZ251cCh7XG4gICAgICAgICAgICBlbWFpbDogdGhpcy5zdGF0ZS5lbWFpbCxcbiAgICAgICAgICAgIHBhc3N3b3JkOiB0aGlzLnN0YXRlLnBhc3N3b3JkLFxuICAgICAgICAgICAgbmFtZTogdGhpcy5zdGF0ZS5uYW1lXG4gICAgICAgIH0pXG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3RoaXMuc3RhdGUnICwgdGhpcy5zdGF0ZSk7XG4gICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImF1dGgtd3JhcHBlclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhdXRoLWJvZHlcIj5cbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5FbWFpbCBhZGRyZXNzPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJlbWFpbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIGVtYWlsXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBpZD1cImVtYWlsSGVscFwiIGNsYXNzTmFtZT1cImZvcm0tdGV4dCB0ZXh0LW11dGVkXCI+V2UnbGwgbmV2ZXIgc2hhcmUgeW91ciBlbWFpbCB3aXRoIGFueW9uZSBlbHNlLjwvc21hbGw+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCA+UGFzc3dvcmQ8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiUGFzc3dvcmRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlfSAvPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhdXRoLWJ1dHRvbnNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1wcmltYXJ5XCIgb25DbGljaz17dGhpcy5vblNpZ25Jbn0+U2lnbiBJbjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgJm5ic3A7Jm5ic3A7XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tcHJpbWFyeVwiIG9uQ2xpY2s9e3RoaXMub25TaWduVXB9PlNpZ24gVXA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDwvZGl2PjtcbiAgICB9XG59XG5cblxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSBzdGF0ZSA9PiAoe30pO1xuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSBkaXNwYXRjaCA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWN0aW9uczogYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbnMsIGRpc3BhdGNoKVxuICAgIH1cblxufVxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcykod2l0aFJvdXRlcihBdXRoKSk7IiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tICcuL2F1dGgtYWN0aW9ucyc7XG5cbmNsYXNzIFNpZ25PdXQgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbXBvbmVudERpZE1vdW50KCl7XG4gICAgICAgIHRoaXMucHJvcHMuYWN0aW9ucy5zaWdub3V0KCk7XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbn1cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gc3RhdGUgPT4gKHt9KVxuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSBkaXNwYXRjaCA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWN0aW9uczogYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbnMsIGRpc3BhdGNoKVxuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKHdpdGhSb3V0ZXIoU2lnbk91dCkpOyIsImNvbnN0IG5zcCA9IFwibWFpbi9cIjtcblxuZXhwb3J0IGNvbnN0IFNFVF9JTlBVVF9UQUdTID0gYCR7bnNwfVNFVF9JTlBVVF9UQUdTYDtcbmV4cG9ydCBjb25zdCBTRVRfQVZBSUxBQkxFX1RBR1MgPSBgJHtuc3B9U0VUX0FWQUlMQUJMRV9UQUdTYDtcbmV4cG9ydCBjb25zdCBTRVRfUFJJTUFSWV9UQUcgPSBgJHtuc3B9U0VUX1BSSU1BUllfVEFHYDtcbmV4cG9ydCBjb25zdCBQVVNIX0FSVElDTEUgPSBgJHtuc3B9UFVTSF9BUlRJQ0xFYDtcbmV4cG9ydCBjb25zdCBTRVRfQVJUSUNMRVMgPSBgJHtuc3B9U0VUX0FSVElDTEVTYDtcbmV4cG9ydCBjb25zdCBTRVRfRklMVEVSRURfQVJUSUNMRVMgPSBgJHtuc3B9U0VUX0ZJTFRFUkVEX0FSVElDTEVTYDtcbmV4cG9ydCBjb25zdCBTRVRfRklMVEVSX0lOUFVUID0gYCR7bnNwfVNFVF9GSUxURVJfSU5QVVRgO1xuXG5leHBvcnQgY29uc3QgU0VUX1NIT1dfRklMVEVSRUQgPSBgJHtuc3B9U0VUX1NIT1dfRklMVEVSRURgO1xuXG5leHBvcnQgY29uc3QgU0VUX0FDVElWSVRZID0gYCR7bnNwfVNFVF9BQ1RJVklUWWA7XG5leHBvcnQgY29uc3QgUFVTSF9BQ1RJVklUWSA9IGAke25zcH1QVVNIX0FDVElWSVRZYDtcbmV4cG9ydCBjb25zdCBTRVRfQkxPR19IVE1MID0gYCR7bnNwfVNFVF9CTE9HX0hUTUxgO1xuZXhwb3J0IGNvbnN0IFNFVF9CTE9HX1NUWUxFID0gYCR7bnNwfVNFVF9CTE9HX1NUWUxFYDtcbmV4cG9ydCBjb25zdCBTRVRfQkxPR19SRVNQT05TRSA9IGAke25zcH1TRVRfQkxPR19SRVNQT05TRWA7XG5cblxuLy8gZXhwb3J0IGNvbnN0IFBVU0hfUEVORElOR19BUlRJQ0xFID0gYCR7bnNwfVBVU0hfUEVORElOR19BUlRJQ0xFYDtcblxuIiwiZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IH1cblxuaW1wb3J0IHsgQ0FMTF9ISVNUT1JZX01FVEhPRCB9IGZyb20gJy4vYWN0aW9ucyc7XG4vKipcbiAqIFRoaXMgbWlkZGxld2FyZSBjYXB0dXJlcyBDQUxMX0hJU1RPUllfTUVUSE9EIGFjdGlvbnMgdG8gcmVkaXJlY3QgdG8gdGhlXG4gKiBwcm92aWRlZCBoaXN0b3J5IG9iamVjdC4gVGhpcyB3aWxsIHByZXZlbnQgdGhlc2UgYWN0aW9ucyBmcm9tIHJlYWNoaW5nIHlvdXJcbiAqIHJlZHVjZXIgb3IgYW55IG1pZGRsZXdhcmUgdGhhdCBjb21lcyBhZnRlciB0aGlzIG9uZS5cbiAqL1xuXG52YXIgcm91dGVyTWlkZGxld2FyZSA9IGZ1bmN0aW9uIHJvdXRlck1pZGRsZXdhcmUoaGlzdG9yeSkge1xuICByZXR1cm4gZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICAgIGlmIChhY3Rpb24udHlwZSAhPT0gQ0FMTF9ISVNUT1JZX01FVEhPRCkge1xuICAgICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX2FjdGlvbiRwYXlsb2FkID0gYWN0aW9uLnBheWxvYWQsXG4gICAgICAgICAgICBtZXRob2QgPSBfYWN0aW9uJHBheWxvYWQubWV0aG9kLFxuICAgICAgICAgICAgYXJncyA9IF9hY3Rpb24kcGF5bG9hZC5hcmdzO1xuICAgICAgICBoaXN0b3J5W21ldGhvZF0uYXBwbHkoaGlzdG9yeSwgX3RvQ29uc3VtYWJsZUFycmF5KGFyZ3MpKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHJvdXRlck1pZGRsZXdhcmU7IiwiZnVuY3Rpb24gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKGV4dHJhQXJndW1lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaCxcbiAgICAgICAgZ2V0U3RhdGUgPSBfcmVmLmdldFN0YXRlO1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aW9uKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZXh0cmFBcmd1bWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufVxuXG52YXIgdGh1bmsgPSBjcmVhdGVUaHVua01pZGRsZXdhcmUoKTtcbnRodW5rLndpdGhFeHRyYUFyZ3VtZW50ID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlO1xuXG5leHBvcnQgZGVmYXVsdCB0aHVuazsiLCJpbXBvcnQgKiBhcyBhVCBmcm9tIFwiLi4vdXRpbHMvYWN0aW9uVHlwZXNcIjtcblxuY29uc3QgdXBkYXRlID0gKHByZXZTdGF0ZSwgbmV3U3RhdGUpID0+ICh7IC4uLnByZXZTdGF0ZSwgLi4ubmV3U3RhdGUgfSk7XG4vLyBjcmF3bF9zdGF0dXMgPSBcInN1Y2Nlc3NcIiB8fCBcImVyclwiIHx8IFwid2FpdFwiXG5cbmNvbnN0IGluZGV4T2ZGaXJzdCA9ICh7YXJ0aWNsZXMsIHN0YXR1cyB9KSA9PiB7XG4gICAgZm9yKGxldCBpPTAgOyBpPCBhcnRpY2xlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGlmKGFydGljbGVzW2ldLmNyYXdsX3N0YXR1cyA9PT0gc3RhdHVzICl7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJ0aWNsZXMubGVuZ3RoO1xufVxuXG5cbmNvbnN0IGluZGV4T2ZBcnRpY2xlSWQgPSAoe2FydGljbGVzLCBpZCB9KSA9PiB7XG4gICAgZm9yKGxldCBpPTAgOyBpPCBhcnRpY2xlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGlmKGFydGljbGVzW2ldLmlkID09PSBpZCApe1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuY29uc3QgZHVtbXkgPSBbXG4gICAge1xuICAgICAgICBcIkBjb250ZXh0XCI6IFwiaHR0cDovL3NjaGVtYS5vcmdcIixcbiAgICAgICAgXCJAdHlwZVwiOiBcIk5ld3NBcnRpY2xlXCIsXG4gICAgICAgIGltYWdlOiBbXG4gICAgICAgICAgICBcImh0dHBzOi8vbWlyby5tZWRpdW0uY29tL21heC8xMjAwLzEqdE1PSkJTcUtmWWQ5TTJ6T3NrbHVGdy5wbmdcIlxuICAgICAgICBdLFxuICAgICAgICB1cmw6IFwiaHR0cHM6Ly9tZWRpdW0uY29tL2ZyZWUtY29kZS1jYW1wLzUta2V5LWxlYXJuaW5ncy1mcm9tLXRoZS1wb3N0LWJvb3RjYW1wLWpvYi1zZWFyY2gtOWEwNzQ2OGQyMzMxXCIsXG4gICAgICAgIGRhdGVDcmVhdGVkOiBcIjIwMTYtMTEtMTlUMTY6NDg6MzAuMzY1WlwiLFxuICAgICAgICBkYXRlUHVibGlzaGVkOiBcIjIwMTYtMTEtMTlUMTY6NDg6MzAuMzY1WlwiLFxuICAgICAgICBkYXRlTW9kaWZpZWQ6IFwiMjAxOS0wMS0yMVQwNjozMzozNy45MDlaXCIsXG4gICAgICAgIGhlYWRsaW5lOiBcIltEVU1NWV06IEkgc3BlbnQgMyBtb250aHMgYXBwbHlpbmcgdG8gam9icyBhZnRlciBhIGNvZGluZyBib290Y2FtcC4gSGVyZeKAmXMgd2hhdCBJIGxlYXJuZWQuXCIsXG4gICAgICAgIG5hbWU6IFwiSSBzcGVudCAzIG1vbnRocyBhcHBseWluZyB0byBqb2JzIGFmdGVyIGEgY29kaW5nIGJvb3RjYW1wLiBIZXJl4oCZcyB3aGF0IEkgbGVhcm5lZC5cIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQSBsZXNzLXRhbGtlZCBhYm91dCBwYXJ0IG9mIHRoZSBib290Y2FtcGVy4oCZcyBqb3VybmV5IGlzIHdoYXQgaGFwcGVucyBhZnRlciB5b3UgZ3JhZHVhdGUg4oCUIHdoZW4geW914oCZcmUgc2VhcmNoaW5nIGZvciB0aGF0IHNpeC1maWd1cmUgZGV2ZWxvcGVyIHBvc2l0aW9uLiBJIGNvbXBsZXRlZCBIYWNrIFJlYWN0b3IgaW4gSnVseSAyMDE2IGFuZCB0b29r4oCmXCIsXG4gICAgICAgIGlkZW50aWZpZXI6IFwiOWEwNzQ2OGQyMzMxXCIsXG4gICAgICAgIGtleXdvcmRzOiBbXG4gICAgICAgICAgICBcIlRlY2hcIixcbiAgICAgICAgICAgIFwiU3RhcnR1cFwiLFxuICAgICAgICAgICAgXCJQcm9ncmFtbWluZ1wiLFxuICAgICAgICAgICAgXCJTZWxmIEltcHJvdmVtZW50XCIsXG4gICAgICAgICAgICBcIkxpZmUgTGVzc29uc1wiXG4gICAgICAgIF0sXG4gICAgICAgIGF1dGhvcjoge1xuICAgICAgICAgICAgXCJAdHlwZVwiOiBcIlBlcnNvblwiLFxuICAgICAgICAgICAgbmFtZTogXCJGZWxpeCBGZW5nXCIsXG4gICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9tZWRpdW0uY29tL0BmZWxpeGZlbmdcIlxuICAgICAgICB9LFxuICAgICAgICBjcmVhdG9yOiBbXG4gICAgICAgICAgICBcIkZlbGl4IEZlbmdcIlxuICAgICAgICBdLFxuICAgICAgICBwdWJsaXNoZXI6IHtcbiAgICAgICAgICAgIFwiQHR5cGVcIjogXCJPcmdhbml6YXRpb25cIixcbiAgICAgICAgICAgIG5hbWU6IFwiZnJlZUNvZGVDYW1wLm9yZ1wiLFxuICAgICAgICAgICAgdXJsOiBcImh0dHBzOi8vbWVkaXVtLmNvbS9mcmVlLWNvZGUtY2FtcFwiLFxuICAgICAgICAgICAgbG9nbzoge1xuICAgICAgICAgICAgICAgIFwiQHR5cGVcIjogXCJJbWFnZU9iamVjdFwiLFxuICAgICAgICAgICAgICAgIHdpZHRoOiA1MDAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA2MCxcbiAgICAgICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9taXJvLm1lZGl1bS5jb20vbWF4LzUwMC8xKndWaUJOSjFvOXJNNXA2Yi1nZjN2eGcucG5nXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWFpbkVudGl0eU9mUGFnZTogXCJodHRwczovL21lZGl1bS5jb20vZnJlZS1jb2RlLWNhbXAvNS1rZXktbGVhcm5pbmdzLWZyb20tdGhlLXBvc3QtYm9vdGNhbXAtam9iLXNlYXJjaC05YTA3NDY4ZDIzMzFcIixcbiAgICAgICAgYmxvZzogXCJJIHNwZW50IDMgbW9udGhzIGFwcGx5aW5nIHRvIGpvYnMgYWZ0ZXIgYSBjb2RpbmcgYm9vdGNhbXAuIEhlcmXigJlzIHdoYXQgSSBsZWFybmVkLkZlbGl4IEZlbmdGb2xsb3dOb3YgMTksIDIwMTYgwrcgNiBtaW4gcmVhZEEgbGVzcy10YWxrZWQgYWJvdXQgcGFydCBvZiB0aGUgYm9vdGNhbXBlcuKAmXMgam91cm5leSBpcyB3aGF0IGhhcHBlbnMgYWZ0ZXIgeW91IGdyYWR1YXRlIOKAlCB3aGVuIHlvdeKAmXJlIHNlYXJjaGluZyBmb3IgdGhhdCBzaXgtZmlndXJlIGRldmVsb3BlciBwb3NpdGlvbi48IDMlIG9mIGFwcGxpY2F0aW9ucyBiZWNhbWUgb2ZmZXJzSSBjb21wbGV0ZWQgSGFjayBSZWFjdG9yIGluIEp1bHkgMjAxNiBhbmQgdG9vayBhbG1vc3QgMyBtb250aHMgYmVmb3JlIGFjY2VwdGluZyBhbiBvZmZlciB3aXRoIFJhZGl1cyBJbnRlbGxpZ2VuY2UuIEkgYXBwbGllZCB0byAyOTEgY29tcGFuaWVzLCBkaWQgMzIgcGhvbmUgc2NyZWVucywgMTYgdGVjaG5pY2FsIHNjcmVlbnMsIDEzIGNvZGluZyBjaGFsbGVuZ2VzLCAxMSBvbi1zaXRlcywgYW5kIHJlY2VpdmVkIDggb2ZmZXJzLiBUaGUgb2ZmZXJzIHJhbmdlZCBmcm9tICQ2MC0xMjVrIGluIHNhbGFyeSBmcm9tIGNvbXBhbmllcyBhbGwgb3ZlciB0aGUgVVMsIGFuZCBmb3IgYm90aCBmcm9udCBlbmQgYW5kIGZ1bGwgc3RhY2sgcm9sZXMuIEluIHRvdGFsLCAyLjglIG9mIGFwcGxpY2F0aW9ucyBiZWNhbWUgb2ZmZXJzLkhlcmUgYXJlIDUgdGhpbmdzIEkgd2lzaCBJ4oCZZCBrbm93biBiZWZvcmUgSSBiZWdhbiBteSBqb2Igc2VhcmNoLkluc2lnaHQgIzE6IEdldCB0aHJvdWdoIHRvIHJlYWwgcGVvcGxlQXQgZmlyc3QsIEkgYXBwbGllZCBmb3IgY29tcGFuaWVzIHVzaW5nIHRoZSBzaG90Z3VuIGFwcHJvYWNoLiBJIGFwcGxpZWQgdGhyb3VnaCBJbmRlZWQuY29tLCBBbmdlbExpc3QsIExpbmtlZEluLCBTdGFja092ZXJmbG93LCBIYWNrZXIgTmV3cywgY29tcGFueSB3ZWJzaXRlcywgYW5kIGV2ZW4gQ3JhaWdzbGlzdC5J4oCZZCBzdWJtaXQgYSByZXN1bWUgZm9yIGFueSByb2xlIHRoYXQgd2FudGVkIFJlYWN0LCBOb2RlLCBvciBKYXZhU2NyaXB0IGV4cGVyaWVuY2UuIEluIHRoZSBmaXJzdCB3ZWVrLCBJIGFwcGxpZWQgdG8gMTXigJMyMCBjb21wYW5pZXMgYSBkYXkuUHJvLVRpcDogRmluZCBjb21wYW5pZXMgdXNpbmcgdGhpcyBlYXN5LWFwcGxpY2F0aW9uIHJlcG8uTXkgeWllbGQgd2FzIGxvdy4gTGVzcyB0aGFuIGZpdmUgcGVyY2VudCBvZiBjb21wYW5pZXMgcmVzcG9uZGVkIHRvIG1lLiBJIHdhcyB0aHJvd2luZyBhcHBsaWNhdGlvbnMgaW50byBhIGJsYWNrIGhvbGUuRXZlcnl0aGluZyBjaGFuZ2VkIHdoZW4gb25lIG9mIG15IGNvaG9ydC1tYXRlcywgYSBmb3JtZXIgcmVjcnVpdGVyLCBzaGFyZWQgYSBndWlkZSB0byB0aGUgam9iIHNlYXJjaC4gSGUgdG9sZCB1cyB0byBzZW5kIGVtYWlscyBkaXJlY3RseSB0byByZWFsIHBlb3BsZSB3aXRoIGVhY2ggYXBwbGljYXRpb24uIEl0IGNvdWxkIGJlIGFueWJvZHkuIEFzIGxvbmcgYXMgc29tZW9uZSByZWFkIGl0LkZyb20gdGhlbiBvbiwgd2hlbmV2ZXIgSSBzdWJtaXR0ZWQgYW4gYXBwbGljYXRpb24sIEkgc2VhcmNoZWQgZm9yIHRoZSBjb21wYW55IG9uIExpbmtlZEluIGFuZCBlbWFpbGVkIHNvbWVvbmUgb24gdGhlaXIgZW5naW5lZXJpbmcgb3IgaGlyaW5nIHRlYW0uRm9yIG1vc3Qgc21hbGwgY29tcGFuaWVzIG9yIEMtbGV2ZWwgZXhlY3V0aXZlcywgdGhlIGVtYWlsIGZvcm1hdCBpcyB1c3VhbGx5IGZpcnN0TmFtZUBkcmVhbUNvbXBhbnkuY29tLiBGb3IgbGFyZ2VyIGNvbXBhbmllcywgaXQgbWF5IGJlIGZpcnN0TmFtZS5sYXN0TmFtZUBkcmVhbUNvbXBhbnkuY29tLlRvIHZlcmlmeSBlbWFpbHMsIEkgdXNlZCBSYXBwb3J0aXZlIHRvIGNyb3NzLWNoZWNrIGVtYWlscyB3aXRoIHNvY2lhbCBtZWRpYSBhY2NvdW50cy5UaGUgcmVzdWx0cyB3ZXJlIGFtYXppbmcuIFdpdGggMTUwKyBlbWFpbHMgc2VudCwgbXkgcmVzcG9uc2UgcmF0ZSB3YXMgYSB3aG9wcGluZyAyMiUuSXQgYWxzbyBmZWx0IGdyZWF0IHRvIGhlYXIgZnJvbSByZWFsIHBlb3BsZS4gU3VycHJpc2luZ2x5LCBDRU9zIGFuZCBDVE9zIHJlc3BvbmRlZCB0byBtZS4gU29tZXRpbWVzIHRoZXkgZXZlbiBpbnRlcnZpZXdlZCBtZSB0aGVtc2VsdmVzLlRha2Vhd2F5OiBJZiB5b3XigJlyZSBhcHBseWluZyB0aHJvdWdoIHRoZSBmcm9udCBkb29yLCBtYWtlIHN1cmUgeW914oCZcmUgZ2V0dGluZyB0byBodW1hbiBiZWluZ3MuSW5zaWdodCAjMjogU3RhcnQgc21hbGwgYW5kIHdvcmsgeW91ciB3YXkgdXBZb3Ugd2lsbCBmYWNlIExldmVsIDEgaW50ZXJ2aWV3cyAoYSBub24tdGVjaCBjb21wYW55IHRoYXQgbmVlZHMgYW55IGRldiksIHdoZXJlIGludGVydmlld2VycyBhc2sgeW91IG5vdGhpbmcgbW9yZSB0aGFuIEphdmFTY3JpcHQgdHJpdmlhLllvdSB3aWxsIGZhY2UgTGV2ZWwgOSBpbnRlcnZpZXdzIChHb29nbGUvRmFjZWJvb2sgbGV2ZWwpLCB3aGVyZSBpbnRlcnZpZXdlcnMgYXNrIGRpZmZpY3VsdCBkYXRhIHN0cnVjdHVyZSBhbmQgYWxnb3JpdGhtIHF1ZXN0aW9ucy5JIHN0cmF0ZWdpY2FsbHkgc2V0IHVwIG15IHByb2Nlc3Mgc28gdGhhdCBJIGhhZCBsb3dlci1sZXZlbCBpbnRlcnZpZXdzIGVhcmxpZXIsIGFuZCBoaWdoZXItbGV2ZWwgaW50ZXJ2aWV3cyBsYXRlciBvbi5FYXJseSBvbiwgSSBnYWluZWQgZXhwZXJpZW5jZSwgYnVpbHQgY29uZmlkZW5jZSwgYW5kIHNlY3VyZWQgb2ZmZXJzIGZyb20gY29tcGFuaWVzIHRoYXQgaGFkIGxlc3MgaW50ZW5zaXZlIGludGVydmlld3MuQXMgSSBnb3QgbW9yZSBleHBlcmllbmNlLCBJIGVmZmVjdGl2ZWx5IOKAnGxldmVsZWQgdXAu4oCdIEkgYmVjYW1lIGNhcGFibGUgb2YgY29tcGxldGluZyBpbnRlcnZpZXdzIGF0IGNvbXBhbmllcyB3aXRoIGhpZ2hlciBoaXJpbmcgYmFycy4gVGhpcyBpcyBpbGx1c3RyYXRlZCBiZWxvdyBhcyBhIGxpbmVhciBjb3JyZWxhdGlvbiBiZXR3ZWVuIHRoZSBudW1iZXIgb2Ygd2Vla3MgSSB3YXMgaW50byB0aGUgcHJvY2VzcyBhbmQgdGhlIGJhc2Ugc2FsYXJ5IEkgd2FzIG9mZmVyZWQuVGhlcmXigJlzIGEgZGlyZWN0IGNvcnJlbGF0aW9uIGJldHdlZW4gdGltZSBzcGVudCBpbnRlcnZpZXdpbmcgYW5kIG9mZmVyIHNhbGFyeS5JIHVubG9ja2VkIHRvdWdoZXIgcXVlc3Rpb25zLiBJIHVubG9ja2VkIGhpZ2hlciBzYWxhcmllcy4gQW5kIGV2ZW50dWFsbHksIEkgdW5sb2NrZWQgdGhlIGpvYiBJIHRvb2suVGFrZWF3YXk6IFBsYW4gdG8gdGFja2xlIGVhc2llciBpbnRlcnZpZXdzIGVhcmx5IG9uIGFuZCBtb3JlIGRpZmZpY3VsdCBvbmVzIGxhdGVyIG9uLkluc2lnaHQgIzM6IFN0dWR5IGxpa2UgeW91ciBmdXR1cmUgam9iIGRlcGVuZHMgb24gaXQgKGJlY2F1c2UgaXQgZG9lcylJIGhhdGUgdG8gYnJlYWsgaXQgdG8geW91LCBidXQgdGhlIG1vc3QgaW1wb3J0YW50IHRoaW5nIHlvdSBjb3VsZCBiZSBkb2luZyBhdCBhbnkgcG9pbnQgaXMgc3R1ZHlpbmcgYW5kIHByZXBhcmluZy5XaHk/IEJlY2F1c2UgeW91IHdvbuKAmXQgZ2V0IHRoZSBvZmZlciBpZiB5b3UgZG9u4oCZdCBoYXZlIGdvb2QgYW5zd2VycyB0byB0aGUgcXVlc3Rpb25zIHRoZXkgYXNrIHlvdS5QZW9wbGUgd29u4oCZdCByZWZlciB5b3UgaWYgdGhleSBkb27igJl0IHRoaW5rIHlvdeKAmXJlIHByZXBhcmVkIGZvciB0aGVpciBpbnRlcnZpZXdzLkNvbWluZyBvdXQgb2YgSGFjayBSZWFjdG9yLCBteSB3ZWFrbmVzc2VzIHdlcmUgZGF0YSBzdHJ1Y3R1cmVzIGFuZCBhbGdvcml0aG1zLiBBIHN0dWR5IGJ5IFRyaXBsZWJ5dGUgaGFzIGZvdW5kIHRoYXQgYm9vdGNhbXAgZ3JhZHMgYXJlIHdlYWtlciBpbiB0aGVzZSBhcmVhcyB0aGFuIGNvbXB1dGVyIHNjaWVuY2UgZ3JhZHMuU28gSSBsZWFybmVkIGFuZCBwcmFjdGljZWQuIEV2ZXJ5IGRheS5JIGRldm90ZWQgZW50aXJlIGRheXMgdG8gbGVhcm5pbmcgc29ydGluZyBhbGdvcml0aG1zLiBPdGhlciBkYXlzLCBJIGZvY3VzZWQgb24gdW5kZXJzdGFuZGluZyBob3cgdGhlIGludGVybmV0IHdvcmtlZC5JZiBJIGRpZG7igJl0IGZ1bGx5IHVuZGVyc3RhbmQgYSBjb25jZXB0LCBJ4oCZZCBzcGVuZCB0aGUgZGF5IHdhdGNoaW5nIFlvdVR1YmUgdmlkZW9zIG9yIHNlYXJjaGluZyBTdGFja092ZXJmbG93IHVudGlsIEkgZGlkLkkgZm91bmQgdGhlIGZvbGxvd2luZyBzdHVkeSBtYXRlcmlhbHMgdXNlZnVsOkludGVydmlld0Nha2U6IE15IGZhdm9yaXRlIHJlc291cmNlIGZvciBkYXRhIHN0cnVjdHVyZXMgYW5kIGFsZ29yaXRobXMuIEl0IGJyZWFrcyBkb3duIHNvbHV0aW9ucyBpbnRvIHN0ZXAtYnktc3RlcCBjaHVua3Mg4oCUIGEgZ3JlYXQgYWx0ZXJuYXRpdmUgdG8gQ3JhY2tpbmcgdGhlIENvZGUgSW50ZXJ2aWV3IChDVENJKS4gTXkgb25seSBncmlwZSBpcyB0aGF0IHRoZXkgZG9u4oCZdCBoYXZlIG1vcmUgcHJvYmxlbXMhSGlyZWRJblRlY2jigJlzIFN5c3RlbSBEZXNpZ24gU2VjdGlvbjogQSBncmVhdCBndWlkZSBmb3Igc3lzdGVtIGRlc2lnbiBpbnRlcnZpZXcgcXVlc3Rpb25zLkNvZGVydXN0OiBJZiB5b3XigJlyZSBhdm9pZGluZyBDVENJIGxpa2UgdGhlIHBsYWd1ZSwgQ29kZXJ1c3QgMi4wIG1heSBiZSBwZXJmZWN0IGZvciB5b3UuIEZvciAkNDksIHlvdSBnZXQgc29sdXRpb25zIGluIGFsbW9zdCBhbnkgcHJvZ3JhbW1pbmcgbGFuZ3VhZ2UsIHdpdGggaW50ZXJhY3RpdmUgZGlhZ3JhbXMuUmVkZGl04oCZcyBIb3cgdG8gUHJlcGFyZSBmb3IgVGVjaCBJbnRlcnZpZXdzOiBJIGNvbnN0YW50bHkgdXNlZCB0aGlzIGFzIGEgYmVuY2htYXJrIGZvciBob3cgcHJlcGFyZWQgSSB3YXMuRnJvbnQgRW5kIEludGVydmlldyBRdWVzdGlvbnM6IEFuIGV4aGF1c3RpdmUgbGlzdCBvZiBmcm9udC1lbmQgcXVlc3Rpb25zLkxlZXRjb2RlOiBUaGUgZ28tdG8gcmVzb3VyY2UgZm9yIGFsZ29yaXRobSBhbmQgZGF0YSBzdHJ1Y3R1cmUgcXVlc3Rpb25zLiBZb3UgY2FuIGZpbHRlciBieSBjb21wYW55LCBzbyBmb3IgZXhhbXBsZSwgeW91IGNvdWxkIGdldCBhbGwgdGhlIHF1ZXN0aW9ucyB0aGF0IFViZXIgb3IgR29vZ2xlIHR5cGljYWxseSBhc2suVGFrZWF3YXk6IFRoZXJl4oCZcyBubyBzdWNoIHRoaW5nIGFzIHRvbyBtdWNoIHByZXBhcmF0aW9uLkluc2lnaHQgIzQ6IFB1dCB5b3VyIGJlc3QgZm9vdCBmb3J3YXJkQnJlYWtpbmcgaW50byB0aGUgaW5kdXN0cnkgaXMgaGFyZC4gWW91IGhhdmUgdG8gcGVyZm9ybSB3ZWxsLCBldmVuIHdoZW4geW914oCZcmUgbm90IGZ1bGx5IHByZXBhcmVkLiBJbiBvcmRlciB0byBzdWNjZWVkLCB5b3UgaGF2ZSB0byBiZSB5b3VyIG93biBhZHZvY2F0ZS5TZWxsIFlvdXJzZWxmQXQgSGFjayBSZWFjdG9yLCB3ZeKAmXJlIHRyYWluZWQgdG8gbWFzayBvdXIgaW5leHBlcmllbmNlLiBJbiBvdXIgcGVyc29uYWwgbmFycmF0aXZlcywgd2UgcHVycG9zZWx5IG9taXQgb3VyIGJvb3RjYW1wIGVkdWNhdGlvbi5XaHk/IE90aGVyd2lzZSwgY29tcGFuaWVzIGF1dG9tYXRpY2FsbHkgY2F0ZWdvcml6ZSB1cyBpbnRvIGp1bmlvciBkZXZlbG9wZXIgcm9sZXMgb3IgdGFnIHVzIGFzIOKAnG5vdCBlbm91Z2ggZXhwZXJpZW5jZS7igJ1JbiBvbmUgaW50ZXJ2aWV3IHdpdGggYSBzdGFydHVwLCB0aGUgaW50ZXJ2aWV3IGltbWVkaWF0ZWx5IHdlbnQgc291dGggb25jZSB0aGV5IHJlYWxpemVkIEnigJlkIGRvbmUgYSBib290Y2FtcC4gT25lIGNvbXBhbnkgdXNlZCBpdCBhZ2FpbnN0IG1lIGFuZCBtYWRlIG1lIGEgJDYwayBvZmZlciwgYmVuY2htYXJraW5nIGFnYWluc3QganVuaW9yIGRldmVsb3BlcnMuVWx0aW1hdGVseSwgeW91IG5lZWQgdG8gY29udmluY2UgY29tcGFuaWVzIHRoYXQgeW91IGNhbiBkbyB0aGUgam9iLkF0IHRoZSBzYW1lIHRpbWUsIHlvdSBuZWVkIHRvIGNvbnZpbmNlIHlvdXJzZWxmIHRoYXQgeW91IGNhbiBkbyB0aGUgam9iLllvdSBjYW4uIEZvY3VzIG9uIHlvdXIgbG92ZSBmb3IgcHJvZ3JhbW1pbmcuIEZvY3VzIG9uIHdoYXQgeW914oCZdmUgYnVpbHQgd2l0aCBSZWFjdCBhbmQgTm9kZS4gRm9jdXMgb24gZGVtb25zdHJhdGluZyB5b3VyIGRlZXAga25vd2xlZGdlIGluIEphdmFTY3JpcHQgYW5kIGFueSBvdGhlciBsYW5ndWFnZXMgeW914oCZdmUgbGVhcm5lZC5Pbmx5IHRoZW4gY2FuIHRoZXkganVzdGlmeSBnaXZpbmcgeW91IHRoZSBqb2IuSXTigJlzIGEgVHdvLXdheSBDb252ZXJzYXRpb25JbnRlcnZpZXdpbmcgaXMgYSBtdXR1YWwgZXhwbG9yYXRpb24gb2YgZml0IGJldHdlZW4gYW4gZW1wbG95ZWUgYW5kIGFuIGVtcGxveWVyLiBXaGlsZSBpdOKAmXMgeW91ciBqb2IgdG8gY29udmluY2UgZW1wbG95ZXJzIHRvIGhpcmUgeW91LCBpdOKAmXMgYWxzbyB0aGVpciBqb2IgdG8gd2luIHlvdSBvdmVyLkRvbuKAmXQgYmUgYXNoYW1lZCBvZiB1c2luZyB0aGUgaW50ZXJ2aWV3IGFzIGFuIG9wcG9ydHVuaXR5IHRvIGV2YWx1YXRlIHRoZSBqb2Igb3Bwb3J0dW5pdHkuSSB0YWxrZWQgdG8gYW55IGNvbXBhbnksIGV2ZW4gaWYgSSBoYWQgb25seSB0aGUgc2xpZ2h0ZXN0IGludGVyZXN0LkkgZGlkIG9uLXNpdGVzIGFsbCBvdmVyIHRoZSBjb3VudHJ5IHdpdGggYW55IGNvbXBhbnkgdGhhdCBpbnZpdGVkIG1lIG91dC4gSSBhc2tlZCBxdWVzdGlvbnMsIGFuZCBzdWNrZWQgdXAga25vd2xlZGdlIG9uIGVuZ2luZWVyaW5nIHRlYW0gb3JnYW5pemF0aW9uLCB0ZWNobm9sb2dpZXMgYW5kIHRvb2xzIHVzZWQsIGNvbXBhbnkgY2hhbGxlbmdlcywgYW5kIHN5c3RlbSBhcmNoaXRlY3R1cmUuUHJvLVRpcDogRHVyaW5nIGludGVydmlld3MsIGFzayB0aGUgZm9sbG93aW5nIHF1ZXN0aW9uczpXaGF0IGFyZSBzb21lIHRlY2huaWNhbCBjaGFsbGVuZ2VzIHlvdeKAmXZlIHJlY2VudGx5IGZhY2VkP1doYXQgZG8geW91IGVuam95IGFib3V0IHdvcmtpbmcgYXQgWCBjb21wYW55P0hvdyBhcmUgdGVhbXMgc3RydWN0dXJlZCBhbmQgaG93IGFyZSB0YXNrcyB1c3VhbGx5IGRpdmlkZWQ/SSB0cmVhdGVkIGV2ZXJ5IGludGVyYWN0aW9uIGFzIGEgbGVhcm5pbmcgb3Bwb3J0dW5pdHkuIEVhY2ggaW50ZXJhY3Rpb24gaGVscGVkIG1lIGltcHJvdmUgbXkgcHJlc2VudGF0aW9uLCBpbnRlcnZpZXcsIGFuZCB0ZWNobmljYWwgc2tpbGxzLiBFYWNoIGZhaWx1cmUgaGVscGVkIG1lIGZpbmQgbXkgYmxpbmQgc3BvdHMuVGFrZWF3YXk6IERvbuKAmXQgc2VsbCB5b3Vyc2VsZiBzaG9ydCEgQW5kIHJlbWVtYmVyLCBpdOKAmXMgYSBtdXR1YWwgZXhwbG9yYXRpb24uSW5zaWdodCAjNTogSXTigJlzIGEgbWFyYXRob24sIG5vdCBhIHNwcmludFRoZSBqb3VybmV5IGlzIGJ5IG5vIG1lYW5zIGVhc3kuIEZvciAzIG1vbnRocywgSSBncmluZGVkIDYgZGF5cyBhIHdlZWsuIEJ1dCBJIHRyaWVkIHRvIHRha2UgY2FyZSBvZiBteXNlbGYuV2hhdCBhIHR5cGljYWwgZGF5IGNvdWxkIGxvb2sgbGlrZSBpbiBKYXZhU2NyaXB0U29tZSBkYXlzLCBJ4oCZZCBzdHVkeSB3aXRoIGZyaWVuZHMuIE90aGVyIGRheXMsIEnigJlkIGdvIGZpbmQgYSBjYWZlIGFuZCBzdHVkeSBhbG9uZSwgb3IgaGFuZyBvdXQgYXQgSGFjayBSZWFjdG9y4oCZcyBhbHVtbmkgbG91bmdlLiBBbmQgZXZlcnkgd2VlayBJ4oCZZCBjaGVjayBpbiB3aXRoIG91ciBjYXJlZXIgY291bnNlbG9yIHRvIHRhbGsgYWJvdXQgbXkgcHJvZ3Jlc3MuSXTigJlzIGVhc3kgdG8gYnVybiBvdXQgZHVyaW5nIHRoZSBwcm9jZXNzLiBFYXQgd2VsbCwgc2xlZXAsIGFuZCBleGVyY2lzZS5JdCBjYW4gZ2V0IGxvbmVseS4gU3BlbmQgdGltZSB3aXRoIGZyaWVuZHMgd2hvIGFyZSBnb2luZyB0aHJvdWdoIHRoZSBzYW1lIGV4cGVyaWVuY2UuVGFrZWF3YXk6IFByZXBhcmUgZm9yIHRoZSBsb25nIGdhbWUgYW5kIG1ha2Ugc3VyZSB5b3UgdGFrZSBjYXJlIG9mIHlvdXJzZWxmLkluIHN1bW1hcnksIHRoZSBrZXkgdGFrZWF3YXlzIGFyZTpHZXQgdGhyb3VnaCB0byByZWFsIHBlb3BsZVN0YXJ0IHNtYWxsIGFuZCB3b3JrIHlvdXIgd2F5IHVwU3R1ZHkgbGlrZSB5b3VyIGZ1dHVyZSBqb2IgZGVwZW5kcyBvbiBpdFB1dCB5b3VyIGJlc3QgZm9vdCBmb3J3YXJkSXTigJlzIGEgbWFyYXRob24sIG5vdCBhIHNwcmludFRoZSBwcm9jZXNzIG1heSBzZWVtIGVuZGxlc3MsIGJ1dCB5b3XigJlyZSBnb2luZyB0byBtYWtlIGl0LiBLZWVwIHB1dHRpbmcgaW4gdGhlIGhvdXJzLiBLZWVwIHNlbmRpbmcgaW4gdGhlIGFwcGxpY2F0aW9ucy4gS2VlcCB0YWtpbmcgY2FyaW5nIG9mIHlvdXJzZWxmLiBBbGwgb2YgaXQgcGF5cyBvZmYgaW4gdGhlIGVuZC5BIHNwZWNpYWwgdGhhbmtzIHRvIER5bGFuIFRyYW4sIEthcmVuIFpoYW8sIFJvaGl0ICdTdW5ueScgUmVraGksIEpha2UgUGFjZSwgQW5hbWl0YSBHdWhhLCBTdGVwaGFuaWUgTGl1LCBhbmQgbWFueSBvdGhlcnMuUGxlYXNlIHNoYXJlIHRoaXMgd2l0aCBmcmllbmRzIGdvaW5nIHRocm91Z2ggdGhlIGpvYiBzZWFyY2guIElmIHlvdSBsaWtlIHdoYXQgeW91IHJlYWQsIGhpdCB0aGF0IOKdpCBidXR0b24gYmVsb3cuXCIsXG4gICAgICAgIGZldGNoX3RpbWU6IDY2ODQsXG4gICAgICAgIGJsb2dfaHRtbDpcbiAgICAgICAgICAnPHNlY3Rpb24gY2xhc3M9XCJkaSBkaiBkayBkbCBhayBkbSBidyBuIGRuXCI+PC9zZWN0aW9uPjxzcGFuIGNsYXNzPVwiclwiPjwvc3Bhbj48ZGl2PjxkaXYgY2xhc3M9XCJkbyB1IGRwIGRxIGRyIGRzXCI+PC9kaXY+PGRpdiBjbGFzcz1cImRrIGRsIGRtIGdmXCI+PGRpdiBjbGFzcz1cInIgaCBnIGYgZVwiPjxhc2lkZSBjbGFzcz1cInF6IGRvIHRcIiBzdHlsZT1cIndpZHRoOiA3NjhweDtcIj48ZGl2IGNsYXNzPVwicmMgcmQgZG8gcmUgY2sgYWtcIj48aDQgY2xhc3M9XCJhcyBjdSBjdiBhdSBheFwiPjxzcGFuIGNsYXNzPVwiYnggcmQgY2sgY2MgZmVcIj5Ub3AgaGlnaGxpZ2h0PC9zcGFuPjwvaDQ+PC9kaXY+PC9hc2lkZT48L2Rpdj48L2Rpdj48c2VjdGlvbiBjbGFzcz1cImR0IGR1IGR2IGR3IGR4XCI+PGRpdiBjbGFzcz1cIm4gcFwiPjxkaXYgY2xhc3M9XCJhYyBhZSBhZiBhZyBhaCBkeSBhaiBha1wiPjxkaXY+PGRpdiBpZD1cImJlMThcIiBjbGFzcz1cImR6IGVhIGViIGF0IGVjIGIgZWQgZWUgZWYgZWcgZWggZWkgZWpcIj48aDEgY2xhc3M9XCJlYyBiIGVkIGVrIGViXCI+U3RvcCBVc2luZyBpKysgaW4gWW91ciBMb29wczwvaDE+PC9kaXY+PC9kaXY+PGRpdiBpZD1cIjFmZTVcIiBjbGFzcz1cImVsIGVhIGF4IGF0IGFzIGN1IGVtIGVuIGVvIGVwIGVxIGVyIGVzXCI+PGgyIGNsYXNzPVwiYXMgY3UgZXQgZXUgYXhcIj5XaHkgKytpIGlzIG9mdGVuIGJldHRlciB0aGFuIGkrKyAocHJlLWluY3JlbWVudCB2cy4gcG9zdC1pbmNyZW1lbnQpPC9oMj48L2Rpdj48ZGl2IGNsYXNzPVwiZXZcIj48ZGl2IGNsYXNzPVwibyBuXCI+PGRpdj48YSByZWw9XCJub29wZW5lclwiIGhyZWY9XCIvQGRldmlucz9zb3VyY2U9cG9zdF9wYWdlLS0tLS0xZjkwNjUyMGQ1NDgtLS0tLS0tLS0tLS0tLS0tLS0tLS0tXCI+PGltZyBhbHQ9XCJEZXZpbiBTb25pXCIgY2xhc3M9XCJyIGV3IGV4IGV5XCIgc3JjPVwiaHR0cHM6Ly9taXJvLm1lZGl1bS5jb20vZml0L2MvNDgvNDgvMSpfSFJQdXZRSGg1NDJ3TFp3eU1LUWxnLnBuZ1wiIHdpZHRoPVwiNDhcIiBoZWlnaHQ9XCI0OFwiPjwvYT48L2Rpdj48ZGl2IGNsYXNzPVwiZXogYWsgclwiPjxkaXYgY2xhc3M9XCJuXCI+PGRpdiBzdHlsZT1cImZsZXg6IDEgMSAwJTtcIj48c3BhbiBjbGFzcz1cImFzIGIgYXQgYXUgYXYgYXcgciBlYiBxXCI+PGRpdiBjbGFzcz1cImZhIG4gbyBmYlwiPjxzcGFuIGNsYXNzPVwiYXMgY3UgZmMgYXUgY2MgZmQgZmUgZmYgZmcgZmggZWJcIj48YSBjbGFzcz1cImN5IGN6IGJiIGJjIGJkIGJlIGJmIGJnIGJoIGJpIGZpIGJsIGJtIGRjIGRkXCIgcmVsPVwibm9vcGVuZXJcIiBocmVmPVwiL0BkZXZpbnM/c291cmNlPXBvc3RfcGFnZS0tLS0tMWY5MDY1MjBkNTQ4LS0tLS0tLS0tLS0tLS0tLS0tLS0tLVwiPkRldmluIFNvbmk8L2E+PC9zcGFuPjxkaXYgY2xhc3M9XCJmaiByIGFwIGhcIj48YnV0dG9uIGNsYXNzPVwiZmsgZWIgcSBicSBmbCBmbSBmbiBmbyBiaSBkYyBmcCBmcSBmciBmcyBmdCBmdSBidCBhcyBiIGF0IGZ2IGN2IGF3IGJ1IGJ2IGJ3IGJ4IGJ5IGJsXCI+Rm9sbG93PC9idXR0b24+PC9kaXY+PC9kaXY+PC9zcGFuPjwvZGl2PjwvZGl2PjxzcGFuIGNsYXNzPVwiYXMgYiBhdCBhdSBhdiBhdyByIGF4IGF5XCI+PHNwYW4gY2xhc3M9XCJhcyBjdSBmYyBhdSBjYyBmZCBmZSBmZiBmZyBmaCBheFwiPjxkaXY+PGEgY2xhc3M9XCJjeSBjeiBiYiBiYyBiZCBiZSBiZiBiZyBiaCBiaSBmaSBibCBibSBkYyBkZFwiIHJlbD1cIm5vb3BlbmVyXCIgaHJlZj1cIi9iZXR0ZXItcHJvZ3JhbW1pbmcvc3RvcC11c2luZy1pLWluLXlvdXItbG9vcHMtMWY5MDY1MjBkNTQ4P3NvdXJjZT1wb3N0X3BhZ2UtLS0tLTFmOTA2NTIwZDU0OC0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cIj5Ob3YgNzwvYT4gwrcgMiBtaW4gcmVhZDxzcGFuIHN0eWxlPVwicGFkZGluZy1sZWZ0OiA0cHg7XCI+PHN2ZyBjbGFzcz1cInN0YXItMTVweF9zdmdfX3N2Z0ljb24tdXNlXCIgd2lkdGg9XCIxNVwiIGhlaWdodD1cIjE1XCIgdmlld0JveD1cIjAgMCAxNSAxNVwiIHN0eWxlPVwibWFyZ2luLXRvcDogLTJweDtcIj48cGF0aCBkPVwiTTcuNDQgMi4zMmMuMDMtLjEuMDktLjEuMTIgMGwxLjIgMy41M2EuMjkuMjkgMCAwIDAgLjI2LjJoMy44OGMuMTEgMCAuMTMuMDQuMDQuMUw5LjggOC4zM2EuMjcuMjcgMCAwIDAtLjEuMjlsMS4yIDMuNTNjLjAzLjEtLjAxLjEzLS4xLjA3bC0zLjE0LTIuMThhLjMuMyAwIDAgMC0uMzIgMEw0LjIgMTIuMjJjLS4xLjA2LS4xNC4wMy0uMS0uMDdsMS4yLTMuNTNhLjI3LjI3IDAgMCAwLS4xLS4zTDIuMDYgNi4xNmMtLjEtLjA2LS4wNy0uMTIuMDMtLjEyaDMuODlhLjI5LjI5IDAgMCAwIC4yNi0uMTlsMS4yLTMuNTJ6XCI+PC9wYXRoPjwvc3ZnPjwvc3Bhbj48L2Rpdj48L3NwYW4+PC9zcGFuPjwvZGl2PjwvZGl2PjwvZGl2PjxmaWd1cmUgY2xhc3M9XCJmeCBmeSBmeiBnYSBnYiBnYyBkayBkbCBwYXJhZ3JhcGgtaW1hZ2VcIj48ZGl2IGNsYXNzPVwiZ2QgZ2UgZ2YgZ2cgYWtcIj48ZGl2IGNsYXNzPVwiZGsgZGwgZndcIj48ZGl2IGNsYXNzPVwiZ20gciBnZiBnblwiPjxkaXYgY2xhc3M9XCJnbyByXCI+PGRpdiBjbGFzcz1cImdoIGdpIGRvIHQgdSBnaiBhayBjYyBnayBnbFwiPjxpbWcgY2xhc3M9XCJkbyB0IHUgZ2ogYWsgZ3AgZ3EgYXEgdWlcIiBzcmM9XCJodHRwczovL21pcm8ubWVkaXVtLmNvbS9tYXgvMzAvMCpzcFd5QndObHJMaFVjM0llP3E9MjBcIiB3aWR0aD1cIjUxODRcIiBoZWlnaHQ9XCIzNDU2XCIgcm9sZT1cInByZXNlbnRhdGlvblwiPjwvZGl2PjxpbWcgY2xhc3M9XCJtaiByZiBkbyB0IHUgZ2ogYWsgZ3NcIiB3aWR0aD1cIjUxODRcIiBoZWlnaHQ9XCIzNDU2XCIgcm9sZT1cInByZXNlbnRhdGlvblwiIHNyYz1cImh0dHBzOi8vbWlyby5tZWRpdW0uY29tL21heC81MTg0LzAqc3BXeUJ3TmxyTGhVYzNJZVwiPjxub3NjcmlwdD48L25vc2NyaXB0PjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PjxmaWdjYXB0aW9uIGNsYXNzPVwiYXggZmMgZ3QgZ3UgZ3YgZG0gZGsgZGwgZ3cgZ3ggYXMgY3VcIiBkYXRhLXNlbGVjdGFibGUtcGFyYWdyYXBoPVwiXCI+UGhvdG8gYnkgPGEgaHJlZj1cImh0dHBzOi8vdW5zcGxhc2guY29tL0Bjb2Rlc3Rvcm0/dXRtX3NvdXJjZT1tZWRpdW0mYW1wO3V0bV9tZWRpdW09cmVmZXJyYWxcIiBjbGFzcz1cImN5IGJ5IGd5IGd6IGhhIGhiXCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXIgbm9mb2xsb3dcIj5TYWZhciBTYWZhcm92PC9hPiBvbiA8YSBocmVmPVwiaHR0cHM6Ly91bnNwbGFzaC5jb20/dXRtX3NvdXJjZT1tZWRpdW0mYW1wO3V0bV9tZWRpdW09cmVmZXJyYWxcIiBjbGFzcz1cImN5IGJ5IGd5IGd6IGhhIGhiXCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXIgbm9mb2xsb3dcIj5VbnNwbGFzaDwvYT48L2ZpZ2NhcHRpb24+PC9maWd1cmU+PC9kaXY+PC9kaXY+PC9zZWN0aW9uPjxociBjbGFzcz1cImhjIGN1IGhkIGhlIGhmIGd2IGhnIGhoIGhpIGhqIGhrXCI+PHNlY3Rpb24gY2xhc3M9XCJkdCBkdSBkdiBkdyBkeFwiPjxkaXYgY2xhc3M9XCJuIHBcIj48ZGl2IGNsYXNzPVwiYWMgYWUgYWYgYWcgYWggZHkgYWogYWtcIj48aDEgaWQ9XCI5NGY2XCIgY2xhc3M9XCJobCBobSBlYiBhdCBhcyBobiBobyBocCBocSBociBocyBodCBodSBodiBodyBoeCBoeVwiIGRhdGEtc2VsZWN0YWJsZS1wYXJhZ3JhcGg9XCJcIj5JbnRyb2R1Y3Rpb248L2gxPjxwIGlkPVwiODY5M1wiIGNsYXNzPVwiaHogaWEgZWIgYXQgaWIgYiBpYyBpZCBpZSBpZiBpZyBpaCBpaSBpaiBpayBpbCBpbVwiIGRhdGEtc2VsZWN0YWJsZS1wYXJhZ3JhcGg9XCJcIj5JZiB5b3XigJl2ZSB3cml0dGVuIGEgZm9yLWxvb3AgYmVmb3JlLCB0aGVuIHlvdSBoYXZlIGFsbW9zdCBkZWZpbml0ZWx5IHVzZWQgPGNvZGUgY2xhc3M9XCJnbiBpbiBpbyBpcCBpcSBiXCI+aSsrPC9jb2RlPiBiZWZvcmUgdG8gaW5jcmVtZW50IHlvdXIgbG9vcCB2YXJpYWJsZS48L3A+PHAgaWQ9XCI1NGYwXCIgY2xhc3M9XCJoeiBpYSBlYiBhdCBpYiBiIGljIGlyIGllIGlzIGlnIGl0IGlpIGl1IGlrIGl2IGltXCIgZGF0YS1zZWxlY3RhYmxlLXBhcmFncmFwaD1cIlwiPkhvd2V2ZXIsIGhhdmUgeW91IGV2ZXIgdGhvdWdodCBhYm91dCA8ZW0gY2xhc3M9XCJpd1wiPndoeTwvZW0+IHlvdSBjaG9vc2UgdG8gZG8gaXQgbGlrZSB0aGF0PzwvcD48cCBpZD1cIjUxZGNcIiBjbGFzcz1cImh6IGlhIGViIGF0IGliIGIgaWMgaXIgaWUgaXMgaWcgaXQgaWkgaXUgaWsgaXYgaW1cIiBkYXRhLXNlbGVjdGFibGUtcGFyYWdyYXBoPVwiXCI+Q2xlYXJseSwgdGhlIGVuZCByZXN1bHQgb2YgPGNvZGUgY2xhc3M9XCJnbiBpbiBpbyBpcCBpcSBiXCI+aSsrPC9jb2RlPiBpcyB0aGF0IDxjb2RlIGNsYXNzPVwiZ24gaW4gaW8gaXAgaXEgYlwiPmk8L2NvZGU+IGlzIG9uZSBoaWdoZXIgdGhhbiBpdCB3YXMgYmVmb3JlIOKAlCB3aGljaCBpcyB3aGF0IHdlIHdhbnQuIEJ1dCwgdGhlcmUgYXJlIG1hbnkgd2F5cyB0byBhY2NvbXBsaXNoIHRoaXMsIHN1Y2ggYXMgPGNvZGUgY2xhc3M9XCJnbiBpbiBpbyBpcCBpcSBiXCI+KytpPC9jb2RlPiwgPGNvZGUgY2xhc3M9XCJnbiBpbiBpbyBpcCBpcSBiXCI+aSsrPC9jb2RlPiwgYW5kIGV2ZW4gPGNvZGUgY2xhc3M9XCJnbiBpbiBpbyBpcCBpcSBiXCI+aSA9IGkgKyAxPC9jb2RlPi48L3A+PHAgaWQ9XCI1YTAyXCIgY2xhc3M9XCJoeiBpYSBlYiBhdCBpYiBiIGljIGlyIGllIGlzIGlnIGl0IGlpIGl1IGlrIGl2IGltXCIgZGF0YS1zZWxlY3RhYmxlLXBhcmFncmFwaD1cIlwiPkluIHRoaXMgYXJ0aWNsZSwgSSB3aWxsIGNvdmVyIHR3byBtZXRob2RzIG9mIGFkZGluZyAxLCA8Y29kZSBjbGFzcz1cImduIGluIGlvIGlwIGlxIGJcIj4rK2k8L2NvZGU+LCBhbmQgPGNvZGUgY2xhc3M9XCJnbiBpbiBpbyBpcCBpcSBiXCI+aSsrPC9jb2RlPiwgYW5kIGV4cGxhaW4gd2h5IDxjb2RlIGNsYXNzPVwiZ24gaW4gaW8gaXAgaXEgYlwiPisraTwvY29kZT4gbWF5IGJlIGJldHRlciB0aGFuIDxjb2RlIGNsYXNzPVwiZ24gaW4gaW8gaXAgaXEgYlwiPmkrKzwvY29kZT4gaW4gbW9zdCBzaXR1YXRpb25zLjwvcD48L2Rpdj48L2Rpdj48L3NlY3Rpb24+PGhyIGNsYXNzPVwiaGMgY3UgaGQgaGUgaGYgZ3YgaGcgaGggaGkgaGogaGtcIj48c2VjdGlvbiBjbGFzcz1cImR0IGR1IGR2IGR3IGR4XCI+PGRpdiBjbGFzcz1cIm4gcFwiPjxkaXYgY2xhc3M9XCJhYyBhZSBhZiBhZyBhaCBkeSBhaiBha1wiPjxoMSBpZD1cIjU4NDRcIiBjbGFzcz1cImhsIGhtIGViIGF0IGFzIGhuIGhvIGhwIGhxIGhyIGhzIGh0IGh1IGh2IGh3IGh4IGh5XCIgZGF0YS1zZWxlY3RhYmxlLXBhcmFncmFwaD1cIlwiPlBvc3QtSW5jcmVtZW50IChpKyspPC9oMT48cCBpZD1cIjQxNDlcIiBjbGFzcz1cImh6IGlhIGViIGF0IGliIGIgaWMgaWQgaWUgaWYgaWcgaWggaWkgaWogaWsgaWwgaW1cIiBkYXRhLXNlbGVjdGFibGUtcGFyYWdyYXBoPVwiXCI+VGhlIDxjb2RlIGNsYXNzPVwiZ24gaW4gaW8gaXAgaXEgYlwiPmkrKzwvY29kZT4gbWV0aG9kLCBvciBwb3N0LWluY3JlbWVudCwgaXMgdGhlIG1vc3QgY29tbW9uIHdheS48L3A+PHAgaWQ9XCIxOGMwXCIgY2xhc3M9XCJoeiBpYSBlYiBhdCBpYiBiIGljIGlyIGllIGlzIGlnIGl0IGlpIGl1IGlrIGl2IGltXCIgZGF0YS1zZWxlY3RhYmxlLXBhcmFncmFwaD1cIlwiPkluIHBzdWVkb2NvZGUsIHRoZSBwb3N0LWluY3JlbWVudCBvcGVyYXRvciBsb29rcyByb3VnaGx5IGFzIGZvbGxvd3MgZm9yIGEgdmFyaWFibGUgPGNvZGUgY2xhc3M9XCJnbiBpbiBpbyBpcCBpcSBiXCI+aTwvY29kZT46PC9wPjxwcmUgY2xhc3M9XCJmeCBmeSBmeiBnYSBnYiBpeCBpeSBjbFwiPjxzcGFuIGlkPVwiZDU2NlwiIGNsYXNzPVwiaXogaG0gZWIgYXQgaXEgYiBmYyBqYSBqYiByIGpjXCIgZGF0YS1zZWxlY3RhYmxlLXBhcmFncmFwaD1cIlwiPmludCBqID0gaTs8YnI+aSA9IGkgKyAxOzxicj5yZXR1cm4gajs8L3NwYW4+PC9wcmU+PHAgaWQ9XCJjYzA4XCIgY2xhc3M9XCJoeiBpYSBlYiBhdCBpYiBiIGljIGlyIGllIGlzIGlnIGl0IGlpIGl1IGlrIGl2IGltXCIgZGF0YS1zZWxlY3RhYmxlLXBhcmFncmFwaD1cIlwiPlNpbmNlIHRoZSBwb3N0LWluY3JlbWVudCBvcGVyYXRvciBoYXMgdG8gcmV0dXJuIHRoZSBvcmlnaW5hbCB2YWx1ZSBvZiA8Y29kZSBjbGFzcz1cImduIGluIGlvIGlwIGlxIGJcIj5pPC9jb2RlPiwgYW5kIG5vdCB0aGUgaW5jcmVtZW50ZWQgdmFsdWUgPGNvZGUgY2xhc3M9XCJnbiBpbiBpbyBpcCBpcSBiXCI+aSArIDE8L2NvZGU+LCBpdCBoYXMgdG8gc3RvcmUgdGhlIG9sZCB2ZXJzaW9uIG9mIDxjb2RlIGNsYXNzPVwiZ24gaW4gaW8gaXAgaXEgYlwiPmk8L2NvZGU+LjwvcD48cCBpZD1cIjBhNTlcIiBjbGFzcz1cImh6IGlhIGViIGF0IGliIGIgaWMgaXIgaWUgaXMgaWcgaXQgaWkgaXUgaWsgaXYgaW1cIiBkYXRhLXNlbGVjdGFibGUtcGFyYWdyYXBoPVwiXCI+VGhpcyBtZWFucyB0aGF0IGl0IHR5cGljYWxseSBuZWVkbGVzc2x5IHVzZXMgYWRkaXRpb25hbCBtZW1vcnkgdG8gc3RvcmUgdGhhdCB2YWx1ZSwgc2luY2UsIGluIG1vc3QgY2FzZXMsIHdlIGRvIG5vdCBhY3R1YWxseSB1c2UgdGhlIG9sZCB2ZXJzaW9uIG9mIDxjb2RlIGNsYXNzPVwiZ24gaW4gaW8gaXAgaXEgYlwiPmk8L2NvZGU+LCBhbmQgaXQgaXMgc2ltcGx5IGRpc2NhcmRlZC48L3A+PC9kaXY+PC9kaXY+PC9zZWN0aW9uPjxociBjbGFzcz1cImhjIGN1IGhkIGhlIGhmIGd2IGhnIGhoIGhpIGhqIGhrXCI+PHNlY3Rpb24gY2xhc3M9XCJkdCBkdSBkdiBkdyBkeFwiPjxkaXYgY2xhc3M9XCJuIHBcIj48ZGl2IGNsYXNzPVwiYWMgYWUgYWYgYWcgYWggZHkgYWogYWtcIj48aDEgaWQ9XCJkYWFhXCIgY2xhc3M9XCJobCBobSBlYiBhdCBhcyBobiBobyBocCBocSBociBocyBodCBodSBodiBodyBoeCBoeVwiIGRhdGEtc2VsZWN0YWJsZS1wYXJhZ3JhcGg9XCJcIj5QcmUtSW5jcmVtZW50ICgrK2kpPC9oMT48cCBpZD1cIjBmMTBcIiBjbGFzcz1cImh6IGlhIGViIGF0IGliIGIgaWMgaWQgaWUgaWYgaWcgaWggaWkgaWogaWsgaWwgaW1cIiBkYXRhLXNlbGVjdGFibGUtcGFyYWdyYXBoPVwiXCI+VGhlIDxjb2RlIGNsYXNzPVwiZ24gaW4gaW8gaXAgaXEgYlwiPisraTwvY29kZT4gbWV0aG9kLCBvciBwcmUtaW5jcmVtZW50LCBpcyBtdWNoIGxlc3MgY29tbW9uIGFuZCBpcyB0eXBpY2FsbHkgdXNlZCBieSBvbGRlciBwcm9ncmFtbWVycyBpbiBsYW5ndWFnZXMgc3VjaCBhcyBDIGFuZCBDKysuPC9wPjxwIGlkPVwiMzRmY1wiIGNsYXNzPVwiaHogaWEgZWIgYXQgaWIgYiBpYyBpciBpZSBpcyBpZyBpdCBpaSBpdSBpayBpdiBpbVwiIGRhdGEtc2VsZWN0YWJsZS1wYXJhZ3JhcGg9XCJcIj5JbiBwc3VlZG9jb2RlLCB0aGUgcHJlLWluY3JlbWVudCBvcGVyYXRvciBsb29rcyByb3VnaGx5IGxpa2UgdGhpcyBmb3IgYSB2YXJpYWJsZSA8Y29kZSBjbGFzcz1cImduIGluIGlvIGlwIGlxIGJcIj5pPC9jb2RlPjo8L3A+PHByZSBjbGFzcz1cImZ4IGZ5IGZ6IGdhIGdiIGl4IGl5IGNsXCI+PHNwYW4gaWQ9XCIzYWQ5XCIgY2xhc3M9XCJpeiBobSBlYiBhdCBpcSBiIGZjIGphIGpiIHIgamNcIiBkYXRhLXNlbGVjdGFibGUtcGFyYWdyYXBoPVwiXCI+aSA9IGkgKyAxOzxicj5yZXR1cm4gaTs8L3NwYW4+PC9wcmU+PHAgaWQ9XCJhODQ3XCIgY2xhc3M9XCJoeiBpYSBlYiBhdCBpYiBiIGljIGlyIGllIGlzIGlnIGl0IGlpIGl1IGlrIGl2IGltXCIgZGF0YS1zZWxlY3RhYmxlLXBhcmFncmFwaD1cIlwiPk5vdGFibHksIGhlcmUsIHdlIGRvIG5vdCBoYXZlIHRvIHNhdmUgdGhlIG9sZCB2YWx1ZSBvZiA8Y29kZSBjbGFzcz1cImduIGluIGlvIGlwIGlxIGJcIj5pPC9jb2RlPiDigJQgd2UgY2FuIHNpbXBseSBhZGQgdG8gaXQgYW5kIHJldHVybi4gVGhpcyBhbGlnbnMgbXVjaCBiZXR0ZXIgd2l0aCB0aGUgdHlwaWNhbCB1c2UtY2FzZSBpbiBhIGZvci1sb29wLCBzaW5jZSB3ZSByYXJlbHkgbmVlZCB0aGUgb2xkIHZhbHVlIG9mIDxjb2RlIGNsYXNzPVwiZ24gaW4gaW8gaXAgaXEgYlwiPmk8L2NvZGU+IGluIHRoYXQgY29udGV4dC48L3A+PC9kaXY+PC9kaXY+PC9zZWN0aW9uPjxociBjbGFzcz1cImhjIGN1IGhkIGhlIGhmIGd2IGhnIGhoIGhpIGhqIGhrXCI+PHNlY3Rpb24gY2xhc3M9XCJkdCBkdSBkdiBkdyBkeFwiPjxkaXYgY2xhc3M9XCJuIHBcIj48ZGl2IGNsYXNzPVwiYWMgYWUgYWYgYWcgYWggZHkgYWogYWtcIj48aDEgaWQ9XCI4OGVjXCIgY2xhc3M9XCJobCBobSBlYiBhdCBhcyBobiBobyBocCBocSBociBocyBodCBodSBodiBodyBoeCBoeVwiIGRhdGEtc2VsZWN0YWJsZS1wYXJhZ3JhcGg9XCJcIj5DYXZlYXRzPC9oMT48cCBpZD1cImQ4OGVcIiBjbGFzcz1cImh6IGlhIGViIGF0IGliIGIgaWMgaWQgaWUgaWYgaWcgaWggaWkgaWogaWsgaWwgaW1cIiBkYXRhLXNlbGVjdGFibGUtcGFyYWdyYXBoPVwiXCI+QWZ0ZXIgc2VlaW5nIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gcG9zdC1pbmNyZW1lbnQgYW5kIHByZS1pbmNyZW1lbnQsIG9uZSBtaWdodCBub3RpY2UgdGhhdCwgc2luY2UgdGhlIGNhY2hlZCB2YWx1ZSBvZiA8Y29kZSBjbGFzcz1cImduIGluIGlvIGlwIGlxIGJcIj5pPC9jb2RlPiBpcyBuZXZlciB1c2VkIGluIHBvc3QtaW5jcmVtZW50LCB0aGUgY29tcGlsZXIgd2lsbCBqdXN0IG9wdGltaXplIHRoYXQgbGluZSBhd2F5LCBtYWtpbmcgdGhlIHR3byBvcGVyYXRvcnMgZXF1aXZhbGVudC48L3A+PHAgaWQ9XCI3MzRhXCIgY2xhc3M9XCJoeiBpYSBlYiBhdCBpYiBiIGljIGlyIGllIGlzIGlnIGl0IGlpIGl1IGlrIGl2IGltXCIgZGF0YS1zZWxlY3RhYmxlLXBhcmFncmFwaD1cIlwiPlRoaXMgaXMgbW9zdCBsaWtlbHkgdHJ1ZSBmb3IgcHJpbWl0aXZlIHR5cGVzLCBzdWNoIGFzIGFuIGludGVnZXIuPC9wPjxwIGlkPVwiMTQxZlwiIGNsYXNzPVwiaHogaWEgZWIgYXQgaWIgYiBpYyBpciBpZSBpcyBpZyBpdCBpaSBpdSBpayBpdiBpbVwiIGRhdGEtc2VsZWN0YWJsZS1wYXJhZ3JhcGg9XCJcIj5Ib3dldmVyLCBmb3IgbW9yZSBjb21wbGV4IHR5cGVzLCBzdWNoIGFzIHVzZXItZGVmaW5lZCB0eXBlcyBvciBpdGVyYXRvcnMgd2l0aCB0aGUgPGNvZGUgY2xhc3M9XCJnbiBpbiBpbyBpcCBpcSBiXCI+KzwvY29kZT4gb3BlcmF0aW9uIG92ZXJsb2FkZWQsIHRoZSBjb21waWxlciBtYXkgbm90IGJlIGFibGUgdG8gc2FmZWx5IG9wdGltaXplIHRoZSBjYWNoaW5nIG9wZXJhdGlvbi48L3A+PHAgaWQ9XCI4OTc5XCIgY2xhc3M9XCJoeiBpYSBlYiBhdCBpYiBiIGljIGlyIGllIGlzIGlnIGl0IGlpIGl1IGlrIGl2IGltXCIgZGF0YS1zZWxlY3RhYmxlLXBhcmFncmFwaD1cIlwiPjxtYXJrIGNsYXNzPVwicmEgcmIganhcIj5TbywgaXQgc2VlbXMgdGhhdCBpbiBtb3N0IGNhc2VzLCB0aGUgcHJlLWluY3JlbWVudCBvcGVyYXRvciBpcyBiZXR0ZXIgdGhhbiwgb3IgZXF1YWwgdG8sIHRoZSBwb3N0LWluY3JlbWVudCBvcGVyYXRvciwgYXMgbG9uZyBhcyB5b3UgZG8gbm90IG5lZWQgdGhlIHByZXZpb3VzIHZhbHVlIG9mIHdoYXRldmVyIHlvdSBhcmUgaW5jcmVtZW50aW5nLjwvbWFyaz48L3A+PC9kaXY+PC9kaXY+PC9zZWN0aW9uPjwvZGl2PicsXG4gICAgICAgIGJsb2dfc3R5bGU6IFtcbiAgICAgICAgICBcIlwiLFxuICAgICAgICAgIFwiaHRtbHtib3gtc2l6aW5nOmJvcmRlci1ib3h9KiwgKjpiZWZvcmUsICo6YWZ0ZXJ7Ym94LXNpemluZzppbmhlcml0fWJvZHl7bWFyZ2luOjA7cGFkZGluZzowO3RleHQtcmVuZGVyaW5nOm9wdGltaXplTGVnaWJpbGl0eTstd2Via2l0LWZvbnQtc21vb3RoaW5nOmFudGlhbGlhc2VkO2NvbG9yOnJnYmEoMCwwLDAsMC44KTtwb3NpdGlvbjpyZWxhdGl2ZTttaW4taGVpZ2h0OjEwMHZofWgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIGRsLCBkZCwgb2wsIHVsLCBtZW51LCBmaWd1cmUsIGJsb2NrcXVvdGUsIHAsIHByZSwgZm9ybXttYXJnaW46MH1tZW51LCBvbCwgdWx7cGFkZGluZzowO2xpc3Qtc3R5bGU6bm9uZTtsaXN0LXN0eWxlLWltYWdlOm5vbmV9bWFpbntkaXNwbGF5OmJsb2NrfWF7Y29sb3I6aW5oZXJpdDt0ZXh0LWRlY29yYXRpb246bm9uZX1hLCBidXR0b24sIGlucHV0ey13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjp0cmFuc3BhcmVudH1pbWcsIHN2Z3t2ZXJ0aWNhbC1hbGlnbjptaWRkbGV9YnV0dG9ue2JhY2tncm91bmQ6dHJhbnNwYXJlbnQ7b3ZlcmZsb3c6dmlzaWJsZX1idXR0b24sIGlucHV0LCBvcHRncm91cCwgc2VsZWN0LCB0ZXh0YXJlYXttYXJnaW46MH1cIixcbiAgICAgICAgICBcIkAtd2Via2l0LWtleWZyYW1lcyBrMXswJXt0cmFuc2Zvcm06c2NhbGUoMSk7b3BhY2l0eToxfTcwJXt0cmFuc2Zvcm06c2NhbGUoMS40KTtvcGFjaXR5OjB9MTAwJXtvcGFjaXR5OjB9fUAtbW96LWtleWZyYW1lcyBrMXswJXt0cmFuc2Zvcm06c2NhbGUoMSk7b3BhY2l0eToxfTcwJXt0cmFuc2Zvcm06c2NhbGUoMS40KTtvcGFjaXR5OjB9MTAwJXtvcGFjaXR5OjB9fUBrZXlmcmFtZXMgazF7MCV7dHJhbnNmb3JtOnNjYWxlKDEpO29wYWNpdHk6MX03MCV7dHJhbnNmb3JtOnNjYWxlKDEuNCk7b3BhY2l0eTowfTEwMCV7b3BhY2l0eTowfX1ALXdlYmtpdC1rZXlmcmFtZXMgazF7MCV7dHJhbnNmb3JtOnNjYWxlKDEpO29wYWNpdHk6MX03MCV7dHJhbnNmb3JtOnNjYWxlKDEuNCk7b3BhY2l0eTowfTEwMCV7b3BhY2l0eTowfX1ALW1vei1rZXlmcmFtZXMgazF7MCV7dHJhbnNmb3JtOnNjYWxlKDEpO29wYWNpdHk6MX03MCV7dHJhbnNmb3JtOnNjYWxlKDEuNCk7b3BhY2l0eTowfTEwMCV7b3BhY2l0eTowfX1Aa2V5ZnJhbWVzIGsxezAle3RyYW5zZm9ybTpzY2FsZSgxKTtvcGFjaXR5OjF9NzAle3RyYW5zZm9ybTpzY2FsZSgxLjQpO29wYWNpdHk6MH0xMDAle29wYWNpdHk6MH19QC13ZWJraXQta2V5ZnJhbWVzIGsyezAle3RyYW5zZm9ybTp0cmFuc2xhdGVZKDEwMCUpfTkwJXt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtNSUpfTEwMCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCUpfX1ALW1vei1rZXlmcmFtZXMgazJ7MCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTAwJSl9OTAle3RyYW5zZm9ybTp0cmFuc2xhdGVZKC01JSl9MTAwJXt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwJSl9fUBrZXlmcmFtZXMgazJ7MCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTAwJSl9OTAle3RyYW5zZm9ybTp0cmFuc2xhdGVZKC01JSl9MTAwJXt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwJSl9fUAtd2Via2l0LWtleWZyYW1lcyBrM3swJXt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwJSk7b3BhY2l0eToxfTEwJXt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtNSUpO29wYWNpdHk6MX0xMDAle3RyYW5zZm9ybTp0cmFuc2xhdGVZKDEwMCUpO29wYWNpdHk6MH19QC1tb3ota2V5ZnJhbWVzIGszezAle3RyYW5zZm9ybTp0cmFuc2xhdGVZKDAlKTtvcGFjaXR5OjF9MTAle3RyYW5zZm9ybTp0cmFuc2xhdGVZKC01JSk7b3BhY2l0eToxfTEwMCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTAwJSk7b3BhY2l0eTowfX1Aa2V5ZnJhbWVzIGszezAle3RyYW5zZm9ybTp0cmFuc2xhdGVZKDAlKTtvcGFjaXR5OjF9MTAle3RyYW5zZm9ybTp0cmFuc2xhdGVZKC01JSk7b3BhY2l0eToxfTEwMCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTAwJSk7b3BhY2l0eTowfX1cIixcbiAgICAgICAgICBgLmF7Zm9udC1mYW1pbHk6bWVkaXVtLWNvbnRlbnQtc2Fucy1zZXJpZi1mb250LCAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIFwiU2Vnb2UgVUlcIiwgUm9ib3RvLCBPeHlnZW4sIFVidW50dSwgQ2FudGFyZWxsLCBcIk9wZW4gU2Fuc1wiLCBcIkhlbHZldGljYSBOZXVlXCIsIHNhbnMtc2VyaWZ9LmJ7Zm9udC13ZWlnaHQ6NDAwfS5je2JhY2tncm91bmQtY29sb3I6cmdiYSgyNTUsIDI1NSwgMjU1LCAxKX0ubHtoZWlnaHQ6MTAwdmh9Lm17d2lkdGg6MTAwdnd9Lm57ZGlzcGxheTpmbGV4fS5ve2FsaWduLWl0ZW1zOmNlbnRlcn0ucHtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5xe2ZpbGw6cmdiYSgwLCAwLCAwLCAwLjg0KX0ucntkaXNwbGF5OmJsb2NrfS5ze3Bvc2l0aW9uOmZpeGVkfS50e3RvcDowfS51e2xlZnQ6MH0udntyaWdodDowfS53e3otaW5kZXg6NTAwfS54e2JveC1zaGFkb3c6MCA0cHggMTJweCAwIHJnYmEoMCwgMCwgMCwgMC4wNSl9LmFpe21heC13aWR0aDoxMTkycHh9LmFqe21pbi13aWR0aDowfS5ha3t3aWR0aDoxMDAlfS5hbHtoZWlnaHQ6NjVweH0uYW97ZmxleDoxIDAgYXV0b30uYXB7ZmxleDowIDAgYXV0b30uYXF7dmlzaWJpbGl0eTpoaWRkZW59LmFye21hcmdpbi1sZWZ0OjE2cHh9LmFze2ZvbnQtZmFtaWx5Om1lZGl1bS1jb250ZW50LXNhbnMtc2VyaWYtZm9udCwgXCJMdWNpZGEgR3JhbmRlXCIsIFwiTHVjaWRhIFNhbnMgVW5pY29kZVwiLCBcIkx1Y2lkYSBTYW5zXCIsIEdlbmV2YSwgQXJpYWwsIHNhbnMtc2VyaWZ9LmF0e2ZvbnQtc3R5bGU6bm9ybWFsfS5hdXtsaW5lLWhlaWdodDoyMHB4fS5hdntmb250LXNpemU6MTUuOHB4fS5hd3tsZXR0ZXItc3BhY2luZzowcHh9LmF4e2NvbG9yOnJnYmEoMCwgMCwgMCwgMC41NCl9LmF5e2ZpbGw6cmdiYSgwLCAwLCAwLCAwLjU0KX0uYXp7Y29sb3I6cmdiYSgyOCwgMTUzLCA5OSwgMSl9LmJhe2ZpbGw6cmdiYSgyLCAxODQsIDExNywgMSl9LmJie2ZvbnQtc2l6ZTppbmhlcml0fS5iY3tib3JkZXI6aW5oZXJpdH0uYmR7Zm9udC1mYW1pbHk6aW5oZXJpdH0uYmV7bGV0dGVyLXNwYWNpbmc6aW5oZXJpdH0uYmZ7Zm9udC13ZWlnaHQ6aW5oZXJpdH0uYmd7cGFkZGluZzowfS5iaHttYXJnaW46MH0uYmk6aG92ZXJ7Y3Vyc29yOnBvaW50ZXJ9LmJqOmhvdmVye2NvbG9yOnJnYmEoMTEsIDU5LCA0MCwgMSl9LmJrOmhvdmVye2ZpbGw6cmdiYSgyOCwgMTUzLCA5OSwgMSl9LmJsOmZvY3Vze291dGxpbmU6bm9uZX0uYm06ZGlzYWJsZWR7Y3Vyc29yOmRlZmF1bHR9LmJuOmRpc2FibGVke2NvbG9yOnJnYmEoMywgMTY4LCAxMjQsIDAuNSl9LmJvOmRpc2FibGVke2ZpbGw6cmdiYSgzLCAxNjgsIDEyNCwgMC41KX0uYnB7cGFkZGluZzo4cHggMTZweH0uYnF7YmFja2dyb3VuZDowfS5icntib3JkZXItY29sb3I6cmdiYSgyLCAxODQsIDExNywgMSl9LmJzOmhvdmVye2JvcmRlci1jb2xvcjpyZ2JhKDI4LCAxNTMsIDk5LCAxKX0uYnR7Ym9yZGVyLXJhZGl1czo0cHh9LmJ1e2JvcmRlci13aWR0aDoxcHh9LmJ2e2JvcmRlci1zdHlsZTpzb2xpZH0uYnd7Ym94LXNpemluZzpib3JkZXItYm94fS5ieHtkaXNwbGF5OmlubGluZS1ibG9ja30uYnl7dGV4dC1kZWNvcmF0aW9uOm5vbmV9LmJ6e2JvcmRlci10b3A6MXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xKX0uY2J7aGVpZ2h0OjU0cHh9LmNje292ZXJmbG93OmhpZGRlbn0uY2R7bWFyZ2luLXJpZ2h0OjQwcHh9LmNle2hlaWdodDozNnB4fS5jZnt3aWR0aDoyNzBweH0uY2d7b3ZlcmZsb3c6YXV0b30uY2h7ZmxleDowIDEgYXV0b30uY2l7bGlzdC1zdHlsZS10eXBlOm5vbmV9LmNqe2xpbmUtaGVpZ2h0OjQwcHh9LmNre3doaXRlLXNwYWNlOm5vd3JhcH0uY2x7b3ZlcmZsb3cteDphdXRvfS5jbXthbGlnbi1pdGVtczpmbGV4LXN0YXJ0fS5jbnttYXJnaW4tdG9wOjIwcHh9LmNve3BhZGRpbmctdG9wOjIwcHh9LmNwe2hlaWdodDo4MHB4fS5jcXtoZWlnaHQ6MjBweH0uY3J7bWFyZ2luLXJpZ2h0OjE1cHh9LmNze21hcmdpbi1sZWZ0OjE1cHh9LmN0OmZpcnN0LWNoaWxke21hcmdpbi1sZWZ0OjB9LmN1e2ZvbnQtd2VpZ2h0OjMwMH0uY3Z7Zm9udC1zaXplOjE1cHh9LmN3e3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX0uY3h7bGV0dGVyLXNwYWNpbmc6MXB4fS5jeXtjb2xvcjppbmhlcml0fS5jentmaWxsOmluaGVyaXR9LmRhOmhvdmVye2NvbG9yOnJnYmEoMCwgMCwgMCwgMC45KX0uZGI6aG92ZXJ7ZmlsbDpyZ2JhKDAsIDAsIDAsIDAuOSl9LmRjOmRpc2FibGVke2NvbG9yOnJnYmEoMCwgMCwgMCwgMC41NCl9LmRkOmRpc2FibGVke2ZpbGw6cmdiYSgwLCAwLCAwLCAwLjU0KX0uZGV7bWFyZ2luLWJvdHRvbTowcHh9LmRme2hlaWdodDoxMTlweH0uZGl7cGFkZGluZy1sZWZ0OjI0cHh9LmRqe3BhZGRpbmctcmlnaHQ6MjRweH0uZGt7bWFyZ2luLWxlZnQ6YXV0b30uZGx7bWFyZ2luLXJpZ2h0OmF1dG99LmRte21heC13aWR0aDo3MjhweH0uZG57ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5kb3twb3NpdGlvbjphYnNvbHV0ZX0uZHB7dG9wOmNhbGMoMTAwdmggKyAxMDBweCl9LmRxe2JvdHRvbTpjYWxjKDEwMHZoICsgMTAwcHgpfS5kcnt3aWR0aDoxMHB4fS5kc3twb2ludGVyLWV2ZW50czpub25lfS5kdHt3b3JkLWJyZWFrOmJyZWFrLXdvcmR9LmR1e3dvcmQtd3JhcDpicmVhay13b3JkfS5kdjphZnRlcntkaXNwbGF5OmJsb2NrfS5kdzphZnRlcntjb250ZW50OlwiXCJ9LmR4OmFmdGVye2NsZWFyOmJvdGh9LmR5e21heC13aWR0aDo2ODBweH0uZHp7bGluZS1oZWlnaHQ6MS4yM30uZWF7bGV0dGVyLXNwYWNpbmc6MH0uZWJ7Y29sb3I6cmdiYSgwLCAwLCAwLCAwLjg0KX0uZWN7Zm9udC1mYW1pbHk6bWVkaXVtLWNvbnRlbnQtdGl0bGUtZm9udCwgR2VvcmdpYSwgQ2FtYnJpYSwgXCJUaW1lcyBOZXcgUm9tYW5cIiwgVGltZXMsIHNlcmlmfS5lZHtmb250LXNpemU6NDBweH0uZWp7bWFyZ2luLWJvdHRvbTotMC4yN2VtfS5la3tsaW5lLWhlaWdodDo0OHB4fS5lbHtsaW5lLWhlaWdodDoxLjM5NH0uZW17Zm9udC1zaXplOjI1cHh9LmVze21hcmdpbi1ib3R0b206LTAuNDJlbX0uZXR7Zm9udC1zaXplOjI0cHh9LmV1e2xpbmUtaGVpZ2h0OjMycHh9LmV2e21hcmdpbi10b3A6MzJweH0uZXd7Ym9yZGVyLXJhZGl1czo1MCV9LmV4e2hlaWdodDo0OHB4fS5leXt3aWR0aDo0OHB4fS5lenttYXJnaW4tbGVmdDoxMnB4fS5mYXttYXJnaW4tYm90dG9tOjJweH0uZmN7Zm9udC1zaXplOjE2cHh9LmZke21heC1oZWlnaHQ6MjBweH0uZmV7dGV4dC1vdmVyZmxvdzplbGxpcHNpc30uZmZ7ZGlzcGxheTotd2Via2l0LWJveH0uZmd7LXdlYmtpdC1saW5lLWNsYW1wOjF9LmZoey13ZWJraXQtYm94LW9yaWVudDp2ZXJ0aWNhbH0uZmk6aG92ZXJ7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZX0uZmp7bWFyZ2luLWxlZnQ6OHB4fS5ma3twYWRkaW5nOjBweCA4cHh9LmZse2JvcmRlci1jb2xvcjpyZ2JhKDAsIDAsIDAsIDAuNTQpfS5mbTpob3Zlcntjb2xvcjpyZ2JhKDAsIDAsIDAsIDAuOTcpfS5mbjpob3ZlcntmaWxsOnJnYmEoMCwgMCwgMCwgMC45Nyl9LmZvOmhvdmVye2JvcmRlci1jb2xvcjpyZ2JhKDAsIDAsIDAsIDAuODQpfS5mcDpkaXNhYmxlZHtmaWxsOnJnYmEoMCwgMCwgMCwgMC43Nil9LmZxOmRpc2FibGVke2JvcmRlci1jb2xvcjpyZ2JhKDAsIDAsIDAsIDAuMil9LmZyOmRpc2FibGVke2N1cnNvcjppbmhlcml0fS5mczpkaXNhYmxlZDpob3Zlcntjb2xvcjpyZ2JhKDAsIDAsIDAsIDAuNTQpfS5mdDpkaXNhYmxlZDpob3ZlcntmaWxsOnJnYmEoMCwgMCwgMCwgMC43Nil9LmZ1OmRpc2FibGVkOmhvdmVye2JvcmRlci1jb2xvcjpyZ2JhKDAsIDAsIDAsIDAuMil9LmZ2e2xpbmUtaGVpZ2h0OjE4cHh9LmZ3e21heC13aWR0aDo1MTg0cHh9Lmdje2NsZWFyOmJvdGh9Lmdke3RyYW5zaXRpb246dHJhbnNmb3JtIDMwMG1zIGN1YmljLWJlemllcigwLjIsIDAsIDAuMiwgMSl9Lmdle2N1cnNvcjp6b29tLWlufS5nZntwb3NpdGlvbjpyZWxhdGl2ZX0uZ2d7ei1pbmRleDphdXRvfS5naHtvcGFjaXR5OjB9Lmdpe3RyYW5zaXRpb246b3BhY2l0eSAxMDBtcyA0MDBtc30uZ2p7aGVpZ2h0OjEwMCV9Lmdre3dpbGwtY2hhbmdlOnRyYW5zZm9ybX0uZ2x7dHJhbnNmb3JtOnRyYW5zbGF0ZVooMCl9Lmdte21hcmdpbjphdXRvfS5nbntiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwgMCwgMCwgMC4wNSl9Lmdve3BhZGRpbmctYm90dG9tOjY2LjY2NjY2NjY2NjY2NjY3JX0uZ3B7ZmlsdGVyOmJsdXIoMjBweCl9Lmdxe3RyYW5zZm9ybTpzY2FsZSgxLjEpfS5ncnt2aXNpYmlsaXR5OnZpc2libGV9Lmdze2JhY2tncm91bmQ6cmdiYSgyNTUsIDI1NSwgMjU1LCAxKX0uZ3R7bGluZS1oZWlnaHQ6MS40fS5ndXttYXJnaW4tdG9wOjEwcHh9Lmd2e3RleHQtYWxpZ246Y2VudGVyfS5neXtiYWNrZ3JvdW5kLXJlcGVhdDpyZXBlYXQteH0uZ3p7YmFja2dyb3VuZC1pbWFnZTpsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQscmdiYSgwLCAwLCAwLCAwLjg0KSAxMDAlLHJnYmEoMCwgMCwgMCwgMC44NCkgMCk7YmFja2dyb3VuZC1pbWFnZTp1cmwoJ2RhdGE6aW1hZ2Uvc3ZnK3htbDt1dGY4LDxzdmcgcHJlc2VydmVBc3BlY3RSYXRpbz1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDEgMVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48bGluZSB4MT1cIjBcIiB5MT1cIjBcIiB4Mj1cIjFcIiB5Mj1cIjFcIiBzdHJva2U9XCJyZ2JhKDAsIDAsIDAsIDAuODQpXCIgLz48L3N2Zz4nKX0uaGF7YmFja2dyb3VuZC1zaXplOjFweCAxcHh9Lmhie2JhY2tncm91bmQtcG9zaXRpb246MCAxLjA1ZW07YmFja2dyb3VuZC1wb3NpdGlvbjowIGNhbGMoMWVtICsgMXB4KX0uaGN7Zm9udC1mYW1pbHk6bWVkaXVtLWNvbnRlbnQtc2xhYi1zZXJpZi1mb250LCBHZW9yZ2lhLCBDYW1icmlhLCBcIlRpbWVzIE5ldyBSb21hblwiLCBUaW1lcywgc2VyaWZ9Lmhke2ZvbnQtc2l6ZToyOHB4fS5oZXtib3JkZXI6bm9uZX0uaGZ7bWFyZ2luLXRvcDozMHB4fS5oZzpiZWZvcmV7Y29udGVudDpcIi4uLlwifS5oaDpiZWZvcmV7bGV0dGVyLXNwYWNpbmc6MC42ZW19LmhpOmJlZm9yZXt0ZXh0LWluZGVudDowLjZlbX0uaGo6YmVmb3Jle2ZvbnQtc3R5bGU6aXRhbGljfS5oazpiZWZvcmV7bGluZS1oZWlnaHQ6MS40fS5obHtsaW5lLWhlaWdodDoxLjEyfS5obXtsZXR0ZXItc3BhY2luZzotMC4wMjJlbX0uaG57Zm9udC13ZWlnaHQ6NjAwfS5oeXttYXJnaW4tYm90dG9tOi0wLjI4ZW19Lmh6e2xpbmUtaGVpZ2h0OjEuNTh9Lmlhe2xldHRlci1zcGFjaW5nOi0wLjAwNGVtfS5pYntmb250LWZhbWlseTptZWRpdW0tY29udGVudC1zZXJpZi1mb250LCBHZW9yZ2lhLCBDYW1icmlhLCBcIlRpbWVzIE5ldyBSb21hblwiLCBUaW1lcywgc2VyaWZ9Lmlte21hcmdpbi1ib3R0b206LTAuNDZlbX0uaW57cGFkZGluZzoycHggNHB4fS5pb3tmb250LXNpemU6NzUlfS5pcD4gc3Ryb25ne2ZvbnQtZmFtaWx5OmluaGVyaXR9Lmlxe2ZvbnQtZmFtaWx5Ok1lbmxvLCBNb25hY28sIFwiQ291cmllciBOZXdcIiwgQ291cmllciwgbW9ub3NwYWNlfS5pd3tmb250LXN0eWxlOml0YWxpY30uaXh7cGFkZGluZzoyMHB4fS5peXtiYWNrZ3JvdW5kOnJnYmEoMCwgMCwgMCwgMC4wNSl9Lml6e2xpbmUtaGVpZ2h0OjEuMTh9Lmphe21hcmdpbi10b3A6LTAuMDllbX0uamJ7bWFyZ2luLWJvdHRvbTotMC4wOWVtfS5qY3t3aGl0ZS1zcGFjZTpwcmUtd3JhcH0uamR7d2lsbC1jaGFuZ2U6b3BhY2l0eX0uamV7dG9wOmNhbGMoNjVweCArIDU0cHggKyA0MHB4KX0uamh7d2lkdGg6MTMxcHh9Lmppe3BhZGRpbmctYm90dG9tOjI4cHh9Lmpqe2JvcmRlci1ib3R0b206MXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xKX0uamt7Zm9udC1zaXplOjE4cHh9Lmpse3BhZGRpbmctYm90dG9tOjIwcHh9Lmpte3BhZGRpbmctdG9wOjJweH0uam57bWF4LWhlaWdodDoxMjBweH0uam97LXdlYmtpdC1saW5lLWNsYW1wOjZ9Lmpwe3BhZGRpbmc6NHB4IDEycHh9Lmpxe3BhZGRpbmctdG9wOjI4cHh9Lmpye21hcmdpbi1ib3R0b206MTlweH0uanN7bWFyZ2luLWxlZnQ6LTVweH0uanR7bWFyZ2luLXJpZ2h0OjVweH0uanV7b3V0bGluZTowfS5qdntib3JkZXI6MH0uand7dXNlci1zZWxlY3Q6bm9uZX0uanh7Y3Vyc29yOnBvaW50ZXJ9Lmp5PiBzdmd7cG9pbnRlci1ldmVudHM6bm9uZX0uano6YWN0aXZle2JvcmRlci1zdHlsZTpub25lfS5rYXstd2Via2l0LXVzZXItc2VsZWN0Om5vbmV9LmtiOmZvY3Vze2ZpbGw6cmdiYSgyOCwgMTUzLCA5OSwgMSl9Lmtje21hcmdpbi10b3A6NXB4fS5rZCBidXR0b257dGV4dC1hbGlnbjpsZWZ0fS5rZXt3aWR0aDoxODhweH0ua2Z7bGVmdDo1MCV9Lmtne3RyYW5zZm9ybTp0cmFuc2xhdGVYKDQwNnB4KX0ua2h7dG9wOmNhbGMoNjVweCArIDU0cHggKyAxNHB4KX0ua2p7bWFyZ2luLXRvcDo0MHB4fS5ra3tmbGV4LXdyYXA6d3JhcH0ua2x7bWFyZ2luLXRvcDoyNXB4fS5rbXttYXJnaW4tcmlnaHQ6OHB4fS5rbnttYXJnaW4tYm90dG9tOjhweH0ua297Ym9yZGVyLXJhZGl1czozcHh9Lmtwe3BhZGRpbmc6NXB4IDEwcHh9Lmtxe2xpbmUtaGVpZ2h0OjIycHh9Lmtye21hcmdpbi10b3A6MTVweH0ua3N7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59Lmt0e21hcmdpbi1yaWdodDoxNnB4fS5rdXtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xKX0ua3Z7aGVpZ2h0OjYwcHh9Lmt3e3dpZHRoOjYwcHh9LmxqOmFjdGl2ZXtib3JkZXItc3R5bGU6c29saWR9Lmxre3otaW5kZXg6Mn0ubG17cGFkZGluZy1yaWdodDo4cHh9Lmxue2Rpc3BsYXk6bm9uZX0ubG97cGFkZGluZy10b3A6MzJweH0ubHB7bWFyZ2luLWJvdHRvbToyNXB4fS5scXttYXJnaW4tYm90dG9tOjMycHh9Lmxye21pbi1oZWlnaHQ6ODBweH0ubHd7d2lkdGg6ODBweH0ubHh7cGFkZGluZy1sZWZ0OjEwMnB4fS5sentsZXR0ZXItc3BhY2luZzowLjA1ZW19Lm1he21hcmdpbi1ib3R0b206NnB4fS5tYntsaW5lLWhlaWdodDozNnB4fS5tY3ttYXgtd2lkdGg6NTU1cHh9Lm1ke21heC13aWR0aDo0NTBweH0ubWV7bGluZS1oZWlnaHQ6MjRweH0ubWd7bWF4LXdpZHRoOjU1MHB4fS5taHtwYWRkaW5nLXRvcDoyNXB4fS5taXtjb2xvcjpyZ2JhKDAsIDAsIDAsIDAuNzYpfS5tantvcGFjaXR5OjF9Lm1re2JvcmRlcjoxcHggc29saWQgcmdiYSgyLCAxODQsIDExNywgMSl9Lm1se21hcmdpbi10b3A6NjRweH0ubW17YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsIDAsIDAsIDAuMDIpfS5tbntwYWRkaW5nOjYwcHggMH0ubW97YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsIDAsIDAsIDAuOSl9Lm5me3BhZGRpbmctYm90dG9tOjQ4cHh9Lm5ne2JvcmRlci1ib3R0b206MXB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41NCl9Lm5oe21hcmdpbjowIC0xMnB4fS5uaXttYXJnaW46MCAxMnB4fS5uantmbGV4OjEgMSAwfS5ua3twYWRkaW5nLWJvdHRvbToxMnB4fS5ubDpob3Zlcntjb2xvcjpyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOTkpfS5ubTpob3ZlcntmaWxsOnJnYmEoMjU1LCAyNTUsIDI1NSwgMC45OSl9Lm5uOmRpc2FibGVke2NvbG9yOnJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KX0ubm86ZGlzYWJsZWR7ZmlsbDpyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyl9Lm5we2NvbG9yOnJnYmEoMjU1LCAyNTUsIDI1NSwgMC45OCl9Lm5xe2ZpbGw6cmdiYSgyNTUsIDI1NSwgMjU1LCAwLjk4KX0ubnJ7dGV4dC1hbGlnbjppbmhlcml0fS5uc3tmb250LXNpemU6MjEuNnB4fS5udHtsZXR0ZXItc3BhY2luZzotMC4zMnB4fS5udXtjb2xvcjpyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyl9Lm52e2ZpbGw6cmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpfS5ud3t0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lfS5ueHtwYWRkaW5nLWJvdHRvbTo4cHh9Lm55e3BhZGRpbmctdG9wOjhweH0ubnp7d2lkdGg6MjAwcHh9YCxcbiAgICAgICAgICBcIi5ke2Rpc3BsYXk6bm9uZX0uYWh7bWFyZ2luOjAgNjRweH0uZWl7bWFyZ2luLXRvcDowLjc4ZW19LmVye21hcmdpbi10b3A6MC43NGVtfS5nYnttYXJnaW4tdG9wOjU2cHh9Lmh3e2ZvbnQtc2l6ZTozNHB4fS5oeHttYXJnaW4tdG9wOjEuMjVlbX0uaWt7Zm9udC1zaXplOjIxcHh9Lmlse21hcmdpbi10b3A6MC44NmVtfS5pdnttYXJnaW4tdG9wOjJlbX0ubmN7cGFkZGluZy1sZWZ0OjY0cHh9Lm5ke3BhZGRpbmctcmlnaHQ6NjRweH0ubmV7bWF4LXdpZHRoOjEzMjBweH1cIixcbiAgICAgICAgICBcIi5le2Rpc3BsYXk6bm9uZX0uZ3d7bWFyZ2luLWxlZnQ6YXV0b30uZ3h7dGV4dC1hbGlnbjpjZW50ZXJ9Lm16e3BhZGRpbmctbGVmdDo2NHB4fS5uYXtwYWRkaW5nLXJpZ2h0OjY0cHh9Lm5ie21heC13aWR0aDoxMDgwcHh9XCIsXG4gICAgICAgICAgXCIuZntkaXNwbGF5Om5vbmV9Lm13e3BhZGRpbmctbGVmdDo0OHB4fS5teHtwYWRkaW5nLXJpZ2h0OjQ4cHh9Lm15e21heC13aWR0aDo5MDRweH1cIixcbiAgICAgICAgICBcIi5ne2Rpc3BsYXk6bm9uZX0uYW17aGVpZ2h0OjU2cHh9LmFue2Rpc3BsYXk6ZmxleH0uY2F7ZGlzcGxheTpibG9ja30uZGd7bWFyZ2luLWJvdHRvbTowcHh9LmRoe2hlaWdodDoxMTBweH0ubHN7bWFyZ2luLWJvdHRvbToyNHB4fS5sdHthbGlnbi1pdGVtczpjZW50ZXJ9Lmx1e3dpZHRoOjEwMnB4fS5sdntwb3NpdGlvbjpyZWxhdGl2ZX0ubHl7cGFkZGluZy1sZWZ0OjB9Lm1me21hcmdpbi10b3A6MjRweH0ubXB7cGFkZGluZzozMnB4IDB9Lm10e3BhZGRpbmctbGVmdDoyNHB4fS5tdXtwYWRkaW5nLXJpZ2h0OjI0cHh9Lm12e21heC13aWR0aDo3MjhweH0ub2F7d2lkdGg6MTQwcHh9XCIsXG4gICAgICAgICAgXCIuaHtkaXNwbGF5Om5vbmV9LmFje21hcmdpbjowIDI0cHh9LmVle21hcmdpbi10b3A6MC4zOWVtfS5lbnttYXJnaW4tdG9wOjAuNDJlbX0uZmJ7bWFyZ2luLWJvdHRvbTowcHh9LmZ4e21hcmdpbi10b3A6NDBweH0uaG97Zm9udC1zaXplOjMwcHh9Lmhwe21hcmdpbi10b3A6MC45M2VtfS5pY3tmb250LXNpemU6MThweH0uaWR7bWFyZ2luLXRvcDowLjY3ZW19Lmlye21hcmdpbi10b3A6MS41NmVtfS5tcXtwYWRkaW5nLWxlZnQ6MjRweH0ubXJ7cGFkZGluZy1yaWdodDoyNHB4fS5tc3ttYXgtd2lkdGg6NTUycHh9XCIsXG4gICAgICAgICAgXCIuaXtkaXNwbGF5Om5vbmV9LmFne21hcmdpbjowIDY0cHh9LmVoe21hcmdpbi10b3A6MC43OGVtfS5lcXttYXJnaW4tdG9wOjAuNzRlbX0uZ2F7bWFyZ2luLXRvcDo1NnB4fS5odXtmb250LXNpemU6MzRweH0uaHZ7bWFyZ2luLXRvcDoxLjI1ZW19Lmlpe2ZvbnQtc2l6ZToyMXB4fS5panttYXJnaW4tdG9wOjAuODZlbX0uaXV7bWFyZ2luLXRvcDoyZW19XCIsXG4gICAgICAgICAgXCIuantkaXNwbGF5Om5vbmV9LmFme21hcmdpbjowIDQ4cHh9LmVne21hcmdpbi10b3A6MC43OGVtfS5lcHttYXJnaW4tdG9wOjAuNzRlbX0uZnp7bWFyZ2luLXRvcDo1NnB4fS5oc3tmb250LXNpemU6MzRweH0uaHR7bWFyZ2luLXRvcDoxLjI1ZW19Lmlne2ZvbnQtc2l6ZToyMXB4fS5paHttYXJnaW4tdG9wOjAuODZlbX0uaXR7bWFyZ2luLXRvcDoyZW19XCIsXG4gICAgICAgICAgXCIua3tkaXNwbGF5Om5vbmV9LmFle21hcmdpbjowIDI0cHh9LmVme21hcmdpbi10b3A6MC4zOWVtfS5lb3ttYXJnaW4tdG9wOjAuNDJlbX0uZnl7bWFyZ2luLXRvcDo0MHB4fS5ocXtmb250LXNpemU6MzBweH0uaHJ7bWFyZ2luLXRvcDowLjkzZW19Lmlle2ZvbnQtc2l6ZToxOHB4fS5pZnttYXJnaW4tdG9wOjAuNjdlbX0uaXN7bWFyZ2luLXRvcDoxLjU2ZW19XCIsXG4gICAgICAgICAgXCIuYWJ7ZGlzcGxheTpub25lfVwiLFxuICAgICAgICAgIFwiLnl7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gMzAwbXMgZWFzZX0uent3aWxsLWNoYW5nZTp0cmFuc2Zvcm19Lmpme3RyYW5zaXRpb246b3BhY2l0eSAyMDBtc30ua3h7dHJhbnNpdGlvbjpib3JkZXItY29sb3IgMTUwbXMgZWFzZX0ua3k6OmJlZm9yZXtiYWNrZ3JvdW5kOlxcblwiICtcbiAgICAgICAgICAgIFwiICAgICAgcmFkaWFsLWdyYWRpZW50KGNpcmNsZSwgcmdiYSgyOCwgMTUzLCA5OSwgMSkgNjAlLCB0cmFuc3BhcmVudCA3MCUpXFxuXCIgK1xuICAgICAgICAgICAgJyAgICB9Lmt6OjpiZWZvcmV7Ym9yZGVyLXJhZGl1czo1MCV9LmxhOjpiZWZvcmV7Y29udGVudDpcIlwifS5sYjo6YmVmb3Jle2Rpc3BsYXk6YmxvY2t9LmxjOjpiZWZvcmV7ei1pbmRleDowfS5sZDo6YmVmb3Jle2xlZnQ6MH0ubGU6OmJlZm9yZXtoZWlnaHQ6MTAwJX0ubGY6OmJlZm9yZXtwb3NpdGlvbjphYnNvbHV0ZX0ubGc6OmJlZm9yZXt0b3A6MH0ubGg6OmJlZm9yZXt3aWR0aDoxMDAlfS5saTpob3Zlcjo6YmVmb3Jle2FuaW1hdGlvbjprMSAyMDAwbXMgaW5maW5pdGUgY3ViaWMtYmV6aWVyKC4xLC4xMiwuMjUsMSl9Lmxse3RyYW5zaXRpb246ZmlsbCAyMDBtcyBlYXNlfScsXG4gICAgICAgICAgXCIuamd7ZGlzcGxheTpub25lfVwiLFxuICAgICAgICAgIFwiLmtpe2Rpc3BsYXk6bm9uZX1cIlxuICAgICAgICBdLFxuICAgICAgICBjcmF3bF9zdGF0dXMgOiAnc3VjY2VzcycgIFxuICAgIH1cbl1cblxuY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuICAgIGlucHV0X3RhZzogJycsICAvLyBsb29rIGZvciB0YWdcbiAgICBhdmFpbGFibGVfdGFnczogW10sIC8vcmVsYXRlZCB0YWdzXG4gICAgYXJ0aWNsZXM6IFtdLCAgICAvL2xpc3Qgb2YgYXJ0aWNsZXNcbiAgICBwcmltYXJ5X3RhZzogJycsIC8vdGFnIGZvciB3aGljaCB0aGUgY3VycmVudCByZXN1bHQgaXMgYmVpbmcgZGlzcGxheWVkXG4gICAgZmlsdGVyOiB7XG4gICAgICAgIHdvcmQ6ICcnLFxuICAgICAgICBrZXl3b3JkczogJycsXG4gICAgICAgIGhlYWRsaW5lOiAnJyxcbiAgICAgICAgYXV0aG9yOiAnJyxcbiAgICAgICAgcHVibGlzaGVyOiAnJyxcbiAgICAgICAgaWRlbnRpZmllcjogJydcbiAgICB9LFxuICAgIGZpbHRlcmVkX2FydGljbGVzIDogW10sXG4gICAgc2hvd19maWx0ZXJlZCA6IGZhbHNlLFxuICAgIGJsb2dfaHRtbCA6ICcnLFxuICAgIGJsb2dfc3R5bGUgOiAnJyxcbiAgICBibG9nX3Jlc3BvbnNlIDogJydcbn1cblxuXG5jb25zdCBhcnRpY2xlUmVkdWNlciA9IChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlIGFULlNFVF9JTlBVVF9UQUdTOiByZXR1cm4gdXBkYXRlKHN0YXRlLCB7IGlucHV0X3RhZzogYWN0aW9uLmRhdGEudmFsdWUgfSk7IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgYVQuU0VUX0FWQUlMQUJMRV9UQUdTOiByZXR1cm4gdXBkYXRlKHN0YXRlLCB7IGF2YWlsYWJsZV90YWdzOiBbLi4uYWN0aW9uLmRhdGFdIH0pOyBicmVhaztcblxuICAgICAgICBjYXNlIGFULlNFVF9QUklNQVJZX1RBRzogcmV0dXJuIHVwZGF0ZShzdGF0ZSwgeyBwcmltYXJ5X3RhZzogYWN0aW9uLmRhdGEgfSk7IGJyZWFrO1xuXG5cbiAgICAgICAgY2FzZSBhVC5QVVNIX0FSVElDTEU6IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1N0YXRlID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUpO1xuXG4gICAgICAgICAgICBzd2l0Y2goYWN0aW9uLmRhdGEuY3Jhd2xfc3RhdHVzKXtcbiAgICAgICAgICAgICAgICBjYXNlIFwid2FpdFwiIDoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdfYXJ0aWNsZXMgPSBbLi4ubmV3U3RhdGUuYXJ0aWNsZXMsIHsgLi4uYWN0aW9uLmRhdGEgfV07XG4gICAgICAgICAgICAgICAgICAgIG5ld1N0YXRlLmFydGljbGVzID0gbmV3X2FydGljbGVzO1xuICAgICAgICAgICAgICAgIH1icmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwicGVuZGluZ1wiIDoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGluZGV4T2ZGaXJzdCh7YXJ0aWNsZXMgOiBzdGF0ZS5hcnRpY2xlcywgc3RhdHVzIDogJ3dhaXQnIH0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdfYXJ0aWNsZXMgPSBbLi4ubmV3U3RhdGUuYXJ0aWNsZXNdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdfYXJ0aWNsZSA9IHsuLi5hY3Rpb24uZGF0YX07XG4gICAgICAgICAgICAgICAgICAgIG5ld19hcnRpY2xlc1tpbmRleF0gPSBuZXdfYXJ0aWNsZTtcbiAgICAgICAgICAgICAgICAgICAgbmV3U3RhdGUuYXJ0aWNsZXMgPSBuZXdfYXJ0aWNsZXM7XG4gICAgICAgICAgICAgICAgfWJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJjcmF3bGluZ1wiIDoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGFjdGlvbi5kYXRhLmluZGV4O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdfYXJ0aWNsZXMgPSBbLi4ubmV3U3RhdGUuYXJ0aWNsZXMgXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3X2FydGljbGUgPSBuZXdfYXJ0aWNsZXNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBuZXdfYXJ0aWNsZS5jcmF3bF9zdGF0dXMgPSAnY3Jhd2xpbmcnO1xuICAgICAgICAgICAgICAgICAgICBuZXdfYXJ0aWNsZXNbaW5kZXhdID0gbmV3X2FydGljbGU7XG4gICAgICAgICAgICAgICAgICAgIG5ld1N0YXRlLmFydGljbGVzID0gbmV3X2FydGljbGVzO1xuICAgICAgICAgICAgICAgIH1icmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwic3VjY2Vzc1wiIDoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGluZGV4T2ZBcnRpY2xlSWQoe2FydGljbGVzOiBzdGF0ZS5hcnRpY2xlcywgaWQgOiBhY3Rpb24uZGF0YS5pZGVudGlmaWVyIH0pO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbmV3X2FydGljbGVzID0gWy4uLnN0YXRlLmFydGljbGVzXTtcbiAgICAgICAgICAgICAgICAgICAgbmV3X2FydGljbGVzW2luZGV4XSA9IHsuLi5hY3Rpb24uZGF0YX07XG4gICAgICAgICAgICAgICAgICAgIG5ld1N0YXRlLmFydGljbGVzID0gbmV3X2FydGljbGVzO1xuICAgICAgICAgICAgICAgIH1icmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiZXJyXCIgOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gaW5kZXhPZkFydGljbGVJZCh7YXJ0aWNsZXMgOiBzdGF0ZS5hcnRpY2xlcywgc3RhdHVzIDogJ2NyYXdsaW5nJ30pO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbmV3X2FydGljbGVzID0gWy4uLnN0YXRlLmFydGljbGVzXTtcbiAgICAgICAgICAgICAgICAgICAgbmV3X2FydGljbGVzW2luZGV4XSA9IHsuLi5hY3Rpb24uZGF0YX07XG4gICAgICAgICAgICAgICAgICAgIG5ld1N0YXRlLmFydGljbGVzID0gbmV3X2FydGljbGVzO1xuICAgICAgICAgICAgICAgIH1icmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICAgICAgfWJyZWFrO1xuXG4gICAgICAgIGNhc2UgYVQuU0VUX0FSVElDTEVTOiByZXR1cm4gdXBkYXRlKHN0YXRlLCB7YXJ0aWNsZXMgOiBbLi4uYWN0aW9uLmRhdGFdIH0pIDticmVhaztcblxuICAgICAgICBjYXNlIGFULlNFVF9GSUxURVJfSU5QVVQgOiB7XG4gICAgICAgICAgICBjb25zdCBuZXdTdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld0ZpbHRlciA9IE9iamVjdC5hc3NpZ24oe30sIG5ld1N0YXRlLmZpbHRlcik7XG4gICAgICAgICAgICBuZXdGaWx0ZXJbYWN0aW9uLmRhdGEua2V5XSA9IGFjdGlvbi5kYXRhLnZhbHVlXG4gICAgICAgICAgICBuZXdTdGF0ZS5maWx0ZXIgPSBuZXdGaWx0ZXI7XG4gICAgICAgICAgICByZXR1cm4gbmV3U3RhdGU7XG4gICAgICAgIH1icmVhaztcblxuICAgICAgICBjYXNlIGFULlNFVF9TSE9XX0ZJTFRFUkVEIDogcmV0dXJuIHVwZGF0ZShzdGF0ZSwge3Nob3dfZmlsdGVyZWQgOiBhY3Rpb24uZGF0YSB9KTsgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBhVC5TRVRfRklMVEVSRURfQVJUSUNMRVMgOiByZXR1cm4gdXBkYXRlKHN0YXRlLCB7ZmlsdGVyZWRfYXJ0aWNsZXMgOiBbLi4uYWN0aW9uLmRhdGFdfSk7IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgYVQuU0VUX0JMT0dfSFRNTCA6IHJldHVybiB1cGRhdGUoc3RhdGUsIHtibG9nX2h0bWwgOiBhY3Rpb24uZGF0YSB9KTsgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBhVC5TRVRfQkxPR19TVFlMRSA6IHJldHVybiB1cGRhdGUoc3RhdGUsIHtibG9nX3N0eWxlIDogYWN0aW9uLmRhdGEgfSk7IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgYVQuU0VUX0JMT0dfUkVTUE9OU0UgOiByZXR1cm4gdXBkYXRlKHN0YXRlLCB7YmxvZ19yZXNwb25zZSA6IGFjdGlvbi5kYXRhIH0pOyBicmVhaztcbiAgICAgICAgXG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiBzdGF0ZTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFydGljbGVSZWR1Y2VyOyIsImltcG9ydCAqIGFzIGFUIGZyb20gXCIuLi91dGlscy9hY3Rpb25UeXBlc1wiO1xuXG5jb25zdCB1cGRhdGUgPSAocHJldlN0YXRlLCBuZXdTdGF0ZSkgPT4gKHsgLi4ucHJldlN0YXRlLCAuLi5uZXdTdGF0ZSB9KTtcblxuY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuICAgIGFjdGl2aXR5IDogW11cbn1cblxuXG5cbmNvbnN0IHVzZXJSZWR1Y2VyID0gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgYVQuU0VUX0FDVElWSVRZOiByZXR1cm4gdXBkYXRlKHN0YXRlLCB7IGFjdGl2aXR5OiBbLi4uYWN0aW9uLmRhdGFdIH0pOyBicmVhaztcblxuICAgICAgICBjYXNlIGFULlBVU0hfQUNUSVZJVFk6IHJldHVybiB1cGRhdGUoc3RhdGUsIHsgYWN0aXZpdHk6IFsuLi5zdGF0ZS5hY3Rpdml0eSwgYWN0aW9uLmRhdGFdIH0pOyBicmVhaztcblxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gc3RhdGU7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB1c2VyUmVkdWNlcjsiLCJpbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyBjb25uZWN0Um91dGVyIH0gZnJvbSAnY29ubmVjdGVkLXJlYWN0LXJvdXRlcic7XG5pbXBvcnQgYXJ0aWNsZVJlZHVjZXIgZnJvbSAnLi9jb21wb25lbnRzL3JlZHVjZXJzL2FydGljbGUtcmVkdWNlcic7XG5pbXBvcnQgdXNlclJlZHVjZXIgZnJvbSAnLi9jb21wb25lbnRzL3JlZHVjZXJzL3VzZXItcmVkdWNlcic7XG5cbmNvbnN0IHJvb3RSZWR1Y2VyID0gKGhpc3RvcnkpID0+KCBjb21iaW5lUmVkdWNlcnMoe1xuICAgIHJvdXRlcjogY29ubmVjdFJvdXRlcihoaXN0b3J5KSxcbiAgICBhcnRpY2xlcyA6IGFydGljbGVSZWR1Y2VyLFxuICAgIHVzZXIgOiB1c2VyUmVkdWNlclxufSkpXG5cbmV4cG9ydCBkZWZhdWx0IHJvb3RSZWR1Y2VyO1xuIiwiaW1wb3J0IHsgcm91dGVyTWlkZGxld2FyZSB9IGZyb20gJ2Nvbm5lY3RlZC1yZWFjdC1yb3V0ZXInO1xuaW1wb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnkgfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCB7IGFwcGx5TWlkZGxld2FyZSwgY3JlYXRlU3RvcmUgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyBjb21wb3NlV2l0aERldlRvb2xzIH0gZnJvbSAncmVkdXgtZGV2dG9vbHMtZXh0ZW5zaW9uJztcbmltcG9ydCB0aHVuayBmcm9tICdyZWR1eC10aHVuayc7XG5pbXBvcnQgcm9vdFJlZHVjZXIgZnJvbSAnLi9yb290LXJlZHVjZXInO1xuXG5cblxuZXhwb3J0IGNvbnN0IGhpc3RvcnkgPSBjcmVhdGVCcm93c2VySGlzdG9yeSgpO1xuXG5jb25zdCBjb25maWd1cmVTdG9yZSA9ICgpID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVN0b3JlKFxuICAgIHJvb3RSZWR1Y2VyKGhpc3RvcnkpLFxuICAgIGNvbXBvc2VXaXRoRGV2VG9vbHMoXG4gICAgICBhcHBseU1pZGRsZXdhcmUoXG4gICAgICAgIHJvdXRlck1pZGRsZXdhcmUoaGlzdG9yeSksXG4gICAgICAgIHRodW5rXG4gICAgICApXG5cbiAgICApXG4gIClcbn1cblxuZXhwb3J0IGNvbnN0IHN0b3JlID0gY29uZmlndXJlU3RvcmUoKTsiLCJleHBvcnQgY29uc3QgYmxpbmtfbG9nbz0gKCkgPT4ge1xuICAgIGNvbnN0IGxvZ28gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9nby1pZGVudGlmaWVyJyk7XG4gICAgbG9nby5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImxvZ28tYmxpbmtcIik7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGxvZ28uc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgJycpO1xuICAgIH0sIDEwMDApO1xufVxuXG5leHBvcnQgY29uc3QgYmxpbmtfZGVzYz0gKCkgPT4ge1xuICAgIGNvbnN0IGxvZ28gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9nby1kZXNjJyk7XG4gICAgY29uc3QgbmF2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25hdicpO1xuICAgIGxvZ28uc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJsb2dvLWRlc2MtYmxpbmtcIik7XG4gICAgbmF2LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwibmF2IGxvZ28tZGVzYy1ibGlua1wiKTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgbG9nby5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCAnJyk7XG4gICAgICAgIG5hdi5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCAnbmF2Jyk7XG4gICAgfSwgMTAwMCk7XG59XG5cbiIsImltcG9ydCAqIGFzIGFUUyBmcm9tICcuL3V0aWxzL2FjdGlvblR5cGVzU29ja2V0JztcbmltcG9ydCB7c3RvcmV9IGZyb20gJy4uL3N0b3JlJztcbmltcG9ydCAqIGFzIGFydGljbGVBY3Rpb25zIGZyb20gJy4vaG9tZS9hcnRpY2xlLWFjdGlvbnMnO1xuaW1wb3J0IHsgTm90aWZ5TWUgfSBmcm9tICcuL2NvbW1vbi9ub3RpZnlNZSc7XG5pbXBvcnQgeyBibGlua19sb2dvLCBibGlua19kZXNjIH0gZnJvbSAnLi91dGlscy9lZmZlY3RzJztcblxuY29uc3Qgc29ja2V0RXZlbnRzID0gKHNvY2tldCkgPT4ge1xuXG4gICAgc29ja2V0Lm9uKGFUUy5GRVRDSF9NT1JFX0xJTktTX1NVQ0NFU1MsIChkYXRhKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbRkVUQ0hfTU9SRV9MSU5LU19TVUNDRVNTXTogJyAsZGF0YSk7XG4gICAgICAgIGNvbnN0IHtsaW5rcywgdGFnIH0gPSBkYXRhO1xuICAgICAgICBibGlua19kZXNjKCk7XG4gICAgICAgIGNvbnN0IHtwcmltYXJ5X3RhZ30gPSBzdG9yZS5nZXRTdGF0ZSgpLmFydGljbGVzO1xuXG4gICAgICAgIGlmKHByaW1hcnlfdGFnID09PSB0YWcpe1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goYXJ0aWNsZUFjdGlvbnMucHVzaFBlbmRpbmdBcnRpY2xlTGlzdCh7IGxpbmtzIH0pKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgc29ja2V0Lm9uKGFUUy5GRVRDSF9NT1JFX0xJTktTX0ZBSUwsIChkYXRhKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbRkVUQ0hfTU9SRV9MSU5LU19GQUlMXTogJyAsZGF0YSk7XG4gICAgICAgIE5vdGlmeU1lKFwiZXJyb3JcIiwgXCJFcnJvciBmZXRjaGluZyBsaW5rcy5cIik7XG4gICAgfSk7XG4gICAgXG5cbiAgICBzb2NrZXQub24oYVRTLkNSQVdMX1NUT1JZX1NVQ0NFU1MsIChkYXRhKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbQ1JBV0xfU1RPUllfU1VDQ0VTU106ICcsIGRhdGEpO1xuICAgICAgICBjb25zdCB7YXJ0aWNsZSwgdGFnfSA9IGRhdGE7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdhcnRpY2xlIDogJywgYXJ0aWNsZSApO1xuICAgICAgICBibGlua19kZXNjKCk7XG4gICAgICAgIGNvbnN0IHtwcmltYXJ5X3RhZ30gPSBzdG9yZS5nZXRTdGF0ZSgpLmFydGljbGVzO1xuICAgICAgICBzdG9yZS5kaXNwYXRjaChhcnRpY2xlQWN0aW9ucy5zdGFydENyYXdsaW5nKCkgKTtcbiAgICAgICAgaWYocHJpbWFyeV90YWcgPT09IHRhZyl7XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChhcnRpY2xlQWN0aW9ucy5wdXNoQXJ0aWNsZSh7YXJ0aWNsZX0pKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgc29ja2V0Lm9uKGFUUy5DUkFXTF9TVE9SWV9GQUlMLCAoZGF0YSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnW0NSQVdMX1NUT1JZX0ZBSUxdOiAnICxkYXRhKTtcbiAgICAgICAgTm90aWZ5TWUoXCJlcnJvclwiLCBcIlVuYWJsZSB0byBjcmF3bCBzdG9yeS5cIik7XG5cbiAgICAgICAgc3RvcmUuZGlzcGF0Y2goYXJ0aWNsZUFjdGlvbnMuc3RhcnRDcmF3bGluZygpICk7XG4gICAgfSk7XG4gICAgXG5cbiAgICBzb2NrZXQub24oYVRTLkdFVF9SRUxBVEVEX1RBR1NfU1VDQ0VTUywgKGRhdGEpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ1tHRVRfUkVMQVRFRF9UQUdTX1NVQ0NFU1NdOiAnKTtcbiAgICAgICAgY29uc3Qge3JlbGF0ZWRfdGFnc30gPSBkYXRhO1xuICAgICAgICBibGlua19kZXNjKCk7XG4gICAgICAgIHN0b3JlLmRpc3BhdGNoKGFydGljbGVBY3Rpb25zLnNldFJlbGF0ZWRUYWdzKHtyZWxhdGVkX3RhZ3N9KSk7XG4gICAgfSk7XG5cblxuICAgIHNvY2tldC5vbihhVFMuQkxPR19IVE1MX1NVQ0NFU1MsIChkYXRhKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbQkxPR19IVE1MX1NVQ0NFU1NdOiAnKTtcbiAgICAgICAgY29uc3Qge2Jsb2dfaHRtbCwgYmxvZ19zdHlsZX0gPSBkYXRhO1xuICAgICAgICBibGlua19kZXNjKCk7XG4gICAgICAgIHN0b3JlLmRpc3BhdGNoKGFydGljbGVBY3Rpb25zLnNldEJsb2dIdG1sKHtibG9nX2h0bWx9KSk7XG4gICAgICAgIHN0b3JlLmRpc3BhdGNoKGFydGljbGVBY3Rpb25zLnNldEJsb2dTdHlsZSh7IGJsb2dfc3R5bGV9KSk7XG4gICAgfSk7XG4gICAgXG4gICAgc29ja2V0Lm9uKGFUUy5CTE9HX0hUTUxfRkFJTCwgKGRhdGEpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ1tCTE9HX0hUTUxfRkFJTF06ICcgLGRhdGEpO1xuICAgICAgICBOb3RpZnlNZShcImVyclwiLCBcIkVycm9yIGZldGNoaW5nIGJsb2cgaHRtbC5cIik7XG4gICAgfSk7XG5cblxuICAgIHNvY2tldC5vbihhVFMuR0VUX1JFU1BPTlNFU19TVUNDRVNTLCAoZGF0YSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnW0dFVF9SRVNQT05TRVNfU1VDQ0VTU106ICcpO1xuICAgICAgICBjb25zdCB7YmxvZ19yZXNwb25zZX0gPSBkYXRhO1xuICAgICAgICBibGlua19kZXNjKCk7XG4gICAgICAgIHN0b3JlLmRpc3BhdGNoKGFydGljbGVBY3Rpb25zLnNldEJsb2dSZXNwb25zZSh7YmxvZ19yZXNwb25zZX0pKTtcbiAgICB9KTtcbiAgICBcbiAgICBzb2NrZXQub24oYVRTLkdFVF9SRVNQT05TRVNfRkFJTCwgKGRhdGEpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ1tHRVRfUkVTUE9OU0VTX0ZBSUxdOiAnICxkYXRhKTtcbiAgICAgICAgTm90aWZ5TWUoXCJlcnJcIiwgXCJFcnJvciBmZXRjaGluZyByZXNwb25zZS5cIik7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNvY2tldEV2ZW50czsiLCJcblxuZXhwb3J0IGNvbnN0IEZFVENIX01PUkVfTElOS1MgPSAgJ0ZFVENIX01PUkVfTElOS1MnO1xuZXhwb3J0IGNvbnN0IEZFVENIX01PUkVfTElOS1NfU1VDQ0VTUyA9ICAnRkVUQ0hfTU9SRV9MSU5LU19TVUNDRVNTJztcbmV4cG9ydCBjb25zdCBGRVRDSF9NT1JFX0xJTktTX0ZBSUwgPSAgJ0ZFVENIX01PUkVfTElOS1NfRkFJTCc7XG5cblxuZXhwb3J0IGNvbnN0IEdFVF9SRUxBVEVEX1RBR1NfU1VDQ0VTUyA9ICAnR0VUX1JFTEFURURfVEFHU19TVUNDRVNTJztcblxuXG5leHBvcnQgY29uc3QgR0VUX1JFU1BPTlNFUyA9ICAnR0VUX1JFU1BPTlNFUyc7XG5leHBvcnQgY29uc3QgR0VUX1JFU1BPTlNFU19TVUNDRVNTID0gICdHRVRfUkVTUE9OU0VTX1NVQ0NFU1MnO1xuZXhwb3J0IGNvbnN0IEdFVF9SRVNQT05TRVNfRkFJTCA9ICAnR0VUX1JFU1BPTlNFU19GQUlMJztcblxuXG5leHBvcnQgY29uc3QgQ1JBV0xfU1RPUlkgPSAgJ0NSQVdMX1NUT1JZJztcbmV4cG9ydCBjb25zdCBDUkFXTF9TVE9SWV9TVUNDRVNTID0gICdDUkFXTF9TVE9SWV9TVUNDRVNTJztcbmV4cG9ydCBjb25zdCBDUkFXTF9TVE9SWV9GQUlMID0gICdDUkFXTF9TVE9SWV9GQUlMJztcblxuXG5leHBvcnQgY29uc3QgQkxPR19IVE1MID0gICdCTE9HX0hUTUwnO1xuZXhwb3J0IGNvbnN0IEJMT0dfSFRNTF9TVUNDRVNTID0gICdCTE9HX0hUTUxfU1VDQ0VTUyc7XG5leHBvcnQgY29uc3QgQkxPR19IVE1MX0ZBSUwgPSAgJ0JMT0dfSFRNTF9GQUlMJzsiLCJpbXBvcnQgY29uZmlnIGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgKiBhcyBzb2NrZXRJbyBmcm9tICdzb2NrZXQuaW8tY2xpZW50JztcbmltcG9ydCBzb2NrZXRTZXJ2aWNlc0xpc3RlbmVyIGZyb20gJy4vY29tcG9uZW50cy9zb2NrZXRFdmVudHMnO1xuXG5jb25zdCBvcHRpb25zID0ge1xuICAgIGZvcmNlTmV3IDogdHJ1ZSxcbiAgICB0cmFuc3BvcnRzOiBbJ3dlYnNvY2tldCddXG59XG5cbmNvbnN0IHNvY2tldCA9IHNvY2tldElvKGNvbmZpZy5TRVJWRVJfVVJMICsgXCI6XCIgKyBjb25maWcuU0VSVkVSX1BPUlQsIG9wdGlvbnMpO1xuc29ja2V0U2VydmljZXNMaXN0ZW5lcihzb2NrZXQpO1xuXG5leHBvcnQgZGVmYXVsdCBzb2NrZXQ7IiwiaW1wb3J0IHsgZ2V0VXNlckFjdGl2aXR5IH0gZnJvbSBcIi4vY29tbW9uL2FwaS9hcGlcIlxuaW1wb3J0IHsgTm90aWZ5TWUgfSBmcm9tIFwiLi9jb21tb24vbm90aWZ5TWVcIjtcbmltcG9ydCAqIGFzIGFUIGZyb20gJy4vdXRpbHMvYWN0aW9uVHlwZXMnO1xuaW1wb3J0IHsgbHNfZ2V0IH0gZnJvbSBcIi4vc2VydmljZXMvbHMtc2VydmljZVwiO1xuaW1wb3J0IGNvbmZpZyBmcm9tICcuLi8uLi9jb25maWcnO1xuXG5leHBvcnQgY29uc3QgZ2V0QWN0aXZpdHkgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGFzeW5jIGRpc3BhdGNoID0+IHtcbiAgICAgICAgaWYobHNfZ2V0KGNvbmZpZy5UT0tFTikpe1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBnZXRVc2VyQWN0aXZpdHkoKTtcbiAgICAgICAgICAgIGNvbnN0IHtkYXRhLCBtc2csIHN0YXR1c30gPSByZXNwb25zZS5kYXRhO1xuICAgIFxuICAgICAgICAgICAgaWYoIXN0YXR1cyl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE5vdGlmeU1lKFwiZXJyb3JcIiwgbXNnLnRvU3RyaW5nKCkgKTsgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnYWN0aXZpdHkgZGF0YTonLCBkYXRhKTtcbiAgICAgICAgICAgIGRpc3BhdGNoKF9zZXRBY3Rpdml0eSh7a2V5d29yZHM6IGRhdGF9KSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNvbnN0IF9zZXRBY3Rpdml0eSA9ICh7a2V5d29yZHN9KSA9PiAoe1xuICAgIHR5cGUgOiBhVC5TRVRfQUNUSVZJVFksXG4gICAgZGF0YSA6IGtleXdvcmRzXG59KVxuXG5leHBvcnQgY29uc3QgcHVzaEFjdGl2aXR5ID0gKHtrZXl3b3JkfSkgPT4ge1xuICAgIHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XG4gICAgICAgIGlmIChnZXRTdGF0ZSgpLnVzZXIuYWN0aXZpdHkuaW5kZXhPZihrZXl3b3JkKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKF9wdXNoQWN0aXZpdHkoeyBrZXl3b3JkIH0pKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmNvbnN0IF9wdXNoQWN0aXZpdHkgPSAoe2tleXdvcmR9KSA9PiAoe1xuICAgIHR5cGUgOiBhVC5QVVNIX0FDVElWSVRZLFxuICAgIGRhdGEgOiBrZXl3b3JkXG59KVxuXG4iLCJpbXBvcnQgKiBhcyBhVCBmcm9tIFwiLi4vdXRpbHMvYWN0aW9uVHlwZXNcIjtcbmltcG9ydCBzb2NrZXQgZnJvbSAnLi4vLi4vc29ja2V0SGFuZGxlcic7XG5pbXBvcnQgKiBhcyBhVFMgZnJvbSAnLi4vdXRpbHMvYWN0aW9uVHlwZXNTb2NrZXQnO1xuaW1wb3J0IGNvbmZpZyBmcm9tICcuLi8uLi8uLi9jb25maWcnO1xuaW1wb3J0IHsgbHNfZ2V0IH0gZnJvbSBcIi4uL3NlcnZpY2VzL2xzLXNlcnZpY2VcIjtcbmltcG9ydCAqIGFzIGluZGV4QWN0aW9ucyBmcm9tICcuLi9pbmRleC1hY3Rpb25zJztcbmltcG9ydCB7IE5vdGlmeU1lIH0gZnJvbSBcIi4uL2NvbW1vbi9ub3RpZnlNZVwiO1xuaW1wb3J0IHsgcHVzaCB9IGZyb20gJ3JlYWN0LXJvdXRlci1yZWR1eCc7XG5cbmV4cG9ydCBjb25zdCBvbkNoYW5nZUlucHV0ID0gKHsgdmFsdWUgfSkgPT4gKHtcbiAgICB0eXBlOiBhVC5TRVRfSU5QVVRfVEFHUyxcbiAgICBkYXRhOiB7IHZhbHVlIH1cbn0pXG5cblxuXG5leHBvcnQgY29uc3Qgc2V0QXJ0aWNsZSA9ICh7IGFydGljbGVzIH0pID0+ICh7XG4gICAgdHlwZTogYVQuU0VUX0FSVElDTEVTLFxuICAgIGRhdGE6IGFydGljbGVzXG59KVxuXG5cblxuZXhwb3J0IGNvbnN0IGZldGNoTW9yZUxpbmtzID0gKHsgdGFnIH0pID0+IHtcbiAgICByZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xuICAgICAgICBpZighdGFnKXtcbiAgICAgICAgICAgIHJldHVybiBOb3RpZnlNZSgnd2FybmluZycsIFwiSW5wdXQgdGFnIGlzIGVtcHR5LlwiKVxuICAgICAgICB9XG4gICAgICAgIHZhciB7YXJ0aWNsZXMsIHByaW1hcnlfdGFnfSA9IGdldFN0YXRlKCkuYXJ0aWNsZXM7XG5cbiAgICAgICAgY29uc3QgbW9yZV9jb3VudCA9IDEwO1xuICAgICAgICBsZXQgY291bnQgPSBhcnRpY2xlcy5sZW5ndGggKyBtb3JlX2NvdW50O1xuICAgICAgICBpZiggcHJpbWFyeV90YWcgIT09IHRhZyl7XG4gICAgICAgICAgICBjb3VudCA9IG1vcmVfY291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgX2RhdGEgPSB7dGFnLCBjb3VudH07XG4gICAgICAgIF9kYXRhW2NvbmZpZy5UT0tFTl0gPSBsc19nZXQoY29uZmlnLlRPS0VOKTtcbiAgICAgICAgc29ja2V0LmVtaXQoYVRTLkZFVENIX01PUkVfTElOS1MsIF9kYXRhICk7XG4gICAgICAgIFxuICAgICAgICBpZiAoIHByaW1hcnlfdGFnICE9PSB0YWcpIHtcblxuICAgICAgICAgICAgZGlzcGF0Y2goc2V0UHJpbWFyeVRhZyh7IHRhZyB9KSk7ICAvL3NldCBwcmltYXJ5IHRhZ1xuICAgICAgICAgICAgZGlzcGF0Y2goc2V0QXJ0aWNsZSh7IGFydGljbGVzOiBbXSB9KSk7XG4gICAgICAgICAgICBkaXNwYXRjaChzZXRGaWx0ZXJlZEFydGljbGVzKHsgYXJ0aWNsZXM6IFtdIH0pKTtcbiAgICAgICAgICAgIGRpc3BhdGNoKHNldFJlbGF0ZWRUYWdzKHsgcmVsYXRlZF90YWdzOiBbXSB9KSk7XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBkaXNwYXRjaChpbmRleEFjdGlvbnMucHVzaEFjdGl2aXR5KHsga2V5d29yZDogdGFnIH0pKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1vcmVfY291bnQ7IGkrKykge1xuICAgICAgICAgICAgZGlzcGF0Y2goX3B1c2hBcnRpY2xlKHtcbiAgICAgICAgICAgICAgICBhcnRpY2xlOiB7XG4gICAgICAgICAgICAgICAgICAgIGNyYXdsX3N0YXR1czogJ3dhaXQnLFxuICAgICAgICAgICAgICAgICAgICBpZGVudGlmaWVyOiAnJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKVxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3Qgc2V0UmVsYXRlZFRhZ3MgPSAoeyByZWxhdGVkX3RhZ3MgfSkgPT4gKHtcbiAgICB0eXBlOiBhVC5TRVRfQVZBSUxBQkxFX1RBR1MsXG4gICAgZGF0YTogcmVsYXRlZF90YWdzXG59KVxuXG5leHBvcnQgY29uc3Qgb25DaGFuZ2VGaWx0ZXJJbnB1dCA9ICh7IGtleSwgdmFsdWUgfSkgPT4gKHtcbiAgICB0eXBlOiBhVC5TRVRfRklMVEVSX0lOUFVULFxuICAgIGRhdGE6IHsga2V5LCB2YWx1ZSB9XG59KVxuXG5leHBvcnQgY29uc3Qgc2V0U2hvd0ZpbHRlcmVkID0gKHsgc3RhdHVzIH0pID0+ICh7XG4gICAgdHlwZTogYVQuU0VUX1NIT1dfRklMVEVSRUQsXG4gICAgZGF0YTogc3RhdHVzXG59KVxuXG5leHBvcnQgY29uc3Qgc2V0RmlsdGVyZWRBcnRpY2xlcyA9ICh7IGFydGljbGVzIH0pID0+ICh7XG4gICAgdHlwZTogYVQuU0VUX0ZJTFRFUkVEX0FSVElDTEVTLFxuICAgIGRhdGE6IGFydGljbGVzXG59KVxuXG5cblxuZXhwb3J0IGNvbnN0IGZldGNoUmVzcG9uc2VzID0gKHsgaWQgfSkgPT4ge1xuICAgIHJldHVybiBkaXNwYXRjaCA9PiB7XG4gICAgICAgIHNvY2tldC5lbWl0KGFUUy5HRVRfUkVTUE9OU0VTLCB7IGlkIH0pXG4gICAgfVxufTtcblxuXG5leHBvcnQgY29uc3Qgc2V0QmxvZ1Jlc3BvbnNlID0gKHsgYmxvZ19yZXNwb25zZSB9KSA9PiAoe1xuICAgIHR5cGU6IGFULlNFVF9CTE9HX1JFU1BPTlNFLFxuICAgIGRhdGE6IGJsb2dfcmVzcG9uc2Vcbn0pO1xuXG5leHBvcnQgY29uc3Qgc2V0UHJpbWFyeVRhZyA9ICh7IHRhZyB9KSA9PiAoe1xuICAgIHR5cGU6IGFULlNFVF9QUklNQVJZX1RBRyxcbiAgICBkYXRhOiB0YWdcbn0pXG5cbmV4cG9ydCBjb25zdCBwdXNoUGVuZGluZ0FydGljbGVMaXN0ID0gKHtsaW5rc30pID0+IHtcbiAgICByZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xuICAgICAgICBjb25zdCB7YXJ0aWNsZXMgfSA9IGdldFN0YXRlKCkuYXJ0aWNsZXM7XG4gICAgICAgIFxuICAgICAgICBsaW5rcyA9IGxpbmtzLmZpbHRlcihpdGVtID0+IHtcbiAgICAgICAgICAgIGxldCBzdGF0dXMgPSB0cnVlO1xuICAgICAgICAgICAgZm9yKGxldCBpPTA7IGk8IGFydGljbGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICBpZihpdGVtLmlkID09PSBhcnRpY2xlc1tpXS5pZGVudGlmaWVyICl7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdGF0dXM7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvcihsZXQgaT0wIDtpIDwgbGlua3MubGVuZ3RoIDsgaSsrKXtcbiAgICAgICAgICAgIGxpbmtzW2ldLmNyYXdsX3N0YXR1cyA9ICdwZW5kaW5nJztcbiAgICAgICAgICAgIGRpc3BhdGNoKHB1c2hQZW5kaW5nQXJ0aWNsZSh7YXJ0aWNsZSA6IGxpbmtzW2ldIH0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlYWNoZWQgaGVyZS4nKTtcbiAgICAgICAgICAgIGRpc3BhdGNoKCBzdGFydENyYXdsaW5nKCkgKTtcbiAgICAgICAgfSwgMTAwMCk7XG4gICAgfVxufVxuXG5jb25zdCBwdXNoUGVuZGluZ0FydGljbGUgPSAoe2FydGljbGV9KSA9PiAoe1xuICAgIHR5cGUgOiBhVC5QVVNIX0FSVElDTEUsXG4gICAgZGF0YSA6IGFydGljbGVcbn0pXG5cbmNvbnN0IF9pbmRleE9mRmlyc3RQZW5kaW5nID0gKGFydGljbGVzKSA9PiB7XG4gICAgbGV0IGluZGV4ID0gdW5kZWZpbmVkO1xuICAgIGZvcihsZXQgaT0wOyBpPCBhcnRpY2xlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGlmKGFydGljbGVzW2ldLmNyYXdsX3N0YXR1cyA9PT0gJ3BlbmRpbmcnKXtcbiAgICAgICAgICAgIGluZGV4ID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbn1cbmV4cG9ydCBjb25zdCBzdGFydENyYXdsaW5nID0gKCkgPT4ge1xuICAgIHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XG4gICAgICAgIGNvbnN0IHthcnRpY2xlcywgcHJpbWFyeV90YWd9ID0gZ2V0U3RhdGUoKS5hcnRpY2xlcztcbiAgICAgICAgY29uc3QgaW5kZXggPSBfaW5kZXhPZkZpcnN0UGVuZGluZyhhcnRpY2xlcyk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdpbmRleCA6ICcsIGluZGV4KTtcbiAgICAgICAgaWYoaW5kZXggIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICBjb25zdCB7dXJsLCBpZH0gPSBhcnRpY2xlc1tpbmRleF07XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW0NSQVdMSU5HIFNUQVJURURdOiAnLCB1cmwpO1xuICAgICAgICAgICAgc29ja2V0LmVtaXQoYVRTLkNSQVdMX1NUT1JZLCB7dXJsLGlkLCB0YWcgOiBwcmltYXJ5X3RhZ30pO1xuICAgICAgICAgICAgZGlzcGF0Y2gocHVzaENyYXdsaW5nQXJ0aWNsZSh7XG4gICAgICAgICAgICAgICAgY3Jhd2xfc3RhdHVzIDogJ2NyYXdsaW5nJyxcbiAgICAgICAgICAgICAgICBpbmRleCBcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY29uc3QgcHVzaENyYXdsaW5nQXJ0aWNsZSA9IChkYXRhKSA9PiAoe1xuICAgIHR5cGUgOiBhVC5QVVNIX0FSVElDTEUsXG4gICAgZGF0YSBcbn0pXG5cbmV4cG9ydCBjb25zdCBwdXNoQXJ0aWNsZSA9ICh7IGFydGljbGUgfSkgPT4ge1xuICAgIHJldHVybiBkaXNwYXRjaCA9PiB7XG4gICAgICAgIGRpc3BhdGNoKF9wdXNoQXJ0aWNsZSh7IGFydGljbGUgfSkpO1xuICAgIH1cbn07XG5cbmV4cG9ydCBjb25zdCBfcHVzaEFydGljbGUgPSAoeyBhcnRpY2xlIH0pID0+ICh7XG4gICAgdHlwZTogYVQuUFVTSF9BUlRJQ0xFLFxuICAgIGRhdGE6IGFydGljbGVcbn0pO1xuXG5cbmV4cG9ydCBjb25zdCBmZXRjaEh0bWwgPSAoe3VybCB9KSA9PiB7XG4gICAgcmV0dXJuIGRpc3BhdGNoID0+IHtcbiAgICAgICAgc29ja2V0LmVtaXQoYVRTLkJMT0dfSFRNTCwge3VybH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IHNldEJsb2dIdG1sID0gKHtibG9nX2h0bWx9KSA9PiAoe1xuICAgIHR5cGUgOiBhVC5TRVRfQkxPR19IVE1MLFxuICAgIGRhdGEgOiBibG9nX2h0bWxcbn0pXG5leHBvcnQgY29uc3Qgc2V0QmxvZ1N0eWxlID0gKHtibG9nX3N0eWxlfSkgPT4gKHtcbiAgICB0eXBlIDogYVQuU0VUX0JMT0dfU1RZTEUsXG4gICAgZGF0YSA6IGJsb2dfc3R5bGVcbn0pXG5cbmV4cG9ydCBjb25zdCBnb1RvID0gKHtyb3V0ZX0pID0+IHtcbiAgICByZXR1cm4gZGlzcGF0Y2ggPT4ge1xuICAgICAgICBkaXNwYXRjaChwdXNoKHJvdXRlKSk7XG4gICAgfVxufSIsImZ1bmN0aW9uIGFsbF92YWx1ZXNfYXJyYXkoeyBuZXdhcnIsIGFyciB9KSB7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG5cdFx0aWYgKGlzX2FycmF5KGFycltpXSkpIHtcblx0XHRcdGFsbF92YWx1ZXNfYXJyYXkoeyBuZXdhcnIsIGFycjogYXJyW2ldIH0pO1xuXG5cdFx0fSBlbHNlIGlmIChpc19vYmooYXJyW2ldKSkge1xuXHRcdFx0YWxsX3ZhbHVlc19vYmplY3QoeyBuZXdhcnIsIG9iajogYXJyW2ldIH0pO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdG5ld2Fyci5wdXNoKGFycltpXSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGlzX2FycmF5KHZhbCkge1xuXHRyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbCkgPT09IFwiW29iamVjdCBBcnJheV1cIjtcbn1cbmZ1bmN0aW9uIGlzX29iaih2YWwpIHtcblx0cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWwpID09PSBcIltvYmplY3QgT2JqZWN0XVwiO1xufVxuXG5cbmZ1bmN0aW9uIGFsbF92YWx1ZXNfb2JqZWN0KHsgbmV3YXJyLCBvYmogfSkge1xuXG5cdGNvbnN0IG9ial92YWwgPSBPYmplY3QudmFsdWVzKG9iaik7XG5cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBvYmpfdmFsLmxlbmd0aDsgaSsrKSB7XG5cblx0XHRpZiAoaXNfYXJyYXkob2JqX3ZhbFtpXSkpIHtcblx0XHRcdGFsbF92YWx1ZXNfYXJyYXkoeyBuZXdhcnIsIGFycjogb2JqX3ZhbFtpXSB9KTtcblxuXHRcdH0gZWxzZSBpZiAoaXNfb2JqKG9ial92YWxbaV0pKSB7XG5cdFx0XHRhbGxfdmFsdWVzX29iamVjdCh7IG5ld2Fyciwgb2JqOiBvYmpfdmFsW2ldIH0pO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdG5ld2Fyci5wdXNoKG9ial92YWxbaV0pO1xuXHRcdH1cblx0fVxuXG59XG5cbmZ1bmN0aW9uIGdldEFsbE5lc3RlZFZhbHVlcyhvYmopIHtcblx0bGV0IG5ld2FyciA9IFtdO1xuXHRhbGxfdmFsdWVzX29iamVjdCh7IG5ld2FycjogbmV3YXJyLCBvYmo6IG9iaiB9KTtcblx0cmV0dXJuIG5ld2Fycjtcbn1cblxuY29uc3QgZXhwb3J0X29iaiA9IHtcbiAgICBnZXRBbGxOZXN0ZWRWYWx1ZXMgOiBnZXRBbGxOZXN0ZWRWYWx1ZXNcbn1cblxuZXhwb3J0IGRlZmF1bHQgZXhwb3J0X29iajsiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0ICcuL2ZpbHRlci5zY3NzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgKiBhcyBhY3Rpb25zIGZyb20gJy4uL2FydGljbGUtYWN0aW9ucyc7XG5pbXBvcnQgX3V0aWxzIGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcblxuXG5jbGFzcyBGaWx0ZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uQ2hhbmdlID0gZSA9PiB7XG4gICAgICAgIGNvbnN0IGtleSA9IGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWtleW5hbWVcIik7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZS50YXJnZXQudmFsdWUgfHwgZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtdmFsdWVcIik7XG4gICAgICAgIHRoaXMucHJvcHMuYWN0aW9ucy5vbkNoYW5nZUZpbHRlcklucHV0KHsga2V5LCB2YWx1ZSB9KTtcbiAgICAgICAgaWYoIWUudGFyZ2V0LnZhbHVlKXtcbiAgICAgICAgICAgIHRoaXMub25GaWx0ZXIoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlZmluZVNlYXJjaE9iaiA9IChvYmopID0+IHtcbiAgICAgICAgY29uc3QgZmlsdGVyZWQgPSB7fTtcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKG9ialtrZXlzW2ldXSkgeyBmaWx0ZXJlZFtrZXlzW2ldXSA9IG9ialtrZXlzW2ldXTsgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWx0ZXJlZDtcbiAgICB9XG5cbiAgICBmaWx0ZXJGdW5jdGlvbiA9ICh7IG9iaiwgZmlsdGVyT2JqIH0pID0+IHtcbiAgICAgICAgb2JqID0gb2JqLmZpbHRlcihpdGVtID0+IGl0ZW0uY3Jhd2xfc3RhdHVzID09PSAnc3VjY2VzcycpO1xuICAgICAgICBjb25zdCBmaWx0ZXJPYmpfa2V5cyA9IE9iamVjdC5rZXlzKGZpbHRlck9iaik7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiZmlsdGVyT2JqX2tleXM6IFwiLCBmaWx0ZXJPYmpfa2V5cyk7XG5cbiAgICAgICAgY29uc3QgcmV0dXJub2JqZWN0ID0gb2JqLmZpbHRlcihpdGVtID0+IHtcblxuICAgICAgICAgICAgbGV0IHJldHVybl9ib29sID0gdHJ1ZTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWx0ZXJPYmpfa2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IF9rZXkgPSBmaWx0ZXJPYmpfa2V5c1tpXTtcbiAgICAgICAgICAgICAgICBsZXQgX3ZhbHVlID0gZmlsdGVyT2JqW2ZpbHRlck9ial9rZXlzW2ldXTtcblxuICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoX3ZhbHVlKSA9PT0gXCJbb2JqZWN0IFN0cmluZ11cIikge1xuICAgICAgICAgICAgICAgICAgICBfdmFsdWUgPSBfdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZihfa2V5ID09PSAnd29yZCcpe1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21iaW5lZCA9IF91dGlscy5nZXRBbGxOZXN0ZWRWYWx1ZXMob2JqKS5qb2luKCcgJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGNvbWJpbmVkLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihfdmFsdWUpID09PSAtMSl7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5fYm9vbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfWVsc2V7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1bX2tleV0udG9Mb3dlckNhc2UoKS5pbmRleE9mKF92YWx1ZSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5fYm9vbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuX2Jvb2w7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmV0dXJub2JqZWN0O1xuICAgIH1cblxuICAgIG9uRmlsdGVyID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB7IGZpbHRlciwgYXJ0aWNsZXMgfSA9IHRoaXMucHJvcHMuYXJ0aWNsZXM7XG5cbiAgICAgICAgY29uc3QgZmlsdGVyT2JqID0gdGhpcy5yZWZpbmVTZWFyY2hPYmooZmlsdGVyKTtcbiAgICAgICAgY29uc3QgZmlsdGVyZWRfYXJ0aWNsZXMgPSB0aGlzLmZpbHRlckZ1bmN0aW9uKHsgb2JqOiBhcnRpY2xlcywgZmlsdGVyT2JqIH0pO1xuICAgICAgICB0aGlzLnByb3BzLmFjdGlvbnMuc2V0RmlsdGVyZWRBcnRpY2xlcyh7IGFydGljbGVzOiBmaWx0ZXJlZF9hcnRpY2xlcyB9KTtcbiAgICAgICAgdGhpcy5wcm9wcy5hY3Rpb25zLnNldFNob3dGaWx0ZXJlZCh7IHN0YXR1czogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgZmlsdGVyIH0gPSB0aGlzLnByb3BzLmFydGljbGVzO1xuXG4gICAgICAgIGNvbnN0IHJlZmluZWQgPSB0aGlzLnJlZmluZVNlYXJjaE9iaihmaWx0ZXIpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZygncmVmaW5lZDogJywgcmVmaW5lZCk7XG4gICAgICAgIGNvbnN0IF9zZWFyY2ggPSA8ZGl2XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJpbnB1dC1ncm91cC1wcmVwZW5kXCI+XG4gICAgICAgICAgICA8c3BhbiBvbkNsaWNrPXt0aGlzLm9uRmlsdGVyfSBjbGFzc05hbWU9XCJpbnB1dC1ncm91cC10ZXh0XCIgc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiBcIndoaXRlXCIgfX0+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtc2VhcmNoXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2Rpdj47XG4gICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImZpbHRlci13cmFwcGVyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZpbHRlci1ib2R5XCI+XG4gICAgICAgICAgICAgICAgPGhlYWRlcj5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiaDZcIj5GaWx0ZXJzPC9wPlxuICAgICAgICAgICAgICAgIDwvaGVhZGVyPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmlsdGVyLXByZXZpZXdcIj5cblxuICAgICAgICAgICAgICAgICAgICB7T2JqZWN0LmtleXMocmVmaW5lZCkubWFwKF9rZXkgPT4gKDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgIGtleT17X2tleS50b1N0cmluZygpICsgKG5ldyBEYXRlKCkpLmdldFRpbWUoKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1saWdodCBidG4tc21cIlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1rZXluYW1lPXtfa2V5fVxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5vbkNoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9JydcbiAgICAgICAgICAgICAgICAgICAgPntyZWZpbmVkW19rZXldfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAmbmJzcDsmbmJzcDs8aSBjbGFzc05hbWU9XCJmYSBmYS1jbG9zZSBcIiA+PC9pPiA8L2J1dHRvbj4pKX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZmllbGRzXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1ncm91cCBtYi0zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlNlcmFjaCB3b3JkIGluIGNvbXBsZXRlIGFydGljbGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtmaWx0ZXIud29yZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWtleW5hbWU9XCJ3b3JkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbktleVVwPXtlID0+IHsgaWYgKGUua2V5Q29kZSA9PT0gMTMpIHsgdGhpcy5vbkZpbHRlcigpOyB9IH19XG4gICAgICAgICAgICAgICAgICAgICAgICAvPntfc2VhcmNofVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1ncm91cCBtYi0zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkJ5IEtleXdvcmRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEta2V5bmFtZT1cImtleXdvcmRzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17ZmlsdGVyLmtleXdvcmRzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uS2V5VXA9e2UgPT4geyBpZiAoZS5rZXlDb2RlID09PSAxMykgeyB0aGlzLm9uRmlsdGVyKCk7IH0gfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+e19zZWFyY2h9XG5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXAgbWItM1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJCeSBoZWFkbGluZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1rZXluYW1lPVwiaGVhZGxpbmVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtmaWx0ZXIuaGVhZGxpbmV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25DaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25LZXlVcD17ZSA9PiB7IGlmIChlLmtleUNvZGUgPT09IDEzKSB7IHRoaXMub25GaWx0ZXIoKTsgfSB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgLz57X3NlYXJjaH1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXAgbWItM1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJCeSBBdXRob3JcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEta2V5bmFtZT1cImF1dGhvclwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2ZpbHRlci5hdXRob3J9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25DaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25LZXlVcD17ZSA9PiB7IGlmIChlLmtleUNvZGUgPT09IDEzKSB7IHRoaXMub25GaWx0ZXIoKTsgfSB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgLz57X3NlYXJjaH1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXAgbWItM1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJCeSBwdWJsaXNoZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEta2V5bmFtZT1cInB1Ymxpc2hlclwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2ZpbHRlci5wdWJsaXNoZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25DaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25LZXlVcD17ZSA9PiB7IGlmIChlLmtleUNvZGUgPT09IDEzKSB7IHRoaXMub25GaWx0ZXIoKTsgfSB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgLz57X3NlYXJjaH1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj47XG4gICAgfVxufVxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSBzdGF0ZSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXJ0aWNsZXM6IHN0YXRlLmFydGljbGVzXG4gICAgfVxufVxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gZGlzcGF0Y2ggPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFjdGlvbnM6IGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25zLCBkaXNwYXRjaClcbiAgICB9XG59XG5cbkZpbHRlci5wcm9wVHlwZXMgPSB7XG4gICAgYXJ0aWNsZXM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgIGlucHV0X3RhZzogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgYXZhaWxhYmxlX3RhZ3M6IFByb3BUeXBlcy5hcnJheSxcbiAgICAgICAgYXJ0aWNsZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgICAgICAgcHJpbWFyeV90YWc6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGZpbHRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICAgIHdvcmQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgICAgICB0YWdzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICAgICAgaGVhZGxpbmU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgICAgICBhdXRob3I6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgICAgICBwdWJsaXNoZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgICAgICBpZGVudGlmaWVyOiBQcm9wVHlwZXMuc3RyaW5nXG4gICAgICAgIH0pLFxuICAgICAgICBmaWx0ZXJlZF9hcnRpY2xlczogUHJvcFR5cGVzLmFycmF5LFxuICAgICAgICBzaG93X2ZpbHRlcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgYmxvZ19yZXNwb25zZTogUHJvcFR5cGVzLnN0cmluZ1xuICAgIH0pLFxuICAgIHVzZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgIGFjdGl2aXR5OiBQcm9wVHlwZXMuYXJyYXlcbiAgICB9KSxcbiAgICBhY3Rpb25zOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKEZpbHRlcik7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAnLi9sb2FkZXIuc2Nzcyc7XG5cblxuY29uc3QgTG9hZGVyID0gKCkgPT4ge1xuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImxvYWRlci13cmFwcGVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGhyZWVfZG90X2xvYWRlclwiPjwvZGl2PlxuICAgIDwvZGl2PlxufVxuXG5leHBvcnQgZGVmYXVsdCBMb2FkZXI7IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCAnLi9tYWluLnNjc3MnO1xuaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tICcuLi9hcnRpY2xlLWFjdGlvbnMnO1xuaW1wb3J0IFJlYWN0SHRtbFBhcnNlciBmcm9tICdyZWFjdC1odG1sLXBhcnNlcic7XG5pbXBvcnQgTG9hZGVyIGZyb20gJy4uLy4uL2NvbW1vbi9sb2FkZXInO1xuaW1wb3J0IHsgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuY2xhc3MgTWFpbiBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgc2hvd19qc29uOiBcIlwiLFxuICAgICAgICAgICAgc2hvd19zdWdnZXN0aW9uOiBmYWxzZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIGNvbnN0IGlucHV0VGFnRWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYWluLWJvZHkgaW5wdXRbZGF0YS10eXBlPWlucHV0X3RhZ10nKTtcbiAgICAgICAgaW5wdXRUYWdFbGVtLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c2luXCIsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93X3N1Z2dlc3Rpb246IHRydWUgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpbnB1dFRhZ0VsZW0uYWRkRXZlbnRMaXN0ZW5lcihcImZvY3Vzb3V0XCIsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93X3N1Z2dlc3Rpb246IGZhbHNlIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvbkNoYW5nZSA9IGUgPT4ge1xuICAgICAgICBjb25zdCB0eXBlID0gZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS10eXBlJyk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZS50YXJnZXQudmFsdWU7XG4gICAgICAgIHRoaXMucHJvcHMuYWN0aW9ucy5vbkNoYW5nZUlucHV0KHsgdHlwZSwgdmFsdWUgfSk7XG4gICAgfVxuXG4gICAgb25UYWdDbGljayA9IGUgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnb24gdGFnIGNsaWNrZWQ6ICcpO1xuICAgICAgICB0aGlzLnByb3BzLmFjdGlvbnMub25DaGFuZ2VJbnB1dCh7IHZhbHVlOiBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXByaW1hcnktdGFnJykgfSk7XG4gICAgICAgIHRoaXMucHJvcHMuYWN0aW9ucy5mZXRjaE1vcmVMaW5rcyh7IHRhZzogZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1wcmltYXJ5LXRhZycpIH0pO1xuICAgIH1cblxuICAgIGZldGNoTW9yZUxpbmtzID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB7IGlucHV0X3RhZyB9ID0gdGhpcy5wcm9wcy5hcnRpY2xlcztcbiAgICAgICAgdGhpcy5wcm9wcy5hY3Rpb25zLmZldGNoTW9yZUxpbmtzKHsgdGFnOiBpbnB1dF90YWcgfSk7XG4gICAgfVxuXG4gICAgcmVmaW5lT2JqID0gb2JqID0+IHtcbiAgICAgICAgY29uc3QgZmlsdGVyZWQgPSB7fTtcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKG9ialtrZXlzW2ldXSkgeyBmaWx0ZXJlZFtrZXlzW2ldXSA9IG9ialtrZXlzW2ldXTsgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWx0ZXJlZDtcbiAgICB9XG5cbiAgICBoaWdobGlnaHQgPSBjb250ZW50ID0+IHtcbiAgICAgICAgbGV0IGZpbHRlcl9vYmogPSB0aGlzLnByb3BzLmFydGljbGVzLmZpbHRlcjtcbiAgICAgICAgbGV0IGZpbHRlcl9rZXlzID0gT2JqZWN0LnZhbHVlcyh0aGlzLnJlZmluZU9iaihmaWx0ZXJfb2JqKSk7XG4gICAgICAgIGxldCBuZXdfY29udGVudCA9IGNvbnRlbnQ7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsdGVyX2tleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG5ld19jb250ZW50ID0gbmV3X2NvbnRlbnQudG9Mb3dlckNhc2UoKS5yZXBsYWNlKGZpbHRlcl9rZXlzW2ldLnRvTG93ZXJDYXNlKCksIGA8c3BhbiBjbGFzcz1cImhpZ2hsaWdodFwiPiAke2ZpbHRlcl9rZXlzW2ldfTwvc3Bhbj5gKTtcbiAgICAgICAgfVxuICAgICAgICBuZXdfY29udGVudCA9IFJlYWN0SHRtbFBhcnNlcihuZXdfY29udGVudCk7XG4gICAgICAgIHJldHVybiBuZXdfY29udGVudDtcbiAgICB9XG5cbiAgICBzaG93X2pzb24gPSBlID0+IHRoaXMuc2V0U3RhdGUoeyBzaG93X2pzb246IGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWRlbnRpZmllcicpIH0pO1xuICAgIGhpZGVfanNvbiA9ICgpID0+IHRoaXMuc2V0U3RhdGUoeyBzaG93X2pzb246ICcnIH0pO1xuXG4gICAgY2hhbmdlVGFiID0gZSA9PiB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS10YWJcIik7XG4gICAgICAgIGlmICh0eXBlID09PSAnYWxsJykgdGhpcy5wcm9wcy5hY3Rpb25zLnNldFNob3dGaWx0ZXJlZCh7IHN0YXR1czogZmFsc2UgfSk7XG4gICAgICAgIGlmICh0eXBlID09PSAnZmlsdGVyZWQnKSB0aGlzLnByb3BzLmFjdGlvbnMuc2V0U2hvd0ZpbHRlcmVkKHsgc3RhdHVzOiB0cnVlIH0pO1xuICAgIH1cblxuICAgIG9wZW5BcnRpY2xlID0gZSA9PiB7XG4gICAgICAgIGNvbnN0IGlkID0gZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1pZGVudGlmaWVyJyk7XG4gICAgICAgIC8vIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKCcvYXJ0aWNsZS8nICsgaWQpO1xuICAgICAgICB0aGlzLnByb3BzLmFjdGlvbnMuZ29Ubyh7cm91dGUgOiAnL2FydGljbGUvJyArIGlkIH0pO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBzaG93X2pzb24sIHNob3dfc3VnZ2VzdGlvbiB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgY29uc3QgeyBhY3Rpdml0eSB9ID0gdGhpcy5wcm9wcy51c2VyO1xuICAgICAgICBjb25zdCB7IGlucHV0X3RhZywgYXJ0aWNsZXMsIGF2YWlsYWJsZV90YWdzLCBzaG93X2ZpbHRlcmVkLCBmaWx0ZXJlZF9hcnRpY2xlcyB9ID0gdGhpcy5wcm9wcy5hcnRpY2xlcztcbiAgICAgICAgY29uc3QgaGwgPSB0aGlzLmhpZ2hsaWdodDtcblxuXG4gICAgICAgIGNvbnN0IGFjdGl2aXR5X2ZpbHRlcmVkID0gYWN0aXZpdHkuZmlsdGVyKGl0ZW0gPT4gaXRlbS5pbmRleE9mKGlucHV0X3RhZykgIT09IC0xKTtcblxuICAgICAgICBjb25zdCBhcnRpY2xlTWFwID0gKGl0ZW0sIGkpID0+IHtcblxuXG4gICAgICAgICAgICBpZiAoaXRlbS5jcmF3bF9zdGF0dXMgPT09ICd3YWl0JykgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiY2FyZFwiIGtleT17aXRlbS50b1N0cmluZygpICsgaX0gPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1ib2R5IHdpdGhsb2FkZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsb2FkZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMb2FkZXIgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj47XG5cblxuICAgICAgICAgICAgaWYgKGl0ZW0uY3Jhd2xfc3RhdHVzID09PSAncGVuZGluZycpIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImNhcmRcIiBrZXk9e2l0ZW0udG9TdHJpbmcoKSArIGl9ID5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQtYm9keSB3aXRobG9hZGVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibG9hZGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJib2xkXCI+e1wiPHBlbmRpbmc+XCJ9IDwvc3Bhbj57aXRlbS5oZWFkbGluZX1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgaWYgKGl0ZW0uY3Jhd2xfc3RhdHVzID09PSAnY3Jhd2xpbmcnKSByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJjYXJkXCIga2V5PXtpdGVtLnRvU3RyaW5nKCkgKyBpfSA+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkLWJvZHkgd2l0aGxvYWRlclwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxvYWRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiYm9sZFwiPntcIjxjcmF3bGluZz5cIn08L3NwYW4+IHtpdGVtLmhlYWRsaW5lfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICBpZiAoaXRlbS5jcmF3bF9zdGF0dXMgPT09ICdlcnInKSByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJjYXJkXCIga2V5PXtpdGVtLnRvU3RyaW5nKCkgKyBpfSA+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiY2VudGVyXCI+PHNwYW4gY2xhc3NOYW1lPVwiYm9sZFwiPntcIjxGZXRjaCBmYWlsIC8+XCJ9PC9zcGFuPjwvcD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PjtcblxuICAgICAgICAgICAgaWYgKHNob3dfanNvbiA9PT0gaXRlbS5pZGVudGlmaWVyKSB7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJjYXJkXCIga2V5PXtpdGVtLnRvU3RyaW5nKCkgKyBpfSA+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cHJlID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMuaGlkZV9qc29ufT5TaG93IGxlc3M8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7SlNPTi5zdHJpbmdpZnkoaXRlbSwgdW5kZWZpbmVkLCAyKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvcHJlPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImNhcmRcIiBrZXk9e2l0ZW0udG9TdHJpbmcoKSArIGl9ID5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQtYm9keVwiPlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGVyby1zZWN0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImltYWdlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e2l0ZW0uaW1hZ2V9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGVhZGVyVGV4dFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGVhZGluZ1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7LyogPGEgaHJlZj17aXRlbS51cmx9IHRhcmdldD1cIl9ibGFua1wiPiAqL31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaWRlbnRpZmllcj17aXRlbS5pZGVudGlmaWVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5vcGVuQXJ0aWNsZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzTmFtZT1cImNhcmQtdGl0bGVcIj5be2kgKyAxfV0mbmJzcDt7aGwoaXRlbS5oZWFkbGluZSl9PC9oNj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLWlkZW50aWZpZXI9e2l0ZW0uaWRlbnRpZmllcn0gb25DbGljaz17dGhpcy5zaG93X2pzb259PiZuYnNwOyZuYnNwOzxpIGNsYXNzTmFtZT1cImZhIGZhLWV4cGFuZFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZXRhLWRldGFpbHNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzTmFtZT1cInRleHQtbXV0ZWRcIj5BdXRob3I6IHtobChpdGVtLmF1dGhvcil9PC9zbWFsbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzTmFtZT1cInRleHQtbXV0ZWRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERhdGVQdWJsaXNoZWQ6IHsobmV3IERhdGUoRGF0ZS5wYXJzZShpdGVtLmRhdGVQdWJsaXNoZWQpKSkudG9Mb2NhbGVEYXRlU3RyaW5nKCl9PC9zbWFsbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzTmFtZT1cInRleHQtbXV0ZWRcIj5QdWJsaXNoZXI6IHtobChpdGVtLnB1Ymxpc2hlcil9PC9zbWFsbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzTmFtZT1cImJvbGRcIj5GZXRjaF90aW1lOiB7aXRlbS5mZXRjaF90aW1lIC8gKDEwMDApfSBzZWM8L3NtYWxsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGVyby1kZXRhaWxzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImFydGljbGUtZGVzY3JpcHRpb25cIj57aGwoaXRlbS5kZXNjcmlwdGlvbil9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9J2FydGljbGUtdGFncyc+VGFncyA6ICZuYnNwO1xue1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0ua2V5d29yZHMuc3BsaXQoJywnKS5tYXAodGFnID0+IDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tbGlnaHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e3RhZyArIGl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aGwodGFnKX08L2J1dHRvbj4pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IG5vQXJ0aWNsZSA9IDxkaXYgY2xhc3NOYW1lPVwiY2FyZFwiICA+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQtYm9keVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibm8tYXJ0aWNsZVwiPlxuICAgICAgICAgICAgICAgICAgICBFbnRlciBrZXl3b3JkIGFuZCBzdGFydCBjcmF3bGluZyFcbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj47XG5cbiAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwibWFpbi13cmFwcGVyXCIgaWQ9XCJtYWluY3Jhd2xlclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYWluLWJvZHlcIj5cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udHJvbC13cmFwcGVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udHJvbC1ib2R5XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWdyb3VwXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRW50ZXIgdGFnXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdHlwZT1cImlucHV0X3RhZ1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aW5wdXRfdGFnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25DaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbktleVVwPXtlID0+IHsgaWYgKGUua2V5Q29kZSA9PT0gMTMpIHsgdGhpcy5mZXRjaE1vcmVMaW5rcygpOyB9IH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuZmV0Y2hNb3JlTGlua3N9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImlucHV0LWdyb3VwLXByZXBlbmRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXAtdGV4dFwiID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLXNlYXJjaFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICZuYnNwOyZuYnNwO3thcnRpY2xlcy5sZW5ndGggPyBcIkZldGNoIG1vcmVcIiA6ICdGZXRjaCBhcnRpY2xlcyd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN1Z2dlc3Rpb25zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3Nob3dfc3VnZ2VzdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGFjdGl2aXR5X2ZpbHRlcmVkLm1hcChpdGVtID0+ICg8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJhY3Rpdml0eU1hcFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2l0ZW0gKyBuZXcgRGF0ZSgpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wcmltYXJ5LXRhZz17aXRlbS50b0xvd2VyQ2FzZSgpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5vblRhZ0NsaWNrfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+IHtpdGVtfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4pKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogPG5vc2NyaXB0IC8+fVxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImF2YWlsYWJsZS10YWdzLXdyYXBwZXJcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImF2YWlsYWJsZS10YWdzLWJvZHlcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+UmVsYXRlZCBUYWdzOiAmbmJzcDsgJm5ic3A7PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVfdGFncy5sZW5ndGggJiYgYXZhaWxhYmxlX3RhZ3MubWFwKChpdGVtLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tbGlnaHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2l0ZW0gKyBpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXByaW1hcnktdGFnPXtpdGVtfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uVGFnQ2xpY2t9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1zZWFyY2hcIiBhcmlhLWhpZGRlbj1cInRydWVcIiAvPiAmbmJzcDsge2l0ZW19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvc3Qtd3JhcHBlclwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9zdC1ib2R5XCI+XG5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvc3QtYm9keS10YWJzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLXRhYj1cImFsbFwiIG9uQ2xpY2s9e3RoaXMuY2hhbmdlVGFifSBjbGFzc05hbWU9e3Nob3dfZmlsdGVyZWQgPyAnJyA6IFwiYWN0aXZlXCJ9PkFsbDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtdGFiPVwiZmlsdGVyZWRcIiBvbkNsaWNrPXt0aGlzLmNoYW5nZVRhYn0gY2xhc3NOYW1lPXshc2hvd19maWx0ZXJlZCA/ICcnIDogXCJhY3RpdmVcIn0+RmlsdGVyZWQ8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG5cbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgIXNob3dfZmlsdGVyZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGFydGljbGVzLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGFydGljbGVzLm1hcChhcnRpY2xlTWFwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG5vQXJ0aWNsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZmlsdGVyZWRfYXJ0aWNsZXMubWFwKGFydGljbGVNYXApXG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFydGljbGVzLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IDxkaXYgY2xhc3NOYW1lPVwiY2FyZCBcIiA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1ib2R5IGxvYWQtbW9yZVwiIG9uQ2xpY2s9e3RoaXMuZmV0Y2hNb3JlTGlua3N9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+TG9hZCAxMCBNb3JlIGl0ZW1zPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gOiA8bm9zY3JpcHQgLz5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj47XG5cbiAgICB9XG59XG5cblxuXG5cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gc3RhdGUgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFydGljbGVzOiBzdGF0ZS5hcnRpY2xlcyxcbiAgICAgICAgdXNlcjogc3RhdGUudXNlclxuICAgIH1cbn1cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IGRpc3BhdGNoID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhY3Rpb25zOiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9ucywgZGlzcGF0Y2gpXG4gICAgfVxufVxuXG5NYWluLnByb3BUeXBlcyA9IHtcbiAgICBhcnRpY2xlczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgaW5wdXRfdGFnOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBhdmFpbGFibGVfdGFnczogUHJvcFR5cGVzLmFycmF5LFxuICAgICAgICBhcnRpY2xlczogUHJvcFR5cGVzLmFycmF5LFxuICAgICAgICBwcmltYXJ5X3RhZzogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgZmlsdGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgICAgd29yZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgICAgIHRhZ3M6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgICAgICBoZWFkbGluZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgICAgIGF1dGhvcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgICAgIHB1Ymxpc2hlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgICAgIGlkZW50aWZpZXI6IFByb3BUeXBlcy5zdHJpbmdcbiAgICAgICAgfSksXG4gICAgICAgIGZpbHRlcmVkX2FydGljbGVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgICAgIHNob3dfZmlsdGVyZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgICAgICBibG9nX3Jlc3BvbnNlOiBQcm9wVHlwZXMuc3RyaW5nXG4gICAgfSksXG4gICAgdXNlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgYWN0aXZpdHk6IFByb3BUeXBlcy5hcnJheVxuICAgIH0pLFxuICAgIGFjdGlvbnM6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcykod2l0aFJvdXRlcihNYWluKSk7IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycyB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCBjb25maWcgZnJvbSAnLi4vLi4vLi4vY29uZmlnJztcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi4vYXV0aC9hdXRoLWFjdGlvbnMnO1xuaW1wb3J0IHsgbHNfZ2V0IH0gZnJvbSAnLi4vc2VydmljZXMvbHMtc2VydmljZSc7XG5pbXBvcnQgRmlsdGVyIGZyb20gJy4vZmlsdGVyL2ZpbHRlcic7XG5pbXBvcnQgJy4vaG9tZS5zY3NzJztcbmltcG9ydCBNYWluIGZyb20gJy4vbWFpbi9tYWluJztcblxuXG5jbGFzcyBIb21lIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICByZW5kZXIoKSB7XG5cblxuICAgICAgICBpZiAoIWxzX2dldChjb25maWcuVE9LRU4pKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmFjdGlvbnMuZ29Ubyh7cm91dGUgOiAnL3NpZ25vdXQnfSk7XG4gICAgICAgICAgICAvLyBoaXN0b3J5LnB1c2goXCIvc2lnbm91dFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImhvbWUtd3JhcHBlclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXItZmx1aWQgaG9tZS1ib2R5XCI+XG4gICAgICAgICAgICAgICAgPEZpbHRlciAvPlxuICAgICAgICAgICAgICAgIDxNYWluIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+O1xuICAgIH1cbn1cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gc3RhdGUgPT4ge1xuICAgIHJldHVybiB7XG4gICAgfVxufVxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gZGlzcGF0Y2ggPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFjdGlvbnM6IGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25zLCBkaXNwYXRjaClcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKEhvbWUpOyIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycyB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCAnLi9ibG9nLnNjc3MnO1xuaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tICcuLi9ob21lL2FydGljbGUtYWN0aW9ucyc7XG5pbXBvcnQgTG9hZGVyIGZyb20gJy4uL2NvbW1vbi9sb2FkZXInO1xuXG5jbGFzcyBCbG9nIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBpZDogJycsXG4gICAgICAgICAgICBhcnRpY2xlOiB7fVxuICAgICAgICB9XG4gICAgfVxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBjb25zdCB7IGFydGljbGVzIH0gPSB0aGlzLnByb3BzLmFydGljbGVzO1xuICAgICAgICBjb25zdCB7IHBhdGhuYW1lIH0gPSB0aGlzLnByb3BzLmxvY2F0aW9uO1xuICAgICAgICBjb25zdCBfYXJyID0gcGF0aG5hbWUuc3BsaXQoJy8nKTtcbiAgICAgICAgY29uc3QgaWQgPSBfYXJyW19hcnIubGVuZ3RoIC0gMV0udHJpbSgpO1xuICAgICAgICBjb25zdCBhcnRpY2xlX2FyciA9IGFydGljbGVzLmZpbHRlcihpdGVtID0+IGl0ZW0uaWRlbnRpZmllciA9PT0gaWQpO1xuXG4gICAgICAgIGlmIChhcnRpY2xlX2Fyci5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2lkLCBhcnRpY2xlIDogYXJ0aWNsZV9hcnJbMF0gfSk7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmFjdGlvbnMuZmV0Y2hIdG1sKHsgdXJsOiBhcnRpY2xlX2FyclswXS51cmwgfSk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgICBjb25zdCBibG9nX2JvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmxvZy1ib2R5LWNvbnRlbnQnKTtcbiAgICAgICAgY29uc3QgeyBibG9nX2h0bWwsIGJsb2dfc3R5bGUsIGJsb2dfcmVzcG9uc2UgfSA9IHRoaXMucHJvcHMuYXJ0aWNsZXM7XG5cbiAgICAgICAgaWYgKHByZXZQcm9wcy5hcnRpY2xlcy5ibG9nX2h0bWwgIT09IGJsb2dfaHRtbCkge1xuICAgICAgICAgICAgaWYgKGJsb2dfaHRtbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICAgICAgZGl2LmlkID0gXCJyb290XCI7XG4gICAgICAgICAgICAgICAgZGl2LmlubmVySFRNTCA9IGJsb2dfaHRtbFxuICAgICAgICAgICAgICAgIGJsb2dfYm9keS5hcHBlbmRDaGlsZChkaXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wcm9wcy5hY3Rpb25zLmZldGNoUmVzcG9uc2VzKHsgaWQgOiB0aGlzLnN0YXRlLmlkIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByZXZQcm9wcy5hcnRpY2xlcy5ibG9nX3N0eWxlICE9PSBibG9nX3N0eWxlKSB7XG4gICAgICAgICAgICBpZiAoYmxvZ19zdHlsZSkge1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLmlubmVySFRNTCA9IGJsb2dfc3R5bGU7XG4gICAgICAgICAgICAgICAgICAgIGJsb2dfYm9keS5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmIChwcmV2UHJvcHMuYXJ0aWNsZXMuYmxvZ19yZXNwb25zZSAhPT0gYmxvZ19yZXNwb25zZSkge1xuICAgICAgICAgICAgY29uc3QgYmxvZ19ib2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Jsb2ctYm9keS1yZXNwb25zZXMnKTtcblxuICAgICAgICAgICAgaWYgKGJsb2dfcmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgICAgIGRpdi5jbGFzc05hbWUgPSAncmVzcG9uc2VzU3RyZWFtIGpzLXJlc3BvbnNlc1N0cmVhbU90aGVyJztcbiAgICAgICAgICAgICAgICBkaXYuaW5uZXJIVE1MID0gYmxvZ19yZXNwb25zZTtcbiAgICAgICAgICAgICAgICBibG9nX2JvZHkuYXBwZW5kQ2hpbGQoZGl2KTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcbiAgICAgICAgICAgICAgICBsaW5rLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuICAgICAgICAgICAgICAgIGxpbmsuY3Jvc3NPcmlnaW4gPSAnYW5vbnltb3VzJztcbiAgICAgICAgICAgICAgICBsaW5rLmhyZWYgPSBcImh0dHBzOi8vY2RuLXN0YXRpYy0xLm1lZGl1bS5jb20vXy9mcC9jc3MvbWFpbi1icmFuZGluZy1iYXNlLjQ5T09zcVZZd19NNDk1T29CRGNHNEEuY3NzXCI7XG4gICAgICAgICAgICAgICAgYmxvZ19ib2R5LmFwcGVuZENoaWxkKGxpbmspO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICB0aGlzLnByb3BzLmFjdGlvbnMuc2V0QmxvZ1Jlc3BvbnNlKHsgYmxvZ19yZXNwb25zZTogXCJcIiB9KTtcbiAgICAgICAgdGhpcy5wcm9wcy5hY3Rpb25zLnNldEJsb2dIdG1sKHsgYmxvZ19odG1sOiBcIlwiIH0pO1xuICAgICAgICB0aGlzLnByb3BzLmFjdGlvbnMuc2V0QmxvZ1N0eWxlKHsgYmxvZ19zdHlsZTogXCJcIiB9KTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IGlkLCBhcnRpY2xlIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBjb25zdCB7IGJsb2dfcmVzcG9uc2UsIGJsb2dfaHRtbCB9ID0gdGhpcy5wcm9wcy5hcnRpY2xlcztcblxuICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJibG9nLXdyYXBwZXJcIj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2lkID8gXCJibG9nLWJvZHlcIiA6IFwiYmxvZy1ib2R5IGhpZGRlblwifT5cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdiYXNpYy1pbmZvJz5cbiAgICAgICAgICAgICAgICAgICAgT3JpZ2luYWwgVXJsIDogPGEgaHJlZj17YXJ0aWNsZS51cmx9PnthcnRpY2xlLnVybH08L2E+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAhYmxvZ19odG1sID8gPExvYWRlciAvPiA6IDxub3NjcmlwdCAvPlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiYmxvZy1ib2R5LWNvbnRlbnRcIiAgPlxuXG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cImJsb2ctYm9keS1yZXNwb25zZXNcIiAgPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YmxvZ19yZXNwb25zZSA/IFwibG9hZGVyIGhpZGRlblwiIDogXCJsb2FkZXJcIn0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TG9hZGVyIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtpZCA/IFwibm90LWZvdW5kIGhpZGRlblwiIDogXCJub3QtZm91bmRcIn0gPlxuICAgICAgICAgICAgICAgIDxoNT4gT29wcyEgRmV0Y2ggYXJ0aWNsZSBmaXJzdC48L2g1PlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPC9kaXY+XG4gICAgfVxufVxuXG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IHN0YXRlID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBsb2NhdGlvbjogc3RhdGUucm91dGVyLmxvY2F0aW9uLFxuICAgICAgICBhcnRpY2xlczogc3RhdGUuYXJ0aWNsZXNcbiAgICB9XG59XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IGRpc3BhdGNoID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhY3Rpb25zOiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9ucywgZGlzcGF0Y2gpXG5cbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcykod2l0aFJvdXRlcihCbG9nKSk7IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFN3aXRjaCB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5pbXBvcnQgeyBSb3V0ZSB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IEF1dGggZnJvbSAnLi9hdXRoL2F1dGgnO1xuaW1wb3J0IFNpZ25vdXQgZnJvbSAnLi9hdXRoL3NpZ25vdXQnO1xuaW1wb3J0IEhvbWUgZnJvbSAnLi9ob21lL2hvbWUnO1xuaW1wb3J0IEJsb2cgZnJvbSAnLi9ibG9nL2Jsb2cnO1xuXG5cbmNsYXNzIFJvdXRlcyBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIC8vIGNvbnN0IHsgc3RvcmUgfSA9IHRoaXMucHJvcHM7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKDxTd2l0Y2g+XG4gICAgICAgICAgICA8Um91dGUgcGF0aD0nL3NpZ25pbicgY29tcG9uZW50PXtBdXRofSAvPlxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9Jy9zaWdub3V0JyBjb21wb25lbnQ9e1NpZ25vdXQgfSAvPlxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9Jy9hcnRpY2xlLzppZCcgY29tcG9uZW50PXtCbG9nfSAvPlxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9Jy8nIGNvbXBvbmVudD17SG9tZX0gLz5cbiAgICAgICAgPC9Td2l0Y2g+KTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlczsiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IE5hdmJhciBmcm9tICcuL2NvbW1vbi9uYXZiYXIvbmF2YmFyJztcbmltcG9ydCBSb3V0ZXMgZnJvbSAnLi9yb3V0ZXMnO1xuaW1wb3J0ICogYXMgdXNlckFjdGlvbiBmcm9tICcuL2luZGV4LWFjdGlvbnMnO1xuXG5cbmNsYXNzIEluZGV4IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcyl7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcblxuICAgICAgICBjb25zdCB7IHN0b3JlIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBzdG9yZS5kaXNwYXRjaCh1c2VyQWN0aW9uLmdldEFjdGl2aXR5KCkpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBzdG9yZSB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgcmV0dXJuIChcblxuICAgICAgICAgICAgPE5hdmJhciA+XG4gICAgICAgICAgICAgICAgPFJvdXRlcyBzdG9yZT17c3RvcmV9IC8+XG4gICAgICAgICAgICA8L05hdmJhcj5cblxuICAgICAgICApO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW5kZXg7IiwiaW1wb3J0IHsgQ29ubmVjdGVkUm91dGVyIH0gZnJvbSAnY29ubmVjdGVkLXJlYWN0LXJvdXRlcic7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgJy4vQXBwLnNjc3MnO1xuaW1wb3J0IEluZGV4IGZyb20gJy4vY29tcG9uZW50cy9pbmRleCc7XG5pbXBvcnQgJy4vc29ja2V0SGFuZGxlcic7IC8vZm9yIGhhbmRsaW5nIHNvY2tldCBjb25uZWN0aW9uc1xuaW1wb3J0IHsgaGlzdG9yeSwgc3RvcmUgfSBmcm9tICcuL3N0b3JlJztcblxuY2xhc3MgQXBwIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuXG4gIHJlbmRlcigpIHtcbiAgICBcbiAgICByZXR1cm4gKFxuICAgICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG5cbiAgICAgICAgPENvbm5lY3RlZFJvdXRlciBoaXN0b3J5PXtoaXN0b3J5fT5cblxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiQXBwXCI+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8SW5kZXggc3RvcmU9e3N0b3JlfSAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPC9Db25uZWN0ZWRSb3V0ZXI+XG4gICAgICA8L1Byb3ZpZGVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBwO1xuXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwJztcbmltcG9ydCByZWdpc3RlclNlcnZpY2VXb3JrZXIgZnJvbSAnLi9yZWdpc3RlclNlcnZpY2VXb3JrZXInO1xuXG5SZWFjdERPTS5yZW5kZXIoPEFwcCAvPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKSk7XG4vLyByZWdpc3RlclNlcnZpY2VXb3JrZXIoKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=